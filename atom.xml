<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haldir的博客</title>
  <subtitle>get busy living</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haldir65.github.io/"/>
  <updated>2017-11-25T15:55:29.696Z</updated>
  <id>https://haldir65.github.io/</id>
  
  <author>
    <name>Haldir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端速查手册</title>
    <link href="https://haldir65.github.io/2017/11/25/2017-11-25-front-end-cook-book/"/>
    <id>https://haldir65.github.io/2017/11/25/2017-11-25-front-end-cook-book/</id>
    <published>2017-11-25T15:26:29.000Z</published>
    <updated>2017-11-25T15:55:29.696Z</updated>
    
    <content type="html"><![CDATA[<p>每一个领域都有些不知道该放哪的零碎的点，这里开辟一个新的地方，作为前端杂乱知识的汇总。<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100729187.jpg?imageView2/2/w/600" alt=""></p>
<a id="more"></a>
<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100809920.jpg?imageView2/2/w/600" alt=""></p>
<h2 id="html一些容易忽视的点"><a href="#html一些容易忽视的点" class="headerlink" title="html一些容易忽视的点"></a>html一些容易忽视的点</h2><p>p tag 里面能够放一个小的Strong tag<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You Know <span class="tag">&lt;<span class="name">strong</span>&gt;</span>No<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Mystery<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>亲测，这些tag不分大小的，不是说div就一定是最外面的parent<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">  new css PlayGround</div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Vanilla-js要点"><a href="#Vanilla-js要点" class="headerlink" title="Vanilla js要点"></a>Vanilla js要点</h2><h2 id="css要点"><a href="#css要点" class="headerlink" title="css要点"></a>css要点</h2><h2 id="jQuery要点"><a href="#jQuery要点" class="headerlink" title="jQuery要点"></a>jQuery要点</h2><h2 id="Vue知识点"><a href="#Vue知识点" class="headerlink" title="Vue知识点"></a>Vue知识点</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/lith/IMG_0766.jpg?imageView2/2/w/600" alt=""></p>
<p><strong><em>再过几天就要生日了，想到又要变老，挺舍不得的。<br>送给，这两年来的你，不负韶华</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一个领域都有些不知道该放哪的零碎的点，这里开辟一个新的地方，作为前端杂乱知识的汇总。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100729187.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>从DroidPlugin谈插件化开发</title>
    <link href="https://haldir65.github.io/2017/11/22/2017-11-22-from-Droid-plugin-onto-more/"/>
    <id>https://haldir65.github.io/2017/11/22/2017-11-22-from-Droid-plugin-onto-more/</id>
    <published>2017-11-22T14:33:44.000Z</published>
    <updated>2017-11-24T13:59:04.759Z</updated>
    
    <content type="html"><![CDATA[<p>关于360团队出开源的<a href="https://github.com/DroidPluginTeam/DroidPlugin">DroidPlugin</a>的一些记录<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery15111006999.jpg?imageView2/2/w/600" alt=""></p>
<p>过程中发现了关于插件化，Hook系统方法的操作，摘录下来。<br><a id="more"></a></p>
<h2 id="1-从Context的本质说起"><a href="#1-从Context的本质说起" class="headerlink" title="1. 从Context的本质说起"></a>1. 从Context的本质说起</h2><p>其实也简单，就是ContextImpl，一个各种资源的容器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Activity extends ContextThemeWrapper</div><div class="line">ContextThemeWrapper extends ContextWrapper</div><div class="line">ContextWrapper extends Context</div></pre></td></tr></table></figure></p>
<p>Activity作为一个天然的交互核心，能够以一个容器的身份（继承而来）轻易获取这些外部资源，也使得基于UI页面的开发变得简单。<br>如果对于ActivityThread有所了解的话，就知道Activity的生命周期都是在这个类中完成的<br>简单来说在ContextImpl中createActivityContext方法中使用new的方式创建了一个ContextImpl，整个流程就是ActivityThread在创建一个Activity后，给它不断赋值的过程。ContextImpl只是一个各种资源的容器（比如Resource,Display,PackageInfo,构造函数里面塞了一些，创建出来之后还给一些变量赋了值）。</p>
<p>Hook(使用Invokcation handler，将一个接口的调用原本的实现包揽下来，把原来的结果占为己有，同时添加一些自己要做的事情)<a href="http://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/">修改getSystemService，添加自定义功能</a><br>Hook掉AMS,在startActivity里面添加一些私货</p>
<h3 id="1-1-ActivityThread做了很多事"><a href="#1-1-ActivityThread做了很多事" class="headerlink" title="1.1 ActivityThread做了很多事"></a>1.1 ActivityThread做了很多事</h3><p>onSaveInstance是从ActivityThread的callCallActivityOnSaveInstanceState方法dispatch下来的。</p>
<h2 id="2-Hook作为插件化的切入点给了开发者篡改系统api实现的通道"><a href="#2-Hook作为插件化的切入点给了开发者篡改系统api实现的通道" class="headerlink" title="2. Hook作为插件化的切入点给了开发者篡改系统api实现的通道"></a>2. Hook作为插件化的切入点给了开发者篡改系统api实现的通道</h2><p><a href="http://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/">比如Hook掉剪切板SystemService</a>,<br><a href="http://weishu.me/2016/03/07/understand-plugin-framework-ams-pms-hook/">比如在ActivityManagerService调用IPC操作时添加私货</a></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery2a2241cc5c1278cf7a28f15f91dbbb7f.jpg?imageView2/2/w/600" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/tiann/understand-plugin-framework">分析DroidPlugin，深入理解插件化框架</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于360团队出开源的&lt;a href=&quot;https://github.com/DroidPluginTeam/DroidPlugin&quot;&gt;DroidPlugin&lt;/a&gt;的一些记录&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery15111006999.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;过程中发现了关于插件化，Hook系统方法的操作，摘录下来。&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
      <category term="插件化" scheme="https://haldir65.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>集成Tinker的一些记录</title>
    <link href="https://haldir65.github.io/2017/11/18/2017-11-18-integrating-tinker/"/>
    <id>https://haldir65.github.io/2017/11/18/2017-11-18-integrating-tinker/</id>
    <published>2017-11-18T09:25:29.000Z</published>
    <updated>2017-11-24T13:59:04.756Z</updated>
    
    <content type="html"><![CDATA[<p>关于Android Application集成Tinker的一次记录。<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/single-yellow-beauty-flower-on-the-fence-wallpaper-56801fde208df.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<h2 id="1-首先从官方Demo项目开始"><a href="#1-首先从官方Demo项目开始" class="headerlink" title="1. 首先从官方Demo项目开始"></a>1. 首先从官方Demo项目开始</h2><p><a href="https://github.com/Tencent/tinker">Tinker</a>是2016年开源的，先直接clone下来。<br>我的环境：</p>
<blockquote>
<p>Android Studio 3.0 稳定版<br>gradle版本：distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip<br>gradle插件版本:  classpath ‘com.android.tools.build:gradle:3.0.0’<br>TINKER_VERSION=1.9.1<br>compileSdkVersion 26<br>buildToolsVersion ‘26.0.2’</p>
</blockquote>
<p>Android Studio 3.0 因为刚出来，所以遇到了一些问题，不过好在Google一下或者在issue里面查一下，都能找到合适的解答</p>
<p><a href="https://github.com/Tencent/tinker/tree/master/tinker-sample-android">官方Demo</a><br>先把官方Demo按照普通App的流程安装上来。<br>这时候在app/build/bakApk/目录下就会出现“app-debug-1118-15-50-07.apk”这样的文件，其实是复制了一份当前的apk</p>
<p>然后，在MainActivity代码中，把原本注释掉的一行Log取消注释，运行如下命令</p>
<blockquote>
<p>gradlew tinkerPatchDebug<br>或者在Andriod Studio的Gradle tab里面找到这个task，运行一下</p>
</blockquote>
<p>打releasePatch其实也差不多</p>
<blockquote>
<p>gradlew tinkerRelease</p>
</blockquote>
<p>一切顺利的话，在<br>app/build/outputs/apk/tinkerPatch/debug文件夹下就会看到一些新生成的文件，例如<br>“app/build/outputs/apk/tinkerPatch/debug/patch_signed.apk”，<br>“app/build/outputs/apk/tinkerPatch/debug/patch_signed_7zip.apk”<br>等等，具体每个文件是干嘛的文档上都说了。<br>这时候通过adb push命令把这个7zip文件上传到手机根目录下</p>
<blockquote>
<p>adb push ./app/build/outputs/tinkerPatch/debug/patch_signed_7zip.apk /storage/sdcard0/patch_signed_7zip.apk<br>或者在Android Studio 3.0右下角有一个Device File Explorer,把这个文件上传到手机里</p>
</blockquote>
<p>上面那个路径不一定准，总之需要和这里面的路径一样，所以我在模拟器里面是sdcard/emulated/0这个目录下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), Environment.getExternalStorageDirectory().getAbsolutePath() + <span class="string">"/patch_signed_7zip.apk"</span>);</div></pre></td></tr></table></figure></p>
<p>上传完毕之后，在当前页面点击Button，点击事件调用到上面这一行代码.<br>一切Ok的话（运气好的话），会出现Toast,其实这个Toast是在SampleResultService（一个IntentService）里面写的，也就是说Patch打上的话，开发者可以自定义一些UI事件。</p>
<p>这时候再Kill Porcess,据说锁屏也行？<br>重新启动后，刚才取消注释的那一行代码就在logcat里面出现了。</p>
<p>到此，在没有重新打包的情况下，热修复完成。</p>
<h2 id="2-已有的项目改造"><a href="#2-已有的项目改造" class="headerlink" title="2. 已有的项目改造"></a>2. 已有的项目改造</h2><p>照着改成这样<br>在Gradle.properties里面添加</p>
<blockquote>
<p>TINKER_VERSION = 1.9.1 //只是为了集中管理<br>TINKER_ID = 1.0 //这个不添加会报错</p>
</blockquote>
<p>project的build.gradle中添加</p>
<blockquote>
<p> classpath “com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}”</p>
</blockquote>
<p>app的build.gradle中需要新增很多东西，建议直接<a href="https://github.com/Tencent/tinker/blob/master/tinker-sample-android/app/build.gradle">复制</a>过来。<br>需要改的地方就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    tinkerOldApkPath = &quot;$&#123;bakPath&#125;/app-debug-1118-15-50-07.apk&quot;</div><div class="line">    // 找到当前app/build/bakApk/目录下的apk文件，把名字改成自己和当前的文件一样的</div><div class="line">&#125;</div><div class="line"></div><div class="line">ignoreWarning = true //默认是false，不改经常编译报错</div><div class="line"></div><div class="line">implementation(&quot;com.tencent.tinker:tinker-android-lib:$&#123;TINKER_VERSION&#125;&quot;) &#123; changing = true &#125;</div><div class="line">provided(&quot;com.tencent.tinker:tinker-android-anno:$&#123;TINKER_VERSION&#125;&quot;)</div><div class="line">annotationProcessor(&quot;com.tencent.tinker:tinker-android-anno:$&#123;TINKER_VERSION&#125;&quot;)</div></pre></td></tr></table></figure></p>
<p>接下来是Application，如果自己继承了android.app.Application的话，得改一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原来</span></div><div class="line"><span class="keyword">public</span> MyApplication extends Application&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//现在</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line"><span class="meta">@DefaultLifeCycle</span>(application = <span class="string">"com.包名.SomeName"</span>,</div><div class="line">        flags = ShareConstants.TINKER_ENABLE_ALL,</div><div class="line">        loadVerifyFlag = <span class="keyword">false</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppLike</span> <span class="keyword">extends</span> <span class="title">DefaultApplicationLike</span> </span>&#123;</div><div class="line">     <span class="keyword">static</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppLike</span><span class="params">(Application application, <span class="keyword">int</span> tinkerFlags, <span class="keyword">boolean</span> tinkerLoadVerifyFlag,</div><div class="line">                   <span class="keyword">long</span> applicationStartElapsedTime, <span class="keyword">long</span> applicationStartMillisTime, Intent tinkerResultIntent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * install multiDex before install tinker</div><div class="line">     * so we don't need to put the tinker lib classes in the main dex</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> base</div><div class="line">     */</span></div><div class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBaseContextAttached</span><span class="params">(Context base)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onBaseContextAttached(base);</div><div class="line">        <span class="comment">//you must install multiDex whatever tinker is installed!</span></div><div class="line">        MultiDex.install(base);</div><div class="line">        AppLike.context = getApplication();</div><div class="line">        <span class="comment">//初始化Tinker</span></div><div class="line">        TinkerInstaller.install(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerActivityLifecycleCallbacks</span><span class="params">(Application.ActivityLifecycleCallbacks callback)</span> </span>&#123;</div><div class="line">        getApplication().registerActivityLifecycleCallbacks(callback);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> context;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Mainfest里面要改成上面那个“com.包名.SomeName”</div></pre></td></tr></table></figure></p>
<p>接下来按照之前的步骤就Ok了。</p>
<h2 id="3-Configuration"><a href="#3-Configuration" class="headerlink" title="3. Configuration"></a>3. Configuration</h2><p>以上只是简单的把Demo跑通，接下里需要看下Tinker提供的定制项</p>
<p>=======================================================================</p>
<h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. 常见问题</h2><p>Q: 我只不过改了一个Toast的文案，为毛生成的patch_signed_7zip.apk文件这么大()？<br>A: 看下tinkerPatch文件夹下面的log.txt文件（建议用Notepad打开），里面一大堆“Found add resource: res/drawable-hdpi-v4/abc_list_pressed_holo_light.9.png”这样的类似的出现，具体原因跟aapt有关，好像可以设置detect resource change （大概就这意思）为false，这样就不会那么大了。</p>
<p>Q: Tinker-Patch把补丁文件放在什么位置<br>A: 因为接收补丁的代码就在TinkerInstaller.onReceiveUpgradePatch这一段了。在UpgradePatchRetry.java中，有这么一段：tempPatchFile = new File(SharePatchFileUtil.getPatchTempDirectory(context), TEMP_PATCH_NAME); （/data/data/com.example.myApp/data/tinker_temp/temp.apk）。当然还有其他的，总之就是放在当前应用data文件夹下面的tinker或者tinker_temp文件夹下。</p>
<p>Q: TinkerPatch和Tinker什么关系<br>A：TinkerPatch的SDK里面包含了Tinker必要的功能，开发者只需要添加TinkerPatch这一条依赖，也不需要去继承ApplicationLike这些东西了，开发者不用自己开一个下载服务去下发patch_signed_7zip.apk这个文件了，onReceiveUpgradePatch这些事也做好了。确实是接入成本最低的方案，搭建后台假如交由自己公司的API团队处理，起码得好几天，还得耽误产品正常的开发节奏。而TinkerPatch给出的报价是399元/月。短期来看，显然前者的成本要高出不少，还得顾虑自家团队维护的代价。算一笔经济账的话，显然企业倾向于花钱买稳定服务。对于个人来讲，目前有免费版可以使用，估计也是为了给测试Demo使用的，想玩简单版的话可以试试。</p>
<p>Q: 如何更换Dex的<br>A: 引用<a href="http://w4lle.com/2016/12/16/tinker/index.html">Android热补丁之Tinker原理解析</a>中的话：“由于Tinker的方案是基于Multidex实现的修改dexElements的顺序实现的，所以最终还是要修改classLoder中dexPathList中dexElements的顺序。Android中有两种ClassLoader用于加载dex文件，BootClassLoader、PathClassLoader和DexClassLoader都是继承自BaseDexClassLoader。最终在DexPathList的findClass中遍历dexElements，谁在前面用谁。”。所以其实就是根据下发的补丁文件，把dex文件给修改了，这一点跟MultiDex很像。</p>
<p>=======================================================================</p>
<h2 id="5-源码解析"><a href="#5-源码解析" class="headerlink" title="5. 源码解析"></a>5. 源码解析</h2><p>至少我现在看到7个包：</p>
<blockquote>
<p>com.tencent.tinker:aosp-dexutils:1.91.@jar<br>com.tencent.tinker:bsdiff-util:1.91.@jar<br>com.tencent.tinker:tinker-android-anno:1.91.@jar<br>com.tencent.tinker:tinker-android-lib:1.91.@jar<br>com.tencent.tinker:tinker-android-loader:1.91.@jar<br>com.tencent.tinker:tinker-commons:1.91.@jar<br>com.tencent.tinker:tinker-ziputils:1.91.@jar</p>
</blockquote>
<h1 id="分的这么散估计也是希望能够好扩展吧。"><a href="#分的这么散估计也是希望能够好扩展吧。" class="headerlink" title="分的这么散估计也是希望能够好扩展吧。"></a>分的这么散估计也是希望能够好扩展吧。</h1><p>网上关于源码解析的文章已经很多，有时间看看，应该不难。</p>
<p>看一下官方Tinker项目中的文件夹，有一个tinker-build，里面有两个python文件，这就很有意思了。再看看tinker-patch-gradle-plugin，里面一大堆groovy文件，所以看懂这个对于gradle插件开发是有好处的。</p>
<h1 id="目前在1-9-1版本里面好像看到了一个tinkerFastCrashProtect，看来也是跟风天猫快速修复启动保护那一套。"><a href="#目前在1-9-1版本里面好像看到了一个tinkerFastCrashProtect，看来也是跟风天猫快速修复启动保护那一套。" class="headerlink" title="目前在1.9.1版本里面好像看到了一个tinkerFastCrashProtect，看来也是跟风天猫快速修复启动保护那一套。"></a>目前在1.9.1版本里面好像看到了一个<em>tinkerFastCrashProtect</em>，看来也是跟风天猫快速修复启动保护那一套。</h1><p>关于Tinker-Patch这个外包给第三方的服务，纯属好奇就去看了下url到底长什么样。在<a href="https://github.com/TinkerPatch/tinkerpatch-sdk/blob/master/tinkerpatch-sdk/src/main/java/com/tencent/tinker/server/client/TinkerClientAPI.java">TinkerClientAPI</a>里面有这么一段，其实跟Tinker本身庞大的架构比起来，已经算不上什么了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Uri.Builder urlBuilder = Uri.parse(<span class="keyword">this</span>.host).buildUpon(); <span class="comment">// "http://q.tinkerpatch.com"</span></div><div class="line">        <span class="keyword">if</span> (clientAPI.debug) &#123;</div><div class="line">            urlBuilder.appendPath(<span class="string">"dev"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> String url = urlBuilder.appendPath(<span class="keyword">this</span>.appKey)</div><div class="line">            .appendPath(<span class="keyword">this</span>.appVersion)</div><div class="line">            .appendQueryParameter(<span class="string">"d"</span>, versionUtils.id())</div><div class="line">            .appendQueryParameter(<span class="string">"v"</span>, String.valueOf(System.currentTimeMillis()))</div><div class="line">            .build().toString();</div></pre></td></tr></table></figure></p>
<p>除此之外，为了能够在测试环境验证补丁，还提供了一个<a href="https://github.com/TinkerPatch/tinkerpatch-debug-tool">小工具</a></p>
<p>很感谢鹅厂能够将Tinker这样的工具开源出来造福广大开发者，抛开技术上的实力不说，能够一直积极维护也是一件了不起的事情。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://jp1017.top/2016/11/25/%E5%BE%AE%E4%BF%A1%E7%83%AD%E4%BF%AE%E5%A4%8Dtinker%E5%8F%8Atinker-server%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5/">微信热修复tinker及tinker-server快速接入</a></li>
<li><a href="https://github.com/TinkerPatch/tinkerpatch-sdk">TinkerPatch</a>，其实就是帮你把下发“patch_signed_7zip.apk”这个文件的活干了，还给了非常直观的报表，收费也是合情合理。</li>
<li><a href="http://w4lle.com/2016/12/16/tinker/index.html">Android热补丁之Tinker原理解析</a>，这篇文章基本将整个流程都讲清楚了</li>
<li><a href="http://blog.csdn.net/huweigoodboy/article/details/62428170">热更新Tinker研究（三）：加载补丁</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286384&amp;idx=1&amp;sn=f1aff31d6a567674759be476bcd12549&amp;scene=4#wechat_redirect">微信Tinker的一切都在这里，包括源码</a></li>
<li><a href="https://www.youtube.com/watch?v=v4Ewjq6r9XI">Enabling Android Teams: Dex Ed by Jesse Wilson</a>Jesse Wilson谈Dex文件的结构，可惜视频清晰度垃圾</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Android Application集成Tinker的一次记录。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/single-yellow-beauty-flower-on-the-fence-wallpaper-56801fde208df.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
      <category term="热修复" scheme="https://haldir65.github.io/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>css操作手册</title>
    <link href="https://haldir65.github.io/2017/10/29/2017-10-29-pure-css/"/>
    <id>https://haldir65.github.io/2017/10/29/2017-10-29-pure-css/</id>
    <published>2017-10-29T14:46:52.000Z</published>
    <updated>2017-11-27T14:34:21.442Z</updated>
    
    <content type="html"><![CDATA[<p><strong>css使用记录及速查手册</strong><br><img src="http://odzl05jxx.bkt.clouddn.com/beautiful-red-rose-petals-wallpaper-56801fc038122.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><p>css基本语法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">SELECTOR</span> <span class="selector-tag">DECLARATION</span></div><div class="line"><span class="selector-id">#page-header</span> &#123; <span class="attribute">font-szie </span>: <span class="number">10px</span>;&#125;</div><div class="line"><span class="comment">/*对了，我找了半天，发现这个page-header和大括号之间有没有空格无所谓的*/</span></div><div class="line"><span class="selector-id">#page-header</span>&#123; <span class="attribute">font-szie </span>: <span class="number">10px</span>;&#125;</div><div class="line"><span class="comment">/*也就是这么写也无所谓，反正最终部署都会删掉空格*/</span></div></pre></td></tr></table></figure></p>
<p>例如<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.better</span>&#123;</div><div class="line">  <span class="attribute">background-color</span>: gray;</div><div class="line">  <span class="attribute">border</span>: none <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。</strong></p>
<h2 id="2-引用方式"><a href="#2-引用方式" class="headerlink" title="2. 引用方式"></a>2. 引用方式</h2><p>html中引用css有三种方式:</p>
<ul>
<li><p>InLine Styling(内联样式)  只在非常特殊的情况下才使用</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'content'</span> <span class="attr">style</span>=<span class="string">"position: absolute; top:0; left:0; width: 100%"</span>&gt;</span>Inline style are bad<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Embedded style sheets(嵌入样式) 在当前页面中添加一个样式，不能复用</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Embedded style<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></div><div class="line">  <span class="selector-tag">p</span>&#123;</div><div class="line">    <span class="attribute">font-size </span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="selector-class">.welcome</span>&#123;</div><div class="line">    <span class="attribute">color</span>: blue;</div><div class="line">  &#125;</div><div class="line"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> now every p tag in this page will have my style<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"welcome"</span>&gt;</span> this one will have blue text color<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>External style sheets(外部样式)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Embedded style<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/syntax.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> now every p tag in this page will have my style<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>注意上面那个rel表示relation.</strong></p>
<h2 id="3-选择器及优先级，各种Selector的写法"><a href="#3-选择器及优先级，各种Selector的写法" class="headerlink" title="3. 选择器及优先级，各种Selector的写法"></a>3. 选择器及优先级，各种Selector的写法</h2><p><strong>派生选择器，两种不同的效果</strong></p>
<h3 id="3-1-基于类的，很多时候看到中间有一个空格，意思就是在前者的基础上，再加上一些限定条件进行查找"><a href="#3-1-基于类的，很多时候看到中间有一个空格，意思就是在前者的基础上，再加上一些限定条件进行查找" class="headerlink" title="3.1 基于类的，很多时候看到中间有一个空格，意思就是在前者的基础上，再加上一些限定条件进行查找"></a>3.1 基于类的，很多时候看到中间有一个空格，意思就是在前者的基础上，再加上一些限定条件进行查找</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"fancy"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">td</span><span class="selector-class">.fancy</span> &#123;</div><div class="line"><span class="attribute">color</span>: <span class="number">#f60</span>;</div><div class="line"><span class="attribute">background</span>: <span class="number">#666</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有class是fancy的td将是带有灰色背景的橙色。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'fancy'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.fancy</span> <span class="selector-tag">td</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#f60</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#666</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有class是fancy的元素，里面的td都将是带有灰色背景的橙色。</p>
<h3 id="3-2-基于id的"><a href="#3-2-基于id的" class="headerlink" title="3.2 基于id的"></a>3.2 基于id的</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#sidebar</span> <span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">font-style</span>: italic;</div><div class="line">  <span class="attribute">text-align</span>: right;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所有id是sidebar的标签，内部的p段落全部应用上述样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#sidebar</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span> <span class="selector-id">#sidebar</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为id 属性只能在每个 HTML 文档中出现一次，所以上面两个是一样的，后者指的是该元素所属的父标签。<br><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Cascade_and_inheritance">css层叠优先级</a>:</p>
<blockquote>
<p>IDs、class 选择器优先于element选择器<br>比起class而言id优先级更高<br>!important具有最高的优先级，尽量不要使用<br>简单说!import &gt; id &gt; class &gt; 普通的tag</p>
</blockquote>
<p>关于<del>important</del>，能不用就不要用。有人开玩笑说，职业生涯中不要使用超过5次。</p>
<h3 id="3-3-css-Conflict"><a href="#3-3-css-Conflict" class="headerlink" title="3.3 css Conflict"></a>3.3 css Conflict</h3><p>假如一个css文件里面出现了<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.span</span>&#123;</div><div class="line">  <span class="attribute">color </span>: blue</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.span</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果是底部红色的赢了，原因是css是Cascade的，从上往下读文件。前提是两个选择器一模一样<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> <span class="selector-tag">span</span>&#123;</div><div class="line">  <span class="attribute">color </span>: blue</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.span</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>这种情况还是蓝色的赢</em></p>
<h3 id="3-4-css的继承"><a href="#3-4-css的继承" class="headerlink" title="3.4 css的继承"></a>3.4 css的继承</h3><p>在一个页面中，父tag定义的样式是会传递给子tag的，如果子tag没有复写掉，那么就会propogate整个父tag的范围<br>例如<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color </span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">color </span>: yellow</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">color</span>: blue</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面body的红色字体颜色会传递给当前页面所有tag的字体中，但div和p各自定义了自己的字体颜色，所以等于复写了。需要注意的是，这个时候有些tag，例如a tag是会获得浏览器默认属性的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: blue;</div><div class="line">  <span class="attribute">text-decoration</span>: underline;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>类似于浏览器默认给你加上了这么一行css。<br>browser 的default browser style,如果什么css都不加的话，就能看出来了</p>
<h3 id="3-5-Targeting-Multipe-Elements"><a href="#3-5-Targeting-Multipe-Elements" class="headerlink" title="3.5 Targeting Multipe Elements"></a>3.5 Targeting Multipe Elements</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">font-family</span>: Arial;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">font-family</span>: Arial;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">a</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">font-family</span>: Arial;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*还不如写成这样*/</span></div><div class="line"><span class="selector-tag">p</span>, <span class="selector-tag">span</span>, <span class="selector-tag">a</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">font-weight</span>: bold;</div><div class="line">  <span class="attribute">font-family</span>: Arial;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-6-Descendant-Selector（后代选择器）"><a href="#3-6-Descendant-Selector（后代选择器）" class="headerlink" title="3.6 Descendant Selector（后代选择器）"></a>3.6 Descendant Selector（后代选择器）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*这个意思就是，把content这个class里面的所有p tag的字体颜色都改成红色*/</span></div><div class="line"><span class="selector-id">#content</span> <span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*这个更进一步，一层层嵌套下去，指定的p tag才会获得属性*/</span></div><div class="line"><span class="selector-id">#content</span> <span class="selector-id">#child-content</span> <span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这么嵌套多少层其实没关系，实践中，不要嵌套太多层，不方便维护</p>
<h3 id="3-7-Child-Selector（子选择器）"><a href="#3-7-Child-Selector（子选择器）" class="headerlink" title="3.7 Child Selector（子选择器）"></a>3.7 Child Selector（子选择器）</h3><p>碰到下面这种html，如果只想给Direct Child赋属性，可以使用child selector<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Direct child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Direct child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Direct child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Indirect child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*这个向右的箭头就表示child selector*/</span></div><div class="line"><span class="selector-id">#content</span> &gt; <span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">color</span>: pink;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*这个时候不会对Indirect child生效*/</span></div></pre></td></tr></table></figure>
<p>这种方式能够在不影响其他Descendant的情况下设置属性</p>
<h3 id="3-8-Adjacent-Selector（相邻选择器）"><a href="#3-8-Adjacent-Selector（相邻选择器）" class="headerlink" title="3.8 Adjacent Selector（相邻选择器）"></a>3.8 Adjacent Selector（相邻选择器）</h3><p>给一个tag之后下一个tag赋属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'all-posts'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>First Article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Published by Smith<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Second Article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Published by John<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Third Article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Published by Ted<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>现在想要把所有紧跟着h2标签后面的那个p tag装饰下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.all-posts</span> <span class="selector-tag">h2</span> + <span class="selector-tag">p</span>&#123;</div><div class="line">  <span class="attribute">color</span>: green;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Adjacent Selector必须是follow directly after first element</p>
<h3 id="3-8-Attribute-Selector（属性选择器）"><a href="#3-8-Attribute-Selector（属性选择器）" class="headerlink" title="3.8 Attribute Selector（属性选择器）"></a>3.8 Attribute Selector（属性选择器）</h3><p>首先明确什么是attribute，href,class,id,rel,type,title这些全都是Attribute。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Span without an class Attribute<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"Deck"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"Deck"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"Deck"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span><span class="selector-attr">[class]</span>&#123;</div><div class="line">  <span class="attribute">color</span>: purple;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*这样就能选中所有上面带有class属性的tag*/</span></div></pre></td></tr></table></figure>
<p>同样的，只要用一个方括号括起来的选择器，就能选中带有特定属性的标签<br>当然还能更具体一点，例如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'http://www.google.com'</span> <span class="attr">title</span>=<span class="string">'Google'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'http://www.baidu.com'</span> <span class="attr">title</span>=<span class="string">'Baidu'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span><span class="selector-attr">[title='google']</span>&#123;</div><div class="line">  <span class="attribute">color </span>: red;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*这样只有上面的Google标签才变成红色*/</span></div></pre></td></tr></table></figure>
<p>还有更高级的Pattern Matching<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Span without an class Attribute<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"deck halls"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"deck tails"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"deck"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span><span class="selector-attr">[class~='deck']</span>&#123;</div><div class="line">  <span class="attribute">color</span>: purple;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*这样上面三个都会变成紫色,或者~符号的意思是只要属性值里面包含了这个deck单词就算*/</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>web page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"something.pdf"</span>&gt;</span>View as pdf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span><span class="selector-attr">[href$='pdf']</span>&#123;</div><div class="line">  <span class="attribute">color</span>: purple;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*这个美元符号的意思是任何以pdf结尾的href，如果要算上以xx开头的话，这样*/</span></div><div class="line"></div><div class="line"><span class="selector-tag">span</span><span class="selector-attr">[href^='http']</span>&#123;</div><div class="line">  <span class="attribute">color</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-常用属性"><a href="#4-常用属性" class="headerlink" title="4. 常用属性"></a>4. 常用属性</h2><p>顺便说一下，mrakDown里面是能直接插入img标签的<br><img src='http://odzl05jxx.bkt.clouddn.com/beautiful-red-rose-petals-wallpaper-56801fc038122.jpg?imageView2/2/w/4000' width = '400px'></p>
<p>======================================sass=============================</p>
<p> css3有一个transition效果，就是操作任何属性变换都设定一个事件，达到一种类似于动画演进的效果</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Cascade_and_inheritance">css层叠优先级</a><br><a href="https://getmdl.io/components/index.html">Material CSS</a><br><a href="https://www.w3cschool.cn/css/css-selector.html">css选择器汇总</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;css使用记录及速查手册&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/beautiful-red-rose-petals-wallpaper-56801fc038122.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://haldir65.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS Tips</title>
    <link href="https://haldir65.github.io/2017/10/29/2017-10-29-pure-javaScript/"/>
    <id>https://haldir65.github.io/2017/10/29/2017-10-29-pure-javaScript/</id>
    <published>2017-10-29T14:10:27.000Z</published>
    <updated>2017-11-25T15:49:39.758Z</updated>
    
    <content type="html"><![CDATA[<p>Vanilla JS其实就是原生javascript了。论运行速度，在Vanilla JS面前，所有的js library都要慢很多。<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery04e31f5513d62958957b4caa1d944ae4.jpg?imageView2/2/w/600" alt=""></p>
<a id="more"></a>
<p>关于js的历史，根据Patrick Dubroy在2014年的一次<a href="https://www.youtube.com/watch?v=34cw-XRknWM">演讲</a>，ES3是1999年出来的，ES3之前的版本简直是翔。ES4设计的实在太牛逼，一直拖到2008年也没搞定，所以大家决定直接跳过ES4(历史上也从未有过ES4)，推出了ES5（只把ES4中的一部分实现了），实际上2015年6月ES6(也就是2008年那帮人所称呼的harmony)才发布。关于Patrick Dubroy，这人在2011年的Google IO上做过关于用mat检测Android Memory Leak的演讲，老外真是全才。</p>
<h2 id="TakeAways"><a href="#TakeAways" class="headerlink" title="TakeAways"></a>TakeAways</h2><ol>
<li><a href="#1-一些作为一门语言基本的操作都有">基本语法</a></li>
<li><a href="#2-操作HTML-DOM的一些方法">操作html的一些点</a></li>
<li><a href="#3-从onclick开始到整个交互事件模型">交互事件的注册，捕获，拦截</a></li>
<li><a href="#4-异步的实现">异步</a></li>
<li><a href="#5-ES6新增的一些东西">ES6新增的东西</a></li>
<li><a href="#6-我也不知道归到哪一类的问题">我也不知道归到哪一类的问题</a></li>
</ol>
<h2 id="1-一些作为一门语言基本的操作都有"><a href="#1-一些作为一门语言基本的操作都有" class="headerlink" title="1. 一些作为一门语言基本的操作都有"></a>1. 一些作为一门语言基本的操作都有</h2><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110078544.jpg?imageView2/2/w/600" alt=""></p>
<h3 id="1-1-比如说module（就是import，export这种，虽然是ES6才补上的）"><a href="#1-1-比如说module（就是import，export这种，虽然是ES6才补上的）" class="headerlink" title="1.1 比如说module（就是import，export这种，虽然是ES6才补上的）"></a>1.1 比如说module（就是import，export这种，虽然是ES6才补上的）</h3><p> js中好像没有像java中那种javaBean的特殊的数据类型的存在。<br>ES6开始可以使用import和export语法，有类似的效果，<a href="https://stackoverflow.com/questions/34741111/exporting-importing-json-object-in-es6">参考</a><br>states.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  STATES: &#123;</div><div class="line">    <span class="string">'AU'</span> : &#123;...&#125;,</div><div class="line">    <span class="string">'US'</span> : &#123;...&#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">import</span> STATES <span class="keyword">from</span> <span class="string">'states'</span>;</div><div class="line"><span class="comment">// 或者</span></div><div class="line"><span class="keyword">var</span> STATES = &#123;&#125;;</div><div class="line">STATES.AU = &#123;...&#125;;</div><div class="line">STATES.US = &#123;...&#125;;</div><div class="line"><span class="keyword">export</span> STATES;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; STATES &#125; <span class="keyword">from</span> <span class="string">'states'</span>;<span class="comment">//接受方最好写上大括号包起来</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="keyword">import</span> whatever <span class="keyword">from</span> <span class="string">'states'</span>;</div><div class="line"><span class="comment">// whatever会变成export default中的内容</span></div></pre></td></tr></table></figure></p>
<h3 id="1-2-基本的操作符，dynanic-type-函数，变量，oop-class（ES6）-for循环-while这些都有"><a href="#1-2-基本的操作符，dynanic-type-函数，变量，oop-class（ES6）-for循环-while这些都有" class="headerlink" title="1.2 基本的操作符，dynanic type,函数，变量，oop,class（ES6）,for循环,while这些都有"></a>1.2 基本的操作符，dynanic type,函数，变量，oop,class（ES6）,for循环,while这些都有</h3><ul>
<li><p>js里面判断两个变量相等的方式，建议一律使用三个等号（严格相等）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="string">"3"</span>;</div><div class="line">a==b 返回 <span class="literal">true</span></div><div class="line">a===b 返回 <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">// 因为a,b的类型不一样</span></div><div class="line"><span class="comment">// ==只比较了值</span></div><div class="line"><span class="comment">// ===只有在值和类型完全相同的时候才为true，用来进行严格的比较判断</span></div><div class="line"><span class="comment">// !=（只检查值）和!==（检查值和类型）也差不多的意思。</span></div><div class="line">= 赋值运算符</div><div class="line">== 等于</div><div class="line">=== 严格等于</div><div class="line">&amp;&amp;和||也有，!=也有</div><div class="line"></div><div class="line">- <span class="literal">true</span>和<span class="literal">false</span>也有</div><div class="line"><span class="comment">// truthy的概念是js里面特有的</span></div><div class="line"><span class="comment">// 在console里面输入：</span></div><div class="line">Boolan(<span class="number">5</span>)  &gt; 输出<span class="literal">true</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="number">-5</span>) &gt;输出<span class="literal">false</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="number">7</span>&gt;<span class="number">5</span>) &gt; 输出<span class="literal">true</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="string">'someword'</span>) &gt; <span class="literal">true</span></div><div class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>) &gt; <span class="literal">false</span></div><div class="line"><span class="comment">// 只有Boolan(0)才是false</span></div></pre></td></tr></table></figure>
</li>
<li><p>string，number,array也有</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// var myString = 'i 'm a "funny" string' #这样是不行的</span></div><div class="line"><span class="keyword">var</span> myString = <span class="string">'i \'m a "funny" string'</span>;<span class="comment">//加一个转义就好了</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="string">'abc'</span></div><div class="line"><span class="keyword">var</span> b = <span class="string">'bcd'</span></div><div class="line">a&lt;b <span class="comment">// true,因为ASCII表里面，a在b前面</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span></div><div class="line"><span class="keyword">var</span> str2 = str.slice(<span class="number">2</span>,<span class="number">9</span>);</div><div class="line">str2 <span class="comment">// 'llo,wo'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> tags = <span class="string">'meat,ham ,salami,prok,beef,chicken'</span></div><div class="line"><span class="keyword">var</span> tagsArray = tags.split(<span class="string">","</span>)</div><div class="line"><span class="comment">//生成</span></div><div class="line">[<span class="string">"meat"</span>,<span class="string">"ham"</span>,<span class="string">"salami"</span>,<span class="string">"prok"</span>,<span class="string">"beef"</span>,<span class="string">"chicken"</span>]</div></pre></td></tr></table></figure>
</li>
</ul>
<p><em>js的Array里面能够装不同类型的数据，跟Python很像</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建Array的方式很多</span></div><div class="line"><span class="keyword">var</span> array = []</div><div class="line"><span class="keyword">var</span> array1 = [<span class="string">'stuff'</span>,<span class="string">'jeff'</span>,<span class="number">20</span>]</div><div class="line"><span class="keyword">var</span> array2 = <span class="keyword">new</span> <span class="built_in">Array</span>()</div><div class="line"></div><div class="line"><span class="keyword">var</span> myArray = []<span class="comment">// 初始化就好了，无需指定容量</span></div><div class="line">myArray[<span class="number">0</span>] =<span class="string">'stuff'</span></div><div class="line">myArray[<span class="number">1</span>] = <span class="number">70</span></div><div class="line">myArray &gt; [<span class="string">'stuff'</span>,<span class="number">70</span>]</div><div class="line"></div><div class="line">myArray[<span class="number">30</span>] = <span class="literal">true</span></div><div class="line"></div><div class="line"><span class="comment">// 以下为亲测console中的输出就这样</span></div><div class="line">myArray &gt; (<span class="number">31</span>) [<span class="string">"stuff"</span>, <span class="number">70</span>, empty × <span class="number">28</span>, <span class="literal">true</span>]</div><div class="line">myArray[<span class="number">12</span>] &gt; <span class="string">'undefined'</span></div><div class="line">myArray.length &gt; <span class="number">31</span></div><div class="line">myArray.sort() &gt; (<span class="number">31</span>) [<span class="number">70</span>, <span class="string">"stuff"</span>, <span class="literal">true</span>, empty × <span class="number">28</span>]</div></pre></td></tr></table></figure></p>
<p><em>Object，class这种oop的特性也有</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myCaR = <span class="keyword">new</span> Car()</div><div class="line">VM315:<span class="number">1</span> Uncaught <span class="built_in">ReferenceError</span>: Car is not defined</div><div class="line">    at &lt;anonymous&gt;:<span class="number">1</span>:<span class="number">13</span></div><div class="line"><span class="keyword">var</span> myString = <span class="keyword">new</span> <span class="built_in">String</span>()</div><div class="line">myString = <span class="string">'hello'</span>    </div><div class="line">myString.length &gt; <span class="number">5</span></div><div class="line"><span class="keyword">var</span> mystring23 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'stuff'</span>)<span class="comment">//这也是行的</span></div><div class="line"></div><div class="line"><span class="comment">// 直接在console里写</span></div><div class="line"><span class="keyword">var</span> myCar = <span class="keyword">new</span> <span class="built_in">Object</span>()</div><div class="line"><span class="literal">undefined</span></div><div class="line">myCar.speed = <span class="number">20</span></div><div class="line"><span class="number">20</span></div><div class="line">myCar.speed</div><div class="line"><span class="number">20</span></div><div class="line">myCar.name = <span class="string">'benz'</span></div><div class="line"><span class="string">"benz"</span></div><div class="line">myCar.name</div><div class="line"><span class="string">"benz"</span></div><div class="line">myCar</div><div class="line">&#123;speed: <span class="number">20</span>, name: <span class="string">"benz"</span>&#125; <span class="comment">//json即object</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> car2 = &#123;speed: <span class="number">30</span>, name: <span class="string">"tesla"</span>&#125;</div><div class="line"></div><div class="line">car2</div><div class="line">&#123;speed: <span class="number">30</span>, name: <span class="string">"tesla"</span>&#125;</div></pre></td></tr></table></figure></p>
<p><em>上下文的概念也有，this关键字，但要注意闭包</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// console直接输入</span></div><div class="line"><span class="keyword">this</span></div><div class="line">Window &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;<span class="comment">//window是一个有很多变量(function也是变量)的对象，在当前语义下，就是window</span></div><div class="line"></div><div class="line">car2.test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;</div><div class="line">car2</div><div class="line">&#123;speed: <span class="number">30</span>, name: <span class="string">"tesla"</span>, test: ƒ&#125;</div><div class="line"></div><div class="line">car2.test</div><div class="line">ƒ ()&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;</div><div class="line"></div><div class="line">car2.test()<span class="comment">//这时候this就是car2这个Object了</span></div><div class="line">VM592:<span class="number">1</span> &#123;speed: <span class="number">30</span>, name: <span class="string">"tesla"</span>, test: ƒ&#125;</div></pre></td></tr></table></figure></p>
<p>this应该是当前上下文</p>
<p> <em>Construction function，函数也是一个object的成员</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span> (<span class="params">name,speed</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.speed = speed</div><div class="line">  <span class="keyword">this</span>.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'speed is '</span>+speed)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> car24 = <span class="keyword">new</span> Car(<span class="string">'jim'</span>,<span class="number">40</span>)</div><div class="line">car24</div><div class="line">Car &#123;name: <span class="string">"jim"</span>, speed: <span class="number">40</span>, test: ƒ&#125;</div><div class="line">car24.test()</div><div class="line">VM621:<span class="number">5</span> speed is <span class="number">40</span></div></pre></td></tr></table></figure></p>
<ul>
<li>Object definition(construcor)，class也有</li>
<li>还有随便用的log</li>
</ul>
<h3 id="1-3-一些工具，时间-Math，io操作也有"><a href="#1-3-一些工具，时间-Math，io操作也有" class="headerlink" title="1.3 一些工具，时间,Math，io操作也有"></a>1.3 一些工具，时间,Math，io操作也有</h3><p>Date Object的使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> past = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2007</span>,<span class="number">11</span>,<span class="number">9</span>)</div><div class="line"><span class="literal">undefined</span></div><div class="line">past</div><div class="line"><span class="comment">// Sun Dec 09 2007 00:00:00 GMT+0800 (中国标准时间)</span></div><div class="line">past.getDay</div><div class="line">ƒ getDay() &#123; [native code] &#125;</div><div class="line">past.getDay()</div><div class="line"><span class="number">0</span></div><div class="line">past.getFullYear()</div><div class="line"><span class="number">2007</span></div><div class="line">past.getDate</div><div class="line">ƒ getDate() &#123; [native code] &#125;</div><div class="line">past.getDate()</div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/unclassified_unclassified--115_07-1920x1440.jpg?imageView2/2/w/600" alt=""></p>
<p>网络请求，Ajax请求的套路也有<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    client.open(<span class="string">"GET"</span>, url);</div><div class="line">    client.onreadystatechange = handler;</div><div class="line">    client.responseType = <span class="string">"json"</span>;</div><div class="line">    client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</div><div class="line">    client.send();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</div><div class="line">        resolve(<span class="keyword">this</span>.response);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> promise;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Contents: '</span> + json);</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.error(<span class="string">'出错了'</span>, error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="2-操作HTML-DOM的一些方法"><a href="#2-操作HTML-DOM的一些方法" class="headerlink" title="2. 操作HTML-DOM的一些方法"></a>2. 操作HTML-DOM的一些方法</h2><p>通过 id 找到 HTML 元素 window.document.getElementById()<br>通过标签名找到 HTML 元素 window.document.getElementsByTagName()//比如说’h2’这种<br>通过类名找到 HTML 元素 window.document.getElementsByClassName()<br>注意方法名称，带s的返回的是一个数组，不带s返回一个object<br>找form 标签的话，还有一种方法:<br>先手写一段html<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;html lang="en"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset="utf-8"/&gt;</div><div class="line">  &lt;title&gt;有时候手写html不是坏事&lt;/title&gt;</div><div class="line">  &lt;link href="style.css" type="text/css" rel="stylesheet"&gt;&lt;/link&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;form id='my-form' name='myForm' action="#"&gt;</div><div class="line">      &lt;label for="name"&gt;Name: &lt;/label&gt;</div><div class="line">      &lt;input type="text" name="name"&gt;&lt;br/&gt;</div><div class="line">      &lt;label&gt;Hobbies: &lt;/label&lt;br/&gt;</div><div class="line">      &lt;input type="checkbox" name="biking" value="biking"&gt;Biking&lt;/br&gt;</div><div class="line">      &lt;input type="checkbox" name="sking" value="sking"&gt;Sking&lt;/br&gt;</div><div class="line">      &lt;input type="checkbox" name="diving" value="diving"&gt;Diving&lt;/br&gt;</div><div class="line">      &lt;label for="colour"&gt;Fav colour: &lt;/label&gt;</div><div class="line">      &lt;select name="colour"&gt;</div><div class="line">        &lt;option&gt;Red&lt;/option&gt;</div><div class="line">        &lt;option&gt;Blue&lt;/option&gt;</div><div class="line">        &lt;option&gt;Green&lt;/option&gt;</div><div class="line">      &lt;/select&gt;</div><div class="line">      &lt;input type="submit" name="submit" value='Submit'&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;script src="test.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myForm = <span class="built_in">document</span>.forms.myForm<span class="comment">//myForm是这个Form标签的name属性,form是跟input配合使用的</span></div><div class="line">myForm.name  &gt; 那个input标</div><div class="line">myForm.name.value  &gt; 那个input标签，其实也就是那个输入框里面的文字</div><div class="line">myForm.colour.vaule &gt; 显示当前选中的select值</div></pre></td></tr></table></figure>
<p>还是上面那个表单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myForm = <span class="built_in">document</span>.forms.myForm</div><div class="line"><span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>)</div><div class="line"></div><div class="line">myForm.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//就是上面那个submit被点击时触发</span></div><div class="line">  <span class="keyword">if</span>(myForm.name.value === <span class="string">''</span>)&#123;</div><div class="line">    message.innerHtml = <span class="string">'please enter an not empty name'</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">//summit事件被终止</span></div><div class="line">  &#125;<span class="keyword">else</span> &#123;</div><div class="line">    message.innerHtml = <span class="string">''</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>div.innerHtml（把整个html对象都返回了）和div.textContent(只返回文字)。所以innerHtml可以用来把一个div里面的tag全部替换掉（比如原来是个p，现在换成h1），而textContent只能把某一个tag里面的文字改掉。<br>想要<a href="https://stackoverflow.com/questions/4365246/how-to-change-href-of-a-tag-on-button-click-through-javascript">改href</a>的话，得这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"abc"</span>);</div><div class="line">link.setAttribute(<span class="string">"href"</span>, <span class="string">"xyz.php"</span>);</div></pre></td></tr></table></figure></p>
<p>setAttribute()可以用于设置一个在当前tag上不存在的attr<br>设置class可以用setAttribute(‘class’,’XXX’)，也可以用div.className = ‘XXX’<br>对于一个a标签<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/subpage"</span>&gt;</span>Some Thing<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这时候调用a.href &gt; 会输出’<a href="http://www.host.com/subpage&#39;，即输出完整的路径">http://www.host.com/subpage&#39;，即输出完整的路径</a><br>但是如果使用a.getAttribute(‘href’) &gt; 输出’/subpage’</p>
<p>改一个tag的背景元素不能这么改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a.style.background-color= <span class="string">'blue'</span></div><div class="line"><span class="comment">//得这样</span></div><div class="line">a.style.backgroundColor= <span class="string">'blue'</span><span class="comment">//其实就是横线换成CammelCase</span></div></pre></td></tr></table></figure></p>
<ol>
<li>在dom中新增一个element的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>) <span class="comment">//创建一个新的li标签,</span></div><div class="line">parentTag.appendChild(li)<span class="comment">//添加到尾部</span></div><div class="line">parentTag.insertBefore(li,parentTag.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>])<span class="comment">//添加到原来的0元素前面</span></div><div class="line"></div><div class="line"><span class="comment">//删除一个tag的话</span></div><div class="line"><span class="keyword">var</span> removed = parentTag.removeChild(li)<span class="comment">//移除方法会返回被移除的元素</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-从onclick开始到整个交互事件模型"><a href="#3-从onclick开始到整个交互事件模型" class="headerlink" title="3.从onclick开始到整个交互事件模型"></a>3.从onclick开始到整个交互事件模型</h2><h2 id="4-异步的实现"><a href="#4-异步的实现" class="headerlink" title="4. 异步的实现"></a>4. 异步的实现</h2><h2 id="5-ES6新增的一些东西"><a href="#5-ES6新增的一些东西" class="headerlink" title="5. ES6新增的一些东西"></a>5. ES6新增的一些东西</h2><h2 id="6-我也不知道归到哪一类的问题"><a href="#6-我也不知道归到哪一类的问题" class="headerlink" title="6. 我也不知道归到哪一类的问题"></a>6. 我也不知道归到哪一类的问题</h2><ol>
<li>交互事件的捕获，拦截，消费（冒泡）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加点击事件点击事件：</span></div><div class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</div><div class="line">button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'you click this button'</span>);</div><div class="line">&#125;</div><div class="line">button.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// body...</span></div><div class="line">&#125;</div><div class="line">button.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelEvent</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(e) &#123;</div><div class="line">        e.stopPropagation();  <span class="comment">//非IE</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;  <span class="comment">//IE</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在一个元素上触发事件，如果此元素定义了处理程序，那么此次事件就会被捕获，根据程序进行该事件的处理。否则这个事件会根据DOM树向父节点逐级传播，如果从始至终都没有被处理，那么最终会到达document或window根元素。所以事件是往上传递的，即冒泡。</p>
<p>//事件注册的时机<br>对于简单的script，需要在body的最后一行，因为浏览器是从上到下解析的，轮到script解析的时候，需要操作dom，这就要求dom元素已经建立好。有时候，就算你把script写在body最后一行，轮到解析script的时候，前面的html还在加载（比如说非常大的html什么的，总之是有可能的）。所以一般用window.onLoad来注册事件。</p>
<p>复杂点的script放在外面，用src引用。 也要用window.onLoad来注册事件。所以，一般的js长这样（假如的你js要操作dom）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setUpEvents</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> button = ....</div><div class="line">  var ....</div><div class="line">  button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  button.</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.onLoad = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  setUpEvents()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>this的作用范围<br>代码<a href="https://cn.vuejs.org/v2/guide/computed.html">来源</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">var</span> watchExampleVM = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#watch-example'</span>,</div><div class="line">  data: &#123;</div><div class="line">    question: <span class="string">''</span>,</div><div class="line">    answer: <span class="string">'I cannot give you an answer until you ask a question!'</span></div><div class="line">  &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    <span class="comment">// 如果 `question` 发生改变，这个函数就会运行</span></div><div class="line">    question: <span class="function"><span class="keyword">function</span> (<span class="params">newQuestion</span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.answer = <span class="string">'Waiting for you to stop typing...'</span></div><div class="line">      <span class="keyword">this</span>.getAnswer()</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    <span class="comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></div><div class="line">    <span class="comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></div><div class="line">    <span class="comment">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></div><div class="line">    <span class="comment">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></div><div class="line">    <span class="comment">// 请参考：https://lodash.com/docs#debounce</span></div><div class="line">    getAnswer: _.debounce(</div><div class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.question.indexOf(<span class="string">'?'</span>) === <span class="number">-1</span>) &#123;</div><div class="line">          <span class="keyword">this</span>.answer = <span class="string">'Questions usually contain a question mark. ;-)'</span></div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.answer = <span class="string">'Thinking...'</span></div><div class="line">        <span class="keyword">var</span> vm = <span class="keyword">this</span> <span class="comment">//这里需要把this（VewComponent）作为一个变量</span></div><div class="line">        axios.get(<span class="string">'https://yesno.wtf/api'</span>)</div><div class="line">          .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">            vm.answer = _.capitalize(response.data.answer)</div><div class="line">          &#125;)</div><div class="line">          .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">            vm.answer = <span class="string">'Error! Could not reach the API. '</span> + error</div><div class="line">          &#125;)</div><div class="line">      &#125;,</div><div class="line">      <span class="comment">// 这是我们为判定用户停止输入等待的毫秒数</span></div><div class="line">      <span class="number">500</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>js去刷新当前页面，返回上级页面。。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:history.go(-1)"</span>&gt;</span>返回上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:location.reload()"</span>&gt;</span>刷新当前页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:"</span> <span class="attr">onclick</span>=<span class="string">"history.go(-2); "</span>&gt;</span>返回前两页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:"</span> <span class="attr">onclick</span>=<span class="string">"self.location=document.referrer;"</span>&gt;</span>返回上一页并刷新<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:"</span> <span class="attr">onclick</span>=<span class="string">"history.back(); "</span>&gt;</span>返回上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>监听关闭窗口事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="string">"Bye now!"</span></div><div class="line">   &#125;</div><div class="line"><span class="string">``</span><span class="string">`   </div><div class="line">[JavaScript使用哪一种编码？](http://www.ruanyifeng.com/blog/2014/12/unicode.html),不是utf-8</div><div class="line"></div><div class="line">[atom安装插件被墙问题](http://blog.csdn.net/qianghaohao/article/details/52331432)</div><div class="line">Atom推荐插件</div><div class="line">[atom-beautify](https://atom.io/packages/atom-beautify)</div><div class="line"></div><div class="line"></div><div class="line">===============================================================================================</div><div class="line">## 使用Atom的时候，按下ctrl+shift+i ，会发现原来atom编辑页面就特么是一个网页。</div><div class="line"></div><div class="line">12. MicroTask和MacroTask的执行顺序是：Stack -&gt; MacroTask -&gt; MicroTask [参考](https://juejin.im/entry/59e95b4c518825579d131fad)</div><div class="line"></div><div class="line">9. setTimeout是schedule一个task，setInterval是设定一个周期性执行的任务。</div><div class="line"></div><div class="line">8. 可以检测是ES5还是ES6</div><div class="line">`</span><span class="string">``</span>javaScript</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>); &#125;</div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>(<span class="literal">false</span>) &#123;</div><div class="line"><span class="comment">// 重复声明一次函数f,ES5会输出'i am insider', ES6会输出'i am outsider'</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>); &#125;</div><div class="line">&#125;</div><div class="line">f();</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
</li>
<li><p>javaScript debug的方法：选中一个html 的tag，break on 。。。 自然会在执行到的时候停下来，evalulate value需要自己在console里面敲（注意此时应该位于Sources标签页下）。</p>
</li>
</ol>
<h2 id="1-js跨域请求"><a href="#1-js跨域请求" class="headerlink" title="1. js跨域请求"></a>1. js跨域请求</h2><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">cors的概念</a></p>
<blockquote>
<p>search “原生javaScript跨域”、’jsonp跨域请求豆瓣250’</p>
</blockquote>
<p><a href="http://www.jianshu.com/p/1f32c9a96064">jsonp跨域获取豆瓣250接口</a>，豆瓣能支持jsonp是因为豆瓣服务器响应了</p>
<blockquote>
<p><a href="http://api.douban.com/v2/movie/top250?callback=anything这个query,这个anything是我们自己网页里面script里面定义的方法，豆瓣会返回一个">http://api.douban.com/v2/movie/top250?callback=anything这个query,这个anything是我们自己网页里面script里面定义的方法，豆瓣会返回一个</a>: anything({json})的数据回来，直接调用anything方法<br>json【JavaScript Object Notation】<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">MDN上的corz</a></p>
</blockquote>
<p><a href="http://schock.net/articles/2013/02/05/how-jsonp-really-works-examples/">jsonp的解释</a></p>
<p>亲测，Flask里面给response添加Header:</p>
<blockquote>
<p> response.headers[‘Access-Control-Allow-Origin’] = ‘<a href="http://localhost:8080">http://localhost:8080</a>‘</p>
</blockquote>
<p>在8080端口的web页面发起请求就能成功</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://tonghuashuo.github.io/blog/jsonp.html">5 分钟彻底明白 JSONP</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vanilla JS其实就是原生javascript了。论运行速度，在Vanilla JS面前，所有的js library都要慢很多。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery04e31f5513d62958957b4caa1d944ae4.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javaScript" scheme="https://haldir65.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式手册</title>
    <link href="https://haldir65.github.io/2017/09/10/2017-09-10-wielding-regular-expressions/"/>
    <id>https://haldir65.github.io/2017/09/10/2017-09-10-wielding-regular-expressions/</id>
    <published>2017-09-10T15:10:05.000Z</published>
    <updated>2017-11-25T15:50:05.907Z</updated>
    
    <content type="html"><![CDATA[<p>关于正则的一些收集<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/fresh-sparkle-dew-drops-on-red-flower-wallpaper-53861cf580909.jpg?imageView2/2/w/600" alt=""></p>
<a id="more"></a>
<p>一般情况下不要乱用正则<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/bee-getting-the-pollen-wallpaper-538358eb5d5a3.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110067848.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100718415.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100670897.jpg?imageView2/2/w/600" alt=""></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/sceneryc7fd99f667c9d98a583a174872d58d13.jpg?imageView2/2/w/600" alt=""></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110073841.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100756208.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100694324.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100794441.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100802774.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100734648.jpg?imageView2/2/w/600" alt=""></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110074347.jpg?imageView2/2/w/600" alt=""></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100746620.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/sceneryd15ddf2ba4fb7b5f4e51dfa6cb74cb70.jpg?imageView2/2/w/600" alt=""></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.importnew.com/26560.html">DFA和NFA</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于正则的一些收集&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/fresh-sparkle-dew-drops-on-red-flower-wallpaper-53861cf580909.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>VueJs学习笔记</title>
    <link href="https://haldir65.github.io/2017/09/08/2017-09-08-all-about-Vue/"/>
    <id>https://haldir65.github.io/2017/09/08/2017-09-08-all-about-Vue/</id>
    <published>2017-09-08T13:41:43.000Z</published>
    <updated>2017-11-25T15:52:11.126Z</updated>
    
    <content type="html"><![CDATA[<p>Vue Js学习笔记</p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100775410.jpg?imageView2/2/w/600" alt=""></p>
<a id="more"></a>
<blockquote>
<p> 有句话放在前面，所有的javaScript库都比不上Vanilla JS，即原生js代码。</p>
</blockquote>
<h2 id="1-前提"><a href="#1-前提" class="headerlink" title="1. 前提"></a>1. 前提</h2><p>使用cmder ,安装了nodejs<br>基本命令</p>
<ul>
<li>npm install</li>
<li>npm run dev</li>
</ul>
<p>npm 设置淘宝镜像</p>
<blockquote>
<p>npm config set registry <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p>
</blockquote>
<p>参考系列<a href="https://github.com/iamshaunjp/vuejs-playlist">教程</a></p>
<p>import语法:从别的vue文件中导入数据：<br>import Data from ./xxx/stuff.vue<br>其实和python很像</p>
<p>一些常用的标签</p>
<ul>
<li>template 标签用于显示模板，内部可以使用获取json对象的数据</li>
<li>data 普通属性，标签用于存储json类型的数据，是属于这个实例的变量</li>
<li>methods 标签用于声明方法，内部使用this.xxx可以获得data中的json对象。在html里面不需要this，在export语句里面需要</li>
<li>components 标签用于引入可复用的模板,用于注册</li>
<li>computed 计算属性，computed和data一样，也是方法，只不过只是返回了变量的值的一份copy。不会影响data的值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  el: &apos;#example&apos;,</div><div class="line">  data: &#123;</div><div class="line">    message: &apos;Hello&apos;</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    // 计算属性的 getter</div><div class="line">    reversedMessage: function () &#123;</div><div class="line">      // `this` 指向 vm 实例</div><div class="line">      return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>你可以像绑定普通属性一样在模板中绑定计算属性。Vue 知道 vm.reversedMessage 依赖于 vm.message，因此当 vm.message 发生改变时，所有依赖 vm.reversedMessage 的绑定也会更新。而且最妙的是我们已经以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的，这使它更易于测试和理解。<br>普通属性更改的话就真的改了，计算属性只是把这种操作预期的结果返回，并不会修改原来的值。<br>还有一个好处是，计算属性的值依赖于普通属性的值，前者不更改的话，后者直接返回缓存的值。所以这种获取时间的东西就不要放在计算属性里了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  now: function () &#123;</div><div class="line">    return Date.now()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一些常用的事件绑定:</p>
<ul>
<li>v-if=’’ //移除或者显示某个Tag，(display:none是隐藏或显示)</li>
<li>v-on:click=’somefunction’ //点击事件发生时触发某个method</li>
<li>template v-is=’some_template_name’ //用于在页面模板中导入现成的模板</li>
</ul>
<p>缩写：</p>
<ul>
<li>v-on的缩写是@符号</li>
<li>v-bind:的缩写就是: 那个冒号</li>
</ul>
<h3 id="1-1-Dynamic-Components"><a href="#1-1-Dynamic-Components" class="headerlink" title="1.1 Dynamic Components"></a>1.1 Dynamic Components</h3><p>页面中需要随时展示不同template是，可以使用component标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// Imports</div><div class="line">import formOne from './components/formOne.vue';</div><div class="line">import formTwo from './components/formTwo.vue';</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form-one</span>&gt;</span><span class="tag">&lt;/<span class="name">form-one</span>&gt;</span></div><div class="line">//这和下面这种写法是一样的</div><div class="line"> <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">'component'</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span> //component标签注册在data中，可以随时改变。例如</div><div class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"component='form-one'"</span>&gt;</span>Show form one<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"component='form-two'"</span>&gt;</span>Show form two<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="1-2-InputBinding"><a href="#1-2-InputBinding" class="headerlink" title="1.2 InputBinding"></a>1.2 InputBinding</h3><p>将input标签中用户输入的文字显示在一个tag中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//在template中</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">'title'</span> <span class="attr">required</span>/&gt;</span> //lazy是指preview部分只会在点击后显示内容</div><div class="line">//在data中注册</div><div class="line">data () &#123;</div><div class="line">    return &#123;</div><div class="line">      title :'',</div><div class="line">      content: ''</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">在需要展示内容的标签中可以实时获取内容</div><div class="line">如<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&gt;  </div><div class="line"></div><div class="line">或者</div><div class="line">data () &#123;</div><div class="line">    return &#123;</div><div class="line">      blog:&#123;</div><div class="line">      title :'',</div><div class="line">      content: '',</div><div class="line">      categories:[]</div><div class="line">      &#125;  </div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>data中返回的是一个json object，json本身的定义就是(JavaScript Object Notation)。这样做的好处是可以将所有需要的变量存储在一个object,当然，这里面存数组也是可以的。</p>
<h3 id="1-3-Checkbox-Binding"><a href="#1-3-Checkbox-Binding" class="headerlink" title="1.3 Checkbox Binding"></a>1.3 Checkbox Binding</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"checkboxes"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"apple"</span> <span class="attr">v-model</span>=<span class="string">"blog.categories"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Juice<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"juice"</span> <span class="attr">v-model</span>=<span class="string">"blog.categories"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Panda<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"panda"</span> <span class="attr">v-model</span>=<span class="string">"blog.categories"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>rocky<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"rocky"</span> <span class="attr">v-model</span>=<span class="string">"blog.categories"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>moon<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"moon"</span> <span class="attr">v-model</span>=<span class="string">"blog.categories"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">在预览区，可以这样展示</div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'cat in blog.categories'</span>&gt;</span>&#123;&#123;cat&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"> 如果checkbox被选中，blog的categories数组中就加入了这个元素，取消选中则从数组中移除。</div></pre></td></tr></table></figure>
<h3 id="1-4-Select-Box-Binding"><a href="#1-4-Select-Box-Binding" class="headerlink" title="1.4 Select Box Binding"></a>1.4 Select Box Binding</h3><p>SelctBox只能单选，绑定数据这样:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">'blog.author'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">'a in authors'</span> &gt;</span>&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">data&#123;</div><div class="line">    blog:&#123;</div><div class="line">        author:'default'</div><div class="line">    &#125;,</div><div class="line">    authors:['bob','Jessy','Jean','Jean','Dave']</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SelectBox会从authors数组中提供选项，选中后，blog.author对象将会被赋予相应的值。</p>
<h3 id="1-5-HTML模板复用"><a href="#1-5-HTML模板复用" class="headerlink" title="1.5 HTML模板复用"></a>1.5 HTML模板复用</h3><p>组件的意义就在于可以复用UI元素，就像Flask的renderTemplate方法里面可以接收若干参数，vue Component也是一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. 在父Component中引入子Component</div><div class="line">2. 子Component中添加props:[&apos;variable1&apos;,&apos;variable2&apos;]数组</div><div class="line">3. 在父控件中直接在html标签上添加 :variable1 =&apos;&apos; ，注意这个冒号其实是  v-bind: 的缩写，不能省略</div><div class="line">4. 在子控件的html中就像引用data一样使用props</div></pre></td></tr></table></figure></p>
<h3 id="1-6各种引用"><a href="#1-6各种引用" class="headerlink" title="1.6各种引用"></a>1.6各种引用</h3><p>在vue组件中this指的是当前的VueComponent（也就是常说的vm），self指的是window对象，this.$el指的是所渲染的template</p>
<h3 id="1-7-嵌套路由破坏了静态资源的引用路径"><a href="#1-7-嵌套路由破坏了静态资源的引用路径" class="headerlink" title="1.7 嵌套路由破坏了静态资源的引用路径"></a>1.7 嵌套路由破坏了静态资源的引用路径</h3><p><a href="https://stackoverflow.com/questions/45133669/nested-routes-breaks-the-static-path">nested-routes-breaks-the-static-path</a><br>解决方法是在 html中置顶css或js等静态资源的location，从绝对路径，根路径开始</p>
<h2 id="2-使用Http进行CURD操作"><a href="#2-使用Http进行CURD操作" class="headerlink" title="2.使用Http进行CURD操作"></a>2.使用Http进行CURD操作</h2><p>安装：<a href="https://github.com/pagekit/vue-resource">Repo</a><br>注意：需要在当前工作目录.<br>安装完成在package.json中看到</p>
<ul>
<li>“dependencies”: {<br>  “vue”: “^2.3.3”,<br>  “Vue-resource”:”^1.3.4”<br>},<br>类似这样即可。</li>
</ul>
<h3 id="2-1-进行POST操作"><a href="#2-1-进行POST操作" class="headerlink" title="2.1 进行POST操作"></a>2.1 进行POST操作</h3><p><a href="https://jsonplaceholder.typicode.com/">jsonPlaceHolder</a>是一个免费的API网站。<br>vue-resource提交表单的操作如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">post:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//use http here</span></div><div class="line">    <span class="keyword">this</span>.$http.post(<span class="string">'https://jsonplaceholder.typicode.com/posts'</span>,&#123;</div><div class="line">      title:<span class="keyword">this</span>.blog.title,</div><div class="line">      body:<span class="keyword">this</span>.blog.content,</div><div class="line">      userId:<span class="number">1</span>,</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">      <span class="comment">// body...</span></div><div class="line">      <span class="built_in">console</span>.log(data)</div><div class="line">      <span class="keyword">this</span>.summited = <span class="literal">true</span></div><div class="line">    &#125;);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>post方法返回的是一个promise，加回调即可打印出api返回结果。</p>
<h3 id="2-2-ajax跨域操作"><a href="#2-2-ajax跨域操作" class="headerlink" title="2.2 ajax跨域操作"></a>2.2 ajax跨域操作</h3><p><a href="https://stackoverflow.com/questions/25860304/how-do-i-set-response-headers-in-flask">XMLHttpRequest cannot load http://localhost:5000/hello.<br>No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</a><br>用Flask做后台，大概的代码这样<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@app.route("/posts", methods=['GET'])</div><div class="line">def create_post()</div><div class="line">    resp = Response(json.dumps(post_lists), mimetype='application/json')</div><div class="line">    resp.headers['Access-Control-Allow-Origin'] = '*'</div><div class="line">    return resp</div></pre></td></tr></table></figure></p>
<h2 id="3-Router-Eventbus-mixin，axios等"><a href="#3-Router-Eventbus-mixin，axios等" class="headerlink" title="3. Router,Eventbus,mixin，axios等"></a>3. Router,Eventbus,mixin，axios等</h2><p>安装:</p>
<blockquote>
<p>npm install vue-router –save</p>
<h2 id="npm-install-vue-bus-–save"><a href="#npm-install-vue-bus-–save" class="headerlink" title="npm install vue-bus –save"></a>npm install vue-bus –save</h2><h3 id="3-1-关于Bus，-是用来在不同的Vue文件中传递事件-数据-用的，安装好后，main-js里面improt并使用"><a href="#3-1-关于Bus，-是用来在不同的Vue文件中传递事件-数据-用的，安装好后，main-js里面improt并使用" class="headerlink" title="3.1 关于Bus， 是用来在不同的Vue文件中传递事件(数据)用的，安装好后，main.js里面improt并使用"></a>3.1 关于Bus， 是用来在不同的Vue文件中传递事件(数据)用的，安装好后，main.js里面improt并使用</h3><p>import Vue from ‘vue’<br>import VueBus from ‘vue-bus’;<br>Vue.use(VueBus);</p>
</blockquote>
<p>A.vue中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">created()&#123;</div><div class="line">  <span class="keyword">this</span>.$bus.emit(<span class="string">'loadSuccess'</span>, <span class="string">'创建成功！'</span>);</div><div class="line">&#125;,</div><div class="line">beforedestory()&#123;</div><div class="line">  <span class="keyword">this</span>.$bus.off(<span class="string">'loadSuccess'</span>)</div><div class="line">&#125;</div><div class="line"> <span class="comment">// B.vue中</span></div><div class="line">created()&#123;</div><div class="line">  <span class="keyword">this</span>.$bus.on(<span class="string">'loadSuccess'</span>,text=&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'receieve msg from another vue component '</span>+ text)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.2 关于mixin，有比较好的<a href="https://css-tricks.com/using-mixins-vue-js/">介绍</a><br>其实就是把一些公用的methods放到一个js文件中export掉，然后需要的vue文件，自己去import，在data中设置mixins: [] ,使用的时候就可以用this.method()使用这些共有的方法了。其实主要是为了复用。</p>
<p>3.3 添加全局变量(常量)的<a href="http://www.jianshu.com/p/7547ff8760c3">方法</a>，vuex是官方的</p>
<p>3.4 router就是建立internal link 页面之间跳转的桥梁<br>在template中添加router-link的tag,会生成一个对应的a Tag,点击跳转即可。<br>router-view标签表示预先准备好的布局会被渲染进入这个标签内（将其取代）</p>
<p>3.5 axios取代vue-resource用于发起http请求<br>安装在官方介绍页有，子组件可以使用import从mainjs里面拿到。<br>于是，尝试在一个component里面去获取百度首页，结果出错，换成豆瓣电影250还是出错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">about:1 Failed to load http://api.douban.com/v2/movie/top250: Response to preflight request doesn&apos;t pass access control check: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:8080&apos; is therefore not allowed access.</div></pre></td></tr></table></figure></p>
<p>查了好久，原因是CORS(Control of Shared Resources)，通过ajax发起另一个domian(port)资源的请求默认是不安全的。主要是在js里面代码请求另一个网站(只要不满足host和port完全相同就不是同一个网站)，默认是被<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">禁止</a>的。chrome里面查看network的话，发现这条request确实发出去了，request header里面多了一个</p>
<blockquote>
<p>Origin:<a href="http://localhost:8080">http://localhost:8080</a><br>显然这不是axios设置的，服务器在看到这条header后，如果’/movie/top250’这个资源文件没有设置’Access-Control-Allow-Origin: <a href="http://localhost:8080&#39;的话，就不会允许被获取。这是服务器方面做出的策略，显然客户端（浏览器）不能修改什么。">http://localhost:8080&#39;的话，就不会允许被获取。这是服务器方面做出的策略，显然客户端（浏览器）不能修改什么。</a><br>解决方法：<br>1.和服务器商量好CORS<br>2.使用jsonp(跨域请求并不限制带src属性的tag，比如script img这些)</p>
</blockquote>
<p>CORS还是比较重要的东西，<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">详解</a>，据说会发两次请求,且只支持GET请求。</p>
<p>回到axios，作者表示<a href="https://github.com/axios/axios/issues/75">不打算支持jsonp</a>，想用jsonp的话可以用jquery,或者使用<a href="https://github.com/axios/axios/blob/master/COOKBOOK.md#jsonp">jsonp插件</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> $ npm install jsonp --save</div><div class="line"> <span class="keyword">var</span> jsonp = <span class="built_in">require</span>(<span class="string">'jsonp'</span>);</div><div class="line"></div><div class="line">jsonp(<span class="string">'http://api.douban.com/v2/movie/top250'</span>, <span class="literal">null</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="built_in">console</span>.error(err.message);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>亲测有效。</p>
<p><em>XSS注入就是利用了CORS</em></p>
<h2 id="4-Vuex及状态管理"><a href="#4-Vuex及状态管理" class="headerlink" title="4. Vuex及状态管理"></a>4. Vuex及状态管理</h2><p>在js眼中，一段json字符串就是一个object。<br>这是vuex 中改变某项属性的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mutations: &#123;</div><div class="line">  increment (state, payload) &#123;</div><div class="line">    state.count += payload.amount</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">store.commit(<span class="string">'increment'</span>, &#123;</div><div class="line">  amount: <span class="number">10</span></div><div class="line">&#125;)</div><div class="line">两个花括号括起来的(json)，才是对象。这里，函数名叫做<span class="string">'increment'</span>，传进去的payLoad即有效信息，是通过json转达的。</div></pre></td></tr></table></figure></p>
<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>点击时会发生MouseEvent,如果想要获取这里面的一些属性，比如点击位置screenX,ScreenY这些，可以在html中绑定事件时，使用$event这个符号将事件传递到方法中。</p>
<h3 id="基础复习"><a href="#基础复习" class="headerlink" title="基础复习"></a>基础复习</h3><ol>
<li>id和class的问题<br>html tag的class，不同tag可以有相同的class，引用的时候用.classname来查找<br>id这个tag唯一的，一个页面不能有两个tag有相同的id，引用的时候用#id来找<br>一个是点，一个是#</li>
<li>js 里面有一个promise的概念，和java8的一些流式理念有点像</li>
<li>关闭ESlint，<a href="https://jingyan.baidu.com/article/4b52d702b5f490fc5d774b10.html">Eslint</a>实在是太严格了，有点妨碍开发效率</li>
<li>html中audio tag不识别本地文件，需要放在static文件下，放在src文件夹里就是404，一开始的时候我这么写”src=’../assets/赵雷-成都.mp3’”，死活放不出来，换成”file://“开头也不行，换成网易云音乐的http地址就好了。最后换成’static目录下’。终于放出来了，“让我掉下眼泪的是，简直日了X”，还蛮押韵的。</li>
<li>atom可以同时预览两个选项卡，右键,split right，用于copy and paste比较方便</li>
<li>css里面可以写”background-image: url(./somefile.png)”，就是相对路径的意思。</li>
</ol>
<p>10.css里面的class继承是同时在一个tag里面添加class=”class_a class_b”，中间一个空格，需要什么拿什么</p>
<ol>
<li>css分三种，外部样式表（写在另一个css文件里），内部样式表(写在header tag中)和内联样式表(写在单独的tag里面)</li>
</ol>
<h3 id="tools-tangiable-takeaways"><a href="#tools-tangiable-takeaways" class="headerlink" title="tools,tangiable takeaways"></a>tools,tangiable takeaways</h3><ol>
<li>atom plugin  ide-typescript sucks , after disable the plugin ,the autocomplete feature works againself.</li>
<li><p>config atom behind a firewall :</p>
<blockquote>
<p>apm config set https-proxy <a href="https://127.0.0.1:1080">https://127.0.0.1:1080</a><br>apm config set strict-ssl false</p>
</blockquote>
<p>官方的库<br>Vuex是负责全局状态管理的，<a href="http://whutzkj.space/2017/10/24/vuex/#more">参考</a><br>组件间<a href="https://juejin.im/post/59ec95006fb9a0451c398b1a">通信</a>的方式</p>
</li>
</ol>
<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/1102531047-2.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/VueJsLogo.jpg" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.youtube.com/watch?v=5LYrN_cAJoA&amp;list=PL4cUxeGkcC9gQcYgjhBoeQH7wiAyZNrYa">Vue JS 2 Tutorial</a></li>
<li><a href="https://github.com/iamshaunjp/vuejs-playlist">github repo</a></li>
<li><a href="https://jsonplaceholder.typicode.com/">jsonPlaceHoder</a></li>
<li><a href="https://mp.weixin.qq.com/s/wYTejsTjHldDMKJ7QqCYBA">css</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Sass">Sass</a></li>
<li><a href="http://www.w3school.com.cn/jsref/jsref_obj_array.asp">JavaScript 教程</a></li>
<li><a href="https://wohugb.gitbooks.io/ecmascript-6/content/docs/array.html">ES6相关</a></li>
<li><a href="https://www.w3cschool.cn/css/css-padding.html">css教程</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue Js学习笔记&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100775410.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javaScript" scheme="https://haldir65.github.io/tags/javaScript/"/>
    
      <category term="Vue" scheme="https://haldir65.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>http2笔记</title>
    <link href="https://haldir65.github.io/2017/09/01/2017-09-01-how-much-an-http-s-cost/"/>
    <id>https://haldir65.github.io/2017/09/01/2017-09-01-how-much-an-http-s-cost/</id>
    <published>2017-08-31T22:52:35.000Z</published>
    <updated>2017-11-24T13:59:04.754Z</updated>
    
    <content type="html"><![CDATA[<p>http建立在tcp,ip基础上，tcp协议的可靠性意味着每次http请求都会分解为多次ip请求。很多出于book keeping的东西占用了实际发送数据的相当一部分，具体占用多少。由此顺便展开到http和tcp的基本关系。<br><img src="http://odzl05jxx.bkt.clouddn.com/Cg-4V1Kg7NCIMLH-AAwW6gNGe9cAAOB4AFTanwADBcC664.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<p>大部分基于Hadi在2016年的<a href="https://www.youtube.com/watch?v=F5smqpbz2sU">演讲</a></p>
<h2 id="1-Http的几个概念"><a href="#1-Http的几个概念" class="headerlink" title="1. Http的几个概念"></a>1. Http的几个概念</h2><h3 id="1-1-bandwidth和latency的概念"><a href="#1-1-bandwidth和latency的概念" class="headerlink" title="1.1 bandwidth和latency的概念"></a>1.1 bandwidth和latency的概念</h3><p>bandwidth是指数据传输的速度上限（运营商设置），latency是物理距离限制的信号传递到达的时间(中美之间的延迟一般180ms左右，这是物理距离决定的)。</p>
<h3 id="1-2-为什么http1-1差劲"><a href="#1-2-为什么http1-1差劲" class="headerlink" title="1.2 为什么http1.1差劲"></a>1.2 为什么http1.1差劲</h3><p>这是由于latency决定的，跟bandwidth无关。假设客户端和服务器之间存在一定带宽限制，随着带宽上限的提高，两者之间的传输速度趋于平衡。只有在路不够宽的时候，路的宽度才会成为交通的阻碍，如果路足够宽，那么通信双方的通信速度只和两者之间的物理距离有关。<br>要命的是，每一次连接都受到延迟影响。</p>
<h3 id="1-3-现代网站的复杂化程度使得网络请求越来越频繁"><a href="#1-3-现代网站的复杂化程度使得网络请求越来越频繁" class="headerlink" title="1.3 现代网站的复杂化程度使得网络请求越来越频繁"></a>1.3 现代网站的复杂化程度使得网络请求越来越频繁</h3><p>http（超文本传输协议），最初设计的时候确实只需要传输一些固定的文字，可能只要一条连接就够了。随着现在网页越来越复杂，打开一个网页，在chrome里面能看到一瞬间请求的资源多达几十个甚至上百个。想象下，每条连接都会受到latency的影响，浪费的时间成倍数增长。<a href="https://www.webpagetest.org/">webpagetest</a>可以展示加载一个页面的过程中都发起了哪些请求，并以waterfall view的形式展示出来。比直接在chrome里面看更加直观。</p>
<h3 id="1-4-ISO-OSI-Layer一共七层"><a href="#1-4-ISO-OSI-Layer一共七层" class="headerlink" title="1.4 ISO OSI Layer一共七层"></a>1.4 ISO OSI Layer一共七层</h3><ol>
<li>Application (Http在这一层，但人们习惯把它当做第四层)</li>
<li>Presentation</li>
<li>Session</li>
<li>Transport (Tcp在这)</li>
<li>Network</li>
<li>Link</li>
<li>Physical</li>
</ol>
<p>Http本身是OK的，tcp为了确保可靠性，建立连接要三次握手，断开连接要四次挥手。真正有用的数据传输只在这两者之间。每次发起请求，都需要带上这些必要的数据传输。<br>这里面还有Handshake，客户端每收到一个包，都要向服务端发Acknowledgement(ACK)。<br>还有Flow Control(两端之间传输数据，实现并不知道两者之间的道路有多宽，所以先传100byte试试，一切ok在提到200byte，接着提到500byte,万一出现问题，退回到200byte,这就叫congestion)。<br>Flow Control的存在是有道理，但却使得每一条连接都得从很小的传输速度进行尝试，这就造成了延迟的增大。</p>
<h3 id="1-5-HTTP-0-9-始于-1991年"><a href="#1-5-HTTP-0-9-始于-1991年" class="headerlink" title="1.5 HTTP 0.9 始于 1991年"></a>1.5 HTTP 0.9 始于 1991年</h3><p>0.9版本的Http还没有header,1996年的Http 1.0 加入了Header。但这种协议的设计初衷并不是为了现在这种一个网页带上300个请求的事实而设计的。 1999年，http 1.1 加入了Connection close（默认是Keep-Alive）。Keep-Alive的好处是Tcp连接不会在一个http请求结束之后就断开，也就没有三次握手这种东西了。</p>
<h3 id="1-6-一些前人总结的优化技巧"><a href="#1-6-一些前人总结的优化技巧" class="headerlink" title="1.6 一些前人总结的优化技巧"></a>1.6 一些前人总结的优化技巧</h3><ol>
<li>Sigle connection (/index.html；style.css全都放在一个连接里面)</li>
<li>Pipelining  (一次性请求index.html以及style.css，这些东西全都放在一个请求里面)。这种方式的问题叫做 Head-of-line Blocking,由于tcp是可靠的协议，所以必须得等第一个请求的response回来，后续的请求才能执行。所以很多浏览器后来都放弃了对这种技术的支持。</li>
<li>于是人们开始一次性发出多个tcp请求。客户端能同时向一个host(不同host之间不影响)发起的请求最多6(不同浏览器数量不同)到8个。这么干的原因一方面是客户端自我保护，另一方面也是为了保护服务器不至于崩溃。具体在知乎上有<a href="https://www.zhihu.com/question/19997004">讨论</a><br>所以我们经常看到知乎把api数据放在zhihu.com上，图片放在zhimg.com,统计放在zhstatic.com上。有时候还会有pic2.zhimg.com，pic3.zhimg.com。。。等等这些，还不是为了加快网页加载速度。(这就叫Domian Sharding)，这么干也有坏处，More DNS lookups。找dns花的时间多了。</li>
<li>Inline resources<br>直接把图片放在html里面传回来，这造成缓存失效。还有编码的问题</li>
<li>Concatenating and Spriting resources<br>Concatenating是把所有的js文件塞在一个大的js里面返回，这也造成缓存失效，处理缓慢等问题。<br>Spriting是把一大堆图片放在一整张图片里面，通过复杂的css选择其中的图片。</li>
</ol>
<h2 id="2-http2的开始"><a href="#2-http2的开始" class="headerlink" title="2. http2的开始"></a>2. http2的开始</h2><p>Http有点像一种谈话式的协议，但tcp并不是。http并没有什么错,慢就慢在tcp<br>http2的一些要点如下</p>
<ul>
<li>Binary Communication(http1.X 就是往socket里面写文字，h2直接写binary， 解析binary的速度要比解析文字快)</li>
<li>Compression and optimization techniques(GZip没法压header，h2压缩了header)</li>
<li>No change in HTTP semantics(主要是为了backward compatibility，GET,POST这些都没变)</li>
<li>Not compatible with HTTP1.X but can be used ontop of it</li>
</ul>
<h3 id="2-1-SPDY"><a href="#2-1-SPDY" class="headerlink" title="2.1 SPDY"></a>2.1 SPDY</h3><p>谷歌设计了SPDY，h2建立在SPDY的基础上，google已经废弃了SPDY,据说是为了给h2让路。</p>
<h3 id="2-2-h2过程"><a href="#2-2-h2过程" class="headerlink" title="2.2 h2过程"></a>2.2 h2过程</h3><p>h2传输的是Binary Frame，这里面包括HEADER FRAME和DATA FRAME, request的body和response的body都通过DATA FRAME传输。<br>client发起一个请求，header里面包括(Upgrade:2c),一切OK的话，服务器返回一个status code 101(switching Protocol)。<br>在response header里面返回一个Upgrade: h2c。</p>
<h3 id="2-3-TLS-SSL"><a href="#2-3-TLS-SSL" class="headerlink" title="2.3 TLS ,SSL"></a>2.3 TLS ,SSL</h3><p>用于两点间传输binary数据<br>ALPN(Application Level Protcol Negotitation)</p>
<h3 id="2-4-数据传输的模型"><a href="#2-4-数据传输的模型" class="headerlink" title="2.4 数据传输的模型"></a>2.4 数据传输的模型</h3><p>h2只有一条connection，里面有多个STREAM，STREAM里面包括了Request的HEADER FRAME和DATA FRAME以及Response的HEADER FRAME和DATA FRAME。<br>FRAME里面有length,Type，Flags,ID(有了ID就能有sequence,也就能multiplexing，多路复用)以及Payload(数据)。<br>FRAME TYPE有很多种，DATA,HEADER,WINDOW_UPDATE,SETTING，GOAWAY,这些在okhttp里面都能看到.<br>用WireShark可以查看<br>h2为什么快，Multiplexing，多路复用允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息</p>
<h3 id="2-5-Header-Compression"><a href="#2-5-Header-Compression" class="headerlink" title="2.5 Header Compression"></a>2.5 Header Compression</h3><p>本来GZip是不能压缩Header的，h2使用HPACK(很复杂的协议)，讲header(无非是键值对)中的key,value映射一份表，所以每一次发起请求，h2会将那些header变成数字，同时，只会发送改变了的header。（应用层无需关心，十分复杂）</p>
<h3 id="2-6-Streams可以设置优先级"><a href="#2-6-Streams可以设置优先级" class="headerlink" title="2.6 Streams可以设置优先级"></a>2.6 Streams可以设置优先级</h3><p>都是在一条Connection中发送出去，开发者可以设置，例如，js优先级高点，image优先级低一点。</p>
<h3 id="2-7-Flow-Control"><a href="#2-7-Flow-Control" class="headerlink" title="2.7 Flow Control"></a>2.7 Flow Control</h3><ul>
<li>Multiplexing requires ability of flow control</li>
<li>WINDOW_UPDATE</li>
</ul>
<h3 id="2-8-Server-Push"><a href="#2-8-Server-Push" class="headerlink" title="2.8 Server Push"></a>2.8 Server Push</h3><p>客户端请求一个网页如 index.html，服务器会觉得，客户端很有可能还想要style.css和script.js。于是顺带着也给丢过来了。server push大致如此。<br>这样的好处就是，client无需发起请求，省了流量。同时，client还可以说GO_AWAY,也就是拒绝SERVER的push。</p>
<h2 id="3-现状"><a href="#3-现状" class="headerlink" title="3.现状"></a>3.现状</h2><p>现在很多网站已经支持了h2，twitter好像就是。一个很简单的方法就是看chrome里面的network，h2只有一条线。<br>服务器这边，Ngnix 1.9.5支持h2，Apache 2.4.12开始支持<br>客户端这边 Netty,OkHttp,Curl 都行<br>进入h2，domain sharding,Concatenation and Spriting,InLining这些techniques都没有意义了。</p>
<p><a href="https://http2.akamai.com/demo">演示</a></p>
<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><blockquote>
<p>With 100Mbit/s Ethernet, a large file transfers at 94.1Mbit/s. That’s 6% overhead.<br>所以本地记录的下载到的文件的速度要比运营商报告的实际带宽小一点，当然这只是一部分原因。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://stackoverflow.com/questions/3613989/what-of-traffic-is-network-overhead-on-top-of-http-s-requests">what-of-traffic-is-network-overhead-on-top-of-http-s-requests</a></li>
<li><a href="https://www.youtube.com/watch?v=F5smqpbz2sU">Hadi Hariri — HTTP/2 – What do I need to know?</a></li>
<li><a href="https://www.qcloud.com/community/article/995080">WEB加速，协议先行</a>腾讯技术工程事业群基础架构部高级工程师lancelot演讲</li>
<li><a href="https://www.youtube.com/watch?v=UVwI1K0M7P0">HTTP 2.0: why and how by Simone Bordet</a></li>
<li><a href="https://www.youtube.com/watch?v=yURLTwZ3ehk">HTTP1.1中的一些优化策略失效</a></li>
</ul>
<!-- ## 1. WireShark+tcpdump抓包

## 2. tcp握手

### 2.x tls 1.3
### 2. xx http2
### 2.xxxx https

## 3. 应用层能做的事情

### 3.1 引申到http2的原理
OkHttp神一样的[注释](https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/internal/http2/Http2Reader.java)
一些线上问题[okhttp和http 2.0相遇引发的"血案"](https://zhuanlan.zhihu.com/p/28958516)
http2服务器[搭建](https://www.youtube.com/watch?v=OLWyOIOaeP4&list=PLNYkxOF6rcIDXTg3Gm8Y9Q_D8Ag_RDyQO)
http2解释[原理](https://www.youtube.com/watch?v=r5oT_2ndjms)
tcu、udp[抽象](https://www.youtube.com/watch?v=cTKQAe4DN6g)
[须知](https://www.youtube.com/watch?v=F5smqpbz2sU) -->
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;http建立在tcp,ip基础上，tcp协议的可靠性意味着每次http请求都会分解为多次ip请求。很多出于book keeping的东西占用了实际发送数据的相当一部分，具体占用多少。由此顺便展开到http和tcp的基本关系。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/Cg-4V1Kg7NCIMLH-AAwW6gNGe9cAAOB4AFTanwADBcC664.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>JQuery手册</title>
    <link href="https://haldir65.github.io/2017/08/27/2017-08-27-jquery-stuff/"/>
    <id>https://haldir65.github.io/2017/08/27/2017-08-27-jquery-stuff/</id>
    <published>2017-08-27T13:48:52.000Z</published>
    <updated>2017-11-19T13:57:08.701Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery只是javascript的公开库，掌握javascript语法对于解决问题更重要。jQuery能干的事情包括：</p>
<ol>
<li>html 的元素选取</li>
<li>html的元素操作</li>
<li>html dom遍历和修改</li>
<li>js特效和动画效果</li>
<li>css操作</li>
<li>html事件操作</li>
<li>ajax异步请求方式,etc<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/a13262133_01000.jpg?imageView2/2/w/600" alt=""></li>
</ol>
<a id="more"></a>
<h2 id="1-使用微软或者谷歌的CDN-放在head-tag里面"><a href="#1-使用微软或者谷歌的CDN-放在head-tag里面" class="headerlink" title="1.使用微软或者谷歌的CDN,放在head tag里面"></a>1.使用微软或者谷歌的CDN,放在head tag里面</h2><p>这样做的好处是别的网站已经加载过的js文件可以直接读缓存，加快加载速度<br>其实自己下载一份，用src引用也行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.js"</span>&gt;</span><span class="undefined"></div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这一段必须放在head里面，用自己的src或者微软，谷歌的cdn都可以。如果自己的js文件引用到了jQuery，<a href="https://stackoverflow.com/questions/8886614/uncaught-referenceerror-jquery-is-not-defined">需要把jQuery写在其他js前面</a></p>
<h3 id="1-1所有的jQuery函数都放在ready里面"><a href="#1-1所有的jQuery函数都放在ready里面" class="headerlink" title="1.1所有的jQuery函数都放在ready里面"></a>1.1所有的jQuery函数都放在ready里面</h3><p>这一段script放在body后面也行，放在head里面也行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">--- jQuery functions go here ----</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>基本上就是window渲染完毕之后开始做一些事情，随便抄了一段知乎首页的Button<br>这里面双引号(“”)和单引号(‘’)都行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'button#button1'</span>).css(<span class="string">"background-color"</span>,<span class="string">"#0f88eb"</span>)</div><div class="line">.css(<span class="string">'border-radius'</span>,<span class="string">'8px'</span>).css(<span class="string">'padding-right'</span>,<span class="string">'14px'</span>)</div><div class="line">.css(<span class="string">'padding-left'</span>,<span class="string">'14px'</span>).css(<span class="string">'color'</span>,<span class="string">'white'</span>)</div><div class="line">.css(<span class="string">'line-height'</span>,<span class="string">'30px'</span>)</div></pre></td></tr></table></figure>
<p>前提是body里面放了一个class = button1 的button tag.这里只是改变了按钮的css样式，<br>jQuery选择器有一些规则需要记住，主要就是如何选择html中的元素</p>
<ul>
<li>$(this)表示当前html对象</li>
<li>$(‘p’)表示所以<p>标签</li>
<li>$(‘p.intro’)表示所有class为intro的<p>标签</li>
<li>$(‘.intro’)表示所有class为intro的标签</li>
<li>$(‘#intro’)表示所有id为intro的元素</li>
<li>￥（’div#intro.head’) 所有id= ‘intro’的div中，找到class为’head’的元素</li>
</ul>
<h3 id="1-2-常用函数"><a href="#1-2-常用函数" class="headerlink" title="1.2 常用函数"></a>1.2 常用函数</h3><p>在script tag里面添加这一段，因为比对框架可能使用了$符号，为避免冲突，用var替代$符号<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jq=jQuery.noConflict()，</div></pre></td></tr></table></figure></p>
<h3 id="1-3-selector怎么写"><a href="#1-3-selector怎么写" class="headerlink" title="1.3 selector怎么写"></a>1.3 selector怎么写</h3><p>写一个tag，后面要么写id=’’，要么写class = ‘’，id要用”#”查找，class要用’.’查找。<br>所以</p>
<ul>
<li><a id="2.2">文字</a> 这种id是不会有响应的</li>
</ul>
<h3 id="1-4-还可以加事件回调"><a href="#1-4-还可以加事件回调" class="headerlink" title="1.4 还可以加事件回调"></a>1.4 还可以加事件回调</h3><p>可以在事件后面加回调，例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jq(<span class="string">'.click_btn'</span>).slideUp(<span class="number">300</span>)</div><div class="line"><span class="comment">//可以认为第二个参数是一个function</span></div><div class="line"> jq(<span class="string">'.click_btn'</span>).slideUp(<span class="number">300</span>,<span class="function"><span class="keyword">function</span> </span>&#123;</div><div class="line">    alert(<span class="string">'this will invoke after slideup finished'</span>)</div><div class="line"> &#125;)</div></pre></td></tr></table></figure></p>
<p>可以自己写函数，可以引用之前定义的函数。当然函数回调里面还可以加回调，当然会有callback hell。简单的解决方式，把作为第二个参数的函数提取成一个函数，引用函数名作为参数传进去就好了。<br>另外，在js里面var myFunction = function(){//stuff }是完全成立的，函数也是var。</p>
<h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul>
<li>去复制一大堆文字，button，img的css样式，修改，继承，引用。手写实在太慢<br>-</li>
</ul>
<h2 id="TakeAway"><a href="#TakeAway" class="headerlink" title="TakeAway"></a>TakeAway</h2><ul>
<li>Jquery必须写在最前面，如果网页中还有其他的js引用到了jQuery的话</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery只是javascript的公开库，掌握javascript语法对于解决问题更重要。jQuery能干的事情包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;html 的元素选取&lt;/li&gt;
&lt;li&gt;html的元素操作&lt;/li&gt;
&lt;li&gt;html dom遍历和修改&lt;/li&gt;
&lt;li&gt;js特效和动画效果&lt;/li&gt;
&lt;li&gt;css操作&lt;/li&gt;
&lt;li&gt;html事件操作&lt;/li&gt;
&lt;li&gt;ajax异步请求方式,etc&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/a13262133_01000.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
      <category term="jQuery" scheme="https://haldir65.github.io/tags/jQuery/"/>
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python工具手册</title>
    <link href="https://haldir65.github.io/2017/08/24/2017-08-24-python-cookbook/"/>
    <id>https://haldir65.github.io/2017/08/24/2017-08-24-python-cookbook/</id>
    <published>2017-08-24T14:25:18.000Z</published>
    <updated>2017-10-29T06:38:19.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="苦海无涯，Python是岸"><a href="#苦海无涯，Python是岸" class="headerlink" title="苦海无涯，Python是岸"></a>苦海无涯，Python是岸</h2><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/essay-with-programming-lang.jpg" alt=""></p>
<a id="more"></a>
<h2 id="1-基本数据操作，及语法"><a href="#1-基本数据操作，及语法" class="headerlink" title="1. 基本数据操作，及语法"></a>1. 基本数据操作，及语法</h2><ul>
<li>函数参数<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000">默认参数、可变参数、关键字参数等</a></li>
<li>集合类型(list是中括号，tuple是小括号)</li>
<li>unicodeError</li>
<li>面向对象</li>
<li>多线程，多进程<br>多线程基本无用，基本语法很简单：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import threading</div><div class="line"></div><div class="line">def readIo()</div><div class="line">    print('do stuff heavy')</div><div class="line"></div><div class="line">for i in range(10):</div><div class="line">    threading.Thread(target=readIo).start()</div><div class="line">print('Finishing up')</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-Flask相关"><a href="#2-Flask相关" class="headerlink" title="2. Flask相关"></a>2. Flask相关</h2><h3 id="2-1-Flask-Admin-PannelFlask-Admin中文入门教程Please-run-on-linux"><a href="#2-1-Flask-Admin-PannelFlask-Admin中文入门教程Please-run-on-linux" class="headerlink" title="2.1 Flask Admin PannelFlask-Admin中文入门教程Please  run on linux"></a>2.1 Flask Admin Pannel<a href="http://flask123.sinaapp.com/article/57/">Flask-Admin中文入门教程</a>Please  run on linux</h3><h3 id="2-7-小Web"><a href="#2-7-小Web" class="headerlink" title="2.7 小Web"></a>2.7 <a href="http://www.jianshu.com/p/f9d668490bc6">小Web</a></h3><h3 id="2-2-log上颜色"><a href="#2-2-log上颜色" class="headerlink" title="2.2.log上颜色"></a>2.2.log上颜色</h3><p><a href="https://blog.phpgao.com/python_colorful_log.html">博客</a>，Pycharm的console无效，内置Terminal有效</p>
<h3 id="2-2-log上颜色-1"><a href="#2-2-log上颜色-1" class="headerlink" title="2.2.log上颜色"></a>2.2.log上颜色</h3><p><a href="https://blog.phpgao.com/python_colorful_log.html">博客</a>，Pycharm的console无效，内置Terminal有效</p>
<h3 id="2-3-Pycharm里面import各种can’t-resolve-的解决方法"><a href="#2-3-Pycharm里面import各种can’t-resolve-的解决方法" class="headerlink" title="2.3 Pycharm里面import各种can’t resolve 的解决方法"></a>2.3 Pycharm里面import各种can’t resolve 的解决方法</h3><ul>
<li>from werkzeug import secure_filename</li>
<li>from werkzeug.utils import secure_filename<br>只是因为这个文件的包的位置挪了，import只能用绝对路径</li>
</ul>
<p><img src="http://odzl05jxx.bkt.clouddn.com/79a65f1911c81d736be0704904de8ea1.jpg?imageView2/2/w/600" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;苦海无涯，Python是岸&quot;&gt;&lt;a href=&quot;#苦海无涯，Python是岸&quot; class=&quot;headerlink&quot; title=&quot;苦海无涯，Python是岸&quot;&gt;&lt;/a&gt;苦海无涯，Python是岸&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/essay-with-programming-lang.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之-算法手册</title>
    <link href="https://haldir65.github.io/2017/08/12/2017-08-12-algorithm-enlightenment/"/>
    <id>https://haldir65.github.io/2017/08/12/2017-08-12-algorithm-enlightenment/</id>
    <published>2017-08-12T11:04:16.000Z</published>
    <updated>2017-11-09T14:25:35.255Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/10013-1109230P20693.jpg?imageView2/2/w/600" alt="FlamingFlowers"><br><a id="more"></a></p>
<h2 id="1-各种Search的原理及java代码实现"><a href="#1-各种Search的原理及java代码实现" class="headerlink" title="1. 各种Search的原理及java代码实现"></a>1. 各种Search的原理及java代码实现</h2><p>java.utils.Arrays这个类中有各种经典的实现，直接对照着学就好了。</p>
<h3 id="1-1-BinarySearch"><a href="#1-1-BinarySearch" class="headerlink" title="1.1 BinarySearch"></a>1.1 BinarySearch</h3><p>二分法查找，前提是数组中元素全部按照顺序(从小到大或者从大到小)排列好了。Android中SparseArray中用到了binarySearch</p>
<p>android.support.v4.util.ContainerHelpers<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// This is Arrays.binarySearch(), but doesn&apos;t do any argument validation.</div><div class="line"> static int binarySearch(int[] array, int size, int value) &#123;</div><div class="line">     int lo = 0;</div><div class="line">     int hi = size - 1;</div><div class="line"></div><div class="line">     while (lo &lt;= hi) &#123;</div><div class="line">         int mid = (lo + hi) &gt;&gt;&gt; 1;</div><div class="line">         int midVal = array[mid];</div><div class="line"></div><div class="line">         if (midVal &lt; value) &#123;</div><div class="line">             lo = mid + 1;</div><div class="line">         &#125; else if (midVal &gt; value) &#123;</div><div class="line">             hi = mid - 1;</div><div class="line">         &#125; else &#123;</div><div class="line">             return mid;  // value found</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     return ~lo;  // value not present（）</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>最后一个用的是位非操作，就是把int(4 bytes)转成2进制所有的0变成1，所有的1变成0.</p>
<h3 id="1-2-BubbleSort"><a href="#1-2-BubbleSort" class="headerlink" title="1.2 BubbleSort"></a>1.2 BubbleSort</h3><p>把较大的元素挪到右边，较小的元素挪到左边。<br>每次从左到右边，两个两个的比较，大的往右挪，第一次完成后，最大的一个一定已经挪到最后了。接下里对n-1个元素进行同样的操作。<br>java代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] numArray)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n = numArray.length;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; (n - i); j++) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (numArray[j - <span class="number">1</span>] &gt; numArray[j]) &#123;</div><div class="line">                temp = numArray[j - <span class="number">1</span>];</div><div class="line">                numArray[j - <span class="number">1</span>] = numArray[j];</div><div class="line">                numArray[j] = temp;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>the worst case scenario ：array完全倒序 o(n^2)<br>the best case scenario : array已经排序好 Ω（n）</p>
<h3 id="1-3-Insertion-Sort"><a href="#1-3-Insertion-Sort" class="headerlink" title="1.3 Insertion Sort"></a>1.3 Insertion Sort</h3><p>基本上就是把一个数组从左到右迭代，第一遍声明第一个元素是sorted，第二遍看下第二个和第一个是不是有序的，第二遍完成后第二个元素是sorted。第三遍把前三个排序好。<br>下面这段代码是从<a href="https://courses.cs.washington.edu/courses/cse373/02wi/slides/Measurement/sld010.htm">华盛顿大学教程</a>抄的，应该没问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)&#123;</div><div class="line">        <span class="keyword">int</span> temp = a[i];</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="keyword">for</span>(j=i-<span class="number">1</span>;j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;a[j];j--)</div><div class="line">            a[j+<span class="number">1</span>] = a[j]</div><div class="line">        a[j+<span class="number">1</span>] = temp;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>核心算法就是第N此排序完成后，前N个元素已经排序完毕。</p>
<p>the worst case scenario ：array完全倒序 o(n^2)<br>the best case scenario : array已经排序好 Ω（n）</p>
<h3 id="1-4-Merge-Sort"><a href="#1-4-Merge-Sort" class="headerlink" title="1.4 Merge Sort"></a>1.4 Merge Sort</h3><p>这个算法比较复杂，一图胜千言<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/merge_sort.png" alt=""><br><a href="http://www.java2novice.com/java-sorting-algorithms/merge-sort/">参考</a><br>其实就是把array打成一半一半，直到变成多个大小为2的数组，然后再合并起来。java代码直接复制粘贴了，保留包名是对作者的尊重：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java2novice.sorting;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMergeSort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] tempMergArr;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String a[])</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[] inputArr = &#123;<span class="number">45</span>,<span class="number">23</span>,<span class="number">11</span>,<span class="number">89</span>,<span class="number">77</span>,<span class="number">98</span>,<span class="number">4</span>,<span class="number">28</span>,<span class="number">65</span>,<span class="number">43</span>&#125;;</div><div class="line">        MyMergeSort mms = <span class="keyword">new</span> MyMergeSort();</div><div class="line">        mms.sort(inputArr);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:inputArr)&#123;</div><div class="line">            System.out.print(i);</div><div class="line">            System.out.print(<span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> inputArr[])</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.array = inputArr;</div><div class="line">        <span class="keyword">this</span>.length = inputArr.length;</div><div class="line">        <span class="keyword">this</span>.tempMergArr = <span class="keyword">new</span> <span class="keyword">int</span>[length];</div><div class="line">        doMergeSort(<span class="number">0</span>, length - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doMergeSort</span><span class="params">(<span class="keyword">int</span> lowerIndex, <span class="keyword">int</span> higherIndex)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (lowerIndex &lt; higherIndex) &#123;</div><div class="line">            <span class="keyword">int</span> middle = lowerIndex + (higherIndex - lowerIndex) / <span class="number">2</span>;</div><div class="line">            <span class="comment">// Below step sorts the left side of the array</span></div><div class="line">            doMergeSort(lowerIndex, middle);</div><div class="line">            <span class="comment">// Below step sorts the right side of the array</span></div><div class="line">            doMergeSort(middle + <span class="number">1</span>, higherIndex);</div><div class="line">            <span class="comment">// Now merge both sides</span></div><div class="line">            mergeParts(lowerIndex, middle, higherIndex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeParts</span><span class="params">(<span class="keyword">int</span> lowerIndex, <span class="keyword">int</span> middle, <span class="keyword">int</span> higherIndex)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lowerIndex; i &lt;= higherIndex; i++) &#123;</div><div class="line">            tempMergArr[i] = array[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> i = lowerIndex;</div><div class="line">        <span class="keyword">int</span> j = middle + <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> k = lowerIndex;</div><div class="line">        <span class="keyword">while</span> (i &lt;= middle &amp;&amp; j &lt;= higherIndex) &#123;</div><div class="line">            <span class="keyword">if</span> (tempMergArr[i] &lt;= tempMergArr[j]) &#123;</div><div class="line">                array[k] = tempMergArr[i];</div><div class="line">                i++;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                array[k] = tempMergArr[j];</div><div class="line">                j++;</div><div class="line">            &#125;</div><div class="line">            k++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (i &lt;= middle) &#123;</div><div class="line">            array[k] = tempMergArr[i];</div><div class="line">            k++;</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://www.youtube.com/watch?v=sWtYJv_YXbo">看视频比较方便</a></p>
<h3 id="1-5-Selection-Sort"><a href="#1-5-Selection-Sort" class="headerlink" title="1.5 Selection Sort"></a>1.5 Selection Sort</h3><p>每次把数组里面最小的元素挪到最左边,图片是从<a href="http://www.java2novice.com/java-sorting-algorithms/selection-sort/">这里</a>抄的<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/selectionsort.jpg" alt=""><br>java代码也是抄的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.java2novice.algos;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelectionSort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] doSelectionSort(<span class="keyword">int</span>[] arr)&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> index = i;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++)</div><div class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[index])</div><div class="line">                    index = j;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> smallerNumber = arr[index];  </div><div class="line">            arr[index] = arr[i];</div><div class="line">            arr[i] = smallerNumber;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String a[])</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[] arr1 = &#123;<span class="number">10</span>,<span class="number">34</span>,<span class="number">2</span>,<span class="number">56</span>,<span class="number">7</span>,<span class="number">67</span>,<span class="number">88</span>,<span class="number">42</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] arr2 = doSelectionSort(arr1);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr2)&#123;</div><div class="line">            System.out.print(i);</div><div class="line">            System.out.print(<span class="string">", "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意，每次遍历都都会意味着数组分为有序和无序两部分，遍历是从无序的数组第一个开始的，并且将无序数组中的最小值与无序数组第一个元素swap一下。<br>就是很直观的每次把最小的拿到最左边的做法。</p>
<h3 id="1-6-Quicksort"><a href="#1-6-Quicksort" class="headerlink" title="1.6 Quicksort"></a>1.6 Quicksort</h3><p>一种比较快速的排序方法<br><a href="https://www.youtube.com/watch?v=aQiWF4E8flQ">视频</a><br>选中数组最后一个元素，称之为pivot。然后从左到右找，把所有小于pivot的元素挪到左边。然后把pivot挪到刚才那个元素右边，一直重复下去。</p>
<h3 id="1-7-TimSort"><a href="#1-7-TimSort" class="headerlink" title="1.7 TimSort"></a>1.7 TimSort</h3><p>java的Collections.sort的算法，<br><a href="(https://www.youtube.com/watch?v=bvnmbRo7a1Y">Comparison Method Violates Its General Contract!</a>)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/10013-1109230P20693.jpg?imageView2/2/w/600&quot; alt=&quot;FlamingFlowers&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
      <category term="algorithm" scheme="https://haldir65.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>高并发实践手册</title>
    <link href="https://haldir65.github.io/2017/08/03/2017-08-03-high-concurrency-recipes/"/>
    <id>https://haldir65.github.io/2017/08/03/2017-08-03-high-concurrency-recipes/</id>
    <published>2017-08-03T13:04:28.000Z</published>
    <updated>2017-11-19T14:06:48.042Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/blog/be3c80a11edfd0fdb75d098550ed2c8e.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/1102533137-5.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/1102533911-1.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/20120103214255_nTsVt.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/apic5964_sc115.com.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/apic6283_sc115.com.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/849c18412f8e7a0b18df09f6f87e6516.jpg?imageView2/2/w/600" alt=""></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/pretty-orange-mushroom-wallpaper-5386b0c8c3459.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/timg.jpg?imageView2/2/w/600" alt=""></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/beautiful-dandelion-wallpaper-5384b7d0e8b09.jpg?imageView2/2/w/600" alt=""></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/bullet-shots-over-the-flower-wallpaper-56ee6081c7f2b.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/cotton-grass-whip-wallpaper-5383509d2bd13.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/macro-of-yellow-narcisa-flower-wallpaper-53834d45b40a1.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/nature-grass-wet-plants-high-resolution-wallpaper-573f2c6413708.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/ripe-grapes-macro-wallpaper-1920x1080-538350f32e183.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/yellow-autumn-leaves-wallpaper-537f1e4672a31.jpg?imageView2/2/w/600" alt=""></p>
<blockquote>
<p>The difference between “concurrent” and “parallel” execution<br><a href="https://stackoverflow.com/questions/1897993/what-is-the-difference-between-concurrent-programming-and-parallel-programming">Good to know</a></p>
</blockquote>
<h2 id="1-同时对共享资源进行操作好一点的加锁的方式"><a href="#1-同时对共享资源进行操作好一点的加锁的方式" class="headerlink" title="1. 同时对共享资源进行操作好一点的加锁的方式"></a>1. 同时对共享资源进行操作好一点的加锁的方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">           lock.lock(); <span class="comment">//拿不到lock的Thread会挂起</span></div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">this</span>.mList.add(<span class="string">"new elements added by"</span> + mIndex + <span class="string">""</span>); <span class="comment">//对共享资源的操作放这里</span></div><div class="line">           &#125;</div><div class="line">           <span class="keyword">finally</span> &#123;</div><div class="line">               lock.unlock(); <span class="comment">//记得解锁</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<h2 id="2-ThreadLocal比较好的用例在Andriod的Looper中"><a href="#2-ThreadLocal比较好的用例在Andriod的Looper中" class="headerlink" title="2. ThreadLocal比较好的用例在Andriod的Looper中"></a>2. ThreadLocal比较好的用例在Andriod的Looper中</h2><p>Looper.prepare()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">      &#125;</div><div class="line">      sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));<span class="comment">//sThreadLocal是static的，注意leak</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">// ThreadLocal</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</div><div class="line">        Thread t = Thread.currentThread();</div><div class="line">        ThreadLocalMap map = getMap(t); <span class="comment">//ThreadLocalMap就是一个Entry为WeakReference（WeakRWeakReference不是有get方法嘛，也是key-value的形式）。上面返回当前Thread的成员变量。（所以说Thread创建也是很耗费内存的嘛）</span></div><div class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</div><div class="line">            map.set(<span class="keyword">this</span>, value);<span class="comment">//注意这个this是sThreadLocal，static的</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            createMap(t, value);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>所以避免leak的话，记得调用ThreadLocal.remove<br>每一条线程调用ThreadLocal的set方法时都只能改变属于自己（线程）的值，调用get的时候也只能读到自己曾经设置的值。在多条线程面前，一个ThreadLocal类似于一个银行，每条线程只能保存或者更改读取自己的保险柜里的东西，保险柜钥匙即Thread自身。</p>
<h2 id="3-Fork-join-since-java-7"><a href="#3-Fork-join-since-java-7" class="headerlink" title="3. Fork/join since java 7"></a>3. Fork/join since java 7</h2><p>有些任务是可以分块的。<a href="http://ifeve.com/java7-fork-join-and-closure/">work-stealing的实现</a></p>
<h2 id="4-ArrayBlockingQueue-Thread-Safe"><a href="#4-ArrayBlockingQueue-Thread-Safe" class="headerlink" title="4. ArrayBlockingQueue Thread Safe"></a>4. ArrayBlockingQueue<E> Thread Safe</h2><h2 id="5-ReentrantLock-不公平锁"><a href="#5-ReentrantLock-不公平锁" class="headerlink" title="5.ReentrantLock 不公平锁"></a>5.ReentrantLock 不公平锁</h2><p>在jdk1.5里面，ReentrantLock的性能是明显优于synchronized的，但是在jdk1.6里面，synchronized做了优化，他们之间的性能差别已经不明显了。</p>
<h2 id="6-StampedLocks-java-8"><a href="#6-StampedLocks-java-8" class="headerlink" title="6. StampedLocks(java 8)"></a>6. StampedLocks(java 8)</h2><p>java 1.5 就有了ReentrantReadWriteLock，用于实现专门针对读或者写的lock<br>java 8提供了StampedLocks,lock方法返回一个long的时间戳，可以用这个时间戳release lock，或者检测lock是否有效。例如，tryConvertToOptimisticRead,假如在这个读的时间段内未发生其他线程的写操作，可以认为数据是有效的。像这样</p>
<ul>
<li>假如有线程通过lock.writeLock()获得了写锁，只要不unlockWrite，所有的调用lock.readLock或者tryConvertToOptimisticRead都不会成功。</li>
<li>假如有线程获取了读锁，即调用了lock.readLock()，或者tryReadLock获得读取锁。读取获取锁并不是加锁，读并不是危险操作，获取锁只是为了检测读取的过程中是否发生过写</li>
<li>Optimistic Reading ，即tryConvertToOptimisticRead,只有在当前锁不被写持有的时候才返回一个非零值，这个值用于在读取完毕之后用validate检测本次读取的间隙中是否发生过写操作。</li>
</ul>
<h2 id="7-Android官方文档上对于happens-before的准则有详细的描述"><a href="#7-Android官方文档上对于happens-before的准则有详细的描述" class="headerlink" title="7. Android官方文档上对于happens-before的准则有详细的描述"></a>7. Android官方文档上对于happens-before的准则有详细的描述</h2><p><a href="https://developer.android.com/reference/java/util/concurrent/package-summary.html#MemoryVisibility">happens-before</a>，主要是jdk本身提供的primitive遵守的并发准则。</p>
<h2 id="8-lock的声明方式"><a href="#8-lock的声明方式" class="headerlink" title="8. lock的声明方式"></a>8. lock的声明方式</h2><p>一般synchronize(object)就好了,但有更经济的方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Object lock = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] lock = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>]; <span class="comment">// 特殊的instance变量</span></div><div class="line"></div><div class="line">  <span class="function">Public <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></div><div class="line">  </span>&#123;</div><div class="line"></div><div class="line">     <span class="keyword">synchronized</span>(lock) &#123; <span class="comment">//… &#125;</span></div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock = new Object()则需要7行操作码。</p>
<h2 id="9-CountdownLatch的简单使用"><a href="#9-CountdownLatch的简单使用" class="headerlink" title="9. CountdownLatch的简单使用"></a>9. CountdownLatch的简单使用</h2><p>作者：天然鱼<br>链接：<a href="http://www.jianshu.com/p/cef6243cdfd9">http://www.jianshu.com/p/cef6243cdfd9</a><br>來源：简书<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threadNum = <span class="number">5</span>;<span class="comment">//执行任务的子线程数量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> workNum = <span class="number">20</span>;<span class="comment">//任务数量</span></div><div class="line">    <span class="keyword">private</span> ExecutorService service;</div><div class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;String&gt; blockingQueue;</div><div class="line">    <span class="keyword">private</span> CountDownLatch latch;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</div><div class="line">        service = Executors.newFixedThreadPool(threadNum, <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">"WorkThread-%d"</span>).build());</div><div class="line">        blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(workNum);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workNum; i++) &#123;</div><div class="line">            blockingQueue.add(<span class="string">"任务-"</span> + i);</div><div class="line">        &#125;</div><div class="line">        latch = <span class="keyword">new</span> CountDownLatch(workNum);<span class="comment">//计数器的值为任务的数量</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        SoutUtil.print(<span class="string">"主线程开始运行"</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workNum; i++) &#123;</div><div class="line">            service.execute(<span class="keyword">new</span> WorkRunnable());</div><div class="line">        &#125;</div><div class="line">        latch.await();<span class="comment">//等待子线程的所有任务完成</span></div><div class="line">        SoutUtil.print(<span class="string">"主线程去做其它事"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//用blockQueue中的元素模拟任务</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWork</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> blockingQueue.poll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WorkRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            String work = getWork();</div><div class="line">            performWork(work);</div><div class="line">            latch.countDown();<span class="comment">//完成一个任务就调用一次</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performWork</span><span class="params">(String work)</span> </span>&#123;</div><div class="line">        SoutUtil.print(<span class="string">"处理任务："</span> + work);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//模拟耗时的任务</span></div><div class="line">            Thread.currentThread().sleep(<span class="number">60</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="10-CyclicBarrier"><a href="#10-CyclicBarrier" class="headerlink" title="10. CyclicBarrier"></a>10. CyclicBarrier</h2><p>——————————mere trash————————————————-</p>
<ol>
<li>构造函数也不是线程安全的</li>
<li>同步一个对象的前提是各方都同意使用同一把锁作为调用方法的前提，单方面加锁并不限制不尊重锁机制的使用者。</li>
<li>在多线程的场景下，无逻辑相关的代码写的前后顺序并无意义，原因是编译器会进行指令重排。</li>
<li>volatile并不是Atomic操作，例如，A线程对volatile变量进行写操作(实际上是读和写操作)，B线程可能在这两个操作之间进行了写操作；例如用volatile修饰count变量那么 count++ 操作就不是原子性的。而AtomicInteger类提供的atomic方法可以让这种操作具有原子性如getAndIncrement()方法会原子性的进行增量操作把当前值加一</li>
<li>CopyOnWriteArrayList和Collections.synchronizedList相比。在高并发前提下，前者读的性能更好，后者写的性能更好（前者的写性能极差）。<a href="http://blog.csdn.net/yangzl2008/article/details/39456817">CopyOnWriteArrayList与Collections.synchronizedList的性能对比</a>。CopyOnWriteArrayList适合做缓存。</li>
<li>java io为什么慢，有一个原因是InputStream的read方法和OutputStream的write方法都是加了synchronized的。而Okio里面synchronized方法我没找到，另外，真的想要io性能的话，用nio。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.csdn.net/fw0124/article/details/6672522">看起来 ReentrantLock 无论在哪方面都比 synchronized 好</a></li>
<li><a href="https://www.youtube.com/watch?v=yS0Nc-L1Uuk">Jesse Wilson - Coordinating Space and Time</a></li>
<li><a href="http://www.cnblogs.com/xrq730/p/7048693.html">一级缓存，时钟周期</a>volatile硬件层面的实现原理</li>
<li><a href="https://netjs.blogspot.ca/2016/08/stampedlock-in-java.html">StampedLock in Java</a></li>
<li><a href="http://blog.takipi.com/java-8-stampedlocks-vs-readwritelocks-and-synchronized/">Java 8 StampedLocks vs. ReadWriteLocks and Synchronized</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/blog/be3c80a11edfd0fdb75d098550ed2c8e.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
      <category term="concurrency" scheme="https://haldir65.github.io/tags/concurrency/"/>
    
      <category term="java" scheme="https://haldir65.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>多线程断点续传原理及实现</title>
    <link href="https://haldir65.github.io/2017/08/01/2017-08-01-mutithread-downloader/"/>
    <id>https://haldir65.github.io/2017/08/01/2017-08-01-mutithread-downloader/</id>
    <published>2017-08-01T14:19:31.000Z</published>
    <updated>2017-09-12T14:13:00.839Z</updated>
    
    <content type="html"><![CDATA[<p>主要讲一下在java中实现多线程断点续传的原理,主要讲断点下载的原理。<br><img src="http://odzl05jxx.bkt.clouddn.com/4b52d8db2e9d86b95c730af1db127a81.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<p>其实就是在Http请求里面加上一个”range”的header，HttpUrlConnection可以这么干：</p>
<ul>
<li>conn.setRequestProperty(“Range”, “bytes=” + 500 + “-“ + 1000);</li>
</ul>
<p>也就是告诉服务器上次下载到的位置，本地写文件可以使用RandomAccessFile。本地需要记录下上次中断后停下来的位置。可以用db记录，也可以用sp记录。</p>
<p>这里面的难点在于多线程同步问题，高效率锁。还得要使用ArrayBlockingQueue。</p>
<h2 id="1-获取要下载的内容的contentLength"><a href="#1-获取要下载的内容的contentLength" class="headerlink" title="1. 获取要下载的内容的contentLength"></a>1. 获取要下载的内容的contentLength</h2><p>HttpUrlConnection有一个connection.getContentLength()方法，用于获取内容大小(bytes)</p>
<h2 id="2-大文件上传避免oom"><a href="#2-大文件上传避免oom" class="headerlink" title="2. 大文件上传避免oom"></a>2. 大文件上传避免oom</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Caused by java.lang.OutOfMemoryError: Failed to allocate a <span class="number">65548</span> <span class="keyword">byte</span> allocation with <span class="number">32012</span> free bytes and <span class="number">31</span>KB until OOM</div><div class="line">at com.android.okio.Segment.&lt;init&gt;(Segment.java:<span class="number">37</span>)</div><div class="line">at com.android.okio.SegmentPool.take(SegmentPool.java:<span class="number">48</span>)</div><div class="line">at com.android.okio.OkBuffer.writableSegment(OkBuffer.java:<span class="number">511</span>)</div><div class="line">at com.android.okio.OkBuffer.write(OkBuffer.java:<span class="number">424</span>)</div><div class="line">at com.android.okio.OkBuffer.clone(OkBuffer.java:<span class="number">740</span>)</div><div class="line">at com.android.okhttp.internal.http.RetryableSink.writeToSocket(RetryableSink.java:<span class="number">77</span>)</div><div class="line">at com.android.okhttp.internal.http.HttpConnection.writeRequestBody(HttpConnection.java:<span class="number">263</span>)</div><div class="line">at com.android.okhttp.internal.http.HttpTransport.writeRequestBody(HttpTransport.java:<span class="number">84</span>)</div><div class="line">at com.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:<span class="number">790</span>)</div><div class="line">at com.android.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:<span class="number">405</span>)</div><div class="line">at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:<span class="number">349</span>)</div><div class="line">at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:<span class="number">517</span>)</div><div class="line">at com.android.okhttp.internal.http.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:<span class="number">105</span>)</div></pre></td></tr></table></figure>
<p><a href="http://blog.sina.com.cn/s/blog_bfdb961b0101mkbo.html">参考</a> con.setChunkedStreamingMode(1024);//内部缓冲区—分段上传防止oom<br><a href="https://github.com/square/retrofit/issues/2270">解决方案</a>,RequestBody的contentLength设置为-1就好了<br><a href="http://www.cnblogs.com/begin1949/p/5060802.html">HttpURLConnection教程</a></p>
<h2 id="3-现有的实现方案"><a href="#3-现有的实现方案" class="headerlink" title="3. 现有的实现方案"></a>3. 现有的实现方案</h2><p>非常优秀的library，英语流利说喜欢搞多进程。<br><a href="https://github.com/Aspsine/MultiThreadDownload">Aspsine</a><br><a href="https://github.com/lingochamp/FileDownloader">英语流利说</a><br>下载文件的本质是inputstream.read</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.jianshu.com/p/2b82db0a5181">简书</a></li>
<li><a href="https://github.com/AriaLyy/Aria">Demo</a></li>
<li><a href="https://github.com/Aspsine/MultiThreadDownload">MultiThreadDownload for Android</a></li>
<li><a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/43939279">csdn</a></li>
<li><a href="http://blog.csdn.net/chenrunhua/article/details/50113993">断点上传麻烦点，要自己搭server</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要讲一下在java中实现多线程断点续传的原理,主要讲断点下载的原理。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/4b52d8db2e9d86b95c730af1db127a81.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://haldir65.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>二进制编码总结</title>
    <link href="https://haldir65.github.io/2017/07/30/2017-07-30-decoding-the-secret-of-binary/"/>
    <id>https://haldir65.github.io/2017/07/30/2017-07-30-decoding-the-secret-of-binary/</id>
    <published>2017-07-30T09:45:51.000Z</published>
    <updated>2017-11-19T13:22:06.865Z</updated>
    
    <content type="html"><![CDATA[<p>OkHttp作者Jesse Wilson在2016 Droidcon NYC上作了一篇关于编码的演讲，十分有趣。对于了解计算机基础非常有用，结合着写一些关于这方面的笔记。<br><img src="http://odzl05jxx.bkt.clouddn.com/01f691dea62d22e138481a353fbb6228.jpg?imageView2/2/w/600" alt=""></p>
<a id="more"></a>
<h2 id="1-重新学习Java基本数据类型"><a href="#1-重新学习Java基本数据类型" class="headerlink" title="1.重新学习Java基本数据类型"></a>1.重新学习Java基本数据类型</h2><h3 id="基本数据类型之间的转换"><a href="#基本数据类型之间的转换" class="headerlink" title="基本数据类型之间的转换"></a>基本数据类型之间的转换</h3><p>初学java的时候都说没必要记住各种基本数据类型的大小范围。这里补上一些：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">byte：8位，最大存储数据量是255，存放的数据范围是-128~127之间。</div><div class="line"></div><div class="line">short：16位，最大数据存储量是65536，数据范围是-32768~32767之间。</div><div class="line"></div><div class="line">int：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。</div><div class="line"></div><div class="line">long：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。</div><div class="line"></div><div class="line">float：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。</div><div class="line"></div><div class="line">double：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。</div><div class="line"></div><div class="line">boolean：只有true和false两个取值。</div><div class="line"></div><div class="line">char：16位，存储Unicode码，用单引号赋值。</div></pre></td></tr></table></figure>
<p>这个表的顺序是有道理的，byte-&gt;short-&gt;int-&gt;long这类表示的都是整数（不带小数点的）;<br>float-&gt;double这类表示的都是浮点数(计算机里没有小数点，都是用类似科学计数法来表示的);</p>
<p>后面这俩比较特殊：<br>boolean只有两个值;<br>char专门用来表示Unicode码，最小值是0，最大值是65535(2^16-1);</p>
<ul>
<li>(这个范围是严格限定的，比如byte a = 127都没问题，byte a = 128 立马编译有问题。)<br>另外，char是为数不多的可以在java IDE里面像python一样写单引号的机会：<br>char c = ‘1’ // ok<br>char c = ‘12’//错误<br>char c = 12 //正确</li>
</ul>
<p>当一个较大的数和一个较小的数在一块运算的时候，系统会自动将较小的数转换成较大的数，再进行运算。<a href="http://www.cnblogs.com/doit8791/archive/2012/05/25/2517448.html">这里的大小指的是基本类型范围的大小</a><br>所以(byte、short、char) -&gt; int -&gt; long -&gt; float -&gt; double这么从小往大转是没有问题的。编译器自动转，所以经常不会被察觉。<br>byte、short、char这三个是平级的，相互转换也行。<br>试了下,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">byte</span> b = <span class="number">3</span>;</div><div class="line"><span class="keyword">char</span> c = <span class="string">'2'</span>;</div><div class="line"><span class="keyword">short</span> s = <span class="number">23</span>;</div><div class="line"></div><div class="line">s = b; <span class="comment">//只有byte往上转short是自动的</span></div><div class="line">b = (<span class="keyword">byte</span>) s;</div><div class="line"></div><div class="line"></div><div class="line">s = (<span class="keyword">short</span>) c;</div><div class="line">c = (<span class="keyword">char</span>) s;</div><div class="line"></div><div class="line">b = (<span class="keyword">byte</span>) c;</div><div class="line">c = (<span class="keyword">char</span>) b;</div></pre></td></tr></table></figure></p>
<p>强转就意味着可能的精度损失。</p>
<p>所以除去boolean以外:</p>
<ul>
<li>char</li>
<li>byte,short,int,long</li>
<li>float,double<br>可以分成这三类，从小往大转没问题，同一类从小到大转没问题。</li>
</ul>
<p>具体到实际操作上：</p>
<ol>
<li>char-&gt;byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double</li>
<li>有一个操作数是long，结果是long</li>
<li>有一个操作数是float,结果是float</li>
<li>有一个操作数是double，结果是double</li>
<li>long l = 424323L ,后面的L要大写。</li>
<li>这些整数都是没办法表示一个小数的，要用float或者double，后面加上f（F）或者L。</li>
<li>char(16位)，能表示的范围大小和short一样，是用单引号括起来的一个字符(可以是中文字符)，两个字符不行。</li>
<li>char的原理就是转成int，根据unicode编码找到对应的符号并显示出来。</li>
<li>两个char相加，就是转成int之后两个int相加</li>
<li>double类型后面可以不写D</li>
<li>float后面写f或者F都一样</li>
</ol>
<h2 id="2-Java中注意的点"><a href="#2-Java中注意的点" class="headerlink" title="2. Java中注意的点"></a>2. Java中注意的点</h2><p>java编译器将源代码编译位字节码时，会用int来表示boolean(非零表示真)<br>byte,short,int,long这些都是有符号的整数，八进制数以0开头，十六进制数字以0x开头<br>java7 开始 ，可以直接在代码里写二进制数，例如：<br>205 = 0b110_1101</p>
<h2 id="3-Encoding解释"><a href="#3-Encoding解释" class="headerlink" title="3. Encoding解释"></a>3. Encoding解释</h2><ul>
<li>hexadecimal 十六进制</li>
<li>Decimal   十进制</li>
<li>Octal     八进制</li>
</ul>
<h3 id="3-1-用二进制表示-0-1-任何文字的能力"><a href="#3-1-用二进制表示-0-1-任何文字的能力" class="headerlink" title="3.1 用二进制表示(0,1)任何文字的能力"></a>3.1 用二进制表示(0,1)任何文字的能力</h3><p>数据的发送方和接收方对传输数据的结构类型达成一致，即(Encoding)。</p>
<p>8 bit = 1 Byte (为什么是8，据说60年代是6)，8bit能够表达的范围也就是2^8 = 0-256.<br>1967年，ASCII码诞生，即American Standard Code for Information Interchange，即将Byte转成文字的一张表。ASCII只用了7个bits，原因是当时硬件很贵。所以就能够表示128个字符。随便找了下这张表<br><img src="http://odzl05jxx.bkt.clouddn.com/ascii-Table.jpg" alt=""></p>
<p>例如0表示NULL, 65表示A(大写),93表示标点符号”]”。<br>举例：单词Donut的每一个字母对应的ASCII分别是：<br>十进制 ：68  111 110 117 116<br>二进制: 01000100 01101111 01101110 01110101 01110100<br>所以这么发送出去，接收者就知道是Donut了</p>
<h3 id="3-2-可是128个字符不足以表示世界上所有的文字"><a href="#3-2-可是128个字符不足以表示世界上所有的文字" class="headerlink" title="3.2 可是128个字符不足以表示世界上所有的文字"></a>3.2 可是128个字符不足以表示世界上所有的文字</h3><ul>
<li><p>Charset  字符集<br>1991年出现Unicode，用于表示所有的字符，所有语言的每一个字符都能有一个唯一的id（数字）。为了能够表达这么大的一个范围，所以得多用点内存，于是UTF-16(16-bit Unicode Transformation Format)出现了，每一个字符都得用2bytes来表示。至于这张表的范围,2^16 = 65536(好熟悉的数字)，这也就是java的char类型的来源，char的定义就是<strong>16位Unicode字符</strong>。<br>这样做有一个显然的缺陷。<br>Unicode是ASCII的超集，D在ASCII中只要 01000100，在Unicode中却要在前面补上毫无意义的8个0，浪费了空间。</p>
</li>
<li><p>UTF-16最大范围65536</p>
</li>
<li>但还是没法表示一些特殊字符，例如Emoji,Dount Emoji的id是127,849。原因是90年代的设计者没有想到今天会出这么多emoji。解决办法是”surrogate pairs”。下面解释：<br>java的String其实不过是一个char Array的wrapper，如果在ide里面看的话，String里面的char[]每个数字都代表这个位置的Unicode id。所以经常在IDE里debu看到String里面有char[],1=”67”；2=“79”。。。这种东西，其实也就是这个String（字符串）中对应位置的字符的unicode码。对于Emoji，会用两个char来表示。如何确定相邻的两个字符应该用来表示一个Emoji而是两个独立的字符？<br>去看Emoji的Unicode表的话，这四个byte连在一起一般长这样：</li>
<li>\xF0\x9F\x98\x81</li>
<li>\xF0\x9F\x98\x82</li>
<li>\xF0\x9F\x98\x83</li>
<li>\xF0\x9F\x98\x84</li>
</ul>
<p>中间那个\x9F\x98就是surrogate pairs的标志<br>所以，要认识到char本身还是不足以表示所有的字符<br>这样的代码要是拿来打印Emoji，只会讲原本4byte的Emoji拆成2个char，所以就在console里面看到一些乱码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String s = &quot;一些包含Emoji的文字&quot;</div><div class="line">for(int i =0 ,size = s.length();i&lt;size;i++)&#123;</div><div class="line">    char c = s.charAt(i);</div><div class="line">    System.out.println(&quot;The Caharacter at %d is &apos;%c&apos;%n&quot;,i,c);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正确的做法是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String s = &quot;一些包含Emoji的文字&quot;</div><div class="line">for(int i =0 ,size = s.length();i&lt;size;)&#123;</div><div class="line">    int c = s.codePointAt(i);</div><div class="line">    System.out.println(&quot;The Caharacter at %d is &apos;%c&apos;%n&quot;,i,c);</div><div class="line">    i+=Cahracter.charCount(c);//正确识别char数量</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>汉字用UTF-8编码的话，有些还是会超出两个字节的，比如“𠮷”，<a href="https://zh.wiktionary.org/zh-hans/%F0%A0%AE%B7">wiki</a>给这货的解释。十进制是134071，已经超出两个字节(65536)了。<br>转成十六进制的话就是“F0 A0 AE B7”，utf-8本身就是可变长度的编码format，所以这货占了4个字节也正常。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String w = <span class="string">"\uD842\uDFB7"</span>; <span class="comment">//这个“\u”是ide自己加上去的，注意和上面的十六进制不一样，是因为utf-8前面要加一些0,1什么的</span></div><div class="line">      System.out.println(String.valueOf(hex));  <span class="comment">// 134071</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,size = w.length(); i &lt;size;) &#123;</div><div class="line">          <span class="keyword">int</span> c = w.codePointAt(i);</div><div class="line">          System.out.println(String.format(<span class="string">"The character at %d is %c  "</span>, i, c)); <span class="comment">//成功打印出这个汉字</span></div><div class="line">          i += Character.charCount(c);</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-3-UTF-8出现"><a href="#3-3-UTF-8出现" class="headerlink" title="3.3 UTF-8出现"></a>3.3 UTF-8出现</h3><p>8-bit Unicode Transformation Format于1998年出现，之前提到了2个byte表示一个字符实在太浪费了，utf-8的做法是将每个字符所需要的长度变成可变的。</p>
<ul>
<li>多数字符只用1byte，有些用到2,3个byte，Donut的Emoji用4bytes.</li>
</ul>
<p>&lt;=7个bit的（ASCII）： 0XXXXXX (我用X表示可以被填充的空间)<br>&lt;=11个bit  ：110XXXXX 10XXXXXX (第一个byte以110开头，后面以10开头)<br>&lt;=16个bit :  1110XXXX 10XXXXXX 10XXXXXX (第一个byte以1110开头，后面跟两个10开头的bytes)<br>&lt;=21个bit :  11110XXX 10XXXXXX 10XXXXXX 10XXXXXX (第一个byte以11110开头，后面跟三个10开头的bytes)</p>
<p>现在来看看网上那些常用的中文转UTF-8工具怎么用，随便找一个找一个站长之家<br>输入“美” ，对应的utf-8编码是”&amp;#x7F8E”，转Unicode是”\u7f8e”<br>查了下“美”这个字还真是“7F8E”。这里有张比较好的<a href="http://www.chi2ko.com/tool/CJK.htm">表格</a>。<br>二进制转unicode直接粘贴到<a href="http://tool.oschina.net/hexconvert">这里</a>的转16进制就可以了。转utf-8的话，来看这个其实是15个bit。所以这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">7F8E显然是16进制，转成十进制是32654。</div><div class="line">转成二进制是11111111 0001110(注意只有15个bit,前面8个1)。</div><div class="line">转utf-8的时候，从后往前往上面的XXXX里面填充</div><div class="line"></div><div class="line">1110XXXX 10XXXXXX 10XXXXXX就变成了</div><div class="line">1110X111 10111110 10001110（注意有一个位置还空着）</div><div class="line">X用0补上，最终得到汉字&quot;美&quot;的utf-8二进制编码</div><div class="line">11100111 10111110 10001110</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">读取的时候</div><div class="line">1111 111100 01110(7f8e)</div></pre></td></tr></table></figure></p>
<p>，这三个byte就代表汉字”美”。</p>
<p>Integer.toBinaryString提供了将一个int(十进制)转成二进制字符的方法,即给一个十进制数字，转成”01010101110101”这样的String，方便看懂。</p>
<p>即转成一大堆”0101010110”<br>来试一下，看怎么获得这些”01010101110101”.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    String s = <span class="string">"美"</span>;</div><div class="line">    <span class="keyword">char</span>[] array = s.toCharArray();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,size = array.length; i &lt; size; i++) &#123;</div><div class="line">        System.out.println(array[i]);</div><div class="line">        System.out.println(Integer.toBinaryString(array[i]));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">           <span class="comment">//输出   111111110001110</span></div></pre></td></tr></table></figure></p>
<p>古人诚不我欺也<br>反过来，用一大堆”0101010111010”也能在java代码里写一个汉字出来</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> c = <span class="number">0b111111110001110</span>;</div><div class="line">String ns = <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;c&#125;);</div><div class="line">System.out.println(ns);</div></pre></td></tr></table></figure>
<p>0b是java 1.7开始可以使用的用来直接在代码里写二进制的方式。<br>so if you want improve the cooleness of your code…<br>当然java早就准备好了相应的方法(二进制-八进制-十进制-十六进制)之间的互相转化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">十进制转成十六进制：</div><div class="line">String Integer.toHexString(<span class="keyword">int</span> i)</div><div class="line">十进制转成八进制</div><div class="line">String Integer.toOctalString(<span class="keyword">int</span> i)</div><div class="line">十进制转成二进制</div><div class="line"> String Integer.toBinaryString(<span class="keyword">int</span> i)</div><div class="line">十六进制转成十进制</div><div class="line">Integer.valueOf(<span class="string">"FFFF"</span>,<span class="number">16</span>).toString()   <span class="comment">//不能处理带前缀的情况 0x</span></div><div class="line">八进制转成十进制</div><div class="line">Integer.valueOf(<span class="string">"76"</span>,<span class="number">8</span>).toString()  <span class="comment">//前缀0可以被处理</span></div><div class="line">二进制转十进制</div><div class="line">Integer.valueOf(<span class="string">"0101"</span>,<span class="number">2</span>).toString()</div></pre></td></tr></table></figure></p>
<p>String还有一个getByte(Charset)方法，可以传各种charset进去，i/o强调的是读写使用的都是相同的编码，否则就会出现乱码。</p>
<h2 id="4-接下来讲颜色"><a href="#4-接下来讲颜色" class="headerlink" title="4.接下来讲颜色"></a>4.接下来讲颜色</h2><p>颜色就是RGB的组合,屏幕中每一个像素都是由三个subPixel组成的(分别是红绿蓝)，所以在ps里面经常会碰到255,XXX,XXX这种东西。<br>0,0,0代表全黑，255,255,255(0-256也就是一个byte能够表达的范围)代表纯白。其他的颜色都是这三种颜色的组合，所以用三个byte就能表达一种颜色。<br>所以经常在java代码里看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">view.setBackgroundColor(Color.parseColor(&quot;#87CEFA&quot;));//三个bytes</div><div class="line">//或者</div><div class="line">Color.RED</div><div class="line">//还有更好玩的</div><div class="line">tv.setTextColor(Color.rgb(255, 255, 255));</div><div class="line">//&quot;#XX XX XX&quot; 十六进制，256的范围，只需要2位数字就好了，所以总是看到00,01,10,...ff这样</div></pre></td></tr></table></figure></p>
<p>在xml里面是这样的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"wl_blue"</span>&gt;</span>#2878ff<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"wl_gray"</span>&gt;</span>#c1c1c1<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"text_color"</span>&gt;</span>#434343<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>只不过少写了0x而已<br>关于十六进制，多说一点</p>
<ul>
<li>Colors: #ffffff</li>
<li>URL escaping:<a href="http://example.com/?q=hello%20world">http://example.com/?q=hello%20world</a></li>
<li>Unicode code points: U+2020</li>
<li>ipv6地址： 2001∶0d02∶0000∶0000∶0014∶0000∶0000∶0095</li>
</ul>
<p>都是十六进制(Dexadecimal)的应用</p>
<h2 id="5-有了颜色就有了图片"><a href="#5-有了颜色就有了图片" class="headerlink" title="5.有了颜色就有了图片"></a>5.有了颜色就有了图片</h2><p>3个小像素组成一个像素，屏幕上无数个像素(颜色的点,每个像素大小为3bytes)组成了图片，图片只是一个颜色的2维数组(数组的每个元素是一个颜色)。<br>那么一张64<em>64pixel的图标大小为，64</em>64<em>3 = 12 288bytes，现在的屏幕动辄百万像素，1980</em>1080的图片，大小是1980<em>1080</em>3 = 6.4MB。现在明白Android上图片为什么这么容易oom了吧。这还只是rgb，其实正规图片应该还有一个Alpha，即ARGB,好了，这下占用了1920<em>1080</em>4 = 8MB。所以Android在Bitmap里面提供了一些<a href="https://developer.android.com/reference/android/graphics/Bitmap.Config.html#ARGB_8888">选项</a>：</p>
<p>BitMap.config.ALPAH_8 ：只存储透明度，不存储颜色信息</p>
<p>BitMap.config.ARGB_4444(Deprecated) ：Each pixel is stored on 2 bytes. (节省了一般)</p>
<p>BitMap.config.ARGB_8888 : Each pixel is stored on 4 bytes. Each channel (RGB and alpha for translucency) is stored with 8 bits of precision (256 possible values.) This configuration is very flexible and offers the best quality. It should be used whenever possible.这也就是上面提到的一个像素三个小像素外加一个透明度的算法。</p>
<p>Bitmap.Config RGB_565： Each pixel is stored on 2 bytes and only the RGB channels are encoded。(能这么省是因为这里面用5bit表示red，6bit表示green，5bit表示blue，这个划分似乎是UI行业的标准，用了一些近似算法。所以经常看到有人拿着两张ARGB_8888和RGB_565的图片来比较，然后批判RGB_565颜色不准)。RBG_565本来就不是冲着颜色准确去的。其实还有RBG_232这种更加不准确的。</p>
<p>日常开发都是用的ARGB_8888,一个像素要用4bytes内存，所以bitmap真的非常耗内存。</p>
<h2 id="6-来看一张图片是怎么写出来的-在文件系统中"><a href="#6-来看一张图片是怎么写出来的-在文件系统中" class="headerlink" title="6.来看一张图片是怎么写出来的(在文件系统中)"></a>6.来看一张图片是怎么写出来的(在文件系统中)</h2><p>我这里直接把Jesse Wilson的<a href="https://github.com/swankjesse/encoding/blob/master/encoding/src/main/java/com/publicobject/encoding/Bitmap.java">代码</a>复制过来，大意就是写一个bmp文件的方法，先写文件头，然后从那个int[][]中读取数组，写进一个文件，也就得到一个.bmp文件了。文件就是这么写的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Bitmap</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[][] pixels;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Bitmap</span><span class="params">(<span class="keyword">int</span>[][] pixels)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.pixels = pixels;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/** https://en.wikipedia.org/wiki/BMP_file_format */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(BufferedSink sink)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">int</span> height = pixels.length;</div><div class="line">    <span class="keyword">int</span> width = pixels[<span class="number">0</span>].length;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> bytesPerPixel = <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> rowByteCountWithoutPadding = (bytesPerPixel * width);</div><div class="line">    <span class="keyword">int</span> rowByteCount = ((rowByteCountWithoutPadding + <span class="number">3</span>) / <span class="number">4</span>) * <span class="number">4</span>;</div><div class="line">    <span class="keyword">int</span> pixelDataSize = rowByteCount * height;</div><div class="line">    <span class="keyword">int</span> bmpHeaderSize = <span class="number">14</span>;</div><div class="line">    <span class="keyword">int</span> dibHeaderSize = <span class="number">40</span>;</div><div class="line"></div><div class="line">    <span class="comment">// BMP Header</span></div><div class="line">    sink.writeUtf8(<span class="string">"BM"</span>); <span class="comment">// ID.</span></div><div class="line">    sink.writeIntLe(bmpHeaderSize + dibHeaderSize + pixelDataSize); <span class="comment">// File size.</span></div><div class="line">    sink.writeShortLe(<span class="number">0</span>); <span class="comment">// Unused.</span></div><div class="line">    sink.writeShortLe(<span class="number">0</span>); <span class="comment">// Unused.</span></div><div class="line">    sink.writeIntLe(bmpHeaderSize + dibHeaderSize); <span class="comment">// Offset of pixel data.</span></div><div class="line"></div><div class="line">    <span class="comment">// DIB Header</span></div><div class="line">    sink.writeIntLe(dibHeaderSize);</div><div class="line">    sink.writeIntLe(width);</div><div class="line">    sink.writeIntLe(height);</div><div class="line">    sink.writeShortLe(<span class="number">1</span>);  <span class="comment">// Color plane count.</span></div><div class="line">    sink.writeShortLe(bytesPerPixel * Byte.SIZE);</div><div class="line">    sink.writeIntLe(<span class="number">0</span>);    <span class="comment">// No compression.</span></div><div class="line">    sink.writeIntLe(<span class="number">16</span>);   <span class="comment">// Size of bitmap data including padding.</span></div><div class="line">    sink.writeIntLe(<span class="number">2835</span>); <span class="comment">// Horizontal print resolution in pixels/meter. (72 dpi).</span></div><div class="line">    sink.writeIntLe(<span class="number">2835</span>); <span class="comment">// Vertical print resolution in pixels/meter. (72  dpi).</span></div><div class="line">    sink.writeIntLe(<span class="number">0</span>);    <span class="comment">// Palette color count.</span></div><div class="line">    sink.writeIntLe(<span class="number">0</span>);    <span class="comment">// 0 important colors.</span></div><div class="line"></div><div class="line">    <span class="comment">// Pixel data.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> y = height - <span class="number">1</span>; y &gt;= <span class="number">0</span>; y--) &#123;</div><div class="line">      <span class="keyword">int</span>[] row = pixels[y];</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</div><div class="line">        <span class="keyword">int</span> pixel = row[x];</div><div class="line">        sink.writeByte((pixel &amp; <span class="number">0x0000ff</span>));       <span class="comment">// Blue.</span></div><div class="line">        sink.writeByte((pixel &amp; <span class="number">0x00ff00</span>) &gt;&gt; <span class="number">8</span>);  <span class="comment">// Green.</span></div><div class="line">        sink.writeByte((pixel &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>); <span class="comment">// Red.</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// Padding for 4-byte alignment.</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> p = rowByteCountWithoutPadding; p &lt; rowByteCount; p++) &#123;</div><div class="line">        sink.writeByte(<span class="number">0</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encodeToFile</span><span class="params">(File file)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">try</span> (BufferedSink sink = Okio.buffer(Okio.sink(file))) &#123;</div><div class="line">      encode(sink);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里没有考虑压缩算法。这里面还有Big Ending和Small Ending的处理。<br>Big Ending： 拿32bit ，一次读8bit，从左到右<br>Little Ending: 拿32bit ,一次读8bit，从右到左读</p>
<h2 id="7-从json到protoBuffer以及http2"><a href="#7-从json到protoBuffer以及http2" class="headerlink" title="7.从json到protoBuffer以及http2"></a>7.从json到protoBuffer以及http2</h2><p>一般我们看到的json是这样的<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"price"</span>: <span class="number">14</span>,</div><div class="line">  <span class="attr">"gender"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"height"</span>: <span class="number">1.65</span>,</div><div class="line">  <span class="attr">"grade"</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">"time"</span>: ,<span class="attr">"2016-09-30T18:30:00Z"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意那个事件戳，时间戳本可以用long(8bytes)表示，这上面的String的每个字符都在英文或者阿拉伯数字，所以在ASCII内，所以一个字符按照utf-8编码的话也就1byte，一个个数下来也有二十多个bytes。从8bytes到二十多个bytes，浪费了一半多的bits。数据量越大，编码越慢，传输越慢，解码越慢。</p>
<p>来看protocolBuffer，protocolBuffer一般长这样，每一个field都有一个独一无二的tag.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">message Person &#123;</div><div class="line">  required string name = 1;</div><div class="line">  required int32 id = 2;</div><div class="line">  optional string email = 3;</div><div class="line"></div><div class="line">  enum PhoneType &#123;</div><div class="line">    MOBILE = 0;</div><div class="line">    HOME = 1;</div><div class="line">    WORK = 2;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  message PhoneNumber &#123;</div><div class="line">    required string number = 1;</div><div class="line">    optional PhoneType type = 2 [default = HOME];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  repeated PhoneNumber phone = 4;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以 optional string email = 3 为例，ProtocolBuffer定义了一个length mode（enum,int32,int64是000,fixed64是001，String,message是010），拿一个byte出来，先把后面三位填上010，即XXXXX010，然后把3在前面，即00011010，一共只用了一个byte就把String email这句话表示出来了。即protobuffer只需一个byte就能表示key,同样的key，json要12byte（utf-8下一个字母一个byte）。value也是一样，转成hex的形式。<br>印象中http2也是用数字来表示header key的，类似的节省数据的道理。</p>
<h2 id="8-补充"><a href="#8-补充" class="headerlink" title="8. 补充"></a>8. 补充</h2><h3 id="8-1-Big-ending和Little-endian这名字其实跟文学作品有关"><a href="#8-1-Big-ending和Little-endian这名字其实跟文学作品有关" class="headerlink" title="8.1 Big-ending和Little-endian这名字其实跟文学作品有关"></a>8.1 Big-ending和Little-endian这名字其实跟文学作品有关</h3><ol>
<li>Notepad++可以右下角可以看到当前文件的编码方式，utf-8 dom跟微软有关，<a href="http://www.cnblogs.com/findumars/p/3620078.html">最好不要用</a>.</li>
<li>Python前面写的”# -<em>- coding: utf-8 -</em>-“跟这事有关,”#!/usr/bin/python”是用来说明脚本语言是python的</li>
<li>unicode是字符集，utf-8是一种编码形式。</li>
<li>《格列夫游记》里面，吃鸡蛋先打打头还是小头<a href="http://blog.csdn.net/ce123_zhouwei/article/details/6971544">详解</a></li>
<li>文档头部放一个BOM (用来表示该文件的字节序，BOM是FFFE或者FEFF，操作系统也就能判断是大端还是小端了)<a href="http://www.freebuf.com/articles/others-articles/25623.html">大小端的介绍</a></li>
<li>全角和半角跟GB2312把一些ASCII里面已有的拉丁字母又编码了一遍有关。</li>
</ol>
<ul>
<li>GB2312 是对 ASCII 的中文扩展.在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</li>
</ul>
<ol>
<li>大端小端没有谁优谁劣，各自优势便是对方劣势</li>
<li>大小端的<a href="http://blog.csdn.net/ce123_zhouwei/article/details/6971544">应用</a></li>
<li>windows记事本会强行给utf-8加上bom，主要是为了兼容旧版本系统。BOM就是（“FE FF”）这么几个二进制，notepad++需要装插件才能看二进制，比较好的解释看<a href="http://blog.csdn.net/u010999240/article/details/71836108">这篇</a>.直接用InputStream往文件里写byte数组，接着读出来，编码不对就报错。</li>
<li>很多人都有用记事本编辑代码出错的经历，所以尽量不要用windows下的记事本编辑代码。notepad++默认保存为utf-8不带bom格式，所以编辑文件没什么问题。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> 一般操作系统都是小端，而通讯协议是大端的。</div><div class="line">4.1 常见CPU的字节序</div><div class="line">Big Endian : PowerPC、IBM、Sun</div><div class="line">Little Endian : x86、DEC</div><div class="line">ARM既可以工作在大端模式，也可以工作在小端模式。</div><div class="line"></div><div class="line">4.2 常见文件的字节序</div><div class="line">Adobe PS – Big Endian</div><div class="line">BMP – Little Endian</div><div class="line">DXF(AutoCAD) – Variable</div><div class="line">GIF – Little Endian</div><div class="line">JPEG – Big Endian</div><div class="line">MacPaint – Big Endian</div><div class="line">RTF – Little Endian</div><div class="line">另外，Java和所有的网络通讯协议都是使用Big-Endian的编码。</div></pre></td></tr></table></figure>
<h3 id="8-2-读取一个json文件"><a href="#8-2-读取一个json文件" class="headerlink" title="8.2 读取一个json文件"></a>8.2 读取一个json文件</h3><p>先用BufferedSource将文件变成一个Source，再用Moshi从这个Source里面读数据</p>
<h3 id="8-3-从一个byte-中读取一个int或者写一个int可以这样"><a href="#8-3-从一个byte-中读取一个int或者写一个int可以这样" class="headerlink" title="8.3 从一个byte[]中读取一个int或者写一个int可以这样"></a>8.3 从一个byte[]中读取一个int或者写一个int可以这样</h3><p>在com.square.tape.QueueFile中看到<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readInt</span><span class="params">(<span class="keyword">byte</span>[] buffer, <span class="keyword">int</span> offset)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> ((buffer[offset] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>)</div><div class="line">      + ((buffer[offset + <span class="number">1</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span>)</div><div class="line">      + ((buffer[offset + <span class="number">2</span>] &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">8</span>)</div><div class="line">      + (buffer[offset + <span class="number">3</span>] &amp; <span class="number">0xff</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeInt</span><span class="params">(<span class="keyword">byte</span>[] buffer, <span class="keyword">int</span> offset, <span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">  buffer[offset] = (<span class="keyword">byte</span>) (value &gt;&gt; <span class="number">24</span>);</div><div class="line">  buffer[offset + <span class="number">1</span>] = (<span class="keyword">byte</span>) (value &gt;&gt; <span class="number">16</span>);</div><div class="line">  buffer[offset + <span class="number">2</span>] = (<span class="keyword">byte</span>) (value &gt;&gt; <span class="number">8</span>);</div><div class="line">  buffer[offset + <span class="number">3</span>] = (<span class="keyword">byte</span>) value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个int占据4个字节，没问题。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>软件开发能够接触到的最小单位byte就是8个排在一起的可以盛放0或者1的小槽子。从60年代的ASCII到后来的utf-8再到今天的utf-8，成熟的业界标准使得计算机行业能够跨语言形成信息处理，传输，消费的统一化，同时兼顾了效率。</li>
<li>图片只是无数颜色的组合，用byte表示RGB的方式使得电子产品显示图片变为可能。</li>
<li>在数据传输中，数据传输双方可以协商采取合理的传输协议，让通信量变得小，通信速度变快。</li>
<li>hexadecimal简化了写无数个01的过程，日常开发尽量写0xffffff这种形式。两个十六进制数字的组合通常代表一个byte的范围。</li>
<li>根据阮一峰的<a href="http://www.ruanyifeng.com/blog/2014/12/unicode.html">介绍</a>，目前，Unicode的最新版本是7.0版，一共收入了109449个符号，其中的中日韩文字为74500个。可以近似认为，全世界现有的符号当中，三分之二以上来自东亚文字。</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.youtube.com/watch?v=T_p22jMZSrk">Jesse Wilson | Decoding the Secrets of Binary Data </a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/index.html">深入分析 Java 中的中文编码问题</a>IBM出品</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OkHttp作者Jesse Wilson在2016 Droidcon NYC上作了一篇关于编码的演讲，十分有趣。对于了解计算机基础非常有用，结合着写一些关于这方面的笔记。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/01f691dea62d22e138481a353fbb6228.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
      <category term="java" scheme="https://haldir65.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>位运算总结</title>
    <link href="https://haldir65.github.io/2017/07/23/2017-07-23-manipulating-bits/"/>
    <id>https://haldir65.github.io/2017/07/23/2017-07-23-manipulating-bits/</id>
    <published>2017-07-23T11:06:46.000Z</published>
    <updated>2017-10-11T14:36:04.514Z</updated>
    
    <content type="html"><![CDATA[<p>位运算的好处至少有两点，由于是直接操作bit,没有任何包装类，速度快。另外一个就是节省内存了。</p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/8af185ed137a586be732d63425d8bcb8.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<h2 id="1-左移（-lt-lt-）"><a href="#1-左移（-lt-lt-）" class="headerlink" title="1.左移（&lt;&lt;）"></a>1.左移（&lt;&lt;）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="number">5</span>&lt;&lt;<span class="number">2</span>);<span class="comment">//运行结果是20  </span></div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原理：<br>5的二进制表示方式是：<br>0000 0000 0000 0000 0000 0000 0000 0101<br>向左挪两位就变成了<br>0000 0000 0000 0000 0000 0000 0001 0100 //末位补零 ，也就是20</p>
<p>可以认为 5&lt;&lt;n就代表乘以2的n次方<br>所以10KB可以这么写 ： 10&lt;&lt;10</p>
<h2 id="2-右移-gt-gt"><a href="#2-右移-gt-gt" class="headerlink" title="2.右移(&gt;&gt;)"></a>2.右移(&gt;&gt;)</h2><p>和左移反过来，前面补0。一样的道理，不再赘述。</p>
<h2 id="3-无符号右移-gt-gt-gt"><a href="#3-无符号右移-gt-gt-gt" class="headerlink" title="3. 无符号右移(&gt;&gt;&gt;)"></a>3. 无符号右移(&gt;&gt;&gt;)</h2><p>在java中一个int占32位，正数的首位是0，负数位-1。<br>-5 就是<br>1111 1111 1111 1111 1111 1111 1111 1011</p>
<p>正数右移，高位用0补；负数右移，高位用1补；负数无符号右移，用0补高位。</p>
<p>所以-5&gt;&gt;&gt;3 也就变成了<br>0001 1111 1111 1111 1111 1111 1111 1111 //十进制536870911</p>
<p>注意，正数或者负数左移，低位都是用0补</p>
<h2 id="4-位与-amp"><a href="#4-位与-amp" class="headerlink" title="4. 位与(&amp;)"></a>4. 位与(&amp;)</h2><p>看实例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">       System.out.println(<span class="number">5</span> &amp; <span class="number">3</span>);<span class="comment">//结果为1  </span></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>原因： 5的二进制是： 0000 0000 0000 0000 0000 0000 0000 0101<br>      3的二进制是：  0000 0000 0000 0000 0000 0000 0000 0011<br>同一位上必须都为1，结果才为1，否则为0；于是结果就得到：<br>      0000 0000 0000 0000 0000 0000 0000 0001 = 1</p>
<h2 id="5-位或（-）"><a href="#5-位或（-）" class="headerlink" title="5. 位或（|）"></a>5. 位或（|）</h2><p>和位与相反<br>同一位上只要有一个为1，就为1.只有两个都为0，才为0.<br>二进制下：<br>      5的二进制是： 0000 0000 0000 0000 0000 0000 0000 0101<br>      3的二进制是： 0000 0000 0000 0000 0000 0000 0000 0011<br>所以结果是 7        0000 0000 0000 0000 0000 0000 0000 0111<br>所以 (5|3) = 7(这让人想到linux文件权限的777)</p>
<p>其实就是 111 111 111 （owner,creater,others）</p>
<h2 id="6-位异或"><a href="#6-位异或" class="headerlink" title="6. 位异或(^)"></a>6. 位异或(^)</h2><p>还是拿5和3一起算<br>第一个操作数的的第n位于第二个操作数的第n位 相反，那么结果的第n为也为1，否则为0<br>二进制下：<br>      5的二进制是： 0000 0000 0000 0000 0000 0000 0000 0101<br>      3的二进制是： 0000 0000 0000 0000 0000 0000 0000 0011<br>所以结果是 6        0000 0000 0000 0000 0000 0000 0000 0110<br>所以a^b可以用来判断两个Flag前后有没有发生变化，有时候如果发现前后flag没有变化，即不操作。</p>
<h2 id="7-位非"><a href="#7-位非" class="headerlink" title="7.位非(~)"></a>7.位非(~)</h2><p>位非是一元操作符，对一个数进行操作<br>位非：操作数的第n位为1，那么结果的第n位为0，反之为1，就是所有的1变成0,0变成1。<br> 5的二进制是： 0000 0000 0000 0000 0000 0000 0000 0101<br> 倒过来就是：  1111 1111 1111 1111 1111 1111 1111 1010<br>负整数转二进制的标准方法：先是将对应的正整数转换成二进制后，对二进制取反，然后对结果再加一。</p>
<h2 id="8-一些衍生的操作符"><a href="#8-一些衍生的操作符" class="headerlink" title="8.一些衍生的操作符"></a>8.一些衍生的操作符</h2><p>从上面的一些基本操作符衍生来的有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&amp;= 按位与赋值</div><div class="line">|=  按位或赋值</div><div class="line">^= 按位非赋值</div><div class="line">&gt;&gt;= 右移赋值</div><div class="line">&gt;&gt;&gt;= 无符号右移赋值</div><div class="line">&lt;&lt;= 赋值左移</div></pre></td></tr></table></figure>
<p>和+=一个意思。至于那个运算符优先级，算了吧。</p>
<h2 id="9-一些常用的小技巧"><a href="#9-一些常用的小技巧" class="headerlink" title="9.一些常用的小技巧"></a>9.一些常用的小技巧</h2><p>// 1. 获得int型最大值<br>System.out.println((1 &lt;&lt; 31) - 1);// 2147483647， 由于优先级关系，括号不可省略<br>System.out.println(~(1 &lt;&lt; 31));// 2147483647</p>
<p>// 2. 获得int型最小值<br>System.out.println(1 &lt;&lt; 31);<br>System.out.println(1 &lt;&lt; -1);</p>
<p>// 3. 获得long类型的最大值<br>System.out.println(((long)1 &lt;&lt; 127) - 1);</p>
<p>// 4. 乘以2运算<br>System.out.println(10&lt;&lt;1);</p>
<p>// 5. 除以2运算(负奇数的运算不可用)<br>System.out.println(10&gt;&gt;1);</p>
<p>// 6. 乘以2的m次方<br>System.out.println(10&lt;&lt;2);</p>
<p>// 7. 除以2的m次方<br>System.out.println(16&gt;&gt;2);</p>
<p>// 8. 判断一个数的奇偶性<br>System.out.println((10 &amp; 1) == 1);<br>System.out.println((9 &amp; 1) == 1);</p>
<p>// 9. 不用临时变量交换两个数（面试常考）<br>a ^= b;<br>b ^= a;<br>a ^= b;</p>
<p>// 10. 取绝对值（某些机器上，效率比n&gt;0 ? n:-n 高）<br>int n = -1;<br>System.out.println((n ^ (n &gt;&gt; 31)) - (n &gt;&gt; 31));<br>/<em> n&gt;&gt;31 取得n的符号，若n为正数，n&gt;&gt;31等于0，若n为负数，n&gt;&gt;31等于-1<br>若n为正数 n^0-0数不变，若n为负数n^-1 需要计算n和-1的补码，异或后再取补码，<br>结果n变号并且绝对值减1，再减去-1就是绝对值 </em>/</p>
<p>// 11. 取两个数的最大值（某些机器上，效率比a&gt;b ? a:b高）<br>System.out.println(b&amp;((a-b)&gt;&gt;31) | a&amp;(~(a-b)&gt;&gt;31));</p>
<p>// 12. 取两个数的最小值（某些机器上，效率比a&gt;b ? b:a高）<br>System.out.println(a&amp;((a-b)&gt;&gt;31) | b&amp;(~(a-b)&gt;&gt;31));</p>
<p>// 13. 判断符号是否相同(true 表示 x和y有相同的符号， false表示x，y有相反的符号。)<br>System.out.println((a ^ b) &gt; 0);</p>
<p>// 14. 计算2的n次方 n &gt; 0<br>System.out.println(2&lt;&lt;(n-1));</p>
<p>// 15. 判断一个数n是不是2的幂<br>System.out.println((n &amp; (n - 1)) == 0);<br>/<em>如果是2的幂，n一定是100… n-1就是1111….<br>所以做与运算结果为0</em>/</p>
<p>// 16. 求两个整数的平均值<br>System.out.println((a+b) &gt;&gt; 1);</p>
<p>// 17. 从低位到高位,取n的第m位<br>int m = 2;<br>System.out.println((n &gt;&gt; (m-1)) &amp; 1);</p>
<p>// 18. 从低位到高位.将n的第m位置为1<br>System.out.println(n | (1&lt;&lt;(m-1)));<br>/<em>将1左移m-1位找到第m位，得到000…1…000<br>n在和这个数做或运算</em>/</p>
<p>// 19. 从低位到高位,将n的第m位置为0<br>System.out.println(n &amp; ~(0&lt;&lt;(m-1)));<br>/<em> 将1左移m-1位找到第m位，取反后变成111…0…1111<br>n再和这个数做与运算</em>/</p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><ol>
<li>记得Chet Haase和Romain Guy曾经在2013年的一次<a href="https://www.youtube.com/watch?v=Ho-anLsWvJo">演讲</a>中提到,Android中View内部使用了3个int来表示70多个Flags。如果换做boolean(4byte大小)的话，就需要接近300bytes。由于View在Application中被广泛（成百上千）使用，framework这样做事实上为开发者节约了相当多的内存。<br>android.view.View.java<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int mPrivateFlags;</div><div class="line">int mPrivateFlags2;</div><div class="line">int mPrivateFlags3;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>int中的每一个bit都成为一个boolean，一共只用了12bytes(96bits)的内存.和300bytes相比，节省的内存总量还是相当可观的。<br>一个onClickListener大概500bytes<br>所以View.java中到处是这样的奇怪的Flags<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDrawingCacheEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</div><div class="line">      mCachingFailed = <span class="keyword">false</span>;</div><div class="line">      setFlags(enabled ? <span class="number">0x00008000</span> : <span class="number">0</span>, <span class="number">0x00008000</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@ViewDebug</span>.ExportedProperty(category = <span class="string">"drawing"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDrawingCacheEnabled</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> (mViewFlags &amp; <span class="number">0x00008000</span>) == <span class="number">0x00008000</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>除了省内存，位运算速度快也有一定的好处。</p>
<ol>
<li><p>来看看Android中的ViewGroup是怎么干的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Set by default</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_CLIP_CHILDREN = <span class="number">0x1</span>;   <span class="comment">//二进制的1</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_CLIP_TO_PADDING = <span class="number">0x2</span>; <span class="comment">//二进制的10</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_INVALIDATE_REQUIRED  = <span class="number">0x4</span>; <span class="comment">//二进制 100</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_RUN_ANIMATION = <span class="number">0x8</span>; <span class="comment">//二进制1000</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ANIMATION_DONE = <span class="number">0x10</span>; <span class="comment">//二进制 10000</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_PADDING_NOT_NULL = <span class="number">0x20</span>;<span class="comment">//二进制 100000</span></div><div class="line"></div><div class="line"><span class="comment">/** <span class="doctag">@deprecated</span> - functionality removed */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_ANIMATION_CACHE = <span class="number">0x40</span>;<span class="comment">//二进制 1000000</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_OPTIMIZE_INVALIDATE = <span class="number">0x80</span>;<span class="comment">//二进制 10000000</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_CLEAR_TRANSFORMATION = <span class="number">0x100</span>;<span class="comment">//二进制 100000000</span></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_NOTIFY_ANIMATION_LISTENER = <span class="number">0x200</span>;<span class="comment">//二进制 1000000000</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_USE_CHILD_DRAWING_ORDER = <span class="number">0x400</span>;<span class="comment">//二进制 10000000000</span></div><div class="line"></div><div class="line"><span class="comment">//还有更多。</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> ((flags &amp; FLAG_INVALIDATE_REQUIRED) == FLAG_INVALIDATE_REQUIRED) &#123;</div><div class="line">  <span class="comment">//按为与 两个都为1才为1，所以只有当前flag小于FLAG_INVALIDATE_REQUIRED的时候这个表达式才成立</span></div><div class="line">          invalidate(<span class="keyword">true</span>);</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>不要迷信位运算，对于一些简单的操作，现代编译器还是能够帮助开发者自动做好优化的。</p>
</li>
<li><p>从java7开始，可以在java代码里<a href="https://www.bbsmax.com/A/xl569bA1Jr/">直接写二进制，八进制，十六进制的数字了</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//16进制</span></div><div class="line">jdk6写法：</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">int</span> res = Integer.parseInt(<span class="string">"A"</span>, <span class="number">16</span>);</div><div class="line">         System.out.println(res);</div><div class="line">     &#125;</div><div class="line">jdk7写法：</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">int</span> res = <span class="number">0xA</span>;</div><div class="line">         System.out.println(res);</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">// 8进制</span></div><div class="line">jdk6写法:</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">int</span> res = Integer.parseInt(<span class="string">"11"</span>,<span class="number">8</span>);</div><div class="line">         System.out.println(res);</div><div class="line">     &#125;</div><div class="line">jdk7写法:</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">int</span> res = <span class="number">011</span>;</div><div class="line">         System.out.println(res);</div><div class="line">     &#125;</div><div class="line"></div><div class="line"><span class="comment">//二进制</span></div><div class="line">jdk6写法:</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">int</span> res = Integer.parseInt(<span class="string">"1100110"</span>, <span class="number">2</span>);</div><div class="line">         System.out.println(res);</div><div class="line">     &#125;</div><div class="line">jdk7写法:</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">         <span class="keyword">int</span> res = <span class="number">0b1100110</span>;</div><div class="line">         System.out.println(res);</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>即：<br>二进制： int res = 0b110; 六（0B也行，0b01_10010_0这种加下划线也行）<br>八进制： int res = 0110; 七十二<br>十六进制： int res = 0xA;  十</p>
<ol>
<li>View.MeasureSpec就是32位的int<br>前2位是mode(能表示四种，够了),后30位是size<br>文档的定义是：<br>MeasureSpecs are implemented as ints to reduce object allocation. This class<br>is provided to pack and unpack the size, mode tuple into the int<br>就是为了节省内存，才用的位运算<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MeasureSpec</span> </span>&#123;</div><div class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_SHIFT = <span class="number">30</span>;</div><div class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_MASK  = <span class="number">0x3</span> &lt;&lt; MODE_SHIFT;</div><div class="line"></div><div class="line">       <span class="comment">/** <span class="doctag">@hide</span> */</span></div><div class="line">       <span class="meta">@IntDef</span>(&#123;UNSPECIFIED, EXACTLY, AT_MOST&#125;)</div><div class="line">       <span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</div><div class="line">       <span class="keyword">public</span> <span class="meta">@interface</span> MeasureSpecMode &#123;&#125;</div><div class="line"></div><div class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNSPECIFIED = <span class="number">0</span> &lt;&lt; MODE_SHIFT;<span class="comment">//(就是00后面跟30个0)</span></div><div class="line"></div><div class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXACTLY     = <span class="number">1</span> &lt;&lt; MODE_SHIFT;<span class="comment">//（就是01后面跟30个0）</span></div><div class="line"></div><div class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AT_MOST     = <span class="number">2</span> &lt;&lt; MODE_SHIFT;<span class="comment">// (就是10后面跟30个0)</span></div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMode</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">                  <span class="comment">//noinspection ResourceType</span></div><div class="line">                  <span class="keyword">return</span> (measureSpec &amp; MODE_MASK); <span class="comment">//按位与，都是1才能得到1，再加上前面的IndeDef</span></div><div class="line">              &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> (measureSpec &amp; ~MODE_MASK); <span class="comment">//按位与加上位非，二进制取反，结果加一</span></div><div class="line">        &#125;      <span class="comment">// ~MODE_MASK就是01后面跟30个0，所以等于直接把measureSpec后三十位拿出来转成int。</span></div><div class="line">     &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>所以就是一个int存了状态以及大小两部分信息。<br>多说一句measureSpec是在ViewGroup.getChildMeasureSpec里面算出来的，是parent用来跟child交流的，一般用View.resolveSize就知道到底得多大了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://my.oschina.net/xianggao/blog/412967">Java位运算操作全面总结</a></li>
<li><a href="http://blog.csdn.net/xiaochunyong/article/details/7748713">Java 位运算(移位、位与、或、异或、非）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;位运算的好处至少有两点，由于是直接操作bit,没有任何包装类，速度快。另外一个就是节省内存了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/8af185ed137a586be732d63425d8bcb8.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
      <category term="java" scheme="https://haldir65.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式总结</title>
    <link href="https://haldir65.github.io/2017/07/23/2017-07-23-design-pattern/"/>
    <id>https://haldir65.github.io/2017/07/23/2017-07-23-design-pattern/</id>
    <published>2017-07-23T11:03:51.000Z</published>
    <updated>2017-08-01T14:32:19.198Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/509bdb071f9e7040823049e3db56e7c1.jpeg?imageView2/2/w/600" alt=""><br>一般来讲设计模式有23种，这里根据菜鸟教程上的关于设计模式的总结看下来的一些读书笔记，估计要写很久。<br><a id="more"></a></p>
<p>设计模式分四大类：</p>
<ul>
<li>创建型模式</li>
<li>结构型模式</li>
<li>行为型模式</li>
<li>J2EE模式</li>
</ul>
<h2 id="1-面向对象的六大原则"><a href="#1-面向对象的六大原则" class="headerlink" title="1. 面向对象的六大原则"></a>1. 面向对象的六大原则</h2><p>这个就当背书好了。</p>
<ul>
<li>单一职责原则</li>
<li>开闭原则</li>
<li>里氏替换原则</li>
<li>依赖倒置原则</li>
<li>接口隔离原则</li>
<li>迪米特原则</li>
</ul>
<h2 id="2-23中设计模式简单介绍"><a href="#2-23中设计模式简单介绍" class="headerlink" title="2. 23中设计模式简单介绍"></a>2. 23中设计模式简单介绍</h2><ol>
<li>工厂模式<br>意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</li>
</ol>
<p>做法： 定义一个完成某项功能的接口，功能的具体实现由子类决定，让子类实现工厂接口，返回的也是一个抽象产品。</p>
<p>实例：<br>getSystemService根据传入的参数决定返回什么样的SystemService实例。</p>
<ol>
<li>抽象工厂模式</li>
<li>单例模式</li>
<li></li>
</ol>
<p><img src="http://odzl05jxx.bkt.clouddn.com/77a5260f0e038392414105c5bf8fdecc.jpg?imageView2/2/w/600" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://zz563143188.iteye.com/blog/1847029">设计模式大全</a></li>
<li><a href="http://www.jianshu.com/p/1a9f571ad7c0从Android代码中来记忆23种设计模式">从Android代码中来记忆23种设计模式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/509bdb071f9e7040823049e3db56e7c1.jpeg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;一般来讲设计模式有23种，这里根据菜鸟教程上的关于设计模式的总结看下来的一些读书笔记，估计要写很久。&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
      <category term="java" scheme="https://haldir65.github.io/tags/java/"/>
    
      <category term="designpattern" scheme="https://haldir65.github.io/tags/designpattern/"/>
    
  </entry>
  
  <entry>
    <title>java对象内存占用分析</title>
    <link href="https://haldir65.github.io/2017/07/23/2017-07-23-from-java-code-to-java-heap/"/>
    <id>https://haldir65.github.io/2017/07/23/2017-07-23-from-java-code-to-java-heap/</id>
    <published>2017-07-23T11:02:52.000Z</published>
    <updated>2017-10-14T11:08:59.804Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/9b157a7acab582078ac1fabada5c8009.jpg?imageView2/2/w/600" alt=""><br>面向对象语言就意味着对象要占用内存空间，那么，java中随便new 出来的东西到底多大？还有，new出来的东西全都都放在heap上吗(有些真不是)？<br><a id="more"></a></p>
<h2 id="1-首先给出精确判断Object大小的一种方法"><a href="#1-首先给出精确判断Object大小的一种方法" class="headerlink" title="1.首先给出精确判断Object大小的一种方法"></a>1.首先给出精确判断Object大小的一种方法</h2><p>一个判断Java Object大小的方法<br>比较精准的确定一个对象的大小的<a href="https://github.com/liaohuqiu/java-object-size">方法</a>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectSizeFetcher</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Instrumentation instrumentation;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String args, Instrumentation inst)</span> </span>&#123;</div><div class="line">        instrumentation = inst;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getObjectSize</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> instrumentation.getObjectSize(o);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样通常在IDE里面跑不起来。</p>
<p>据说dump memory也行，没试过。</p>
<h2 id="2-内存对齐"><a href="#2-内存对齐" class="headerlink" title="2. 内存对齐"></a>2. 内存对齐</h2><p>JVM为了malloc与gc方便，指定分配的每个对象都需要是8字节的整数倍<a href="http://github.thinkingbar.com/alignment/">参考</a><br>简单来说，一个Object占用的内存大小是8 Byte的倍数</p>
<h2 id="3-java进程的内存占用情况"><a href="#3-java进程的内存占用情况" class="headerlink" title="3. java进程的内存占用情况"></a>3. java进程的内存占用情况</h2><h3 id="3-1-操作系统和runtime占用的内存"><a href="#3-1-操作系统和runtime占用的内存" class="headerlink" title="3.1 操作系统和runtime占用的内存"></a>3.1 操作系统和runtime占用的内存</h3><p>操作系统的内存中，一部分被操作系统和kernel所占用。对于用c或者c++写的jvm，还需要分配一部分给c runtime。操作系统和c<br>runtime占用的内存比较大，不同的操作系统上不一样，windows上默认是2GB。剩下的内存(即user space)，就是进程可以使用的内存。</p>
<h3 id="3-2-剩下的内存-user-space"><a href="#3-2-剩下的内存-user-space" class="headerlink" title="3.2 剩下的内存(user space)"></a>3.2 剩下的内存(user space)</h3><p>对于Java进程来讲，这剩下的部分分为两块:</p>
<ul>
<li>Java Heap(s)</li>
<li>Native (non-java) Heap</li>
</ul>
<p>Java Heap可以通过-Xms 和 -Xmx 来设置最小值和最大值<br>Native Heap是在分配了java maximum Heap大小之后剩下的大小(jvm占用的内存也算在这里面)</p>
<h3 id="3-3-数据类型大小"><a href="#3-3-数据类型大小" class="headerlink" title="3.3 数据类型大小"></a>3.3 数据类型大小</h3><p>基本数据类型大小很简单，其实也不简单。这张图是从ibm网站上截下来的<br><img src="http://odzl05jxx.bkt.clouddn.com/official_java_primitive_type_size_table.JPG" alt=""><br>注意一个boolean在数组中只占用一个字节，单独使用占用4个字节。<br>原理<a href="http://www.jianshu.com/p/2f663dc820d0">参考</a></p>
<p>引用的大小：<br>在 32 位的 JVM 上，一个对象引用占用 4 个字节；在 64 位上，占用 8 个字节。通过 java -d64 -version 可确定是否是 64 位的 JVM。<br>处理器能够处理的bit范围决定了操作系统能够使用的内存范围：<br>32位的cpu(2^32 = 4,294,967,296 bits = 4GB)<br>64位cpu (2^64 = 18,446,744,073,709,551,616 = 16 exabytes)<br>多数jvm是用c或者c++写的:</p>
<ul>
<li>the Java runtime creates an operating-system process — just as if you were running a C-based program. In fact, most JVMs are written largely in C or C++</li>
</ul>
<p>查看jvm是否64位的方法:</p>
<ul>
<li>java -d64 -version<br>64位上引用占用大小变大的原因是，需要管理4g以上的内存，指针(内存地址不够用了)</li>
</ul>
<h2 id="4-java对象内存布局，从一个Integer说起"><a href="#4-java对象内存布局，从一个Integer说起" class="headerlink" title="4. java对象内存布局，从一个Integer说起"></a>4. java对象内存布局，从一个Integer说起</h2><p>一个class实例占据的大小包括:</p>
<ol>
<li>自身的大小（对象头+基本数据类型数据大小） - Shadow heap size<br>Object自身的大小在不同的jvm版本和厂商之间有一些变化，但大体上包括三个部分:</li>
</ol>
<ul>
<li>Class ： 一个指针，指向对应的class，用于表明其类型。比如一个Integer就指向java.lang.Integer这个类(32位上4字节，64位上8字节)</li>
<li>Flags : A collection of flags that describe the state of the object, including the hash code for the object if it has one, and the shape of the object (that is, whether or not the object is an array).（就是存hash值和用于表示是不是数组的，32位上4字节，64位上8字节）</li>
<li>Lock 所有的Object都能lock，这部分内存用于表示当前Object是否是被synchronized(32位上4字节，64位上8字节)</li>
</ul>
<p>所以，对于java.lang.Integer来说，一个Integer的大小就是：<br>32(class信息)+32(Flags)+32(Lock))+32(int是基本数据类型，4字节) = 128bits（16字节）<br>事实上，一个Interger的大小是int（4个字节）的四倍，简单来说一个对象的头信息就占用了3个字节。</p>
<ol>
<li><p>数组的大小<br>数组和普通的object差不多，多了一个size(32字节)。也就是说。为了存储一个int值。使用一个大小为1的int[]数组的内存消耗比一个Integer还要大。（同样，32位4字节，64位8字节）。数组因为多一个size，所以4个字节起步。</p>
</li>
<li><p>8个字节变成4个字节<br>IBM和Oracle的jvm都能够提供ompressed References (-Xcompressedrefs) 和Compressed OOPs (-XX:+UseCompressedOops) 选项。这样一来，原本在64位机器上要占用8个字节的指针就只要占用4个字节了。但这只对java Heap上的内存有效，对于Native Heap这部分，64位占用内存还是要比32位多。所以同样的一份代码，在64位上占用的内存一定比32位上多。jdk 1.6.x之后好像默认是打开了的。</p>
</li>
<li><p>引用的对象的大小(递归即可) - Retained heap size(Shallow Heap大小加上引用的对象的)<br>java.lang.Integer还算比较简单的，里面除了一个int值表示value以外，没有其它的成员变量，所以并没有引用到其他对象的实例。对于复杂一点的数据类型，比如jav.lang.String呢？</p>
</li>
</ol>
<p>String本身是一个很简单的类(如果不算常量池的话)，几乎可以看成一个char数组的wrapper。除了一个普通对象的class、Flag和Locks等信息外，String内部还有一个 private int hash（用于Cache hash值），还有offset和count（这俩好像没找到），此外就是一个char数组了。<br>所以，为了存储8个字符(16个字节,128bits)。首先这个char数组对象占用了16个字节(2*8)+（对象头+数组大小）16个字节 = 256bits。<br>算到String头上，String本身的文件头是12个字节，算上hash,count,offset各自4个字节，就24个字节了。再加上数组的引用4个字节，再加上数组的大小32个字节。<br>合计60个字节（480bits）。而这里面实际有用的数据只有16个字节。73.3%的内存都是存储其他东西的。</p>
<p>说的比较乱了，这里直接照搬一段计算,<a href="http://www.yunweipai.com/archives/1092.html">参考</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">- 一般而言，Java 对象在虚拟机的结构如下：</div><div class="line">•对象头（object header）：8 个字节（保存对象的 class 信息、ID、在虚拟机中的状态）</div><div class="line">•Java 原始类型数据：如 int, float, char 等类型的数据</div><div class="line">•引用（reference）：4 个字节</div><div class="line">•填充符（padding）</div><div class="line"></div><div class="line">String定义：</div><div class="line"></div><div class="line">JDK6:</div><div class="line">private final char value[];</div><div class="line">private final int offset;</div><div class="line">private final int count;</div><div class="line">private int hash;</div><div class="line"></div><div class="line">JDK6的空字符串所占的空间为40字节</div><div class="line"></div><div class="line">JDK7:</div><div class="line">private final char value[];</div><div class="line">private int hash;</div><div class="line">private transient int hash32;</div><div class="line"></div><div class="line">JDK7的空字符串所占的空间也是40字节</div><div class="line"></div><div class="line">JDK6字符串内存占用的计算方式：</div><div class="line">首先计算一个空的 char 数组所占空间，在 Java 里数组也是对象，因而数组也有对象头，故一个数组所占的空间为对象头所占的空间加上数组长度，即 8 + 4 = 12 字节 , 经过填充后为 16 字节。</div><div class="line"></div><div class="line">那么一个空 String 所占空间为：</div><div class="line"></div><div class="line">对象头（8 字节）+ char 数组（16 字节）+ 3 个 int（3 × 4 = 12 字节）+1 个 char 数组的引用 (4 字节 ) = 40 字节。</div><div class="line"></div><div class="line">因此一个实际的 String 所占空间的计算公式如下：</div><div class="line"></div><div class="line">8*( ( 8+12+2*n+4+12)+7 ) / 8 = 8*(int) ( ( ( (n) *2 )+43) /8 )</div><div class="line"></div><div class="line">其中，n 为字符串长度。</div></pre></td></tr></table></figure></p>
<ol>
<li>小结<br>随便new一个Object就意味着12个Byte没了，数组的话16个字节没了。每添加一个成员变量（指针），4个字节没了。这些都还没算上实际存储的数据。</li>
</ol>
<h2 id="5-java-util框架中使用的那些集合类"><a href="#5-java-util框架中使用的那些集合类" class="headerlink" title="5. java.util框架中使用的那些集合类"></a>5. java.util框架中使用的那些集合类</h2><h3 id="5-1-HashSet"><a href="#5-1-HashSet" class="headerlink" title="5.1 HashSet"></a>5.1 HashSet</h3><p>A HashSet is an implementation of the Set interface。无重复元素，不保证迭代顺序，常规的add,contains等方法速度不会随着内部元素的增加而变慢。HashSet内部最多有一个null，底层实现是HashMap，这意味着其占用内存要比HashMap大。<br>默认容量 16个Entries<br>内部元素为空时的大小 144bytes<br>查找，添加，删除的时间复杂度为 O(1)，在没有Hash collisions发生的前提下</p>
<h3 id="5-2-HashMap"><a href="#5-2-HashMap" class="headerlink" title="5.2 HashMap"></a>5.2 HashMap</h3><p>A HashMap is an implementation of the Map interface.<br>HashMap是一种存储Key-Value型数据的集合，一个key最多map到一个value，key和value都可以为null，可以存储重复元素。（所以）——HashMap是HashSet的一种功能上的简化。<br>底层是Entries(Entries元素是链表)，长这样。</p>
<ul>
<li>transient HashMapEntry<K,V>[] table = (HashMapEntry<K,V>[]) EMPTY_TABLE;<br>HashMap的成员变量包括：</li>
</ul>
<p>transient HashMapEntry<K,V>[] table（HashMapEntry的数组）<br>int size<br>int threshold<br>final float loadFactor<br>transient int modCount;</p>
<p>一个HashMap刚创建时(完全为空时)的大小为128bytes，jdk 1.8在初始化时没有加载Entries，在put操作时才去分配。可能会好一点。<br>内部结构一般是这样的，一个HashMapEntry的大小为32byte。<br>int KeyHash<br>Object next<br>Object key<br>Object value<br>HashMap每次put键值对时，都使用了一个HashMap$Entry这样的包装类，这意味着整个HashMap的overhead包括：<br>This means that the total overhead of a HashMap consists of the HashMap object, a HashMap$Entry array entry, and a HashMap$Entry object for each entry.<br>直接照搬结论：对于HashMap<br>Default capacities为16个 entries</p>
<p>对于一个有10000个Entries的HashMap，光是由于HashMap，Entry数组以及每个Entry对象带来的overhead就达到了360K左右，这里还不算存储的键值对本身的大小。</p>
<h3 id="5-3-Hashtable"><a href="#5-3-Hashtable" class="headerlink" title="5.3 Hashtable"></a>5.3 Hashtable</h3><p>HashTable和HashMap的主要区别是HashTable是线程安全的，HashTable中很多方法都加上了synchronized修饰。一般来讲，jdk1.5以上如果想要线程安全，直接用synchronizedHashMap。Hashtable继承自Dictionary，后者已经被废弃了，推荐使用map接口的实现类。<br>照搬结论：要存储10k个Entries，overhead达到360k。</p>
<h3 id="5-4-LinkedList"><a href="#5-4-LinkedList" class="headerlink" title="5.4 LinkedList"></a>5.4 LinkedList</h3><p>Linkedist是典型的双向链表，除非增删操作特别频繁，否则没必要使用。<br>查找的时间复杂度为 o(n)。添加的元素被包装在一个Node节点中。<br>存储10K个元素的overhead为240K。</p>
<h3 id="5-5-ArrayList"><a href="#5-5-ArrayList" class="headerlink" title="5.5 ArrayList"></a>5.5 ArrayList</h3><p>ArrayList要好很多，value直接存在一个数组内部，查找的时间复杂度为o(1)<br>存储10K个元素的overhead为40K左右。</p>
<h3 id="5-6-StringBuffer，StringBuilder"><a href="#5-6-StringBuffer，StringBuilder" class="headerlink" title="5.6 StringBuffer，StringBuilder"></a>5.6 StringBuffer，StringBuilder</h3><p>StringBuffer直接强加synchronized，StringBuilder和StringBuffer都继承自AbstractStringBuilder。成员变量就两个一个char[] value和一个int count。</p>
<h2 id="6-集合的默认初始容量和扩系数"><a href="#6-集合的默认初始容量和扩系数" class="headerlink" title="6.集合的默认初始容量和扩系数"></a>6.集合的默认初始容量和扩系数</h2><p>以StirngBuffer为例（也算一种char的集合吧），默认容量是16，即创建了一个char[16]，空的，算上对象头，一共72bytes。这还只是StringBuffer里什么都没存储的情况。<br>StringBuffer sb = new StringBuffer(“My String”)。//算下用了多少内存<br>首先算数组，文件头12bytes，加上size 16bytes。算上数组，（数组长度为str.length+16）一共116bytes，算上内存对齐，一共120bytes。StringBuffer对象的大小：对象头+count+数组指针 = 20 bytes。<br>合计140bytes，内存对齐后144bytes，只为存储”My String”这9个字符（36bytes）。<br>上面提到的这些集合类都对外提供了可以设置初始容量的构造函数以避免内存浪费，但要注意HashMap只接受2的指数幂。</p>
<h3 id="7-high-level抽象带来的便利性及所需付出的代价"><a href="#7-high-level抽象带来的便利性及所需付出的代价" class="headerlink" title="7.high level抽象带来的便利性及所需付出的代价"></a>7.high level抽象带来的便利性及所需付出的代价</h3><p>面向对象语言推荐开发者使用一些高层抽象化的类，但更加复杂的功能意味着内存占用的增加。而内存意味着一切，所以，权衡好开发便利与内存占用对于程序的高效运行就十分重要，而这一切的前提就在于了解这些Wrapper对象工作的原理。</p>
<h2 id="一些很有意思的事情"><a href="#一些很有意思的事情" class="headerlink" title="一些很有意思的事情"></a>一些很有意思的事情</h2><ul>
<li>Integer内部缓存了一个Integer[] ，最大值可以通过(java.lang.Integer.IntegerCache.high)配置</li>
<li>不同版本jdk上String的优化很有意思，又是那个一个String占用多少字节的问题</li>
<li>关于ConcurrentModificationException，对一个集合的更改分为结构性更改和集合元素值的更改，前者会抛出ConcurrentModificationException，后者不会。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.liaohuqiu.net/cn/posts/caculate-object-size-in-java/">JAVA 对象大小</a></li>
<li><a href="http://www.cnblogs.com/zhanjindong/p/3757767.html">一个Java对象到底占用多大内存</a></li>
<li><a href="http://github.thinkingbar.com/lookup-objsize/">查看 Java 对象大小</a></li>
<li><a href="https://www.ibm.com/developerworks/library/j-codetoheap/index.html">From Java code to Java heap</a></li>
<li><a href="https://www.youtube.com/watch?v=FLcXf9pO27w">Understanding the Memory Usage of Your Application</a></li>
<li><a href="https://www.ibm.com/developerworks/library/j-nativememory-linux/index.html">Thanks for the memory, Linux</a></li>
<li><a href="http://www.jianshu.com/p/2f663dc820d0">boolean数组中一个值占用1bit</a></li>
<li><a href="http://www.yunweipai.com/archives/1092.html">不同jdk版本String做的优化</a></li>
<li><a href="http://www.cnblogs.com/xrq730/p/6928133.html">对象头里面的lock是怎么用的</a></li>
<li><a href="https://academy.realm.io/posts/360-andev-2017-romain-guy-chet-haase-android-performance/">Android里面的一个View大概0.5kb</a></li>
<li><a href="https://www.youtube.com/watch?v=ogRVWXuuAU4">stuart mark也提到了文件头大小</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/9b157a7acab582078ac1fabada5c8009.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;面向对象语言就意味着对象要占用内存空间，那么，java中随便new 出来的东西到底多大？还有，new出来的东西全都都放在heap上吗(有些真不是)？&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://haldir65.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>LruCache阅读笔记</title>
    <link href="https://haldir65.github.io/2017/07/23/2017-07-23-lru-cache-and-more/"/>
    <id>https://haldir65.github.io/2017/07/23/2017-07-23-lru-cache-and-more/</id>
    <published>2017-07-23T11:02:21.000Z</published>
    <updated>2017-11-19T13:59:26.446Z</updated>
    
    <content type="html"><![CDATA[<p>LruCache在android3.1中加入，即android.util.LruCache，主要是作为一种合理的缓存策略的实现，用于替代原来的SoftReference。v4包提供了static version的实现，即android.support.v4.util.LruCache。<br>此外，还有DiskLruCache对应磁盘缓存，在OkHttp和Glide等开源项目中都有，可直接复制过来，改下包名直接用。这些类本质上都是对于Least Recently Used算法的实现。稍微看了下网上的博客，LruCache实际上就是利用了LinkedHashmap的accessorder来实现末位淘汰的。v4包里的LinkedHashmap就是java.util里面的,platform里的LinkedHashmap添加了一些方法。<br><img src="http://odzl05jxx.bkt.clouddn.com/e73669d80265feff2adcb227b7113f2d.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<h2 id="1-使用入门"><a href="#1-使用入门" class="headerlink" title="1. 使用入门"></a>1. 使用入门</h2><p>这是最简单的一个用于缓存图片Bitmap的cache的算法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> maxMemory = (<span class="keyword">int</span>) (Runtime.getRuntime().totalMemory()/<span class="number">1024</span>);</div><div class="line">        <span class="keyword">int</span> cacheSize = maxMemory/<span class="number">8</span>;</div><div class="line">        mMemoryCache = <span class="keyword">new</span> LruCache&lt;String,Bitmap&gt;(cacheSize)&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">sizeOf</span><span class="params">(String key, Bitmap value)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> value.getRowBytes()*value.getHeight()/<span class="number">1024</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div></pre></td></tr></table></figure></p>
<p>这个sizeOf函数必须复写，用于计算单个元素大小，主要为了确保缓存不超出最大容量。</p>
<h2 id="2-简单介绍"><a href="#2-简单介绍" class="headerlink" title="2.简单介绍"></a>2.简单介绍</h2><p>LruCache是线程安全的，在内部的 get、put、remove 包括 trimToSize 都是安全的（因为都上锁了）</p>
<h2 id="简书作者写的比较好"><a href="#简书作者写的比较好" class="headerlink" title="简书作者写的比较好"></a>简书作者写的比较好</h2><p>这种链表最好结合着<a href="http://www.jianshu.com/p/1182237a1940">图</a>来看</p>
<p>HashMap只是一个HashMap.Node的数组，因为Hash Collision产生链表（单向，通过Node.next实现）<br>LinkedHashMap extends HashMap。 基本元素是LinkedHashMap.Entry(extends HashMap.Node，继承不过是添加了before和after的Entry)，由此在HashMap的基础上再构造了一个<strong>双向循环链表</strong>。</p>
<p>LinkedHashMap继承HashMap之后主要Override了几个HashMap预留的回调函数。<br>afterNodeAccess(把最近用过的元素挪到双向链表的尾部),afterNodeInsertion，afterNodeRemoval等<br>也就是说，每次CRUD操作都会把最近使用过的元素挪到最上面(不一定准确，大致这个意思)，而且这项操作只不过是挪一下指针，并不费事</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.jianshu.com/p/b49a111147ee">彻底解析Android缓存机制——LruCache</a></li>
<li><a href="http://www.jianshu.com/p/bdbfdfd0641b">Android源码解析——LruCache</a></li>
<li><a href="https://github.com/LittleFriendsGroup/AndroidSdkSourceAnalysis/blob/master/article/LruCache%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.md">LruCache 源码解析</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;LruCache在android3.1中加入，即android.util.LruCache，主要是作为一种合理的缓存策略的实现，用于替代原来的SoftReference。v4包提供了static version的实现，即android.support.v4.util.LruCache。&lt;br&gt;此外，还有DiskLruCache对应磁盘缓存，在OkHttp和Glide等开源项目中都有，可直接复制过来，改下包名直接用。这些类本质上都是对于Least Recently Used算法的实现。稍微看了下网上的博客，LruCache实际上就是利用了LinkedHashmap的accessorder来实现末位淘汰的。v4包里的LinkedHashmap就是java.util里面的,platform里的LinkedHashmap添加了一些方法。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/e73669d80265feff2adcb227b7113f2d.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>从glide源码到图片加载框架设计思路</title>
    <link href="https://haldir65.github.io/2017/07/21/2017-07-21-glide-decoded/"/>
    <id>https://haldir65.github.io/2017/07/21/2017-07-21-glide-decoded/</id>
    <published>2017-07-20T16:13:02.000Z</published>
    <updated>2017-11-27T14:33:26.200Z</updated>
    
    <content type="html"><![CDATA[<p>glide的源码几个月前曾经拜读过，大致了解了其异步加载的实现原理。图片加载和网络请求很类似，就像当初看Volley，从一个Request —&gt;  CacheDispatch  —&gt; NetworkDispatcher  —-&gt;  ResponseDeliver。优秀的轮子不仅执行效率高，同时具备高的扩展性。读懂源码其实只是第一步，往下应该是利用框架提供的扩展方案，再往后应该就是能够独立设计出一套类似的框架了。</p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/a11f41e0b1df95212c71920b3959cd72.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<h2 id="1-使用入门"><a href="#1-使用入门" class="headerlink" title="1. 使用入门"></a>1. 使用入门</h2><p>印象中最早接触Glide是在cheesequare中，顿时发现，原来加载图片可以这么简单，之后的开发过程中总会对Glide有所偏倚。接近两年之后再来过一遍源码，希望能够回答那个“如果让你来设计一个图片加载框架，你会怎么设计？”的问题。<br>使用方式很简单</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Glide.with(activity)</div><div class="line">              .load(R.drawable.image_id)</div><div class="line">              .into(mImageView);</div></pre></td></tr></table></figure>
<p>来看这里面做了什么：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> RequestManager <span class="title">get</span><span class="params">(FragmentActivity activity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</div><div class="line">        <span class="keyword">return</span> get(activity.getApplicationContext());</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        assertNotDestroyed(activity);</div><div class="line">        FragmentManager fm = activity.getSupportFragmentManager();</div><div class="line">        <span class="keyword">return</span> supportFragmentGet(activity, fm);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">SupportRequestManagerFragment <span class="title">getSupportRequestManagerFragment</span><span class="params">(<span class="keyword">final</span> FragmentManager fm)</span> </span>&#123;</div><div class="line">    SupportRequestManagerFragment current = (SupportRequestManagerFragment) fm.findFragmentByTag(</div><div class="line">        FRAGMENT_TAG);</div><div class="line">    <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</div><div class="line">        current = pendingSupportRequestManagerFragments.get(fm);</div><div class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</div><div class="line">            current = <span class="keyword">new</span> SupportRequestManagerFragment();</div><div class="line">            pendingSupportRequestManagerFragments.put(fm, current);</div><div class="line">            fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();</div><div class="line">            handler.obtainMessage(ID_REMOVE_SUPPORT_FRAGMENT_MANAGER, fm).sendToTarget();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> current;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>with方法只是返回了一个RequestManager，with方法可以接受Fragemnt,Activity以及Context等.以上面的activity为例，supportFragmentGet方法只是通过FragmentActivity的supportFragmentManager去findFragmentByTag，这个Tag叫做：“com.bumptech.glide.manager”，所以一般在Debug的时候，去SupportFragmentManager里面查找，有时候能够看到一个这样的Fragment。这个方法里面就是查找这样的一个Fragment，甚至我们自己也可以FindFragmentByTag去调用这个Fragment的方法(这是一个Public的class)然后从这个Fragemnt里面获得RequestManager成员变量（没有就new一个并set）。可以看出，一个Fragment只有一个RequestManager，Fragment主要是为了跟Activity生命周期挂钩的。这里有必要讲一下为什么要写两次current ==null，findFragmentByTag并不会在commitAllowingStateLoss之后就会返回添加的Fragment，只是往主线程的MessageQueue里面丢了一个消息，这个消息执行完毕之后才findFragmentByTag才不为空。这里用Handler丢一条消息，这条消息肯定要排在之前那条消息之后才被执行，所以才有这样一个Pendingmap的设计。当然到这里，最重要的还是Glide是通过commit了一个特殊的Fragment来实现生命周期监听。<br>具体来看：SupportRequestManagerFragment中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onStart();</div><div class="line">      lifecycle.onStart();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onStop();</div><div class="line">      lifecycle.onStop();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onDestroy();</div><div class="line">      lifecycle.onDestroy();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>而对应到LifeCycle的各个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">       isStarted = <span class="keyword">true</span>;</div><div class="line">       <span class="keyword">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</div><div class="line">           lifecycleListener.onStart();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">       isStarted = <span class="keyword">false</span>;</div><div class="line">       <span class="keyword">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</div><div class="line">           lifecycleListener.onStop();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">       isDestroyed = <span class="keyword">true</span>;</div><div class="line">       <span class="keyword">for</span> (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123;</div><div class="line">           lifecycleListener.onDestroy();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>就是把内部维护的一个集合一个个拿出来调用响应生命周期的方法。<br>而这个LifeCycleListener就是上面创建RequestManager时(构造函数传进来了fragment的lifeCycle)添加的。RequestManager还默认添加了一个ConnectivityMonitor，主要作用就是在生命周期的onStart注册了一个ConnectivityManager.CONNECTIVITY_ACTION的BroadCastReceiver，在onStop的时候unRegister，在网络状态变化的时候调用RequestManager的RequestTracker成员变量的restartRequet。</p>
<p>小结：</p>
<ul>
<li>在有权限(android.permission.ACCESS_NETWORK_STATE)的情况下，Glide已经做好了有网-&gt; 断网-&gt; 有网的恢复请求。另外，Android 7.0虽说不再发送ConnectivityManager.CONNECTIVITY_ACTION这个广播，但对于前台应用，动态注册的Receiver还是能够收到，Glide由于是在OnStart注册的，所以完全没问题。</li>
<li>在一个Activity中，RequestManager只要一个，其实开发者自己保留下来也没什么问题</li>
</ul>
<h2 id="2-RequestManager调度请求"><a href="#2-RequestManager调度请求" class="headerlink" title="2. RequestManager调度请求"></a>2. RequestManager调度请求</h2><p>来看下这个RequestManager的成员变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestManager</span> <span class="keyword">implements</span> <span class="title">LifecycleListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lifecycle lifecycle;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RequestManagerTreeNode treeNode;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RequestTracker requestTracker;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Glide glide; <span class="comment">//全局只有一个，控制线程池，用Application的Context创建的</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OptionsApplier optionsApplier;</div><div class="line">    <span class="keyword">private</span> DefaultOptions options;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">OptionsApplier</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">public</span> &lt;A, X extends GenericRequestBuilder&lt;A, ?, ?, ?&gt;&gt; <span class="function">X <span class="title">apply</span><span class="params">(X builder)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;</div><div class="line">                options.apply(builder);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> builder;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面这个泛型写的非常绕，OptionApplier的意思就是，如果用户提供了一些定制(存在options里面)，就给一些定制的选择。一般这个options为null。</p>
<h3 id="2-1-各种Type的Request"><a href="#2-1-各种Type的Request" class="headerlink" title="2.1 各种Type的Request"></a>2.1 各种Type的Request</h3><p>Glide的RequestManager可以接受各种各样的来源</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> DrawableTypeRequest&lt;Integer&gt; <span class="title">load</span><span class="params">(Integer resourceId)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (DrawableTypeRequest&lt;Integer&gt;) fromResource().load(resourceId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">     <span class="keyword">public</span> DrawableTypeRequest&lt;<span class="keyword">byte</span>[]&gt; load(<span class="keyword">byte</span>[] model) &#123;</div><div class="line">        <span class="keyword">return</span> (DrawableTypeRequest&lt;<span class="keyword">byte</span>[]&gt;) fromBytes().load(model);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> DrawableTypeRequest&lt;File&gt; <span class="title">load</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (DrawableTypeRequest&lt;File&gt;) fromFile().load(file);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//上述方法都调用到了</span></div><div class="line">     <span class="keyword">private</span> &lt;T&gt; <span class="function">DrawableTypeRequest&lt;T&gt; <span class="title">loadGeneric</span><span class="params">(Class&lt;T&gt; modelClass)</span> </span>&#123;</div><div class="line">        ModelLoader&lt;T, InputStream&gt; streamModelLoader = Glide.buildStreamModelLoader(modelClass, context);</div><div class="line">        ModelLoader&lt;T, ParcelFileDescriptor&gt; fileDescriptorModelLoader =</div><div class="line">                Glide.buildFileDescriptorModelLoader(modelClass, context);</div><div class="line">        <span class="keyword">if</span> (modelClass != <span class="keyword">null</span> &amp;&amp; streamModelLoader == <span class="keyword">null</span> &amp;&amp; fileDescriptorModelLoader == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknown type "</span> + modelClass + <span class="string">". You must provide a Model of a type for"</span></div><div class="line">                    + <span class="string">" which there is a registered ModelLoader, if you are using a custom model, you must first call"</span></div><div class="line">                    + <span class="string">" Glide#register with a ModelLoaderFactory for your custom model class"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> optionsApplier.apply(</div><div class="line">                <span class="keyword">new</span> DrawableTypeRequest&lt;T&gt;(modelClass, streamModelLoader, fileDescriptorModelLoader, context,</div><div class="line">                        glide, requestTracker, lifecycle, optionsApplier));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>DrawableTypeRequest接受一个泛型，可以是String(网络路径)，File(本地文件),Integer（资源文件）。所以最终返回的DrawableTypeRequet里面装的可能是String.class，Integer.class也可能是File.class。<br>比较难懂的是 streamModelLoader和fileDescriptorModelLoader的创建.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ModelLoader</span>&lt;<span class="title">T</span>, <span class="title">Y</span>&gt; </span>&#123;</div><div class="line">    <span class="function">DataFetcher&lt;Y&gt; <span class="title">getResourceFetcher</span><span class="params">(T model, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ModelLoader其实就是只有一个方法的接口，例如with(File)会传一个File.class进来，返回的streamModelLoader的T就是File，Y就是InputStream。<br>ModelLoader<T, Y>负责提供DataFetcher<Y>，T是数据源，可以是File,Resourse，url等等。Y用于描述类型，本地的就使用ParcelFileDescriptor（记得FileDescriptor属于Native的东西），网络上的就使用InputStream.<br>T和Y的组合可能有很多种，Cache在Glide(全局唯一)的loaderFactory（成员变量）的一个HashMap(没用ConcurrentHashMap是因为buildModelLoader方法加锁了)中。所以这份缓存也是全局唯一的。<br>T和Y的一一对应其实是在Glide的构造函数里面写好的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">register(File.class, ParcelFileDescriptor.class, <span class="keyword">new</span> FileDescriptorFileLoader.Factory());</div><div class="line">register(File.class, InputStream.class, <span class="keyword">new</span> StreamFileLoader.Factory());</div><div class="line">register(<span class="keyword">int</span>.class, ParcelFileDescriptor.class, <span class="keyword">new</span> FileDescriptorResourceLoader.Factory());</div><div class="line">register(<span class="keyword">int</span>.class, InputStream.class, <span class="keyword">new</span> StreamResourceLoader.Factory());</div><div class="line">register(Integer.class, ParcelFileDescriptor.class, <span class="keyword">new</span> FileDescriptorResourceLoader.Factory());</div><div class="line">register(Integer.class, InputStream.class, <span class="keyword">new</span> StreamResourceLoader.Factory());</div><div class="line">register(String.class, ParcelFileDescriptor.class, <span class="keyword">new</span> FileDescriptorStringLoader.Factory());</div><div class="line">register(String.class, InputStream.class, <span class="keyword">new</span> StreamStringLoader.Factory());</div><div class="line">register(Uri.class, ParcelFileDescriptor.class, <span class="keyword">new</span> FileDescriptorUriLoader.Factory());</div><div class="line">register(Uri.class, InputStream.class, <span class="keyword">new</span> StreamUriLoader.Factory());</div><div class="line">register(URL.class, InputStream.class, <span class="keyword">new</span> StreamUrlLoader.Factory());</div><div class="line">register(GlideUrl.class, InputStream.class, <span class="keyword">new</span> HttpUrlGlideUrlLoader.Factory());</div><div class="line">register(<span class="keyword">byte</span>[].class, InputStream.class, <span class="keyword">new</span> StreamByteArrayLoader.Factory());</div></pre></td></tr></table></figure>
<p>左边有很多种，右边只可能是InputStream或者ParcelFileDescriptor。</p>
<h3 id="2-2-Request的继承关系"><a href="#2-2-Request的继承关系" class="headerlink" title="2.2 Request的继承关系"></a>2.2 Request的继承关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class DrawableTypeRequest&lt;ModelType&gt; extends DrawableRequestBuilder&lt;ModelType&gt; implements DownloadOptions</div><div class="line">public class DrawableRequestBuilder&lt;ModelType&gt;</div><div class="line">       extends GenericRequestBuilder&lt;ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable&gt;</div><div class="line">       implements BitmapOptions, DrawableOptions</div><div class="line">public class GenericRequestBuilder&lt;ModelType, DataType, ResourceType, TranscodeType&gt; implements Cloneable</div></pre></td></tr></table></figure>
<p>记住这个ModelType就是Glide.with(context).load(XXX) 里面传进去的Object的Class，例如File.class，那么<br>上面其实就是创建了一个DrawableTypeRequest，泛型是File ，构造函数一层层往上调用，DrawableRequestBuilder这一层调用了crossFade方法，即默认会有一个crossFade的效果，默认用的是DrawableCrossFadeFactory。注意这里把属于RequestManager的RequestTracker也传进来了。</p>
<ul>
<li>Glide.with(context).load(XX)到目前为止只是返回了一个DrawableTypeRequest<ModelType> 的实例。(还在主线程)</li>
</ul>
<h2 id="2-3-小节"><a href="#2-3-小节" class="headerlink" title="2.3 小节"></a>2.3 小节</h2><p>Glide.with返回一个RequestManger，每个Activity只会有一个RequestManager<br>load方法返回了一个DrawableTypeRequest<T>，这个T可能是File,String,Interger等。<br>到目前为止还只是构建一个Request。</p>
<h2 id="3-DrawableRequestBuilder的into方法"><a href="#3-DrawableRequestBuilder的into方法" class="headerlink" title="3. DrawableRequestBuilder的into方法"></a>3. DrawableRequestBuilder的into方法</h2><p>Glide的最后一个调用方法是into()，也是最终分发请求的方法</p>
<p>DrawableRequestBuilder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Target&lt;GlideDrawable&gt; <span class="title">into</span><span class="params">(ImageView view)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.into(view);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> Target&lt;TranscodeType&gt; <span class="title">into</span><span class="params">(ImageView view)</span> </span>&#123;</div><div class="line">       Util.assertMainThread();<span class="comment">//还是在主线程对不对</span></div><div class="line">       <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You must pass in a non null View"</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (!isTransformationSet &amp;&amp; view.getScaleType() != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">switch</span> (view.getScaleType()) &#123;</div><div class="line">               <span class="keyword">case</span> CENTER_CROP:</div><div class="line">                   applyCenterCrop();</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> FIT_CENTER:</div><div class="line">               <span class="keyword">case</span> FIT_START:</div><div class="line">               <span class="keyword">case</span> FIT_END:</div><div class="line">                   applyFitCenter();</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="comment">//$CASES-OMITTED$</span></div><div class="line">               <span class="keyword">default</span>:</div><div class="line">                   <span class="comment">// Do nothing.</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> into(glide.buildImageViewTarget(view, transcodeClass));</div><div class="line">       <span class="comment">//这个into接收一个Target的子类的实例，而Target又继承自LifeCycleListener</span></div><div class="line">       <span class="comment">//这个TranscodeClass是每一个Request创建的时候从构造函数传进来的。</span></div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//transcodeclass可能是GlideDrawable.class，也可能是Bitmap.class也可能是Drawable.class</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">   <span class="keyword">public</span> &lt;Z&gt; <span class="function">Target&lt;Z&gt; <span class="title">buildTarget</span><span class="params">(ImageView view, Class&lt;Z&gt; clazz)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (GlideDrawable.class.isAssignableFrom(clazz)) &#123; <span class="comment">//isAssignableFrom表示左边的class是否是右边class一个类或者父类，应该和instaceof倒过来。</span></div><div class="line">           <span class="keyword">return</span> (Target&lt;Z&gt;) <span class="keyword">new</span> GlideDrawableImageViewTarget(view);</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Bitmap.class.equals(clazz)) &#123;</div><div class="line">           <span class="keyword">return</span> (Target&lt;Z&gt;) <span class="keyword">new</span> BitmapImageViewTarget(view);</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Drawable.class.isAssignableFrom(clazz)) &#123;</div><div class="line">           <span class="keyword">return</span> (Target&lt;Z&gt;) <span class="keyword">new</span> DrawableImageViewTarget(view);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unhandled class: "</span> + clazz</div><div class="line">                   + <span class="string">", try .as*(Class).transcode(ResourceTranscoder)"</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>GlideDrawableImageViewTarget、BitmapImageViewTarget以及DrawableImageViewTarget全部继承自ImageViewTarget，后者继承自ViewTarget,再继承自BaseTarget，再 implements Target。一层层继承下来，GlideDrawableImageViewTarget等三个子类中都有一个Request，一个T extents View(看来不一定是ImageView)</p>
<h3 id="3-1-以GlideDrawableImageViewTarget为例"><a href="#3-1-以GlideDrawableImageViewTarget为例" class="headerlink" title="3.1 以GlideDrawableImageViewTarget为例"></a>3.1 以GlideDrawableImageViewTarget为例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlideDrawableImageViewTarget</span> <span class="keyword">extends</span> <span class="title">ImageViewTarget</span>&lt;<span class="title">GlideDrawable</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> SQUARE_RATIO_MARGIN = <span class="number">0.05f</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxLoopCount;</div><div class="line">    <span class="keyword">private</span> GlideDrawable resource;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>GlideDrawable是一个继承自Drawable的抽象类，添加了isAnimated(),setLoopCount以及由于实现了isAnimated所需要的三个方法(start,stop,isRunning)。子类必须实现这五个抽象方法。</p>
<p>GlideDrawableImageViewTarget往上走<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageViewTarget</span>&lt;<span class="title">Z</span>&gt; <span class="keyword">extends</span> <span class="title">ViewTarget</span>&lt;<span class="title">ImageView</span>, <span class="title">Z</span>&gt; <span class="keyword">implements</span> <span class="title">GlideAnimation</span>.<span class="title">ViewAdapter</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着往上找父类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewTarget</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">View</span>, <span class="title">Z</span>&gt; <span class="keyword">extends</span> <span class="title">BaseTarget</span>&lt;<span class="title">Z</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ViewTarget"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isTagUsedAtLeastOnce = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer tagId = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> T view;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SizeDeterminer sizeDeterminer;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看下文档：A base Target for loading android.graphics.Bitmaps into Views that provides default implementations for most most methods and can determine the size of views using a android.view.ViewTreeObserver.OnDrawListener<br>To detect View} reuse in android.widget.ListView or any android.view.ViewGroup that reuses views, this class uses the View setTag(Object) method to store some metadata so that if a view is reused, any previous loads or resources from previous loads can be cancelled or reused.<br> Any calls to View setTag(Object)on a View given to this class will result in excessive allocations and<br> and/or IllegalArgumentExceptions. If you must call View#setTag(Object)on a view, consider  using BaseTarget or SimpleTarget instead.</p>
<ul>
<li>翻译一下，ViewTarget提供了将Bitmap 加载进View的大部分方法的基本实现，并且添加了onPreDrawListener以获得View的尺寸，对于Resuse View的场景，通过setTag来取消被滑出屏幕的View的request的加载。</li>
</ul>
<p>既然提供了大部分方法的默认实现，那么一定有方法没实现，其实就是<br>protected void setResource(Z resource)啦。<br>这个Z可能是Bitmap,GlideDrawable或者Drawable。直接拿来setImageBitmap或者setImageDrawable就可以了，这个方法其实在是解码完成之后了。</p>
<p>关键是default implementation是怎么实现的以及这些方法在父类中的调用时机。<br>ViewTarget的构造函数传进来一个View的子类，同时创建一个SizeDeterminer（只是通过onPreDrawListener获得View的宽和高）。</p>
<p>再往上找父类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTarget</span>&lt;<span class="title">Z</span>&gt; <span class="keyword">implements</span> <span class="title">Target</span>&lt;<span class="title">Z</span>&gt; </span>&#123; <span class="comment">//添加了一个Request成员变量，为Target中的一些方法提供了空实现，比如onLoadStarted，onLoadXXX等</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> Request request;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>到这里，还只是配置资源要加载进的对象，我倾向于把Target看成一个资源加载完毕的中转者，它管理了View（也可以没有View）和Request，在外部调用Target.onLoadStarted等方法是，调用View(如果有的话)的xxx方法。</p>
<h3 id="3-2任务分发"><a href="#3-2任务分发" class="headerlink" title="3.2任务分发"></a>3.2任务分发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;Y extends Target&lt;TranscodeType&gt;&gt; <span class="function">Y <span class="title">into</span><span class="params">(Y target)</span> </span>&#123;</div><div class="line">    Util.assertMainThread(); <span class="comment">//还在主线程上</span></div><div class="line">    Request previous = target.getRequest();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123; <span class="comment">//每一个Target都只有一个Request，用于清除之前的请求</span></div><div class="line">        previous.clear();</div><div class="line">        requestTracker.removeRequest(previous);</div><div class="line">        previous.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Request request = buildRequest(target);</div><div class="line">    target.setRequest(request);</div><div class="line">    lifecycle.addListener(target);</div><div class="line">    requestTracker.runRequest(request);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> target; <span class="comment">//这里返回Target的好处在于可以接着链式调用，上面只是添加到任务队列，真正被处理还得等到下一帧(onPreDraw调用时)，所以这里还可以接着对这个Target进行配置</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意 requestTracker.runRequest(request)方法<br>GenericRequest.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line">   */</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span> </span>&#123;</div><div class="line">      startTime = LogTime.getLogTime();</div><div class="line">      <span class="keyword">if</span> (model == <span class="keyword">null</span>) &#123;</div><div class="line">          onException(<span class="keyword">null</span>);</div><div class="line">          <span class="keyword">return</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      status = Status.WAITING_FOR_SIZE;</div><div class="line">      <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</div><div class="line">          onSizeReady(overrideWidth, overrideHeight);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          target.getSize(<span class="keyword">this</span>); <span class="comment">//这个方法其实就等于挂了个钩子在onPreDraw中调用，onPreDraw时会调用onSizeReady。</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!isComplete() &amp;&amp; !isFailed() &amp;&amp; canNotifyStatusChanged()) &#123;</div><div class="line">          target.onLoadStarted(getPlaceholderDrawable());</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">          logV(<span class="string">"finished run method in "</span> + LogTime.getElapsedMillis(startTime));</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>onSizeReady才是真正开始干活的时机，理由也很充分。解码Bitmap必须要知道需要多大的尺寸，否则也是白搭。<br>GenericRequest.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</div><div class="line">  * A callback method that should never be invoked directly.</div><div class="line">  */</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSizeReady</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line"></div><div class="line">     <span class="keyword">if</span> (status != Status.WAITING_FOR_SIZE) &#123;</div><div class="line">         <span class="keyword">return</span>;</div><div class="line">     &#125;</div><div class="line">     status = Status.RUNNING;</div><div class="line"></div><div class="line">     width = Math.round(sizeMultiplier * width); <span class="comment">//这个sizeMultiplier可以通过链式调用配置</span></div><div class="line">     height = Math.round(sizeMultiplier * height);</div><div class="line"></div><div class="line">     ModelLoader&lt;A, T&gt; modelLoader = loadProvider.getModelLoader();</div><div class="line">     <span class="keyword">final</span> DataFetcher&lt;T&gt; dataFetcher = modelLoader.getResourceFetcher(model, width, height);</div><div class="line"></div><div class="line">     ResourceTranscoder&lt;Z, R&gt; transcoder = loadProvider.getTranscoder();</div><div class="line">     loadedFromMemoryCache = <span class="keyword">true</span>;</div><div class="line">     loadStatus = engine.load(signature, width, height, dataFetcher, loadProvider, transformation, transcoder,</div><div class="line">             priority, isMemoryCacheable, diskCacheStrategy, <span class="keyword">this</span>);</div><div class="line">     loadedFromMemoryCache = resource != <span class="keyword">null</span>;</div><div class="line">     <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">         logV(<span class="string">"finished onSizeReady in "</span> + LogTime.getElapsedMillis(startTime));</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h3 id="3-3-缓存查找"><a href="#3-3-缓存查找" class="headerlink" title="3.3 缓存查找"></a>3.3 缓存查找</h3><p>开始查找缓存是engine.load开始的，找到了就调用Callback的onResourceReady<br>Engine.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> &lt;T, Z, R&gt; <span class="function">LoadStatus <span class="title">load</span><span class="params">(Key signature, <span class="keyword">int</span> width, <span class="keyword">int</span> height, DataFetcher&lt;T&gt; fetcher,</div><div class="line">        DataLoadProvider&lt;T, Z&gt; loadProvider, Transformation&lt;Z&gt; transformation, ResourceTranscoder&lt;Z, R&gt; transcoder,</div><div class="line">        Priority priority, <span class="keyword">boolean</span> isMemoryCacheable, DiskCacheStrategy diskCacheStrategy, ResourceCallback cb)</span> </span>&#123;</div><div class="line">    Util.assertMainThread(); <span class="comment">//还是在主线程上</span></div><div class="line">    <span class="keyword">long</span> startTime = LogTime.getLogTime();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> String id = fetcher.getId();<span class="comment">//如果是个网络图片，返回网络url，类似这种</span></div><div class="line">    EngineKey key = keyFactory.buildKey(id, signature, width, height, loadProvider.getCacheDecoder(),</div><div class="line">            loadProvider.getSourceDecoder(), transformation, loadProvider.getEncoder(),</div><div class="line">            transcoder, loadProvider.getSourceEncoder());</div><div class="line"></div><div class="line">    EngineResource&lt;?&gt; cached = loadFromCache(key, isMemoryCacheable);</div><div class="line">    <span class="comment">//EngineResource内部wrap了真正的Resource，并使用一个int acquire表示当前正在占用资源的使用者数。当这个数为0的时候可以release。</span></div><div class="line">    <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</div><div class="line">        cb.onResourceReady(cached);</div><div class="line">        <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">            logWithTimeAndKey(<span class="string">"Loaded resource from cache"</span>, startTime, key);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable);</div><div class="line">    <span class="keyword">if</span> (active != <span class="keyword">null</span>) &#123;</div><div class="line">        cb.onResourceReady(active);</div><div class="line">        <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">            logWithTimeAndKey(<span class="string">"Loaded resource from active resources"</span>, startTime, key);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    EngineJob current = jobs.get(key);</div><div class="line">    <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</div><div class="line">        current.addCallback(cb);</div><div class="line">        <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">            logWithTimeAndKey(<span class="string">"Added to existing load"</span>, startTime, key);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, current);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    EngineJob engineJob = engineJobFactory.build(key, isMemoryCacheable);</div><div class="line">    DecodeJob&lt;T, Z, R&gt; decodeJob = <span class="keyword">new</span> DecodeJob&lt;T, Z, R&gt;(key, width, height, fetcher, loadProvider, transformation,</div><div class="line">            transcoder, diskCacheProvider, diskCacheStrategy, priority);</div><div class="line">    EngineRunnable runnable = <span class="keyword">new</span> EngineRunnable(engineJob, decodeJob, priority);</div><div class="line">    jobs.put(key, engineJob);</div><div class="line">    engineJob.addCallback(cb);</div><div class="line">    engineJob.start(runnable);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">        logWithTimeAndKey(<span class="string">"Started new load"</span>, startTime, key);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, engineJob);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Engine先去Cache里面查找，找到了直接调用ResourceCallback(GenericRequest)的onResourceReady(EngineResource&lt;?&gt; resource)，注意这个EngineResource里面包装了一个Resource，主要是为了引用计数。</p>
<p> Engine的loadFromCache(key, isMemoryCacheable)是第一步，从成员变量cache中获取。找到了就挪到activeResources里面。<br> Engine.java<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span> <span class="keyword">implements</span> <span class="title">EngineJobListener</span>,</div><div class="line">        <span class="title">MemoryCache</span>.<span class="title">ResourceRemovedListener</span>,</div><div class="line">        <span class="title">EngineResource</span>.<span class="title">ResourceListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Engine"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Key, EngineJob&gt; jobs;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EngineKeyFactory keyFactory;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MemoryCache cache;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EngineJobFactory engineJobFactory;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Key, WeakReference&lt;EngineResource&lt;?&gt;&gt;&gt; activeResources;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceRecycler resourceRecycler;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LazyDiskCacheProvider diskCacheProvider;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果在MemoryCache这个Lru里面没找到，就调用loadFromActiveResources，从activeResources里面找到。</p>
<p><strong>所以这里已经出现两层缓存了，先去Lru(内存)找，再去activeResources(HashMap)里面找。缓存都是放在Enginel里面的，全局只有一份</strong></p>
<p>缓存里面的Value都是EngineResource。</p>
<p>这个MemoryCache是一个LruCache，大小是在MemorySizeCalculator中获得的，<br>对于一般的设备，activityManager.getMemoryClass() <em> 1024 </em> 1024获得每个App能够使用的Size,乘以0.4。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">MemorySizeCalculator(Context context, ActivityManager activityManager, ScreenDimensions screenDimensions) &#123;</div><div class="line">       <span class="keyword">this</span>.context = context;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> maxSize = getMaxSize(activityManager);</div><div class="line"></div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> screenSize = screenDimensions.getWidthPixels() * screenDimensions.getHeightPixels()</div><div class="line">               * BYTES_PER_ARGB_8888_PIXEL; <span class="comment">//算出占满整个屏幕的一张图的大小</span></div><div class="line"></div><div class="line">       <span class="keyword">int</span> targetPoolSize = screenSize * BITMAP_POOL_TARGET_SCREENS; <span class="comment">//乘以4就是bitmappool的大小</span></div><div class="line">       <span class="keyword">int</span> targetMemoryCacheSize = screenSize * MEMORY_CACHE_TARGET_SCREENS;</div><div class="line">       <span class="comment">//乘以2就是MemoryCache的大小</span></div><div class="line"></div><div class="line">       <span class="keyword">if</span> (targetMemoryCacheSize + targetPoolSize &lt;= maxSize) &#123;</div><div class="line">           memoryCacheSize = targetMemoryCacheSize;</div><div class="line">           bitmapPoolSize = targetPoolSize;</div><div class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">//这里判断了BitmapPool和MemoryCache的大小之和不能超出应用可以使用的内存大小的0.4倍。</span></div><div class="line">           <span class="keyword">int</span> part = Math.round((<span class="keyword">float</span>) maxSize / (BITMAP_POOL_TARGET_SCREENS + MEMORY_CACHE_TARGET_SCREENS));</div><div class="line">           memoryCacheSize = part * MEMORY_CACHE_TARGET_SCREENS;</div><div class="line">           bitmapPoolSize = part * BITMAP_POOL_TARGET_SCREENS;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>所以缓存的大小综合考虑了屏幕分辨率和内存大小。只要屏幕像素不是特别高，一般都会走到第一步。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>ViewTarget里面有一个 T extends View，可见Glide不只适用于ImageView。</li>
<li>BaseTarget里带了一个private Request，其子类可以通过getRequest获得。</li>
<li>对于ListView等可以快速滑动的View，如果某一个View被滑出屏幕外，自动取消请求(通过setTagId实现)</li>
<li>“You must not call setTag() on a view Glide is targeting” setTag会崩，原因是GenericRequestBuilder的into方法会通过ViewTarget去查找previous，看看这一个ViewTarget是否已经有了request。这一点常见于循环利用View的场景，快速滑动的ViewGroup会复用View。对于同一个View，可能ViewGroup会需要它展示不同的(图片、Url)，所以Glide必须要检查previous，同时清除掉旧的请求。</li>
<li>GenericRequestBuilder的obtainRequest内部使用了一个ArrayDeque来obtain Request。这样Request实例不会多次创建，回收是在request.recycle里面做的。</li>
</ul>
<h3 id="4-离开主线程，提交任务到线程池"><a href="#4-离开主线程，提交任务到线程池" class="headerlink" title="4. 离开主线程，提交任务到线程池"></a>4. 离开主线程，提交任务到线程池</h3><p>如果上面两层缓存都没找到，去jobs里找看下有没有已经加入队列的EngineJob<br>记住上面有两层缓存</p>
<p>来看后面提交任务这几段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"> EngineJob engineJob = engineJobFactory.build(key, isMemoryCacheable);</div><div class="line">        DecodeJob&lt;T, Z, R&gt; decodeJob = <span class="keyword">new</span> DecodeJob&lt;T, Z, R&gt;(key, width, height, fetcher, loadProvider, transformation,</div><div class="line">                transcoder, diskCacheProvider, diskCacheStrategy, priority);</div><div class="line">        EngineRunnable runnable = <span class="keyword">new</span> EngineRunnable(engineJob, decodeJob, priority);</div><div class="line">        jobs.put(key, engineJob);</div><div class="line">        engineJob.addCallback(cb);</div><div class="line">        engineJob.start(runnable); <span class="comment">//往diskCacheService提交了一个Runnable</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">EngineJob</span> <span class="keyword">implements</span> <span class="title">EngineRunnable</span>.<span class="title">EngineRunnableManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> EngineResourceFactory DEFAULT_FACTORY = <span class="keyword">new</span> EngineResourceFactory();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Handler MAIN_THREAD_HANDLER = <span class="keyword">new</span> Handler(Looper.getMainLooper(), <span class="keyword">new</span> MainThreadCallback());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_COMPLETE = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_EXCEPTION = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ResourceCallback&gt; cbs = <span class="keyword">new</span> ArrayList&lt;ResourceCallback&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EngineResourceFactory engineResourceFactory;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EngineJobListener listener;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Key key;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService diskCacheService; <span class="comment">//线程池</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService sourceService; <span class="comment">//线程池</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> isCacheable;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isCancelled;</div><div class="line">    <span class="comment">// Either resource or exception (particularly exception) may be returned to us null, so use booleans to track if</span></div><div class="line">    <span class="comment">// we've received them instead of relying on them to be non-null. See issue #180.</span></div><div class="line">    <span class="keyword">private</span> Resource&lt;?&gt; resource;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasResource;</div><div class="line">    <span class="keyword">private</span> Exception exception;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasException;</div><div class="line">    <span class="comment">// A set of callbacks that are removed while we're notifying other callbacks of a change in status.</span></div><div class="line">    <span class="keyword">private</span> Set&lt;ResourceCallback&gt; ignoredCallbacks;</div><div class="line">    <span class="keyword">private</span> EngineRunnable engineRunnable;</div><div class="line">    <span class="keyword">private</span> EngineResource&lt;?&gt; engineResource;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Future&lt;?&gt; future;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>EngineJob是通过Factory创建的，创建时会传两个线程池进来。一个管DiskCache,一个管Source获取。初始化是在Glide.createGlide里面做的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (sourceService == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> cores = Math.max(<span class="number">1</span>, Runtime.getRuntime().availableProcessors());</div><div class="line">            sourceService = <span class="keyword">new</span> FifoPriorityThreadPoolExecutor(cores);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (diskCacheService == <span class="keyword">null</span>) &#123;</div><div class="line">            diskCacheService = <span class="keyword">new</span> FifoPriorityThreadPoolExecutor(<span class="number">1</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>在外部没有提供线程池的情况下，DiskCache一个线程池就好了，SourceService的大小为当前cpu可用核心数，还是比较高效的。<br>debug的时候可能会看见“fifo-pool-thread-1”这样的线程，就是Glide的。<br>上面是往DiskCacheService提交了一个EngineRunable，这个Runnable的run里面主要是decodeFromCache和DecodeFroSource，分别代表从<strong>磁盘缓存</strong>获取和从数据源获取。<br>首先会调用decodeFromCache，一层层往下找，如果没找到的话会调用onLoadFailed方法，并将任务提交给SourceService，去获取资源。</p>
<h3 id="4-1-CacheService这个线程池的工作以及第三层缓存的出现"><a href="#4-1-CacheService这个线程池的工作以及第三层缓存的出现" class="headerlink" title="4.1 CacheService这个线程池的工作以及第三层缓存的出现"></a>4.1 CacheService这个线程池的工作以及第三层缓存的出现</h3><p><strong>注意这里出现了第三层缓存</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">File cacheFile = diskCacheProvider.getDiskCache().get(key);</div></pre></td></tr></table></figure></p>
<p>这一层缓存是给DiskCache的线程池查找用的，查找的时候分为从Result中查找和从Source中查找，其实查找的目的地都是那个DiskCache，Resul是用ResultKey去找的，Source是用ResultKey.getOriginalKey去查找的。物理位置都放在那个磁盘目录下。</p>
<p>另外在DecodeJob的cacheAndDecodeSourceData方法里，存的只是origin(因为用的是origin Key)，然后再拿着originKey去磁盘找，找出来decode。</p>
<p>DecodeFromCache又包括两步decodeResultFromCache和decodeSourceFromCache，这就让人想到Glide的DiskCacheStrategy分为Result和Source，即可以缓存decode结果也可以缓存decode之前的source。前提是在上面的diskCacheProvider.getDiskCache().get(key)方法里面找到了CachedFile。这个路径在InternalCacheDiskCacheFactory里面写了具体的路径</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">InternalCacheDiskCacheFactory</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> String diskCacheName, <span class="keyword">int</span> diskCacheSize)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>(<span class="keyword">new</span> CacheDirectoryGetter() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> File <span class="title">getCacheDirectory</span><span class="params">()</span> </span>&#123;</div><div class="line">               File cacheDirectory = context.getCacheDir();</div><div class="line">               <span class="keyword">if</span> (cacheDirectory == <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (diskCacheName != <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">new</span> File(cacheDirectory, diskCacheName);</div><div class="line">                   <span class="comment">//就是context.getCacheDir+"image_manager_disk_cache"</span></div><div class="line">                   <span class="comment">//默认上限是250MB</span></div><div class="line">                   <span class="comment">//由于这个Cache放在CacheDir里面，其他应用拿不到</span></div><div class="line">               &#125;</div><div class="line">               <span class="keyword">return</span> cacheDirectory;</div><div class="line">           &#125;</div><div class="line">       &#125;, diskCacheSize);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>注意无论是decodeResultFromCache还是decodeSourceFromCache里都有类似的一段：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Resource&lt;T&gt; transformed = loadFromCache(resultKey);</div><div class="line">Resource&lt;Z&gt; result = transcode(transformed); <span class="comment">///把一种资源转成另一种资源，比如把Bitmap的Resource转成一个ByteResource</span></div></pre></td></tr></table></figure></p>
<h3 id="4-2-SourceService这个线程池以及BitmapPool这一层缓存的出现"><a href="#4-2-SourceService这个线程池以及BitmapPool这一层缓存的出现" class="headerlink" title="4.2 SourceService这个线程池以及BitmapPool这一层缓存的出现"></a>4.2 SourceService这个线程池以及BitmapPool这一层缓存的出现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Resource&lt;T&gt; <span class="title">decodeFromSourceData</span><span class="params">(A data)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">     <span class="keyword">final</span> Resource&lt;T&gt; decoded;</div><div class="line">     <span class="keyword">if</span> (diskCacheStrategy.cacheSource()) &#123;</div><div class="line">         decoded = cacheAndDecodeSourceData(data);</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">long</span> startTime = LogTime.getLogTime();</div><div class="line">         decoded = loadProvider.getSourceDecoder().decode(data, width, height); <span class="comment">// 这里面放进BitmapPool了</span></div><div class="line">         <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</div><div class="line">             logWithTimeAndKey(<span class="string">"Decoded from source"</span>, startTime);</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> decoded;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><strong>第四层缓存出现。。。LruBitmapPool</strong><br>DecodeFromSource也是类似，判断是否允许Cache，通过DataFetcher获取数据这个数据可能是InputStream，也可能是ImageVideoWrapper。。。总之是一个可以提供数据的来源。如果可以Cache的话，先把数据写到lru里面，然后从lru里面取出来，从Source decode成想要的数据类型。<br>例如从Stream转成Bitmap是这么干的<br>StreamBitmapDecoder.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> Resource&lt;Bitmap&gt; <span class="title">decode</span><span class="params">(InputStream source, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">       Bitmap bitmap = downsampler.decode(source, bitmapPool, width, height, decodeFormat);</div><div class="line">       <span class="keyword">return</span> BitmapResource.obtain(bitmap, bitmapPool);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>顺便还放进了LruBitmapPool（又一个实现了lru算法的缓存），Bitmap存在一个LruPoolStrategy接口实例的GroupedLinkedMap中。</p>
<h3 id="4-3-回到主线程"><a href="#4-3-回到主线程" class="headerlink" title="4.3 回到主线程"></a>4.3 回到主线程</h3><p>EngineRunnable的run方法跑在子线程，在run的最后就是用一个handler推到主线程了。有可能是从CacheService这个线程池里面的线程推过去的，也可能是SourceSevice这个线程池里面推过去的。</p>
<p>onResourceReady最终会走到GenericRequest的onResourceReady方法里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private void onResourceReady(Resource&lt;?&gt; resource, R result) &#123;</div><div class="line"></div><div class="line">      if (requestListener == null || !requestListener.onResourceReady(result, model, target, loadedFromMemoryCache,</div><div class="line">              isFirstResource)) &#123;</div><div class="line">          GlideAnimation&lt;R&gt; animation = animationFactory.build(loadedFromMemoryCache, isFirstResource);</div><div class="line">          target.onResourceReady(result, animation); //注意这句话就可以了</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>最终会调到ImageViewTarget,AppWidgetTarget等Target（持有Request和View,View可能没有），这时候，直接调用ImageView.setImagBitmap等方法就可以了。<br>图片设置完毕。</p>
<h3 id="5-Glide除了普通的加载方法，还能用什么比较有意思的玩法"><a href="#5-Glide除了普通的加载方法，还能用什么比较有意思的玩法" class="headerlink" title="5. Glide除了普通的加载方法，还能用什么比较有意思的玩法"></a>5. Glide除了普通的加载方法，还能用什么比较有意思的玩法</h3><ul>
<li>1.Glide加载Gif的原理在GifDecoder的 public synchronized Bitmap getNextFrame()方法里，Gif本质上是一帧帧的Frame数据，Glide将这些数据包装到GifFrame这个类中，每次想要获得下一帧的时候，就从bitmapPool中obtain Bitmap,同时从Frame中提取必要信息填充bitmap.<br>Gif的显示是在GifDrawable的draw方法里面通过frameLoader.getCurrentFrame()获得当前帧的bitmap。</li>
</ul>
<ul>
<li><p>2.GlideDrawableImageViewTarget中有这么一段注释：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(GlideDrawable resource, GlideAnimation&lt;? <span class="keyword">super</span> GlideDrawable&gt; animation)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!resource.isAnimated()) &#123;</div><div class="line">           <span class="comment">//<span class="doctag">TODO:</span> Try to generalize this to other sizes/shapes.</span></div><div class="line">           <span class="comment">// This is a dirty hack that tries to make loading square thumbnails and then square full images less costly</span></div><div class="line">           <span class="comment">// by forcing both the smaller thumb and the larger version to have exactly the same intrinsic dimensions.</span></div><div class="line">           <span class="comment">// If a drawable is replaced in an ImageView by another drawable with different intrinsic dimensions,</span></div><div class="line">           <span class="comment">// the ImageView requests a layout. Scrolling rapidly while replacing thumbs with larger images triggers</span></div><div class="line">           <span class="comment">// lots of these calls and causes significant amounts of jank.</span></div><div class="line">           <span class="keyword">float</span> viewRatio = view.getWidth() / (<span class="keyword">float</span>) view.getHeight();</div><div class="line">           <span class="keyword">float</span> drawableRatio = resource.getIntrinsicWidth() / (<span class="keyword">float</span>) resource.getIntrinsicHeight();</div><div class="line">           <span class="keyword">if</span> (Math.abs(viewRatio - <span class="number">1f</span>) &lt;= SQUARE_RATIO_MARGIN</div><div class="line">                   &amp;&amp; Math.abs(drawableRatio - <span class="number">1f</span>) &lt;= SQUARE_RATIO_MARGIN) &#123;</div><div class="line">               resource = <span class="keyword">new</span> SquaringDrawable(resource, view.getWidth());</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">super</span>.onResourceReady(resource, animation);</div><div class="line">       <span class="keyword">this</span>.resource = resource;</div><div class="line">       resource.setLoopCount(maxLoopCount);</div><div class="line">       resource.start();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><ol>
<li>Glide还可以用来纯粹的解码获得Bitmap.<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Glide.with(itemView.getContext()) <span class="comment">//不用担心leak,RequestManager只是通过这个context获得了ApplicationContext，保留下来的是Application的context</span></div><div class="line">               .load(R.drawable.image_41)</div><div class="line">               .asBitmap()</div><div class="line">               .centerCrop().into(<span class="keyword">new</span> SimpleTarget&lt;Bitmap&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(Bitmap resource, GlideAnimation&lt;? <span class="keyword">super</span> Bitmap&gt; glideAnimation)</span> </span>&#123;</div><div class="line"></div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">               <span class="keyword">super</span>.onDestroy(); <span class="comment">//其实这里面是空方法。</span></div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>4.缓存路径获取</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Glide.with(itemView.getContext())</div><div class="line">            .load(<span class="string">""</span>)</div><div class="line">            .downloadOnly(<span class="keyword">new</span> BaseTarget&lt;File&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(File resource, GlideAnimation&lt;? <span class="keyword">super</span> File&gt; glideAnimation)</span> </span>&#123;</div><div class="line">                  Log.d(TAG, resource.getAbsoluteFile());</div><div class="line">              <span class="comment">//放心，都在主线程</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSize</span><span class="params">(SizeReadyCallback cb)</span> </span>&#123;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>根据之前的分析，打印出来的应该是context.getCacheDir+”image_manager_disk_cache”+”/xxxxxx.xxx” ，我没研究过后缀，不过这个后缀没意义吧。</p>
<ul>
<li><ol>
<li>在2017年的Droidcon2017NYC上，有一个演讲提到了关于图片尺寸大小和内存关系。大致情形就是在使用加载图片的时候，使用了一张3594pixel<em>5421pixel(1900万像素)的图片（内存占用19million pixels X 4 bytes/pixel = 78MB），填进了一个50dp</em>50dp的avatar中。而如果使用和ImageView大小一样的图片源的话(150pxX150px)，只需要90kb。这之间的内存消耗差异几乎是1000倍。这位speaker说的解决方案是请求图片是加上宽度和高度参数，或者调用Picasso的fit方法。目前看来，Glide从onSizeReady之后获取资源的每一步，读取缓存，读磁盘，解码图片这些过程都带上了width和height参数，所以应该也是不存在这种浪费内存的问题</li>
</ol>
</li>
</ul>
<p>-</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>4层缓存（MemoryCache是内存中的一层，activeResources是一层（HashMap）,cacheService和SourceService这俩线程池干活需要一个DiskLruCache，另外decode还有一个bitmapPool，其实这不算缓存吧）。</li>
<li>默认的缓存大小考虑了屏幕尺寸和可用内存大小，科学合理。线程池的keepAlive数量上，一个是可用cpu核心数，所以快吧，一个是1。</li>
<li>全局只有一个Glide,一个页面只有一个RequestManager</li>
<li>Target是一个接口，将资源的受众抽象成一个接口。</li>
<li>setTag会崩，ListView,RecyclerView原理,加载优化(prefetcher什么的，滑动过程中不去加载图片，Glide只是取消了之前的请求，并未去prefetch,其实可以啊，网络差的时候，downloadOnly就好了嘛，下次会快一点点)</li>
<li>传进去的是context，但它只是借用context.getApplicationContext，保留下来的是ApplicationContext，哪有那么容易leak。</li>
<li>生命周期挂钩什么，创建一个没有View的SupportFragment，还是做的很巧妙的。</li>
<li>泛型写的各种绕。。。</li>
</ul>
<p><strong>现在来回答那个问题：“如果你来设计一个图片加载框架，你会怎么设计？”</strong></p>
<p>一个ImagerLoader应该具有的几个特性包括：</p>
<ol>
<li>内存缓存和磁盘缓存,lru</li>
<li>做好图片压缩和bitmap重用(不可见图片及时回收)，避免oom (bitmap的宽高要根据View的大小确定)</li>
<li>对于不同资源来源能够提供对应的DataFetcher</li>
<li>对外提供start,stop,pause,resume等功能，必要时自动跟踪应用生命周期</li>
<li>耗时操作(io，解码)挪到后台</li>
<li>内存缓存可以设计两层bitmap缓存，一层是直接拿来用的(active)，一层是lru的。根据<a href="https://dev.qq.com/topic/591d61f56793d26660901b4e">经验</a>，一张bitmap占几个MB(高分辨屏幕)，而一个App能够使用的最大heap大小（ActivityManage.getMemoryClass）一般在100多MB，取其中的40%。完全能够做到内存中cache十几张bitmap。</li>
</ol>
<p>外部调用者需要传入资源(url,File,res，etc)，及ImageView实例(我们也就有了Context)。在onPreDraw之后获得View的尺寸（这一点至关重要）。根据资源地址生成唯一的key，在bitmap pool中查找，然后在内存缓存(lru)中查找。如果还未找到的话提交DiskCache查找请求请求到DiskCache查找线程池，如果未找到提交请求到资源获取线程池(网络，文件，或者Res)，数据获取完成后cahe到disk并提交到主线程。多线程同步和生命周期追踪是难点。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://frodoking.github.io/2015/10/10/android-glide/">Android Glide源码解析</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;glide的源码几个月前曾经拜读过，大致了解了其异步加载的实现原理。图片加载和网络请求很类似，就像当初看Volley，从一个Request —&amp;gt;  CacheDispatch  —&amp;gt; NetworkDispatcher  —-&amp;gt;  ResponseDeliver。优秀的轮子不仅执行效率高，同时具备高的扩展性。读懂源码其实只是第一步，往下应该是利用框架提供的扩展方案，再往后应该就是能够独立设计出一套类似的框架了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/a11f41e0b1df95212c71920b3959cd72.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>网络通信手册</title>
    <link href="https://haldir65.github.io/2017/07/21/2017-07-21-network-manual/"/>
    <id>https://haldir65.github.io/2017/07/21/2017-07-21-network-manual/</id>
    <published>2017-07-20T16:05:32.000Z</published>
    <updated>2017-11-27T13:51:26.592Z</updated>
    
    <content type="html"><![CDATA[<p>网络相关的查找手册<br><img src="http://odzl05jxx.bkt.clouddn.com/b9ae1189145b4a4d9dfe4d0b89a21b47.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<h2 id="1-URI和URL是两件事"><a href="#1-URI和URL是两件事" class="headerlink" title="1. URI和URL是两件事"></a>1. URI和URL是两件事</h2><p>根据<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6">wiki的解释</a><br>URL是URI的子集，URL的一般格式包括三部分：资源类型、存放资源的主机域名，资源文件名。语法格式上,根据<a href="https://baike.baidu.com/item/URL%E6%A0%BC%E5%BC%8F/10056474?fr=aladdin">百度百科</a>找到一个能用的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</div></pre></td></tr></table></figure></p>
<ul>
<li>protocol 指使用的传输协议(http、file、https、mailto、ed2k、thunder等)<br>hostname 是指存放资源的服务器的域名系统(DNS) 主机名或 IP 地址。有时，在主机名前也可以包含连接到服务器所需的用户名和密码（格式：username:password@hostname）。有时候是ip,有时候前面还带账号密码<br>port http默认是80，https是443 ,ssh默认端口号是20<br>path(路径) 由零或多个“/”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。<br>parameters（参数）这是用于指定特殊参数的可选项。<br>query(查询) 一般GET请求可以在这里面查找。可选，用于给动态网页（如使用CGI、ISAPI、PHP/JSP/ASP/ASP。NET等技术制作的网页）传递参数，可有多个参数，用“&amp;”符号隔开，每个参数的名和值用“=”符号隔开。<br>fragment（信息片断）字符串，用于指定网络资源中的片断。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释。</li>
</ul>
<h3 id="1-1-Http的GET请求的url长度是有限制的"><a href="#1-1-Http的GET请求的url长度是有限制的" class="headerlink" title="1.1 Http的GET请求的url长度是有限制的"></a>1.1 Http的GET请求的url长度是有限制的</h3><p>Http1.1协议中并没有做这个限制，但通信的两端，服务器(Nginx和Tomcat)和客户端(浏览器厂商)都做了限制。<a href="https://cnbin.github.io/blog/2016/02/20/httpxie-yi-zhong-de-ge-chong-chang-du-xian-zhi-zong-jie/">参考</a><br>一些浏览器的url长度限制，即url长度不能超过这么多个字符</p>
<ul>
<li>IE : 2803</li>
<li>Firefox:65536</li>
<li>Chrome:8182</li>
<li>Safari:80000</li>
<li>Opera:190000<br>再具体一点的话，就是下面这个我在百度里搜索zhihu这个词的时候<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET /s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=zhihu&amp;rsv_pq=d66519eb000157d4&amp;rsv_t=4ce0B%2B8rfGgWxu9SAjGi7H5n5vylTydZebyyJXgD0JrPUSfBwp5zKxK9uKQ&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=6&amp;rsv_sug1=4&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;inputT=3737&amp;rsv_sug4=4444 HTTP/1.1  （从GET到这里不能超过8182个字）</div><div class="line">Host: www.baidu.com</div><div class="line">Connection: keep-alive</div><div class="line">Cache-Control: max-age=0</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</div><div class="line">DNT: 1</div><div class="line">Accept-Encoding: gzip, deflate, br</div><div class="line">Accept-Language: zh-CN,zh;q=0.8</div><div class="line">Cookie: BAIDUID=325243543:FG=1; PSTM=543534543; BIDUPSID=54353; pgv_pvi=5435; MCITY=-%3A; BD_HOME=0; BD_UPN=5435; H_PS_645EC=453453453; BDORZ=5435; BD_CK_SAM=1; PSINO=5; BDSVRTM=54; H_PS_PSSID=543; ispeed_lsm=2</div></pre></td></tr></table></figure>
</li>
</ul>
<p>另外，Cookie就是一个键值对，放在header里面，所以如果服务器对于Http请求头长度做了限制，Cookie也会受限制。</p>
<p>###1.2 GET和POST的一些小区别<br>GET只会发一个TCP包，POST发两个(一个是Header,一个是Body)。所以GET快一点，POST要求服务器长时间处于连接状态，可能造成服务器负载升高。<br>一个比较实在的例子是，我在七牛的CDN上看到的收费价格1万次PUT/10万次GET，不用想也知道GET对于服务器的压力要比PUT小</p>
<h2 id="2-http请求本质上是发送了一堆字符给服务器"><a href="#2-http请求本质上是发送了一堆字符给服务器" class="headerlink" title="2. http请求本质上是发送了一堆字符给服务器"></a>2. http请求本质上是发送了一堆字符给服务器</h2><p>另外,domain(域名)是指www.wikipedia.org这种，DNS会把它转成一个ip地址<br>而在http请求的header中经常或看到<br>Host: www.baidu.com\r\n 这样的一行，其实这是<a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">Http头字段</a>的标准请求字段，总之就是标准。这个Host指的是服务器的域名，就是domian。<br>wiki上的<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">http名词解释</a></p>
<h2 id="3-Header相关的"><a href="#3-Header相关的" class="headerlink" title="3. Header相关的"></a>3. Header相关的</h2><p>首先看下请求百度首页的request和response</p>
<p>Request（其实发送的时候每一行后面都跟了一个\r\n用于换行）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET / HTTP/1.1</div><div class="line">Host: www.baidu.com</div><div class="line">Connection: keep-alive</div><div class="line">Cache-Control: max-age=0</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</div><div class="line">DNT: 1</div><div class="line">Accept-Encoding: gzip, deflate, br</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4</div><div class="line">Cookie: BAIDUID=B41D39A8836273546754tC7F0C5DE315B64E2:FG=1; MCITY=-289%3A;</div></pre></td></tr></table></figure>
<p>Response(同样，无线电传输的时候是没有换行的概念的，每一行末尾都有一个\r\n)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Bdpagetype: 1</div><div class="line">Bdqid: 0xa1524365407b7</div><div class="line">Bduserid: 0</div><div class="line">Cache-Control: private</div><div class="line">Connection: Keep-Alive</div><div class="line">Content-Encoding: gzip</div><div class="line">Content-Type: text/html; charset=utf-8</div><div class="line">Cxy_all: baidu+9bdfb3567324332546a7cb482b3</div><div class="line">Date: Sun, 23 Jul 2017 08:27:22 GMT</div><div class="line">Expires: Sun, 23 Jul 2017 08:26:51 GMT</div><div class="line">Server: BWS/1.1</div><div class="line">Set-Cookie: BDSVRTM=0; path=/</div><div class="line">Set-Cookie: BD_HOME=0; path=/</div><div class="line">Set-Cookie: H_PS_PSSID=1430_210543_17001; path=/; domain=.baidu.com</div><div class="line">Strict-Transport-Security: max-age=172800</div><div class="line">Vary: Accept-Encoding</div><div class="line">X-Powered-By: HPHP</div><div class="line">X-Ua-Compatible: IE=Edge,chrome=1</div><div class="line">Transfer-Encoding: chunked</div></pre></td></tr></table></figure>
<p>报文的<a href="http://www.cnblogs.com/klguang/p/4618526.html">语法</a>：<br>请求的格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;</div><div class="line">&lt;headers&gt;</div><div class="line">&lt;entity-body&gt;</div></pre></td></tr></table></figure>
<p>响应的格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;version&gt; &lt;status&gt; &lt;reason-phrase&gt;</div><div class="line">&lt;headers&gt;</div><div class="line">&lt;entity-body&gt;</div></pre></td></tr></table></figure>
<p>request中常见的请求头包括：</p>
<ul>
<li><p>Accept：指定客户端能够接收的内容类型</p>
<!-- 示例 : Accept:image/webp,image/apng,image/*,*/*;q=0.8 -->
</li>
<li><p>Accept-Charset ：浏览器可以接受的字符编码集</p>
</li>
<li><p>Accept-Encoding:gzip, deflate, br<br>客户端浏览器可以支持的压缩编码类型。比如gzip，用于压缩数据，节省带宽。</p>
</li>
<li><p>Accept-Language 指定Http客户端浏览器用来优先展示的语言<br>示例: Accept-Language:zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4</p>
</li>
<li><p>Cache-Control： <a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn">参考</a><br>具体操作<a href="https://baike.baidu.com/item/Cache-Control">百度百科</a>写的很清楚<br>可能的值包括：</p>
</li>
</ul>
<p>public 所有内容都将被缓存(客户端和代理服务器都可缓存)<br>private 内容只缓存到私有缓存中(仅客户端可以缓存，代理服务器不可缓存)<br>no-cache 必须先与服务器确认返回的响应是否被更改，然后才能使用该响应来满足后续对同一个网址的请求。因此，如果存在合适的验证令牌 (ETag)，no-cache 会发起往返通信来验证缓存的响应，如果资源未被更改，可以避免下载。<br>no-store 所有内容都不会被缓存到缓存或 Internet 临时文件中<br>max-age=xxx (xxx is numeric) 缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高</p>
<p>实际过程中我看到了这种：<br>Cache-Control:private, no-cache, no-cache=Set-Cookie, no-store, proxy-revalidate</p>
<ul>
<li><p>Connection:keep-alive  http1.1 默认为keep-alive<br>http 1.0需要手动设置。原理就是服务器保持客户端到服务器的连接持续有效，避免了重新建立连接的开销(tcp三次握手)。这种情况下，客户端不能根据读取到EOF(-1)来判断传输完毕。有两种解决方案：对于静态文件，客户端和服务器能够知道其大小，使用content-length，根据这个判断数据是否已经接收完成；对于动态页面，不可能预先知道内容大小。可以使用Transfer-Encoding:chunked的模式进行传输。基本上就是服务器把文件分成几块，一块一块的发送过去。<a href="https://www.byvoid.com/zhs/blog/http-keep-alive-header">参考</a></p>
</li>
<li><p>Content-Type  代表文件类型。request只有POST请求中会有，Response中也会有。<br>POST里面的Content-type有两种:<br>Content-type: application/x-www-form-urlencoded;charset:UTF-8 //缺省值，表示提交表单<br>multipart/form-data //上传文件时用这种，既可以发送文本数据，也支持二进制上传。上面那个CharSet只是为了告诉服务器用的是哪种编码<br>响应头中的Content-Type示例： Content-Type:image/gif或者Content-Type: text/html;charset=utf-8 <a href="http://www.runoob.com/http/http-content-type.html">参考</a></p>
</li>
<li><p>Date:Sun, 23 Jul 2017 07:39:47 GMT 这就是当前的GMT时间</p>
</li>
<li><p>DNT: 1 Do Not Track（当用户提出启用“请勿追踪”功能后，具有“请勿追踪”功能的浏览器会在http数据传输中添加一个“头信息”（headers），这个头信息向商业网站的服务器表明用户不希望被追踪。这样，遵守该规则的网站就不会追踪用户的个人信息来用于更精准的在线广告。）</p>
</li>
</ul>
<ul>
<li><p>Etag 用于比较客户端请求的文件的内容是否发生了改变。跟Last-Modified的作用差不多。最简单的用hash值就可以了。</p>
</li>
<li><p>Expires:Mon, 01 Jan 1990 00:00:00 GMT    过期时间，这里应该是永不过期</p>
</li>
<li><p>HOST 服务器的域名(domian)或者ip地址<br>Host: www.baidu.com</p>
</li>
<li><p>If-Modified-Since:Fri, 24 Feb 2017 12:37:22 GMT 这个跟缓存有关</p>
</li>
<li><p>If-None-Match:”abf29cbe9a8ed21:0” 还是缓存</p>
</li>
<li><p>Pramga 和Cache-Control一样<br>实例： Pramga: no-cache 相当于 Cache-Control： no-cache。</p>
</li>
<li><p>User-Agent 这个代表用的是哪种浏览器(客户端)，写爬虫的时候找到一大堆<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36<br>Android设备发出来的可能长这样： Mozilla/5.0 (Linux; U; Android 4.4.4; zh-cn; HTC_D820u Build/KTU84P) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30<br>ios设备发出来的长这样: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A365 Safari/600.1.4<br>至少Chrome团队给出了自家浏览器的<a href="https://developer.chrome.com/multidevice/user-agent#webview_user_agent">UA</a></p>
</li>
<li><p>Referer 一般是一个url，代表当前请求时从哪个页面发出的，写爬虫有用</p>
</li>
</ul>
<p>Header其实就是个字典，比较麻烦的就是Cache-Control了，这个还要结合If-None-Match，Etag来看。需要用的时候再看应该也不迟。</p>
<p><a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">WikI上比较完整</a></p>
<p><strong>Transfer-Encoding: chunked 有时候要传输的Content-Length实在太大，服务器计算长度需要开很大的Buffer，干脆把文件分块传输。</strong></p>
<p><a href="http://www.jianshu.com/p/fd00f0d02f5f">浏览器对于缓存的实际处理</a>，是否过期由Cache-Control标识的max-age和Expires判断。Cache-Control的优先级较高。<a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn">From Chrome</a><br>简单来说就是先看客户端是否Expire，然后去服务器看下Etag,最后看Last-Modified那个。</p>
<p>补上一个http statuscode = 302的实际例子吧，今晚看腾讯新闻的时候抓到的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Request URL:http://tdd.3g.qq.com/17421/e8475fe7-7418-43bf-9be7-c6b116730cac.gif?a=0.33637654883709955&amp;b=1511790303321</div><div class="line">Request Method:GET</div><div class="line">Status Code:302 Found</div><div class="line">Remote Address:123.151.152.123:80</div><div class="line">Referrer Policy:no-referrer-when-downgrade</div><div class="line"></div><div class="line"></div><div class="line">Request Header</div><div class="line">Accept:image/webp,image/apng,image/*,*/*;q=0.8</div><div class="line">Accept-Encoding:gzip, deflate</div><div class="line">Accept-Language:zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</div><div class="line">Connection:keep-alive</div><div class="line">Cookie:XX=SDSDSADSA0; SADSAD=21FDGFDGF; //cookie是我编的</div><div class="line">DNT:1</div><div class="line">Host:tdd.3g.qq.com</div><div class="line">Referer:http://new.qq.com/omn/20171127A0OHHD00</div><div class="line">User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36</div><div class="line"></div><div class="line">Response Header</div><div class="line">Cache-Control:max-age=0</div><div class="line">Connection:close</div><div class="line">Content-Length:0</div><div class="line">Date:Mon, 27 Nov 2017 13:45:04 GMT</div><div class="line">Expires:Mon, 27 Nov 2017 13:45:04 GMT</div><div class="line">Location:http://210.22.248.167/tdd.3g.qq.com/17421/e8475fe7-7418-43bf-9be7-c6b116730cac.gif?mkey=5a1c30156df5812a&amp;f=4f20&amp;c=0&amp;a=0.33637654883709955&amp;b=1511790303321&amp;p=.gif //注意这个新的location</div><div class="line">Server:nws 1.2.15</div></pre></td></tr></table></figure></p>
<h2 id="4-Cookie和Session"><a href="#4-Cookie和Session" class="headerlink" title="4. Cookie和Session"></a>4. Cookie和Session</h2><h3 id="4-1-Cookie"><a href="#4-1-Cookie" class="headerlink" title="4.1 Cookie"></a>4.1 Cookie</h3><p>先看<a href="https://zh.wikipedia.org/wiki/Cookie">Wiki</a>上的解释:</p>
<ul>
<li>指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密.主要是因为Http是无状态的，服务器不知道这一次连接和上一次连接是不是同一个客户端<br>Cookie总是保存在客户端中，按在客户端中的存储位置，可分为内存Cookie和硬盘Cookie。内存Cookie由浏览器维护，保存在内存中，浏览器关闭后就消失了，其存在时间是短暂的。硬盘Cookie保存在硬盘里，有一个过期时间，除非用户手工清理或到了过期时间，硬盘Cookie不会被删除，其存在时间是长期的。所以，按存在时间，可分为非持久Cookie和持久Cookie。</li>
</ul>
<p>Cookie的一些缺点，直接照搬WiKi了</p>
<ul>
<li>Cookie会被附加在每个HTTP请求中，所以无形中增加了流量。</li>
<li>由于在HTTP请求中的Cookie是明文传递的，所以安全性成问题。（除非用HTTPS）</li>
<li>Cookie的大小限制在4KB左右。对于复杂的存储需求来说是不够用的。</li>
</ul>
<p>另外，不同域名是无法共享浏览器端本地信息，包括cookies，这即是跨域问题。百度是不能读取爱奇艺的Cookie的，这是安全性问题。<br>需要注意的是，虽然网站images.google.com与网站www.google.com同属于Google，但是域名不一样，二者同样不能互相操作彼此的Cookie。必须域名一样才能操作。<br>Java中把Cookie封装成了javax.servlet.http.Cookie类，直接用就可以了。</p>
<p>Cookie并不提供修改、删除操作。如果要修改某个Cookie，只需要新建一个同名的Cookie，添加到response中覆盖原来的Cookie。</p>
<p>对了，在众多的Header中Cookie一般长这样:</p>
<ul>
<li>Cookie:key1=value1;key_2=value2;key_3=value3;JSessionID=24DHFKDSFKJ324329NSANDI124EH<br>故意把最后一个JSESSION写出来是因为底下要讲Session了嘛</li>
</ul>
<h3 id="4-2-Session"><a href="#4-2-Session" class="headerlink" title="4.2 Session"></a>4.2 Session</h3><p><a href="http://lavasoft.blog.51cto.com/62575/275589">参考文章</a><br>Header(字典)里面装着一个Cookie(字典)，Cookie里面有个键值对:JSESSIONID:SESSIONID<br>宏观上就是这么个关系。</p>
<p>Cookie保存在客户端，Session保存在服务器端。Session是在客户端第一次访问的时候由服务器创建的，session一般存储在redis中（ram），客户端始终只有sessionId。第二次请求的时候(session还未过期)，浏览器会加上sessionId=XXXXX。服务器接收到请求后就得到该请求的sessionID，服务器找到该id的session返还给请求者（Servlet）使用。一个会话只能有一个session对象，对session来说是只认id不认人。</p>
<p>Session超时：超时指的是连续一定时间服务器没有收到该Session所对应客户端的请求，并且这个时间超过了服务器设置的Session超时的最大时间。<br>Session的maxAge一般为-1，表示仅当前浏览器内有效，关闭浏览器就会失效。</p>
<p>知乎上有一段比较好的<a href="https://www.zhihu.com/question/19786827/answer/66706108">描述</a>,这里直接引用了。<br>http是无状态的协议，客户每次读取web页面时，服务器都打开新的会话，而且服务器也不会自动维护客户的上下文信息，那么要怎么才能实现网上商店中的购物车呢，session就是一种保存上下文信息的机制，它是针对每一个用户的，变量的值保存在服务器端，通过SessionID来区分不同的客户,session是以cookie或URL重写为基础的，默认使用cookie来实现，系统会创造一个名为JSESSIONID的输出cookie，我们叫做session cookie,以区别persistent cookies,也就是我们通常所说的cookie,注意session cookie是存储于浏览器内存中的，并不是写到硬盘上的，这也就是我们刚才看到的JSESSIONID，我们通常情是看不到JSESSIONID的，但是当我们把浏览器的cookie禁止后，web服务器会采用URL重写的方式传递Sessionid，我们就可以在地址栏看到 sessionid=KWJHUG6JJM65HS2K6之类的字符串。<br>javax.servlet.http.HttpServletRequest.getSession() 将会返回当前request相关联的HttpSession对象，如果不存在，将会创建一个。翻译一下，当一个浏览器请求来到之后，Servlet处理程序（Servlet容器内部实现）将会主动检查请求信息Cookie当中是否有JSESSIONID，若有，找到对应JSESSION的HttpSession对象，如果没有，创建一个，具体的机制在Servlet容器的实现当中。</p>
<p>Session就是维护会话的。</p>
<h3 id="4-3-自动登录的实现"><a href="#4-3-自动登录的实现" class="headerlink" title="4.3 自动登录的实现"></a>4.3 自动登录的实现</h3><p>一些网站的“记住密码，自动登录功能”，据说discuz直接将加密的（可逆）uid和密码保存到cookie中。<br>另外一种做法是可以尝试将Session的过期时间设置的长一点，比如一年，下次访问网站的时候就能实现自动登录了。<br>更好一点的是是本地绝不保存用户敏感信息，登录生成一个有过期时间的的cookie或者token返回给客户端，下次打开浏览器判断下过期时间就好了。另外，现在浏览器大多带有记住密码的功能，这个锅还是丢给浏览器(用户)好了。</p>
<h2 id="5-长连接"><a href="#5-长连接" class="headerlink" title="5. 长连接"></a>5. 长连接</h2><p>像即时通讯软件，或者消息推送这种场景，都得维护一个长连接。<br><a href="http://blog.csdn.net/mr_liabill/article/details/50705130">HTTP长连接和短连接</a></p>
<h3 id="5-1长连接的实现原理"><a href="#5-1长连接的实现原理" class="headerlink" title="5.1长连接的实现原理"></a>5.1长连接的实现原理</h3><ul>
<li>轮询</li>
<li>心跳</li>
<li>Tcp长连接</li>
</ul>
<p>Http长连接不如说tcp长连接,Tcp是可以不断开的，http连接服务器给到response之后就断开了。<a href="http://www.cnblogs.com/zuoxiaolong/p/life49.html">TCP连接</a>Http不过是做了tcp连接复用,http通道是一次性的，tcp不是的，这样做也是为了节省tcp通道。<br>长连接就是Connection  keep-Alive那玩意，客户端和服务器都得设置才有效。<br>长短轮询的间隔是服务器通过代码控制的。</p>
<h3 id="5-2-keep-Alive和WebSocket的区别"><a href="#5-2-keep-Alive和WebSocket的区别" class="headerlink" title="5.2 keep-Alive和WebSocket的区别"></a>5.2 keep-Alive和WebSocket的区别</h3><p><img src="http://odzl05jxx.bkt.clouddn.com/ed541bc1ed61ead0bf6ea8233ef01c0a.jpg?imageView2/2/w/600" alt=""></p>
<h3 id="5-3-http2可以实现推送了"><a href="#5-3-http2可以实现推送了" class="headerlink" title="5.3 http2可以实现推送了"></a>5.3 http2可以实现推送了</h3><h3 id="5-4-Http这玩意就不是为了视频流设计的"><a href="#5-4-Http这玩意就不是为了视频流设计的" class="headerlink" title="5.4 Http这玩意就不是为了视频流设计的"></a>5.4 Http这玩意就不是为了视频流设计的</h3><p><a href="https://stackoverflow.com/questions/14352599/how-to-send-chunks-of-video-for-streaming-using-http-protocol">HTTP wasn’t really designed for streaming</a></p>
<h3 id="5-5-主流浏览器浏览器默认最大并发连接数"><a href="#5-5-主流浏览器浏览器默认最大并发连接数" class="headerlink" title="5.5 主流浏览器浏览器默认最大并发连接数"></a>5.5 主流浏览器浏览器默认最大并发连接数</h3><p>浏览器不可能同时发起10000个请求，所以主流浏览器都设定了限制,主要是http1.1,http2的话，只有一条connection。<br><a href="https://www.zhihu.com/question/20474326">解释</a></p>
<h3 id="5-6-TLS-SSL"><a href="#5-6-TLS-SSL" class="headerlink" title="5.6 TLS,SSL"></a>5.6 TLS,SSL</h3><h2 id="6-WebSocket、SPDY、Http2"><a href="#6-WebSocket、SPDY、Http2" class="headerlink" title="6. WebSocket、SPDY、Http2"></a>6. WebSocket、SPDY、Http2</h2><p>WebSocket一种在单个TCP 连接上进行全双工通讯的协议。<br>HTTP/2（超文本传输协议第2版，最初命名为HTTP 2.0），简称为h2（基于TLS/1.2或以上版本的加密连接）或h2c（非加密连接），是HTTP协议的的第二个主要版本<br>SPDY也就是HTTP/2的前身，一种开放的网络传输协议，由Google开发，用来发送网页内容。基于传输控制协议（TCP）的应用层协议</p>
<h3 id="7-DNS-Domian-Name-System"><a href="#7-DNS-Domian-Name-System" class="headerlink" title="7. DNS(Domian Name System)"></a>7. DNS(Domian Name System)</h3><p>通过java代码调用DNS的方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;  </div><div class="line">        <span class="comment">//获取本机IP地址  </span></div><div class="line">        System.out.println(InetAddress.getLocalHost().getHostAddress());  </div><div class="line">        <span class="comment">//获取www.baidu.com的地址  </span></div><div class="line">        System.out.println(InetAddress.getByName(<span class="string">"www.baidu.com"</span>));  </div><div class="line">        <span class="comment">//获取www.baidu.com的真实IP地址  </span></div><div class="line">        System.out.println(InetAddress.getByName(<span class="string">"www.baidu.com"</span>).getHostAddress());  </div><div class="line">        <span class="comment">//获取配置在HOST中的域名IP地址  </span></div><div class="line">        System.out.println(InetAddress.getByName(<span class="string">"TEST"</span>).getHostAddress());  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="8-Fiddler抓包"><a href="#8-Fiddler抓包" class="headerlink" title="8.Fiddler抓包"></a>8.Fiddler抓包</h3><ul>
<li>手机和电脑连接同一个wifi</li>
<li>从<a href="https://www.telerik.com/download/fiddler">https://www.telerik.com/download/fiddler</a> 下载Fiddler</li>
<li>启动并配置: Tools-&gt;Fiddler-&gt;Connections, check “allow remote computers to connect” and default port is 8888</li>
<li>配置手机：选择连接的网络-&gt;修改网络-&gt;代理设置:手动; 代理服务器主机名为电脑的ip，端口8888，ip DHCP</li>
<li>抓包查看<br><a href="http://www.trinea.cn/android/tcpdump_wireshark/">详细教程</a></li>
</ul>
<p>===========================trash here=====================================</p>
<p>一些优化<br>[TTFB] TTFB（Time To First Byte），客户端发出请求到收到响应的第一个字节所花费的时间。一般浏览器里面都能看到，这也是服务端可以优化的指标。</p>
<p>GZip压缩文本还可以，图片就没必要开压缩了，因为图片本身就高度压缩了，再压只是浪费CPU。</p>
<p>网络协议，架构，规范，spdy,http2,url规范.<br>OSI七层网络体系结构 ： 物理层、数据链路层、网络层、传输层、表示层、会话层、应用层</p>
<p>HLS直播流慢(延迟高)是因为基于HTTP，(http live streaming，苹果提出的)<br>如果要低延迟还得rmtp</p>
<p>应用层面的Http，SMTP,FTP,POP,TLS/SSL,IMAP</p>
<p>tcp三次握手，四次挥手<br>udp使用</p>
<p>tls,https加密过程，sha1和sha256加密算法</p>
<p>ping ,traceRouter</p>
<p>tcp三次握手四次挥手，用人话说：<br>因为HTTP是一个基于TCP的协议,而TCP是一种可靠的传输层协议.建立TCP连接时会发生:<br>三次握手(three-way handshake)<br>firefox &gt; nginx [SYN] 在么<br>nginx &gt; firefox [SYN, ACK] 在<br>firefox &gt; nginx [ACK] 知道了</p>
<p>关闭TCP连接时会发生:四次挥手(four-way handshake)<br>firefox &gt; nginx [FIN] 我要关闭连接了<br>nginx &gt; firefox [ACK] 知道了,等我发完包先<br>nginx &gt; firefox [FIN] 我也关闭连接了<br>firefox &gt; nginx [ACK] 好的,知道了</p>
<p>几个报文的标识的解释:SYN: synchronization(同步)ACK: acknowledgement(确认:告知已收到)FIN: finish(结束)</p>
<p>作者：eechen<br>链接：<a href="https://www.zhihu.com/question/67772889/answer/257170215">https://www.zhihu.com/question/67772889/answer/257170215</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.cnblogs.com/zuoxiaolong/p/life49.html">谈谈HTTP协议中的短轮询、长轮询、长连接和短连接</a></li>
<li><a href="https://bhsc881114.github.io/2015/06/23/HTTP%E8%AF%B7%E6%B1%82%E7%9A%84TCP%E7%93%B6%E9%A2%88%E5%88%86%E6%9E%90/">http请求的TCP瓶颈</a></li>
<li><a href="http://www.runoob.com/w3cnote/restful-architecture.html">Restfull架构详解</a></li>
<li><a href="http://blog.csdn.net/zhuhuiby/article/details/6725951">文件断点续传原理,CountdownLatch</a></li>
<li><a href="http://lcodecorex.github.io/2016/08/01/%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8E%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E5%8E%9F%E7%90%86%E4%B8%8E%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/">断点续传实现</a></li>
<li><a href="http://www.cnblogs.com/mayingbao/archive/2007/11/30/978530.html">一张非常好的解释status code的表格</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网络相关的查找手册&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/b9ae1189145b4a4d9dfe4d0b89a21b47.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
</feed>
