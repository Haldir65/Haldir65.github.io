<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haldir的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haldir65.github.io/"/>
  <updated>2018-11-17T07:52:44.217Z</updated>
  <id>https://haldir65.github.io/</id>
  
  <author>
    <name>Haldir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo部署个人博客记录</title>
    <link href="https://haldir65.github.io/2217/01/08/2017-01-08-trouble-shooting-with-my-blog/"/>
    <id>https://haldir65.github.io/2217/01/08/2017-01-08-trouble-shooting-with-my-blog/</id>
    <published>2217-01-08T18:01:01.000Z</published>
    <updated>2018-11-17T07:52:44.217Z</updated>
    
    <content type="html"><![CDATA[<p>使用 hexo 写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的 blog 一个值得置顶的文章的话，我觉得一篇记录使用 hexo 过程中的一些解决问题的方法的文章是再合适不过的了。</br><br><img src="https://haldir66.ga/static/imgs/40164340_40164340_1414330224938_mthumb.jpg" alt=""></p><a id="more"></a><h2 id="1-经常更新-yilia-的-theme"><a href="#1-经常更新-yilia-的-theme" class="headerlink" title="1. 经常更新 yilia 的 theme"></a>1. 经常更新 yilia 的 theme</h2><p><a href="https://github.com/litten/hexo-theme-yilia">yilia</a>主题经常会更新，及时更新 theme 会发现很多新的特性及 bug fix</p><h2 id="2-部署相关"><a href="#2-部署相关" class="headerlink" title="2. 部署相关"></a>2. 部署相关</h2><ul><li>部署到 github</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment">//清除缓存</span></span><br><span class="line">hexo g -d <span class="comment">//一步到位 = hexo g + hexo d</span></span><br><span class="line">hexo s <span class="comment">//localost:4000本地预览</span></span><br></pre></td></tr></table></figure><ul><li>部署过程中出现的一些错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br><span class="line">INFO  Start processing</span><br><span class="line">ERROR Process failed: _posts/<span class="number">2016</span><span class="number">-12</span><span class="number">-10</span>-adb-command.md</span><br><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line <span class="number">3</span>, column <span class="number">11</span>:</span><br><span class="line">    categories:  [技术]</span><br><span class="line">              ^</span><br><span class="line">    at generateError (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">162</span>:<span class="number">10</span>)</span><br><span class="line">    at throwError (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">168</span>:<span class="number">9</span>)</span><br><span class="line">    at readBlockMapping (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1040</span>:<span class="number">9</span>)</span><br><span class="line">    at composeNode (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1326</span>:<span class="number">12</span>)</span><br><span class="line">    at readDocument (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1488</span>:<span class="number">3</span>)</span><br><span class="line">    at loadDocuments (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1544</span>:<span class="number">5</span>)</span><br><span class="line">    at <span class="built_in">Object</span>.load (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1561</span>:<span class="number">19</span>)</span><br><span class="line">    at parseYAML (D:\Blog\github\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:<span class="number">80</span>:<span class="number">21</span>)</span><br><span class="line">    at parse (D:\Blog\github\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:<span class="number">56</span>:<span class="number">12</span>)</span><br><span class="line">    at D:\Blog\github\node_modules\hexo\lib\plugins\processor\post.js:<span class="number">52</span>:<span class="number">18</span></span><br><span class="line">    at tryCatcher (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">507</span>:<span class="number">35</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">567</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">125</span>:<span class="number">19</span>)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">143</span>:<span class="number">14</span>)</span><br><span class="line">    at PromiseArray._iterate (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">113</span>:<span class="number">31</span>)</span><br><span class="line">    at PromiseArray.init [<span class="keyword">as</span> _init] (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">77</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">564</span>:<span class="number">21</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">125</span>:<span class="number">19</span>)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">143</span>:<span class="number">14</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">572</span>:<span class="number">26</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._resolveCallback (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">431</span>:<span class="number">57</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">522</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">567</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\nodeback.js:<span class="number">42</span>:<span class="number">21</span></span><br><span class="line">    at D:\Blog\github\node_modules\hexo\node_modules\hexo-fs\node_modules\graceful-fs\graceful-fs.js:<span class="number">78</span>:<span class="number">16</span></span><br><span class="line">    at tryToString (fs.js:<span class="number">455</span>:<span class="number">3</span>)</span><br><span class="line">    at FSReqWrap.readFileAfterClose [<span class="keyword">as</span> oncomplete] (fs.js:<span class="number">442</span>:<span class="number">12</span>)</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> <span class="number">1.48</span> s</span><br><span class="line">INFO  Generated: sitemap.xml</span><br><span class="line">INFO  Generated: atom.xml</span><br><span class="line">INFO  Generated: <span class="number">2017</span>/<span class="number">01</span>/<span class="number">08</span>/<span class="number">2017</span><span class="number">-01</span><span class="number">-08</span>-trouble-shooting-<span class="keyword">with</span>-my-blog/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  <span class="number">4</span> files generated <span class="keyword">in</span> <span class="number">2.26</span> s</span><br><span class="line">INFO  Deploying: git</span><br></pre></td></tr></table></figure><p>找了好久，有说”_config.xml” 文件 有空格的，有说 title 被乱改的，试了好长时间，改成这样就不再报错了。所以，<strong>冒号后面一定要加空格，英文半角的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: adb常用命令手册</span><br><span class="line">date: 2016-12-10 21:14:14</span><br><span class="line">tags:</span><br><span class="line"> - android</span><br><span class="line"> - adb</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>tags 有两种写法，一种是上面这样前面加横杠另一种长这样，写成数组形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: my awesometitle</span><br><span class="line">date: 2017-05-07 16:48:01</span><br><span class="line">categories: blog</span><br><span class="line">tags: [linux,python]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="3-一些功能的实现"><a href="#3-一些功能的实现" class="headerlink" title="3. 一些功能的实现"></a>3. 一些功能的实现</h2><ul><li>置顶功能将 node_modules/hexo-generator-index/lib/generator.js 的文件内容替换成以下内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">"hexo-pagination"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">      <span class="keyword">if</span> (a.top == b.top)</span><br><span class="line">        <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.top &amp;&amp; !b.top) &#123;</span><br><span class="line">      <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">"page"</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">""</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">"index"</span>, <span class="string">"archive"</span>],</span><br><span class="line">    format: paginationDir + <span class="string">"/%d/"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>同时在文章开头添加 top : 1 即可 ，实际排序按照这个数字从大到小排序</li></ul><p>另一种做法是手动将date改大，日期越靠后的越在前面。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> title: Hexo置顶文章</span><br><span class="line">date: <span class="number">2016</span>-<span class="number">11</span>-<span class="number">11</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">22</span></span><br><span class="line">tags:[置顶]</span><br><span class="line">categories: Hexo</span><br><span class="line">top: 0 # 0或者1</span><br></pre></td></tr></table></figure><p>个人建议：置顶不要太多</p><h2 id="4-SublimeText-的一些快捷键"><a href="#4-SublimeText-的一些快捷键" class="headerlink" title="4. SublimeText 的一些快捷键"></a>4. SublimeText 的一些快捷键</h2><p>由于文章大部分都是使用 SublimeText 写的，Typroa 这种所见即所得的编辑器也不错，但对于掌握 MardkDown 语法没有帮助。这里摘录一些 SubLimeText 的快捷键。</p><blockquote><p><strong>Ctrl+Shift+P：打开命令面板</strong><br>Ctrl+P：搜索项目中的文件<br>Ctrl+G：跳转到第几行<br>Ctrl+W：关闭当前打开文件 CTRL+F4 也可以<br>Ctrl+Shift+W：关闭所有打开文件<br>Ctrl+Shift+V：粘贴并格式化<br>Ctrl+D：选择单词，重复可增加选择下一个相同的单词<br><strong>Ctrl+L：选择行，重复可依次增加选择下一行</strong><br><strong>Alt+Shift+数字：分屏显示</strong><br><strong>Ctrl+Shift+L：选择多行</strong><br><strong>Ctrl+Shift+D：复制粘贴当前行</strong><br><strong>Ctrl+X：删除当前行</strong><br><strong>Ctrl+Shift+左箭头 往左边选择内容</strong><br><strong>Shift+向左箭头 向左选择文本</strong><br><strong>Ctrl+B 编译，markDown 生成 html 文件</strong><br><strong>Alt+2 切换到第二个 Tab（打开的文件，记得 chrome 是 ctrl+2）</strong><br><strong>Ctrl+R：前往 对应的方法的实现*</strong><br><strong>快速加上[] 选中单词按 [ 即可</strong><br><strong>批量更改当前页面相同的单词 alt+F3 </strong><br><strong>Ctrl+Enter 在下一行插入新的一行</strong><br><strong>Ctrl+Shift+Enter 在上一行插入新的一行</strong><br><strong>Shift+ 向上箭头 向上选中多行</strong></p></blockquote><p>Ctrl+Shift+D：复制粘贴当前行 Ctrl+Shift+Enter：在当前行前插入新行<br>Ctrl+M：跳转到对应括号<br>Ctrl+U：软撤销，撤销光标位置<br>Ctrl+J：选择标签内容<br>Ctrl+F：查找内容<br>Ctrl+Shift+F：查找并替换<br>Ctrl+H：替换<br>Ctrl+N：新建窗口<br>Ctrl+K+B：开关侧栏<br>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身<br>Ctrl+F2：设置/删除标记<br>Ctrl+/：注释当前行<br>Ctrl+Shift+/：当前位置插入注释<br>Ctrl+Alt+/：块注释，并 Focus 到首行，写注释说明用的<br>Ctrl+Shift+A：选择当前标签前后，修改标签用的<br>F11：全屏<br>Shift+F11：全屏免打扰模式，只编辑当前文件<br>Alt+F3：选择所有相同<br>Alt+.：闭合标签<br>Shift+右键拖动：光标多不，用来更改或插入列内容<br>Alt+数字：切换打开第 N 个文件鼠标的前进后退键可切换 Tab 文件按 Ctrl，依次点击或选取，可需要编辑的多个位置按 Ctrl+Shift+上下键，可替换行</p><p>vscode的快捷键最重要的一个是ctrl+shift+p,ctrl+p只是在全局查找文件</p><h2 id="5-title-不能以-开头"><a href="#5-title-不能以-开头" class="headerlink" title="5. title 不能以[]开头"></a>5. title 不能以[]开头</h2><p>前面加上###确实能够让字号变大，但不要写 4 个#，后面的字母会大小写不分的</p><h2 id="6-markdown-语法"><a href="#6-markdown-语法" class="headerlink" title="6. markdown 语法"></a>6. markdown 语法</h2><p>MarkDown 页面内部跳转<br><a href="http://www.cnblogs.com/JohnTsai/p/4027229.html">MarkDown 技巧：两种方式实现页内跳转</a></p><blockquote><p><em>一个星星包起来是斜体字</em><br><strong>两个星星包起来是粗体字</strong><br><strong><em><em>那么三个星星呢</em></em></strong></p></blockquote><h2 id="7-github-提交-commit-的时候显示-Emoji"><a href="#7-github-提交-commit-的时候显示-Emoji" class="headerlink" title="7.github 提交 commit 的时候显示 Emoji"></a>7.github 提交 commit 的时候显示 Emoji</h2><p>链接<a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/">在此</a></p><h2 id="8-换电脑了怎么办"><a href="#8-换电脑了怎么办" class="headerlink" title="8.换电脑了怎么办"></a>8.换电脑了怎么办</h2><p>亲测，把整个目录下所有文件全部复制粘贴到新电脑上，装上 node，然后装上 hexo，记得勾选添加到 PATH,然后就可以了。需要注意的是小文件比较多，所以复制粘贴可能要十几分钟。</p><h2 id="9-有时候写的代码会给你在每一行前面加上-true"><a href="#9-有时候写的代码会给你在每一行前面加上-true" class="headerlink" title="9. 有时候写的代码会给你在每一行前面加上 true"></a>9. 有时候写的代码会给你在每一行前面加上 true</h2><p>比如写一段 css 的代码时候，很多时候预览会给每一行前面加上一个 true，解决办法：用 TAB 键缩进即可</p><h2 id="10-markdown-live-是一个非常好用的-node-module"><a href="#10-markdown-live-是一个非常好用的-node-module" class="headerlink" title="10. markdown-live 是一个非常好用的 node module"></a>10. markdown-live 是一个非常好用的 node module</h2><p><a href="https://www.npmjs.com/package/markdown-live">项目地址</a><br><strong>前提是安装了 node</strong></p><blockquote><p>npm install -g markdown-live</p><p>md-live</p></blockquote><p><br><br><strong><em>编辑md文件的同时，保存就会同步刷新网页预览，非常好用</em></strong></p><h2 id="11-如果运行-hexo-g-生成的-index-html-是空的"><a href="#11-如果运行-hexo-g-生成的-index-html-是空的" class="headerlink" title="11. 如果运行 hexo g 生成的 index.html 是空的"></a>11. 如果运行 hexo g 生成的 index.html 是空的</h2><p>输出</p><blockquote><p>WARN No layout: tags/service/index.html<br>原因是 themes/文件夹下没有 clone 对应的主题</p></blockquote><p>换成travis之后，在travis.yml文件中，添加了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cache:</span><br><span class="line">  yarn: true</span><br><span class="line">  directories:</span><br><span class="line">  - node_modules</span><br><span class="line">  - themes</span><br></pre></td></tr></table></figure></p><p>cahe也就意味着后续，所有对于themes文件夹中的_config.yml文件的修改都不会生效。这也就是我一遍遍尝试更改theme文件夹中_config文件不生效的原因。<br>所以要么去掉cache ，要么自己写bash script一行行的改。</p><h2 id="12-markdown写表格"><a href="#12-markdown写表格" class="headerlink" title="12. markdown写表格"></a>12. markdown写表格</h2><p>直接在atom下面敲table，就会自动提示出来的<br>| Header One     | Header Two     |<br>| :————- | :————- |<br>| Item One       | Item Two       |</p><p>中间的虚线左边的冒号表示下面的单元格左对齐，冒号放右边就右对齐，左右都放一个就表示居中</p><p>vscode的返回上一个文件快捷键是ctrl + -</p><h2 id="13-travis-ci自动部署的一些问题"><a href="#13-travis-ci自动部署的一些问题" class="headerlink" title="13 . travis ci自动部署的一些问题"></a>13 . travis ci自动部署的一些问题</h2><p><a href="https://github.com/travis-ci/travis.rb/issues/437">travis ci加密文件无法在travis以外的地方解密，因为key,value都存在travis的数据库了</a></p><p><a href="https://github.com/travis-ci/travis-ci/issues/9668">travis加密文件后用openssl解密出现iv undefined的错误</a></p><p>iv undefined</p><blockquote><p>travis env list<br>encrypted_476ad15a8e52_key=[secure]<br>encrypted_476ad15a8e52_iv=[secure]<br>明明是存在的</p></blockquote><p>在linux 里面运行travis endpoint<br>果然是 API endpoint: <a href="https://api.travis-ci.org/">https://api.travis-ci.org/</a><br>而新的endpoint应该是 <a href="https://api.travis-ci.com/">https://api.travis-ci.com/</a><br>于是travis encrypt-file –help</p><blockquote><p>–pro  short-cut for –api-endpoint ‘<a href="https://api.travis-ci.com/">https://api.travis-ci.com/</a>‘<br>–org short-cut for –api-endpoint ‘<a href="https://api.travis-ci.org/">https://api.travis-ci.org/</a>‘</p></blockquote><p>所以</p><blockquote><p>travis encrypt-file super_secret.txt 应该改成<br>travis encrypt-file super_secret.txt –pro</p></blockquote><p>因为默认的$encrypted_476ad15a8e52_key其实已经存储在travis-ci.org上了<br>所以在travis-ci.com上的项目当然找不到</p><p><a href="https://github.com/openwrtio/openwrtio.github.io/blob/mkdocs/.travis.yml">自动部署的另一个实例</a></p><h2 id="14-hexo-server本地预览出现的问题"><a href="#14-hexo-server本地预览出现的问题" class="headerlink" title="14. hexo server本地预览出现的问题"></a>14. hexo server本地预览出现的问题</h2><p><a href="Refused to execute script from" title="http://localhost:4000/slider.e37972.js&#39; because its MIME type (&#39;text/html">hexo s 本地预览样式加载失败</a> is not executable, and strict MIME type checking is enabled.)</p><p>hexo server的意思是类似于express的serve static功能，<a href="https://hexo.io/zh-cn/docs/server.html">默认只处理public文件下的文件，所以如果本地运行hexo s 出现404的话，直接copy到public文件夹下就可以了</a>注意hexo clear会删掉public文件夹</p><p>[Refused to Execute Script From Because Its MIME Type (Text/plain) Is Not Executable, and Strict MIME Type Checking Is Enabled]这句话的意思</p><h2 id="15-yilia的主题里面badjs-report的问题"><a href="#15-yilia的主题里面badjs-report的问题" class="headerlink" title="15. yilia的主题里面badjs report的问题"></a>15. yilia的主题里面badjs report的问题</h2><p>yilia的主题里面有一个badjs的report，去掉的方法：<br>cd 到themes/yilia里面,rm -rf source/ , 然后把source-src里面的report.js里面的东西删掉。yarn install ,yarn dist ,然后回到上层目录。hexo clean , hexo g就可以了。<br>其实看下里面，就是一个webpack的配置，自己重新编译一下就好了。编译后会在source里面重新生成需要的js文件。<br>奇怪的是在windows上编译失败，在linux上编译失败，在mac上终于成功了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://yanhuili.github.io/2016/11/21/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%8A%80%E5%B7%A7/">Hexo 博文置顶技巧</a></li><li><a href="http://www.daqianduan.com/4820.html">SublimeText 快捷键</a></li><li><a href="http://itmyhome.com/markdown/article/syntax/emphasis.html">MarkDown 语法学起来很快的</a></li><li><a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/">travis 自动部署</a></li><li><a href="https://docs.travis-ci.com/user/legacy-services-to-github-apps-migration-guide/">Legacy GitHub Services to GitHub Apps Migration Guide 2018年10月1号之后不再支持 Legacy GitHub Service</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 hexo 写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的 blog 一个值得置顶的文章的话，我觉得一篇记录使用 hexo 过程中的一些解决问题的方法的文章是再合适不过的了。&lt;/br&gt;&lt;br&gt;&lt;img src=&quot;https://haldir66.ga/static/imgs/40164340_40164340_1414330224938_mthumb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://haldir65.github.io/tags/hexo/"/>
    
      <category term="置顶" scheme="https://haldir65.github.io/tags/%E7%BD%AE%E9%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>即刻备忘录</title>
    <link href="https://haldir65.github.io/2046/12/18/2017-12-18-random-new-thoughts/"/>
    <id>https://haldir65.github.io/2046/12/18/2017-12-18-random-new-thoughts/</id>
    <published>2046-12-18T22:58:14.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p>一个待办事项的仓库<br><img src="https://haldir66.ga/static/imgs/girlfriend lake green nature water cold.jpg" alt=""></p><a id="more"></a><h3 id="期待能够完成的"><a href="#期待能够完成的" class="headerlink" title="期待能够完成的"></a>期待能够完成的</h3><ul><li><a href="https://juejin.im/post/5a0c1956f265da430a501f51">个人分享–web 前端学习资源分享</a></li><li><a href="https://huangxuan.me/2017/02/09/nextgen-web-pwa/">WPA 所代表的 Web 开发应是未来</a>据说Electron要被PWA干掉</li><li><a href="https://segmentfault.com/a/1190000003818163">js 循环闭包的解决方法</a></li><li>动态类型一时爽，代码重构火葬场</li><li>iview，elementUi</li><li><a href="https://css-tricks.com/NetMag/FluidWidthVideo/Article-FluidWidthVideo.php">embeed video with iframe</a><a href="https://www.youtube.com/watch?v=g3F7Imjcd4k">AC2016腾讯前端技术大会 1 1 1 H5直播那些事</a></li><li>[ ] flex,grid</li><li>[ ] Paul Irish from google</li><li>[ ] form表单可以跨域一个是历史原因要保持兼容性</li><li>[ ] <a href="http://lokeshdhakar.com/projects/lightbox2/">lightbox一个很好看的js图片查看库</a></li><li>[ ] <a href="https://www.js-css.cn/a/jscode/album/2014/0915/1319.html">仿门户网站js相册</a>， <a href="https://www.js-css.cn/a/jscode/album/2014/0914/1318.html">js相册2</a></li><li>[ ] <a href="http://python.jobbole.com/82270/">八大排序算法的python实现</a></li><li>[ ] <a href="https://gist.github.com/quexer/3619237">如何编写 jQuery 插件</a></li><li>[ ] 用正则检测或者解析json(jQuery源码里有)</li><li>[ ] JavaScript中new FileReader()，以及canvas api,以及<a href="https://juejin.im/post/5a98c5c26fb9a028d82b34ee">js进行图片缩放和裁剪</a></li><li>[ ] Redux和Flux很像,react context api</li><li>[ ] <a href="https://www.jianshu.com/p/a4ab102fa4ac">一个展示如何在宿主App中提取一个apk文件并加载代码和资源</a></li><li>[ ] nodejs ,go ,protobuf rpc</li><li>[ ] <a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html">indexed DB</a>,浏览器端数据库，</li><li>[ ]<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">content-disposition</a></li><li>[ ] <a href="https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within?rq=1">在bash脚本中获取当前脚本所在路径</a></li><li>[ ]一致性哈希原理</li><li>[ ] <a href="http://afghl.github.io/2018/06/17/distributed-lock-and-granarity.html">使用redis实现低粒度的分布式锁</a></li><li>[ ]<a href="https://vim.rtorr.com/">Vim cheet sheet</a></li><li>[ ]<a href="http://www.wklken.me/posts/2015/04/26/elk-for-nginx-log.html">LOGSTASH+ELASTICSEARCH+KIBANA处理NGINX访问日志</a>ELK全家桶</li><li>[ ] Coordinator behavior以及scroll原理，完善blog</li><li>[ ]Exoplayer and the MediaCodec api<a href="https://medium.com/androiddevelopers/building-a-video-player-app-in-android-part-3-5-19543ea9d416">building-a-video-player-app-in-android</a></li><li>[ ] autoWired, autovalue这些java 的library</li><li>[ ] instagram好像通过注解的方式自己写了一个json解析器</li><li>[ ] mqtt接入实践</li><li>[ ] when it comes to design , how do we translate px, pt, em  into sp,dp and others(设计方面的，各种单位之间的转换)?</li><li>[ ] classloader和class的生命周期</li><li>[ ] python dunder class复习</li><li>[ ] ffmpeg 的js wrapper</li><li>[ ] learning how textView works is painful yet necessary</li><li>[ ]<a href="https://lxneng.com/posts/201">分词器</a></li><li>[ ]rxjava是如何切换线程的以及源码解析</li><li>[ ]logstash接管软件日志</li><li>[ ]shadowsocks-android源码</li><li>[ ]a new article on open-gl intro</li><li>[ ]render-script utility</li><li>[ ]play around with xposed</li><li>[ ]tcp-proxy实用教程</li><li>[ ]linux环境下多进程通讯方式(管道，共享内存，信号,unix domian socket)</li><li>[ ]python gui编程</li><li>[ ]kotlin的coroutine</li><li>[ ]宇宙第一ide熟悉使用</li><li>[ ]js的闭包等面试常谈</li><li>[ ]java的aspectJ教程</li><li>[ ]c语言的<a href="https://yq.aliyun.com/articles/413601">libevent使用教程</a></li><li>[ ]code generator(代码生成器)</li><li>[ ]python 的asyncio</li><li>[ ] <a href="https://www.youtube.com/watch?v=0Rf5Jc61ArM">Paging Technique : Memory management in Operating System</a></li><li>[ ] <a href="http://forums.justlinux.com/showthread.php?3261-Block-size-vs-page-size">block size vs page size</a></li></ul><h3 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h3><ul><li>用 express 转接一个知乎 Api，添加 Access-control-allow-origin,或许还可以用 redis 缓存数据结果（一个就好）由此想到一篇文章”How to use Pythonto build a restful Web Service”.只不过用的是 Tornado</li><li>git hook (github travis 持续集成，git push 会触发服务器的一系列操作)</li><li>基于前后端分离的理念，后台只负责提供数据，render page 的任务应该交给前端。（所以用 express-handlebars 写页面的方式写着很累）</li><li>集成 travis-ci，记得 after-success script 的结果并不会影响 build 的结果（即，after-success 执行脚本发生了错误，在日志里有输出 error，但实际显示的 build result 仍为 success），还有 travis 的输出 log 需要默认是折叠的，要展开才能看清楚，但在 afterSuccess 里面的指令的输出一定是有的。</li><li>随便放一个文件到/usr/bin/就可以直接调用这个文件名来起这个命令了吗？（实际操作只需要建立一个symbolic link就好了）</li><li>单个网卡最多65535个端口，c10K。<a href="https://www.zhihu.com/question/66553828">65536其实不是操作系统限制的，而是tcp协议就只给port留了2个bytes给source port，只留了2个bytes给destination port</a>端口号写在tcp包里，ip地址不是，ip地址是ip层的事情</li><li>oAuth2原理，其实流程上和很多客户端的微信登陆，新浪微博登陆很像的</li><li>在Android手机上尝试用一个unix domain socket用于localhost进程间ipc(其实就是保证端口号一致，给网络权限就好了)</li><li>写 groovy 用intelij全家桶就可以了，groovy的<a href="https://www.tutorialspoint.com/groovy/groovy_closures.htm">语法</a>其实没什么，主要是了解编译的流程和基本原理，这个需要看<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases">official doc</a></li><li><a href="https://github.com/JLLK/gradle-android-maindexlist-plugin">开发gradle plugin优化MultiDex</a>。长远来看，5.0以后的手机越来越多，MultiDex也不值得过于关注。</li><li>intelij 点击run 实际调用的command line是两个，一个是javac，编译出来的class文件放到了target文件夹，紧接着用java命令带上一大串classpath去调用主函数</li><li><a href="https://fucknmb.com/2017/05/11/Android-Studio-Library%E6%A8%A1%E5%9D%97%E4%B8%ADNative%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8Cdebug%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/">Android Studio 编译过程</a>，其实就是gradle assembleXXX 好了之后adb push到手机上，再安装，最后起主界面</li><li><a href="http://mouxuejie.com/blog/2016-06-21/multidex-compile-and-dex-source-analysis/">Android 编译及 Dex 过程源码分析</a></li><li><a href="http://www.wangyuwei.me/">如何调试 Android 打包流程？</a>，一个remote的事</li><li><a href="https://github.com/chenenyu/img-optimizer-gradle-plugin">一个用于优化 png 图片的 gradle 插件</a>，用来看 groovy 语法挺好的。以及 <a href="http://yuanfentiank789.github.io/2017/09/20/%E5%9C%A8AndroidStudio%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6/">How to write gradle plugin</a></li><li>XSS 攻击,DOM based和Stored XSS,基本上就是不要相信用户的输入，除了合法输入以外一律过滤掉</li></ul><ul><li>websocket nodejs，局限性就是前后台都得用socket.io的库。前端是浏览器的话还好，app的话java,Android都有对应的实现.[其实就是socket io] </li><li>[X]一直不会maven是在是太丢人了<a href="https://maven.apache.org/guides/getting-started/index.html#How_do_I_make_my_first_Maven_project">看文档就行了</a>，其他的<a href="https://www.tutorialspoint.com/maven/maven_build_life_cycle.htm">教程</a>也不错</li><li>[使用Spring boot后台提供protobuf接口实现客户端通信] 不要使用protobf-gradle-plugin了。直接写脚本用protoc去生成文件，指定生成文件的路径要和proto里面写的包名对的上。另外就是客户端和server端依赖的protobuf版本以及protoc工具的版本得一致，比如都是3.5。还有就是protoc的语法，什么import的比较烦。</li><li>[X] 使用jinja2生成文件。<a href="https://github.com/guokr/swagger-py-codegen">一个比较好玩的代码生成器</a></li><li>[X] URL Encoding,就是那个在网址里把字符转成百分号加上UTF-8的<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html">找到了阮一峰老师的解释</a></li><li>[X] 通过file input上传图片，原生ajax以及Ajax，自己搭建上传服务器<a href="https://zhuanlan.zhihu.com/p/24513281?refer=flask">大概能猜到暴风影音的局域网传输实现了</a>用flask的话自己搭建好后台最简单了，最多再使用flask-wtf和flask-upload规范操作</li><li>[X]Promise 链式调用与终止，异常处理(只是一个工具而已)</li><li>[X] Android 应用接入bugly热修复，上线之后就不用背锅了（有兴趣看看sevenZip.jar，暂时没看）</li><li>[X] <a href="http://normanmaurer.me/blog/2013/11/09/The-hidden-performance-costs-of-instantiating-Throwables/">简直碉堡了的博客</a>以及jvm 的inline等优化</li><li>[ ] <a href="https://seisman.github.io/how-to-write-makefile/introduction.html">如何写makefile</a>其实<a href="http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/">这个更加friendly</a></li><li>[X] <a href="https://www.jianshu.com/p/534741f5151c">libmp3lame移植到Android</a>,该教程针对的lame版本是3.99.5</li><li><a href="https://sspai.com/post/31500">scheme 这东西算跨客户端平台的</a>，比如在 App 中调起支付宝(用的是 alipayqr://)。其实就是一个系统内跨应用调用。<a href="http://blog.csdn.net/qq_23547831/article/details/51685310">用法</a><br>这个主要是ios app之间通信的协议，以及快速跳转某个app某个页面的功能实现，还有x-callback-URL这样类似的协议。不过有了3d-touch之后，很多app都能长按图标进入页面，所以url scheme这个功能只能说是不复往日辉煌了</li><li>[X]linux的sed命令(文本替换比较常用)</li><li><a href="https://juejin.im/post/59fffdb76fb9a0450a66bd58">nio</a> 还是netty好</li><li>[X]js 的async await,就是一个async修饰一个method，里面随便写await</li><li>[X] Linux下TCP延迟确认机制</li></ul><h3 id="Good-For-Nothing"><a href="#Good-For-Nothing" class="headerlink" title="Good For Nothing"></a>Good For Nothing</h3><ul><li>[ ] 用GDB调试程序</li><li>[ ] npm install graphql(mostly a server side javascript stuff)</li><li>使用 express 模拟网络延迟</li><li><a href="https://juejin.im/post/5a157b7a5188257bfe457ff0">基于 Docker 打造前端持续集成开发环境</a></li><li>vS Code Vender Prefix plugin =&gt; auto prefix loader</li><li>前后端分离</li><li>sql漏洞</li><li><a href="https://cloud.tencent.com/developer/article/1004755">深入浅出腾讯云 CDN：缓存篇</a>不管SSD盘或者SATA盘都有最小的操作单位，可能是512B，4KB，8KB。如果读写过程中不进行对齐，底层的硬件或者驱动就需要替应用层来做对齐操作，并将一次读写操作分裂为多次读写操作。</li><li>Android进程的<a href="https://juejin.im/post/5a646211f265da3e3f4cc997">加载流程</a></li><li>前后端同构</li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins">install nginx , jenkin ci, deploying nginx in docker(Http Load Balaning with Docker and nginx)</a></li><li>[ ] 网易云音乐API</li><li>[X] Django部署个人网站(Gunicorn，Nginx)。django写template就不是前后端分离了</li><li>[ ] Docker<a href="https://medium.com/@elye.project/intro-to-docker-building-android-app-cb7fb1b97602">intro-to-docker-building-android-app</a> 这篇文章其实是两件事，一个是Build docker image(docker build xxxx),另一个是run (docker run xxx)</li><li>[ ] <a href="https://blog.csdn.net/u013553529/article/details/53856800">和网页类似，Activity也有一个referer的概念</a>，用于判断当前页面是由谁发起请求的<br>OpenType® is a cross-platform font file format developed jointly by Adobe and Microsoft.</li><li>[ ]<a href="https://blog.securem.eu/serverside/2015/08/25/setting-up-owncloud-server-in-a-docker-container/">deploying owncloud using docker</a></li><li><a href="https://doc.owncloud.org/server/10.0/admin_manual/installation/docker/">owncloud官方的配合docker安装教程</a>网盘这种东西看个人喜好了</li><li>[ ]CloudFlare cdn解析以及DNS防护 </li><li>[ ] <a href="https://www.tutorialspoint.com/python/python_further_extensions.htm">python c extension</a> </li></ul><p><a href="https://jsonplaceholder.typicode.com/">jsonplaceholder</a>懒得自己写api的话<br>就用这个吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个待办事项的仓库&lt;br&gt;&lt;img src=&quot;https://haldir66.ga/static/imgs/girlfriend lake green nature water cold.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>python中多进程、多线程以及GIL记录</title>
    <link href="https://haldir65.github.io/2018/11/11/2018-11-11-python-gil-and-what-you-can-do-about-it/"/>
    <id>https://haldir65.github.io/2018/11/11/2018-11-11-python-gil-and-what-you-can-do-about-it/</id>
    <published>2018-11-11T22:21:52.000Z</published>
    <updated>2018-11-17T07:52:44.229Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.haldir66.ga/static/imgs/1102533137-5.jpg" alt=""></p><ul><li>If your code has a lot of I/O or Network usage:<br>Multithreading is your best bet because of its low overhead</li><li>If you have a GUI<br>Multithreading so your UI thread doesn’t get locked up</li><li>If your code is CPU bound:<br>You should use multiprocessing (if your machine has multiple cores)</li></ul><a id="more"></a><p>Python Global Interpreter Lock(GIL)<br>所有的python bytecode在执行前都需要获得interpreter的lock。<br>GIL的出现似乎是历史原因（为了方便的直接使用当时现有的c extension）。而没有在python3中被移除的原因是因为这会造成单线程的程序在python3中跑的反而比python2中慢。</p><p>因为GIL的存在，python中的线程并不能实现cpu的并发运行(同时只能有一条线程在运行)。但对于I/O intensive的任务来说，cpu都在等待I/O操作完成，所以爬虫这类操作使用多线程是合适的。</p><h2 id="多线程以及一些同步的问题"><a href="#多线程以及一些同步的问题" class="headerlink" title="多线程以及一些同步的问题"></a>多线程以及一些同步的问题</h2><p>单线程的版本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># single_threaded.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">COUNT = <span class="number">50000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">countdown(COUNT)</span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Time taken in seconds -'</span>, end - start)</span><br></pre></td></tr></table></figure></p><p>多线程的版本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># multi_threaded.py</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">COUNT = <span class="number">50000000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">t1 = Thread(target=countdown, args=(COUNT//<span class="number">2</span>,))</span><br><span class="line">t2 = Thread(target=countdown, args=(COUNT//<span class="number">2</span>,))</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">end = time.time()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Time taken in seconds -'</span>, end - start)</span><br></pre></td></tr></table></figure></p><p>多线程虽然同一时刻只能有一条线程运行，但牵涉到数据共享的时候还是要加锁<br><img src="https://haldir66.ga/static/imgs/lockExplanation.jpg" alt=""></p><p>比如这个例子，照说打印出来的应该是0，但实际操作中可能打出来正数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"><span class="comment"># 假定这是你的银行存款:</span></span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment"># 先存后取，结果应该为0:</span></span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        change_it(n)</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">print(balance)</span><br></pre></td></tr></table></figure></p><p>上述过程的原因在于<br>balance = balance + n<br>这一步其实需要至少两条cpu语句：<br>x = balance +n<br>balance = x </p><p>正常顺序是t1 (+5,-5) t2 (+8, -8) 这样的顺序<br>不正常的顺序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">初始值 balance = 0</span><br><span class="line"></span><br><span class="line">t1: x1 = balance + 5  # x1 = 0 + 5 = 5</span><br><span class="line"></span><br><span class="line">t2: x2 = balance + 8  # x2 = 0 + 8 = 8</span><br><span class="line">t2: balance = x2      # balance = 8</span><br><span class="line"></span><br><span class="line">t1: balance = x1      # balance = 5</span><br><span class="line">t1: x1 = balance - 5  # x1 = 5 - 5 = 0</span><br><span class="line">t1: balance = x1      # balance = 0</span><br><span class="line"></span><br><span class="line">t2: x2 = balance -8 # x2 =-8</span><br><span class="line">t2: balance = x2 # balance = -8</span><br><span class="line"></span><br><span class="line">结果 balance = -8</span><br></pre></td></tr></table></figure></p><p>所以是有可能打印出-8这样的错误的结果的</p><p>这种情况下只要加锁就可以了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line">balance = <span class="number">0</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_it</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> balance</span><br><span class="line">    balance = balance + n</span><br><span class="line">    balance = balance - n</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_thread</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000000</span>):</span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            change_it(n)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            lock.release()</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</span><br><span class="line">t2 = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">print(balance)</span><br></pre></td></tr></table></figure></p><p>改成每一次对共享变量进行操作都需要加锁之后，打印结果就正常了<br><a href="https://hackernoon.com/synchronization-primitives-in-python-564f89fee732">多进程之间的同步方式包括queue,Event,Semaphores，Conditions等</a></p><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>多进程的版本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">COUNT = <span class="number">50000000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pool = Pool(processes=<span class="number">2</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    r1 = pool.apply_async(countdown, [COUNT//<span class="number">2</span>])</span><br><span class="line">    r2 = pool.apply_async(countdown, [COUNT//<span class="number">2</span>])</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">'Time taken in seconds -'</span>, end - start)</span><br></pre></td></tr></table></figure></p><p>多进程之间内存不共享，同步方式是使用Queue(fifo)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line">q = Queue()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(n)</span>:</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    q.put(os.getpid())</span><br><span class="line">    print(<span class="string">"[&#123;0&#125;] Hello!"</span>.format(n))</span><br><span class="line"></span><br><span class="line">processes = [ ]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = multiprocessing.Process(target=hello, args=(i,))</span><br><span class="line">    processes.append(t)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> one_process <span class="keyword">in</span> processes:</span><br><span class="line">    one_process.join()</span><br><span class="line"></span><br><span class="line">mylist = [ ]</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">    mylist.append(q.get())</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Done!"</span>)</span><br><span class="line">print(len(mylist))</span><br><span class="line">print(mylist)</span><br></pre></td></tr></table></figure></p><p><a href="https://codewithoutrules.com/2018/09/04/python-multiprocessing/">多进程还可以牵涉到进程池的概念</a><br>牵涉到一些celery的点</p><p><a href="https://realpython.com/python-gil/">What is the Python Global Interpreter Lock (GIL)?</a><br><a href="https://timber.io/blog/multiprocessing-vs-multithreading-in-python-what-you-need-to-know/">multiprocessing-vs-multithreading-in-python-what-you-need-to-know</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/1102533137-5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If your code has a lot of I/O or Network usage:&lt;br&gt;Multithreading is your best bet because of its low overhead&lt;/li&gt;
&lt;li&gt;If you have a GUI&lt;br&gt;Multithreading so your UI thread doesn’t get locked up&lt;/li&gt;
&lt;li&gt;If your code is CPU bound:&lt;br&gt;You should use multiprocessing (if your machine has multiple cores)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>tcpdump和wireshark使用手册</title>
    <link href="https://haldir65.github.io/2018/11/10/2018-11-10-tcpdump-and-wireshark-etc/"/>
    <id>https://haldir65.github.io/2018/11/10/2018-11-10-tcpdump-and-wireshark-etc/</id>
    <published>2018-11-10T20:57:53.000Z</published>
    <updated>2018-11-17T07:52:44.229Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.haldir66.ga/static/imgs/osi-model.png" alt=""><br><a href="http://packetlife.net/media/library/13/Wireshark_Display_Filters.pdf">wireshark expression cheetsheet</a><br><a href="http://packetlife.net/media/library/12/tcpdump.pdf">tcpdump cheet</a><br>wireshark能抓tcp,arp,http,dns,udp,icmp,dhcp…</p><a id="more"></a><p>先从wireshark说起，在win10上安装wireshark需要顺带装上winpacp，不过现在的安装包默认都会提示去安装，所以也都很简单<br>tcpdump在Linux上比较容易安装，类似于wireshark的command line tool</p><h3 id="wireshark的filter"><a href="#wireshark的filter" class="headerlink" title="wireshark的filter"></a>wireshark的filter</h3><p>现在wireshark的filter都会自动提示了，所以基本上随手敲几个就行了</p><p>http ##只看http的<br>http.request<br>tcp.dstport == 443 ## 只看https的<br>tcp.port == 113 ## 不管是source还是destination，只要是port 113的都筛出来(113是一个特殊的端口 Identification Protocol, Ident)<br>udp.port== 53 ## 筛选出所有的dns查询<br>ip.addr eq 192.168.1.3 and ip.addr eq 192.168.1.1 //假设本机ip是192.168.1.3并且路由器是192.168.1.1的话，这个可以筛选出所有的ipv4包<br>ip.src == 192.168.1.3 &amp;&amp; tcp.port == 80 //两个命令串联起来也是可以的<br>ip.addr //既包含src也包含dst<br>udp ||http // udp或者http的包<br>frame.len &lt;=128 //显示所有体积小于128个字节的包</p><p>//如果一开始就只对特定协议感兴趣<br>capture -&gt; filters 里面可以选择只抓某些协议的包。因为默认是什么都抓，这样会少很多</p><h3 id="一些有用的操作"><a href="#一些有用的操作" class="headerlink" title="一些有用的操作"></a>一些有用的操作</h3><p>选中一个column，右键 -&gt; follow -&gt;tcpstream ，可以查看这个packet的来回信息。（如果是http的话，request和response都给出来了）<br>菜单栏上的Statistics -&gt; conversatitons （查看所有的会话）<br>wireshark的结果可以save成.cap文件，下次可以打开<br>菜单栏上的Statistics -&gt; protocol Hierarchy(查看所有的协议)<br>菜单栏view -&gt; coloring rule（直接将特定的协议变成特定颜色的背景，方便识别）<br>view -&gt; time displayformat(格式化packet的时间显示成便于识别的时间，因为默认的显示单位是毫秒)<br>Statistics -&gt; endpoints // 查看所有连接过的ip</p><p>Statistics -&gt; packet length //查看所有的packet length（多数时候包的大小在40-79和1280-2559这个区间里面，没有小于40的，因为最少得40个字节）</p><ul><li>arp(addression resolution protocol)<br>一台电脑在发出去一个包之前，已经知道dest的ip地址，但是不知道这个ip地址对于的mac地址是多少，于是会发出一份arp request。<br>在局域网内部，是这样的</li><li>who has 192.168.1.1 ? Tell 192.168.1.7  //电脑发出arp请求</li><li>192.168.1.1 is at 00:xx:00:xe:b5 //很快得到了回应</li></ul><p><a href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol">arp包结构</a></p><p>一个ipv4地址需要32个bit表示,192.168.1.1这种写法叫做base10<br>一般情况下，192.168这俩一般表示的是network address, .1.1这俩一般表示的是Host address(physical computer)<br>net mask(255.255.0.0) 192.168.1/16。</p><h3 id="选中一个tcp包，查看Internet-Protocol-Version4-这里就是第三层-network层了-。"><a href="#选中一个tcp包，查看Internet-Protocol-Version4-这里就是第三层-network层了-。" class="headerlink" title="选中一个tcp包，查看Internet Protocol Version4 ..(这里就是第三层,network层了)。"></a>选中一个tcp包，查看Internet Protocol Version4 ..(这里就是第三层,network层了)。</h3><p><img src="https://haldir66.ga/static/imgs/wire_shark_internet_protocol_version4.png" alt=""><br>从上到下依次是<br>version: 4<br>Header length 20bytes<br>Differentiated Services Filed(不懂)<br>Total Length(这个是包含了)<br>Identification(类似于id)<br>Flags : 0x4000, Dont’t fragment(这个牵涉到mtu,maximum transmission unit size, 这个数值在ethernet上是1500bytes。假如一个包大小超过这个数，切成两个,也就是fragment.这个Flags里面可以看到More fragment: not set （0），意思就是说这个包没有被切成两个。有两种情况下这个标志设为0，一是没有分包，而是这个包恰好是最后一个)<br>Fragment offset：0 (假如被切成两个了，这里就表示当前这个包是被切完之后的第一个还是第二个，就当是index吧)。<br>这个包是访问google时留下的</p><p>有一个Time to live:128 (就是说这个包最多走128hop，就是最多经手128个router就丢掉)</p><h3 id="再看第四层（Transport-layer），也就是tcp-udp这类了。"><a href="#再看第四层（Transport-layer），也就是tcp-udp这类了。" class="headerlink" title="再看第四层（Transport layer），也就是tcp,udp这类了。"></a>再看第四层（Transport layer），也就是tcp,udp这类了。</h3><p>还是上面这个包<br><img src="https://haldir66.ga/static/imgs/wire_shark_capture_transmission_control_protocol.png" alt=""><br>从上到下依次是<br>Source Port<br>Destination Port :443 //https无疑<br>stream index: 4<br>sequence number 496 //确保数据没有丢失<br>Acknowledgement number : 4043 //下一个包的sequence number<br>Flags(urg:urgent,push:push,rst:reset,sin&amp;fin(finished))这张图里面写的是Acknowledgment(显然是ack包)<br>window size value: 2053(这个是tcp receiver buffer，单位是byte，这个数值变来变去的)<br>checksum(检查数据完整)</p><h2 id="说一说handshake"><a href="#说一说handshake" class="headerlink" title="说一说handshake"></a>说一说handshake</h2><p>tcp packets始于一个handshake<br>检查端口，发送一个sequence number(随机的),客户端会发送一个syn packet到接受方。接受方会返回一个syn ack packet,接下来客户端发送一个ack packet。上述步骤每一次sequence number都会+1<br><img src="https://haldir66.ga/static/imgs/wireshark_tcp_handshake.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. Client 发送 SYN 包（seq: x），告诉 Server：我要建立连接；Client 进入SYN-SENT状态；</span><br><span class="line">2. Server 收到 SYN 包后，发送 SYN+ACK 包（seq: y; ack: x+1），告诉它：好的；Server 进入SYN-RCVD状态；</span><br><span class="line">3. Client 收到 SYN+ACK 包后，发现 ack=x+1，于是进入ESTABLISHED状态，同时发送 ACK 包（seq: x+1; ack: y+1）给 Server；Server 发现 ack=y+1，于是也进入ESTABLISHED状态；</span><br><span class="line">接下来就是互相发送数据、接收数据了……</span><br></pre></td></tr></table></figure></p><h3 id="tcp-teardown-四次挥手告别"><a href="#tcp-teardown-四次挥手告别" class="headerlink" title="tcp teardown(四次挥手告别)"></a>tcp teardown(四次挥手告别)</h3><p>host发送给destination一个fin acknowledge packet<br>destination发挥一个ack packet和一个fin ack packet<br>host再发送一个ack(这些都可以从flags里面看到)<br><img src="https://haldir66.ga/static/imgs/wireshark_tcp_wave.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意，可以是连接的任意一方主动 close，这里假设 Client 主动关闭连接：</span><br><span class="line"></span><br><span class="line">1. Client 发送 FIN 包，告诉 Server：我已经没有数据要发送了；Client 进入FIN-WAIT-1状态；</span><br><span class="line">2. Server 收到 FIN 包后，回复 ACK 包，告诉 Client：好的，不过你需要再等会，我可能还有数据要发送；Server 进入CLOSE-WAIT状态；而 Client 收到 ACK 包后，继续等待 Server 做好准备， Client 进入FIN-WAIT-2状态；</span><br><span class="line">3. Server 准备完毕后，发送 FIN 包，告诉 Client：我也没有什么要发送了，准备关闭连接吧；Server 进入LAST-ACK状态；</span><br><span class="line">4. Client 收到 FIN 包后，知道 Server 准备完毕了，于是给它回复 ACK 包，告诉它我知道了，于是进入TIME-WAIT状态；而 Server 收到 ACK 包后，即进入CLOSED状态；Client 等待 2MSL 时间后，没有再次收到 Server 的 FIN 包，于是确认 Server 收到了 ACK 包并且已关闭，于是 Client 也进入CLOSED状态；</span><br></pre></td></tr></table></figure></p><p>MSL即报文最大生存时间，RFC793 中规定 MSL 为 2 分钟，但这完全是从工程上来考虑，对于现在的网络，MSL=2分钟可能太长了一些。实际应用中常用的是 30 秒、1 分钟、2 分钟等；可以修改/etc/sysctl.conf内核参数，来缩短TIME_WAIT的时间，避免不必要的资源浪费。</p><p>所以整个tcp传输的过程看起来像这样<br><img src="https://haldir66.ga/static/imgs/wireshark_tcp_handwave.jpg" alt=""></p><p>有时候会看到rest，意味着连接突然中断了（tcp会断掉这个sequence的所有packet，把flags里面的reset设置为1）</p><h3 id="DHCP-Dynamic-Host-Configuration-Protocol-这个位于第7层"><a href="#DHCP-Dynamic-Host-Configuration-Protocol-这个位于第7层" class="headerlink" title="DHCP (Dynamic Host Configuration Protocol)这个位于第7层"></a>DHCP (Dynamic Host Configuration Protocol)这个位于第7层</h3><h3 id="DNS包结构"><a href="#DNS包结构" class="headerlink" title="DNS包结构"></a>DNS包结构</h3><p>DNS走的是udp的53端口，发出去的请求的dst.port=53，收到的response的src.port = 53.<br>在局域网内,dst就是路由ip(192.168.1.1)</p><p>访问tmall主页<br><img src="https://haldir66.ga/static/imgs/dns_query_round_trip.png" alt=""><br>一来一回的</p><p>先看request<br><img src="https://haldir66.ga/static/imgs/dns_query_request_detail.png" alt=""><br>在Domain Name System query的<br>Flags下有一个opcode(这个值可能是standard query，也可能是authoritated answers,如果response是从name server回来的话)<br>Flags下面还有一个Truncated(意思就是你发出的这个包是不是太大了，太大了塞不进一个packet)<br>还有Recursion desire:Do query recursively(这意味着servername支持recursive query，就是当前dns server找不到的话，会往上继续查找)</p><p>再来看response<br><img src="https://haldir66.ga/static/imgs/dns_query_response_detail.png" alt=""><br>结果在Answers里面</p><h3 id="https结构"><a href="#https结构" class="headerlink" title="https结构"></a>https结构</h3><p>wireshark上显示成tlsv1.2<br>找application data，在secure socket layer里面有encrypted Application Data(加密过的)<br>如果是http的话，在hypertext transfer protocol里面最底下会显示html encoded的post的data</p><h3 id="tcp-retransmission"><a href="#tcp-retransmission" class="headerlink" title="tcp retransmission"></a>tcp retransmission</h3><p>网速慢的时候(latency高)tcp会发现这些问题，重发<br>如果一个packet始终没有收到ack(在限定的时间内)，重发<br>两个packet之间的时间叫做round-trip time,每当出现retransmission的时候，z这个packet的rto直接double（windows上默认尝试5次，linux上有的达到15次），一直这样double的操作超过5次后，直接丢包</p><p>如果找到一个retransmission的包<br>rto time在transmission control protocol下面的expert info，里面有个<br>(the rto for this segment was: 0.220 seconds)<br>如果这次重发还不成功,0.44s后,0.88秒后。直到超过5次尝试</p><h3 id="tcp-duplicates"><a href="#tcp-duplicates" class="headerlink" title="tcp  duplicates"></a>tcp  duplicates</h3><p>duplicate ack，这通常出现在receiver收到了out of order packet。<br>所有的tcp连接都有一个isn( initial sequence number)，就是初始序列号了。后续的packet会在这个数字的基础上,data payload传递了多少，这个数就加多少。比方说src这边的isn是1000，发送了200bytes的数据，那么我收到的ack应该是1200.</p><p>上述是一切正常的情况，但是假如src这边的isn是1000，发出去200bytes，dst那边返回1200的sequence number的ack。此时，src这边出了问题，发出去一个1400的packet，dst那边就会认为，你这不对，重来一遍（发回一个1200的ack，一直尝试3次，直到src终于反应过来发出1200的包，这个正确的包叫做fast retransmission）。<br>在wireshark里面，dst发回来的重复的ack会显示为tcp dup ack。src最后一次正确的packet显示为tcp fast retransmission</p><p>所以一旦出现了skip isn的情况，要么dst发回dup ack，要么src发出fast retransmission</p><h3 id="tcp-flow-control"><a href="#tcp-flow-control" class="headerlink" title="tcp flow control"></a>tcp flow control</h3><p>即sliding window mechanism，原理是调整retransmission的速度（根据dst的recive window），因为dst那边是有一个tcp buffer space的，万一这个buffer溢出，就会造成丢包<br>wireshark中，在transmission control protocol下面，有一个window size.<br>比方说，src发送了一个isn =1的packet，window size = 8760。dst返回一个ack number = 2921的ack,同时window size变成5840.<br>这么来来回回，这个window迟早被小号玩，tcp zero window（正常情况下dst的应用层能够读走这部分数据，但是如果接收方读取速度跟不上的话，会发送一个ack包，告诉src发送慢一点,src接收到了之后，就会一直发keep-alive packet(非常小的包，66byte).如果dst那边还没处理好的话，会一直返回Tcp Zero window 的ack，这样往返数次）<br>在wireshark里面,tcp zero window的ack包里面会显示window size value: 0</p><h3 id="high-latency"><a href="#high-latency" class="headerlink" title="high latency"></a>high latency</h3><p>这个主要的标志是time这一栏超过1秒，延迟的原因很多。可以分析是去程慢还是返程慢。也有可能是服务器处理很慢。<br>network baseline(正常的延迟是多少，比如国内到美国一般150ms以上是起码的，这是物理决定的)</p><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><p>安装</p><blockquote><p>sudo apt-get install tcpdump</p></blockquote><p>使用<br>sudo tcpdump -i wlan0 ##i的意思是指定某个网络接口，输出非常多<br>sudo tcpdump -D ##哪些接口可用<br>sudo tcpdump -i 2 ##只看-D显示的第二个设备<br>sudo tcpdump -v -A ## A的意思是ASCII，至少内容容易辨识<br>sudo tcpdump -i 2 -c 4 ##只抓4个包<br>sudo tcpdump -i 2 -c -4 -n arp ##只抓arp的包,n的意思是supress host name,也能用来指定协议<br>sudo tcpdump -i 2 -c -4 -n tcp ##只抓4个tcp<br>sudo tcpdump -i 2 -c -4 -n icmp ##只抓4个icmp<br>sudo tcpdump -i 2 -c -4 src 192.168.1.1 ##指定src</p><p>sudo tcpdump -i 2 -c -4 -w filename.pcap ##保存到文件,这个文件用tcpdump打开也是可以的<br>sudo tcpdump -r  filename.pcap ##读取这个文件</p><p>可以和egrep一起用<br>sudo tcpdump -A -i 2 | egrep -i ‘pass=|pwd=|password=|username=’ –color=auto –line-buffered<br>//比方说抓到了md5过的密码，随便找个解密网站，就能解出来了</p><p><a href="https://segmentfault.com/a/1190000009562333">ARP欺骗</a> arp cache poisoning attack<br><a href="http://packetlife.net/media/library/23/common_ports.pdf">常用的端口号</a><br><a href="https://github.com/chrissanders/packets">各种可能的pcap文件</a><br><a href="https://www.zfl9.com/c-socket.html">本文大量文字图片出处</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/osi-model.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a href=&quot;http://packetlife.net/media/library/13/Wireshark_Display_Filters.pdf&quot;&gt;wireshark expression cheetsheet&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://packetlife.net/media/library/12/tcpdump.pdf&quot;&gt;tcpdump cheet&lt;/a&gt;&lt;br&gt;wireshark能抓tcp,arp,http,dns,udp,icmp,dhcp…&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>tcp-nagel-algorithm-and-delay-ack</title>
    <link href="https://haldir65.github.io/2018/11/06/2018-11-06-nagel-algorithm-and-delay-ack/"/>
    <id>https://haldir65.github.io/2018/11/06/2018-11-06-nagel-algorithm-and-delay-ack/</id>
    <published>2018-11-06T13:25:55.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p>Nagle’s Algorithm 和 Delayed ACK 一起用在特定场景下可能会造成网速不必要的延迟<br>傳送 TCP 封包的時候， TCP header 占 20 bytes， IPv4 header 占 20 bytes，若傳送的資料太小， TCP/IPv4 headers 造成的 overhead (40bytes) 並不划算。想像傳送資料只有 1 byte，卻要另外傳 40 bytes header，這是很大的浪費。若網路上有大量小封包，會占去網路頻寬，可能會造成網路擁塞 。这个是针对发送方而言的。</p><p><img src="https://www.haldir66.ga/static/imgs/nature-grass-wet-plants-high-resolution-wallpaper-573f2c6413708.jpg" alt=""><br><a id="more"></a></p><p>一个TCP数据包的传输至少需要固定的40字节头部信息(20字节TCP + 20字节IP)，如果数据包实际负载都比较小的话，那么传输的效率就非常低，但是如果将这些小包的负载都尽量集中起来，封装到一个TCP数据包中进行传输，那么传输效率势必将会大大提高。此处我们再次强调，TCP传输的是一个字节流，本身不存在所谓的离散形式的数据包的概念，协议可以任意组合、拆分每次调用实际传输的数据长度。</p><p>Nagle算法的思路在<a href="https://zh.wikipedia.org/wiki/%E7%B4%8D%E6%A0%BC%E7%AE%97%E6%B3%95">wiki</a>上也能找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">if there is new data to send</span><br><span class="line"></span><br><span class="line">  if the window size &gt;= MSS and available data is &gt;= MSS</span><br><span class="line"></span><br><span class="line">    send complete MSS segment now</span><br><span class="line"></span><br><span class="line">  else</span><br><span class="line"></span><br><span class="line">    if there is unconfirmed data still in the pipe</span><br><span class="line"></span><br><span class="line">      enqueue data in the buffer until an acknowledge is received</span><br><span class="line"></span><br><span class="line">    else</span><br><span class="line"></span><br><span class="line">      send data immediately</span><br><span class="line"></span><br><span class="line">    end if</span><br><span class="line"></span><br><span class="line">  end if</span><br><span class="line"></span><br><span class="line">end if</span><br></pre></td></tr></table></figure></p><p>如果发送内容大于1个MSS， 立即发送；<br>如果之前没有包未被确认， 立即发送；<br>如果之前有包未被确认， 缓存发送内容；<br>如果收到ack， 立即发送缓存的内容。</p><p>概括地说来，其流程表述为：(a)不考虑窗口流量控制的限制，一旦累积的数据达到MSS就立即执行传输；(b)否则如果当前有未ACK的数据，就将数据堆积到发送队列里延迟发送；(c)如果没有待需要ACK的数据，就立即发送。简单说来，就是在数据没有累积到MSS的大小情况下，整个连接中允许有未ACK的数据。<br>　　Nagel算法本质上就是个时间换带宽的方法，所以对于那些带宽要求不大但对实时性要求高的程序，比如类似网络游戏类，需要使用TCP_NODELAY这个socket选项来关闭这个特性以减小延时发生。不过话外说来，对于这类程序或许使用UDP协议也是个选择。</p><p>想象一下，同时丢出去一大堆只有50个字节的包还是会造成带宽的浪费，还不如攒在一起发出去。</p><p>在Nagle算法中参数MSS(maximum segment size，IPv4默认值是576-20-20 = 536)<br><a href="https://en.wikipedia.org/wiki/Maximum_segment_size">Maximum_segment_size在wiki上还有专门的介绍</a></p><p>一些关键词：</p><p>acnowledged: TCP 傳送封包時會帶有流水號 ，起始值隨機，後面每傳 1 byte 就 +1。對方收到後會回傳 ACK 封包，帶有最後收到 byte 的數字。比方說收到 100 bytes，再收到 200 bytes，只要 ACK「起始值+300」即可。</p><p>sliding window: 允許傳送 unacked bytes 的最大值，確保在網路不佳的情況下，傳送端不會傳送過多封包加重擁塞。sliding window 的最大值是 2¹⁶ = 64 (KB)</p><h3 id="Delay-ACK"><a href="#Delay-ACK" class="headerlink" title="Delay ACK"></a>Delay ACK</h3><p>ACK 也是小封包，為了避免產生太多小封包，所以接收端不會每次收到封包都立即發 ACK，如果之後剛好需要送資料 ，順便帶上 ACK去可以省去小封包。實例: telnet server 會回傳使用者剛打的字，順便送 ACK 就可以省去小封包。</p><p>Linux的实现在 <a href="https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_input.c#L5066">__tcp_ack_snd_check</a>这个方法</p><p>通常最多延遲 200ms，RFC 規定不能超過 500ms。<br>每收到兩個 full-sized packet，一定要回一次 ACK。</p><h3 id="兩者合用的問題"><a href="#兩者合用的問題" class="headerlink" title="兩者合用的問題"></a>兩者合用的問題</h3><p>假設傳送端有開 Nagle’s Algorithm，接收端有開 delayed ACK (兩者在 Linux 都是預設值)。</p><p>以 HTTP 為例，若 server 的 response 被切成兩次 send，一次送 header，一次送 body，兩者都 &lt;MSS。</p><p>server 送完 header 後，因為 client 沒有回 ACK (delayed ACK)，server 也不會送 body (應用層覺得它已經送出了，但 kernel 還沒送)。<br>client 過了 200ms，送出收到 header 的 ACK。<br>server 收到 ACK 後，送出 body。<br>於是 client 多等了 200ms 才收到完整的 response。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>启示就是应用层进行开发的时候不要零零散散的发数据，尽量攒成一个大一点的包再发出去。不要让系统层去做这件事。</p><p>TCP_NODELAY 是可以关闭Nagle算法的</p><p>todo<br>window congestion<br>超时重传<br>阻塞，超时，<br>tcp缓冲</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://taozj.net/201808/nagle-and-delayed-ack.html">Nagle和Delayed ACK优化算法合用导致的死锁问题</a><br><a href="https://medium.com/fcamels-notes/nagles-algorithm-%E5%92%8C-delayed-ack-%E4%BB%A5%E5%8F%8A-minshall-%E7%9A%84%E5%8A%A0%E5%BC%B7%E7%89%88-8fadcb84d96f">Nagle’s Algorithm 和 Delayed ACK 以及 Minshall 的加強版</a><br><a href="https://cloud.tencent.com/developer/article/1004431">再说TCP神奇的40ms</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nagle’s Algorithm 和 Delayed ACK 一起用在特定场景下可能会造成网速不必要的延迟&lt;br&gt;傳送 TCP 封包的時候， TCP header 占 20 bytes， IPv4 header 占 20 bytes，若傳送的資料太小， TCP/IPv4 headers 造成的 overhead (40bytes) 並不划算。想像傳送資料只有 1 byte，卻要另外傳 40 bytes header，這是很大的浪費。若網路上有大量小封包，會占去網路頻寬，可能會造成網路擁塞 。这个是针对发送方而言的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/nature-grass-wet-plants-high-resolution-wallpaper-573f2c6413708.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何写shell脚本</title>
    <link href="https://haldir65.github.io/2018/11/04/2018-11-04-how-to-write-shell-scripts/"/>
    <id>https://haldir65.github.io/2018/11/04/2018-11-04-how-to-write-shell-scripts/</id>
    <published>2018-11-04T08:50:58.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p>linux下shell脚本语句的语法<br>，脚本以<a href="https://en.wikipedia.org/wiki/Shebang_(Unix">Shebang</a>)开始</p><blockquote><p>#!/bin/sh</p></blockquote><p><img src="https://www.haldir66.ga/static/imgs/timg.jpg" alt=""><br><a id="more"></a></p><h3 id="linux下shell脚本语句的语法"><a href="#linux下shell脚本语句的语法" class="headerlink" title="linux下shell脚本语句的语法"></a>linux下shell脚本语句的语法</h3><p>linux大小写敏感</p><p>eg: echo类似于print<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##例：myvar=“Hi there！”</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$myvar</span>  <span class="comment">## Hi there！</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$myvar</span>"</span>  <span class="comment">## Hi there!</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">' $myvar'</span> <span class="comment">## $myvar</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> \<span class="variable">$myvar</span> <span class="comment">## $myvar</span></span><br></pre></td></tr></table></figure></p><p>eg:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">myPath=<span class="string">"/var/log/httpd/"</span></span><br><span class="line">myFile=<span class="string">"/var /log/httpd/access.log"</span></span><br><span class="line"><span class="comment">#这里的-x 参数判断$myPath是否存在并且是否具有可执行权限</span></span><br><span class="line"><span class="keyword">if</span> [ ! -x <span class="string">"<span class="variable">$myPath</span>"</span>]; <span class="keyword">then</span></span><br><span class="line">mkdir <span class="string">"<span class="variable">$myPath</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#这里的-d 参数判断$myPath是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$myPath</span>"</span>]; <span class="keyword">then</span></span><br><span class="line">mkdir <span class="string">"<span class="variable">$myPath</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#这里的-f参数判断$myFile是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">"<span class="variable">$myFile</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">touch <span class="string">"<span class="variable">$myFile</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#其他参数还有-n,-n是判断一个变量是否是否有值</span></span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">"<span class="variable">$myVar</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$myVar</span> is empty"</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#两个变量判断是否相等</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$var1</span>"</span> == <span class="string">"<span class="variable">$var2</span>"</span> ]; <span class="keyword">then</span>  //<span class="keyword">if</span> 后面必须加<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'$var1 eq $var2'</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'$var1 not eq $var2'</span></span><br><span class="line"><span class="keyword">fi</span> //<span class="keyword">else</span>后面必须加<span class="keyword">fi</span></span><br><span class="line">       <span class="keyword">if</span> list <span class="keyword">then</span></span><br><span class="line">           <span class="keyword">do</span> something here</span><br><span class="line">       <span class="keyword">elif</span> list <span class="keyword">then</span></span><br><span class="line">           <span class="keyword">do</span> another thing here</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">         <span class="keyword">do</span> something <span class="keyword">else</span> here</span><br><span class="line">       <span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bashbash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello there"</span></span><br><span class="line">foo=<span class="string">"Hello"</span></span><br><span class="line">foo=<span class="string">"<span class="variable">$foo</span> World"</span>  <span class="comment">## 拼接一个现成的string到另一个string的尾部，用冒号跟美元符号就好了</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$foo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Number of files in this directory: `ls | wc -l`"</span>  <span class="comment">## 但是将ls | wc -l的输出作为一个String拼接到一个string中，用单引号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"all the files under the directory `ls  /usr/*/g* | head -n3`"</span></span><br></pre></td></tr></table></figure><p>一个把文件夹（/public/imgs）下所有文件重命名为img-x.jpg的shell脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">FORMAT_JPG=<span class="string">"jpg"</span></span><br><span class="line">FORMAT_JPEG=<span class="string">"jpeg"</span></span><br><span class="line">index=1</span><br><span class="line">dir=$(<span class="built_in">eval</span> <span class="built_in">pwd</span>)/public/imgs</span><br><span class="line">ALLIMGES=$(ls <span class="variable">$dir</span> | grep  <span class="string">".<span class="variable">$FORMAT_JPEG</span>\|.<span class="variable">$FORMAT_JPG</span>"</span>)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$ALLIMGES</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        name=img-<span class="variable">$&#123;index&#125;</span>.jpg</span><br><span class="line">        <span class="built_in">echo</span> renaming <span class="variable">$dir</span>/<span class="variable">$file</span> to  <span class="variable">$dir</span>/<span class="variable">$name</span></span><br><span class="line">        mv <span class="variable">$dir</span>/<span class="variable">$file</span> <span class="variable">$dir</span>/<span class="variable">$name</span></span><br><span class="line">        ((index++))</span><br><span class="line">        <span class="comment"># name=$(ls $file | cut -d. -f1)</span></span><br><span class="line">        <span class="comment"># mv $dir/public/imgs/$file $&#123;name&#125;.$suffix</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"renaming <span class="variable">$index</span> image files =====&gt; x.jpg done!"</span></span><br></pre></td></tr></table></figure></p><p>同时grep多种文件的时候，比如又想要jpg又想要jpeg的话，grep 要加上反斜杠，或者下面这三种<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;aaa\|bbb&quot;</span><br><span class="line">grep -E &quot;aaa|bbb&quot;</span><br><span class="line">grep -E aaa\|bbb</span><br></pre></td></tr></table></figure></p><p><a href="https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/">how to grep</a></p><p>想要在bash中设置一个variable为一个命令的输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">OUTPUT=<span class="string">"<span class="variable">$(ls -1)</span>"</span>  <span class="comment">## 注意，这里等于号前后不能有空格</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;OUTPUT&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##那如果就是平时在terminal里面随便敲敲呢，下面这些亲测无误</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(ls -al | wc)</span>"</span></span><br><span class="line"><span class="string">"<span class="variable">$(which java)</span>"</span> -h</span><br><span class="line"><span class="comment">## 比如说我想把java的路径填充到一段命令中间</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$(which java)</span>"</span>/something</span><br><span class="line">&gt;&gt; /usr/bin/java/something</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">java_stuff=<span class="string">"<span class="variable">$(which java)</span>"</span></span><br><span class="line"><span class="variable">$&#123;java_stuff&#125;</span> --version</span><br></pre></td></tr></table></figure></p><p>经常会在别人的bash脚本最前面看到一行 <a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html">set-e</a>：在阮一峰老师的博客中找到了解释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env bash</span><br><span class="line">set -e ## 这个set -e的原因，因为bash一般对错误容忍度比较高，一行命令出了错还能往下走，可是实际生产中，我们希望出了错就此打住。在文件前面写这个就行了</span><br><span class="line"></span><br><span class="line">## 总比下面这些这么写好吧</span><br><span class="line">command || exit 1 </span><br><span class="line">command || &#123; echo &quot;command failed&quot;; exit 1; &#125;</span><br><span class="line"></span><br><span class="line">set -eo pipefail ##set -e对于管道无效，这么写就连管道的错误都拦下来了</span><br></pre></td></tr></table></figure></p><p>$ set -e</p><p>这行代码之后的任何代码，如果返回一个非0的值，那么整个脚本立即退出，官方的说明是为了防止错误出现滚雪球的现象</p><p>$ set -o pipefail</p><p>原文解释如下：</p><p>If set, the return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status,or zero if all commands in the pipeline exit successfully. This option is disabled by default.</p><p>可理解为：</p><p>告诉 bash 返回从右到左第一个以非0状态退出的管道命令的返回值，如果所有命令都成功执行时才返回0</p><h3 id="变量-其实就是美元符号了"><a href="#变量-其实就是美元符号了" class="headerlink" title="变量($其实就是美元符号了)"></a>变量($其实就是美元符号了)</h3><p>变量调用符号($)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">LI=date</span><br><span class="line"><span class="variable">$LI</span> <span class="comment">##</span></span><br><span class="line"><span class="comment"># Tue Dec  5 04:06:18 EST 2017</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所以经常会有这样的脚本</span></span><br><span class="line"><span class="comment"># Check if user is root</span></span><br><span class="line"><span class="keyword">if</span> [ $(id -u) != <span class="string">"0"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">" Not the root user! Try using sudo Command ! "</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Pass the test! You are the root user!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 亲测下面这种可用</span></span><br><span class="line"><span class="keyword">if</span> [ `whoami` = <span class="string">"root"</span> ];<span class="keyword">then</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"root用户！"</span>  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"非root用户！"</span>  </span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>变量分为用户自定义的和环境变量（其实就是系统预设的）,有些区别</p><blockquote><p>用户自定义变量只在当前的shell中生效，环境变量在当前shell和这个shell的所有子shell中生效。<br>环境变量是全局变量，用户自定义变量是局部变量。<br>对系统生效的环境变量名和变量作用是固定的。</p></blockquote><h3 id="常用的环境变量"><a href="#常用的环境变量" class="headerlink" title="常用的环境变量"></a>常用的环境变量</h3><blockquote><p>HOSTNAME：主机名<br>SHELL：当前的shell<br>TREM：终端环境<br>HISTSIZE：历史命令条数<br>SSH_CLIENT：当前操作环境是用ssh链接的，这里记录客户端的ip<br>SSH_TTY：ssh连接的终端是pts/1<br>USER:当前登录的用户</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$HOSTNAME</span></span><br><span class="line"><span class="comment">## unbutu</span></span><br><span class="line">$? 最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值非0（具体是哪个数，由命令自己决定），则证明上一个命令执行不正确了。</span><br><span class="line">$$ 当前进程的进程号（PID）</span><br><span class="line">$! 后台运行的最后一个进程的进程号（PID）</span><br></pre></td></tr></table></figure><p>linux下查看环境变量命令：<br>export</p><p><a href="http://blog.51cto.com/litaotao/1187983">LINUX下的21个特殊符号</a><br><a href="https://notes.wanghao.work/2015-06-02-Shell%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html">Shell学习笔记</a><br><a href="https://www.youtube.com/watch?v=Lu-xzWajbFo">how to use variables in shell scripts</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux下shell脚本语句的语法&lt;br&gt;，脚本以&lt;a href=&quot;https://en.wikipedia.org/wiki/Shebang_(Unix&quot;&gt;Shebang&lt;/a&gt;)开始&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;#!/bin/sh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/timg.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令(三)</title>
    <link href="https://haldir65.github.io/2018/11/04/2018-11-04-linux-affiliated-commands/"/>
    <id>https://haldir65.github.io/2018/11/04/2018-11-04-linux-affiliated-commands/</id>
    <published>2018-11-04T08:44:22.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.haldir66.ga/static/imgs/green_forset_alongside_river_2.jpg" alt=""></p><a id="more"></a><h3 id="linux-sed命令"><a href="#linux-sed命令" class="headerlink" title="linux sed命令"></a>linux sed命令</h3><p><a href="https://www.digitalocean.com/community/tutorials/the-basics-of-using-the-sed-stream-editor-to-manipulate-text-in-linux">basic sed</a></p><blockquote><p> sed operates on a stream of text that it reads from either standard input or from a file.</p></blockquote><p>基本命令格式<br>sed [options] commands [file-to-edit]</p><h2 id="默认情况下-sed会把结果输出到standoutput里面"><a href="#默认情况下-sed会把结果输出到standoutput里面" class="headerlink" title="默认情况下,sed会把结果输出到standoutput里面"></a>默认情况下,sed会把结果输出到standoutput里面</h2><p>sed ‘’ BSD ##等同于cat<br>cat BSD | sed ‘’ ##操作cat的输出流<br>sed ‘p’ BSD ##p是命令，明确告诉它要去print，这会导致每一行都被打印两遍<br>sed -n ‘p’ BSD ##我不希望你自动打印，每行只被打印一遍<br>sed -n ‘1p’ BSD ##只打印第一行<br>sed -n ‘1,5p’ BSD ##打印前5行<br>sed -n ‘1,+4p’ BSD ##这个也是打印前五行<br>sed -n ‘1~2p’ BSD ##every other line，打印一行跳过一行，从第一行开始算<br>sed ‘1~2d’ BSD ##也是隔一行进行操作，只不过这里的d表示删除，结果就是1，3，5…行被从cat的结果中删掉</p><p>默认情况下,sed不会修改源文件，加上-i就能改了<br>sed -i ‘1~2d’ everyother.txt ##第1，3，5，…行被删掉<br>sed -i.bak ‘1~2d’ everyother.txt ##在编辑文件之前保存一份.bak文件作为备份</p><p>sed最为常用的命令就是substituting text了<br>echo “<a href="http://www.example.com/index.html">http://www.example.com/index.html</a>“ | sed ‘s_com/index<em>org/home</em>‘<br><a href="http://www.example.org/home.html">http://www.example.org/home.html</a></p><p>命令是这么用的,首先s表示substitute<br>‘s/old_word/new_word/‘</p><p>准备好这么一份text文件<br>echo “this is the song that never ends<br>yes, it goes on and on, my friend<br>some people started singing it<br>not knowing what it was<br>and they’ll continue singing it forever<br>just because…” &gt; annoying.txt</p><p>sed ‘s/on/forward/‘ annoying.txt ##把所有的on换成forward，同时打印出结果。但如果当前行已经替换过一次了，就跳到下一行。所以可能没有替换干净</p><p>sed ‘s/on/forward/g’ annoying.txt ## 加上g就好了<br>sed ‘s/on/forward/2’ annoying.txt ##每一行只替换第二个匹配上的<br>sed -n ‘s/on/forward/2p’ annoying.text ## n是supress自动print，只打印出哪些被换了的<br>sed ‘s/SINGING/saying/i’ annoying.txt ##希望大小写不敏感<br>sed ‘s/^.<em>at/REPLACED/‘ annoying.txt ##从每一行的开头到”at”<br>sed ‘s/^.</em>at/(&amp;)/‘ annoying.txt ## 把那些会匹配上的文字用括号包起来</p><p><a href="https://www.digitalocean.com/community/tutorials/intermediate-sed-manipulating-streams-of-text-in-a-linux-environment">intermediate training</a></p><p>linux下查看一个文件的时间戳</p><blockquote><p>stat test</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/green_forset_alongside_river_2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>网络传输的字节序问题</title>
    <link href="https://haldir65.github.io/2018/11/03/2018-11-03-idea-byte-endianness/"/>
    <id>https://haldir65.github.io/2018/11/03/2018-11-03-idea-byte-endianness/</id>
    <published>2018-11-03T10:38:04.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p>字节序（Endianness），在计算机科学领域中，是跨越<strong><em>多字节</em></strong>的程序对象的存储规则。 </p><p><img src="https://haldir66.ga/static/imgs/ship_docking_along_side_bay.jpg" alt=""><br><a id="more"></a></p><h2 id="首先确认下c语言下基本数据类型大小"><a href="#首先确认下c语言下基本数据类型大小" class="headerlink" title="首先确认下c语言下基本数据类型大小"></a>首先确认下c语言下基本数据类型大小</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"sizeof(int)= %ld\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sizeof(char)= %ld\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sizeof(long)= %ld\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">long</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sizeof(float)= %ld\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sizeof(short)= %ld\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br></pre></td></tr></table></figure><blockquote><p>sizeof(int)= 4<br>sizeof(char)= 1<br>sizeof(long)= 8<br>sizeof(float)= 4<br>sizeof(short)= 2</p></blockquote><h2 id="来看一下c语言这边用socket以int，long的形式发送数据，Python这边接收会是怎么样的"><a href="#来看一下c语言这边用socket以int，long的形式发送数据，Python这边接收会是怎么样的" class="headerlink" title="来看一下c语言这边用socket以int，long的形式发送数据，Python这边接收会是怎么样的"></a>来看一下c语言这边用socket以int，long的形式发送数据，Python这边接收会是怎么样的</h2><p>c语言的server长这样<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt; // socket</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  // 基本数据类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; // read write</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt; // open close</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 7037</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERV <span class="meta-string">"0.0.0.0"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sockfd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[ ])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        signal(SIGINT,handle_signal);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// 计数</span></span><br><span class="line">        <span class="comment">// 定义 socket</span></span><br><span class="line">        sockfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 定义 sockaddr_in</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">skaddr</span>;</span></span><br><span class="line">        skaddr.sin_family = AF_INET; <span class="comment">// ipv4</span></span><br><span class="line">        skaddr.sin_port   = htons(PORT);</span><br><span class="line">        skaddr.sin_addr.s_addr = inet_addr(SERV);</span><br><span class="line">        <span class="comment">// bind，绑定 socket 和 sockaddr_in</span></span><br><span class="line">        <span class="keyword">if</span>( bind(sockfd,(struct sockaddr *)&amp;skaddr,<span class="keyword">sizeof</span>(skaddr)) == <span class="number">-1</span> )&#123;</span><br><span class="line">                perror(<span class="string">"bind error"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// listen，开始添加端口</span></span><br><span class="line">        <span class="keyword">if</span>( listen(sockfd,QUEUE) == <span class="number">-1</span> )&#123;</span><br><span class="line">                perror(<span class="string">"listen error"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户端信息</span></span><br><span class="line">        <span class="keyword">char</span> buff[BUFF_SIZE];</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">claddr</span>;</span></span><br><span class="line">        <span class="keyword">socklen_t</span> length = <span class="keyword">sizeof</span>(claddr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> sock_client = accept(sockfd,(struct sockaddr *)&amp;claddr, &amp;length);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,++count);</span><br><span class="line">                <span class="keyword">if</span>( sock_client &lt;<span class="number">0</span> )&#123;</span><br><span class="line">                        perror(<span class="string">"accept error"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> a[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">//在这里发送出byte数组</span></span><br><span class="line">                send(sock_client,(<span class="keyword">char</span>*)a,<span class="keyword">sizeof</span>(a),<span class="number">0</span>);</span><br><span class="line">                close(sock_client);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"have a nice day"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">        close(sockfd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>python的client长这样：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># 创建一个socket:</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 建立连接:</span></span><br><span class="line">s.connect((<span class="string">'192.168.1.45'</span>, <span class="number">7037</span>))</span><br><span class="line">s.send(<span class="string">b'GET / HTTP/1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n'</span>)</span><br><span class="line"><span class="comment"># 接收数据:</span></span><br><span class="line">buffer = []</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 每次最多接收1个字节:</span></span><br><span class="line">    d = s.recv(<span class="number">1</span>)</span><br><span class="line">    t = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> d:</span><br><span class="line">        print(format(x,<span class="string">'b'</span>))</span><br><span class="line">    <span class="keyword">if</span> d:</span><br><span class="line">        buffer.append(d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">data = <span class="string">b''</span>.join(buffer)</span><br><span class="line">print(data)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure></p><p>在局域网内的两台电脑,server跑在mac上,client跑在win10<br>client这边打印出了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1    </span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">===我是四个byte等于一个int的手动分割线===</span><br><span class="line">10</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">===我是四个byte等于一个int的手动分割线===</span><br><span class="line">11</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><p>按照server端(intel cpu)是小端的理论，把上面接收到的横过来掉个头<br>前四个字节是”1”<br>1   0   0   0<br>0   0   0   1  -&gt; 显然是1</p><p>中间四个字节是”2”<br>10  0   0   0<br>0   0   0   10 -&gt; 显然是2</p><p>最后四个字节是”3”<br>11  0   0   0<br>0   0   0   11 -&gt; 显然是3</p><p>教科书诚不我欺也</p><p>这里如果把c语言的server改一下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> a[<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">//在这里发送出byte数组</span></span><br><span class="line">send(sock_client,(<span class="keyword">char</span>*)a,<span class="keyword">sizeof</span>(a),<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>client一字不改，得到的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">10000000</span><br><span class="line">111111</span><br><span class="line">===我是四个byte等于一个float的手动分割线===</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">1000000</span><br><span class="line">===我是四个byte等于一个float的手动分割线===</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">1000000</span><br><span class="line">1000000</span><br></pre></td></tr></table></figure></p><p>这个其实跟float是如何表示小数有关了，float有几个bit是专门给小数点后面的数值和指数准备的。<br>float是4个byte，这32位是这么分的：<br>1bit（符号位） 8bits（指数位） 23bits（尾数位）（内存中就长这样）</p><p>改成long呢，short呢？<br>改成long<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1    </span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">===我是八个byte等于一个long的手动分割线===</span><br><span class="line">10</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">===我是八个byte等于一个long的手动分割线===</span><br><span class="line">11</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><p>问题已经很清楚了。<br>上述是把数字当做int,long,float这种数据类型来发送，但如果是把123这三个数字当做”123”这种字符串，数字1其实只用一个byte就解决了，也就不存在什么字节序的问题了</p><p>如C编写的进程和Java编写的进程间通信，(JVM也是大端）。在主机和网络字节序的互相转化主要涉及IP地址和端口。c语言写server要老老实实去转换ip地址和端口的字节序，这也是为了遵守规范<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netstat/in.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">htonl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> hostlong)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span>  <span class="keyword">int</span> <span class="title">htons</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> hostshort)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">ntohl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> netlong)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> <span class="title">ntohs</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> netshort)</span></span>;</span><br></pre></td></tr></table></figure></p><p>网络字节序是一种规定，它规定了传输的数据应该按照大端，因为通信双方的字节序其实是不确定的，但是按照规定我们都认为接收到的数据都是大端，即遵守规定的顺序，这样老老实实地通过htons系列函数处理格式化的数据（如int）保证了不会出现任何错误。</p><p>但是，我们自己写的C/S因为都是小端，所以即使没有遵守规定，依然可以用，但这样并不规范，有潜在的隐患。</p><p>而对于IP地址或者端口，因为这些数据的处理全部是在应用层以下，是路由器，网卡进行处理，它们在设计时自然遵守规定全部依照网络字节序对数据进行处理，而你自己不把IP地址转换顺序，交给下层处理时自然会出错。</p><p>所以，在应用层，也应该遵守规定，对于int double 这样的数据也应该转换字节序，当然字符串也挺好（这大概也就是Json的优势了，而像protobuf这种传输时就要注意顺序）。</p><p><a href="https://blog.csdn.net/XiyouLinux_Kangyijie/article/details/72991235">抓包看ip地址字节序转换</a><br>utf-8还有一个byte-order-mark(bom)的问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字节序（Endianness），在计算机科学领域中，是跨越&lt;strong&gt;&lt;em&gt;多字节&lt;/em&gt;&lt;/strong&gt;的程序对象的存储规则。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://haldir66.ga/static/imgs/ship_docking_along_side_bay.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>读物</title>
    <link href="https://haldir65.github.io/2018/10/28/2018-10-28-idea-for-good-reading/"/>
    <id>https://haldir65.github.io/2018/10/28/2018-10-28-idea-for-good-reading/</id>
    <published>2018-10-28T21:43:40.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p>好的博客，好的文章的收藏夹<br><img src="https://www.haldir66.ga/static/imgs/ripe-grapes-macro-wallpaper-1920x1080-538350f32e183.jpg" alt=""><br><a id="more"></a></p><p><a href="http://docs.linuxtone.org/ebooks/C&amp;CPP/c/index.html">Linux C编程一站式学习</a></p><p><a href="http://normanmaurer.me/">author of netty</a><br><a href="http://cmsblogs.com/?cat=189">死磕java</a><br><a href="https://droidyue.com/">技术小黑屋</a><br><a href="https://imququ.com/">Jerry Qu 专注 WEB 端开发</a></p><p><a href="https://realpython.com/python-sockets/">非常非常全的关于python socket编程的文章，文章本身也很长</a></p><p><a href="https://www.zfl9.com/categories/c/">关于c语言写的很好的博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好的博客，好的文章的收藏夹&lt;br&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/ripe-grapes-macro-wallpaper-1920x1080-538350f32e183.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>netty及nio知识手册</title>
    <link href="https://haldir65.github.io/2018/10/13/2018-10-13-netty-and-nio-intro/"/>
    <id>https://haldir65.github.io/2018/10/13/2018-10-13-netty-and-nio-intro/</id>
    <published>2018-10-13T21:34:19.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.haldir66.ga/static/imgs/cute_cat_sleepy.jpg" alt=""><br><a id="more"></a></p><p>都说netty要比nio好用，先从官方的intro page看起。</p><p>ByteBuff是reference counted的，netty的作者说：<br>java给人一种不需要清理garbage的illusion<br>allocating stuff is no big deal , garbage collecting it is.</p><p><a href="https://netty.io/4.1/xref/overview-summary.html">netty的example非常多，http2,cors,upload等等都有</a></p><p><a href="https://www.youtube.com/watch?v=DKJ0w30M0vg">Netty - One Framework to rule them all by Norman Maurer</a><br><a href="https://www.youtube.com/watch?v=_GRIyCMNGGI">netty best practices with norman maurer</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/cute_cat_sleepy.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从Socket入手实现http协议</title>
    <link href="https://haldir65.github.io/2018/10/13/2018-10-13-implementing-http-server-via-socket/"/>
    <id>https://haldir65.github.io/2018/10/13/2018-10-13-implementing-http-server-via-socket/</id>
    <published>2018-10-13T21:30:36.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.haldir66.ga/static/imgs/sun_rise_dim_grass.jpg" alt=""></p><p>收集几种语言中使用socket实现httpServer和httpClient的主要步骤<br><a id="more"></a></p><p>OSI七层网络体系结构 ： 物理层(IEEE 802.2)、数据链路层(ARP,RARP)、网络层(ip,icmp)、传输层(tcp,udp)、表示层、会话层(SSL,TLS)、应用层(HTTP,FTP,SMTP,POP3).<br>这里面Socket比较特殊，Socket是一组编程接口（API）。介于传输层和应用层，向应用层提供统一的编程接口。应用层不必了解TCP/IP协议细节,直接通过对Socket接口函数的调用完成数据在IP网络的传输。SOCKET 算不上是个协议，应该是应用层与传输层间的一个抽象层，是个编程接口。</p><p>tcp包结构是不包含ip地址的，只有source port(2个byte)和destination port(65536这么来的)的. ip address是ip层的工作。</p><p><a href="https://tools.ietf.org/html/rfc7230">HTTP 1.1的RFC非常长</a></p><blockquote><p>在 OSI 的七层协议中，第二层（数据链路层）的数据叫「Frame」，第三层（网络层）上的数据叫「Packet」，第四层（传输层）的数据叫「Segment」。(在wireShark的抓包结果就是这么展示的)</p></blockquote><p><a href="https://jerryc8080.gitbooks.io/understand-tcp-and-udp/chapter1.html">tcp包结构，udp的也有</a></p><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p>用java实现一个httpclient怎么样?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSocketClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket mSocket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HttpSocketClient client = <span class="keyword">new</span> HttpSocketClient();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.sendGet(<span class="string">"www.baidu.com"</span>,<span class="number">80</span>,<span class="string">"/"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpSocketClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mSocket = <span class="keyword">new</span> Socket();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 在百度服务器面前，这就是一个正常的浏览器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendGet</span><span class="params">(String host, <span class="keyword">int</span> port, String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketAddress dest = <span class="keyword">new</span> InetSocketAddress(host, port);</span><br><span class="line">        mSocket.connect(dest);</span><br><span class="line">        OutputStreamWriter streamWriter = <span class="keyword">new</span> OutputStreamWriter(mSocket.getOutputStream());</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(streamWriter);</span><br><span class="line"></span><br><span class="line">        bufferedWriter.write(<span class="string">"GET "</span> + path + <span class="string">" HTTP/1.1\r\n"</span>);</span><br><span class="line">        bufferedWriter.write(<span class="string">"Host: "</span> + host + <span class="string">"\r\n"</span>);</span><br><span class="line">        bufferedWriter.write(<span class="string">"Connection: "</span> + <span class="string">"keep-alive"</span> + <span class="string">"\r\n"</span>);</span><br><span class="line">        bufferedWriter.write(<span class="string">"User-Agent: "</span> + <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.140 Safari/537.36"</span> + <span class="string">"\r\n"</span>);</span><br><span class="line">        bufferedWriter.write(<span class="string">"Accept: "</span> + <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"</span> + <span class="string">"\r\n"</span>);</span><br><span class="line">        bufferedWriter.write(<span class="string">"Accept-Language: "</span> + <span class="string">"zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7"</span> + <span class="string">"\r\n"</span>);</span><br><span class="line">        bufferedWriter.write(<span class="string">"\r\n"</span>);</span><br><span class="line">        bufferedWriter.flush(); <span class="comment">//flush一下很重要，等于说已经写完了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        BufferedInputStream stream = <span class="keyword">new</span> BufferedInputStream(mSocket.getInputStream());</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(stream));</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">        mSocket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Date: Sat, 24 Mar 2018 06:44:20 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 225</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Set-Cookie: BAIDUID=259D5F393E329E8E44651C589037C093:FG=1; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com</span><br><span class="line">Set-Cookie: BIDUPSID=259D5F393E329E8E44651C589037C093; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com</span><br><span class="line">Set-Cookie: PSTM=1521873860; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com</span><br><span class="line">Set-Cookie: BD_LAST_QID=10107339987852007720; path=/; Max-Age=1</span><br><span class="line">P3P: CP=&quot; OTI DSP COR IVA OUR IND COM &quot;</span><br><span class="line">Location: https://www.baidu.com/</span><br><span class="line">Server: BWS/1.1</span><br><span class="line">X-UA-Compatible: IE=Edge,chrome=1</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;302 Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;302 Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;65d90fa34a5e777be72b3e20c859c335f9198cc2</span><br><span class="line">Time : Thu Mar 15 16:20:59 CST 2018&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>当然因为访问的是http，302是临时重定向（另外，几乎没见过谁返回301的，301的结果会被浏览器缓存），注意上面返回了Location字段，所以是符合规范的</p><p>server这边普遍用的是netty，正好netty的官网上也有相关的教程.<br><a href="https://netty.io/4.1/xref/overview-summary.html">netty的example非常多，http2,cors,upload等等都有</a></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><a href="https://github.com/Haldir65/Jimmy/blob/rm/basics/simpleHttpServer/httpServer.py">我自己抄来的简易版</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## server </span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> codecs,logging</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">sock.bind((HOST, <span class="number">18004</span>))</span><br><span class="line">sock.listen(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># infinite loop</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># maximum number of requests waiting</span></span><br><span class="line">    conn, addr = sock.accept()</span><br><span class="line">    request = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> isinstance(request,bytes):</span><br><span class="line">        request = str(request)</span><br><span class="line">        logging.error(request)</span><br><span class="line"></span><br><span class="line">    splited = request.split(<span class="string">' '</span>)    </span><br><span class="line">    <span class="keyword">if</span>(len(splited)&lt;<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    method = request.split(<span class="string">' '</span>)[<span class="number">0</span>]</span><br><span class="line">    src = request.split(<span class="string">' '</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Connect by: '</span>, addr)</span><br><span class="line">    print(<span class="string">'Request is:\n'</span>, request)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># deal wiht GET method</span></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">'GET'</span> <span class="keyword">or</span> method.__contains__(<span class="string">'GET'</span>):</span><br><span class="line">        <span class="keyword">if</span> src == <span class="string">'/index.html'</span>:</span><br><span class="line">            content = index_content</span><br><span class="line">        <span class="keyword">elif</span> src == <span class="string">'/image/image_12.jpg'</span>:</span><br><span class="line">            content = pic_content</span><br><span class="line">        <span class="keyword">elif</span> src == <span class="string">'/reg.html'</span>:</span><br><span class="line">            content = reg_content</span><br><span class="line">        <span class="keyword">elif</span> re.match(<span class="string">'^/\?.*$'</span>, src):</span><br><span class="line">            entry = src.split(<span class="string">'?'</span>)[<span class="number">1</span>]  <span class="comment"># main content of the request</span></span><br><span class="line">            content = <span class="string">'HTTP/1.x 200 ok\r\nContent-Type: text/html\r\n\r\n'</span></span><br><span class="line">            content += entry</span><br><span class="line">            content += <span class="string">'&lt;br /&gt;&lt;font color="green" size="7"&gt;register successs!&lt;/p&gt;'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># deal with POST method</span></span><br><span class="line">    <span class="keyword">elif</span> method == <span class="string">'POST'</span>:</span><br><span class="line">        form = request.split(<span class="string">'\r\n'</span>)</span><br><span class="line">        entry = form[<span class="number">-1</span>]  <span class="comment"># main content of the request</span></span><br><span class="line">        content = <span class="string">'HTTP/1.x 200 ok\r\nContent-Type: text/html\r\n\r\n'</span></span><br><span class="line">        content += entry</span><br><span class="line">        content += <span class="string">'&lt;br /&gt;&lt;font color="green" size="7"&gt;register successs!&lt;/p&gt;'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">######</span></span><br><span class="line">    <span class="comment"># More operations, such as put the form into database</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="comment">######</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span>(type(content) <span class="keyword">is</span> str):</span><br><span class="line">        content = content.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    conn.sendall(content)</span><br><span class="line">    <span class="comment"># close connection</span></span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure></p><p>本地浏览器访问localhost:10086应该就能看到结果了，值得一提的是自己在chrome里面访问”<a href="http://localhost:18004/index.html&quot;这个地址的时候，事实上浏览器发送的数据是这样的">http://localhost:18004/index.html&quot;这个地址的时候，事实上浏览器发送的数据是这样的</a></p><blockquote><p>b’GET /index.html HTTP/1.1\r\nHost: localhost:18004\r\nConnection: keep-alive\r\nCache-Control: max-age=0\r\nUpgrade-Insecure-Requests: 1\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\r\nDNT: 1\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8\r\nAccept-Encoding: gzip, deflate, br\r\nAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7\r\nCookie: _ga=GA1.1.dsadsa.dsadas; _gid=GA1.1.dsadsa.dsadasda\r\n\r\n’</p></blockquote><p>对了，浏览器默认会请求favicon，所以在服务器这边看到了另一个请求</p><blockquote><p>b’GET /favicon.ico HTTP/1.1\r\nHost: localhost:18004\r\nConnection: keep-alive\r\nPragma: no-cache\r\nCache-Control: no-cache\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\r\nDNT: 1\r\nAccept: image/webp,image/apng,image/<em>,</em>/*;q=0.8\r\nReferer: <a href="http://localhost:18004/index.html\r\nAccept-Encoding">http://localhost:18004/index.html\r\nAccept-Encoding</a>: gzip, deflate, br\r\nAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7\r\nCookie: _ga=GA1.1.dsadsa.dsadas; _gid=GA1.1.dsadsa.dsadasda\r\n\r\n’</p></blockquote><p>平时用的都是<a href="https://github.com/requests/requests/">requests</a>这个库,不过自己写也还是很简单<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 导入socket库:</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个socket:</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># 建立连接:</span></span><br><span class="line">s.connect((<span class="string">'www.sina.com.cn'</span>, <span class="number">80</span>))</span><br><span class="line">s.send(<span class="string">b'GET / HTTP/1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n'</span>)</span><br><span class="line"><span class="comment"># 接收数据:</span></span><br><span class="line">buffer = []</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 每次最多接收1k字节:</span></span><br><span class="line">    d = s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">if</span> d:</span><br><span class="line">        buffer.append(d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">data = <span class="string">b''</span>.join(buffer)</span><br><span class="line"></span><br><span class="line">s.close()</span><br><span class="line">header, html = data.split(<span class="string">b'\r\n\r\n'</span>, <span class="number">1</span>)</span><br><span class="line">print(header.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment"># 把接收的数据写入文件:</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'sina.html'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html)</span><br></pre></td></tr></table></figure></p><p>上述代码，server和client都不能很好的处理并发或者利用多进程</p><p><a href="https://realpython.com/python-sockets/">高阶版</a></p><h2 id="C语言版本"><a href="#C语言版本" class="headerlink" title="C语言版本"></a>C语言版本</h2><p>C语言的应该最接近底层,C语言实现HTTP的GET和POST请求<br><a href="http://pminkov.github.io/blog/socket-programming-in-linux.html">似乎有很多现成的例子可以直接拿来抄</a></p><p>一个简单的httpServer.c(unix环境下运行)<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt; // socket</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  // 基本数据类型</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt; // read write</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt; // open close</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 8888</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERV <span class="meta-string">"0.0.0.0"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFF_SIZE 1024</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">doc_type</span>&#123;</span></span><br><span class="line">        <span class="keyword">char</span> *key;</span><br><span class="line">        <span class="keyword">char</span> *value;</span><br><span class="line">&#125;HTTP_CONTENT_TYPE;</span><br><span class="line"></span><br><span class="line">HTTP_CONTENT_TYPE http_content_type[] = &#123;</span><br><span class="line">        &#123; <span class="string">"html"</span>,<span class="string">"text/html"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"gif"</span> ,<span class="string">"image/gif"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"jpeg"</span>,<span class="string">"image/jpeg"</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sockfd;</span><br><span class="line"><span class="keyword">char</span> *http_res_tmpl = <span class="string">"HTTP/1.1 200 OK\r\n"</span></span><br><span class="line">        <span class="string">"Server: Cleey's Server V1.0\r\n"</span></span><br><span class="line">    <span class="string">"Accept-Ranges: bytes\r\n"</span></span><br><span class="line">        <span class="string">"Content-Length: %d\r\n"</span></span><br><span class="line">        <span class="string">"Connection: close\r\n"</span></span><br><span class="line">        <span class="string">"Content-Type: %s\r\n\r\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_signal</span><span class="params">(<span class="keyword">int</span> sign)</span></span>; <span class="comment">// 退出信号处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_send</span><span class="params">(<span class="keyword">int</span> sock,<span class="keyword">char</span> *content)</span></span>; <span class="comment">// http 发送相应报文</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">joinString</span><span class="params">(<span class="keyword">char</span> *s1, <span class="keyword">char</span> *s2)</span></span>;<span class="comment">//字符串拼接</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[ ])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        signal(SIGINT,handle_signal);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// 计数</span></span><br><span class="line">        <span class="comment">// 定义 socket</span></span><br><span class="line">        sockfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 定义 sockaddr_in</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">skaddr</span>;</span></span><br><span class="line">        skaddr.sin_family = AF_INET; <span class="comment">// ipv4</span></span><br><span class="line">        skaddr.sin_port   = htons(PORT);</span><br><span class="line">        skaddr.sin_addr.s_addr = inet_addr(SERV);</span><br><span class="line">        <span class="comment">// bind，绑定 socket 和 sockaddr_in</span></span><br><span class="line">        <span class="keyword">if</span>( bind(sockfd,(struct sockaddr *)&amp;skaddr,<span class="keyword">sizeof</span>(skaddr)) == <span class="number">-1</span> )&#123;</span><br><span class="line">                perror(<span class="string">"bind error"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// listen，开始添加端口</span></span><br><span class="line">        <span class="keyword">if</span>( listen(sockfd,QUEUE) == <span class="number">-1</span> )&#123;</span><br><span class="line">                perror(<span class="string">"listen error"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户端信息</span></span><br><span class="line">        <span class="keyword">char</span> buff[BUFF_SIZE];</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">claddr</span>;</span></span><br><span class="line">        <span class="keyword">socklen_t</span> length = <span class="keyword">sizeof</span>(claddr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> sock_client = accept(sockfd,(struct sockaddr *)&amp;claddr, &amp;length);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,++count);</span><br><span class="line">                <span class="keyword">if</span>( sock_client &lt;<span class="number">0</span> )&#123;</span><br><span class="line">                        perror(<span class="string">"accept error"</span>);</span><br><span class="line">                        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">memset</span>(buff,<span class="number">0</span>,<span class="keyword">sizeof</span>(buff));</span><br><span class="line">                <span class="keyword">int</span> len = recv(sock_client,buff,<span class="keyword">sizeof</span>(buff),<span class="number">0</span>);</span><br><span class="line">                <span class="built_in">fputs</span>(buff,<span class="built_in">stdout</span>);</span><br><span class="line">                <span class="comment">//send(sock_client,buff,len,0);</span></span><br><span class="line">                <span class="keyword">char</span> *re = joinString(<span class="string">"&lt;h2&gt;the client said&lt;/h2&gt; &lt;br&gt;  "</span>,buff);</span><br><span class="line">                http_send(sock_client,re);</span><br><span class="line">                close(sock_client);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"Bye Cleey"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">        close(sockfd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">http_send</span><span class="params">(<span class="keyword">int</span> sock_client,<span class="keyword">char</span> *content)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> HTTP_HEADER[BUFF_SIZE],HTTP_INFO[BUFF_SIZE];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(content);</span><br><span class="line">        <span class="built_in">sprintf</span>(HTTP_HEADER,http_res_tmpl,len,<span class="string">"text/html"</span>);</span><br><span class="line">        len = <span class="built_in">sprintf</span>(HTTP_INFO,<span class="string">"%s%s"</span>,HTTP_HEADER,content);</span><br><span class="line"></span><br><span class="line">        send(sock_client,HTTP_INFO,len,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_signal</span><span class="params">(<span class="keyword">int</span> sign)</span></span>&#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"\nSIGNAL INTERRUPT \nBye Cleey! \nSAFE EXIT\n"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">        close(sockfd);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">joinString</span><span class="params">(<span class="keyword">char</span> *s1, <span class="keyword">char</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *result = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(s1)+<span class="built_in">strlen</span>(s2)+<span class="number">1</span>);<span class="comment">//+1 for the zero-terminator</span></span><br><span class="line">    <span class="comment">//in real code you would check for errors in malloc here</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">NULL</span>) <span class="built_in">exit</span> (<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">strcpy</span>(result, s1);</span><br><span class="line">    <span class="built_in">strcat</span>(result, s2);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用方式:</p><blockquote><p>curl -X GET -d  –header “Content-Type:application/json” –header “Authorization:JWT somerandomjwtstringandstuffs” “<a href="http://127.0.0.1:8888/user">http://127.0.0.1:8888/user</a>“</p></blockquote><p>一个类似于简易的curl的c语言httpClient可能长这样<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ip_by_domain</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *domain, <span class="keyword">char</span> *ip)</span></span>; <span class="comment">// 根据域名获取ip</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc!=<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input host name %s ipn"</span>,argv[<span class="number">0</span>]); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> * host = argv[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sockfd;</span><br><span class="line"><span class="keyword">int</span> len; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span> </span><br><span class="line"><span class="keyword">int</span> result; </span><br><span class="line"><span class="keyword">char</span> httpstring[<span class="number">1000</span>]; </span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * server_ip[<span class="number">100</span>];</span><br><span class="line">get_ip_by_domain(host,server_ip);</span><br><span class="line"><span class="built_in">strcat</span>(httpstring,<span class="string">"GET / HTTP/1.1\r\n"</span>);</span><br><span class="line"><span class="built_in">strcat</span>(httpstring,<span class="string">"Host: "</span>);</span><br><span class="line"><span class="built_in">strcat</span>(httpstring,host);</span><br><span class="line"><span class="built_in">strcat</span>(httpstring,<span class="string">"\r\n"</span>);</span><br><span class="line"><span class="built_in">strcat</span>(httpstring,</span><br><span class="line"><span class="string">"Connection: keep-alive\r\n"</span></span><br><span class="line"><span class="string">"Cache-Control: max-age=0\r\n"</span></span><br><span class="line"><span class="string">"Upgrade-Insecure-Requests: 1\r\n"</span></span><br><span class="line"><span class="string">"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.67 Safari/537.36\r\n"</span></span><br><span class="line"><span class="string">"DNT: 1\r\n"</span></span><br><span class="line"><span class="string">"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\n"</span></span><br><span class="line"><span class="string">"Accept-Encoding: gzip, deflate, br\r\n"</span></span><br><span class="line"><span class="string">"Accept-Language: zh-CN,zh;q=0.9\r\n\r\n"</span>); </span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">sockfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>); </span><br><span class="line">address.sin_family = AF_INET; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the server host is %s and the ip is %s\n"</span>,argv[<span class="number">1</span>],server_ip);</span><br><span class="line">address.sin_addr.s_addr = inet_addr(server_ip); </span><br><span class="line">address.sin_port = htons(<span class="number">80</span>); </span><br><span class="line">len = <span class="keyword">sizeof</span>(address);</span><br><span class="line">result = connect(sockfd,(struct sockaddr *)&amp;address,len); </span><br><span class="line"><span class="keyword">if</span>(result == <span class="number">-1</span>)&#123; </span><br><span class="line">    perror(<span class="string">"oops: client connect error"</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"befor connect!!"</span>);</span><br><span class="line">write(sockfd,httpstring,<span class="built_in">strlen</span>(httpstring)); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"after write!!\n"</span>);</span><br><span class="line"><span class="keyword">while</span>(read(sockfd,&amp;ch,<span class="number">1</span>))&#123; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c"</span>, ch); </span><br><span class="line">&#125; </span><br><span class="line">close(sockfd); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"n"</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IP_SIZE16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据域名获取ip</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_ip_by_domain</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *domain, <span class="keyword">char</span> *ip)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> **pptr;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">hptr</span>;</span></span><br><span class="line">    hptr = gethostbyname(domain);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == hptr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"gethostbyname error for host:%s/n"</span>, domain);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pptr = hptr-&gt;h_addr_list ; *pptr != <span class="literal">NULL</span>; pptr++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> != inet_ntop(hptr-&gt;h_addrtype, *pptr, ip, IP_SIZE) )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 只获取第一个 ip</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用方式:</p><blockquote><p>./bin/client www.baidu.com ##这时候，在百度服务器看来，这个程序和普通的浏览器没有区别。试了下主流的网站，都没有什么问题。优酷返回了一大串奇怪的字符串，看了下，应该是content-encoding: gzip了，所以在终端里面看上去乱七八糟的。</p></blockquote><p>上面这段会卡在read里面，因为读到最后一个字节的时候，客户端并不知道是没有更多数据还是网络不好堵住了。需要在每一次读完之后去找那个”\r\n\r\n”的结束标志。</p><p>网络通信显然还要注意一个字节序的问题，简单来讲,java是大端的,c++是跟着平台走的且多数为小端<br><a href="https://blog.csdn.net/windshg/article/details/12956107">c++的服务器和java的客户端之间的通信</a></p><blockquote><p>C/C++语言编写的程序里数据存储顺序是跟编译平台所在的CPU相关的，而现在比较普遍的 x86 处理器是 Little Endian<br>JAVA编写的程序则唯一采用 Big Endian 方式来存储数据</p></blockquote><p>htons();//将short类型的值从主机字节序转换为网络字节序(上面就是把端口号转化一下)<br>inet_addr();//将IP地址字符串转换为long类型的网络字节序（接受一个字符串，返回一个long）<br>gethostbyname();//获得与该域名对应的IP地址<br>inet_ntoa();//将long类型的网络字节序转换成IP地址字符串<br>//这些转换字节序的函数是必须的，因为ip地址，端口这些东西不是应用层处理，而是由路由器这些东西去处理的，后者遵照网络标准使用的是big-endian，所以必须转换字节序。</p><p>读函数read<br>ssize_t read(int fd,void *buf,size_t nbyte)<br>read函数是负责从fd中读取内容.当读成功 时,read返回实际所读的字节数,如果返回的值是0 表示已经读到文件的结束了,小于0表示出现了错误.如果错误为EINTR说明读是由中断引起 的, 如果是ECONNREST表示网络连接出了问题. </p><p>写函数write<br>ssize_t write(int fd, const void*buf,size_t nbytes);<br>write函数将buf中的nbytes字节内容写入文件描述符fd.成功时返回写的字节数.失败时返回-1. 并设置errno变量. 在网络程序中,当我们向套接字文件描述符写时有两可能.<br>1)write的返回值大于0,表示写了部分或者是全部的数据. 这样我们用一个while循环来不停的写入，但是循环过程中的buf参数和nbyte参数得由我们来更新。也就是说，网络写函数是不负责将全部数据写完之后在返回的。<br>2)返回的值小于0,此时出现了错误.我们要根据错误类型来处理.<br>如果错误为EINTR表示在写的时候出现了中断错误.<br>如果为EPIPE表示网络连接出现了问题(对方已经关闭了连接).</p><p>除了read和write之外<br>还有<br>int recv(int sockfd,void <em>buf,int len,int flags)<br>int send(int sockfd,void </em>buf,int len,int flags)<br>这两个函数，功能差不多，只是多了第四个参数</p><ul><li><p>简单版本的参考<br><a href="http://www.cleey.com/blog/single/id/789.html">使用Linux c语言编写简单的web服务器</a><br><a href="http://www.voidcn.com/article/p-xieequox-bat.html">socket http文件下载器c语言实现</a></p></li><li><p>高阶版本的参考<br><a href="https://www.geeksforgeeks.org/socket-programming-in-cc-handling-multiple-clients-on-server-without-multi-threading/">高阶一点，处理并发的</a><br><a href="https://github.com/pminkov/webserver">多线程的server和client源码</a></p></li></ul><p><strong>还有实现websocket协议的，实现sock5协议的</strong></p><p>见过的一个websocket的请求长这样<br>GET wss://nexus-websocket-b.xxx.io/pubsub/xxx?X-Nexus-New-Client=true&amp;X-Nexus-Version=0.4.53 HTTP/1.1<br>Host: nexus-websocket-b.xxx.io<br>Connection: Upgrade<br>Pragma: no-cache<br>Cache-Control: no-cache<br>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3538.77 Safari/537.36<br>Upgrade: websocket<br>Origin: <a href="https://app.xxx.io">https://app.xxx.io</a><br>Sec-WebSocket-Version: 13<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9<br>Sec-WebSocket-Key: xaxsasdasdas==<br>Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits</p><p>Response长这样<br>HTTP/1.1 101 Switching Protocols<br>Date: Thu, 25 Oct 2018 06:07:10 GMT<br>Connection: upgrade<br>Upgrade: websocket<br>Sec-WebSocket-Accept: sasasasaD/tA=</p><p>这样也就完成了protocol upgrade的过程</p><ul><li>js并不支持对操作系统socket的直接控制，可能是安全因素(websocket倒是有，不过那是另外一回事了)。</li></ul><p>#include <unistd.h></p><p>ssize_t read(int fd, void *buf, size_t count);<br>read这个函数返回的是读取的byte数，(On success, the number of bytes read is returned (zero indicates end of file), and the file position is advanced by this number;On error, -1 is returned, and errno is set appropriately.  In this case, it is left unspecified whether the file position (if any) changes.)</p><p>如果read的时候一直统计当前总的read到的bytes数，应该是要比content-length长不少的。<br><a href="https://stackoverflow.com/questions/4850241/how-many-bits-in-a-character">那么一个字符到底多少个byte呢</a><br>首先要明白，read出来的东西是byte(是被utf-8编码过的)。几乎所有的语言在接收到之后都要重新解码一下，所以在这里decode一下，用c语言decode怎么弄？</p><ul><li><p>It depends what is the character and what encoding it is in:</p></li><li><p>An ASCII character in 8-bit ASCII encoding is 8 bits (1 byte), though it can fit in 7 bits.</p></li><li><p>An ISO-8895-1 character in ISO-8859-1 encoding is 8 bits (1 byte).</p></li><li><p>A Unicode character in UTF-8 encoding is between 8 bits (1 byte) and 32 bits (4 bytes).</p></li><li><p>A Unicode character in UTF-16 encoding is between 16 (2 bytes) and 32 bits (4 bytes), though most of the common characters take 16 bits. This is the encoding used by Windows internally.</p></li><li><p>A Unicode character in UTF-32 encoding is always 32 bits (4 bytes).</p></li><li><p>An ASCII character in UTF-8 is 8 bits (1 byte), and in UTF-16 - 16 bits.</p></li><li><p>The additional (non-ASCII) characters in ISO-8895-1 (0xA0-0xFF) would take 16 bits in UTF-8 and UTF-16.</p></li></ul><p><a href="https://stackoverflow.com/questions/3996026/what-is-the-default-encoding-for-c-strings">what-is-the-default-encoding-for-c-strings</a> 结论就是c语言的标准并没有规定用什么encoding    </p><blockquote><p>A c string is pretty much just a sequence of bytes. That means, that it does not have a well-defined encoding, it could be ASCII, UTF8 or anything else, for that matter. Because most operating systems understand ASCII by default, and source code is mostly written with ASCII encoding, so the data you will find in a simple (char<em>) will very often be ASCII as well. Nonetheless, there is no guarantee that what you get out of a (char</em>) will be UTF8 or even KOI8.</p></blockquote><p><a href="https://stackoverflow.com/questions/45893641/output-difference-in-c-implementation-of-java-code">java用utf-8,c用了ascii</a></p><p> 用上面的c语言的server发出这样一个字符串<br> “你好啊\r\n”</p><p> python的client每次读取一个字节,然后打印出0101这样的形式<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># 每次最多接收1个字节:</span></span><br><span class="line">    d = s.recv(<span class="number">1</span>)</span><br><span class="line">    t = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> d:</span><br><span class="line">        t+= format(ord(x),<span class="string">'b'</span>)</span><br><span class="line">        print(t)</span><br><span class="line">    <span class="keyword">if</span> d:</span><br><span class="line">        buffer.append(d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">data = <span class="string">b''</span>.join(buffer)</span><br><span class="line">print(data);</span><br></pre></td></tr></table></figure></p><p>//在python的socket client这边接收到了<br>11100100<br>10111101<br>10100000<br>11100101<br>10100101<br>10111101<br>11100101<br>10010101<br>10001010</p><p> b’\xe4’<br> b’\xbd’<br> b’\xa0’<br> b’\xe5’<br> b’\xa5’<br> b’\xbd’<br> b’\xe5’<br> b’\x95’<br> b’\x8a’<br> ‘\r’<br> ‘\n’<br> 因为tcp是有序的，所以发送端的字节以什么顺序排列的，接受端就是受到完全一样顺序排列的字节。这里因为网络传输是以字节为单位的。而sizeof(char) = 1 ，但是sizeof(int) = 4, 以上都还只是text-based content，字节序这回事只跟多字节类型的数据有关的比如int,short,long这类数字类型有关，所以基于文本传输的协议当然不存在字节序问题(当然content-length这种数字还是要注意一下的)。</p><p> //在console里面还能够正常的打印出“你好啊”这三个字（包括换行也做了）</p><p>ut-8是变长的<br>Unicode符号范围        | UTF-8编码方式<br>(十六进制)             | （二进制）<br>———————-+———————————————<br>      0 &lt;–&gt; 0x7f     | 0xxxxxxx<br>   0x80 &lt;–&gt; 0x7FF    | 110xxxxx 10xxxxxx<br>  0x800 &lt;–&gt; 0xFFFF   | 1110xxxx 10xxxxxx 10xxxxxx<br>0x10000 &lt;–&gt; 0x10FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</p><p>//来看这三个字的unicode码<br>你 -&gt; u4f60 —–&gt; 转换成二进制就是 0100 1111 0110 0000(位于上表的第三行，也就是三个字节) 把0100 1111 0110 0000塞进1110xxxx 10xxxxxx 10xxxxxx的xxx里面<br>得到11100100 10111101 10100000（E4 BD A0）<br>好 -&gt; u597d —–&gt; 同上，不再赘述<br>啊 -&gt; u554a —–&gt; 同上，不再赘述</p><p>在浏览器console里面输入<br>encodeURI(‘你好啊’)<br>“%E4%BD%A0%E5%A5%BD%E5%95%8A” //是不是和python那边收到的东西很像</p><p>所以，c语言这边关键函数<br>send(sock_client,”你好啊”,len,0);<br>看上去是发送了6个字节(每个汉字unicode两个字节)，实际上send调用下层在发送出去的时候回把这个6个字节的数据分散在9个字节长度的utf-8 byte array上。<br>可以认为发送6个字节，耗费9个字节的流量(如果发送的全部是ascii字符就不会这么浪费了，但其实utf-8已经很节省了)</p><p><strong>结论就是utf-8 encode的工作是底层根据locale做的，跟application无关。</strong></p><p>//<a href="http://docs.linuxtone.org/ebooks/C&amp;CPP/c/apas03.html">libc只是当作以0结尾的字符串原封不动地write给内核，识别汉字的工作是由终端的驱动程序做的。</a>也就是基于当前的locale<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"你好\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述程序源文件是以UTF-8编码存储的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ od -tc nihao.c </span><br><span class="line">0000000   #   i   n   c   l   u   d   e       &lt;   s   t   d   i   o   .</span><br><span class="line">0000020   h   &gt;  \n  \n   i   n   t       m   a   i   n   (   v   o   i</span><br><span class="line">0000040   d   )  \n   &#123;  \n  \t   p   r   i   n   t   f   (   &quot; 344 275</span><br><span class="line">0000060 240 345 245 275   \   n   &quot;   )   ;  \n  \t   r   e   t   u   r</span><br><span class="line">0000100   n       0   ;  \n   &#125;  \n</span><br><span class="line">0000107</span><br></pre></td></tr></table></figure></p><blockquote><p>其中八进制的344 375 240（十六进制e4 bd a0）就是“你”的UTF-8编码，八进制的345 245 275（十六进制e5 a5 bd）就是“好”。把它编译成目标文件，”你好\n”这个字符串就成了这样一串字节：e4 bd a0 e5 a5 bd 0a 00，汉字在其中仍然是UTF-8编码的，一个汉字占3个字节，这种字符在C语言中称为多字节字符（Multibyte Character）。运行这个程序相当于把这一串字节write到当前终端的设备文件。如果当前终端的驱动程序能够识别UTF-8编码就能打印出汉字，如果当前终端的驱动程序不能识别UTF-8编码（比如一般的字符终端）就打印不出汉字。也就是说，像这种程序，识别汉字的工作既不是由C编译器做的也不是由libc做的，C编译器原封不动地把源文件中的UTF-8编码复制到目标文件中，libc只是当作以0结尾的字符串原封不动地write给内核，识别汉字的工作是由终端的驱动程序做的。</p></blockquote><p><a href="https://www.cprogramming.com/tutorial/unicode.html">Unicode in C and C++: What You Can Do About It Today</a></p><p>##不知道为什么,百度首页的response中没有content-length字段<br>read from socket , and write it to local file ,how about that?</p><h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p>** <a href="https://github.com/gwuhaolin/lightsocks">sock5协议的解释</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/sun_rise_dim_grass.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;收集几种语言中使用socket实现httpServer和httpClient的主要步骤&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>CoordiantorLayout及滑动原理解析</title>
    <link href="https://haldir65.github.io/2018/09/24/2018-09-24-mastering-scrolling-techniques/"/>
    <id>https://haldir65.github.io/2018/09/24/2018-09-24-mastering-scrolling-techniques/</id>
    <published>2018-09-24T19:35:11.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p>在Android平台上，掌握滑动事件是一件让人头疼的事情。<br><img src="https://www.haldir66.ga/static/imgs/1513521623756.jpg" alt=""></p><a id="more"></a><h3 id="1-关于CoordinateLayout里面的东西（针对supportLibrary27-1-0代码）"><a href="#1-关于CoordinateLayout里面的东西（针对supportLibrary27-1-0代码）" class="headerlink" title="1.关于CoordinateLayout里面的东西（针对supportLibrary27.1.0代码）"></a>1.关于CoordinateLayout里面的东西（针对supportLibrary27.1.0代码）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">       &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways|snap"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TabLayout</span></span></span><br><span class="line"><span class="tag">           /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>剔除一些无关的属性后，可以观察到:<br>app:layout_scrollFlags是写给AppBarLayout看的<br>app:layout_behavior是写给CoordinatorLayout看的</p><p>app:layout_scrollFlags = scroll的时候，手指上滑下滑，加了flag的View只会在外层的ScrollingView(这里就是ViewPager了)滑动到头了才开始滑动</p><p>app:layout_scrollFlags = scroll|enterAlways的时候，手指上下滑动时，加了flag的view会立刻响应（还不等外部的ScrollingView滑到头就开始滑动，当然这里没有动画，手指慢慢的挪的话，可以让它停在一半的位置）。可以理解为手指上下滑动时，只要加了flag的view会优先消费完滑动距离</p><p>app:layout_scrollFlags = scroll|enterAlways|snap的时候，就加上动画了（手指往下拖，把toolbar拖出来不到一半的时候它会缩回去，超出一半的时候会动画弹出来）<br>这段动画的代码在AppBarLayout.Behavior的onStopNestedScroll方法里面判断了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((flags &amp; LayoutParams.FLAG_SNAP) == LayoutParams.FLAG_SNAP) &#123;<span class="comment">//所以flag这个东西其实是AppbarLayout.LayoutParams的一个属性。可以进行位运算操作</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    animateOffsetTo(coordinatorLayout, abl,</span><br><span class="line">                            MathUtils.clamp(newOffset, -abl.getTotalScrollRange(), <span class="number">0</span>), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//那个snap的动画长这样</span></span><br><span class="line"><span class="keyword">if</span> (mOffsetAnimator == <span class="keyword">null</span>) &#123;</span><br><span class="line">    mOffsetAnimator = <span class="keyword">new</span> ValueAnimator();</span><br><span class="line">    mOffsetAnimator.setInterpolator(AnimationUtils.DECELERATE_INTERPOLATOR);</span><br><span class="line">    mOffsetAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</span><br><span class="line">            setHeaderTopBottomOffset(coordinatorLayout, child,</span><br><span class="line">                    (<span class="keyword">int</span>) animation.getAnimatedValue()); <span class="comment">//做动画的过程中调用AppbarLayout(其实就是一个LinearLayout)的offsetTopAndBottom方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mOffsetAnimator.cancel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mOffsetAnimator.setDuration(Math.min(duration, MAX_OFFSET_ANIMATION_DURATION));</span><br><span class="line">mOffsetAnimator.setIntValues(currentOffset, offset);</span><br><span class="line">mOffsetAnimator.start();</span><br></pre></td></tr></table></figure></p><p>在Cheesequare的首页，RecyclerView准备滑动(ActionMove)还没滑动时调用了<br>RecyclerView.dispatchNestedPreScroll -&gt; CoordinateLayout.onNestedPreScroll -&gt;<br>AppbarLayout.Beahvior.onNestedPreScroll -&gt;AppbarLayout.offsetTopAndBottom</p><p>在RecyclerView的scrollByInternal里面调用了RecyclerView.dispatchNestedScroll -&gt;<br>CoordinateLayout.onNestedScroll -&gt;CoordinatorLayout.onChildViewChanged -&gt; AppbarLayoutBehavior.onDependentViewChanged -&gt;AppbarLayout.onNestedScroll -&gt; AppbarLayout.Behavior.onNestedScroll</p><p>RecyclerView(Action_UP)的时候调用顺序:<br>RecyclerView.stopNestedScroll(这个其实不是让RecyclerView停下来，而是告诉parent应该停下来了)<br>CoordinateLayout.onStopNestedScroll<br>AppbarLayout.onStopNestedScroll<br>AppbarLayout.Behavior.onStopNestedScroll<br>AppbarLayout.Behavior.snapToChildIfNeeded(就是上面说的如果 scroll|enterAlways|snap都在时候的动画了)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意AppbarLayout是有一个默认的behavior的</span></span><br><span class="line"><span class="meta">@CoordinatorLayout</span>.DefaultBehavior(AppBarLayout.Behavior.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppBarLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在AppbarLayout的语义里，上下滑动的距离用的是offset这个关键字</span></span><br><span class="line"><span class="comment">//这又是一个public static class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在AppBarLayout.Behavior里面有这么一段</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// We depend on any AppBarLayouts</span></span><br><span class="line">    <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> AppBarLayout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, View child,</span></span></span><br><span class="line"><span class="function"><span class="params">        View dependency)</span> </span>&#123;</span><br><span class="line">    offsetChildAsNeeded(parent, child, dependency);<span class="comment">//child就是底部在加了behavior的ViewPager,dependency是AppbarLayout.这里面就是调用了child.offsetTopAndBottom</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从调用顺序来看，是加了behavior的View(底部的ViewPager)滑动时dispatchNestedPreScroll -&gt; CoordinatorLayout.onNestedPreScroll -&gt; CoordinatorLayout会一个个child去查，发现一个behavior不为Null的就会调用onChildViewsChanged-&gt; 这里面还是一个个遍历child(一个个问layoutDependsOn，内部实现是遍历每个child，然后针对每个child，拿着当前加上了behavior的views一个个(mDependencySortedChildren)来问，询问加了behavior的child的behavior，这个child是否感兴趣。。。一旦感兴趣就走onDependentViewChanged)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在cheesequare的主页面，mDependencySortedChildren这个List&lt;View&gt;默认有三个元素AppBarLayout,ViewPager,FloatingActionButton(ViewPager是我们手动加上去的，其他两个都是default配备了behavior的)。由此看来，自己可以写一个behavior，加在CoordinatorLayout的child中，这样就能参与到mDependencySortedChildren这个过程中了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在mDependencySortedChildren中，ViewPager是dependend on AppBarLayout的。也就是说加在ViewPager上的behavior</span></span><br><span class="line"><span class="comment">// :app:layout_behavior="@string/appbar_scrolling_view_behavior"  这玩意其实写在AppbarLayout中</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollingViewBehavior</span> <span class="keyword">extends</span> <span class="title">HeaderScrollingViewBehavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//调用顺序</span></span><br><span class="line"> RecyclerView.onTouchEvent(ACTION_MOVE)</span><br><span class="line"> RecyclerView.dispatchNestedPreScroll()</span><br><span class="line"> NestedScrollChildHelper.dispatchNestedPreScroll()</span><br><span class="line">CoordinatorLayout.onNestedPreScroll(View 那个RecyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span>[] consumed, <span class="keyword">int</span>  type)<span class="comment">//这里面一个个遍历child找加上了behavior的，调用behavior的onNestedPreScroll</span></span><br><span class="line">CoordinatorLayout.onChildViewsChanged(EVENT_NESTED_SCROLL)<span class="comment">//这里面就是一个个遍历child，拿着child去问加了bahavior的view“这是你想要的吗”，如果是肯定答复，会走到onDependentViewChanged（CoordinatorLayout,View 加了behavior的view,View behavior感兴趣的View）.所以多数的实现都可以在这里动手。又因为加了bahavior的view事实上是一个list，事实上可以随便加任意多个带behavior的view。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://github.com/saulmm/CoordinatorBehaviorExample中的实现如下。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, CircleImageView child, View dependency)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> Toolbar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, CircleImageView child, View dependency)</span> </span>&#123;</span><br><span class="line">    maybeInitProperties(child, dependency);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> maxScrollDistance = (<span class="keyword">int</span>) (mStartToolbarPosition);</span><br><span class="line">    <span class="keyword">float</span> expandedPercentageFactor = dependency.getY() / maxScrollDistance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (expandedPercentageFactor &lt; mChangeBehaviorPoint) &#123;</span><br><span class="line">        <span class="keyword">float</span> heightFactor = (mChangeBehaviorPoint - expandedPercentageFactor) / mChangeBehaviorPoint;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> distanceXToSubtract = ((mStartXPosition - mFinalXPosition)</span><br><span class="line">                * heightFactor) + (child.getHeight()/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">float</span> distanceYToSubtract = ((mStartYPosition - mFinalYPosition)</span><br><span class="line">                * (<span class="number">1f</span> - expandedPercentageFactor)) + (child.getHeight()/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        child.setX(mStartXPosition - distanceXToSubtract);</span><br><span class="line">        child.setY(mStartYPosition - distanceYToSubtract);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> heightToSubtract = ((mStartHeight - mCustomFinalHeight) * heightFactor);</span><br><span class="line"></span><br><span class="line">        CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) child.getLayoutParams();</span><br><span class="line">        lp.width = (<span class="keyword">int</span>) (mStartHeight - heightToSubtract);</span><br><span class="line">        lp.height = (<span class="keyword">int</span>) (mStartHeight - heightToSubtract);</span><br><span class="line">        child.setLayoutParams(lp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">float</span> distanceYToSubtract = ((mStartYPosition - mFinalYPosition)</span><br><span class="line">                * (<span class="number">1f</span> - expandedPercentageFactor)) + (mStartHeight/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        child.setX(mStartXPosition - child.getWidth()/<span class="number">2</span>);</span><br><span class="line">        child.setY(mStartYPosition - distanceYToSubtract);</span><br><span class="line"></span><br><span class="line">        CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) child.getLayoutParams();</span><br><span class="line">        lp.width = (<span class="keyword">int</span>) (mStartHeight);</span><br><span class="line">        lp.height = (<span class="keyword">int</span>) (mStartHeight);</span><br><span class="line">        child.setLayoutParams(lp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述一个个询问加了behavior的child的过程其实叫做onChildViewChanged(EVENT_NESTED_SCROLL),该方法会在<br>CoordinatorLayout的onNestedFling,onNestedPreScroll,onNestedScroll,onChildViewRemoved,onPreDraw中都会调用到。<br>所以在这里相应滑动是足够的。上述例子里面就是在onDependentViewChanged中获取当前target的getY，对此作出textView的缩放。</p><p>接下来看一大堆接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NestedScrollingParent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(@NonNull View child, @NonNull View target, @ScrollAxis <span class="keyword">int</span> axes)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNestedScrollAccepted</span><span class="params">(@NonNull View child, @NonNull View target, @ScrollAxis <span class="keyword">int</span> axes)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStopNestedScroll</span><span class="params">(@NonNull View target)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(@NonNull View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(@NonNull View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, @NonNull <span class="keyword">int</span>[] consumed)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">onNestedFling</span><span class="params">(@NonNull View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY, <span class="keyword">boolean</span> consumed)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">onNestedPreFling</span><span class="params">(@NonNull View target, <span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getNestedScrollAxes</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NestedScrollingParent2</span> <span class="keyword">extends</span> <span class="title">NestedScrollingParent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(@NonNull View child, @NonNull View target, @ScrollAxis <span class="keyword">int</span> axes,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NestedScrollType <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNestedScrollAccepted</span><span class="params">(@NonNull View child, @NonNull View target, @ScrollAxis <span class="keyword">int</span> axes,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NestedScrollType <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStopNestedScroll</span><span class="params">(@NonNull View target, @NestedScrollType <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(@NonNull View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed, @NestedScrollType <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNestedPreScroll</span><span class="params">(@NonNull View target, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, @NonNull <span class="keyword">int</span>[] consumed,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NestedScrollType <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 似乎就是添加了一个NestedScrollType</span></span><br><span class="line"><span class="meta">@IntDef</span>(&#123;TYPE_TOUCH, TYPE_NON_TOUCH&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="meta">@RestrictTo</span>(LIBRARY_GROUP)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NestedScrollType &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NestedScrollingChild</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNestedScrollingEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNestedScrollingEnabled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">startNestedScroll</span><span class="params">(@ScrollAxis <span class="keyword">int</span> axes)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stopNestedScroll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNestedScrollingParent</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchNestedScroll</span><span class="params">(<span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed, @Nullable <span class="keyword">int</span>[] offsetInWindow)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchNestedPreScroll</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy, @Nullable <span class="keyword">int</span>[] consumed,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable <span class="keyword">int</span>[] offsetInWindow)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchNestedFling</span><span class="params">(<span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY, <span class="keyword">boolean</span> consumed)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchNestedPreFling</span><span class="params">(<span class="keyword">float</span> velocityX, <span class="keyword">float</span> velocityY)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NestedScrollingChild2</span> <span class="keyword">extends</span> <span class="title">NestedScrollingChild</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">startNestedScroll</span><span class="params">(@ScrollAxis <span class="keyword">int</span> axes, @NestedScrollType <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stopNestedScroll</span><span class="params">(@NestedScrollType <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNestedScrollingParent</span><span class="params">(@NestedScrollType <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchNestedScroll</span><span class="params">(<span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed, @Nullable <span class="keyword">int</span>[] offsetInWindow,</span></span></span><br><span class="line"><span class="function"><span class="params">            @NestedScrollType <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchNestedPreScroll</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy, @Nullable <span class="keyword">int</span>[] consumed,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Nullable <span class="keyword">int</span>[] offsetInWindow, @NestedScrollType <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//似乎也只是加了一个NestedScrollType，2是1的子类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//看一下继承关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwipeRefreshLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> <span class="keyword">implements</span> <span class="title">NestedScrollingParent</span>,</span></span><br><span class="line"><span class="class">        <span class="title">NestedScrollingChild</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NestedScrollView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> <span class="keyword">implements</span> <span class="title">NestedScrollingParent</span>,</span></span><br><span class="line"><span class="class">        <span class="title">NestedScrollingChild2</span>, <span class="title">ScrollingView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerView</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> <span class="keyword">implements</span> <span class="title">ScrollingView</span>, <span class="title">NestedScrollingChild2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;     </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoordinatorLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> <span class="keyword">implements</span> <span class="title">NestedScrollingParent2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="http://saulmm.github.io/mastering-coordinator">关于CoordinatorLayout的比较好的教程</a></p><h3 id="SwipeRefreshLayout里面有一个OnChildScrollUpCallback用于决定是否可以拦截实践，比setEnabled要好很多"><a href="#SwipeRefreshLayout里面有一个OnChildScrollUpCallback用于决定是否可以拦截实践，比setEnabled要好很多" class="headerlink" title="SwipeRefreshLayout里面有一个OnChildScrollUpCallback用于决定是否可以拦截实践，比setEnabled要好很多"></a>SwipeRefreshLayout里面有一个OnChildScrollUpCallback用于决定是否可以拦截实践，比setEnabled要好很多</h3><p>CoordinateLayout inside SwipeRefreshLayout的问题似乎可以从这里去解决</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android平台上，掌握滑动事件是一件让人头疼的事情。&lt;br&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/1513521623756.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Vim常用命令指南</title>
    <link href="https://haldir65.github.io/2018/08/26/2018-08-26-vim-the-editor/"/>
    <id>https://haldir65.github.io/2018/08/26/2018-08-26-vim-the-editor/</id>
    <published>2018-08-26T22:49:00.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.haldir66.ga/static/imgs/food_truck_hotdog_night_city.jpg" alt=""><br><a id="more"></a></p><p>首先是一些加快terminal 中操作的命令，跟vim没什么关系</p><p>在bash中，几个比较方便的快捷键(zsh可能不一样)<br>sudo !! - re-run previous command with ‘sudo’ prepended ##敲命令忘记加sudo了，直接sudo!!，把上一个命令加上sudo执行一遍</p><p>ctrl-k（剪切掉光标之后的文字）<br>ctrl-y(把ctrl k剪切的文字粘贴上来)<br>ctrl-u(清空当前行)<br>ctrl-w(remove word by word)</p><p>use ‘less +F’ to view logfiles, instead of ‘tail’ (ctrl-c, shift-f, q to quit)<br>ctrl-x-e - continue editing your current shell line in a text editor (uses $EDITOR)<br>alt-. - paste previous command’s argument (useful for running multiple commands on the same resource)</p><p>在当前目录下查找”python”这几个字符</p><blockquote><p>grep -ni “python” * //如果要递归，就是碰到子文件夹就往下找</p></blockquote><p>这个命令好在能够显示在哪个文件的哪一行找到的</p><p>接下来是vim常用的一些</p><h3 id="首先是command-mode下的"><a href="#首先是command-mode下的" class="headerlink" title="首先是command mode下的"></a>首先是command mode下的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    k</span><br><span class="line">h       l</span><br><span class="line">    j</span><br></pre></td></tr></table></figure><p>挪到屏幕头部: H 挪到文件头部是gg<br>挪动光标到屏幕底部: L 挪到文件底部是G</p><p>走到第5行： 5G</p><p>复制当前行: yy<br>复制2行： 2yy<br>刚才复制的东西要粘贴: p(光标后粘贴)，P(光标前粘贴)<br>复制当前单词: yw</p><p>剪切当前行: dd<br>剪切2行: 2dd<br>剪切当前单词: dw</p><p>从光标位置到行末尾全部剪切：D(D$也行)</p><p>撤销刚才的操作(undo): u</p><p>visual mode<br>进入visual mode之后就可以大段的复制粘贴了</p><p>还可以全文搜索<br>按一个/（斜杠就可以了），好像按n时往下查找下一个匹配结果</p><p>格式化整个文件<br>gg=G //这其实是三个命令,gg是到达文档开始,=是要求缩进，G是到达文档最后一行</p><p><a href="https://vim.rtorr.com/">vim cheat sheet</a><br><a href="https://www.youtube.com/watch?v=Nim4_f5QUxA">youtube上一个比较好的关于vim的视频</a><br><a href="http://www.pchou.info/linux/2016/11/10/vim-skill.html">练上一年再来总结的vim使用技巧</a></p><p>很多人都会有一个vimrc文件备份在github上，那么vimrc是什么，该怎么写</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/food_truck_hotdog_night_city.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习手册</title>
    <link href="https://haldir65.github.io/2018/07/29/2018-07-29-Learn-to-program-with-c/"/>
    <id>https://haldir65.github.io/2018/07/29/2018-07-29-Learn-to-program-with-c/</id>
    <published>2018-07-29T17:47:28.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p>C语言实用指南，暂时不涉及cpp内容<br><img src="https://haldir66.ga/static/imgs/pretty-orange-mushroom-wallpaper-5386b0c8c3459.jpg" alt=""><br><a id="more"></a></p><h2 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h2><p><a href="https://zh.cppreference.com/w/cpp/language/types">C的基本数据类型还是很多的</a> 居然还有unsigned long long int 这种别扭的东西。</p><p><a href="https://dev-notes.eu/2018/08/strings-in-c/">string in c</a><br>char *name = “Bob”; //name指向的位置不能修改了，但是name可以指向别的东西.<br>// the value is stored in a read-only section in the binary file and cannot be modified<br>name[1] = ‘e’; //这么干是不行的，编译是能通过，但运行期会造成undefined behavior，大概率是segment fault</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">You can also define a <span class="built_in">string</span> as a pointer to a <span class="keyword">char</span>, initialised by a <span class="built_in">string</span> literal. In <span class="keyword">this</span> <span class="keyword">case</span>, <span class="built_in">string</span> literals are stored in a read only section of memory <span class="keyword">and</span> are effectively constant. For example:</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *name = <span class="string">"Bob"</span></span><br><span class="line">In <span class="keyword">this</span> <span class="keyword">case</span>, the value is stored in a read-only section in the binary file <span class="keyword">and</span> cannot be modified. If you compile to an assembly file (use the -S compiler option in gcc), you can see the <span class="built_in">string</span> literals in the .rodata section. In <span class="keyword">this</span> context, rodata means “read-only data”.</span><br><span class="line"></span><br><span class="line"><span class="comment">/* main.s */</span></span><br><span class="line">.file<span class="string">"main.c"</span></span><br><span class="line">.section.rodata</span><br><span class="line">.LC0:</span><br><span class="line">.<span class="built_in">string</span><span class="string">"Bob"</span></span><br></pre></td></tr></table></figure><p>// 下面这种用数组形式声明的是可以随便改的<br>char name[] = “Alice”; //存在stack上，随便改<br>name[3] = ‘n’;<br>name[4] = ‘a’;</p><p>在C中，NULL表示的是指向0的指针</p><p>#define NULL    0</p><p>string.h 标准库中定义了空指针，NULL(数值0)<br>在C/C++中，当要给一个字符串添加结束标志时，都应该用‘\0’而不是NULL或0</p><p>‘\0’是一个“空字符”常量，它表示一个字符串的结束，它的ASCII码值为0。注意它与空格’ ‘（ASCII码值为32）及’0’（ASCII码值为48）不一样的。</p><h2 id="2-编译过程的一些解释"><a href="#2-编译过程的一些解释" class="headerlink" title="2. 编译过程的一些解释"></a>2. 编译过程的一些解释</h2><p>C语言程序编译的顺序是<br>source code -&gt; preprocessing -&gt; compilating -&gt; assembling -&gt; linking -&gt; executable file</p><h3 id="1-预处理"><a href="#1-预处理" class="headerlink" title="1. 预处理"></a>1. 预处理</h3><blockquote><p>cat hello_world.c</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXAMPLE <span class="meta-string">"example\n"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(EXAMPLE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>gcc -E hello_world.c | tail -10<br>需要tail以下，因为预处理阶段会把stdio.h中所有代码复制粘贴进来</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">499</span> <span class="string">"/usr/include/stdio.h"</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"># <span class="number">2</span> <span class="string">"hello_world.c"</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"example\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">➜</span><br></pre></td></tr></table></figure><h3 id="2-compiling"><a href="#2-compiling" class="headerlink" title="2.compiling"></a>2.compiling</h3><p>在这一过程中，编译器将c这样的high level language转成assembly code.(直接转成machine code不太现实)，同一份代码在不同的机器上最终变成的machine code可能相差很大<br>Assembly code是human readable的<br>我们可以用-S让编译器走到汇编这一步就打住</p><ul><li>gcc -S hello_world.c</li><li>cat hello_world.s | head -15  </li></ul><p>汇编看起来是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">true.section__TEXT,__text,regular,pure_instructions</span><br><span class="line">true.macosx_version_min 10, 12</span><br><span class="line">true.globl_main</span><br><span class="line">true.p2align4, 0x90</span><br><span class="line">_main:                                  ## @main</span><br><span class="line">true.cfi_startproc</span><br><span class="line">## BB#0:</span><br><span class="line">truepushq%rbp</span><br><span class="line">Lcfi0:</span><br><span class="line">true.cfi_def_cfa_offset 16</span><br><span class="line">Lcfi1:</span><br><span class="line">true.cfi_offset %rbp, -16</span><br><span class="line">truemovq%rsp, %rbp</span><br><span class="line">Lcfi2:</span><br><span class="line">true.cfi_def_cfa_register %rbp</span><br></pre></td></tr></table></figure></p><h3 id="3-接下来是assembling"><a href="#3-接下来是assembling" class="headerlink" title="3. 接下来是assembling"></a>3. 接下来是assembling</h3><p>这一步,编译器把汇编文件转成machine code,也就是cpu可以直接执行的代码。<br>可以使用-c 让编译器在这里打住</p><ul><li>gcc -c hello_world.c</li><li>ls<br>hello_world.c hello_world.o</li><li>cat hello_world.o | head -15 ##尝试用cat去看二进制文件，其实并没有用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">���� �� �__text__TEXT; ��__cstring__TEXT;[__compact_unwind__LDX x�__eh_frame__TEXTx@�</span><br><span class="line">                                                                                     h$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> PUH��H��H�=,�E���H�=%�E��1ɉE��H��]�hello world!</span><br><span class="line">example</span><br><span class="line">;zRx</span><br><span class="line">*- -$h�������;A�C</span><br><span class="line">    _main_printf%</span><br></pre></td></tr></table></figure></li></ul><p>这什么鬼👻</p><ul><li>od -c hello_world.o | head -5<br>0000000  317 372 355 376  \a  \0  \0 001 003  \0  \0  \0 001  \0  \0  \0<br>0000020  004  \0  \0  \0  \0 002  \0  \0  \0      \0  \0  \0  \0  \0  \0<br>0000040  031  \0  \0  \0 210 001  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0<br>0000060   \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0<br>0000100  270  \0  \0  \0  \0  \0  \0  \0     002  \0  \0  \0  \0  \0  \0</li></ul><p>这才像样嘛</p><h3 id="4-linking"><a href="#4-linking" class="headerlink" title="4. linking"></a>4. linking</h3><p>链接是编译的最后一步，这一步编译器将所有的机器码文件(也就是.o文件)合成可执行文件。不需要传什么flag,直接gcc hello_world.c就可以了<br>默认生成的文件名叫做a.out,可以使用-o参数指定生成的文件名。然后./a.out就可以执行了</p><h2 id="3-gcc-clang-llvm的历史"><a href="#3-gcc-clang-llvm的历史" class="headerlink" title="3. gcc ,clang,llvm的历史"></a>3. gcc ,clang,llvm的历史</h2><p>.so文件其实是shared object的缩写</p><h2 id="Makefile怎么写"><a href="#Makefile怎么写" class="headerlink" title="Makefile怎么写"></a>Makefile怎么写</h2><p><a href="http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/">几个简单的makefile实例</a></p><p>// 比方说写了三个文件,main.c,test.c,test.h。这是最简单的例子<br>main: main.c<br>    gcc -o main main.c test.c //ok,没问题了 </p><p><a href="https://www.youtube.com/watch?v=GExnnTaBELk">C Programming: Makefiles</a></p><p>make file automatic rule</p><p><a href="https://www.geeksforgeeks.org/static-vs-dynamic-libraries/">static and dynamic libraries</a></p><p>static library把依赖的library都打包进去了，体积更大<br>dynamic libvrary只是写了依赖的library的名称，运行时需要去操作系统中去找，会慢一些</p><p>static libiray(compile time已完成link，而dynamic library需要在runtime完成link)</p><p>查看archive文件中的内容<br>ar -tv libmylib.a</p><p>nm somebinaryfile ## 查看动态和静态库中的符号表</p><p>ls /usr/lib ## 文件夹中又各种lib,包括so文件和.a文件<br>ls /usr/include # 这里也有一大堆头文件</p><p>clang wacky.c -L. -lwacky -o wacky ## -L. 表示在当前目录下查找后面的libwacky.so或者libwacky.a文件。所以完全可以link 系统中存在的(/usr/lib目录中)的library并compile到program中</p><p>Makefile for bundling static library（每一个chunk叫做recepie）<br>不能用空格，需要用Tab<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">default: wacky</span><br><span class="line"></span><br><span class="line">wacky: libwacky.a  wacky.c</span><br><span class="line">        clang wacky.c -L. -lwacky -o wacky</span><br><span class="line"></span><br><span class="line">libwacky.a: wacky_math.o</span><br><span class="line">        ar -rcv $@ $^</span><br></pre></td></tr></table></figure></p><h3 id="dynamic-library"><a href="#dynamic-library" class="headerlink" title="dynamic library"></a>dynamic library</h3><p>wacky_math.o: wacky_math.c wacky_math.h<br>        clang -c -fPIC wacky_math.c -o $@</p><p>-fPIC使得生成的object file是relocateable的<br>同时还得告诉run time linke如何去找这个so文件</p><p>man ldpath ##  so文件查找目录<br>export LD_LIBRARY_PATH=. ## 添加当前目录为查找路径</p><p>//一般so文件都在/usr/lib或者/usr/local/lib文件夹下面<br>locate sodium.so</p><p>make wacky 也是可以的，可以指定编译target</p><p>在c program中使用其他的library以及如何编译生成可执行文件</p><p>make clean</p><p>clean:<br>    rm -f *.o program_name</p><p>因为手动rm可能写成<br>rm -f * .o 中间多一个空格</p><p><a href="https://www.tutorialspoint.com/makefile/makefile_example.htm">make file examples</a></p><p>经常会看到项目里面的安装指南包括./configure make..<br>GNU的AUTOCONF和AUTOMAKE</p><p>./config &amp;&amp; make &amp;&amp; sudo make install || exit 1</p><p>比如说awk的安装过程是这样的<br>wget <a href="http://ftp.gnu.org/gnu/gawk/gawk-4.1.1.tar.xz">http://ftp.gnu.org/gnu/gawk/gawk-4.1.1.tar.xz</a><br>tar xvf gawk-4.1.1.tar.xz<br>cd gawk-4.1.1 &amp;&amp; ./configure<br>make<br>make check<br>sudo make install</p><p>如何生成一个auto build file<br><a href="https://stackoverflow.com/questions/10999549/how-do-i-create-a-configure-script">auto build configure file</a><br><a href="http://hahaya.github.io/build-libevent/">Linux下安装、配置libevent</a><br><a href="http://hahaya.github.io/hello-in-libevent/">使用libevent输出Hello</a></p><p>如何使用C语言第三方库<br><a href="https://blog.csdn.net/yanxiangtianji/article/details/20474155">以mysql的c库为例</a><br>如果库在 usr/include/ 目录下，那么就用 #include &lt; *.h &gt;。这个目录下面放的都是些头文件</p><p>如果库在当前目录下，就用　#include “mylib.h”</p><p>gcc -v可以查看compile gcc时预设的链接静态库的搜索路径</p><p>默认情况下， GCC在链接时优先使用动态链接库，只有当动态链接库不存在时才考虑使用静态链接库，如果需要的话可以在编译时加上-static选项，强制使用静态链接库。</p><p>从项目结构来看,curl,ffmpeg这些都是一个文件夹里面放了所有的.h和.c文件。似乎没有其他语言的package的观念。我试了下，在Makefile里面带上文件夹的相对路径还是可以的。</p><p><a href="http://ismail.badawi.io/blog/2017/03/28/automatic-directory-creation-in-make/">automatic directory creation in make</a></p><p>scanf方法存在内存溢出的可能性，微软提出了scanf_s函数，需要提供最多允许读取的长度，超出该长度的字符一律忽略掉。<br><a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言</a></p><p><a href="https://www.youtube.com/watch?v=Slgwyta-JkA">windows平台使用visual studio创建C项目</a><br>File -&gt; new Project -&gt;Windows DeskTop Wizard -&gt; 选中Empty Project -&gt; 取消选中Precompile Header<br>然后右侧，source File,右键，new item。创建main.c(任意名字.c都是行的),然后写主函数。<br>运行的话，点上面的local windows debugger是可以的，但是会一闪而过。按下ctrl +F5，会出现console。</p><p>visual studio中断点的step into是f11，step out of 是shift + f11 .step over是f10</p><p>evaluate expression在右下角的immediate window中输入表达式即可</p><p>visual studio中debug的时候有时候会出现Cannot find or open the PDB file<br><a href="https://software.intel.com/en-us/articles/visual-studio-debugger-cannot-find-or-open-the-pdb-file">intel说这种事不是error</a>。所以就不要去管好了。</p><p>在C语言中没有泛型。故采用void 指针来实现泛型的效果。</p><p>这段会core dump的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *s1 = <span class="string">"hello"</span>; ##获得了一个指向字符串常量的指针</span><br><span class="line">*s1 = 'hey'; ##尝试修改常量，会segmentfault</span><br><span class="line">##这段也会core dump</span><br><span class="line"><span class="keyword">char</span>* s1 = <span class="string">"hello"</span>;</span><br><span class="line">s1 += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"content %s\n"</span>,*s1);##崩在这里</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"content %s\n"</span>,s1);##改成这样就好了</span><br></pre></td></tr></table></figure><p>preprocessor的套路一般是这样的<br>awesomeFunction.h<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> AWESOME_FUNCTION</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AWESOME_FUNCTION</span></span><br><span class="line"></span><br><span class="line">## 实际的函数声明</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//AWESOME_FUNCTION</span></span></span><br></pre></td></tr></table></figure></p><p>c语言中不同头文件中的方法名或者外部变量是不能重名的（所以给方法起名字的时候要注意下），除非使用static关键字（只在该源文件内可以使用）  静态变量存放在全局数据区，不是在堆栈上，所以不存在堆栈溢出的问题。生命周期是整个程序的运行期。（static变量只在当前文件中可以使用，一旦退出当前文件的调用，就不可用，但如果运行期间又调用了该文件，那么static变量的值就会是刚才退出的时候的值，而不是default值）<br>设计和调用访问动态全局变量、静态全局变量、静态局部变量的函数时，需要考虑重入问题。<br><a href="https://segmentfault.com/q/1010000002512553/a-1020000002512728">函数名冲突的问题也可以用一个struct封起来</a></p><p><a href="https://renenyffenegger.ch/notes/development/languages/C-C-plus-plus/GCC/create-libraries/index">dlopen和soname</a><br><a href="https://www.jianshu.com/p/46926f2ffef0">c语言const关键字</a>有的时候是说指针指向的对象不能动，有的时候说的是指针指向的值不能动</p><p>size_t 和int差不多，估摸着是跨平台的一种表示。</p><p>autoconf和automake的使用教程</p><p>mac上查看某个library是否install了：</p><blockquote><p>ld -ljson-c ##看下json-c这个library是否已经安装了<br>d: library not found for -ljson-c ##这种就是没有找到</p></blockquote><p>照说一般这种library都是装在/usr/lib 或 /usr/local/lib 下的<br>ls -al /usr/lib | grep libevent<br>ls -al /usr/local/lib | grep libevent<br>试一下就行了</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>c语言就是这样，好多功能都得自己实现</p><blockquote><p>c 语言有它的设计哲学，就是那著名的“Keep It Simple, Stupid”，语言本身仅仅实现最为基本的功能，然后标准库也仅仅带有最为基本的内存管理（更高效一点的内存池都必须要自己实现）、IO、断言等基本功能。 </p></blockquote><p>社区提供了一些比较优秀的通用功能库<br>[1] <a href="http://developer.gnome.org/glib/stable/">http://developer.gnome.org/glib/stable/</a><br>[2] <a href="http://www.gnu.org/software/gnulib/">http://www.gnu.org/software/gnulib/</a><br>[3] <a href="http://apr.apache.org/">http://apr.apache.org/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言实用指南，暂时不涉及cpp内容&lt;br&gt;&lt;img src=&quot;https://haldir66.ga/static/imgs/pretty-orange-mushroom-wallpaper-5386b0c8c3459.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
      <category term="C" scheme="https://haldir65.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>pragmatic-java-chetsheet</title>
    <link href="https://haldir65.github.io/2018/07/05/2018-07-05-pragmatic-java-chetsheet/"/>
    <id>https://haldir65.github.io/2018/07/05/2018-07-05-pragmatic-java-chetsheet/</id>
    <published>2018-07-05T23:05:52.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://haldir66.ga/static/imgs/20160720094529840.jpg" alt=""><br><a id="more"></a></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>如何获得一个class对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Class class1 = <span class="keyword">null</span>;</span><br><span class="line">Class class2 = <span class="keyword">null</span>;</span><br><span class="line">Class class3 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    class1 = Class.forName(<span class="string">"com.example.test.javareflect.ReflectClass"</span>);</span><br><span class="line">    <span class="comment">// java语言中任何一个java对象都有getClass 方法</span></span><br><span class="line">    class2 = <span class="keyword">new</span> ReflectClass().getClass();</span><br><span class="line">    <span class="comment">//java中每个类型都有class 属性</span></span><br><span class="line">    class3 = ReflectClass.class;</span><br><span class="line">    <span class="comment">// 由于class是单例，所以class1 == class2 == class3</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如何检查一个Class中的所有constructor</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.me.reflection._001_basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObject</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObject</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObject</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkInitParams</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Constructor&lt;?&gt; constructor[] = MyObject.class.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructor.length; i++) &#123; <span class="comment">// 运行期这个length是4，如果上面的Object中不手动添加构造函数的话，这个数是1</span></span><br><span class="line">            Class arrayClass[] = constructor[i].getParameterTypes();</span><br><span class="line">            System.out.print(<span class="string">"cons["</span> + i + <span class="string">"] ("</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrayClass.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == arrayClass.length - <span class="number">1</span>)</span><br><span class="line">                    System.out.print(arrayClass[j].getName());</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    System.out.print(arrayClass[j].getName() + <span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出(我怀疑这个顺序是按照字母顺序来的)</p><blockquote><p>cons[0] ()<br>cons[1] (int)<br>cons[2] (java.lang.String, int)<br>cons[3] (java.lang.String)</p><p>实例化一个object，假设有很多个构造函数的话</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createViaReflection</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String className = <span class="string">"com.me.reflection._001_basic.MyObject"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class clazz = Class.forName(className);</span><br><span class="line">        Constructor cons = clazz.getConstructor(String.class); <span class="comment">//我们希望要获得一个String参数的构造函数</span></span><br><span class="line">        Object obj = cons.newInstance(<span class="string">"passing value via constructor is ok -ish"</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MyObject{name=’passing value via constructor is ok -ish’, age=0}</p><p>获取一个class中所有的Fileds（private的也能拿到）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllFields</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String className = <span class="string">"com.me.reflection._001_basic.MyObject"</span>;</span><br><span class="line">        Class rClass = Class.forName(className);</span><br><span class="line">        <span class="comment">// Field: 获取属性，下面还会讲到获取类的方法，注意区分</span></span><br><span class="line">        Field field[] = rClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; field.length; i++) &#123;</span><br><span class="line">            System.out.println(field[i].getName());</span><br><span class="line">            <span class="comment">// 获取修饰权限符</span></span><br><span class="line">            <span class="keyword">int</span> mo = field[i].getModifiers();</span><br><span class="line">            System.out.println(<span class="string">"mo: "</span>+mo);</span><br><span class="line">            String priv = Modifier.toString(mo);</span><br><span class="line">            <span class="comment">// 属性类型</span></span><br><span class="line">            Class type = field[i].getType();</span><br><span class="line">            System.out.println(priv + <span class="string">" "</span> + type.getName() + <span class="string">" "</span> + field[i].getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>name<br>mo: 1<br>public java.lang.String name<br>age<br>mo: 2<br>private int age</p><p>获得一个class中所有的方法(拿不到private的和构造函数，父类的wait,notfy这些反而能够拿到),getMethod只能拿到public的方法，getDeclaredMethod基本上是什么类型的都能拿到(getDeclaredMethods，有个s)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllMethods</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String className = <span class="string">"com.me.reflection._001_basic.MyObject"</span>;</span><br><span class="line">            Class fClass = Class.forName(className);</span><br><span class="line">            <span class="comment">// Method[]: 方法数组</span></span><br><span class="line">            Method method[] = fClass.getMethods();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; method.length; i++) &#123;</span><br><span class="line">                <span class="comment">// returnType :返回类型</span></span><br><span class="line">                Class returnType = method[i].getReturnType();</span><br><span class="line">                System.out.println(<span class="string">"ReturnType: "</span>+returnType);</span><br><span class="line">                <span class="comment">// 获取参数类型</span></span><br><span class="line">                Class para[] = method[i].getParameterTypes();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> temp = method[i].getModifiers();</span><br><span class="line">                System.out.print(<span class="string">"Modifier.toString: "</span>+Modifier.toString(temp) + <span class="string">" "</span>);</span><br><span class="line">                System.out.print(returnType.getName() + <span class="string">"  "</span>);</span><br><span class="line">                System.out.print(method[i].getName() + <span class="string">" "</span>);</span><br><span class="line">                System.out.print(<span class="string">"("</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; para.length; ++j) &#123;</span><br><span class="line">                    System.out.print(para[j].getName() + <span class="string">" "</span> + <span class="string">"arg"</span> + j);</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; para.length - <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.print(<span class="string">","</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取异常类型</span></span><br><span class="line">                Class&lt;?&gt; exce[] = method[i].getExceptionTypes();</span><br><span class="line">                <span class="keyword">if</span> (exce.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">") throws "</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; exce.length; ++k) &#123;</span><br><span class="line">                        System.out.print(exce[k].getName() + <span class="string">" "</span>);</span><br><span class="line">                        <span class="keyword">if</span> (k &lt; exce.length - <span class="number">1</span>) &#123;</span><br><span class="line">                            System.out.print(<span class="string">","</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.print(<span class="string">")"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试下来，这个方法能够拿到自己写的public方法，private方法似乎拿不到,还有，这里面似乎拿不到构造函数</p><blockquote><p>ReturnType: void<br>Modifier.toString: public final void  wait (long arg0,int arg1) throws java.lang.InterruptedException<br>ReturnType: void<br>Modifier.toString: public final native void  wait (long arg0) throws java.lang.InterruptedException<br>ReturnType: void<br>Modifier.toString: public final void  wait () throws java.lang.InterruptedException<br>ReturnType: boolean<br>Modifier.toString: public boolean  equals (java.lang.Object arg0)<br>ReturnType: class java.lang.String<br>Modifier.toString: public java.lang.String  toString ()<br>ReturnType: int<br>Modifier.toString: public native int  hashCode ()<br>ReturnType: class java.lang.Class<br>Modifier.toString: public final native java.lang.Class  getClass ()<br>ReturnType: void<br>Modifier.toString: public final native void  notify ()<br>ReturnType: void<br>Modifier.toString: public final native void  notifyAll ()</p></blockquote><p>拿到方法（Method对象之后就要invoke了），不管是private还是public的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设我们的class有这么两个方法,也是可以区分开来的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">echo</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">echo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"some kind of echo "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callMethodViaReflection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String className = <span class="string">"com.me.reflection._001_basic.MyObject"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; fClass = Class.forName(className);</span><br><span class="line">            Method method = fClass.getDeclaredMethod(<span class="string">"greet"</span>);</span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>); <span class="comment">//如果这是一个private的method的话，要setAccessible</span></span><br><span class="line">            method.invoke(fClass.newInstance());</span><br><span class="line"></span><br><span class="line">            Method public_method_with_params = fClass.getMethod(<span class="string">"echo"</span>,String.class);</span><br><span class="line">            public_method_with_params.invoke(fClass.newInstance(),<span class="string">"this is params from reflection"</span>);</span><br><span class="line"></span><br><span class="line">            Method public_method_without_params = fClass.getMethod(<span class="string">"echo"</span>);</span><br><span class="line">            public_method_without_params.invoke(fClass.newInstance());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>hello method without parameters<br>this is params from reflection<br>some kind of echo </p><blockquote><p>用反射给class的某个field赋值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFiledWithReflection</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String className = <span class="string">"com.me.reflection._001_basic.MyObject"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class clss = Class.forName(className);</span><br><span class="line">        Object obj = clss.newInstance();</span><br><span class="line">        Field field = clss.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(field.get(obj));</span><br><span class="line"></span><br><span class="line">        field.set(obj,<span class="string">"this is some reflected filed"</span>);</span><br><span class="line">        System.out.println(field.get(obj));</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射相关的东西基本到此完事，实际生产中当然推荐使用成熟的框架，比如<strong>Spring Framework的ReflectionUtils</strong>.当然有些东西是没法用反射去修改的（用InvocationHandler只是夹带了私活），比如函数的内部逻辑，比如常量(因为编译器直接把常量换成对应的值了)。</p><p>比如从Tinker的代码库里面抄来这么一段：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locates a given field anywhere in the class inheritance hierarchy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance an object to search the field into.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name     field name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a field object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException if the field cannot be located</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">findField</span><span class="params">(Object instance, String name)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz = instance.getClass(); clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Field field = clazz.getDeclaredField(name);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!field.isAccessible()) &#123;</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> field;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                <span class="comment">// ignore and search next</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException(<span class="string">"Field "</span> + name + <span class="string">" not found in "</span> + instance.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">findField</span><span class="params">(Class&lt;?&gt; originClazz, String name)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz = originClazz; clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Field field = clazz.getDeclaredField(name);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!field.isAccessible()) &#123;</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> field;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                <span class="comment">// ignore and search next</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException(<span class="string">"Field "</span> + name + <span class="string">" not found in "</span> + originClazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locates a given method anywhere in the class inheritance hierarchy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance       an object to search the method into.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name           method name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes method parameter types</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a method object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException if the method cannot be located</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title">findMethod</span><span class="params">(Object instance, String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz = instance.getClass(); clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method method = clazz.getDeclaredMethod(name, parameterTypes);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!method.isAccessible()) &#123;</span><br><span class="line">                    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> method;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="comment">// ignore and search next</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(<span class="string">"Method "</span></span><br><span class="line">            + name</span><br><span class="line">            + <span class="string">" with parameters "</span></span><br><span class="line">            + Arrays.asList(parameterTypes)</span><br><span class="line">            + <span class="string">" not found in "</span> + instance.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locates a given method anywhere in the class inheritance hierarchy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz          a class to search the method into.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name           method name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes method parameter types</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a method object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException if the method cannot be located</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method method = clazz.getDeclaredMethod(name, parameterTypes);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!method.isAccessible()) &#123;</span><br><span class="line">                    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> method;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="comment">// ignore and search next</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(<span class="string">"Method "</span></span><br><span class="line">                + name</span><br><span class="line">                + <span class="string">" with parameters "</span></span><br><span class="line">                + Arrays.asList(parameterTypes)</span><br><span class="line">                + <span class="string">" not found in "</span> + clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locates a given constructor anywhere in the class inheritance hierarchy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance       an object to search the constructor into.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes constructor parameter types</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a constructor object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException if the constructor cannot be located</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Constructor&lt;?&gt; findConstructor(Object instance, Class&lt;?&gt;... parameterTypes)</span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz = instance.getClass(); clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Constructor&lt;?&gt; ctor = clazz.getDeclaredConstructor(parameterTypes);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!ctor.isAccessible()) &#123;</span><br><span class="line">                    ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ctor;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="comment">// ignore and search next</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(<span class="string">"Constructor"</span></span><br><span class="line">                + <span class="string">" with parameters "</span></span><br><span class="line">                + Arrays.asList(parameterTypes)</span><br><span class="line">                + <span class="string">" not found in "</span> + instance.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>和反射相关的类应该还有Type，关于Type，最有名的就是从一个泛型类中获取泛型里面T的class对象。但这是有条件的。需要泛型定义在一个父类上，子类对象在初始化的时候确定一个T,后面就可以通过这个子类对象的实例来获得刚才这个T的class.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> Class&lt;?&gt; classType = Integer.TYPE; <span class="comment">//这其实是一个class</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 从泛型class中获取T的类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;()&#123;&#125;;</span><br><span class="line">    Type mySuperclass = map.getClass().getGenericSuperclass();</span><br><span class="line">    Type type = ((ParameterizedType)mySuperclass).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">    Type type2 = ((ParameterizedType)mySuperclass).getActualTypeArguments()[<span class="number">1</span>];</span><br><span class="line">    System.out.println(mySuperclass);<span class="comment">// java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;</span></span><br><span class="line">    System.out.println(type+<span class="string">" "</span>+type2); <span class="comment">//class java.lang.String class java.lang.Integer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMethod2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 类型擦除</span></span><br><span class="line">    Type mySuperclass = map.getClass().getGenericSuperclass();</span><br><span class="line">    Type type = ((ParameterizedType)mySuperclass).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">    Type type2 = ((ParameterizedType)mySuperclass).getActualTypeArguments()[<span class="number">1</span>];</span><br><span class="line">    System.out.println(mySuperclass); <span class="comment">// java.util.AbstractMap&lt;K, V&gt;</span></span><br><span class="line">    System.out.println(type+<span class="string">" "</span>+type2); <span class="comment">//K V</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//content</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FooChild</span> <span class="keyword">extends</span> <span class="title">Foo</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//content</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Type[] getParameterizedTypes(Object object) &#123;</span><br><span class="line">    Type superclassType = object.getClass().getGenericSuperclass();</span><br><span class="line">    <span class="keyword">if</span> (!ParameterizedType.class.isAssignableFrom(superclassType.getClass())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((ParameterizedType)superclassType).getActualTypeArguments();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Foo foo = <span class="keyword">new</span> FooChild();</span><br><span class="line">        Type[] types=  getParameterizedTypes(foo);</span><br><span class="line">        System.out.println(types[<span class="number">0</span>] == String.class); <span class="comment">// true ,Type是一个接口，实现类只有Class</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>看下来都是需要一个支持泛型的父类，然后子类继承这个父类并指定泛型中的T是哪个class，外部就可以拿着这个父类的指针(指向填充了T类型的子类的Object)调用getGenericSuperclass方法再转成ParameterizedType去调用getActualTypeArguments方法了。</p><p>这里面涉及到的类和接口包括:<br>ParameterizedType,TypeVariable,GenericArrayType,WildcardType（这四个全部是接口）等<br><a href="http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-02-16-Type%E8%AF%A6%E8%A7%A3.html">Type详解</a><br>由于类型擦除，class对象中并不能保有编译前的类的信息，引入Type似乎是为了迎合反射的需要。</p><p>反编译java代码的基本套路</p><p><img src="https://www.haldir66.ga/static/imgs/1279081126453.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://haldir66.ga/static/imgs/20160720094529840.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://haldir65.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>celery-cheetsheet</title>
    <link href="https://haldir65.github.io/2018/07/03/2018-07-03-celery-cheetsheet/"/>
    <id>https://haldir65.github.io/2018/07/03/2018-07-03-celery-cheetsheet/</id>
    <published>2018-07-03T08:43:41.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“There are only two hard things in Computer Science: cache invalidation and naming things.”<br>— Phil Karlton</p></blockquote><p><img src="https://www.haldir66.ga/static/imgs/Celery_picture.jpg" alt=""></p><a id="more"></a><p>因为需要使用Redis，在ubuntu上安装redis可以用apt-get，也能自己下载源码去make（前提是内存充足，内存不足的话make test会失败）。所以我干脆关掉了几个比较耗内存的进程，最后直接用apt-get装上了。</p><p>下面这几步就算最简单的celery入门了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'tasks'</span>, broker=<span class="string">'redis://localhost:6379/0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure></p><p>celery -A tasks worker –loglevel=info<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from tasks import add</span><br><span class="line">&gt;&gt;&gt; add.delay(4, 4)</span><br></pre></td></tr></table></figure></p><p>注意，windows上celery4不完全支持<br><a href="https://stackoverflow.com/questions/45744992/celery-raises-valueerror-not-enough-values-to-unpack">celery-raises-valueerror-not-enough-values-to-unpack</a></p><p>基本的项目结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proj/__init__.py</span><br><span class="line">    /celery.py</span><br><span class="line">    /tasks.py</span><br></pre></td></tr></table></figure></p><p>proj/celery.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'proj'</span>,</span><br><span class="line">             broker=<span class="string">'amqp://'</span>,</span><br><span class="line">             backend=<span class="string">'amqp://'</span>,</span><br><span class="line">             include=[<span class="string">'proj.tasks'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional configuration, see the application user guide.</span></span><br><span class="line">app.conf.update(</span><br><span class="line">    result_expires=<span class="number">3600</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.start()</span><br></pre></td></tr></table></figure></p><p>##耗时的任务都丢到这里就好了<br>proj/tasks.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xsum</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(numbers)</span><br></pre></td></tr></table></figure></p><p>注意下面的命令要在proj项目上层目录中运行</p><blockquote><p>celery -A proj worker -l info</p><p>执行异步方法，这俩都行：<br>add.delay(2, 2)<br>add.apply_async((2, 2)) ##这句话并不会阻塞在这里，后面的方法接着执行，也就达到了异步执行的目的</p></blockquote><p><a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html">在django项目中使用celery</a><br><a href="https://simpleisbetterthancomplex.com/tutorial/2017/08/20/how-to-use-celery-with-django.html">django-celery-example</a></p><p>生产环境需要supervisor守护celery</p><blockquote><p>sudo apt-get install supervisor<br>/etc/supervisor/conf.d/something.conf<br>[program:celery]<br>command=/home/deploy/.virtualenvs/my_env/bin/celery –app=proj_name worker –loglevel=INFO<br>directory=/home/deploy/webapps/django_project<br>user=user_name<br>autostart=true<br>autorestart=true<br>redirect_stderr=true</p></blockquote><h2 id="刷新一下supervisor任务"><a href="#刷新一下supervisor任务" class="headerlink" title="刷新一下supervisor任务"></a>刷新一下supervisor任务</h2><p>sudo supervisorctl reread<br>sudo supervisorctl update</p><p>##启动celery<br>sudo supervisorctl start celery</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 失败了自动retry</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"> </span><br><span class="line"><span class="meta">@shared_task(bind=True, max_retries=3)  # you can determine the max_retries here</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">access_awful_system</span><span class="params">(self, my_obj_id)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> core.models <span class="keyword">import</span> Object</span><br><span class="line">    <span class="keyword">from</span> requests <span class="keyword">import</span> ConnectionError</span><br><span class="line">    o = Object.objects.get(pk=my_obj_id)</span><br><span class="line">    <span class="comment"># If ConnectionError try again in 180 seconds</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"> </span><br><span class="line">        o.access_awful_system()</span><br><span class="line">    <span class="keyword">except</span> ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">        self.retry(exc=exc, countdown=<span class="number">180</span>)  <span class="comment"># the task goes back to the queue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##重试时间指数型增长也行 </span></span><br><span class="line"><span class="meta">@celery_app.task(max_retries=10)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notify_gcm_device</span><span class="params">(device_token, message, data=None)</span>:</span></span><br><span class="line">  notification_json = build_gcm_json(message, data=data)</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    gcm.notify_device(device_token, json=notification_json)</span><br><span class="line">  <span class="keyword">except</span> ServiceTemporarilyDownError:</span><br><span class="line">    <span class="comment"># Find the number of attempts so far</span></span><br><span class="line">    num_retries = notify_gcm_device.request.retries</span><br><span class="line">    seconds_to_wait = <span class="number">2.0</span> ** num_retries</span><br><span class="line">    <span class="comment"># First countdown will be 1.0, then 2.0, 4.0, etc.</span></span><br><span class="line">    <span class="keyword">raise</span> notify_gcm_device.retry(countdown=seconds_to_wait)</span><br><span class="line"></span><br><span class="line"><span class="comment">## eta 像crontab一样定期执行任务</span></span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">now = timezone.now() </span><br><span class="line"> </span><br><span class="line"><span class="comment"># later is one hour from now</span></span><br><span class="line">later = now + timedelta(hours=<span class="number">1</span>)</span><br><span class="line">access_awful_system.apply_async((object_id), eta=later)</span><br></pre></td></tr></table></figure><h2 id="创建多个queue"><a href="#创建多个queue" class="headerlink" title="创建多个queue"></a>创建多个queue</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># CELERY ROUTES</span><br><span class="line">CELERY_ROUTES = &#123;</span><br><span class="line">    &apos;core.tasks.too_long_task&apos;: &#123;&apos;queue&apos;: &apos;too_long_queue&apos;&#125;,</span><br><span class="line">    &apos;core.tasks.quick_task&apos;: &#123;&apos;queue&apos;: &apos;quick_queue&apos;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># For too long queue</span><br><span class="line">celery --app=proj_name worker -Q too_long_queue -c 2</span><br><span class="line"># For quick queue</span><br><span class="line">celery --app=proj_name worker -Q quick_queue -c 2</span><br></pre></td></tr></table></figure><p>可以subclass task，比如自定义缓存什么的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span><span class="params">(celery.Task)</span>:</span></span><br><span class="line">    ignore_result = <span class="keyword">False</span>  <span class="comment"># in case you set it to True globally — you should!</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># This code is only called once per worker.</span></span><br><span class="line">        <span class="comment"># Here you can define members, which will be accessible when the task runs, later on.</span></span><br><span class="line">        self.cache = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, user_id, arg)</span>:</span></span><br><span class="line">        <span class="comment"># Now the task is executing.</span></span><br><span class="line">        <span class="comment"># We have the ‘cache’ at our disposal!</span></span><br><span class="line">        <span class="keyword">return</span> self.normal_operation(user_id, arg)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">normal_operation</span><span class="params">(self, user_id, arg)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (user_id, arg) <span class="keyword">in</span> self.cache:</span><br><span class="line">             <span class="keyword">return</span> self.cache[(user_id, arg)]</span><br><span class="line">        retval = self.some_value(user_id, arg)</span><br><span class="line">        self.cache[(user_id, arg)] = retval</span><br><span class="line">        <span class="keyword">return</span> retval</span><br></pre></td></tr></table></figure></p><h3 id="references"><a href="#references" class="headerlink" title="references"></a>references</h3><p><a href="http://flower.readthedocs.io/en/latest/">celery有一个监控工具Flower</a><br><a href="https://realpython.com/asynchronous-tasks-with-django-and-celery/">asynchronous-tasks-with-django-and-celery</a><br><a href="https://theblog.workey.co/my-experiences-with-a-long-running-celery-based-microprocess-b2cc30da94f5">my-experiences-with-a-long-running-celery-based-microprocess</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“There are only two hard things in Computer Science: cache invalidation and naming things.”&lt;br&gt;— Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/Celery_picture.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy速查手册</title>
    <link href="https://haldir65.github.io/2018/07/02/2018-07-02-sqlalchemy-cheetsheet/"/>
    <id>https://haldir65.github.io/2018/07/02/2018-07-02-sqlalchemy-cheetsheet/</id>
    <published>2018-07-02T21:12:31.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>pip install SQLAlchemy</p></blockquote><p><img src="https://www.haldir66.ga/static/imgs/side_walk_tree.jpg" alt=""></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="comment">## 想用sqlite?</span></span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///foo.db'</span>, echo=<span class="keyword">True</span>) <span class="comment">## 会在当前目录下生成一个foo.db文件，这个True表示程序运行的时候会打印出生成的sql语句。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 想用mysql?</span></span><br><span class="line">engine = create_engine(<span class="string">'mysql+mysqlconnector://%s:%s@localhost:3306/%s?charset=utf8'</span> % (config.DB_USER_NAME,config.DB_PASS_WORD,config.DB_NAME)) <span class="comment">## mysql也是支持的</span></span><br><span class="line">这里有一个坑：</span><br><span class="line"><span class="comment">## mysql://username:password@server/db  python3下面不能这么写，虽然flask-sqlalchemy教程上是这么教人的</span></span><br><span class="line"><span class="comment">## mysql+pymysql://username:password@server/db  应该这么写，还有pip install PyMySQL</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## postgresql也是可以的</span></span><br><span class="line">engine = create_engine(<span class="string">"postgresql://scott:tiger@localhost/test"</span>)</span><br></pre></td></tr></table></figure><p>创建db的时候注意,sqlite因为是直接写文件，所以要把db的路径写清楚了。如果贸然写一个’sqlite:///db.sqlite3’，可能会出现no such table<br>config.py文件里面<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">project_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">"sqlite:///&#123;&#125;"</span>.format(os.path.join(project_dir, <span class="string">"backend.db"</span>))</span><br></pre></td></tr></table></figure></p><p>数据库创建了，开始<del>建表</del>设计表<br>其实一般没必要这么搞，直接db.create_all()得了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## create table if not exists</span></span><br><span class="line">engine = create_engine(<span class="string">"sqlite:///myexample.db"</span>)  <span class="comment"># Access the DB Engine</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> engine.dialect.has_table(engine, Variable_tableName):  <span class="comment"># If table don't exist, Create.</span></span><br><span class="line">    metadata = MetaData(engine)</span><br><span class="line">    <span class="comment"># Create a table with the appropriate Columns</span></span><br><span class="line">    <span class="comment">##主键，auto_increment是这么设置的</span></span><br><span class="line">    Table(Variable_tableName, metadata,</span><br><span class="line">          Column(<span class="string">'Id'</span>, Integer, primary_key=<span class="keyword">True</span>, nullable=<span class="keyword">False</span>,autoincrement = <span class="keyword">True</span>),</span><br><span class="line">          Column(<span class="string">'Date'</span>, Date), Column(<span class="string">'Country'</span>, String),</span><br><span class="line">          Column(<span class="string">'Brand'</span>, String), Column(<span class="string">'Price'</span>, Float),</span><br><span class="line">    <span class="comment"># Implement the creation</span></span><br><span class="line">    metadata.create_all()</span><br></pre></td></tr></table></figure></p><p>Flask比较好的地方是可以和SQLAlechemy紧密结合<br>Flask一起用<a href="https://www.thatyou.cn/flask%E4%BD%BF%E7%94%A8flask-sqlalchemy%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/">代码出处</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">my_config = configparser.ConfigParser()</span><br><span class="line">my_config.read(<span class="string">'db.conf'</span>)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql://'</span> + my_config.get(<span class="string">'DB'</span>, <span class="string">'DB_USER'</span>) + <span class="string">':'</span> + my_config.get(<span class="string">'DB'</span>, <span class="string">'DB_PASSWORD'</span>) + <span class="string">'@'</span> + my_config.get(<span class="string">'DB'</span>, <span class="string">'DB_HOST'</span>) + <span class="string">'/'</span> + my_config.get(<span class="string">'DB'</span>, <span class="string">'DB_DB'</span>)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">mydb = SQLAlchemy()</span><br><span class="line">mydb.init_app(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(mydb.Model)</span>:</span></span><br><span class="line">    user_id = mydb.Column(mydb.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    user_name = mydb.Column(mydb.String(<span class="number">60</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_password = mydb.Column(mydb.String(<span class="number">30</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_nickname = mydb.Column(mydb.String(<span class="number">50</span>))</span><br><span class="line">    user_email = mydb.Column(mydb.String(<span class="number">30</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % self.user_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户列表</span></span><br><span class="line"><span class="meta">@app.route('/users', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUsers</span><span class="params">()</span>:</span></span><br><span class="line">    data = User.query.all()</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> data:</span><br><span class="line">        datas.append(&#123;<span class="string">'user_id'</span>: user.user_id, <span class="string">'user_name'</span>: user.user_name, <span class="string">'user_nickname'</span>: user.user_nickname, <span class="string">'user_email'</span>: user.user_email&#125;)</span><br><span class="line">    <span class="keyword">return</span> jsonify(data=datas)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加用户数据</span></span><br><span class="line"><span class="meta">@app.route('/user', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addUser</span><span class="params">()</span>:</span></span><br><span class="line">    user_name = request.form.get(<span class="string">'user_name'</span>)</span><br><span class="line">    user_password = request.form.get(<span class="string">'user_password'</span>)</span><br><span class="line">    user_nickname = request.form.get(<span class="string">'user_nickname'</span>)</span><br><span class="line">    user_email = request.form.get(<span class="string">'user_email'</span>)</span><br><span class="line">    user = User(user_name=user_name, user_password=user_password, user_nickname=user_nickname, user_email=user_email)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mydb.session.add(user)</span><br><span class="line">        mydb.session.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        mydb.session.rollback()</span><br><span class="line">        mydb.session.flush()</span><br><span class="line">    userId = user.user_id</span><br><span class="line">    <span class="keyword">if</span> (user.user_id <span class="keyword">is</span> <span class="keyword">None</span>):</span><br><span class="line">        result = &#123;<span class="string">'msg'</span>: <span class="string">'添加失败'</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> jsonify(data=result)</span><br><span class="line"></span><br><span class="line">    data = User.query.filter_by(user_id=userId).first()</span><br><span class="line">    result = &#123;<span class="string">'user_id'</span>: user.user_id, <span class="string">'user_name'</span>: user.user_name, <span class="string">'user_nickname'</span>: user.user_nickname, <span class="string">'user_email'</span>: user.user_email&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(data=result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取单条数据</span></span><br><span class="line"><span class="meta">@app.route('/user/&lt;int:userId&gt;', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUser</span><span class="params">(userId)</span>:</span></span><br><span class="line">    user = User.query.filter_by(user_id=userId).first()</span><br><span class="line">    <span class="keyword">if</span> (user <span class="keyword">is</span> <span class="keyword">None</span>):</span><br><span class="line">        result = &#123;<span class="string">'msg'</span>: <span class="string">'找不到数据'</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = &#123;<span class="string">'user_id'</span>: user.user_id, <span class="string">'user_name'</span>: user.user_name, <span class="string">'user_nickname'</span>: user.user_nickname, <span class="string">'user_email'</span>: user.user_email&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(data=result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户数据</span></span><br><span class="line"><span class="meta">@app.route('/user/&lt;int:userId&gt;', methods=['PATCH'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateUser</span><span class="params">(userId)</span>:</span></span><br><span class="line">    user_name = request.form.get(<span class="string">'user_name'</span>)</span><br><span class="line">    user_password = request.form.get(<span class="string">'user_password'</span>)</span><br><span class="line">    user_nickname = request.form.get(<span class="string">'user_nickname'</span>)</span><br><span class="line">    user_email = request.form.get(<span class="string">'user_email'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user = User.query.filter_by(user_id=userId).first()</span><br><span class="line">        <span class="keyword">if</span> (user <span class="keyword">is</span> <span class="keyword">None</span>):</span><br><span class="line">            result = &#123;<span class="string">'msg'</span>: <span class="string">'找不到要修改的记录'</span>&#125;</span><br><span class="line">            <span class="keyword">return</span> jsonify(data=result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user.user_name = user_name</span><br><span class="line">            user.user_password = user_password</span><br><span class="line">            user.user_nickname = user_nickname</span><br><span class="line">            user.user_email = user_email</span><br><span class="line">            mydb.session.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        mydb.session.rollback()</span><br><span class="line">        mydb.session.flush()</span><br><span class="line">    userId = user.user_id</span><br><span class="line">    data = User.query.filter_by(user_id=userId).first()</span><br><span class="line">    result = &#123;<span class="string">'user_id'</span>: user.user_id, <span class="string">'user_name'</span>: user.user_name, <span class="string">'user_password'</span>: user.user_password, <span class="string">'user_nickname'</span>: user.user_nickname, <span class="string">'user_email'</span>: user.user_email&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(data=result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户数据</span></span><br><span class="line"><span class="meta">@app.route('/user/&lt;int:userId&gt;', methods=['DELETE'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteUser</span><span class="params">(userId)</span>:</span></span><br><span class="line">    User.query.filter_by(user_id=userId).delete()</span><br><span class="line">    mydb.session.commit()</span><br><span class="line">    <span class="keyword">return</span> getUsers()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>sclalchemy的model的tablename默认是会根据model的name生成小写的tablename:</p><blockquote><p>For instance the table name is automatically set for you unless overridden. It’s derived from the class name converted to lowercase and with “CamelCase” converted to “camel_case”. To override the table name, set the <strong>tablename</strong> class attribute.</p></blockquote><p>来看看curd的一些常用的地方,<a href="http://docs.sqlalchemy.org/en/latest/orm/query.html#the-query-object">query Api</a><br><a href="http://flask-sqlalchemy.pocoo.org/2.3/queries/">Flask SQLAlchemy query api</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; peter = User.query.filter_by(username=&apos;peter&apos;).first()</span><br><span class="line">&gt;&gt;&gt; peter.id</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; peter.email</span><br><span class="line">u&apos;peter@example.org&apos;</span><br></pre></td></tr></table></figure><p>sqlalchemy这种orm也是需要加锁的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.InvalidRequestError: When initializing mapper Mapper|Newscate|newscate, expression &apos;News&apos; failed to locate a name (&quot;name &apos;News&apos; is not defined&quot;). If this is a class name, consider adding this relationship() to the &lt;class &apos;category.models.Newscate&apos;&gt; class after both dependent classes have been defined.</span><br></pre></td></tr></table></figure><p><a href="http://flask-sqlalchemy.pocoo.org/2.3/models/">flask-sqlalchemy关于一对多，多对多关系的解释</a><br>抄来的model,一对多关系，一个User可以有多个News，一个Newscategory可以有多个News<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Table, MetaData, Column, Integer, String, ForeignKey</span><br><span class="line"><span class="keyword">from</span> database <span class="keyword">import</span> db <span class="keyword">as</span> mydb</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(mydb.Model)</span>:</span></span><br><span class="line">    __tablename__=<span class="string">"t_user"</span></span><br><span class="line">    user_id = mydb.Column(mydb.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    user_name = mydb.Column(mydb.String(<span class="number">60</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_password = mydb.Column(mydb.String(<span class="number">30</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_nickname = mydb.Column(mydb.String(<span class="number">50</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_email = mydb.Column(mydb.String(<span class="number">100</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    newses = mydb.relationship(<span class="string">'News'</span>, backref=<span class="string">'user'</span>, lazy=<span class="keyword">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % self.user_nickname</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Newscate</span><span class="params">(mydb.Model)</span>:</span></span><br><span class="line">    __tablename__=<span class="string">"t_newscat"</span></span><br><span class="line">    cate_id = mydb.Column(mydb.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    cate_name = mydb.Column(mydb.String(<span class="number">50</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    cate_title = mydb.Column(mydb.String(<span class="number">50</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    newses = mydb.relationship(<span class="string">'News'</span>, backref=<span class="string">'newscate'</span>, lazy=<span class="keyword">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;Newscate %r&gt;'</span> % self.cate_name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">News</span><span class="params">(mydb.Model)</span>:</span></span><br><span class="line">    __tablename__=<span class="string">"t_news"</span></span><br><span class="line">    news_id = mydb.Column(mydb.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    news_date = mydb.Column(mydb.DateTime, nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_content = mydb.Column(mydb.Text, nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_title = mydb.Column(mydb.String(<span class="number">100</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_excerpt = mydb.Column(mydb.Text, nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_status = mydb.Column(mydb.String(<span class="number">20</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_modified = mydb.Column(mydb.DateTime, nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_category = mydb.Column(mydb.Integer, mydb.ForeignKey(<span class="string">'t_newscat.cate_id'</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_author = mydb.Column(mydb.Integer, mydb.ForeignKey(<span class="string">'t_user.user_id'</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;News %r&gt;'</span> % self.news_title</span><br></pre></td></tr></table></figure></p><p>开始建表吧，直接在shell里面搞要快很多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; python </span><br><span class="line">from app import app ## 这个app是一个Flask实例</span><br><span class="line">from database import db</span><br><span class="line">from models import News,User,Newscate</span><br><span class="line">app.app_context().push() ## 这句话是必须的[context](http://flask-sqlalchemy.pocoo.org/2.3/contexts/)</span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure></p><p>如果只要创建一张表的话可以这么干<br>Model.<strong>table</strong>.create(session.bind)</p><p>来看看生成的sql语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line">        user_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">        user_name <span class="built_in">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        user_password <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        user_nickname <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        user_email <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        PRIMARY <span class="keyword">KEY</span> (user_id)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_newscat (</span><br><span class="line">        cate_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">        cate_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        cate_title <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        PRIMARY <span class="keyword">KEY</span> (cate_id)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_news (</span><br><span class="line">        news_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">        news_date DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_content <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_title <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_excerpt <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_status <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_modified DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_category <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_author <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        PRIMARY <span class="keyword">KEY</span> (news_id),</span><br><span class="line">        FOREIGN <span class="keyword">KEY</span>(news_category) <span class="keyword">REFERENCES</span> t_newscat (cate_id),</span><br><span class="line">        FOREIGN <span class="keyword">KEY</span>(news_author) <span class="keyword">REFERENCES</span> t_user (user_id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>生成表之后，开始插入数据，还是在shell里面，快一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;  User.query.all() </span><br><span class="line">[] ##数据为空</span><br><span class="line">&gt;&gt;&gt; robin = User(user_name=&quot;Tim&quot;,user_password=&quot;secret&quot;,user_nickname=&quot;tim_nick&quot;,user_email=&quot;lenon@gmail.com&quot;)</span><br><span class="line">&gt;&gt;&gt; robin.user_email</span><br><span class="line">&apos;lenon@gmail.com&apos;</span><br><span class="line">&gt;&gt;&gt; robin.newses ## 注意，db中user并没有newses这个column</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; robin.user_id</span><br><span class="line">&gt;&gt;&gt;   ##什么都没有，因为还没有commit到数据库，那么commit一下</span><br><span class="line">&gt;&gt;&gt; robin.user_id</span><br><span class="line">&gt;&gt;&gt; db.session.add(robin)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br><span class="line">再查找一下</span><br><span class="line">&gt;&gt;&gt; robin.user_id</span><br><span class="line">2018-07-15 10:26:58,358 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)</span><br><span class="line">2018-07-15 10:26:58,358 INFO sqlalchemy.engine.base.Engine SELECT t_user.user_id AS t_user_user_id, t_user.user_name AS t_user_user_name, t_user.user_password AS t_user_user_password, t_user.user_nickname AS t_user_user_nickname, t_user.user_email AS t_user_user_email</span><br><span class="line">FROM t_user</span><br><span class="line">WHERE t_user.user_id = %(param_1)s</span><br><span class="line">2018-07-15 10:26:58,359 INFO sqlalchemy.engine.base.Engine &#123;&apos;param_1&apos;: 1&#125;</span><br><span class="line">&gt;&gt;&gt; 1 ##这回就有了</span><br></pre></td></tr></table></figure><p>因为news依赖两个Foreign key，user和newcate，且都不为空，所以在创建News之前得先创建Newscate<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; breaking_news = Newscate(cate_name=&quot;beaking_news&quot;,cate_title=&quot;breaking News&quot;)</span><br><span class="line">&gt;&gt;&gt; breaking_news</span><br><span class="line">&lt;Newscate &apos;beaking_news&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; breaking_news.cate_title</span><br><span class="line">&apos;breaking News&apos;</span><br><span class="line">&gt;&gt;&gt;db.session.add(breaking_news)</span><br><span class="line">&gt;&gt;&gt;db.session.commit()</span><br><span class="line">&gt;&gt;&gt;breaking_news.cate_id</span><br><span class="line">1 ## 查下数据库，User和Newscate里面都有数据了</span><br><span class="line"></span><br><span class="line"> newsitem = News(news_date=datetime.utcnow(),news_content=&quot;content of news item one&quot;,news_title=&quot;title of news item one&quot;,news_excerpt=&quot;excerpt of news item one&quot;,news_status=&quot;normal&quot;,news_modified=datetime.now(),news_category=2,news_author=1)</span><br><span class="line">&gt;&gt;&gt; newsitem</span><br><span class="line">&lt;News &apos;title of news item one&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; db.session.add(newsitem)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br><span class="line">2018-07-15 10:42:11,134 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)</span><br><span class="line">2018-07-15 10:42:11,135 INFO sqlalchemy.engine.base.Engine INSERT INTO t_news (news_date, news_content, news_title, news_excerpt, news_status, news_modified, news_category, news_author) VALUES (%(news_date)s, %(news_content)s, %(news_title)s, %(news_excerpt)s, %(news_status)s, %(news_modified)s, %(news_category)s, %(news_author)s)</span><br><span class="line">2018-07-15 10:42:11,136 INFO sqlalchemy.engine.base.Engine &#123;&apos;news_date&apos;: datetime.datetime(2018, 7, 15, 2, 41, 50, 454505), &apos;news_content&apos;: &apos;content of news item one&apos;, &apos;news_title&apos;: &apos;title of news item one&apos;, &apos;news_excerpt&apos;: &apos;excerpt of news item one&apos;, &apos;news_status&apos;: &apos;normal&apos;, &apos;news_modified&apos;: datetime.datetime(2018, 7, 15, 10, 41, 50, 454505), &apos;news_category&apos;: 2, &apos;news_author&apos;: 1&#125;</span><br><span class="line">2018-07-15 10:42:11,141 INFO sqlalchemy.engine.base.Engine COMMIT</span><br></pre></td></tr></table></figure></p><p>查下数据库，News也插入成功</p><p>后面开始在gui界面中往数据库里面插入一些数据，准备好假数据之后要db.session.commit()一下才会在sqlalchemy这边同步一下。(session好像也没有什么类似于sync的api)</p><p>开始查询：</p><h3 id="根据一个Newsid去查找这篇news的user"><a href="#根据一个Newsid去查找这篇news的user" class="headerlink" title="根据一个Newsid去查找这篇news的user"></a>根据一个Newsid去查找这篇news的user</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; News.query.all()[0].news_author </span><br><span class="line">1 ##正常啊，这里存储的就是user的id,但是我们想要User，还记得上面建表的时候那个&quot;backref&quot;嘛，写的是backref=&apos;user&apos;</span><br><span class="line">&gt;&gt;&gt; News.query.all()[0].user</span><br><span class="line">&lt;User &apos;tim_nick&apos;&gt;</span><br></pre></td></tr></table></figure><h2 id="查询所有发表过News的User（就是user-newses不为空List）"><a href="#查询所有发表过News的User（就是user-newses不为空List）" class="headerlink" title="查询所有发表过News的User（就是user.newses不为空List）"></a>查询所有发表过News的User（就是user.newses不为空List）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; User.query.filter(func.length(User.newses) &gt; 0).all()</span><br><span class="line">[&lt;User &apos;tim_nick&apos;&gt;, &lt;User &apos;bounty hounter&apos;&gt;, &lt;User &apos;sally williams&apos;&gt;, &lt;User &apos;john doe&apos;&gt;]显然不正确</span><br><span class="line"></span><br><span class="line">这种情况的一般sql语句应该是这么写的</span><br><span class="line">&gt;&gt;&gt;SELECT t_user.user_id AS t_user_user_id, t_user.user_name AS t_user_user_name, t_user.user_password AS t_user_user_password, t_user.user_nickname AS t_user_user_nickname, t_user.user_email AS t_user_user_email FROM t_user, t_news WHERE t_user.user_id = t_news.news_author GROUP BY t_user_user_name;</span><br><span class="line"></span><br><span class="line">所以最终凑合得到这样的查询</span><br><span class="line">&gt;&gt;&gt; User.query.filter(User.newses).all()</span><br><span class="line">2018-07-15 11:09:17,584 INFO sqlalchemy.engine.base.Engine SELECT t_user.user_id AS t_user_user_id, t_user.user_name AS t_user_user_name, t_user.user_password AS t_user_user_password, t_user.user_nickname AS t_user_user_nickname, t_user.user_email AS t_user_user_email</span><br><span class="line">FROM t_user, t_news</span><br><span class="line">WHERE t_user.user_id = t_news.news_author</span><br><span class="line">2018-07-15 11:09:17,585 INFO sqlalchemy.engine.base.Engine &#123;&#125;</span><br><span class="line">[&lt;User &apos;tim_nick&apos;&gt;]</span><br></pre></td></tr></table></figure><h2 id="查询一个user发布过的所有news"><a href="#查询一个user发布过的所有news" class="headerlink" title="查询一个user发布过的所有news"></a>查询一个user发布过的所有news</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; News.query.filter(News.news_author==1).all()</span><br><span class="line">2018-07-15 11:29:42,306 INFO sqlalchemy.engine.base.Engine SELECT t_news.news_id AS t_news_news_id, t_news.news_date AS t_news_news_date, t_news.news_content AS t_news_news_content, t_news.news_title AS t_news_news_title, t_news.news_excerpt AS t_news_news_excerpt, t_news.news_status AS t_news_news_status, t_news.news_modified AS t_news_news_modified, t_news.news_category AS t_news_news_category, t_news.news_author AS t_news_news_author</span><br><span class="line">FROM t_news</span><br><span class="line">WHERE t_news.news_author = %(news_author_1)s</span><br><span class="line">2018-07-15 11:29:42,306 INFO sqlalchemy.engine.base.Engine &#123;&apos;news_author_1&apos;: 1&#125;</span><br><span class="line">[&lt;News &apos;title of news item one&apos;&gt;, &lt;News &apos;title of news item two&apos;&gt;]</span><br></pre></td></tr></table></figure><h3 id="到这里一共有三张表，那么join这种联表查询也是ok的"><a href="#到这里一共有三张表，那么join这种联表查询也是ok的" class="headerlink" title="到这里一共有三张表，那么join这种联表查询也是ok的"></a>到这里一共有三张表，那么join这种联表查询也是ok的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; result = db.session.query(News.news_id, News.news_author, News.news_date, News.news_title, News.news_content, News.news_excerpt, News.news_status, News.news_modified, Newscate.cate_name, Newscate.cate_title, User.user_name, User.user_nickname).filter_by(news_id=1).join(Newscate, News.news_category == Newscate.cate_id).join(User, News.news_author == User.user_id).first()</span><br><span class="line">2018-07-15 14:08:27,487 INFO sqlalchemy.engine.base.Engine SELECT t_news.news_id AS t_news_news_id, t_news.news_author AS t_news_news_author, t_news.news_date AS t_news_news_date, t_news.news_title AS t_news_news_title, t_news.news_content AS t_news_news_content, t_news.news_excerpt AS t_news_news_excerpt, t_news.news_status AS t_news_news_status, t_news.news_modified AS t_news_news_modified, t_newscat.cate_name AS t_newscat_cate_name, t_newscat.cate_title AS t_newscat_cate_title, t_user.user_name AS t_user_user_name, t_user.user_nickname AS t_user_user_nickname</span><br><span class="line">FROM t_news INNER JOIN t_newscat ON t_news.news_category = t_newscat.cate_id INNER JOIN t_user ON t_news.news_author = t_user.user_id</span><br><span class="line">WHERE t_news.news_id = %(news_id_1)s</span><br><span class="line"> LIMIT %(param_1)s</span><br><span class="line">2018-07-15 14:08:27,487 INFO sqlalchemy.engine.base.Engine &#123;&apos;news_id_1&apos;: 1, &apos;param_1&apos;: 1&#125;</span><br><span class="line">(1, 1, datetime.datetime(2018, 7, 15, 2, 41, 50), &apos;title of news item one&apos;, &apos;content of news item one&apos;, &apos;excerpt of news item one&apos;, &apos;normal&apos;, datetime.datetime(2018, 7, 15, 10, 41, 50), &apos;economy&apos;, &apos;economy title&apos;, &apos;Tim&apos;, &apos;tim_nick&apos;)</span><br><span class="line">这里得到的是一个&lt;class &apos;sqlalchemy.util._collections.result&apos;&gt;对象</span><br><span class="line">&gt;&gt;&gt; result.cate_name ## 可以这么访问数据</span><br><span class="line">&apos;economy&apos;</span><br></pre></td></tr></table></figure><p>###查找所有用gmail注册的用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;gmail&quot;)).all()</span><br><span class="line">2018-07-15 13:50:56,237 INFO sqlalchemy.engine.base.Engine SELECT t_user.user_name AS t_user_user_name</span><br><span class="line">FROM t_user</span><br><span class="line">WHERE t_user.user_email LIKE %(user_email_1)s</span><br><span class="line">2018-07-15 13:50:56,239 INFO sqlalchemy.engine.base.Engine &#123;&apos;user_email_1&apos;: &apos;gmail&apos;&#125;</span><br><span class="line">[] ##显然有问题</span><br><span class="line"></span><br><span class="line">数据库里执行这句sql就能正确的找出gmail邮箱的user</span><br><span class="line">&gt;&gt;&gt; SELECT t_user.user_name AS t_user_user_name FROM t_user WHERE t_user.user_email LIKE &apos;%gmail%&apos;</span><br><span class="line">于是改成</span><br><span class="line">&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;%gmail%&quot;)).all()</span><br><span class="line">2018-07-15 13:54:08,541 INFO sqlalchemy.engine.base.Engine SELECT t_user.user_name AS t_user_user_name</span><br><span class="line">FROM t_user</span><br><span class="line">WHERE t_user.user_email LIKE %(user_email_1)s</span><br><span class="line">2018-07-15 13:54:08,542 INFO sqlalchemy.engine.base.Engine &#123;&apos;user_email_1&apos;: &apos;%gmail%&apos;&#125;</span><br><span class="line">[(&apos;Tim&apos;,), (&apos;Django&apos;,), (&apos;Sally&apos;,), (&apos;john&apos;,)]</span><br><span class="line"></span><br><span class="line">### 分页接口，limit,count这种怎么写？</span><br><span class="line">用标准的limit,count似乎并不困难</span><br><span class="line">&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;%gmail%&quot;)).limit(1).all()</span><br><span class="line">[(&apos;Tim&apos;,)]</span><br><span class="line">&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;%gmail%&quot;)).limit(1).offset(2).all()</span><br><span class="line">[(&apos;Sally&apos;,)]</span><br><span class="line">offset超出了实际数据的总量如何？</span><br><span class="line">&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;%gmail%&quot;)).limit(1).offset(10).all()</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">除了标准的limit方法以外，下面这个paginate方法返回了一个pagination object</span><br><span class="line">&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;%gmail%&quot;)).paginate(2,1,False).items</span><br></pre></td></tr></table></figure></p><p><a href="https://www.jianshu.com/p/7d1b6db64a8f">MYSQL分页limit速度太慢优化方法</a></p><h2 id="Many-to-many-relationship"><a href="#Many-to-many-relationship" class="headerlink" title="Many to many relationship"></a>Many to many relationship</h2><p>添加新的model的时候，旧的model import会报错<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"nodes"</span></span><br><span class="line">    __table_args__ = &#123;<span class="string">"useexisting"</span>: <span class="keyword">True</span>&#125; <span class="comment">## 关键是这个</span></span><br></pre></td></tr></table></figure></p><p>这样db.create_all()的时候也不会去动现有的表里面的数据</p><p><a href="https://stackoverflow.com/questions/25668092/flask-sqlalchemy-many-to-many-insert-data">many-to-many-relationship依赖于第三张表</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">association_table = db.Table(<span class="string">'association'</span>, db.Model.metadata,</span><br><span class="line">    db.Column(<span class="string">'left_id'</span>, db.Integer, db.ForeignKey(<span class="string">'left.id'</span>)),</span><br><span class="line">    db.Column(<span class="string">'right_id'</span>, db.Integer, db.ForeignKey(<span class="string">'right.id'</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'left'</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    children = db.relationship(<span class="string">"Child"</span>,</span><br><span class="line">                    secondary=association_table)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'right'</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加数据</span></span><br><span class="line">p = Parent()</span><br><span class="line">c = Child()</span><br><span class="line">p.children.append(c)</span><br><span class="line">db.session.add(p)</span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student_identifier = db.Table(<span class="string">'student_identifier'</span>,</span><br><span class="line">    db.Column(<span class="string">'class_id'</span>, db.Integer, db.ForeignKey(<span class="string">'classes.class_id'</span>)),</span><br><span class="line">    db.Column(<span class="string">'user_id'</span>, db.Integer, db.ForeignKey(<span class="string">'students.user_id'</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'students'</span></span><br><span class="line">    user_id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    user_fistName = db.Column(db.String(<span class="number">64</span>))</span><br><span class="line">    user_lastName = db.Column(db.String(<span class="number">64</span>))</span><br><span class="line">    user_email = db.Column(db.String(<span class="number">128</span>), unique=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'classes'</span></span><br><span class="line">    class_id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    class_name = db.Column(db.String(<span class="number">128</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    children = db.relationship(<span class="string">"Student"</span>,</span><br><span class="line">                    secondary=student_identifier)</span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">c = Class()</span><br><span class="line">c.children.append(s)</span><br><span class="line">db.session.add(c)</span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查询数据</span></span><br><span class="line">db.session.query(Class).all()[<span class="number">0</span>].children <span class="comment">##得到一个Student的list</span></span><br><span class="line">Class.query.with_parent(user_id) <span class="comment">## 获得一个student上的所有课程</span></span><br></pre></td></tr></table></figure></p><p>有时候用db.session.query去查，有时候用Model.query去查</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.sqlalchemy.org/en/latest/orm/tutorial.html">tutorials</a><br><a href="http://docs.sqlalchemy.org/en/latest/orm/query.html">queryapi</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;pip install SQLAlchemy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/side_walk_tree.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
      <category term="sql" scheme="https://haldir65.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>django学习记录</title>
    <link href="https://haldir65.github.io/2018/06/12/2018-06-12-django-the-pony/"/>
    <id>https://haldir65.github.io/2018/06/12/2018-06-12-django-the-pony/</id>
    <published>2018-06-12T22:40:01.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.haldir66.ga/static/imgs/djangopony-slide.png" alt=""></p><a id="more"></a><p>首先是几个常用命令<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --no-site-packages venv <span class="comment">## virtualenv好习惯</span></span><br><span class="line">source venv/bin/activate <span class="comment">## windows下应该是Scripts/activate.bat这个文件</span></span><br><span class="line">deactivate <span class="comment">## 退出</span></span><br><span class="line"></span><br><span class="line">python manage.py mkemigrations app1 app2</span><br><span class="line">python manage.py migrate</span><br><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line">django-admin startproject  mysite <span class="comment">## 创建项目</span></span><br><span class="line">django-admin startapp  app1 <span class="comment">## 创建app</span></span><br><span class="line"></span><br><span class="line">python manage.py runserver <span class="comment">## 本地运行，默认8000端口</span></span><br><span class="line">python manage.py runserver <span class="number">8080</span>  <span class="comment">## 端口也可以自己决定</span></span><br><span class="line"></span><br><span class="line">python manage.py migrate <span class="comment">##创建了新的model，数据库需要建表</span></span><br><span class="line">python manage.py createsuperuser <span class="comment">## 创建admin</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是，runserver命令多数情况下能够实现自动reload，比如修改了一个py文件。但如果是创建了一个新的文件，还是需要重新跑一遍的</p><blockquote><p>settings.py中的SECRET_KEY不应该对外公布</p></blockquote><p>models简化了建表操作，添加的<strong>str</strong>方法类似于将Object类型的数据展示为String的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure></p><p>官方tutorial中的url和view的匹配也很简单<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s."</span> % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    response = <span class="string">"You're looking at the results of question %s."</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>安装mysql:<br>首先是virtualenv<br>pip install mysql-connector-python  mysql-connector-python</p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-applications-using-uwsgi-web-server-with-nginx">在ununtu上使用uwsgi和nginx运行django application</a></p><p>uwsgi.conf文件里面需要注意的有这么一条<br>[uwsgi]<br>module = somefile:app ## 当前目录下有一个somefile.py文件，里面有一个app = Flask(<strong>name</strong>)</p><p>requirements.txt的生成和使用<br>当然都要在virtualenv中了</p><blockquote><p>(venv) $ pip freeze &gt; requirements.txt # 创建<br>(venv) $ pip install -r requirements.txt ##使用</p></blockquote><h3 id="127-0-0-1和0-0-0-0的区别"><a href="#127-0-0-1和0-0-0-0的区别" class="headerlink" title="127.0.0.1和0.0.0.0的区别"></a>127.0.0.1和0.0.0.0的区别</h3><p>我尝试在vps(216.216.216.216)上运行django应用</p><blockquote><p>python manage.py 17289 ##随便挑一个端口<br>curl localhost:17289 ## 网页的html response展示出来</p></blockquote><p>于是尝试在本地windows上浏览器中输入</p><blockquote><p>216.216.216.216:17289 </p></blockquote><p>没反应，使用postman，没效果。本地curl，curl –trace 依旧没效果。看下防火墙<br>sudo uwf status  # inactive<br>最终找到了<a href="https://stackoverflow.com/questions/47675934/running-django-server-on-localhost">running-django-server-on-localhost</a></p><p>其实只要改用0.0.0.0就可以了</p><blockquote><p>python manage.py runserver 0.0.0.0:8000<br>python manage.py runserver HERE.IS.MY.IP:8000 #或者使用实际的地址</p></blockquote><p><a href="https://serverfault.com/questions/78048/whats-the-difference-between-ip-address-0-0-0-0-and-127-0-0-1">whats-the-difference-between-ip-address-0-0-0-0-and-127-0-0-1</a></p><blockquote><p>In simple terms: Listening on 0.0.0.0 means listening from anywhere that has network access to this computer, for example, from this very computer, from local network or from the Internet, while listening on 127.0.0.1 means only listen from this very computer</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line">python manage.py plus_shell</span><br></pre></td></tr></table></figure><p><a href="http://www.django-rest-framework.org/">drf官方文档</a></p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-applications-using-uwsgi-web-server-with-nginx">在ubuntu服务器上搭配nginx部署django应用</a><br>创建一个myconf.ini文件</p><blockquote><p>uwsgi –ini myconf.ini</p></blockquote><p><img src="https://www.haldir66.ga/static/imgs/food-salad-instagram-hunger-city-life.jpg" alt=""></p><p>还有，多数时候会热更新，但比如我更改了PaginationClass，还是得重新runserver才能获得理想的结果</p><p><a href="https://stackoverflow.com/questions/23153040/django-rest-framework-create-objects-passed-as-a-list-attribute-of-nested-obje">目前DRF不支持通过一个Post请求创建一个list of nested objects</a></p><p>自定义接口返回格式<br>ListCreateAPIView中override create方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> serializer.is_valid(raise_exception=<span class="keyword">False</span>):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"Fail"</span>: <span class="string">"blablal"</span>, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">        self.perform_create(serializer)</span><br><span class="line">        headers = self.get_success_headers(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"Success"</span>: <span class="string">"msb blablabla"</span>&#125;, status=status.HTTP_201_CREATED, headers=headers)</span><br></pre></td></tr></table></figure></p><p>post和get请求都变得非常轻松<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountryView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        snippets = County.objects.all()</span><br><span class="line">        serializer = CountySimpleSerilizer(snippets, many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        serializer = CountySimpleSerilizer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> responses.JsonResponse(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> responses.JsonResponse(data=&#123;<span class="string">"name"</span>,<span class="string">"bad post request"</span>&#125;, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure></p><blockquote><p>python manage.py dbshell ##用于在命令行中直接查看数据库<br>.help 查看在这个shell中可以用的一些操作<br>.tables  查看当前创建的所有的表 这个不要加分号<br>DROP TABLE appname_model; 删表 这个要加分号</p></blockquote><p>注意，删了表之后，还得把对应的migrations中的文件删掉，否则migrate无效</p><p>pk其实就是primary_key的意思<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object.objects.get(id=<span class="number">1</span>)</span><br><span class="line">Object.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 看清楚了，是两个下划线</span></span><br><span class="line">User.objects.filter(pk__in=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">User.objects.filter(pk__gt=<span class="number">10</span>)  </span><br><span class="line">User.objects.filter(pk__lt=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><p><a href="http://www.django-rest-framework.org/api-guide/relations/">nested relations</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;detail&quot;: &quot;Method \&quot;GET\&quot; not allowed.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随便继承一个APIView，只写了post方法，使用GET方法就会得到这个response</p><p>urlPatterns的一些东西<br><a href="https://stackoverflow.com/questions/3675368/django-url-pattern-for-20">如果url中有空格的话就直接换成%20</a><br>urls.py里面写的主要是一堆正则表达式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^profiles/(?P&lt;username&gt;[\w\ ]+)/?$'</span>, ProfileRetrieveAPIView.as_view()),</span><br><span class="line">    url(<span class="string">r'^profiles/(?P&lt;username&gt;\w+)/follow/?$'</span>, </span><br><span class="line">        ProfileFollowAPIView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>第一行的意思是访问 /profiles/你想要查找的userName 这个链接就会交给后面这个View</p><p>lookup_field和lookup_url_kwarg都是定义在GenericApiView这个Class上的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(views.APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Base class for all other generic views.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = <span class="keyword">None</span></span><br><span class="line">    serializer_class = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you want to use object lookups other than pk, set 'lookup_field'.</span></span><br><span class="line">    <span class="comment"># For more complex lookup requirements override `get_object()`.</span></span><br><span class="line">    lookup_field = <span class="string">'pk'</span></span><br><span class="line">    lookup_url_kwarg = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The filter backend classes to use for queryset filtering</span></span><br><span class="line">    filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The style to use for queryset pagination.</span></span><br><span class="line">    pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br></pre></td></tr></table></figure></p><p>rest-framework的文档是这么说的</p><blockquote><p>lookup_field - The model field that should be used to for performing object lookup of individual model instances. Defaults to ‘pk’. Note that when using hyperlinked APIs you’ll need to ensure that both the API views and the serializer classes set the lookup fields if you need to use a custom value.<br>lookup_url_kwarg - The URL keyword argument that should be used for object lookup. The URL conf should include a keyword argument corresponding to this value. If unset this defaults to using the same value as lookup_field</p></blockquote><p>简言之，就是lookup_field就是把url里面传进来的参数当做model的什么field来查，比如model是Customer，primarykey是customername，默认的lookup_field就是这个主键。客户端的url需要传上来一个customername，然后就会根据这个customername去Customer.objects.filter(customername=”xxx”)去找。如果定义lookup_field为customer_age，就会把客户端传上来的参数当做一个customer_age去查找,Customer.objects.filter(customer_age=”xxx”)</p><p>关于这个继承关系，CreateAPIView，ListAPIView，RetrieveAPIView，DestroyAPIView这些全都是继承了GenericAPIView，并各自继承了mixin，扩展出post,get,post,delete等方法。</p><p>mixins.ListModelMixin，定义了一个list方法，返回一个queryset列表，对应GET方法<br>mixins.CreateModelMixin，定义了一个create方法，创建一个实例，对应POST请求<br>mixins.RetrieveModelMixin，定义了一个retrieve方法，对应GET请求<br>mixins.UpdateModelMixin，定义一个update方法，对应PUT/PATCH请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##在models的Filed中定义一个</span></span><br><span class="line">createdAt = serializers.SerializerMethodField(method_name=<span class="string">'get_created_at'</span>) <span class="comment">##意味着这个field要调用一个自定义的方法去获取</span></span><br><span class="line">updatedAt = serializers.SerializerMethodField(method_name=<span class="string">'get_updated_at'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##filed还有一个source的概念: The name of the attribute that will be used to populate the field.  默认是这个field的name，比如可以定义为model的一个方法，也可以定义为一个model的field</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##serializer里面可以自定义model中不存在的field</span></span><br><span class="line">customField = RelatedField(many=<span class="keyword">True</span>, required=<span class="keyword">False</span>, source=<span class="string">'tags'</span>) <span class="comment">## 这个tags是存在的，customField是不存在这个model中的</span></span><br><span class="line"><span class="comment">##这样做就很有意思了，因为从数据库里查出来的object可能就那么点信息，客户端希望后台在response中添加一些原本不存在于数据库model中的信息。就可以在某个已有变量的基础上扩展新的response 数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 这里的insatnce是Serializer的model的实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_created_at</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> instance.created_at.isoformat()</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/13471083/how-to-extend-model-on-serializer-level-with-django-rest-framework">在serializer层面为model添加field</a>。这里面要注意field还有read-only和write-only等区别<br>关于slugFiled</p><blockquote><p>from django.utils.text import<br>Well, if we give a string like ‘The new article title’ to slugify(), it returns ‘the-new-article-title’. Simple.</p></blockquote><p>slugField主要是为了让url好看点</p><blockquote><p>Slugs are created mostly for the purpose of creating a nice, clean URL.<br>Say for example, you have a site of user-generated posts, such as stackoverflow or quora.<br>A user starts a post that has a title.<br>Each post creates a separate web page based on the title.<br>Now if a user asks the question, “How do you slugify text in Python”<br>If a URL is created for this question, as is, with the spaces in them, the browser will insert %20 in place of each space. Therefore, the URL will be, How%20do%20you%20slugify%20text%20in%20Python<br>This will work, but it looks extremely ugly and isn’t very human readable.<br>So instead of having spaces in a URL, a slugified text is created that contains no spaces. Instead of spaces there are “-“ instead. Therefore, the URL will be, How-do-you-slugify-text-in-Python<br>This looks much cleaner and is much more human readable.</p></blockquote><p>drf 的authorization默认需要是这样的:</p><blockquote><p>Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b<br>Note: If you want to use a different keyword in the header, such as Bearer, simply subclass TokenAuthentication and set the keyword class variable.<br>If successfully authenticated, TokenAuthentication provides the following credentials.<br>request.user will be a Django User instance.<br>request.auth will be a rest_framework.authtoken.models.Token instance.</p></blockquote><h3 id="jwt的logout或者踢人怎么做"><a href="#jwt的logout或者踢人怎么做" class="headerlink" title="jwt的logout或者踢人怎么做"></a>jwt的logout或者踢人怎么做</h3><p><a href="https://stackoverflow.com/questions/40604877/how-to-delete-a-django-jwt-token">首先Token是放在内存里而不是db里的，另外要踢人的话，手动给这个user生成一个新的token</a><br>搞清楚，踢人是服务器这边做(创建个新的Token或者让原有Token无效)，logout是客户端那边做(删除客户端本地存储的Token)。<br>在html里面删掉Token可以这么干<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.cookie = <span class="string">"token=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/"</span>;</span></span><br><span class="line"><span class="javascript">location.href=<span class="string">"/accounts/auth/"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>对，就是简单的把token置空就行了</p><p>代码里认证的地方取的Header是WWW-Authenticate XXX，但客户端传的是Authorization。估计这是wsgi协议<a href="http://wsgi.readthedocs.io/en/latest/specifications/simple_authentication.html">文档在这里</a>相关的，记得Nginx好像也有这样的设定。<br>WWW-Authenticate: Token</p><p>从<a href="https://docs.djangoproject.com/en/2.0/topics/http/urls/">django urlconf中抄来这些代码</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/'</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/'</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/'</span>, views.article_detail),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">##底下这个和上面的差不多，底下用的是re_path，使用正则，年份只能四位，传给view的参数类型始终是str。还是有点小区别</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.year_archive),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$'</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[\w-]+)/$'</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>关于performance的issue，参考<a href="http://ses4j.github.io/2015/11/23/optimizing-slow-django-rest-framework-performance/">这里</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment"># This can kill performance!</span></span><br><span class="line">    order_descriptions = serializers.StringRelatedField(many=<span class="keyword">True</span>) </span><br><span class="line">    <span class="comment"># So can this, same exact problem...</span></span><br><span class="line">    orders = OrderSerializer(many=<span class="keyword">True</span>, read_only=<span class="keyword">True</span>) <span class="comment"># This can kill performance!</span></span><br></pre></td></tr></table></figure></p><blockquote><p>The code inside DRF that populates either CustomerSerializer does this:<br>Fetch all customers. (Requires a round-trip to the database.)<br>For the first returned customer, fetch their orders. (Requires another round-trip to the database.)<br>For the second returned customer, fetch its orders. (Requires another round-trip to the database.)<br>For the third returned customer, fetch its orders. (Requires another round-trip to the database.)<br>For the fourth returned customer, fetch its orders. (Requires another round-trip to the database.)<br>For the fifth returned customer, fetch its orders. (Requires another round-trip to the database.)<br>For the sixth returned customer, fetch its orders. (Requires another round-trip to the database.)<br>… you get the idea. Lets hope you don’t have too many customers!</p></blockquote><p>所以要是有50个customer，就要执行50次查询，加上第一次获取所有Customer的数据库query。</p><p>优化后的代码只需要走2次数据库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryset = queryset.prefetch_related(<span class="string">'orders'</span>) <span class="comment">##干两件事，一个是获取所有user，一个是获取这些user的orer集合，一共就两次sql执行</span></span><br></pre></td></tr></table></figure></p><p>其实这些东西在<a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related">Django official document</a>里面都提到过。</p><p>另外的优化就是用redis了,比如说<a href="https://realpython.com/caching-in-django-with-redis/">Caching in Django With Redis</a></p><blockquote><p>pip install django-redis </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django_redis.cache.RedisCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'127.0.0.1:6379'</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## python manage.py shell 开一个shell，记得先把redis的server跑起来</span></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache <span class="comment">#引入缓存模块</span></span><br><span class="line">cache.set(<span class="string">'k'</span>, <span class="string">'12314'</span>, <span class="number">30</span>*<span class="number">60</span>)      <span class="comment">#写入key为k，值为12314的缓存，有效期30分钟</span></span><br><span class="line">cache.has_key(<span class="string">'k'</span>) <span class="comment">#判断key为k是否存在</span></span><br><span class="line">cache.get(<span class="string">'k'</span>)     <span class="comment">#获取key为k的缓存</span></span><br></pre></td></tr></table></figure><p>一切OK的话说明可以用了</p><p>view.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> CourseSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Course</span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data_from_db</span><span class="params">(criteria_name)</span>:</span></span><br><span class="line">    course = Course.objects.get(criteria=criteria_name)</span><br><span class="line">    <span class="keyword">return</span> course</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_readed_cache</span><span class="params">(criteria_name)</span>:</span></span><br><span class="line">    <span class="comment">#判断键是否存在</span></span><br><span class="line">    key = <span class="string">'_key_course_query_criteria_'</span>+criteria_name</span><br><span class="line">    <span class="keyword">if</span> cache.has_key(key):</span><br><span class="line">        data = cache.get(key)</span><br><span class="line">        print(<span class="string">'cache hit'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#不存在，则获取数据，并写入缓存</span></span><br><span class="line">        data = get_data_from_db(criteria_name)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#写入缓存</span></span><br><span class="line">        cache.set(key, data, <span class="number">3600</span>-int(time.time() % <span class="number">3600</span>))</span><br><span class="line">        print(<span class="string">'sorry , no cache'</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,format=None)</span>:</span></span><br><span class="line">        serializer = CourseSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data,status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">"msg"</span>:<span class="string">"invalid data"</span>&#125;,status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        critia = request.query_params.get(<span class="string">'criteria'</span>,<span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> critia:</span><br><span class="line">            cached_data = get_readed_cache(critia)</span><br><span class="line">            course = cached_data</span><br><span class="line">            <span class="keyword">if</span> course:</span><br><span class="line">                serializer = CourseSerializer(course)</span><br><span class="line">                <span class="keyword">return</span> Response(serializer.data,status=status.HTTP_200_OK)    </span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">"not found"</span>,status=status.HTTP_404_NOT_FOUND)</span><br></pre></td></tr></table></figure></p><p><a href="https://books.agiliq.com/projects/django-admin-cookbook/en/latest/change_text.html">drf默认的admin pannel可以自定义样式和功能</a><br><a href="https://simpleisbetterthancomplex.com/tutorial/2016/08/01/how-to-upload-files-with-django.html">这人的博客不错</a></p><p><a href="https://stackoverflow.com/questions/42080864/set-in-django-for-a-queryset">querySet里面有一个_set</a><br>在moderl中没有声明related_name的情况下，需要通过_set来反向查找model</p><blockquote><p>For example, if Product had a many-to-many relationship with User, named purchase, you might want to write a view like this:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchasedProductsList</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return a list of all the products that the authenticated</span></span><br><span class="line"><span class="string">    user has ever purchased, with optional filtering.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    model = Product</span><br><span class="line">    serializer_class = ProductSerializer</span><br><span class="line">    filter_class = ProductFilter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        user = self.request.user</span><br><span class="line">        <span class="keyword">return</span> user.purchase_set.all()</span><br></pre></td></tr></table></figure><p>filter_backend是定义在GenericAPIView中的，所以要使用这个属性得用GenericAPIView</p><p><a href="http://www.django-rest-framework.org/api-guide/relations/">nested relations</a></p><p>json web token authentication</p><blockquote><p>pip install djangorestframework-jwt</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##settings.py</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="comment"># 'rest_framework.authentication.TokenAuthentication',</span></span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,  <span class="comment"># 加入此行</span></span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">true...</span><br><span class="line">    <span class="comment"># url(r'api-auth-token/', authtoken_views.obtain_auth_token),  # drf自带的token认证</span></span><br><span class="line">    url(<span class="string">r'login/'</span>, jwt_authtoken_views.obtain_jwt_token),       <span class="comment"># 加此行，jwt认证</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后通过post请求127.0.0.1/login/,body中添加username和password<br>得到这样的response<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"token"</span>: <span class="string">"someweirdwords---------"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下次请求的时候带上这个Header就好了<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"Authorization": "JWT someweirdwords---------"</span><br></pre></td></tr></table></figure></p><p>通过manage.py创建user的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user@host&gt; manage.py shell</span><br><span class="line">&gt;&gt;&gt; from django.contrib.auth.models import User</span><br><span class="line">&gt;&gt;&gt; user=User.objects.create_user(&apos;John&apos;, password=&apos;password123&apos;)</span><br><span class="line">&gt;&gt;&gt; user.is_superuser=False</span><br><span class="line">&gt;&gt;&gt; user.is_staff=False</span><br><span class="line">&gt;&gt;&gt; user.save()</span><br></pre></td></tr></table></figure></p><p>用jwt去请求需要authentication的接口时，header里面得带上一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Token 登录.接口.返回的token</span><br></pre></td></tr></table></figure></p><p>注意Token这个单词后面有一个空格</p><p><a href="https://realpython.com/caching-in-django-with-redis/">caching django with redis</a><br><a href="https://realpython.com/django-redirects/#redirects-that-just-wont-redirect">redirect in django</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/djangopony-slide.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
      <category term="django" scheme="https://haldir65.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>网络通信手册-2</title>
    <link href="https://haldir65.github.io/2018/04/26/2018-04-26-network-manual-2/"/>
    <id>https://haldir65.github.io/2018/04/26/2018-04-26-network-manual-2/</id>
    <published>2018-04-26T13:00:02.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p>OkHttp通过ConnectionPool做到tcp连接复用（在Timeout内）,所以并不是每个http都去建立一个tcp连接<br>自定义通讯协议，使用java socket实现客户端和服务端。需要注意的是分包问题和黏包问题<br><img src="https://www.haldir66.ga/static/imgs/jpglight-and-shadow-2411321_960_720.jpg" alt=""><br><a id="more"></a></p><h2 id="1-http请求中tcp连接的复用-深入okHttp-3-9-1的connectionPool以及引用计数"><a href="#1-http请求中tcp连接的复用-深入okHttp-3-9-1的connectionPool以及引用计数" class="headerlink" title="1. http请求中tcp连接的复用(深入okHttp 3.9.1的connectionPool以及引用计数)"></a>1. http请求中tcp连接的复用(深入okHttp 3.9.1的connectionPool以及引用计数)</h2><p>在高并发的请求连接情况下或者同个客户端多次频繁的请求操作，无限制的创建连接会导致性能低下。所以OkHttp做到了对socket的复用和及时清理。<br>从第四个intercepter开始<br>ConnectInterceptor.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">  Request request = realChain.request();</span><br><span class="line">  <span class="comment">// 第一步，获取streamAllocation</span></span><br><span class="line">  StreamAllocation streamAllocation = realChain.streamAllocation();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We need the network to satisfy this request. Possibly for validating a conditional GET.</span></span><br><span class="line">  <span class="keyword">boolean</span> doExtensiveHealthChecks = !request.method().equals(<span class="string">"GET"</span>);</span><br><span class="line">  <span class="comment">// 第二步，使用streamAllocation创建(或者复用)一个httpCodec模型（即处理header和body的读写策略，具体实现包括Http1Codec和Http2Codec）</span></span><br><span class="line">  HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);</span><br><span class="line">  <span class="comment">// 第三部，挑选出RealConnection,streamAllocation对象中的mConnection变量是在第二步里面赋值的</span></span><br><span class="line">  RealConnection connection = streamAllocation.connection();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> realChain.proceed(request, streamAllocation, httpCodec, connection);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以socket连接复用就在这句话里面了</p><blockquote><p>HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);</p></blockquote><p>StreamAllocation.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> HttpCodec <span class="title">newStream</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    OkHttpClient client, Interceptor.Chain chain, <span class="keyword">boolean</span> doExtensiveHealthChecks)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 省略部分，主要是这两句话</span></span><br><span class="line">      RealConnection resultConnection = findHealthyConnection(connectTimeout, readTimeout,</span><br><span class="line">               writeTimeout, connectionRetryEnabled, doExtensiveHealthChecks);</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      HttpCodec resultCodec = resultConnection.newCodec(client, chain, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>findHealthyConnection最终走到这里<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Attempt to get a connection from the pool.</span></span><br><span class="line"><span class="keyword">for</span> (RealConnection connection : connections) &#123;</span><br><span class="line">    <span class="keyword">if</span> (connection.isEligible(address, route)) &#123;</span><br><span class="line">      streamAllocation.acquire(connection, <span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否isEligible的方法在RealConnection里面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// If the non-host fields of the address don't overlap, we're done.</span></span><br><span class="line"> <span class="keyword">if</span> (!Internal.instance.equalsNonHost(<span class="keyword">this</span>.route.address(), address)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 只要DNS,port,protocols等host无关的参数中有一个不同就不能复用</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// If the host exactly matches, we're done: this connection can carry the address.</span></span><br><span class="line"> <span class="keyword">if</span> (address.url().host().equals(<span class="keyword">this</span>.route().address().url().host())) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// This connection is a perfect match.</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 这里说明host是相同的，上面的DNS什么的都是一样的，只有后面的path,query或者RequestBody不同，那么直接复用</span></span><br></pre></td></tr></table></figure></p><p>所以这里socket复用的方式是直接使用RealConnection持有Socket对象的引用，每一次在RealConnection的connect成功后，都会讲这个socket包装成一个BufferedSource(读取Response)和BufferedSink(往外写Request)，在timeout时长内，socket不会被关闭。既然缓存就一定会有清理</p><p>在上面的findHealthyConnection中有一段</p><blockquote><p>streamAllocation.acquire(connection, true);</p></blockquote><p>这里面的作用就是将这条请求（Stream）添加到当前连接承载的一个List&lt;Reference<StreamAllocation>&gt;中，也就是所谓的引用计数。提到这一点是要谈到清理的实现：<br>ConnectionPool中有一个Executor，目的就是执行一个cleanupRunnable的Runnable，这里面的清理操作大致如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">cleanup</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Find either a connection to evict, or the time that the next eviction is due.</span></span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">     <span class="keyword">for</span> (Iterator&lt;RealConnection&gt; i = connections.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">       RealConnection connection = i.next();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// If the connection is in use, keep searching.</span></span><br><span class="line">       <span class="keyword">if</span> (pruneAndGetAllocationCount(connection, now) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         inUseConnectionCount++; <span class="comment">//这条连接还在用</span></span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       idleConnectionCount++; <span class="comment">//这条连接现在空闲下来了</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// If the connection is ready to be evicted, we're done.</span></span><br><span class="line">       <span class="keyword">long</span> idleDurationNs = now - connection.idleAtNanos;<span class="comment">// 这条连接已经多久没用到了，假如超过了闲置时间(默认5纳秒)，就准备干掉这个socket</span></span><br><span class="line">       <span class="keyword">if</span> (idleDurationNs &gt; longestIdleDurationNs) &#123;</span><br><span class="line">         longestIdleDurationNs = idleDurationNs;</span><br><span class="line">         longestIdleConnection = connection;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">       <span class="comment">// We've found a connection to evict. Remove it from the list, then close it below (outside</span></span><br><span class="line">       <span class="comment">// of the synchronized block).</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// A connection will be ready to evict soon.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// All connections are in use. It'll be at least the keep alive duration 'til we run again.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// No connections, idle or in use.</span></span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 在这前面如果找不到一条该被干掉的连接，直接return</span></span><br><span class="line">   closeQuietly(longestIdleConnection.socket());<span class="comment">// 这里面就是socket.close了</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Cleanup again immediately.</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>观察一下ConnectionPool的构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Create a new connection pool with tuning parameters appropriate for a single-user application.</span></span><br><span class="line"><span class="comment">  * The tuning parameters in this pool are subject to change in future OkHttp releases. Currently</span></span><br><span class="line"><span class="comment">  * this pool holds up to 5 idle connections which will be evicted after 5 minutes of inactivity.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// 最多保留5条闲置RealConnection(也就是底层5个Socket),每个连接(Socket)如果超过5分钟没有接客，直接干掉</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(<span class="number">5</span>, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>所以，在创建Client的时候，可以把socket的缓存数量写大一点，也可以自定义一个ConnectionPool，只要实现了put,get,remove等标准的CRD操作就行了。简单来说就是自己设计一个Cache，我觉得可以根据实际的endpoint数量来设定缓存的socket的数量。</p><h2 id="2-自定义通讯协议"><a href="#2-自定义通讯协议" class="headerlink" title="2. 自定义通讯协议"></a>2. 自定义通讯协议</h2><p>http这种属于应用层的协议定义了每个数据包的结构是怎样的。在一些场合下，比如追求通讯速度，自定义加密手段，可能需要自定义结构体。<br>自己用Socket实现一套server-clinent通讯模型其实不难。<br>server这边，先确定自己对外公布的ip,port。然后起一个serverSocket，死循环去accept，每次accept到一个就添加到一个列表中，同时用线程池去执行一个死跑从socket中read的runnable。<br>client这边，根据server的ip和port去连接上，client主动发消息(byte，int,String类型都行)，server这边读到信息，给出response，clinent再读取server的回话，就跟两个人之间你一句我一句说话一样。整个过程中 <strong>保持了长连接</strong>,只要任何一方没有手动设置socket.setSoTimeout的话，放一晚上都不会断开。</p><p>一个重点是双方发送的消息格式，即两个人交流的语言，如果全部是String的话，那就跟http很像了，当然任何数据格式从socket发出去最终都是以byte的形式发出去的(比如string会用utf-8或者gbk编码成byte数组)。<br>google的protoBuffer最重要的两个方法writeTo(object转成byte数组)和parseFrom(byte数组转成object)。</p><p><a href="https://blog.csdn.net/u010818425/article/details/53448817">基于Java Socket的自定义协议，实现Android与服务器的长连接（二）</a>，基于这篇文章，可以将数据类型定义为统一的protocol，protocol的要素包括:</p><blockquote><p>协议版本<br>数据类型（数据类协议，数据ack类协议，心跳类协议，心跳ack类协议）<br>数据长度(这很重要)<br>消息id<br>扩展字段</p></blockquote><p>协议版本要做到向后兼容，基本上只添加数据实体不删除数据实体就可以了<br>数据类型必需的三个要素是：<br><strong>长度，版本号，数据类型</strong> (比方说0表示业务数据，1表示数据ack,2表示心跳，3表示心跳ack)。<br>扩展字段类似于extra，可以用json或者别的什么去实现。</p><h2 id="3-tcp的分包和粘包问题"><a href="#3-tcp的分包和粘包问题" class="headerlink" title="3. tcp的分包和粘包问题"></a>3. tcp的分包和粘包问题</h2><p>tcp发包的时候，如果一个包过大，会拆成两个包发(分包)。如果太小，发送方会攒着和下一个包一起发（粘包），tcp为了提高效率(使用Nagle算法)会缓冲N个包后再一起发出去。作为接收方并不知道收到的包是一个完整的包还是被拆分的还是由两个包合并而来。</p><p>可能发生分包和粘包的原因包括：<br>1、要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</p><p>2、待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。</p><p>3、要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。</p><p>4、接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</p><p>我们都知道TCP属于传输层的协议，传输层除了有TCP协议外还有UDP协议。那么UDP是否会发生粘包或拆包的现象呢？答案是不会。UDP是基于报文发送的，从UDP的帧结构可以看出，在UDP首部采用了16bit来指示UDP数据报文的长度，因此在应用层能很好的将不同的数据报文区分开，从而避免粘包和拆包的问题。而TCP是基于字节流的，虽然应用层和TCP传输层之间的数据交互是大小不等的数据块，但是TCP把这些数据块仅仅看成一连串无结构的字节流，没有边界；另外从TCP的帧结构也可以看出，在TCP的首部没有表示数据长度的字段，基于上面两点，在使用TCP传输数据时，才有粘包或者拆包现象发生的可能。</p><p>虽然有分包和粘包问题，但是作为传输层的tcp能够保证发送出去的顺序和接收到的顺序是一致的。<br>那么基本的解决方法也很成熟了：</p><blockquote><p>1、发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。<br>2、发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。<br>3、可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。</p></blockquote><p>另外，http协议是通过添加换行符“ /r/n”这种形式来解决上述问题的<br>参考<a href="https://blog.csdn.net/Scythe666/article/details/51996268">TCP粘包，拆包及解决方法</a></p><h2 id="4-java这边socket的inputStream的read方法是会堵塞的"><a href="#4-java这边socket的inputStream的read方法是会堵塞的" class="headerlink" title="4. java这边socket的inputStream的read方法是会堵塞的"></a>4. java这边socket的inputStream的read方法是会堵塞的</h2><p><a href="https://blog.csdn.net/cauchyweierstrass/article/details/49552053">就是read方法一直不返回</a>，Socket只是一座桥梁，并不像本地文件一样，所以无法知道对方是否把话说完了。只有一方调用socket的close方法时才会发送EOF结束符，另一方的read = -1 才能成立，否则read方法就堵塞在那里。<br>InputStream有一个available()方法：<br>an estimate of the number of bytes that can be read (or skipped<br>over) from this input stream without blocking or  0 when it reaches the end of the input stream.<br>oves) 。不要把这个方法中的返回值当做这个流中所有可能数据的总和(多数情况下这种猜测是错误的)。</p><p>tcp的backlog变量</p><p>建立TCP连接时需要发送同步SYN报文，然后等待确认报文SYN+ACK，最后再发送确认报文ACK。</p><p><strong>如果应用层不能及时接受已被TCP接受的连接，这些连接可能占满整个连接队列，新的连接请求可能不被响应而会超时。如果一个连接请求SYN发送后，一段时间后没有收到确认SYN+ACK，TCP会重传这个连接请求SYN两次，每次重传的时间间隔加倍，在规定的时间内仍没有收到SYN+ACK，TCP将放弃这个连接请求，连接建立就超时了。</strong></p><p><a href="https://blog.csdn.net/sureyonder/article/details/5633647">JAVA Socket超时浅析</a></p><p>BufferedWriter的主要原理是内部保留了一个char[]的数组，每次外部调用write的时候，不是直接写到underlying 的output中，而是system.arrayCopy到自己的char[]数组中，等发现char[]数组填满了，才去flushBuffer，就是把所有缓存的内容一次性写到底层的outputStream中。因为outputStream是一个字节一个字节去写的，每次写都要调用io操作，而io操作是很耗费资源的。所以bufferedWriter一次性写大量的数据，能够有效减少io次数，提高性能。</p><p><a href="https://zhuanlan.zhihu.com/p/36414915">以TCP/IP协议为例，如何通过wireshark抓包分析？</a></p><p><a href="http://chown-jane-y.coding.me/2017/07/21/%E4%BD%BF%E7%94%A8Nginx%E4%BB%A3%E7%90%86ws%E4%B8%BAwss%E5%8D%8F%E8%AE%AE/">使用Nginx代理ws为wss协议</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0">CRSF</a></p><p><a href="http://www.ruanyifeng.com/blog/2016/09/csp.html">Content Security Policy 入门教程</a><br>两种方式设置csp白名单，一种是服务器在response的header中添加’Content-Security-Policy’这个header，另一种是在html中写meta标签<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"script-src 'self'; object-src 'none'; style-src cdn.example.org third-party.org; child-src https:"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/19562501/ajax-what-is-the-default-character-encoding-for-http-header-values">http请求是一行一行的文字，contentType only affects the body/document.you can use any ISO-8859-1 characters in the header.</a>。ISO-8859-1不支持中文，所以header里面的东西不能写中文。<br>body和path里面随意了</p><p>//网页上传excel表格的header<br>Content-Disposition: form-data; name=”files[]” filename=”sample.xls”<br>Content-Type: application/vnd.ms-excel</p><p>html里面上传文件一般是ajax对象send一个FormData出去，<br>也有Base64编码一遍然后在<a href="http://www.nickdesteffen.com/blog/file-uploading-over-ajax-using-html5">服务端base64解码的</a>。主要是html5标准中添加了新的FileReader接口，可以读取客户端文件内容，所以很多开发就调用FileReader的readAsDataURL方法去将文件的内容变成<a href="https://en.wikipedia.org/wiki/Data_URI_scheme">DATA URL形式的字符串</a><br>不过这么干还是有缺点的</p><blockquote><ol><li>Data URL形式的图片不会被浏览器缓存，这意味着每次访问这样页面时都被下载一次，<br>但可通过在css文件的background-image样式规则使用Data URI Scheme，使其随css文件一同被浏览器缓存起来）。</li><li>Base64编码的数据体积通常是原数据的体积4/3，<br>也就是Data URL形式的图片会比二进制格式的图片体积大1/3。</li><li>移动端性能比较低。</li></ol></blockquote><p><a href="http://luodw.cc/2015/12/27/dns03/">域名解析之dig,host,nslookup命令</a><br>好用的命令</p><blockquote><p>dig +trace baidu.com<br>nslookup -vc google.com 8.8.8.8 // -vc是指强制走tcp查询dns<br>nslookup -d www.163.com //显示ttl<br>nslookup -&gt; set debug -&gt; www.163.com //这三条走完是一样的，类似于交互模式<br><a href="http://blogread.cn/it/article.php?id=5711">dig挖出DNS的秘密</a></p></blockquote><p><a href="http://www.runoob.com/http/http-content-type.html">详细的http-content-type表格</a><br>关于content-type,找到一篇<a href="http://homeway.me/2015/07/19/understand-http-about-content-type/">介绍</a><br>关于Http header常用字段<a href="http://zq210wl.github.io/2014/12/30/html-http-header-analysis/">理解Http Header</a><br>Http底层TCP ,ACK 等等需要tcpcump结合wireShark抓包</p><blockquote><p>下面是几个常见的Content-Type:<br>1.text/html<br>2.text/plain<br>3.text/css<br>4.text/javascript<br>5.application/x-www-form-urlencoded<br>6.multipart/form-data<br>7.application/json<br>8.application/xml<br>…<br>前面几个都很好理解，都是html，css，javascript的文件类型，后面四个是POST的发包方式。</p></blockquote><p><a href="https://www.sitepoint.com/mime-types-complete-list/">非官方的mime-type大全</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types">MDN上收录的mime-type</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Optionshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options:nosniff</a>.就是说服务器返回的Response中如果包含这个header的话，script和styleSheet元素会拒绝错误的MIME类型的响应。主要是为了防止给予MIME类型的混淆攻击</p><p>Referrer Policy: unsafe-url<br><a href="https://imququ.com/post/referrer-policy.html">unsafe-url</a><br>后台在response中返回一个302，并在response header中添加header:location。直接把前端网页重定向到新的位置</p><h2 id="服务器压测工具"><a href="#服务器压测工具" class="headerlink" title="服务器压测工具"></a>服务器压测工具</h2><p>参考<a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-load-testing">DigitalOcean的文章]</a></p><blockquote><p>npm install -g loadtest ##一个node的压力测试的web client<br>loadtest -n 100 -k  <a href="http://localhost:8000/api/somebackend">http://localhost:8000/api/somebackend</a> # -n表示发送100次 -k 表示keep-alive<br>loadtest -c 10 –rps 200 <a href="http://mysite.com/">http://mysite.com/</a>  # -c表示client，创建10个client ， –rsp表示每秒的请求数量<br>loadtest -k -H ‘Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8’ -H “User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36”  –rps 1 <a href="https://www.baidu.com/">https://www.baidu.com/</a><br>注意： 这种短期创建大量外网连接的行为会对路由器造成一定压力。。。。</p></blockquote><p>ab(ApacheBench) - a simple ,single-threaded command line tool for benchemarking an HTTP server.<br>因为是单线程的，所以并不能利用多核cpu的优势对server施加充分的负载。一般这么用</p><blockquote><p>ab -n 1000 -c 100 <a href="http://example.com/">http://example.com/</a><br>ab -n <num_requests> -c <concurrency> <addr>:<port><path></p></blockquote><p><a href="https://github.com/wg/wrk">属于netty的wrk</a></p><blockquote><p>wrk -H ‘Host: localhost’ -H ‘Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8’ -H ‘Connection: keep-alive’ -d 600 -c 1024 -t 8 <a href="http://127.0.0.1:8080/plaintext">http://127.0.0.1:8080/plaintext</a></p></blockquote><p>wrk -H ‘Host: localhost’ -H ‘Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8’ -H ‘Connection: keep-alive’ -d 600 -c 1024 -t 8 <a href="http://127.0.0.1:8080/plaintext">http://127.0.0.1:8080/plaintext</a></p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-traceroute-and-mtr-to-diagnose-network-issues">how-to-use-traceroute-and-mtr-to-diagnose-network-issues</a></p><p><a href="https://serverfault.com/questions/795467/for-what-is-the-well-known-folder">.well-known的意思</a>，其实就跟robot.txt差不多。一种为了能够在客户端发起请求(但此时并不清楚url空间的允许策略，贸然访问万一侵权了呢)获得一些有用的信息。于是RFC就提出来搞一个专门的.well-known的path，这下面的位置都是广而周知的，大家都知道是特定的用途的。</p><p><a href="https://www.jianshu.com/p/a7ccaef0f465">已经有人对shadowsocks的源码进行了分析</a></p><p>nc其实就是netcat了，功能比较强大<br>nc -vz 192.168.0.181 20060 //测试TCP端口可用性的方法<br>nc -vuz IP port //测试udp端口可用性的方式，但实际测下来，就算server上udp port没开，还是会返回succeeded，所以这个也不可靠</p><p>netcat还可以实现udp聊天<br>服务器上<br>nc -ul 1080 // 会卡在这里，等待新的消息到达1080端口<br>//客户端这边<br>nc -u x.x.x.x 1080 //也会卡在这里，不过可以输入文字，按下回车，服务器这边就能收到消息了</p><p>wget –spider www.baidu.com //wget还有一个spider模式</p><p>“ping -l 1472 -f www.baidu.com”<br><a href="http://yangtai.xunlei.com/?p=1326&amp;cpage=6">udp的MTU参数</a></p><p>美团的技术博客还不错<br><a href="https://tech.meituan.com/fe_security_csrf.html">前端安全系列之二：如何防止CSRF攻击？</a></p><p><a href="https://stackoverflow.com/questions/499591/are-https-urls-encrypted">https的url是加密的吗？</a>是的，<br>所以你可以把账户密码写在url后面发出去，这样是安全的，外界无法截获你的隐私信息.<br>但着实不应该这样做，<br>在浏览器地址栏和浏览器历史记录里面都留下了账户密码。可能会在http的referer里面带上你的url和隐私信息<br>但是第一次client hello的时候host还是会明文写在包里,后面的query Parameters由于跟client hello无关，所以是加密的.<br><a href="https://en.wikipedia.org/wiki/Server_Name_Indication">Server Name Indication</a><br>SNI breaks the ‘host’ part of SSL encryption of URLs. You can test this yourself with wireshark. There is a selector for SNI</p><p>// http post请求，设置content-type = Application/json，body里面放一个int或者long，实际传输的是string还是long?(猜测是string，因为要走utf-8之类的encoding过一遍，因为http是text-based协议)<br>这事是有区别的，比如要post出去一个”6”，<br>字符串6的ascii码是<br>二进制：0011 0110<br>十进制：54<br>十六进制：36<br><strong>只需要一个字节</strong></p><p>int 类型数字6 在java里是4个字节，<br>在c语言里是2个或者四个字节。<br>那么这个数字再大一点呢<br>字符串66666666需要八个字节</p><p>int 类型数字66666666 在java里是4个字节，<br>在c语言里是2个或者四个字节。<br><strong>需要四个字节</strong></p><p>整体来讲，JSON 是文本的格式，整数和浮点数应该更占空间而且更费时。<br>这就涉及到json和protobuff等二级制协议的比对了，从上面来看，如果你的内容是整数或者浮点数比较多的话，一大长串的数字用string的话就得花上很多内存，但是用int或者float的话可能四个字节就搞定了。所以这事没法绝对的说</p><p>都知道传输的都是byte数组，猜测传的类型是文字形式的。因为读取的时候多数是utf-8形式的，没办法特意指出这块byte是int还是string的一部分</p><p>post一个json出去的时候<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;john&quot;&#125;</span><br><span class="line">//事实上在byte层面是发送了这么些byte</span><br><span class="line">123 &#123;</span><br><span class="line">34 &quot;</span><br><span class="line">110 n</span><br><span class="line">97 a</span><br><span class="line">109 m</span><br><span class="line">101 e</span><br><span class="line">34 &quot;</span><br><span class="line">58 :</span><br><span class="line">34 &quot;</span><br><span class="line">106 j</span><br><span class="line">111 0</span><br><span class="line">104 h</span><br><span class="line">110 n</span><br><span class="line">34 &quot;</span><br><span class="line">125 &#125;</span><br></pre></td></tr></table></figure></p><p>这些标点符号都发送出去了，也就是占用的.</p><p><a href="https://imququ.com/post/four-ways-to-post-data-in-http.html">四种常见的POST提交数据方式</a></p><p>application/x-www-form-urlencoded<br>multipart/form-data<br>application/json<br>text/xml</p><p>application/json的post请求的长这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: ...</span><br><span class="line">Content-Length:27</span><br><span class="line">Cookie: session=fsdaf;aaa=dfasf;......</span><br><span class="line"></span><br><span class="line">&#123;&quot;input1&quot;:&quot;xxx&quot;,&quot;input2&quot;:&quot;oo加密过的xxxxo&quot;,&quot;remember&quot;:false&#125;</span><br></pre></td></tr></table></figure></p><p>application/x-www-form-urlencoded(浏览器的原生 form 表单)的post请求的长这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: ...</span><br><span class="line">Content-Length:27</span><br><span class="line">Cookie: session=fsdaf;aaa=dfasf;......</span><br><span class="line"></span><br><span class="line">name=user&amp;password=password</span><br></pre></td></tr></table></figure></p><p>multipart/form-data:(表单格式的)这一种是表单格式的，数据类型如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: ...</span><br><span class="line">Content-Length:27</span><br><span class="line">Cookie: session=fsdaf;aaa=dfasf;......</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class="line"></span><br><span class="line">title</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line"></span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class="line"></span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">PNG ... content of chrome.png ...</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure></p><p>text/xml:这种直接传的xml的post请求的长这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: www.baidu.com</span><br><span class="line">User-Agent: ...</span><br><span class="line">Content-Length:27</span><br><span class="line">Cookie: session=fsdaf;aaa=dfasf;......</span><br><span class="line"></span><br><span class="line">&lt;!--?xml version=&quot;1.0&quot;?--&gt;</span><br><span class="line"></span><br><span class="line">&lt;methodcall&gt;</span><br><span class="line"></span><br><span class="line">&lt;methodname&gt;examples.getStateName&lt;/methodname&gt;</span><br><span class="line"></span><br><span class="line">&lt;params&gt;</span><br><span class="line"></span><br><span class="line">&lt;param&gt;</span><br><span class="line"></span><br><span class="line">&lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</span><br><span class="line"></span><br><span class="line">&lt;/params&gt;</span><br><span class="line"></span><br><span class="line">&lt;/methodcall&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data%3D%7B%22name%22%3A%22john%22%2C%22age%22%2C20%2C%22time%22%2C6%7D</span><br></pre></td></tr></table></figure><p>这种东西通常是懒得看的，<br>需要转码一下，粘贴到<a href="http://tool.oschina.net/encode?type=4">这个里面去就行了</a>，或者自己encodeURIComponent一下就好<br>其实是: data={“name”:”john”,”age”,20,”time”,6}</p><p><a href="https://borninsummer.com/2015/10/27/about-using-json-in-http-body/">出处</a></p><blockquote><p>HTTP 为超文本传输协议，整个的 HTTP 报文，如果按编程语言里面的类型来分的话，就是一大段字符串。值得注意的是，不像 JSON，application/x-www-form-urlencoded 的方式对复杂类型（例如数组）的处理，并没有严格的标准。有的接口使用 key[]=a&amp;key[]=b 来表示数组 key: [‘a’, ‘b’]，（这也是最常见的，jQuery、superagent等客户端会如此编码），有的库则将数组编码为：key=a&amp;key=b，有的则是携带下标进行编码：key[0]=a&amp;key[1]=b……十分混乱。所以如果是数组且数组的每一项为简单基本类型，而且非要用 application/x-www-form-urlencoded 进行序列化，那么不如用英文逗号分隔的字符串来表示。如果是嵌套对象……那么还是尽早使用 JSON 吧。</p></blockquote><p>jwt事实上就是服务器颁发给客户端一个加密后（只有server才能解密）的字符串，客户端每次请求的时候就在header里面带上这个字符串。<a href="https://blog.usejournal.com/sessionless-authentication-withe-jwts-with-node-express-passport-js-69b059e4b22c">sessionless-authentication-withe-jwts</a></p><blockquote><p>If an attacker somehow manages to steal a user’s JWT, then there’s unfortunately not much that can really be done. To minimize damages, you should design your application to require reauthentication before performing any high profile transaction such as a purchase or the changing of a password. And your JWTs should also have an expiration date. That way a compromised JWT will only work for so long.</p></blockquote><p>但是如果有人把这个header搞到，就能向服务器声称自己是该用户。服务器是只认这个jwt字符串不认人的，碰到这种情况其实也没什么解决办法，最多把jwt的有效期设置的短一点。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OkHttp通过ConnectionPool做到tcp连接复用（在Timeout内）,所以并不是每个http都去建立一个tcp连接&lt;br&gt;自定义通讯协议，使用java socket实现客户端和服务端。需要注意的是分包问题和黏包问题&lt;br&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/jpglight-and-shadow-2411321_960_720.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Android知识集合[四]</title>
    <link href="https://haldir65.github.io/2018/04/13/2018-04-13-android-cheat-sheet-four/"/>
    <id>https://haldir65.github.io/2018/04/13/2018-04-13-android-cheat-sheet-four/</id>
    <published>2018-04-13T13:53:52.000Z</published>
    <updated>2018-11-17T07:52:44.225Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.haldir66.ga/static/imgs/street%20lights%20dark%20night%20car%20city%20bw.jpg" alt=""></p><a id="more"></a><h2 id="1-在子线程中显示一个Toast是亲测可行的"><a href="#1-在子线程中显示一个Toast是亲测可行的" class="headerlink" title="1. 在子线程中显示一个Toast是亲测可行的"></a>1. 在子线程中显示一个Toast是亲测可行的</h2><p>不是那种post到主线程的方案<br><a href="https://www.zhihu.com/question/51099935">其实知乎上已经有了讨论</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     Context mContext;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ToastThread</span><span class="params">(Context mContext)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.mContext = mContext;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         Looper.prepare();</span><br><span class="line">         String threadId = String.valueOf(Thread.currentThread().getId());</span><br><span class="line">         Toast.makeText(mContext,threadId,Toast.LENGTH_SHORT).show();</span><br><span class="line">         Looper.loop();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://www.haldir66.ga/static/imgs/toast_transact.jpg" alt=""><br>其实Toast的原理就是通过IPC向NotificationManager请求加入队列，后者会检测权限xxxx。然后通过上面的ipc回调到客户端的onTransact中，这里也就是走到了Toast.TN这个static inner class的handler中，发送一个Message，handlerMessage中完成了WindowManager.addView的操作<br>需要注意的是，这里还是子线程，所以确实可能存在多条线程同时操作UI的现象。从形式上看，主线程和子线程中的Toast对象各自通过自己的Looper维护了一个消息循环队列，这其中的消息类型包括show,hide和cancel。所以可能存在多条线程同时调用WindowManager的方法，View也是每条线程各自独有的，最坏的场景莫过于两条线程同时各自添加了一个View到window上。另外，子线程中引入looper的形式也造成了子线程实质上的阻塞，当然可以直接当成一个handlerThread来用。<br>所以不是很推荐这么干，只是说可以做。<br><strong>Toast.TN.handleShow</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      mWM.addView(mView, mParams);</span><br><span class="line">      trySendAccessibilityEvent();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (WindowManager.BadTokenException e) &#123;</span><br><span class="line">      <span class="comment">/* ignore */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-ContentProvider的onCreate要早于Application的onCreate发生"><a href="#2-ContentProvider的onCreate要早于Application的onCreate发生" class="headerlink" title="2.ContentProvider的onCreate要早于Application的onCreate发生"></a>2.ContentProvider的onCreate要早于Application的onCreate发生</h2><p>比如ArchitectureComponent中的lifeCycle就是这么干的，写了个dummpy的contentProvider，在provider的onCreate中去loadLibrary.</p><h2 id="3-看到一个关于apk反编译和重新打包的帖子，非常好用"><a href="#3-看到一个关于apk反编译和重新打包的帖子，非常好用" class="headerlink" title="3. 看到一个关于apk反编译和重新打包的帖子，非常好用"></a>3. 看到一个关于apk反编译和重新打包的帖子，非常好用</h2><p><a href="https://www.jianshu.com/p/792a08d5452c">Android apk反编译及重新打包流程</a>，关键词apktool。<br>但是，360加固之后的apk是不能用dex2jar查看java代码的。</p><h3 id="4-从base-apk谈到apk安装的过程"><a href="#4-从base-apk谈到apk安装的过程" class="headerlink" title="4.从base.apk谈到apk安装的过程"></a>4.从base.apk谈到apk安装的过程</h3><p><a href="https://www.jianshu.com/p/ae45af3c3098">APK安装过程</a>。<br>之前无意间在FileExplorer中看到了base.apk这个文件，由此展开apk安装过程的研究。</p><h2 id="5-关于模块化和项目重构"><a href="#5-关于模块化和项目重构" class="headerlink" title="5.关于模块化和项目重构"></a>5.关于模块化和项目重构</h2><p>很多关于Android甚至java项目的重构的文章都会最终提到两条：<br>面向接口编程 -&gt; 依赖注入(IOC)<br>然后跟上一大堆专业分析和没什么用的废话。<br>这俩在java的领域翻译过来就是：<br>在A模块中用Dagger2生成B模块中定义的interface的impl实例。<br><del>其实不用Dagger2也行，就是每次在B模块的生命周期开始时准备一个HashMap<interfaceClass,ImplClass>这样的一大堆键值对，然后在A模块中根据想要的interface class去找impl class，用反射去创建，生产环境肯定不能这么干。</del><br>在Dagger2中大致是这么干的：</p><p>先声明好B模块对外提供的接口，以下这俩都在另一个module中，A module通过gradle引用了B模块<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreImpl</span> <span class="keyword">implements</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dummy products"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>B模块中再提供Component和provide的module<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = StoreModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StoreComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">Store <span class="title">eject</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Store <span class="title">provideStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StoreImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>A模块中最终使用的方式应该是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Store store = DaggerStoreComponent.builder().build().eject();</span><br></pre></td></tr></table></figure></p><h2 id="6-写sqlite语句的时候总是容易出小错误"><a href="#6-写sqlite语句的时候总是容易出小错误" class="headerlink" title="6.写sqlite语句的时候总是容易出小错误"></a>6.写sqlite语句的时候总是容易出小错误</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//错误写法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table_one ( _id <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT, studentName <span class="built_in">TEXT</span>,studentNick <span class="built_in">TEXT</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> table_one (studentName,studentNick) <span class="keyword">VALUES</span> ( name1,nick1)</span><br><span class="line">//  SQLiteException: <span class="keyword">no</span> such <span class="keyword">column</span>: name1 (code <span class="number">1</span>) 报错</span><br><span class="line"></span><br><span class="line">//正确写法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table_one ( _id <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT, studentName <span class="built_in">TEXT</span>,studentNick <span class="built_in">TEXT</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> table_one (studentName,studentNick) <span class="keyword">VALUES</span> ( <span class="string">'name1'</span>,<span class="string">'nick1'</span>)</span><br></pre></td></tr></table></figure><p>唯一的区别就在于name1和nick1这俩用 <strong>单引号单引号单引号</strong> 包起来了。</p><h2 id="7-Webview的坑的总结"><a href="#7-Webview的坑的总结" class="headerlink" title="7. Webview的坑的总结"></a>7. Webview的坑的总结</h2><p><a href="http://iluhcm.com/2017/12/10/design-an-elegant-and-powerful-android-webview-part-one/">WebView的那些坑</a></p><h2 id="8-BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException"><a href="#8-BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException" class="headerlink" title="8.BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException"></a>8.BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException</h2><blockquote><p>The Skia library on which BitmapRegionDecoder is based had some bugs that will not be fixed in versions of Android prior to Nougat or Oreo. It will still display the vast majority of images properly, but you may see problems displaying CMYK JPGs, and grayscale PNGs, especially on older devices. To reduce the frequency of these problems, the view automatically falls back to BitmapFactory when the image does not need to be subsampled.<br><a href="https://github.com/davemorrissey/subsampling-scale-image-view/wiki/02.-Displaying-images">subsampling-scale-image-view这个库</a></p></blockquote><h2 id="9-Bitmap对象的recycle问题还是要调用"><a href="#9-Bitmap对象的recycle问题还是要调用" class="headerlink" title="9.Bitmap对象的recycle问题还是要调用"></a>9.Bitmap对象的recycle问题还是要调用</h2><p>Bitmap类有一个方法recycle()，从方法名可以看出意思是回收。这里就有疑问了，Android系统有自己的垃圾回收机制，可以不定期的回收掉不使用的内存空间，当然也包括Bitmap的空间。那为什么还需要这个方法呢？<br>Bitmap类的构造方法都是私有的，所以开发者不能直接new出一个Bitmap对象，只能通过BitmapFactory类的各种静态方法来实例化一个Bitmap。仔细查看BitmapFactory的源代码可以看到，生成Bitmap对象最终都是通过JNI调用方式实现的。所以，加载Bitmap到内存里以后，是包含两部分内存区域的。简单的说，一部分是Java部分的，一部分是C部分的。这个Bitmap对象是由Java部分分配的，不用的时候系统就会自动回收了，但是那个对应的C可用的内存区域，虚拟机是不能直接回收的，这个只能调用底层的功能释放。所以需要调用recycle()方法来释放C部分的内存。从Bitmap类的源代码也可以看到，recycle()方法里也的确是调用了JNI方法了的。<br>那如果不调用recycle()，是否就一定存在内存泄露呢？也不是的。Android的每个应用都运行在独立的进程里，有着独立的内存，如果整个进程被应用本身或者系统杀死了，内存也就都被释放掉了，当然也包括C部分的内存。<br>Android对于进程的管理是非常复杂的。简单的说，Android系统的进程分为几个级别，系统会在内存不足的情况下杀死一些低优先级的进程，以提供给其它进程充足的内存空间。在实际项目开发过程中，有的开发者会在退出程序的时候使用Process.killProcess(Process.myPid())的方式将自己的进程杀死，但是有的应用仅仅会使用调用Activity.finish()方法的方式关闭掉所有的Activity。</p><h2 id="10-原来layer-list还可以这么用啊"><a href="#10-原来layer-list还可以这么用啊" class="headerlink" title="10. 原来layer_list还可以这么用啊"></a>10. 原来layer_list还可以这么用啊</h2><p>给一个View加边框，只在左边，上面和下面三条边上加边框，用layer_list就可以了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 连框颜色值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/md_blue_700"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主体背景颜色值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处定义只有上下两边有边框 高度为1像素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:bottom</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:left</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:top</span>=<span class="string">"10dp"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--边框里面背景颜色 白色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#ffffff"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="11-proguard可以把log干掉"><a href="#11-proguard可以把log干掉" class="headerlink" title="11.proguard可以把log干掉"></a>11.proguard可以把log干掉</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-assumenosideeffects class android.util.Log &#123;</span><br><span class="line">    public static boolean isLoggable(java.lang.String, int);</span><br><span class="line">    public static int v(...);</span><br><span class="line">    public static int i(...);</span><br><span class="line">    public static int w(...);</span><br><span class="line">    public static int d(...);</span><br><span class="line">    public static int e(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-国产Rom的权限问题是在是头疼"><a href="#12-国产Rom的权限问题是在是头疼" class="headerlink" title="12.国产Rom的权限问题是在是头疼"></a>12.国产Rom的权限问题是在是头疼</h3><p>以5.1的rom为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ContextCompat.checkSelfPermission(activity,Manifest.permission.Camera)== PackageManager.PERMISSION_GRANTED):</span><br><span class="line">    Camera c = Camera.open();<span class="comment">// 还是null</span></span><br></pre></td></tr></table></figure></p><p>类似的问题衍生出了<a href="https://github.com/jokermonn/permissions4m">国产手机5.0,6.0权限适配框架</a><br>找到了启动魅族权限管理的Activity的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String N_MANAGER_OUT_CLS = <span class="string">"com.meizu.safe.permission.PermissionMainActivity"</span>; </span><br><span class="line"><span class="keyword">final</span> String L_MANAGER_OUT_CLS = <span class="string">"com.meizu.safe.SecurityMainActivity"</span>; <span class="comment">// 5.1上叫做这个名字</span></span><br><span class="line"><span class="keyword">final</span> String PKG = <span class="string">"com.meizu.safe"</span>;</span><br><span class="line">Activity activity = (Activity) context;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">intent.putExtra(<span class="string">"package"</span>, activity.getPackageName());</span><br><span class="line">ComponentName comp = <span class="keyword">new</span> ComponentName(PKG, L_MANAGER_OUT_CLS);</span><br><span class="line">intent.setComponent(comp);</span><br><span class="line">activity.startActivity(intent);</span><br></pre></td></tr></table></figure></p><h3 id="13-Canvas-clipPath会出现锯齿的问题以及可能的解决方案"><a href="#13-Canvas-clipPath会出现锯齿的问题以及可能的解决方案" class="headerlink" title="13. Canvas.clipPath会出现锯齿的问题以及可能的解决方案"></a>13. Canvas.clipPath会出现锯齿的问题以及可能的解决方案</h3><p>a Navive implementation of CircleImageView would look something like this:<br>xml里面宽高都写成200dp，方便一点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Path;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.AppCompatImageView;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundCornerImageView1</span> <span class="keyword">extends</span> <span class="title">AppCompatImageView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span>[] radiusArray = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView1</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView1</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView1</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setScaleType(ScaleType.CENTER_CROP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">float</span> leftTop, <span class="keyword">float</span> rightTop, <span class="keyword">float</span> rightBottom, <span class="keyword">float</span> leftBottom)</span> </span>&#123;</span><br><span class="line">        radiusArray[<span class="number">0</span>] = leftTop;</span><br><span class="line">        radiusArray[<span class="number">1</span>] = leftTop;</span><br><span class="line">        radiusArray[<span class="number">2</span>] = rightTop;</span><br><span class="line">        radiusArray[<span class="number">3</span>] = rightTop;</span><br><span class="line">        radiusArray[<span class="number">4</span>] = rightBottom;</span><br><span class="line">        radiusArray[<span class="number">5</span>] = rightBottom;</span><br><span class="line">        radiusArray[<span class="number">6</span>] = leftBottom;</span><br><span class="line">        radiusArray[<span class="number">7</span>] = leftBottom;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        Path path = <span class="keyword">new</span> Path();</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = getHeight();</span><br><span class="line">        setRadius(width/<span class="number">2</span>,width/<span class="number">2</span>,height/<span class="number">2</span>,height/<span class="number">2</span>);</span><br><span class="line">        path.addRoundRect(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, width,height), radiusArray, Path.Direction.CW);</span><br><span class="line">        canvas.clipPath(path);</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不出意外的话，在真机上运行会出现圆形边角有锯齿的问题。google一下clipPath锯齿就会发现类似的<a href="https://www.cnblogs.com/everhad/p/6161083.html">issue</a>，framework只是对skia library的一层很薄的包装。</p><p><a href="https://github.com/hehonghui/android-tech-frontier/blob/aa6f125b1a3801820e697f5ac6246b4827acd5a5/issue-45/Android%E5%9C%86%E5%BC%A7%E6%95%B4%E5%AE%B9%E4%B9%8B%E8%B0%9C.md">早先版本的系统画圆弧似乎不是特别准</a></p><p>多数时候对这种问题的解决方式是使用PorterDuff.SRCIN的方式，用canvas saveLayer(貌似layer是一种栈的结构)的方式在其他的layer中去画bitmap。最后顶层的layer全部pop掉之后会合并到initial的layer上，类似于在顶层的layer中合成这张bitmap。<br>canvas.saveLayer(0, 0, w, h, null, Canvas.ALL_SAVE_FLAG); // 大致就在这里,layer似乎可以理解成photoShop里面的图层的概念<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundCornerImageView2</span> <span class="keyword">extends</span> <span class="title">AppCompatImageView</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 四个角的x,y半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] radiusArray = &#123; <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span> &#125;;</span><br><span class="line">    <span class="keyword">private</span> Paint bitmapPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">makeRoundRectFrame</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        Bitmap bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas c = <span class="keyword">new</span> Canvas(bm);</span><br><span class="line">        Path path = <span class="keyword">new</span> Path();</span><br><span class="line">        setRadius(w/<span class="number">2</span>,w/<span class="number">2</span>,h/<span class="number">2</span>,h/<span class="number">2</span>);</span><br><span class="line">        path.addRoundRect(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, w, h), radiusArray, Path.Direction.CW);</span><br><span class="line">        Paint bitmapPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        bitmapPaint.setColor(Color.GREEN); <span class="comment">// 颜色随意，不要有透明度。</span></span><br><span class="line">        c.drawPath(path, bitmapPaint);</span><br><span class="line">        <span class="keyword">return</span> bm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView2</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView2</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView2</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        setLayerType(LAYER_TYPE_SOFTWARE, null); // Xfermode 需要禁用硬件加速</span></span><br><span class="line">        setScaleType(ScaleType.CENTER_CROP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">float</span> leftTop, <span class="keyword">float</span> rightTop, <span class="keyword">float</span> rightBottom, <span class="keyword">float</span> leftBottom)</span> </span>&#123;</span><br><span class="line">        radiusArray[<span class="number">0</span>] = leftTop;</span><br><span class="line">        radiusArray[<span class="number">1</span>] = leftTop;</span><br><span class="line">        radiusArray[<span class="number">2</span>] = rightTop;</span><br><span class="line">        radiusArray[<span class="number">3</span>] = rightTop;</span><br><span class="line">        radiusArray[<span class="number">4</span>] = rightBottom;</span><br><span class="line">        radiusArray[<span class="number">5</span>] = rightBottom;</span><br><span class="line">        radiusArray[<span class="number">6</span>] = leftBottom;</span><br><span class="line">        radiusArray[<span class="number">7</span>] = leftBottom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> w = getWidth();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> h = getHeight();</span><br><span class="line">        Bitmap bitmapOriginal = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas c = <span class="keyword">new</span> Canvas(bitmapOriginal);</span><br><span class="line">        <span class="keyword">super</span>.onDraw(c);</span><br><span class="line"></span><br><span class="line">        Bitmap bitmapFrame = makeRoundRectFrame(w, h);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sc = canvas.saveLayer(<span class="number">0</span>, <span class="number">0</span>, w, h, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        canvas.drawBitmap(bitmapFrame, <span class="number">0</span>, <span class="number">0</span>, bitmapPaint); <span class="comment">//先画一个圆形的框框条条出来</span></span><br><span class="line"><span class="comment">// 利用Xfermode取交集（利用bitmapFrame作为画框来裁剪bitmapOriginal）</span></span><br><span class="line">        bitmapPaint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN)); <span class="comment">//后续的画图操作，只有交集的部分才会显示在最终的canvas上</span></span><br><span class="line">        canvas.drawBitmap(bitmapOriginal, <span class="number">0</span>, <span class="number">0</span>, bitmapPaint);</span><br><span class="line"></span><br><span class="line">        bitmapPaint.setXfermode(<span class="keyword">null</span>);</span><br><span class="line">        canvas.restoreToCount(sc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方式一般称为离屏缓冲</p><h3 id="14-jni使用"><a href="#14-jni使用" class="headerlink" title="14. jni使用"></a>14. jni使用</h3><p><a href="https://blog.csdn.net/baidu_34045013/article/details/78994516">一般使用javah生成header文件</a></p><p>多数教程都是写一个<br>gradle.properties添加一句android.useDeprecatedNdk=true<br>随着studio版本升级，还是不得不升级到使用cmake的方式。</p><p>Android Studio中集成c或者cpp代码照着这个官方的<a href="https://developer.android.com/studio/projects/add-native-code">教程</a>抄就行了。其实也就是写一个CMakeLists.txt，然后在studio里面右键app模块, Link C++ Project with Gradle。照着来就是了。</p><p>先写好java的native方法，然后cd到src/main/java路径<br>javah -d jni com.your.package.name.classyoujustWroteWithnativeMethod</p><p>把生成的header文件剪切到和main/Java文件夹平级的jni文件夹中，再去写c的实现。</p><p>移植mp3lame到Android平台照着<a href="https://www.jianshu.com/p/065bfe6d3ec2">这里</a>操作就行了。<br>这篇博客使用的是lame-3.99.5，注意下载对应的版本。<br><a href="http://cfanr.cn/2017/08/26/Android-NDK-dev-CMake-s-usage/">cmake的一些知识点</a><br>cmake生成的.so文件在”\app\build\intermediates\cmake\debug\obj\arm64-v8a”这个路径下</p><p>java调用c语言性能还好,c语言调用java的性能就比较差了</p><ol><li>关于Spannable String的问题<br>Medium上有关于使用span的文章 <a href="https://medium.com/google-developers/spantastic-text-styling-with-spans-17b0c16b4568">Spantastic text styling with Spans</a> 其实有SpannableString(mutable),SpannableStringBuilder还有SpannedString(immutable)。<br>Just reading and not setting the text nor the spans? -&gt; SpannedString(文字和style都改不了)<br>Setting the text and the spans? -&gt; SpannableStringBuilder(文字和Style都能改)<br>Setting a small number of spans (&lt;~10)? -&gt; SpannableString(文字不能改，Style能改)<br>Setting a larger number of spans (&gt;~10) -&gt; SpannableStringBuilder</li></ol><p><a href="https://stackoverflow.com/questions/17546955/android-spanned-spannedstring-spannable-spannablestring-and-charsequence">stackoverflow上甚至有Glide作者的讨论</a><br>从源码来看,SpannedString和SpannableString几乎是一样的，后者继承了一个Spannable的接口，由此对外暴露了父类(SpannableStringInternal)的setSpan和removeSpan方法。</p><blockquote><p>Use a SpannedString when your text has style but you don’t need to change either the text or the style after it is created. (似乎平时也应该这样使用，但从源码来看，两者几乎没有性能上的区别。真正的性能差异要取决于实际的use case)<br>Use a SpannableString when your text doesn’t need to be changed but the styling does.<br>Use a SpannableStringBuilder when you will need to update the text and its style.</p></blockquote><p>SPAN_EXCLUSIVE_EXCLUSIVE，SPAN_EXCLUSIVE_INCLUSIVE这些东西的意思是针对新的文字插入之后的行为来说的。<br>SPAN_EXCLUSIVE_INCLUSIVE就是说新的文字插入之后，之前设置的span将自动扩增并应用到这段新的文字上。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spannable.setSpan(</span><br><span class="line">     ForegroundColorSpan(Color.RED), </span><br><span class="line">     <span class="comment">/* start index */</span> <span class="number">8</span>, <span class="comment">/* end index */</span> <span class="number">12</span>, </span><br><span class="line">     Spannable.SPAN_EXCLUSIVE_INCLUSIVE)</span><br><span class="line">spannable.insert(<span class="number">12</span>, “(&amp; fon)”) <span class="comment">//注意SpannableStringBuilder的这个insert方法是可以指定insert的位置的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">val spannable = SpannableString(“Text is spantastic!”)</span><br><span class="line">spannable.setSpan(</span><br><span class="line">     ForegroundColorSpan(Color.RED), </span><br><span class="line">     <span class="number">8</span>, <span class="number">12</span>, </span><br><span class="line">     Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)</span><br><span class="line">spannable.setSpan(</span><br><span class="line">     StyleSpan(BOLD), </span><br><span class="line">     <span class="number">8</span>, spannable.length, </span><br><span class="line">     Spannable.SPAN_EXCLUSIVE_EXCLUSIVE) <span class="comment">//一段文字可以同时应用多个Spannable样式</span></span><br></pre></td></tr></table></figure></p><p>Framework自带的spans可以分为两类：一种是改变文字外观的（Appearance affecting span），另一种是改变文字大小的(Metric affecting span)。</p><p>文章里还提到了可以使用TextView.setText(Spannable, BufferType.SPANNABLE)方法，如果后续需要修改文字的span样式的话，可以getText，获得的是之前设置的span，这时候再去对这个span进行操作（不要再setText回去了），这对提升性能有帮助（text的measure和layout都是耗性能的操作）。但注意，如果是使用了RelativeSizeSpan的话，因为更改了TextView的大小，这必然会触发重新measure和layout，上述的优化似乎也就没有必要了。</p><p>自定义Span的话：<br>Affecting text at the character level -&gt; CharacterStyle<br>Affecting text at the paragraph level -&gt; ParagraphStyle<br>Affecting text appearance -&gt; UpdateAppearance<br>Affecting text metrics -&gt; UpdateLayout</p><p>asset文件夹里面的东西是无法用File的形式去获取的<br>android.os.FileUriExposedException: file://assets/dist/index.js exposed beyond app through Intent.getData()<br>at android.os.StrictMode.onFileUriExposed(StrictMode.java:1816)</p><h3 id="15-setClipToOutline-v21"><a href="#15-setClipToOutline-v21" class="headerlink" title="15. setClipToOutline(v21)"></a>15. setClipToOutline(v21)</h3><p><a href="https://stackoverflow.com/questions/16161448/how-to-make-layout-with-rounded-corners">圆角矩形的实现多了一种选择</a></p><p><a href="https://gradle.com/build-scans">gradle build scan</a><br>[把一些本地libiary打包成aar能够显著加快编译]</p><p><a href="https://fucknmb.com/2017/10/31/aapt2%E8%B5%84%E6%BA%90compile%E8%BF%87%E7%A8%8B/">AAPT2会生成一堆.flat文件</a></p><p><strong>全角半角对汉字没有影响</strong><br>TextView有时候会出现提前换行的问题,这事据说跟全角半角有关（全角状态下字母、数字符号等都会占两个字节的位置，也就是一个汉字那么宽，半角状态下，字母数字符号一般会占一个字节，也就是半个汉字的位置，全角半角对汉字没有影响。）<br>一个直观的表现是全角的情况下你发现冒号，分号这些东西都变得比较宽。（;；MＭ）也就是所谓的中文标点符号 .对了，全角的情况下字母，数字也会变宽一点（本质上是占用两个字符）</p><p>[Instagram是如何提升TextView渲染性能的(<a href="http://codethink.me/2015/04/23/improving-comment-rendering-on-android/),关键字TextLayoutCache">http://codethink.me/2015/04/23/improving-comment-rendering-on-android/),关键字TextLayoutCache</a><br><a href="https://zhuanlan.zhihu.com/p/40921043">compile ffmpeg for android</a><br>需要修改B0 -&gt; b0 ，linux平台或者mac平台可用<br><a href="https://yesimroy.gitbooks.io/android-note/content/compile_ffmpeg_for_android.html">compile ffmpeg for android</a></p><p>Andorid平台上默认的isLoggable的允许的LogLevel是info，也就是说，log.d和log.v是不会显示的。<a href="https://stackoverflow.com/questions/28434901/why-are-log-d-and-log-v-not-printing">wht are log-d and log-v not printing</a><br>当然这也要看手机厂商设置，魅族手机就是设置为info级别及以上了。这话2016年有人提醒过我。</p><h3 id="16-lamemp3-移植到android平台"><a href="#16-lamemp3-移植到android平台" class="headerlink" title="16.lamemp3 移植到android平台"></a>16.lamemp3 移植到android平台</h3><p><a href="https://www.jianshu.com/p/534741f5151c">lame版本3.99.5</a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;android/log.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"libmp3lame/lame.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"LAME ENCODER"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOGD(format, args...)  __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, format, ##args);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 8192</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> be_short(s) ((short) ((unsigned short) (s) <span class="meta-string">&lt;&lt; 8) | ((unsigned short) (s) &gt;&gt; 8))</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">lame_t</span> lame;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read_samples</span><span class="params">(FILE *input_file, <span class="keyword">short</span> *input)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">int</span> nb_read;</span><br><span class="line">truenb_read = fread(input, <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">short</span>), input_file) / <span class="keyword">sizeof</span>(<span class="keyword">short</span>);</span><br><span class="line"></span><br><span class="line">true<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">true<span class="keyword">while</span> (i &lt; nb_read) &#123;</span><br><span class="line">truetrueinput[i] = be_short(input[i]);</span><br><span class="line">truetruei++;</span><br><span class="line">true&#125;</span><br><span class="line"></span><br><span class="line">true<span class="keyword">return</span> nb_read;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Java_com_example_core_audio_NativeRecorder_initEncoder</span><span class="params">(JNIEnv *env,</span></span></span><br><span class="line"><span class="function"><span class="params">jobject jobj, jint in_num_channels, jint in_samplerate, jint in_brate,</span></span></span><br><span class="line"><span class="function"><span class="params">jint in_mode, jint in_quality)</span> </span>&#123;</span><br><span class="line">truelame = lame_init();</span><br><span class="line"></span><br><span class="line"><span class="comment">//LOGD("Init parameters:");</span></span><br><span class="line">truelame_set_num_channels(lame, in_num_channels);</span><br><span class="line"><span class="comment">//LOGD("Number of channels: %d", in_num_channels);</span></span><br><span class="line">truelame_set_in_samplerate(lame, in_samplerate);</span><br><span class="line"><span class="comment">//LOGD("Sample rate: %d", in_samplerate);</span></span><br><span class="line">truelame_set_brate(lame, in_brate);</span><br><span class="line"><span class="comment">//LOGD("Bitrate: %d", in_brate);</span></span><br><span class="line">truelame_set_mode(lame, in_mode);</span><br><span class="line"><span class="comment">//LOGD("Mode: %d", in_mode);</span></span><br><span class="line">truelame_set_quality(lame, in_quality);</span><br><span class="line"><span class="comment">//LOGD("Quality: %d", in_quality);</span></span><br><span class="line"></span><br><span class="line">true<span class="keyword">int</span> res = lame_init_params(lame);</span><br><span class="line"><span class="comment">//LOGD("Init returned: %d", res);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Java_com_example_core_audio_NativeRecorder_destroyEncoder</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">JNIEnv *env, jobject jobj)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">int</span> res = lame_close(lame);</span><br><span class="line"><span class="comment">//LOGD("Deinit returned: %d", res);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Java_com_example_core_audio_NativeRecorder_encodeFile</span><span class="params">(JNIEnv *env,</span></span></span><br><span class="line"><span class="function"><span class="params">jobject jobj, jstring in_source_path, jstring in_target_path)</span> </span>&#123;</span><br><span class="line">true<span class="keyword">const</span> <span class="keyword">char</span> *source_path, *target_path;</span><br><span class="line">truesource_path = (*env)-&gt;GetStringUTFChars(env, in_source_path, <span class="literal">NULL</span>);</span><br><span class="line">truetarget_path = (*env)-&gt;GetStringUTFChars(env, in_target_path, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">trueFILE *input_file, *output_file;</span><br><span class="line">trueinput_file = fopen(source_path, <span class="string">"rb"</span>);</span><br><span class="line">trueoutput_file = fopen(target_path, <span class="string">"wb"</span>);</span><br><span class="line"></span><br><span class="line">true<span class="keyword">short</span> input[BUFFER_SIZE];</span><br><span class="line">true<span class="keyword">char</span> output[BUFFER_SIZE];</span><br><span class="line">true<span class="keyword">int</span> nb_read = <span class="number">0</span>;</span><br><span class="line">true<span class="keyword">int</span> nb_write = <span class="number">0</span>;</span><br><span class="line">true<span class="keyword">int</span> nb_total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LOGD("Encoding started");</span></span><br><span class="line">true<span class="keyword">while</span> (nb_read = read_samples(input_file, input)) &#123;</span><br><span class="line">truetruenb_write = lame_encode_buffer(lame, input, input, nb_read, output,</span><br><span class="line">truetruetruetrueBUFFER_SIZE);</span><br><span class="line">truetruefwrite(output, nb_write, <span class="number">1</span>, output_file);</span><br><span class="line">truetruenb_total += nb_write;</span><br><span class="line">true&#125;</span><br><span class="line"><span class="comment">//LOGD("Encoded %d bytes", nb_total);</span></span><br><span class="line"></span><br><span class="line">truenb_write = lame_encode_flush(lame, output, BUFFER_SIZE);</span><br><span class="line">truefwrite(output, nb_write, <span class="number">1</span>, output_file);</span><br><span class="line"><span class="comment">//LOGD("Flushed %d bytes", nb_write);</span></span><br><span class="line"></span><br><span class="line">truefclose(input_file);</span><br><span class="line">truefclose(output_file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.haldir66.ga/static/imgs/street%20lights%20dark%20night%20car%20city%20bw.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
  </entry>
  
</feed>
