<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haldir的博客</title>
  
  <subtitle>get busy living</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haldir65.github.io/"/>
  <updated>2018-01-23T03:37:30.907Z</updated>
  <id>https://haldir65.github.io/</id>
  
  <author>
    <name>Haldir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo部署个人博客记录</title>
    <link href="https://haldir65.github.io/2217/01/08/2017-01-08-trouble-shooting-with-my-blog/"/>
    <id>https://haldir65.github.io/2217/01/08/2017-01-08-trouble-shooting-with-my-blog/</id>
    <published>2217-01-08T18:01:01.000Z</published>
    <updated>2018-01-23T03:37:30.907Z</updated>
    
    <content type="html"><![CDATA[<p>使用 hexo 写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的 blog 一个值得置顶的文章的话，我觉得一篇记录使用 hexo 过程中的一些解决问题的方法的文章是再合适不过的了。</br><br><img src="http://odzl05jxx.bkt.clouddn.com/40164340_40164340_1414330224938_mthumb.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><h2 id="1-经常更新-yilia-的-theme"><a href="#1-经常更新-yilia-的-theme" class="headerlink" title="1. 经常更新 yilia 的 theme"></a>1. 经常更新 yilia 的 theme</h2><p><a href="https://github.com/litten/hexo-theme-yilia">yilia</a>主题经常会更新，及时更新 theme 会发现很多新的特性及 bug fix</p><h2 id="2-部署相关"><a href="#2-部署相关" class="headerlink" title="2. 部署相关"></a>2. 部署相关</h2><ul><li>部署到 github</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment">//清除缓存</span></span><br><span class="line">hexo g -d <span class="comment">//一步到位 = hexo g + hexo d</span></span><br><span class="line">hexo s <span class="comment">//localost:4000本地预览</span></span><br></pre></td></tr></table></figure><ul><li>部署过程中出现的一些错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br><span class="line">INFO  Start processing</span><br><span class="line">ERROR Process failed: _posts/<span class="number">2016</span><span class="number">-12</span><span class="number">-10</span>-adb-command.md</span><br><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line <span class="number">3</span>, column <span class="number">11</span>:</span><br><span class="line">    categories:  [技术]</span><br><span class="line">              ^</span><br><span class="line">    at generateError (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">162</span>:<span class="number">10</span>)</span><br><span class="line">    at throwError (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">168</span>:<span class="number">9</span>)</span><br><span class="line">    at readBlockMapping (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1040</span>:<span class="number">9</span>)</span><br><span class="line">    at composeNode (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1326</span>:<span class="number">12</span>)</span><br><span class="line">    at readDocument (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1488</span>:<span class="number">3</span>)</span><br><span class="line">    at loadDocuments (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1544</span>:<span class="number">5</span>)</span><br><span class="line">    at <span class="built_in">Object</span>.load (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1561</span>:<span class="number">19</span>)</span><br><span class="line">    at parseYAML (D:\Blog\github\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:<span class="number">80</span>:<span class="number">21</span>)</span><br><span class="line">    at parse (D:\Blog\github\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:<span class="number">56</span>:<span class="number">12</span>)</span><br><span class="line">    at D:\Blog\github\node_modules\hexo\lib\plugins\processor\post.js:<span class="number">52</span>:<span class="number">18</span></span><br><span class="line">    at tryCatcher (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">507</span>:<span class="number">35</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">567</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">125</span>:<span class="number">19</span>)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">143</span>:<span class="number">14</span>)</span><br><span class="line">    at PromiseArray._iterate (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">113</span>:<span class="number">31</span>)</span><br><span class="line">    at PromiseArray.init [<span class="keyword">as</span> _init] (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">77</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">564</span>:<span class="number">21</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">125</span>:<span class="number">19</span>)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">143</span>:<span class="number">14</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">572</span>:<span class="number">26</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._resolveCallback (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">431</span>:<span class="number">57</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">522</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">567</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\nodeback.js:<span class="number">42</span>:<span class="number">21</span></span><br><span class="line">    at D:\Blog\github\node_modules\hexo\node_modules\hexo-fs\node_modules\graceful-fs\graceful-fs.js:<span class="number">78</span>:<span class="number">16</span></span><br><span class="line">    at tryToString (fs.js:<span class="number">455</span>:<span class="number">3</span>)</span><br><span class="line">    at FSReqWrap.readFileAfterClose [<span class="keyword">as</span> oncomplete] (fs.js:<span class="number">442</span>:<span class="number">12</span>)</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> <span class="number">1.48</span> s</span><br><span class="line">INFO  Generated: sitemap.xml</span><br><span class="line">INFO  Generated: atom.xml</span><br><span class="line">INFO  Generated: <span class="number">2017</span>/<span class="number">01</span>/<span class="number">08</span>/<span class="number">2017</span><span class="number">-01</span><span class="number">-08</span>-trouble-shooting-<span class="keyword">with</span>-my-blog/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  <span class="number">4</span> files generated <span class="keyword">in</span> <span class="number">2.26</span> s</span><br><span class="line">INFO  Deploying: git</span><br></pre></td></tr></table></figure><p>找了好久，有说”_config.xml” 文件 有空格的，有说 title 被乱改的，试了好长时间，改成这样就不再报错了。所以，<strong>冒号后面一定要加空格，英文半角的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: adb常用命令手册</span><br><span class="line">date: 2016-12-10 21:14:14</span><br><span class="line">tags:</span><br><span class="line"> - android</span><br><span class="line"> - adb</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>tags 有两种写法，一种是上面这样前面加横杠另一种长这样，写成数组形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: my awesometitle</span><br><span class="line">date: 2017-05-07 16:48:01</span><br><span class="line">categories: blog</span><br><span class="line">tags: [linux,python]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="3-一些功能的实现"><a href="#3-一些功能的实现" class="headerlink" title="3. 一些功能的实现"></a>3. 一些功能的实现</h2><ul><li>置顶功能将 node_modules/hexo-generator-index/lib/generator.js 的文件内容替换成以下内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">"hexo-pagination"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">      <span class="keyword">if</span> (a.top == b.top)</span><br><span class="line">        <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.top &amp;&amp; !b.top) &#123;</span><br><span class="line">      <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">"page"</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">""</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">"index"</span>, <span class="string">"archive"</span>],</span><br><span class="line">    format: paginationDir + <span class="string">"/%d/"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>同时在文章开头添加 top : 1 即可 ，实际排序按照这个数字从大到小排序</li></ul><p>另一种做法是手动将date改大，日期越靠后的越在前面。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> title: Hexo置顶文章</span><br><span class="line">date: <span class="number">2016</span>-<span class="number">11</span>-<span class="number">11</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">22</span></span><br><span class="line">tags:[置顶]</span><br><span class="line">categories: Hexo</span><br><span class="line">top: 0 # 0或者1</span><br></pre></td></tr></table></figure><p>个人建议：置顶不要太多</p><h2 id="4-SublimeText-的一些快捷键"><a href="#4-SublimeText-的一些快捷键" class="headerlink" title="4. SublimeText 的一些快捷键"></a>4. SublimeText 的一些快捷键</h2><p>由于文章大部分都是使用 SublimeText 写的，Typroa 这种所见即所得的编辑器也不错，但对于掌握 MardkDown 语法没有帮助。这里摘录一些 SubLimeText 的快捷键。</p><blockquote><p><strong>Ctrl+Shift+P：打开命令面板</strong><br>Ctrl+P：搜索项目中的文件<br>Ctrl+G：跳转到第几行<br>Ctrl+W：关闭当前打开文件 CTRL+F4 也可以<br>Ctrl+Shift+W：关闭所有打开文件<br>Ctrl+Shift+V：粘贴并格式化<br>Ctrl+D：选择单词，重复可增加选择下一个相同的单词<br><strong>Ctrl+L：选择行，重复可依次增加选择下一行</strong><br><strong>Alt+Shift+数字：分屏显示</strong><br><strong>Ctrl+Shift+L：选择多行</strong><br><strong>Ctrl+Shift+D：复制粘贴当前行</strong><br><strong>Ctrl+X：删除当前行</strong><br><strong>Ctrl+Shift+左箭头 往左边选择内容</strong><br><strong>Shift+向左箭头 向左选择文本</strong><br><strong>Ctrl+B 编译，markDown 生成 html 文件</strong><br><strong>Alt+2 切换到第二个 Tab（打开的文件，记得 chrome 是 ctrl+2）</strong><br><strong>Ctrl+R：前往 对应的方法的实现*</strong><br><strong>快速加上[] 选中单词按 [ 即可</strong><br><strong>批量更改当前页面相同的单词 alt+F3 </strong><br><strong>Ctrl+Enter 在下一行插入新的一行</strong><br><strong>Ctrl+Shift+Enter 在上一行插入新的一行</strong><br><strong>Shift+ 向上箭头 向上选中多行</strong></p></blockquote><p>Ctrl+Shift+D：复制粘贴当前行 Ctrl+Shift+Enter：在当前行前插入新行<br>Ctrl+M：跳转到对应括号<br>Ctrl+U：软撤销，撤销光标位置<br>Ctrl+J：选择标签内容<br>Ctrl+F：查找内容<br>Ctrl+Shift+F：查找并替换<br>Ctrl+H：替换<br>Ctrl+N：新建窗口<br>Ctrl+K+B：开关侧栏<br>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身<br>Ctrl+F2：设置/删除标记<br>Ctrl+/：注释当前行<br>Ctrl+Shift+/：当前位置插入注释<br>Ctrl+Alt+/：块注释，并 Focus 到首行，写注释说明用的<br>Ctrl+Shift+A：选择当前标签前后，修改标签用的<br>F11：全屏<br>Shift+F11：全屏免打扰模式，只编辑当前文件<br>Alt+F3：选择所有相同的词<br>Alt+.：闭合标签<br>Shift+右键拖动：光标多不，用来更改或插入列内容<br>Alt+数字：切换打开第 N 个文件鼠标的前进后退键可切换 Tab 文件按 Ctrl，依次点击或选取，可需要编辑的多个位置按 Ctrl+Shift+上下键，可替换行</p><h2 id="5-title-不能以-开头"><a href="#5-title-不能以-开头" class="headerlink" title="5. title 不能以[]开头"></a>5. title 不能以[]开头</h2><p>前面加上###确实能够让字号变大，但不要写 4 个#，后面的字母会大小写不分的</p><h2 id="6-markdown-语法"><a href="#6-markdown-语法" class="headerlink" title="6. markdown 语法"></a>6. markdown 语法</h2><p>MarkDown 页面内部跳转<br><a href="http://www.cnblogs.com/JohnTsai/p/4027229.html">MarkDown 技巧：两种方式实现页内跳转</a></p><blockquote><p><em>一个星星包起来是斜体字</em><br><strong>两个星星包起来是粗体字</strong><br><strong><em>那么三个星星呢</em></strong></p></blockquote><h2 id="7-github-提交-commit-的时候显示-Emoji"><a href="#7-github-提交-commit-的时候显示-Emoji" class="headerlink" title="7.github 提交 commit 的时候显示 Emoji"></a>7.github 提交 commit 的时候显示 Emoji</h2><p>链接<a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/">在此</a></p><h2 id="8-换电脑了怎么办"><a href="#8-换电脑了怎么办" class="headerlink" title="8.换电脑了怎么办"></a>8.换电脑了怎么办</h2><p>亲测，把整个目录下所有文件全部复制粘贴到新电脑上，装上 node，然后装上 hexo，记得勾选添加到 PATH,然后就可以了。需要注意的是小文件比较多，所以复制粘贴可能要十几分钟。</p><h2 id="9-有时候写的代码会给你在每一行前面加上-true"><a href="#9-有时候写的代码会给你在每一行前面加上-true" class="headerlink" title="9. 有时候写的代码会给你在每一行前面加上 true"></a>9. 有时候写的代码会给你在每一行前面加上 true</h2><p>比如写一段 css 的代码时候，很多时候预览会给每一行前面加上一个 true，解决办法：用 TAB 键缩进即可</p><h2 id="10-markdown-live-是一个非常好用的-node-module"><a href="#10-markdown-live-是一个非常好用的-node-module" class="headerlink" title="10. markdown-live 是一个非常好用的 node module"></a>10. markdown-live 是一个非常好用的 node module</h2><p><a href="https://www.npmjs.com/package/markdown-live">项目地址</a><br><strong>前提是安装了 node</strong></p><blockquote><p>npm install -g markdown-live</p><p>md-live</p></blockquote><p><br><br><strong><em>编辑md文件的同时，保存就会同步刷新网页预览，非常好用</em></strong></p><h2 id="11-如果运行-hexo-g-生成的-index-html-是空的"><a href="#11-如果运行-hexo-g-生成的-index-html-是空的" class="headerlink" title="11. 如果运行 hexo g 生成的 index.html 是空的"></a>11. 如果运行 hexo g 生成的 index.html 是空的</h2><p>输出</p><blockquote><p>WARN No layout: tags/service/index.html<br>原因是 themes/文件夹下没有 clone 对应的主题</p></blockquote><p>换成travis之后，在travis.yml文件中，添加了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cache:</span><br><span class="line">  yarn: true</span><br><span class="line">  directories:</span><br><span class="line">  - node_modules</span><br><span class="line">  - themes</span><br></pre></td></tr></table></figure></p><p>cahe也就意味着后续所有对于，themes文件夹中的_config.yml文件的修改都不会生效。这也就是我一遍遍尝试更改themee文件夹中_config文件不生效的原因。<br>所以要么去掉cache ，要么自己写bash script一行行的改。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://yanhuili.github.io/2016/11/21/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%8A%80%E5%B7%A7/">Hexo 博文置顶技巧</a></li><li><a href="http://www.daqianduan.com/4820.html">SublimeText 快捷键</a></li><li><a href="http://itmyhome.com/markdown/article/syntax/emphasis.html">MarkDown 语法学起来很快的</a></li><li><a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/">travis 自动部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 hexo 写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的 blog 一个值得置顶的文章的话，我觉得一篇记录使用 hexo 过程中的一些解决问题的方法的文章是再合适不过的了。&lt;/br&gt;&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/40164340_40164340_1414330224938_mthumb.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="置顶" scheme="https://haldir65.github.io/tags/%E7%BD%AE%E9%A1%B6/"/>
    
      <category term="hexo" scheme="https://haldir65.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>即刻备忘录</title>
    <link href="https://haldir65.github.io/2046/12/18/2017-12-18-random-new-thoughts/"/>
    <id>https://haldir65.github.io/2046/12/18/2017-12-18-random-new-thoughts/</id>
    <published>2046-12-18T22:58:14.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>一个待办事项的仓库<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/girlfriend lake green nature water cold.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><ul><li>[x] flex,grid</li></ul><ul><li><a href="https://huangxuan.me/2017/02/09/nextgen-web-pwa/">WPA 所代表的 Web 开发应是未来</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-16-04">How To Install Jenkins on Ubuntu 16.04</a></li><li><a href="https://segmentfault.com/a/1190000003818163">js 循环闭包的解决方法</a></li><li><a href="https://fucknmb.com/2017/05/11/Android-Studio-Library%E6%A8%A1%E5%9D%97%E4%B8%ADNative%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8Cdebug%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/">Android Studio 编译过程</a></li><li><a href="https://juejin.im/post/5a0c1956f265da430a501f51">个人分享–web 前端学习资源分享</a></li><li><a href="http://mouxuejie.com/blog/2016-06-21/multidex-compile-and-dex-source-analysis/">Android 编译及 Dex 过程源码分析</a></li><li><a href="http://www.wangyuwei.me/">如何调试 Android 打包流程？</a></li><li><a href="https://github.com/chenenyu/img-optimizer-gradle-plugin">一个用于优化 png 图片的 gradle 插件</a>，用来看 groovy 语法挺好的。以及 <a href="http://yuanfentiank789.github.io/2017/09/20/%E5%9C%A8AndroidStudio%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6/">How to write gradle plugin</a></li><li><a href="https://sspai.com/post/31500">scheme 这东西算跨客户端平台的</a>，比如在 App 中调起支付宝(用的是 alipayqr://)。其实就是一个系统内跨应用调用。<a href="http://blog.csdn.net/qq_23547831/article/details/51685310">用法</a></li><li><a href="https://juejin.im/post/5a157b7a5188257bfe457ff0">基于 Docker 打造前端持续集成开发环境</a></li><li>使用 express 模拟网络延迟</li><li>Promise 链式调用与终止，异常处理</li><li>前后端同构</li><li>前后端分离</li><li>iview，elementUi</li><li>XSS 攻击</li><li><a href="https://www.jetbrains.com/help/idea/getting-started-with-groovy.html">写 groovy 用 intelij 就可以了</a> 》 how to</li><li>[ ] jQuery 插件</li><li>[ ] vS Code Vender Prefix plugin =&gt; auto prefix loader</li></ul><p>已完成</p><ul><li>用 express 转接一个知乎 Api，添加 Access-control-allow-origin,或许还可以用 redis 缓存数据结果（一个就好）由此想到一篇文章”How to use Pythonto build a restful Web Service”.只不过用的是 Tornado</li><li>git hook (github travis 持续集成，git push 会触发服务器的一系列操作)</li><li>基于前后端分离的理念，后台只负责提供数据，render page 的任务应该交给前端。（所以用 express-handlebars 写页面的方式写着很累）</li><li>集成 travis-ci，记得 after-success script 的结果并不会影响 build 的结果（即，after-success 执行脚本发生了错误，在日志里有输出 error，但实际显示的 build result 仍为 success），还有 travis 的输出 log 需要默认是折叠的，要展开才能看清楚，但在 afterSuccess 里面的指令的输出一定是有的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个待办事项的仓库&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/girlfriend lake green nature water cold.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>redis-cook-book</title>
    <link href="https://haldir65.github.io/2018/01/20/2018-01-20-redis-cook-book/"/>
    <id>https://haldir65.github.io/2018/01/20/2018-01-20-redis-cook-book/</id>
    <published>2018-01-20T08:19:20.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/apple logo dark bw life night.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><p><a href="https://github.com/MicrosoftArchive/redis">The Redis project does not officially support Windows. However, the Microsoft Open Tech group develops and maintains this Windows port targeting Win64. </a></p><h2 id="general-rules"><a href="#general-rules" class="headerlink" title="general rules"></a>general rules</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/apple logo dark bw life night.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-native-cookbook</title>
    <link href="https://haldir65.github.io/2018/01/19/2018-01-19-react-native-cookbook/"/>
    <id>https://haldir65.github.io/2018/01/19/2018-01-19-react-native-cookbook/</id>
    <published>2018-01-19T22:28:34.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/iu kpop star music sony.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><p>install cli<br>&gt;<br>npm install -g react-native-cli<br>react-native init myproject ## 最好全部小写字母<br>cd myproject<br>react-native run-android</p><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>目前暂不支持java 9<br>Double tap R on your keyboard to reload其实并不是按电脑键盘上的R，而是模拟器上的，所以需要鼠标上去，ctrl+m即可</p><!-- <audio src="http://m10.music.126.net/20180121230941/8d878803b3b0542d9c5482ccf613a86b/ymusic/d95e/bab6/a7f5/864661168da79b309c3d2fac971d1698.mp3" autoplay="autoplay">您的浏览器不支持 audio 标签。</audio> -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/iu kpop star music sony.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Webpack资源汇总</title>
    <link href="https://haldir65.github.io/2018/01/14/2018-01-14-webpack-instructions/"/>
    <id>https://haldir65.github.io/2018/01/14/2018-01-14-webpack-instructions/</id>
    <published>2018-01-14T22:56:46.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/hot coffee city life winter.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>yarn add webpack</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h2><p>&gt;<br>webpack is basically pulling  all external js files into on build.js file that we can bundle into our html.<br>这样做的好处很多，能够有效减少浏览器发出的请求数量。</p><p>minify js(删掉所有的空行) webpack -p即可</p><h2 id="3-webpack-config-js"><a href="#3-webpack-config-js" class="headerlink" title="3. webpack.config.js"></a>3. webpack.config.js</h2><p>一个基本的config长这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./app.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"./bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: <span class="literal">true</span>,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules: [</span><br><span class="line">           &#123;</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                  presets: [<span class="string">'babel-preset-env'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-babel"><a href="#4-babel" class="headerlink" title="4. babel"></a>4. babel</h2><p>首先需要知道的是mudule.exports那一套在浏览器里是不支持的。会出现”require is undefined…”。解决办法也有，安装babel就行了。<br>babel的作用是把es2015的代码编译成es5的代码, 安装方式</p><blockquote><p>yarn add babel-cli babel-preset-env</p></blockquote><p>然后创建一个.babelrc文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>package.json中添加script:<br>babel : “babel”<br>命令行 ： npm run babel – index.js -o bundle.js -w</p><h2 id="5-loaders"><a href="#5-loaders" class="headerlink" title="5. loaders"></a>5. loaders</h2><h2 id="6-babel-css-precomiler"><a href="#6-babel-css-precomiler" class="headerlink" title="6. babel, css precomiler"></a>6. babel, css precomiler</h2><h2 id="7-react-cli"><a href="#7-react-cli" class="headerlink" title="7. react cli"></a>7. react cli</h2><p>=======================================================================================================</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/hot coffee city life winter.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>css预处理语言</title>
    <link href="https://haldir65.github.io/2017/12/26/2017-12-26-less-is-more/"/>
    <id>https://haldir65.github.io/2017/12/26/2017-12-26-less-is-more/</id>
    <published>2017-12-26T22:36:49.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>css预处理语言简介<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/bokeh street lights city art blue.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><p>css预处理语言允许我们以更简单的方式编写样式，通过编译生成浏览器能够使用的css文件。</p><ol><li><a href="http://sass-lang.com/">Sass</a> 诞生于 2007 年，Ruby 编写，其语法功能都十分全面，可以说 它完全把 CSS 变成了一门编程语言。另外 在国内外都很受欢迎，并且它的项目团队很是强大 ，是一款十分优秀的预处理语言。</li><li><a href="http://stylus-lang.com/">Stylus</a> 诞生于 2010 年，来自 Node.js 社区，语法功能也和 Sass 不相伯仲，是一门十分独特的创新型语言。</li><li><a href="http://lesscss.org/">Less</a> 诞生于 2009 年，受Sass的影响创建的一个开源项目。 它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充（引用于官网）。</li></ol><p><a href="http://www.oschina.net/question/12_44255">比较这三种预处理语言</a></p><h2 id="1-Less"><a href="#1-Less" class="headerlink" title="1. Less"></a>1. Less</h2><blockquote><p>安装<br>yarn add less<br>/ or install globally  /<br>yarn global add less<br>// Dead Simple LESS CSS Watch Compiler，实时监控less文件变化，更新到css<br>yarn add less-watch-compiler</p><p>使用<br>lessc styles.less // 并不会生成任何css文件<br>lessc styles.less styles.css //生成一个styles.css文件<br>新建一个style.less文件</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@background-color:</span> <span class="number">#f4f4f4</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@background-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的css文件长这样：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有变量，可以进行数学运算</span></span><br><span class="line"><span class="variable">@line-height:</span> <span class="number">1em</span>+<span class="number">1em</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以嵌套</span></span><br><span class="line"><span class="variable">@secondary-color:</span> <span class="number">#20B2AA</span>;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@background-color</span>;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@secondary-color</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="variable">@line-height</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有继承</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="selector-class">.border-radius</span>(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.primary-btn</span><span class="selector-pseudo">:extend(.btn)</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">@primary-color</span>;</span><br><span class="line">    <span class="selector-class">.text-color</span>(<span class="variable">@primary-color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有函数（mixin），有没有入参都行</span></span><br><span class="line"><span class="selector-class">.bordered</span>&#123;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid2px <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-radius</span>(<span class="variable">@radius</span>) &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还有if statement</span></span><br><span class="line"><span class="selector-class">.text-color</span>(<span class="variable">@a</span>) <span class="keyword">when</span> (lightness(<span class="variable">@a</span>) &gt; = <span class="number">50%</span> )&#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-color</span>(<span class="variable">@a</span>) <span class="keyword">when</span> (lightness(<span class="variable">@a</span>) &lt; <span class="number">50%</span> )&#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>filepath</strong><br>比如经常把一些文件挪到其他位置了，这下在css中引用的位置全部都要换，<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@images:</span> <span class="string">"images/"</span></span><br><span class="line"><span class="variable">@homepage-images</span>: <span class="string">"images/homepage/"</span></span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"@&#123;images&#125;fruit.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>import功能</strong><br>在main.less文件中</p><blockquote><p>@import header.less<br>@import menu.less<br>直接用</p></blockquote><p>更多的使用直接去<a href="http://lesscss.org/">Less</a>查找就好了</p><h2 id="2-Stylus"><a href="#2-Stylus" class="headerlink" title="2.Stylus"></a>2.Stylus</h2><blockquote><p>安装<br>yarn add stylus<br>yarn add stylus-loader</p><p>使用<br>stylus -w style.styl -o style.css //w表示watch</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">line-height</span> = <span class="number">10px</span></span><br><span class="line">body</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">    h1</span><br><span class="line">     <span class="attribute">color</span>: <span class="number">#5e5e5e</span></span><br><span class="line">     <span class="attribute">line-height</span>: line-height</span><br></pre></td></tr></table></figure><p>生成的css文件长这样<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5e5e5e</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixin也有</span></span><br><span class="line"><span class="function"><span class="title">border-radius</span><span class="params">(n)</span></span></span><br><span class="line">  -webkit-<span class="attribute">border-radius</span> n</span><br><span class="line">  -moz-<span class="attribute">border-radius</span> n</span><br><span class="line">  <span class="attribute">border-radius</span> n</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">input</span>[type=button]</span><br><span class="line">  <span class="attribute">border-radius</span>(<span class="number">5px</span>)</span><br></pre></td></tr></table></figure><p><a href="http://stylus-lang.com/">官网</a></p><p>当然日常开发中不可能一直手敲 stylus xxx xxx或者 lessc xxx xxx，因为有webpack-loader。</p><p>=======================================================================================</p><h3 id="6-Sss和Scss"><a href="#6-Sss和Scss" class="headerlink" title="6. Sss和Scss"></a>6. Sss和Scss</h3><p>SCSS 是 Sass 3 引入新的语法，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。也就是说，任何标准的 CSS3 样式表都是具有相同语义的有效的 SCSS 文件。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> rounded($amount) &#123;</span><br><span class="line">  -moz-border-radius: $amount;</span><br><span class="line">  -webkit-border-radius: $amount;</span><br><span class="line">  border-radius: $amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Sass本身不带花括号，加上花括号和分号就成了SCSS了.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css预处理语言简介&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/bokeh street lights city art blue.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot入门记录</title>
    <link href="https://haldir65.github.io/2017/12/13/2017-12-13-spring-boot-elementart-guide/"/>
    <id>https://haldir65.github.io/2017/12/13/2017-12-13-spring-boot-elementart-guide/</id>
    <published>2017-12-13T23:19:33.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>关于Spring Boot的基本知识要点<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100670897.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h2 id="1-创建一个Spring-Boot-app-非常简单"><a href="#1-创建一个Spring-Boot-app-非常简单" class="headerlink" title="1. 创建一个Spring Boot app 非常简单"></a>1. 创建一个Spring Boot app 非常简单</h2><p><a href="https://medium.com/@ahmetkapusuz/spring-boot-hello-world-application-with-intellij-idea-1524c68ddaae">Creating a Spring Application in Intelij is darn Simple</a></p><h2 id="2-组件及用法"><a href="#2-组件及用法" class="headerlink" title="2. 组件及用法"></a>2. 组件及用法</h2><h3 id="2-1-Service"><a href="#2-1-Service" class="headerlink" title="2.1 Service"></a>2.1 Service</h3><h3 id="2-2-Dao"><a href="#2-2-Dao" class="headerlink" title="2.2 Dao"></a>2.2 Dao</h3><h3 id="2-3-Entity"><a href="#2-3-Entity" class="headerlink" title="2.3 Entity"></a>2.3 Entity</h3><h3 id="2-4-Controller"><a href="#2-4-Controller" class="headerlink" title="2.4 Controller"></a>2.4 Controller</h3><h2 id="3-一些配置"><a href="#3-一些配置" class="headerlink" title="3. 一些配置"></a>3. 一些配置</h2><p>Spring Boot修改内置Tomcat端口号：<br>EmbeddedServletContainerCustomizer</p><blockquote><p>或者在<br>src/main/resources/application.yml文件中添加<br>server<br>  port: 8081</p></blockquote><p>=================================================================<br>在windows里面查看内网ip，从控制面板进去看是不准的，DHCP有效期过了自动换掉，得自己敲ipconfig，这样才是最及时的。</p><p><a href="https://www.youtube.com/playlist?list=PLO5e_-yXpYLDcuEz8BlB_J_hQpzI-ZM4Y">2小时学会SpringBoot</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Spring Boot的基本知识要点&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100670897.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>VPS维护的日常</title>
    <link href="https://haldir65.github.io/2017/12/11/2017-12-11-vps-maintenance/"/>
    <id>https://haldir65.github.io/2017/12/11/2017-12-11-vps-maintenance/</id>
    <published>2017-12-11T16:20:16.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100756208.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><p>以下在 ubuntu 16.04.3 LTS 上通过</p><h2 id="1-小硬盘清理垃圾"><a href="#1-小硬盘清理垃圾" class="headerlink" title="1. 小硬盘清理垃圾"></a>1. 小硬盘清理垃圾</h2><blockquote><p>sudo apt-get autoclean 清理旧版本的软件缓存<br>sudo apt-get clean 清理所有软件缓存<br>sudo apt-get autoremove 删除系统不再使用的孤立软件</p></blockquote><h2 id="2-必要软件"><a href="#2-必要软件" class="headerlink" title="2.必要软件"></a>2.必要软件</h2><p>刚装好的 ubuntu 需要执行以下步骤,都是些常用的软件</p><blockquote><p>安装 git &gt; apt-get install git<br>安装 python &gt; apt-get install python-2.7<br>安装 python-setuptools &gt; apt-get install python-setuptools<br>检查是否安装好： python –version</p></blockquote><p>还有一些，比如 htop</p><h3 id="2-1-装-ss"><a href="#2-1-装-ss" class="headerlink" title="2.1 装 ss"></a>2.1 装 ss</h3><blockquote><p>下载 shadowsocks 源码编译<br>git clone <a href="https://github.com/shadowsocks/shadowsocks">https://github.com/shadowsocks/shadowsocks</a></p></blockquote><h1 id="记得切换到-master-分支"><a href="#记得切换到-master-分支" class="headerlink" title="记得切换到 master 分支"></a>记得切换到 master 分支</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p>检查下版本</p><blockquote><p>ssserver –version</p></blockquote><p>编辑配置文件</p><blockquote><p>vim config.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>: <span class="string">"my_server_ip"</span>,</span><br><span class="line">  <span class="attr">"server_port"</span>: <span class="number">8388</span>,</span><br><span class="line">  <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"mypassword"</span>,</span><br><span class="line">  <span class="attr">"timeout"</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">  <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ssserver -c config.json -d start #启动完成</p></blockquote><p>检查下是否启动了</p><blockquote><p>ps -ef |grep sss</p></blockquote><p>ss 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks/config.json # 前台运行</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 后台运行和停止</span></span></span><br><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##  加入开机启动</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 在/etc/rc.local中加入</span></span></span><br><span class="line">sudo ssserver -c /etc/shadowsocks.json --user username -d start - 不要总是用root用户做事，adduser来做，给sudo权限即可</span><br></pre></td></tr></table></figure><h3 id="2-2-SSR-以及一些衍生的软件"><a href="#2-2-SSR-以及一些衍生的软件" class="headerlink" title="2.2 SSR 以及一些衍生的软件"></a>2.2 SSR 以及一些衍生的软件</h3><p><a href="https://github.com/breakwa11/shadowsocks-rss/wiki">ShadowsocksR</a>启动后台运行命令</p><blockquote><p>python server.py -p 443 -k password -m aes-256-cfb -O auth_sha1_v4 -o http_simple -d start</p></blockquote><p><a href="https://zhgcao.github.io/2016/05/26/ubuntu-install-net-speeder/">net-speeder</a></p><blockquote><p>venetX，OpenVZ 架构</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cd net-speeder-master/</span><br><span class="line">sh build.sh -DCOOKED</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##Xen，KVM，物理机</span></span></span><br><span class="line">cd net-speeder-master/</span><br><span class="line">sh build.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 加速所有ip协议数据</span></span></span><br><span class="line"></span><br><span class="line">./net_speeder venet0 "ip"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##只加速指定端口，例如只加速TCP协议的 8989端口, 切换到net-speeder的目录下</span></span></span><br><span class="line">./net_speeder venet0:0 "tcp src port 8989"</span><br><span class="line"></span><br><span class="line">./net_speeder venet0 "ip"</span><br></pre></td></tr></table></figure><h3 id="2-3-升级内核开启-BBR"><a href="#2-3-升级内核开启-BBR" class="headerlink" title="2.3 升级内核开启 BBR"></a>2.3 升级内核开启 BBR</h3><p><a href="https://qiujunya.com/linodebbr.html">KVM 架构升级内核开启 BBR</a></p><p><a href="http://www.itfanr.cc/2016/10/02/use-shadowsocks-to-have-better-internet-experience/">ubuntu 16.4 安装 shadowsocks-libev</a></p><p>参考 github<a href="https://github.com/shadowsocks/shadowsocks-libev">官方教程</a>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common -y</span><br><span class="line">sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev -y</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install shadowsocks-libev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Edit the configuration file</span></span><br><span class="line">sudo vi /etc/shadowsocks-libev/config.json ## 这里记得把server address改成实际的ip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Edit the default configuration <span class="keyword">for</span> debian</span></span><br><span class="line">sudo vi /etc/default/shadowsocks-libev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Start the service</span></span><br><span class="line">sudo /etc/init.d/shadowsocks-libev start    # for sysvinit, or</span><br><span class="line">sudo systemctl start shadowsocks-libev      # for systemd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#加入开机启动</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#在/etc/rc.local中加入</span></span></span><br><span class="line">sudo /etc/init.d/shadowsocks-libev start</span><br></pre></td></tr></table></figure><p>其实跟安装 ss 很像的</p><h2 id="3-一些常用的命令"><a href="#3-一些常用的命令" class="headerlink" title="3. 一些常用的命令"></a>3. 一些常用的命令</h2><blockquote><p>写 alias 算了</p></blockquote><h2 id="10-跑分"><a href="#10-跑分" class="headerlink" title="10.跑分"></a>10.跑分</h2><p><a href="https://github.com/Teddysun/across">VPS 跑分软件</a><br>git clone 下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd across</span><br><span class="line">wget -qO- bench.sh | bash ###（亲测可用，也可以自己看Readme）</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 或者</span></span></span><br><span class="line">curl -Lso- bench.sh | bash</span><br></pre></td></tr></table></figure><p>下面是一些自己试过的</p><h3 id="BandWagon"><a href="#BandWagon" class="headerlink" title="BandWagon"></a>BandWagon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------</span><br><span class="line">CPU model            : Intel(R) Xeon(R) CPU E3-1275 v5 @ 3.60GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 3600.041 MHz</span><br><span class="line">Total size of Disk   : 12.0 GB (10.0 GB Used)</span><br><span class="line">Total amount of Mem  : 256 MB (217 MB Used)</span><br><span class="line">Total amount of Swap : 128 MB (122 MB Used)</span><br><span class="line">System uptime        : 2 days, 4 hour 20 min</span><br><span class="line">Load average         : 0.06, 0.05, 0.01</span><br><span class="line">OS                   : Ubuntu 14.04.1 LTS</span><br><span class="line">Arch                 : i686 (32 Bit)</span><br><span class="line">Kernel               : 2.6.32-042stab123.3</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 855 MB/s</span><br><span class="line">I/O speed(2nd run)   : 1.0 GB/s</span><br><span class="line">I/O speed(3rd run)   : 1.0 GB/s</span><br><span class="line">Average I/O speed    : 967.7 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         76.5MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          17.6MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            8.18MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           8.67MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           12.8MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             9.40MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           62.3MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          66.0MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            12.2MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           11.8MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          13.2MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="BuyVm"><a href="#BuyVm" class="headerlink" title="BuyVm"></a>BuyVm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">CPU model            : Intel(R) Xeon(R) CPU           L5639  @ 2.13GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 2000.070 MHz</span><br><span class="line">Total size of Disk   : 15.0 GB (1.3 GB Used)</span><br><span class="line">Total amount of Mem  : 128 MB (80 MB Used)</span><br><span class="line">Total amount of Swap : 128 MB (32 MB Used)</span><br><span class="line">System uptime        : 0 days, 22 hour 28 min</span><br><span class="line">Load average         : 0.10, 0.04, 0.05</span><br><span class="line">OS                   : Ubuntu 14.04.2 LTS</span><br><span class="line">Arch                 : i686 (32 Bit)</span><br><span class="line">Kernel               : 2.6.32-openvz-042stab116.2-amd64</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 102 MB/s</span><br><span class="line">I/O speed(2nd run)   : 97.1 MB/s</span><br><span class="line">I/O speed(3rd run)   : 147 MB/s</span><br><span class="line">Average I/O speed    : 115.4 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         14.7MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          6.15MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            2.54MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           2.99MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           2.96MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             4.27MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           11.7MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          13.0MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            1.89MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           3.26MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          3.72MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="DigitalOcean-Los-Angeles"><a href="#DigitalOcean-Los-Angeles" class="headerlink" title="DigitalOcean Los Angeles"></a>DigitalOcean Los Angeles</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------</span><br><span class="line">CPU model            : Intel(R) Xeon(R) CPU E5-2650L v3 @ 1.80GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 1799.998 MHz</span><br><span class="line">Total size of Disk   : 20.2 GB (1.0 GB Used)</span><br><span class="line">Total amount of Mem  : 488 MB (33 MB Used)</span><br><span class="line">Total amount of Swap : 0 MB (0 MB Used)</span><br><span class="line">System uptime        : 0 days, 0 hour 3 min</span><br><span class="line">Load average         : 0.16, 0.10, 0.03</span><br><span class="line">OS                   : Ubuntu 16.04.2 LTS</span><br><span class="line">Arch                 : x86_64 (64 Bit)</span><br><span class="line">Kernel               : 4.4.0-78-generic</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 581 MB/s</span><br><span class="line">I/O speed(2nd run)   : 711 MB/s</span><br><span class="line">I/O speed(3rd run)   : 777 MB/s</span><br><span class="line">Average I/O speed    : 689.7 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         161MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          15.7MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            5.96MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           5.71MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           6.45MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             30.4MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           29.9MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          57.7MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            3.64MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           7.59MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          8.84MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="DigitalOcean-Sinapore-ip-adress-lokks-like-Russian"><a href="#DigitalOcean-Sinapore-ip-adress-lokks-like-Russian" class="headerlink" title="DigitalOcean Sinapore (ip adress lokks like Russian)"></a>DigitalOcean Sinapore (ip adress lokks like Russian)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------</span><br><span class="line">CPU model            : Intel(R) Xeon(R) CPU E5-2630L 0 @ 2.00GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 1999.999 MHz</span><br><span class="line">Total size of Disk   : 20.2 GB (1.0 GB Used)</span><br><span class="line">Total amount of Mem  : 488 MB (36 MB Used)</span><br><span class="line">Total amount of Swap : 0 MB (0 MB Used)</span><br><span class="line">System uptime        : 0 days, 0 hour 2 min</span><br><span class="line">Load average         : 0.17, 0.20, 0.09</span><br><span class="line">OS                   : Ubuntu 16.04.2 LTS</span><br><span class="line">Arch                 : x86_64 (64 Bit)</span><br><span class="line">Kernel               : 4.4.0-78-generic</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 662 MB/s</span><br><span class="line">I/O speed(2nd run)   : 741 MB/s</span><br><span class="line">I/O speed(3rd run)   : 728 MB/s</span><br><span class="line">Average I/O speed    : 710.3 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         20.8MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          18.6MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            83.8MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           5.71MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           8.13MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             2.82MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           6.18MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          8.47MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            6.77MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           97.9MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          35.2MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100809920.jpg?imageView2/2/w/600" alt=""></p><h3 id="关于-docker"><a href="#关于-docker" class="headerlink" title="关于 docker"></a>关于 docker</h3><p>youtube 上有人在 Digital Ocean 的 vps 上安装 docker，主要作用就是将一个复杂的操作系统打包成一个下载即用的容器。进入容器中，可以像在实际的操作系统中一样运行指令。所以虚拟化的机器随时可以使用其他操作系统。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.vpser.net/opt/vps-add-swap.html">vps 优化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100756208.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>使用Node和express开发Restful API</title>
    <link href="https://haldir65.github.io/2017/12/10/2017-12-10-Restful-API-Prescription-with-node-express/"/>
    <id>https://haldir65.github.io/2017/12/10/2017-12-10-Restful-API-Prescription-with-node-express/</id>
    <published>2017-12-10T16:20:16.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/sceneryc7fd99f667c9d98a583a174872d58d13.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><blockquote><p>yarn add express</p></blockquote><p>mongoose安装</p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>MiddleWare(中间件)的概念：<br>从Request到response之间的流程中，任何组件都可以对这个过程中的数据进行修改，所以router其实也是中间件。中间件需要注意的就是<strong><em>顺序很重要</em></strong>。</p><p>调试使用postMan</p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>get请求的参数怎么拿<br>get的参数本身都是写在url里面的</p><p>比如<br>GET /student/getById/27<br>app.get(‘/getById/:age’,functin(req,res){<br>    res.send(req.prarms.age);<br>})</p><p>在postMan发起post请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /api/personal?age=10 HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Postman-Token: 79c6d9a1-de8d-3b0b-8d3d-0ed6e1910f69</span><br><span class="line"></span><br><span class="line">name=Josn&amp;age=12</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req.params   <span class="comment">//  Object ，Json.String = &#123;&#125;</span></span><br><span class="line">req.body    <span class="comment">//  &#123;name:'Josn',age:'12'&#125;  //这个是post里面发送的body数据</span></span><br><span class="line">req.query  <span class="comment">// &#123;"age","10"&#125;  // 显然这是url里面的query</span></span><br></pre></td></tr></table></figure><h2 id="3-Serving-static-files"><a href="#3-Serving-static-files" class="headerlink" title="3. Serving static files"></a>3. Serving static files</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(path.join(__dirname,<span class="string">'public'</span>)))</span><br></pre></td></tr></table></figure><p>然后在当前目录新建一个public文件夹，添加img文件夹，里面放一张porn.jpg。<br>浏览器访问： localhost:port/img/porn.jpg 。 就能看到放进去的的那张图片了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/jquery'</span>, express.static(__dirname + <span class="string">'/node_modules/jquery/dist/'</span>));</span><br></pre></td></tr></table></figure><p>这意思就是请求/jquery这个目录下的资源就等于访问/node_modules/jquery/dist/目录下同名的资源</p><h2 id="4-response"><a href="#4-response" class="headerlink" title="4. response"></a>4. response</h2><p>response.redirect(‘/all’); //在浏览器里面看，response的header是这样的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">X-Powered-By: Express</span><br><span class="line">Location: /all</span><br><span class="line">Vary: Accept</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 68</span><br><span class="line">Date: Sun, 14 Jan 2018 10:08:50 GMT</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure></p><p>response.direction();<br>和window.location.href差不多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">GET</span></span><br><span class="line"><span class="comment">/api/user */</span> much extra information you can set on its header</span><br><span class="line">app.get(<span class="string">"/user"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    res.set(&#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Content-Length'</span>: <span class="string">'123'</span>,</span><br><span class="line">        <span class="string">'ETag'</span>: <span class="string">'12345'</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">'max-age=5'</span>,</span><br><span class="line">        <span class="string">"Access-Control-Allow-Origin"</span>: <span class="string">'http://127.0.0.1:8080'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.cookie(<span class="string">'name'</span>, <span class="string">'tobi'</span>, &#123; <span class="attr">domain</span>: <span class="string">'.example.com'</span>, <span class="attr">path</span>: <span class="string">'/admin'</span>, <span class="attr">secure</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'response send'</span>);</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"John"</span>,</span><br><span class="line">        <span class="string">"age"</span>:<span class="number">10</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">"/user"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res,next</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.restran.net/2015/08/19/nginx-frontend-helper/">Nginx 是前端工程师的好帮手</a></p><p><a href="http://expressjs.jser.us/api#req.param">Express Api book</a></p><p><a href="http://imweb.io/topic/570130a306f2400432c1396c">在NodeJs中玩转protoBuffer</a></p><p><a href="http://blog.desmondyao.com/fake-server/">使用nodejs 和express搭建本地API服务器</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/sceneryc7fd99f667c9d98a583a174872d58d13.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB手册</title>
    <link href="https://haldir65.github.io/2017/12/10/2017-12-10-MongoDB-recepies/"/>
    <id>https://haldir65.github.io/2017/12/10/2017-12-10-MongoDB-recepies/</id>
    <published>2017-12-10T16:13:54.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100794441.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><p>MongoDB可以作为Spring boot的数据库DAO，也可以和node平台的express module结合。作为后台开发的数据库，应用很广。</p><h2 id="安装-windows平台下"><a href="#安装-windows平台下" class="headerlink" title="安装(windows平台下)"></a>安装(windows平台下)</h2><p>MongoDB默认装到C盘的program files文件夹里面,需要一个data文件夹<br><a href="https://docs.mongodb.com/v3.4/tutorial/install-mongodb-on-windows/">official on installation</a><br>这个文件夹不一定要在c盘，可以放f盘，比如”f://mongndb//data”<br>//这样启动server时记得把–dbpath传一下</p><h2 id="establish-connection"><a href="#establish-connection" class="headerlink" title="establish connection"></a>establish connection</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// start db server</span><br><span class="line">"C:\Program Files\MongoDB\Server\3.4\bin\mongod.exe" --dbpath d:\test\mongodb\data</span><br><span class="line">// open another shell window to connect to server</span><br><span class="line">"C:\Program Files\MongoDB\Server\3.4\bin\mongo.exe"</span><br><span class="line">// then you can start interact with mongo db server</span><br></pre></td></tr></table></figure><h2 id="速查手册"><a href="#速查手册" class="headerlink" title="速查手册"></a>速查手册</h2><p><a href="https://www.tutorialspoint.com/mongodb/mongodb_create_collection.htm">Tutorial, not official</a><br><a href="https://code.tutsplus.com/articles/an-introduction-to-mongoose-for-mongodb-and-nodejs--cms-29527">Mongoose教程</a><br><a href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/#db.collection.findOneAndDelete">官方手册</a><br><a href="https://scotch.io/tutorials/using-mongoosejs-in-node-js-and-mongodb-applications#what-is-mongoose">Mongoose CURD</a></p><p>语法：</p><blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">use mydb <span class="comment">## 创建一个名mydb的数据库</span></span><br><span class="line">db.createCollection(<span class="string">"students"</span>) <span class="comment">## 创建一个students的collections(类似于sql的table)</span></span><br><span class="line">show collections  <span class="comment">## 显示当前数据库中的所有collections</span></span><br><span class="line">db.students.insert(&#123;<span class="symbol">name:</span> <span class="string">'Json'</span>,<span class="symbol">age:</span> <span class="number">22</span>,<span class="symbol">title:</span>[<span class="string">'teacher'</span>,<span class="string">'professor'</span>,<span class="string">'versatile'</span>]&#125;) <span class="comment">## 往数据库里添加一条数据</span></span><br><span class="line">db.students.find().pretty() /<span class="regexp">/ 显示students的collection中的所有元素，pretty只是好看点</span></span><br><span class="line"><span class="regexp">db.students.updateOne( &#123; "name": "Bob" &#125;, &#123; $set: &#123;"age" : 99&#125;&#125; ); /</span><span class="regexp">/ UPDATE语句 set</span></span><br><span class="line"><span class="regexp">db.students.find( &#123; age : &#123; $gt:24, $lt: 28&#125; &#125; )  /</span><span class="regexp">/ QUERY 语句 greater than and less than</span></span><br><span class="line"><span class="regexp">db.students.deleteOne( &#123; "_id" : ObjectId("5a584a109f157d455472ff11") &#125; ); /</span><span class="regexp">/ DELETE 语句</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">## batchInsert</span></span><br><span class="line"><span class="regexp">try &#123;</span></span><br><span class="line"><span class="regexp">   db.products.insertMany( [</span></span><br><span class="line"><span class="regexp">      &#123; item: "card", qty: 15 &#125;,</span></span><br><span class="line"><span class="regexp">      &#123; item: "envelope", qty: 20 &#125;,</span></span><br><span class="line"><span class="regexp">      &#123; item: "stamps" , qty: 30 &#125;</span></span><br><span class="line"><span class="regexp">   ] );</span></span><br><span class="line"><span class="regexp">&#125; catch (e) &#123;</span></span><br><span class="line"><span class="regexp">   print (e);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="在node环境下可以使用"><a href="#在node环境下可以使用" class="headerlink" title="在node环境下可以使用"></a>在node环境下可以使用</h2><p>Mongoose // a wrapper around the mongo db interface</p><p>schema  definition<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// correct</span></span><br><span class="line"><span class="keyword">var</span> studentSchema = mongoose.Schema(&#123;</span><br><span class="line">    _id: <span class="built_in">String</span>,</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// wrong</span></span><br><span class="line"><span class="keyword">var</span> studentSchema = mongoose.Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>===========================================================================<br>// todo validate request data, error handling.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100794441.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nodejs学习记录</title>
    <link href="https://haldir65.github.io/2017/12/10/2017-12-10-node-js-cookbook/"/>
    <id>https://haldir65.github.io/2017/12/10/2017-12-10-node-js-cookbook/</id>
    <published>2017-12-10T16:13:30.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>npm = node package manager<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100694324.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><p>npm的configuration非常方便设置,首先是<a href="https://stackoverflow.com/questions/7559648/is-there-a-way-to-make-npm-install-the-command-to-work-behind-proxy">设置proxy</a></p><blockquote><p>npm config set strict-ssl false<br>npm config set registry “<a href="http://registry.npmjs.org/">http://registry.npmjs.org/</a>“<br>npm config set proxy <a href="http://127.0.0.1:1080">http://127.0.0.1:1080</a> ## 以上三句话设置代理<br>npm config list ##列出当前所有的设置<br>npm config get stuff ##比如说registry等等</p></blockquote><p><a href="https://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies">whats-the-difference-between-dependencies-devdependencies-and-peerdependencies</a><br>npm有个dependencies的概念，此外还有dev-dependencies的概念，主要看package.json这个文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"node build/dev-server.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"node build/build.js"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"lint"</span>: <span class="string">"eslint --ext .js,.vue src test/unit/specs test/e2e/specs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.15.3"</span>,</span><br><span class="line">    <span class="attr">"jsonp"</span>: <span class="string">"^0.2.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^2.6.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-middleware"</span>: <span class="string">"^1.10.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-hot-middleware"</span>: <span class="string">"^2.18.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-merge"</span>: <span class="string">"^4.1.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*script的意思是输入npm run dev = node build/dev-server.js  类似于 linux下的alias*/</span><br><span class="line"></span><br><span class="line">/*向上箭头的意思是安装的时候会自动去查找安装最新的minor version。关于版本号，第一位表示major version，may incur code imcompatibility,第二位表示minor version，代表new features,第三位表示bug fixes.所以向上箭头意味着安装时不会动第一位，只会升级为第二位最新的版本*/</span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json">stackoverflow上的解释</a></p><blockquote><p>npm install -g grunt –save-dev # 安装，成为全局(-g)module，保存为dev-dependencies(–save-dev) 简写 -D 一个意思<br>npm install -g grunt –save # 安装，保存为dependencies</p><p>npm run dev # 打开发环境包</p><h1 id="npm-run-build-打release包"><a href="#npm-run-build-打release包" class="headerlink" title="npm run build # 打release包"></a>npm run build # 打release包</h1><p>node is based on chrome v8 engine,it’s javaScript without the browser.</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello!'</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>node app.js<br>hello!</p></blockquote><h2 id="创建node-project"><a href="#创建node-project" class="headerlink" title="创建node project"></a>创建node project</h2><blockquote><p>npm init<br>会提示一些信息，生成一个package.json文件</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main是指程序的运行入口<br>script是指可以自己设置启动的命令，有点像alias<br>比如 vue-cli的package.json里面就是这样的</p><blockquote><p>“dev”: “node build/dev-server.js”,<br>“build”: “node build/build.js”</p></blockquote><p>所以用户只要输入</p><blockquote><p>npm run dev<br>就等同于<br>node build/dev-server.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">// http is a core module ,so we do't need install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">cost server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">trueres.statusCode = <span class="number">200</span>;</span><br><span class="line">trueres.setHeader(<span class="string">'Content-type'</span>,<span class="string">'text/plain'</span>);</span><br><span class="line">trueres.end(<span class="string">'Hello there!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(port,hostname,() =&gt;&#123;</span><br><span class="line">true<span class="built_in">console</span>.log(<span class="string">'Server started on port '</span>+ port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时去浏览器中打开’localhost:3000’，会返回’Hello there!’</p><p>想要返回一个html并在浏览器中渲染，<br>ctrl+c停止服务器，修改代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs =<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'index.html'</span>,(err,html) =&gt; &#123;</span><br><span class="line">true<span class="keyword">if</span> (err) &#123;</span><br><span class="line">truetrue<span class="keyword">throw</span> err;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">truetrueres.statusCode = <span class="number">200</span>;</span><br><span class="line">truetrueres.setHeader(<span class="string">'Content-type'</span>,<span class="string">'text/html'</span>);</span><br><span class="line">truetrueres.write(html);</span><br><span class="line">truetrueres.end();</span><br><span class="line">true&#125;);</span><br><span class="line"></span><br><span class="line">trueserver.listen(port,hostname,() =&gt;&#123;</span><br><span class="line">truetrue<span class="built_in">console</span>.log(<span class="string">'Server started on port '</span>+ port);</span><br><span class="line">true&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在重新运行node index，打开浏览器，在3000端口就能看到html网页了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"api"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"app.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"^1.18.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dependencies里面向上箭头表示安装最新的minor version。而使用”*“号的话就表示想要使用latest version</p><p>=============================================================================<br>Compile ES6 ES2017 Code to ES5 Code</p><blockquote><p>npm install –save-dev webpack webpack-dev-server babel-core babel-loader babel-preset-env<br>npm install –save-dev babel-polyfill babel-preset-stage-0 ## 用async await的话需要安装polyfill</p></blockquote><p>package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"bable-assemble"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"webpack-dev-server --output-public-path=/build/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^7.1.2"</span>,</span><br><span class="line">    <span class="attr">"babel-polyfill"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.6.1"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-stage-0"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"http-server"</span>: <span class="string">"^0.10.0"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^3.10.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^2.9.7"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>output的文件夹名有些人喜欢叫dist，有些人用build。都行，没有区别的。</p><p>如果手动敲webpack的话，会提示你找不到webpack，这是因为没有globally install webpack,webpack还只是个local file。 这也就是写在script里面的原因了: 让npm去node_modules里面找一个叫做webpack的依赖，然后运行webpack。</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        app:[<span class="string">'babel-polyfill'</span>,<span class="string">'./src/app.js'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">"build"</span>),</span><br><span class="line">        filename:<span class="string">"app.bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        loaders:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.js?$/</span>,</span><br><span class="line">                exclude:<span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader:<span class="string">"babel-loader"</span>,</span><br><span class="line">                query:&#123;</span><br><span class="line">                    presets:[<span class="string">'env'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>yarn 是facebook设计的，yarn is faster than npm<br>npm install yarn -g</p><blockquote><p>npm install express<br>yarn add express</p></blockquote><p>这俩是一样的,一些常用的command</p><blockquote><p>yarn init<br>yarn global add nodemon<br>yarn outdated<br>yarn cache clean<br>yarn run dev<br>yarn upgrade express</p></blockquote><p>eslint修改配置，让js文件每一行后面都得加冒号(allow semi colons)<br><a href="https://stackoverflow.com/questions/40453894/allow-semi-colons-in-javascript-eslint">allow semi colons in javascript eslint</a><br>在.eslintrc中，添加custom rules<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"rules": &#123;</span><br><span class="line">        "semi": [2, "always"]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>node js不支持es2015的import 和export语法，需要使用mudule的话，可使用commonJs，即:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// library.js</span></span><br><span class="line"><span class="built_in">module</span>.export.awesome = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  consle.log(<span class="string">'awesome'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> library = <span class="built_in">require</span>(<span class="string">'./library'</span>);</span><br><span class="line">library.awesome();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注意两点，</span></span><br><span class="line"><span class="comment">// 1. require()后面跟的路径是('./library')，是指在当前路径下，而不是在node_modules那个大的文件夹里面找</span></span><br><span class="line"><span class="comment">// 2. require('./library') 和require('./library.js')没有区别</span></span><br></pre></td></tr></table></figure></p><p>sourcemaps<br>开发过程中使用的是ES2015代码，编译之后就成了非常长的es5代码，在浏览器里面几乎无法断点。使用sourcemap就能在浏览器中将es5代码“反编译”成ES2015代码，还可以打断点。</p><p>好用的module<br>path(core module, 无需安装)<br>http(core module, 无需安装)<br>express<br>nodemon // 实时监控本地文件变化，重启服务，安装npm install nodemon -g<br>body-parser<br>ejs<br>pm2 //starting an node app as a bcakground service<br>mongoose</p><p>=============================================================================</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.join(__dirname,<span class="string">'filename'</span>); <span class="comment">// ./filename</span></span><br><span class="line">path.join(__dirname,<span class="string">".."</span>,filename); <span class="comment">// ../filename ,go to parent directory</span></span><br></pre></td></tr></table></figure><p>node里面就不要用Ajax了，推荐axios，原生自带也有https。<br><a href="https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b">node社区最终决定使用mjs文件后缀</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;npm = node package manager&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100694324.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Nginx使用记录</title>
    <link href="https://haldir65.github.io/2017/12/10/2017-12-10-nginx-culinary-tips/"/>
    <id>https://haldir65.github.io/2017/12/10/2017-12-10-nginx-culinary-tips/</id>
    <published>2017-12-10T16:12:43.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://nginx.org/en/docs/windows.html">Installing nginx on windows</a><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110073841.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>安装教程，google ‘installing nginx on ubuntu’<br>基本上就是把DigitalOcean写的这些复制粘贴过来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># We can list the applications configurations that ufw knows how to work with by typing:</span></span></span><br><span class="line">sudo ufw app list</span><br><span class="line">sudo ufw allow 'Nginx HTTP'</span><br><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><h3 id="1-1-安装失败的解决方案"><a href="#1-1-安装失败的解决方案" class="headerlink" title="1.1 安装失败的解决方案"></a>1.1 安装失败的解决方案</h3><blockquote><p>Job for nginx.service failed because the control process exited with error code.<br> See “systemctl status nginx.service” and “journalctl -xe” for details.<br>invoke-rc.d: initscript nginx, action “start” failed.<br>● nginx.service - A high performance web server and a reverse proxy server<br>   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</p></blockquote><p>根据<a href="https://askubuntu.com/questions/764222/nginx-installation-error-in-ubuntu-16-04">Nginx installation error in Ubuntu 16.04</a><br>解决方案:</p><blockquote><p>Check your nginx error log:<br>sudo cat /var/log/nginx/error.log|less<br>Then try again:<br>sudo apt-get update;sudo apt-get upgrade</p></blockquote><p>我看到的是:</p><blockquote><p>2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)<br>2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)<br>2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)<br>2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)<br>2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)</p></blockquote><p>就是80端口被占用了，看下谁在用:</p><blockquote><p>lsof -i:80</p></blockquote><h2 id="2-常用command"><a href="#2-常用command" class="headerlink" title="2. 常用command"></a>2. 常用command</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看当前status</span></span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># stop</span></span></span><br><span class="line">sudo systemctl stop nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># start</span></span></span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启</span></span></span><br><span class="line">sudo systemctl restart nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  改了配置文件之后可以直接reload，而不会失去连接</span></span></span><br><span class="line">sudo systemctl reload nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># nginx默认开机启动的,取消开机启动</span></span></span><br><span class="line">sudo systemctl disable nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  加入开机启动</span></span></span><br><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure><h2 id="3-常用目录和文件-直接从DigitalOcean复制过来了"><a href="#3-常用目录和文件-直接从DigitalOcean复制过来了" class="headerlink" title="3. 常用目录和文件(直接从DigitalOcean复制过来了)"></a>3. 常用目录和文件(直接从DigitalOcean复制过来了)</h2><ul><li>/var/www/html ## 就是放默认首页的地方（原因是 /etc/nginx/sites-enabled/default这里面设置的）<br>&gt;<br>/etc/nginx: The Nginx configuration directory. All of the Nginx configuration files reside here.<br>/etc/nginx/nginx.conf: The main Nginx configuration file. This can be modified to make changes to the Nginx global configuration.<br>/etc/nginx/sites-available/: The directory where per-site “server blocks” can be stored. Nginx will not use the configuration files found in this directory unless they are linked to the sites-enabled directory (see below). Typically, all server block configuration is done in this directory, and then enabled by linking to the other directory.<br>/etc/nginx/sites-enabled/: The directory where enabled per-site “server blocks” are stored. Typically, these are created by linking to configuration files found in the sites-available directory.<br>/etc/nginx/snippets: This directory contains configuration fragments that can be included elsewhere in the Nginx configuration. Potentially repeatable configuration segments are good candidates for refactoring into snippets.</li></ul><p>访问日志都在这里<br>&gt;<br>/var/log/nginx/access.log: Every request to your web server is recorded in this log file unless Nginx is configured to do otherwise.<br>/var/log/nginx/error.log: Any Nginx errors will be recorded in this log.</p><h2 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4.配置文件"></a>4.配置文件</h2><h3 id="4-1-不想用80端口怎么办-比如跟apache冲突了"><a href="#4-1-不想用80端口怎么办-比如跟apache冲突了" class="headerlink" title="4.1 不想用80端口怎么办(比如跟apache冲突了)"></a>4.1 不想用80端口怎么办(比如跟apache冲突了)</h3><p>修改 /etc/nginx/nginx.conf文件<br>config文件的大致结构就是这样,来自<a href="https://stackoverflow.com/questions/10829402/how-to-start-nginx-via-different-portother-than-80">stackoverflow</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">    <span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay        on;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable <span class="string">"MSIE [1-6]\.(?!.*SV1)"</span>;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    include /etc/nginx/sites-enabled/*;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line"></span><br><span class="line">        listen       81;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">         proxy_pass  http://94.143.9.34:9500;</span><br><span class="line">         proxy_set_header   Host             <span class="variable">$host</span>:81;</span><br><span class="line">         proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">         proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">         proxy_set_header Via    <span class="string">"nginx"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> mail &#123;</span><br><span class="line">      See sample authentication script at:</span><br><span class="line">      http://wiki.nginx.org/NginxImapAuthenticateWithApachePhpScript</span><br><span class="line"></span><br><span class="line">      auth_http localhost/auth.php;</span><br><span class="line">      pop3_capabilities <span class="string">"TOP"</span> <span class="string">"USER"</span>;</span><br><span class="line">      imap_capabilities <span class="string">"IMAP4rev1"</span> <span class="string">"UIDPLUS"</span>;</span><br><span class="line"></span><br><span class="line">     server &#123;</span><br><span class="line">         listen     localhost:110;</span><br><span class="line">         protocol   pop3;</span><br><span class="line">         proxy      on;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     server &#123;</span><br><span class="line">         listen     localhost:143;</span><br><span class="line">         protocol   imap;</span><br><span class="line">         proxy      on;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>比如想要通过81端口访问，加上这么一行<br>server {<br>    listen       81;<br>    server_name  example.org  www.example.org;<br>    root         /var/www/html/<br>}</p><p>Checking nginx config file syntax</p><blockquote><p>nginx -t -c conf/nginx.conf<br>nginx -s quit  //gracefully stop  on windows<br>nginx -s stop // force stop on windows</p></blockquote><h3 id="4-2-限制日志文件的大小"><a href="#4-2-限制日志文件的大小" class="headerlink" title="4.2 限制日志文件的大小"></a>4.2 限制日志文件的大小</h3><p>根据上面的config文件，默认的访问日志是在/var/log/nginx/access.log这个文件里面。限制这个文件的大小的方法：<br><a href="https://serverfault.com/questions/427144/how-to-limit-nginx-access-log-file-size-and-compress">serverfault</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/etc/logrotate.d/nginx</span><br><span class="line">/var/log/nginx/access_log &#123;</span><br><span class="line">    rotate 7</span><br><span class="line">    size 5k</span><br><span class="line">    dateext</span><br><span class="line">    dateformat -%Y-%m-%d</span><br><span class="line">    missingok</span><br><span class="line">    compress</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">        test -r /var/run/nginx.pid &amp;&amp; kill -USR1 `cat /var/run/nginx.pid`</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，当网站访问量大后，日志数据就会很多，如果全部写到一个日志文件中去，文件会变得越来越大。文件大速度就会慢下来，比如一个文件几百兆。写入日志的时候，会影响操作速度。另外，如果我想看看访问日志，一个几百兆的文件，下载下来打开也很慢。为了方便对日志进行分析计算，需要对日志进行定时切割。定时切割的方式有按照月切割、按天切割，按小时切割等。最常用的是按天切割。<a href="http://www.codeceo.com/article/nginx-log.html">脚本</a></p><h3 id="4-3-分享特定目录-serve-static-files"><a href="#4-3-分享特定目录-serve-static-files" class="headerlink" title="4.3 分享特定目录(serve static files)"></a>4.3 分享特定目录(serve static files)</h3><p><a href="https://stackoverflow.com/questions/33989060/how-to-serve-a-directory-of-static-files-at-a-certain-location-path-with-nginx">How to serve a directory of static files at a certain location path with nginx?</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name   something.nateeagle.com;</span><br><span class="line"></span><br><span class="line">  location /something &#123;</span><br><span class="line">    alias /home/neagle/something;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有的时候会看到两种写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location /static/ &#123;</span><br><span class="line">        root /var/www/app/static/;</span><br><span class="line">        autoindex off;</span><br><span class="line">&#125;</span><br><span class="line">## 结果是/var/www/app/static/static目录</span><br><span class="line"></span><br><span class="line">location /static/ &#123;</span><br><span class="line">        alias /var/www/app/static/;</span><br><span class="line">        autoindex off;</span><br><span class="line">&#125;</span><br><span class="line">##这才是/var/www/app/static目录</span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/10631933/nginx-static-file-serving-confusion-with-root-alias">location里面写root还是alias</a></p><p><a href="http://blog.51cto.com/nolinux/1317109">那alias标签和root标签到底有哪些区别呢？</a><br>1、alias后跟的指定目录是准确的,并且末尾必须加“/”，否则找不到文件</p><p>location /c/ {<br>      alias /a/<br>}<br>如果访问站点<a href="http://location/c访问的就是/a/目录下的站点信息。">http://location/c访问的就是/a/目录下的站点信息。</a><br>2、root后跟的指定目录是上级目录，并且该上级目录下要含有和location后指定名称的同名目录才行，末尾“/”加不加无所谓。</p><p>location /c/ {<br>      root /a/<br>}<br>如果访问站点<a href="http://location/c访问的就是/a/c目录下的站点信息。">http://location/c访问的就是/a/c目录下的站点信息。</a><br>3、一般情况下，在location /中配置root，在location /other中配置alias是一个好习惯。</p><p>在windows平台下这么写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">           root D:/VDownload;</span><br><span class="line">           index index.html index.htm;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>nginx -s reload 然后重启nginx</p></blockquote><h3 id="4-4-Nginx软链接"><a href="#4-4-Nginx软链接" class="headerlink" title="4.4 Nginx软链接"></a>4.4 Nginx软链接</h3><p>目测不能用软链接</p><p>###4.5 Nginx通过CORS实现跨域<br>在nginx.conf里找到server项,并在里面添加如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">add_header &apos;Access-Control-Allow-Origin&apos; &apos;http://example.com&apos;;</span><br><span class="line">add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">add_header &apos;Access-Control-Allow-Headers&apos; &apos;Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Requested-With&apos;;</span><br><span class="line">add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET,POST,OPTIONS&apos;;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但上述配置只能实现允许一个domain或者*实现跨域，Nginx允许多个域名跨域访问<br>在location context的上层添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">map $http_origin $corsHost &#123;</span><br><span class="line">    default 0;</span><br><span class="line">    &quot;~http://www.example.com&quot; http://www.example.com;</span><br><span class="line">    &quot;~http://m.example.com&quot; http://m.example.com;</span><br><span class="line">    &quot;~http://wap.example.com&quot; http://wap.example.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.example2.com;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    location /</span><br><span class="line">    &#123;</span><br><span class="line">        add_header Access-Control-Allow-Origin $corsHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-proxy-pass"><a href="#5-proxy-pass" class="headerlink" title="5. proxy_pass"></a>5. proxy_pass</h2><p>根据<a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-14-04">how-to-set-up-a-node-js-application-for-production-on-ubuntu-14-04</a></p><blockquote><p>/etc/nginx/sites-available/default<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://APP_PRIVATE_IP_ADDRESS:8080; // A应用跑在8080端口，外部访问http://example.com/即可访问应用服务</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_cache_bypass $http_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /app2 &#123;</span><br><span class="line">       proxy_pass http://APP_PRIVATE_IP_ADDRESS:8081; // B应用跑在8081端口，外部访问http://example.com/app2即可访问应用服务</span><br><span class="line">       proxy_http_version 1.1;</span><br><span class="line">       proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">       proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class="line">       proxy_set_header Host $host;</span><br><span class="line">       proxy_cache_bypass $http_upgrade;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="5-1-pratical-take-aways"><a href="#5-1-pratical-take-aways" class="headerlink" title="5.1 pratical take aways"></a>5.1 pratical take aways</h3><p><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/">nginx配置location总结及rewrite规则写法</a></p><h3 id="Nginx模块"><a href="#Nginx模块" class="headerlink" title="Nginx模块"></a>Nginx模块</h3><p>http_image_filter_module（图片裁剪模块）<br>首先查看是否已安装http_image_filter_module模块</p><blockquote><p>nginx -V<br>/etc/nginx/nginx.conf文件添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location /image &#123;</span><br><span class="line">truetrue   alias &quot;/imgdirectory/&quot;;  ## 这样直接输入 yourip/image/imgname.jpeg就能返回原始图片</span><br><span class="line">&#125;</span><br><span class="line">location ~* (.*\.(jpg|jpeg|gif|png))!(.*)!(.*)$ &#123;  ## 这个是匹配全站图片资源</span><br><span class="line">        set $width      $3;  </span><br><span class="line">        set $height     $4;  </span><br><span class="line">        rewrite &quot;(.*\.(jpg|jpeg|gif|png))(.*)$&quot; $1;  ## 这样输入 yourip/image/imgname.jpeg!200!200就能返回200*200的图片</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">location ~* /imgs/.*\.(jpg|jpeg|gif|png|jpeg)$ &#123;  </span><br><span class="line">truetruetrueroot &quot;/var/www/&quot;;</span><br><span class="line">  image_filter resize $width $height;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>亲测上述可行，python也有类似库<a href="https://github.com/thumbor/thumbor">thumbor</a></p><p>关于正则匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">## 比如匹配全站所有的结尾图片</span><br><span class="line">location ~* \.(jpg|gif|png)$ &#123;</span><br><span class="line"></span><br><span class="line">               image_filter resize 500 500;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">### 匹配某个目录所有图片       </span><br><span class="line">location ~* /image/.*\.(jpg|gif|png)$ &#123;</span><br><span class="line"></span><br><span class="line">            image_filter resize 500 500;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>更多直接google吧。</p><h3 id="添加黑名单"><a href="#添加黑名单" class="headerlink" title="添加黑名单"></a>添加黑名单</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#获取各个IP访问次数</span></span></span><br><span class="line"></span><br><span class="line">awk '&#123;print $1&#125;' nginx.access.log |sort |uniq -c|sort -n</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 新建一个黑名单文件 blacklist.conf ,放在 nginx/conf下面。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#添加一个IP ，deny 192.168.59.1;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 在http或者server模块引入</span></span></span><br><span class="line"></span><br><span class="line">  include blacklist.conf ;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#需要重启服务器, nginx -s reload; 即可生效</span></span></span><br></pre></td></tr></table></figure><p>防御DDOS是一个系统工程，这里只是一小点。</p><h3 id="6-问题速查"><a href="#6-问题速查" class="headerlink" title="6. 问题速查"></a>6. 问题速查</h3><ul><li>nginx.service - A high performance web server and a reverse proxy server<br> Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)<br> Active: failed (Result: exit-code) since Fri 2017-12-29 20:12:50 EST; 3min 21s ago</li></ul><p>启动失败，检查/var/log/nginx/error.log 或者/var/log/syslog。<br>windows下应该在nginx/logs/error.log文件里面</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://wizardforcel.gitbooks.io/nginx-doc/content/Text/6.1_nginx_windows.html">nginx Configurations</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04">How To Install Nginx on Ubuntu 16.04</a></li><li><a href="https://www.digitalocean.com/community/tutorials/understanding-the-nginx-configuration-file-structure-and-configuration-contexts">understanding-the-nginx-configuration-file</a></li><li><a href="https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/">if is evil, 可以,但不要在config文件里面写if</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration">nginx的一些优化策略</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://nginx.org/en/docs/windows.html&quot;&gt;Installing nginx on windows&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110073841.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
      <category term="nginx" scheme="https://haldir65.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>css3速查手册</title>
    <link href="https://haldir65.github.io/2017/12/09/2017-12-09-css3-explained/"/>
    <id>https://haldir65.github.io/2017/12/09/2017-12-09-css3-explained/</id>
    <published>2017-12-09T17:56:06.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>一份css3知识汇总<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100802774.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">animation-name</span>: mayanimation;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">4s</span>;</span><br><span class="line">    <span class="attribute">animation-iteration-count</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">animation-fill-mode</span>: forwards; <span class="comment">/* forwards表示动画完成后，stay as the end of animation */</span></span><br><span class="line">    <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">    <span class="attribute">animation-timing-function</span>: ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> myanimation &#123;</span><br><span class="line">  0% &#123;<span class="attribute">background-color</span>: white;<span class="attribute">left</span>:<span class="number">0px</span>;<span class="attribute">top</span>:<span class="number">0px</span>;<span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> ;&#125;</span><br><span class="line">  25%&#123;<span class="attribute">background-color</span>: red;<span class="attribute">left</span>: <span class="number">300px</span>;<span class="attribute">top</span>: <span class="number">0px</span>;<span class="attribute">border-radius</span>: <span class="number">50%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> &#125;</span><br><span class="line">  50%&#123;<span class="attribute">background-color</span>: green;<span class="attribute">left</span>: <span class="number">300px</span>;<span class="attribute">top</span>: <span class="number">300px</span>;<span class="attribute">border-radius</span>: <span class="number">50%</span> <span class="number">50%</span> <span class="number">0</span> <span class="number">0</span> &#125;</span><br><span class="line">  75%&#123;<span class="attribute">background-color</span>: blue;<span class="attribute">left</span>: <span class="number">0px</span>;<span class="attribute">top</span>: <span class="number">300px</span>;<span class="attribute">border-radius</span>: <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span> <span class="number">0</span>&#125;</span><br><span class="line">  100% &#123;<span class="attribute">background-color</span>: white;<span class="attribute">left</span>: <span class="number">0px</span>;<span class="attribute">top</span>: <span class="number">0px</span>;<span class="attribute">border-radius</span>: <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span> <span class="number">50%</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>需要注意的是，如果animation的duration不写的话，是不会生效的</em></strong></p><h3 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h3><p>基本就是pseudo selector之间相互变化的时候，在新的状态和原本的状态之间属性变化切换的动画。<br>Transition这个词应该是卡通中使用的，用于显示from state到to state之间的过渡。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">transition-property</span>: all;</span><br><span class="line">    <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transition-timing-function</span>: linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>和animation一样，如果transition的duration不写的话，是不会起效的</em></strong></p><ul><li><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">css-flex-box-guide</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一份css3知识汇总&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100802774.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android知识集合[三]</title>
    <link href="https://haldir65.github.io/2017/12/08/2017-12-08-clutter-repo-for-android/"/>
    <id>https://haldir65.github.io/2017/12/08/2017-12-08-clutter-repo-for-android/</id>
    <published>2017-12-08T22:33:26.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>之前的文章快装不下了，所以另外开一篇文章专门放Android相关的杂乱的知识点。<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100734648.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><p><a href="https://android-review.googlesource.com">Android Source code</a>，能够实时看到提交信息<br><a href="https://www.youtube.com/watch?v=CMzCccqE_R0">From View to Pixel</a>讲了ViewRootImpl,SurfaceFlinger这些东西<br><a href="https://juejin.im/post/5a1e8d5ef265da431280ae19">一个很长的关于显示原理的文章</a>，基本上什么都讲了</p><h3 id="1-基本上所有的Android-System-Event都是从ActivityThread中发起的"><a href="#1-基本上所有的Android-System-Event都是从ActivityThread中发起的" class="headerlink" title="1.基本上所有的Android System Event都是从ActivityThread中发起的"></a>1.基本上所有的Android System Event都是从ActivityThread中发起的</h3><p>onDetachedFromWindow是从ActivityThread的handleDestoryActivity传下来的，走到windowManager.removeViewImediate,然后ViewRootImpl.doDie,然后ViewRootImpl.dispatchDetachedFromWindow，然后DecoreView.dispatchDetachedFromWindow，然后一个个child传下去。所有的View走完了之后，DecorView在onDetachedFromWindow中以Window.Callback的方式顺手通知了Activity的onDetachedFromWindow。其实打个断点看的话就快一点。</p><h3 id="2-onSaveInstance对于有id的View，系统会自动帮忙存一点东西"><a href="#2-onSaveInstance对于有id的View，系统会自动帮忙存一点东西" class="headerlink" title="2. onSaveInstance对于有id的View，系统会自动帮忙存一点东西"></a>2. onSaveInstance对于有id的View，系统会自动帮忙存一点东西</h3><p>当然onSaveInstance也是从ActivityThread里面传递下来的。还有就是onCreate(Bundle)和onRestroreSaveInstanceState(Bundle)里面的bundle是同一个object。romain Guy说最初onSaveInstance和onRestroreSaveInstanceState本来叫onIcy(冻结)和onThaw（解冻），确实很形象。<br>其实这个到现在还有一些痕迹:<br>ViewGroup.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchFreezeSelfOnly</span><span class="params">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.dispatchSaveInstanceState(container);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchThawSelfOnly</span><span class="params">(SparseArray&lt;Parcelable&gt; container)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.dispatchRestoreInstanceState(container);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-android-asset-atlas"><a href="#3-android-asset-atlas" class="headerlink" title="3.android asset atlas"></a>3.android asset atlas</h3><p>就是为了节省asset耗费的内存，将一些系统公用的资源作为一个服务先跑起来，所有app的process共用这部分资源。</p><h3 id="4-ZygoteInit"><a href="#4-ZygoteInit" class="headerlink" title="4. ZygoteInit"></a>4. ZygoteInit</h3><h3 id="5-Michael-Bailey每年的演讲都很精彩"><a href="#5-Michael-Bailey每年的演讲都很精彩" class="headerlink" title="5. Michael Bailey每年的演讲都很精彩"></a>5. Michael Bailey每年的演讲都很精彩</h3><p><a href="https://www.youtube.com/watch?v=eAtMon8ndfk">Droidcon NYC 2015 - How the Main Thread works</a><br><a href="https://www.youtube.com/watch?v=Y06wmVIFlsw">Droidcon NYC 2016 - How LayoutInflater works</a><br><a href="https://www.youtube.com/watch?v=7lCsp84wVPM">droidcon NYC 2017 - How Espresso Works</a></p><p>2016年的演讲中提到了LayoutInflater中的好玩的注释<br>LayoutInflater.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (name.equals(TAG_1995)) &#123;</span><br><span class="line">            <span class="comment">// Let's party like it's 1995!</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BlinkLayout(context, attrs);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><h3 id="6-Chris-Banes在2017年给出了关于状态栏的解释"><a href="#6-Chris-Banes在2017年给出了关于状态栏的解释" class="headerlink" title="6. Chris Banes在2017年给出了关于状态栏的解释"></a>6. Chris Banes在2017年给出了关于状态栏的解释</h3><p><a href="https://www.youtube.com/watch?v=_mGDMVRO3iE">droidcon NYC 2017 - Becoming a master window fitter</a></p><h3 id="7-Android默认的launcher的repo在"><a href="#7-Android默认的launcher的repo在" class="headerlink" title="7. Android默认的launcher的repo在"></a>7. Android默认的launcher的repo在</h3><p><a href="https://android.googlesource.com/platform/packages/apps/Launcher3/">Launcher3</a>,应该是属于System UI Team在维护。<br>todo 那个点击了icon进应用的点击事件在哪里。大致是在Launcher.java这个文件的startActivitySafely里面</p><h3 id="8-在string-xml里面放一些format的字符"><a href="#8-在string-xml里面放一些format的字符" class="headerlink" title="8. 在string.xml里面放一些format的字符"></a>8. 在string.xml里面放一些format的字符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   String s1 = <span class="string">"这里面可以放多个字符串%1$s,%2$s前面加上一个百分号和数字，代表顺序"</span>;</span><br><span class="line">   String s2 = <span class="string">"百分号的d和百分号的s可以混着%1$s用的，比如这个%2$d数字什么的，第三个是带百分号的数字%3$d%%这个由于需要显示百分号，所以加上两个百分号"</span>;</span><br><span class="line"></span><br><span class="line">   System.out.println(String.format(s1,<span class="string">"XXXX"</span>,<span class="string">"XXX"</span>));</span><br><span class="line">   System.out.println(String.format(s2,<span class="string">"XXX"</span>, <span class="number">100</span>, <span class="number">100</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际输出</p><blockquote><p>这里面可以放多个字符串XXXX,XXX前面加上一个百分号和数字，代表顺序<br>百分号的d和百分号的s可以混着XXX用的，比如这个100数字什么的，第三个是带百分号的数字100%这个由于需要显示百分号，所以加上两个百分号</p></blockquote><h3 id="9-我记得Chet-Haase说过Lollipop及以上的Button默认是有一个elevation的"><a href="#9-我记得Chet-Haase说过Lollipop及以上的Button默认是有一个elevation的" class="headerlink" title="9.我记得Chet Haase说过Lollipop及以上的Button默认是有一个elevation的"></a>9.我记得Chet Haase说过Lollipop及以上的Button默认是有一个elevation的</h3><p>记得Chet在一次演讲中说到Appcompat在5.0以上默认使用material Theme, Button的默认elevation好像是3dp。日常开发中也经常会看见button和设置elevation=0的button相比确实有些阴影。在Button的构造函数里面打了断点，在setElevation也打了断点，最后发现是在View创建之后Choregrapher在doFrame的时候run了一个Animation，在这个animation中设置了一个6px的elevation(2dp，原来Chet记错了)。<br>至于这个2dp是那来的呢：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:stateListAnimator</span>=<span class="string">"@null"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">android:stateListAnimator</span>=<span class="string">"@anim/my_animator"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>最终在网上<a href="http://www.itmmd.com/201412/240.html">找到了</a><br>core/res/res/anim/button_state_list_anim_material.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!-- Copyright (C) 2014 The Android Open Source Project</span></span><br><span class="line"><span class="comment">   Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">   you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">   You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">        http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">   Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">   distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">   See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">   limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span> <span class="attr">android:state_enabled</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"translationZ"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:duration</span>=<span class="string">"@integer/button_pressed_animation_duration"</span> <span class="attr">100ms</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueTo</span>=<span class="string">"@dimen/button_pressed_z_material"</span> ## <span class="attr">4dp</span> 其实稍微注意下，手指按住一个<span class="attr">Button</span>的时候，<span class="attr">Button</span>底部的阴影会扩大，就是这个<span class="attr">4dp</span>的属性动画在跑</span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"elevation"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:duration</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueTo</span>=<span class="string">"@dimen/button_elevation_material"</span> ## <span class="attr">2dp</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- base state --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_enabled</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"translationZ"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:duration</span>=<span class="string">"@integer/button_pressed_animation_duration"</span>  ##<span class="attr">100ms</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueTo</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:startDelay</span>=<span class="string">"@integer/button_pressed_animation_delay"</span> ## <span class="attr">100ms</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"elevation"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:duration</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueTo</span>=<span class="string">"@dimen/button_elevation_material"</span> ## <span class="attr">2dp</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueType</span>=<span class="string">"floatType"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"translationZ"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:duration</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueTo</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">objectAnimator</span> <span class="attr">android:propertyName</span>=<span class="string">"elevation"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:duration</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueTo</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">android:valueType</span>=<span class="string">"floatType"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意那个button_elevation_material：<br>在<a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/values/dimens_material.xml">aosp</a>中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Elevation when button is pressed --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_elevation_material"</span>&gt;</span>2dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Z translation to apply when button is pressed --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"button_pressed_z_material"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong><em>所以Lollipop上使用Appcompat主题，什么都不改，button默认是会有2dp的elevation的</em></strong><br>至于这个elevation为什么不是在初始化的时候就设置的（打断点的时候走完构造函数,getElevation还是0），就在于这上面这个AnimationDelay(其实是100ms之后再去运行这个动画)，从堆栈来看，最终导致调用setElevation的地方是在drawableStateChange这个方法里面。</p><h3 id="10-内网传输功能的原理"><a href="#10-内网传输功能的原理" class="headerlink" title="10. 内网传输功能的原理"></a>10. 内网传输功能的原理</h3><p>有些App提供局域网内无限传输文件的能力：本质上是用了TCP或者UDP。在java层的话，TCP用的是java.net.Socket，UDP用的是java.net.DatagramSocket。由于数据传输是双向的，客户端和Server端都需要创建这样的Object Instance。<br><a href="https://github.com/xanarry/LanTrans-android">一个比较好的Demo</a><br>Unix的输入输出(IO)系统遵循Open-Read-Write-Close这样的操作范本。</p><h3 id="11-v7包里面的Toolbar只是一个自定义View"><a href="#11-v7包里面的Toolbar只是一个自定义View" class="headerlink" title="11.v7包里面的Toolbar只是一个自定义View"></a>11.v7包里面的Toolbar只是一个自定义View</h3><p>随便举一个例子，右上角的optionMenu点击跳出的弹窗里面其实是一个ListView，具体的class是android.support.v7.view.menu.ListMenuItemView。都是很常规的自定义View的做法，这个ListView的Adapter叫做MenuAdapter，这个Adapter的itemLayout布局文件叫做abc_popup_menu_item_layout.xml<br>abc_popup_menu_item_layout.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.internal.view.menu.ListMenuItemView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/dropdownListPreferredItemHeight"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minWidth</span>=<span class="string">"196dip"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingRight</span>=<span class="string">"16dip"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Icon will be inserted here. --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- The title and summary have some gap between them, and this 'group' should be centered vertically. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dip"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"16dip"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:duplicateParentState</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/title"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textAppearance</span>=<span class="string">"?attr/textAppearanceLargePopupMenu"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duplicateParentState</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fadingEdge</span>=<span class="string">"horizontal"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/shortcut"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_below</span>=<span class="string">"@id/title"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textAppearance</span>=<span class="string">"?attr/textAppearanceSmallPopupMenu"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duplicateParentState</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Checkbox, and/or radio button will be inserted here. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v7.internal.view.menu.ListMenuItemView</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>一般来讲，MenuItem的字体大小，颜色都是需要在theme中写的。所以照说硬要用findViewById(ViewGroup的findViewTraversal)其实是能找到的。</p><h3 id="12-Message-ontain以及相似的场景"><a href="#12-Message-ontain以及相似的场景" class="headerlink" title="12. Message.ontain以及相似的场景"></a>12. Message.ontain以及相似的场景</h3><p>MotionEvent.ontain()，TouchTarget.ontain(),HoverTarget.ontain()….<br>MotionEvent最多缓存10个，TouchTarget和HoverTarget这些都是在看ViewGroup源码的时候瞅到的，简单点。<br>稍微看下就知道这种ontain,recycle写法的套路。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TouchTarget</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RECYCLED = <span class="number">32</span>;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object sRecycleLock = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> TouchTarget sRecycleBin;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sRecycledCount;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALL_POINTER_IDS = -<span class="number">1</span>; <span class="comment">// all ones</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// The touched child view.</span></span><br><span class="line">      <span class="keyword">public</span> View child;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The combined bit mask of pointer ids for all pointers captured by the target.</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> pointerIdBits;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The next target in the target list.</span></span><br><span class="line">      <span class="keyword">public</span> TouchTarget next;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">private</span> <span class="title">TouchTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TouchTarget <span class="title">obtain</span><span class="params">(@NonNull View child, <span class="keyword">int</span> pointerIdBits)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"child must be non-null"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">final</span> TouchTarget target;</span><br><span class="line">          <span class="keyword">synchronized</span> (sRecycleLock) &#123;</span><br><span class="line">              <span class="keyword">if</span> (sRecycleBin == <span class="keyword">null</span>) &#123;</span><br><span class="line">                  target = <span class="keyword">new</span> TouchTarget();</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  target = sRecycleBin;</span><br><span class="line">                  sRecycleBin = target.next;</span><br><span class="line">                   sRecycledCount--;</span><br><span class="line">                  target.next = <span class="keyword">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          target.child = child;</span><br><span class="line">          target.pointerIdBits = pointerIdBits;</span><br><span class="line">          <span class="keyword">return</span> target;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"already recycled once"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">synchronized</span> (sRecycleLock) &#123;</span><br><span class="line">              <span class="keyword">if</span> (sRecycledCount &lt; MAX_RECYCLED) &#123;</span><br><span class="line">                  next = sRecycleBin;</span><br><span class="line">                  sRecycleBin = <span class="keyword">this</span>;</span><br><span class="line">                  sRecycledCount += <span class="number">1</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  next = <span class="keyword">null</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              child = <span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="13-从点击Launcher到应用启动的过程"><a href="#13-从点击Launcher到应用启动的过程" class="headerlink" title="13. 从点击Launcher到应用启动的过程"></a>13. 从点击Launcher到应用启动的过程</h3><blockquote><p>借助binder驱动<br>ActivityManagerService.startActivity-&gt; (AMS)<br>…<br>//一系类AMS的调用链和一些与Launcher通过Binder的互相调用过程，此时仍然未创建应用程序的进程。<br>…<br> AMS创建一个新的进程，用来启动一个ActivityThread实例，<br> 即将要启动的Activity就是在这个ActivityThread实例中运行<br>Process.start(“android.app.ActivityThread”,…)-&gt;<br>// 通过zygote机制创建一个新的进程<br>Process.startViaZygote-&gt;调用新进程的main()<br>ActivityThread.main-&gt;</p></blockquote><p><a href="https://juejin.im/entry/5a0d02086fb9a045263b2387">Android 应用点击图标到Activity界面显示的过程分析</a></p><h3 id="14-Context是什么"><a href="#14-Context是什么" class="headerlink" title="14. Context是什么"></a>14. Context是什么</h3><p>ActivityThread.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">createBaseContextForActivity&#123;</span><br><span class="line">  ContextImpl appContext = ContextImpl.createActivityContext(</span><br><span class="line">                 <span class="keyword">this</span>, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ContextImpl包含资源信息、对Context的一些函数的实现等。每次创建Activity都会新建一个ContextImpl</p><h3 id="15-Dex-file-explained"><a href="#15-Dex-file-explained" class="headerlink" title="15. Dex file explained"></a>15. Dex file explained</h3><p><a href="https://blog.bugsnag.com/dex-and-d8/">The Dex File Format</a></p><h3 id="16-PackageParser和Android-manifest文件有关"><a href="#16-PackageParser和Android-manifest文件有关" class="headerlink" title="16 .PackageParser和Android.manifest文件有关"></a>16 .PackageParser和Android.manifest文件有关</h3><p><a href="http://blog.csdn.net/zhbinary/article/details/7353739">Android APK应用安装原理(1)-解析AndroidManifest原理-</a>.</p><h3 id="17-在Dialog中getContext获取的是ContextThemeWrapper"><a href="#17-在Dialog中getContext获取的是ContextThemeWrapper" class="headerlink" title="17. 在Dialog中getContext获取的是ContextThemeWrapper"></a>17. 在Dialog中getContext获取的是ContextThemeWrapper</h3><p>ContextThemeWrapper是API 1就有了的，主要是包装一下context，将Context的外部调用添加一些包装。</p><h3 id="18-低版本的xml属性怎么写"><a href="#18-低版本的xml属性怎么写" class="headerlink" title="18. 低版本的xml属性怎么写"></a>18. 低版本的xml属性怎么写</h3><p>mylayout.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:elevation</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">       /&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样写的话，Lint肯定会报warning。<br>解决办法，alt+enter，Android studio自动生成一个/layout-v21/maylayout.xml。现在想起来很多项目里v-xx文件夹，其实是这个意思。<br>还有一种写法</p><blockquote><p>style=”?android:attr/borderlessButtonStyle”<br>自己写style也是行的</p></blockquote><h3 id="19-LocalBroadCastManager好像确实是基于handler实现的"><a href="#19-LocalBroadCastManager好像确实是基于handler实现的" class="headerlink" title="19. LocalBroadCastManager好像确实是基于handler实现的"></a>19. LocalBroadCastManager<del>好像</del>确实是基于handler实现的</h3><p>App内部全局拥有一个LocalBroadCastManager实例，内部持有一个handler，对外暴露功能sendBroadcast。就是往handler里丢一个message MSG_EXEC_PENDING_BROADCASTS，处理这个message就是executePendingBroadcasts。所以默认是在下一个message中处理的。如果想在当前message中就处理掉，还有一个sendBroadcastSync方法，但这会把当前持有的所有待处理消息全部flush掉。sendBroadcast，unregisterReceiver，registerReceiver内部用了synchronize，所以是线程安全的。</p><h3 id="20-ViewPager为什么没有那些attrs的可以写在xml里面的属性"><a href="#20-ViewPager为什么没有那些attrs的可以写在xml里面的属性" class="headerlink" title="20. ViewPager为什么没有那些attrs的可以写在xml里面的属性"></a>20. ViewPager为什么没有那些attrs的可以写在xml里面的属性</h3><p> Adam Powell在15年的Android Dev summit上说过：this is pre aar gradle age, if we were to do it today , we definitely would add。<br> 看了下aosp的git日志，ViewPager是2011年就有了的。而<a href="https://developer.android.com/studio/projects/android-library.html#CreateLibrary">aar</a>是随着android studio的发布推出的。<br> jar和aar的区别:<br> jar : JAR 文件就是 Java Archive File，顾名思意，它的应用是与 Java 息息相关的，是 Java 的一种文档格式。只包含了class文件与清单文件 ，不包含资源文件，如图片等所有res中的文件。<br> aar: aar，AAR（Android Archive）包是一个Android库项目的二进制归档文件,包含一些自己写的控件布局文件以及字体等资源文件那么就只能使用*.aar文件。</p><p>=============================================================================<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100809920.jpg?imageView2/2/w/600" alt=""></p><h3 id="9-Facebook出品的BUCK能够用于编译Android-项目，速度比较快。"><a href="#9-Facebook出品的BUCK能够用于编译Android-项目，速度比较快。" class="headerlink" title="9. Facebook出品的BUCK能够用于编译Android 项目，速度比较快。"></a>9. Facebook出品的BUCK能够用于编译Android 项目，速度比较快。</h3><p><a href="https://github.com/1hakr/AnExplorer">一个具有网络传输的FileExplorer</a><br><a href="http://mouxuejie.com/blog/2016-06-11/multidex-source-analysis/">MultiDex原理</a><br><a href="http://wetest.qq.com/lab/view/359.html">偏向native层面的内存占用分析</a><br><a href="https://juejin.im/post/5a646211f265da3e3f4cc997">Android进程框架：进程的启动创建、启动与调度流程</a><br><a href="https://juejin.im/post/59fafa3351882529642107d2">Android进程框架：进程的启动创建、启动与调度流程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的文章快装不下了，所以另外开一篇文章专门放Android相关的杂乱的知识点。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100734648.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>前端速查手册</title>
    <link href="https://haldir65.github.io/2017/11/25/2017-11-25-front-end-cook-book/"/>
    <id>https://haldir65.github.io/2017/11/25/2017-11-25-front-end-cook-book/</id>
    <published>2017-11-25T23:26:29.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>每一个领域都有些不知道该放哪的零碎的点，这里开辟一个新的地方，作为前端杂乱知识的汇总。<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/coffee art life nature living drip dark bw.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><h1 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h1><p><a href="https://www.cssmatic.com/box-shadow">cssmatic</a>,一个可以用拖拽的方式生成css代码的神奇的网站<br><a href="http://fontawesome.io/">不仅仅是font,还有很好的icon</a></p><p>[TBS]腾讯浏览服务(Tencent Browsing Service, TBS)。网上很多人喷的微信浏览器慢就是这个<br><a href="https://github.com/wycats/handlebars.js">handlebars</a><br><a href="http://blog.csdn.net/lnn2007/article/details/8869057">一个html里面有两个id一样的元素没问题</a><br><a href="https://github.com/CodeFrogShow/UI-Design-Music-Player">awesome css UI Design</a>,<a href="https://www.youtube.com/watch?v=ExnD_KV5q5g">Video link here</a></p><p><strong><em>Index</em></strong></p><h2 id="html-Related"><a href="#html-Related" class="headerlink" title="html Related"></a>html Related</h2><p>html标签中可以添加data-XXX标签用于把数据和ui块绑定。</p><p>p tag 里面能够放一个小的Strong tag<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You Know <span class="tag">&lt;<span class="name">strong</span>&gt;</span>No<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Mystery<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>亲测，这些tag不分大小的，不是说div就一定是最外面的parent<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  new css PlayGround</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://juejin.im/post/587f4afb61ff4b00651b3c18">什么在阻塞DOM？</a></p><h2 id="css-Related"><a href="#css-Related" class="headerlink" title="css Related"></a>css Related</h2><h2 id="Vanilla-javaScript-Related"><a href="#Vanilla-javaScript-Related" class="headerlink" title="Vanilla javaScript Related"></a>Vanilla javaScript Related</h2><p>Ajax(Asynchronous javaScript &amp; xml)，从命名上来看就是异步的</p><p>json(JavaScript Object notation),摆明着就是给js用的</p><p>In JavaScript these two are equivalent:</p><blockquote><p>object.Property<br>object[“Property”];</p></blockquote><p>对于POST请求，如果Request中明确设置了:<br>&gt;<br>xhr.setRequestHeader(“Content-type”,”application/x-www-form-urlencoded”);</p><p>后台会认为这是一个提交表单的请求，body就应该设置为’’<br><a href="https://stackoverflow.com/questions/10494574/what-is-the-difference-between-form-data-and-request-payload">What is the difference between form data and request payload?</a></p><h2 id="Webpack-configuration"><a href="#Webpack-configuration" class="headerlink" title="Webpack configuration"></a>Webpack configuration</h2><blockquote><p>安装<br>yarn add webpack //官网不推荐global安装<br>// 初始化项目<br>npm init -y<br>// 使用<br>webpack app.js bundle.js –watch // 将app.js编译成bundle.js， 实时监控文件变化。 Html文件中就可以引用bundle.js.<br>build的话，就是把bundle.js minify的话 webpack app.js bundle.js -p ,其实就是帮忙把所有的空格删掉了</p></blockquote><p>a.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> resources = <span class="string">'this is some external resources'</span>; <span class="comment">// let 能用是因为node 支持es6这个特性</span></span><br><span class="line"><span class="built_in">module</span>.exports = resources;   <span class="comment">//如果不是用于浏览器的项目的话，node本身就支持require，只是浏览器不支持require</span></span><br></pre></td></tr></table></figure></p><p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="built_in">require</span>(<span class="string">'./a.js'</span>));</span><br></pre></td></tr></table></figure></p><p>可以为webpack提供config文件<br>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/js/app.js'</span>,    <span class="comment">// 提供了一个entry,app.js又引用了其他的Js，最终追根溯源，会把所有的自定义和第三方框架全部打到一个bundle.js里面</span></span><br><span class="line">  outpath: &#123;</span><br><span class="line">    path: __dirname+<span class="string">'/dist'</span>,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: &#123;</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,  <span class="comment">//这个test的意思就是说这是个正则，webpack你自己拿去试，正斜杠表示当前目录下，反斜杠表示转义字符，就是后面那个点就把它当成"."好了</span></span><br><span class="line">        loader: <span class="string">'style-loader!css-loader'</span>&#125; <span class="comment">// 前面那个正则意思是针对所有的css文件，后面是需要安装的loader名称。 这个loader的顺序是从右往左的！</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有了config文件，只需要输入webpack，就能自动根据config文件编译。<br>在package.json文件中，添加script: “build”: “webpack” ， npm run build ，会自动根据configuration文件编译生成可用于生产环境的编译后文件。</p><p>webpack-dev-server(提供一个development server，因为之前只是走的file system)</p><blockquote><p>安装<br>yarn add webpack-dev-server<br>package.json中添加script :<br>start: webpack-dev-server –entry ./src/js/app.js –out-filename .dist/bundle.js<br>npm run start</p></blockquote><p>babel-loader(前提是安装了babel)<br>安装参考<a href="https://webpack.js.org/loaders/babel-loader/">官方文档</a><br>babel就是把es6语法的js文件编译成es5文件的，单独使用的语法大概这样。 webpack的loader成百上千，babel-loader只是其中的一种</p><blockquote><p>npm run babel – index.js -o bundle.js -w</p></blockquote><p>安装好babel-loader之后，在webpack.config.js中添加loader(loaders本来就是一个数组)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loaders &#123;</span><br><span class="line">    &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">      exculde: <span class="regexp">/node_modules/</span>, <span class="comment">//排除所有node_modules下面的文件</span></span><br><span class="line">      query: &#123;<span class="attr">preset</span>: [<span class="string">'es2015'</span>]&#125;&#125; <span class="comment">//这个正则的意思是所有js后缀的文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong><em>Third Party Library</em></strong></p><h2 id="Vue-Related"><a href="#Vue-Related" class="headerlink" title="Vue Related"></a>Vue Related</h2><p><a href="https://github.com/ustbhuangyi/better-scroll">better-scroll</a> 滴滴的员工写的</p><h2 id="jQuery-Related"><a href="#jQuery-Related" class="headerlink" title="jQuery Related"></a>jQuery Related</h2><p>jQuery是一个Dom Manipulate Library</p><h2 id="Twitter-BootStrap"><a href="#Twitter-BootStrap" class="headerlink" title="Twitter BootStrap"></a>Twitter BootStrap</h2><p><a href="https://getbootstrap.com/docs/4.0/layout/grid/#stacked-to-horizontal">BootStrap速查手册</a></p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="vsCode插件推荐"><a href="#vsCode插件推荐" class="headerlink" title="vsCode插件推荐"></a>vsCode插件推荐</h3><ul><li>Auto Close tag</li><li>Beautify</li><li>HTML CSS supported</li><li>Live Server</li><li>Prettier</li><li>Vetur</li><li>Vue2 Snippets</li><li>Bracket Pair Colorizer</li></ul><p>VSCode快捷键(其实可以自己配置的，vs的设置文件就是一个很大的json)<br>vs code 调整锁进的命令叫做reindent</p><p>在<del>不会自己搭服务</dev>的情况下只好拿一些免费的api凑合了<br><a href="http://jsonplaceholder.typicode.com/posts">posts</a><br><a href="https://cnodejs.org/api/v1/topics">cnodejs</a></p><h2 id="使用nginx搭建本地服务器"><a href="#使用nginx搭建本地服务器" class="headerlink" title="使用nginx搭建本地服务器"></a>使用nginx搭建本地服务器</h2><p>官方说nginx的windows版本只供测试使用，性能不怎么样，但用于前端部署还是够用的。去<a href="http://nginx.org/en/docs/windows.html">nginx网站</a>下载windows版本的nginx，解压缩，双击可执行文件nginx.exe。在这之前，最好先打开conf文件夹，编辑nginx.conf。设置一下端口，因为默认的80说不定就给谁占用了。其实用命令行也能启动：</p><blockquote><p>start nginx<br>tasklist /fi “imagename eq nginx.exe” //这个是windows下查看当前在运行的nginx的命令<br>nginx -s stop // 立即关闭<br>nginx -s quit // graceful shutdown<br>这些东西官网上都写得很明白。</p></blockquote><p>生产环境部署前端静态资源可以这么设置，参考知乎的<a href="https://www.zhihu.com/question/46630687">回答</a><br>&gt;<br>用vue-cli搭建的做法:<br>1、npm run build<br>2、把dist里的文件打包上传至服务器 例 /data/www/，我一般把index.html放在static里<br>所以我的文件路径为：<br>/data/www/static<br>|—–index.html<br>|—–js<br>|—–css<br>|—–images<br> ….<br>3、配置nginx监听80端口，<br>location /static alias 到 /data/www/static，<br>重启nginx<br>location /static {<br>  alias  /data/www/static/;<br>  }<br>4、浏览器访问<a href="http://ip/static/index.html即可">http://ip/static/index.html即可</a></p><p>Babel是一个可以把ES6代码打包成ES5代码的插件，毕竟要兼容老的浏览器。<br><a href="https://github.com/faisalman/ua-parser-js">ua-parser-js</a>是一个很好用的检测ua的library。<br><a href="http://www.css88.com/doc/backbone/">Backbone</a>是一个mvc框架<br><a href="http://www.html-js.com/article/The-front-end-of-mobile-terminal-meta-tag-set-of-notes-the-role-of">移动开发中的一些有用meta标签</a></p><ul><li>[X]如何使用js显示一个Dialog</li><li>[ ]Express js</li><li>[ ] css3 属性大全</li></ul><p>atom的emmet插件很好用<br>比如想要创建一个<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'test'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>只需要输入div.test或者.test然后按tab键<br><a href="https://www.youtube.com/watch?v=aiXNKHKWlmY">好玩的Atom插件</a><br>minimap,emmet,file icons，atom liveserver,atom beautify</p><p>=======================================================================================<br>atom中输入vue,会自动提示生成vue模板,输入re会生成react Boilplate。前提是在js,vue,html文件中。<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/Cute%20and%20sexy%20asian%20girl%20in%20purple%20strapless%20gown.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/lith/IMG_0766.jpg?imageView2/2/w/600" alt=""></p><p>把vscode 加入command line，将’C:\Program Files (x86)\Microsoft VS Code\bin’添加到windows的环境变量中即可。cmd里输入code即可打开当前目录。</p><p>handlebars渲染template的过程就是把写在模板里面的大括号包着的变量换成String。所以，在hbs文件里内嵌的js是<a href="https://stackoverflow.com/questions/19247150/is-it-possible-to-access-the-data-that-is-sent-to-handlebars-through-js-inside-t">没有办法轻易拿到data的</a>。这跟flask很像。<br>这里顺便提到iffe的概念<a href="https://stackoverflow.com/questions/8228281/what-is-the-function-construct-in-javascript">Immediately-invoked_function_expression</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.0.0/handlebars.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"test-template"</span> <span class="attr">type</span>=<span class="string">"text/x-handlebars-template"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Label here<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="javascript">&#123;&#123;textField dataAttribs=<span class="string">'&#123;"text":"Hello", "class":"input"&#125;'</span>&#125;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerHelper(<span class="string">'textField'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom = <span class="string">'&lt;input type="text"&gt;'</span>, attribs;</span><br><span class="line"></span><br><span class="line">    attribs = <span class="built_in">JSON</span>.parse(options.hash.dataAttribs);</span><br><span class="line">    <span class="built_in">console</span>.log(attribs.text + <span class="string">" -- "</span> + attribs.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Handlebars.SafeString(dom);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> markup = $(<span class="string">'#test-template'</span>).html();</span><br><span class="line">    <span class="keyword">var</span> template = Handlebars.compile(markup);</span><br><span class="line">    $(<span class="string">'body'</span>).append(template());</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.xuanfengge.com/page-back-does-not-cache.html">一个腾讯前端的博客</a></li><li><a href="https://www.youtube.com/watch?v=lziuNMk_8eQ">Webpack Crash Course</a></li><li><a href="https://www.youtube.com/watch?v=iWUR04B42Hc">Use Babel &amp; Webpack To Compile ES2015 - ES2017</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每一个领域都有些不知道该放哪的零碎的点，这里开辟一个新的地方，作为前端杂乱知识的汇总。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/coffee art life nature living drip dark bw.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>从DroidPlugin谈插件化开发</title>
    <link href="https://haldir65.github.io/2017/11/22/2017-11-22-from-Droid-plugin-onto-more/"/>
    <id>https://haldir65.github.io/2017/11/22/2017-11-22-from-Droid-plugin-onto-more/</id>
    <published>2017-11-22T22:33:44.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>关于360团队出开源的<a href="https://github.com/DroidPluginTeam/DroidPlugin">DroidPlugin</a>的一些记录<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery15111006999.jpg?imageView2/2/w/600" alt=""></p><p>过程中发现了关于插件化，Hook系统方法的操作，摘录下来。<br><a id="more"></a></p><h2 id="1-从Context的本质说起"><a href="#1-从Context的本质说起" class="headerlink" title="1. 从Context的本质说起"></a>1. 从Context的本质说起</h2><p>其实也简单，就是ContextImpl，一个各种资源的容器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Activity extends ContextThemeWrapper</span><br><span class="line">ContextThemeWrapper extends ContextWrapper</span><br><span class="line">ContextWrapper extends Context</span><br></pre></td></tr></table></figure></p><p>Activity作为一个天然的交互核心，能够以一个容器的身份（继承而来）轻易获取这些外部资源，也使得基于UI页面的开发变得简单。<br>如果对于ActivityThread有所了解的话，就知道Activity的生命周期都是在这个类中完成的<br>简单来说在ContextImpl中createActivityContext方法中使用new的方式创建了一个ContextImpl，整个流程就是ActivityThread在创建一个Activity后，给它不断赋值的过程。ContextImpl只是一个各种资源的容器（比如Resource,Display,PackageInfo,构造函数里面塞了一些，创建出来之后还给一些变量赋了值）。</p><p>Hook(使用Invokcation handler，将一个接口的调用原本的实现包揽下来，把原来的结果占为己有，同时添加一些自己要做的事情)<a href="http://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/">修改getSystemService，添加自定义功能</a><br>Hook掉AMS,在startActivity里面添加一些私货</p><h3 id="1-1-ActivityThread做了很多事"><a href="#1-1-ActivityThread做了很多事" class="headerlink" title="1.1 ActivityThread做了很多事"></a>1.1 ActivityThread做了很多事</h3><p>onSaveInstance是从ActivityThread的callCallActivityOnSaveInstanceState方法dispatch下来的。</p><h2 id="2-Hook作为插件化的切入点给了开发者篡改系统api实现的通道"><a href="#2-Hook作为插件化的切入点给了开发者篡改系统api实现的通道" class="headerlink" title="2. Hook作为插件化的切入点给了开发者篡改系统api实现的通道"></a>2. Hook作为插件化的切入点给了开发者篡改系统api实现的通道</h2><p><a href="http://weishu.me/2016/02/16/understand-plugin-framework-binder-hook/">比如Hook掉剪切板SystemService</a>,<br><a href="http://weishu.me/2016/03/07/understand-plugin-framework-ams-pms-hook/">比如在ActivityManagerService调用IPC操作时添加私货</a></p><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery2a2241cc5c1278cf7a28f15f91dbbb7f.jpg?imageView2/2/w/600" alt=""></p><p>=-============================-============================-============================-=========================</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> channels:</span><br><span class="line">    target_channel = line.strip()</span><br><span class="line">    target_apk = output_dir + apk_names[<span class="number">0</span>] + <span class="string">"-"</span> + target_channel+<span class="string">"-"</span>+apk_names[<span class="number">2</span>] + src_apk_extension</span><br><span class="line">    shutil.copy(src_apk,  target_apk)</span><br><span class="line">    zipped = zipfile.ZipFile(target_apk, <span class="string">'a'</span>, zipfile.ZIP_DEFLATED)</span><br><span class="line">    empty_channel_file = <span class="string">"META-INF/uuchannel_&#123;channel&#125;"</span>.format(channel = target_channel) //所以渠道号简单来说就是往META-INF里写了一个<span class="string">"uuchannel_xiaomi"</span>之类的文件</span><br><span class="line">    zipped.write(src_empty_file, empty_channel_file)</span><br><span class="line">    zipped.close()</span><br></pre></td></tr></table></figure><p><a href="https://www.zhihu.com/question/39440766">为什么 Android 要采用 Binder 作为 IPC 机制？</a></p><blockquote><p>传统的进程间通信方式有管道，消息队列，共享内存等，其中管道，消息队列采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的缓存区中，然后再从内核缓存区拷贝到接收方缓存区，至少有两次拷贝过程。共享内存虽然无需拷贝，但控制复杂，难以使用。socket作为一款通用接口，其传输效率低，开销大，主要用在跨网络的进程间通信和本机上进程间的低速通信。Binder通过内存映射的方式，使数据只需要在内存进行一次读写过程。<br>内存映射，简而言之就是将用户空间的一段内存区域映射到内核空间，映射成功后，用户对这段内存区域的修改可以直接反映到内核空间，相反，内核空间对这段区域的修改也直接反映用户空间。那么对于内核空间&lt;—-&gt;用户空间两者之间需要大量数据传输等操作的话效率是非常高的。</p></blockquote><p><a href="https://www.jianshu.com/p/adaa1a39a274">听说你Binder机制学的不错，来面试下这几个问题</a></p><p>Client发起IPC请求，是阻塞的吗？</p><p>adb getEvent sendEvent<br>input tap x y<br>input touchescreen<br>input text helloworld<br>input keyevent</p><p>Xposed的介绍与入门<br>Xposed的原理与Multidex及动态加载问题</p><h3 id="组件化、插件化"><a href="#组件化、插件化" class="headerlink" title="组件化、插件化"></a>组件化、插件化</h3><p>组件化、插件化的前提就是解耦</p><p><a href="https://github.com/jaredrummler/AndroidShell">在Android中执行shell指令</a><br><a href="https://github.com/didi/VirtualAPK">滴滴的virtualApp</a>。 目前看来就是用android.content.pm.PackageParse去解析一个apk文件，封装成一个LoadedPlugin对象（Cache下来），后续调用apk中描述的功能进行操作。所以应该还是在host的进程中跑的。由此联系到<a href="http://www.cnblogs.com/myitm/archive/2012/05/17/2506635.html">PackageInstaller 原理简述</a><br><a href="https://github.com/Meituan-Dianping/Robust">美团的热修复叫Robust</a><br><a href="https://www.jianshu.com/p/0ba717f7385f">美团的walle接入指南</a>,原理都在<a href="https://tech.meituan.com/android-apk-v2-signature-scheme.html">新一代开源Android渠道包生成工具Walle</a><br><a href="https://github.com/mcxiaoke/packer-ng-plugin">还有一个开源的gradle plugin</a></p><p>关于gradlew<br>打包release之前，先Build -&gt; Generate Singed apk 创建一个新的keystore , 密码记住，keystore文件保存好。</p><p>关于打包: 根据<a href="https://www.jianshu.com/p/4f2990cf53bf">Android 多渠道打包梳理</a><br>Gradle UMeng 多渠道打包</p><ol><li><p>Android.manifest文件添加</p><blockquote><meta-data android:name="UMENG_CHANNEL" android:value="${UMENG_CHANNEL_VALUE}" /></blockquote></li><li><p>app的build.gradle中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">android &#123;  </span><br><span class="line">    ...</span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        xiaomi &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;xiaomi&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">        _360 &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;_360&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">        baidu &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;baidu&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">        wandoujia &#123;</span><br><span class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: &quot;wandoujia&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;  </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">android &#123;  </span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        xiaomi &#123;&#125;</span><br><span class="line">        _360 &#123;&#125;</span><br><span class="line">        baidu &#123;&#125;</span><br><span class="line">        wandoujia &#123;&#125;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    productFlavors.all &#123;</span><br><span class="line">        flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打包<br>除此之外 assemble 还能和 Product Flavor 结合创建新的任务（assemble + Build Variants），Build Variants = Build Type + Product Flavor</p><blockquote><p>./gradlew assembleDebug # 会打包 Debug apk<br>./gradlew assembleRelease # 打包 Release apk<br>./gradlew assembleWandoujiaRelease # 打包 wandoujia Release 版本，大小写不敏感<br>./gradlew assembleWandoujia  # 此命令会生成wandoujia渠道的Release和Debug版本</p></blockquote></li><li><p>多渠道的话这样的命令要跑多次<br>使用walle就好了。</p><blockquote><p>project 的 build.gradle 添加:<br>dependencies {<br> classpath ‘com.meituan.android.walle:plugin:1.0.3’<br>}<br>app/build.gradle 添加：<br>apply plugin: ‘walle’<br>dependencies {<br> …<br> compile ‘com.meituan.android.walle:library:1.0.3’<br>}<br>在工程目录下创建 channel 文件：<br>meituan # 美团<br>samsungapps #三星<br>hiapk<br>anzhi<br>xiaomi # 小米<br>91com<br>gfan<br>appchina<br>nduoa<br>3gcn<br>mumayi<br>10086com<br>wostore<br>189store<br>lenovomm<br>hicloud<br>meizu<br>wandou</p><h1 id="Google-Play"><a href="#Google-Play" class="headerlink" title="Google Play"></a>Google Play</h1><h1 id="googleplay"><a href="#googleplay" class="headerlink" title="googleplay"></a>googleplay</h1><h1 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h1><p>baidu<br>#</p><h1 id="360"><a href="#360" class="headerlink" title="360"></a>360</h1><p>360cn<br>#</p><h1 id="应用宝"><a href="#应用宝" class="headerlink" title="应用宝"></a>应用宝</h1><p>myapp</p></blockquote></li></ol><p>编译全部渠道</p><blockquote><p>gradlew clean assembleReleaseChannels<br>gradlew clean assembleReleaseChannels -PchannelList=huawei // 只编译华为的<br>gradlew clean assembleReleaseChannels -PchannelList=huawei,xiaomi // 小米跟华为的</p></blockquote><p>以上亲测通过，原本装的jdk 9，一直报错。在java home里换成jdk 1.8后，就没什么问题了。有问题gradlew的时候后面跟上–stacktrace，出错了粘贴到google里就好了。</p><p>在java代码中获取渠道信息<br>&gt;<br>String channel = WalleChannelReader.getChannel(this.getApplicationContext());</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/tiann/understand-plugin-framework">分析DroidPlugin，深入理解插件化框架</a><br><a href="http://www.wjdiankong.cn/">逆向大全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于360团队出开源的&lt;a href=&quot;https://github.com/DroidPluginTeam/DroidPlugin&quot;&gt;DroidPlugin&lt;/a&gt;的一些记录&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery15111006999.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;过程中发现了关于插件化，Hook系统方法的操作，摘录下来。&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
      <category term="插件化" scheme="https://haldir65.github.io/tags/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>集成Tinker的一些记录</title>
    <link href="https://haldir65.github.io/2017/11/18/2017-11-18-integrating-tinker/"/>
    <id>https://haldir65.github.io/2017/11/18/2017-11-18-integrating-tinker/</id>
    <published>2017-11-18T17:25:29.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>关于Android Application集成Tinker的一次记录。<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/single-yellow-beauty-flower-on-the-fence-wallpaper-56801fde208df.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h2 id="1-首先从官方Demo项目开始"><a href="#1-首先从官方Demo项目开始" class="headerlink" title="1. 首先从官方Demo项目开始"></a>1. 首先从官方Demo项目开始</h2><p><a href="https://github.com/Tencent/tinker">Tinker</a>是2016年开源的，先直接clone下来。<br>我的环境：</p><blockquote><p>Android Studio 3.0 稳定版<br>gradle版本：distributionUrl=https\://services.gradle.org/distributions/gradle-4.1-all.zip<br>gradle插件版本:  classpath ‘com.android.tools.build:gradle:3.0.0’<br>TINKER_VERSION=1.9.1<br>compileSdkVersion 26<br>buildToolsVersion ‘26.0.2’</p></blockquote><p>Android Studio 3.0 因为刚出来，所以遇到了一些问题，不过好在Google一下或者在issue里面查一下，都能找到合适的解答</p><p><a href="https://github.com/Tencent/tinker/tree/master/tinker-sample-android">官方Demo</a><br>先把官方Demo按照普通App的流程安装上来。<br>这时候在app/build/bakApk/目录下就会出现“app-debug-1118-15-50-07.apk”这样的文件，其实是复制了一份当前的apk</p><p>然后，在MainActivity代码中，把原本注释掉的一行Log取消注释，运行如下命令</p><blockquote><p>gradlew tinkerPatchDebug<br>或者在Andriod Studio的Gradle tab里面找到这个task，运行一下</p></blockquote><p>打releasePatch其实也差不多</p><blockquote><p>gradlew tinkerRelease</p></blockquote><p>一切顺利的话，在<br>app/build/outputs/apk/tinkerPatch/debug文件夹下就会看到一些新生成的文件，例如<br>“app/build/outputs/apk/tinkerPatch/debug/patch_signed.apk”，<br>“app/build/outputs/apk/tinkerPatch/debug/patch_signed_7zip.apk”<br>等等，具体每个文件是干嘛的文档上都说了。<br>这时候通过adb push命令把这个7zip文件上传到手机根目录下</p><blockquote><p>adb push ./app/build/outputs/tinkerPatch/debug/patch_signed_7zip.apk /storage/sdcard0/patch_signed_7zip.apk<br>或者在Android Studio 3.0右下角有一个Device File Explorer,把这个文件上传到手机里</p></blockquote><p>上面那个路径不一定准，总之需要和这里面的路径一样，所以我在模拟器里面是sdcard/emulated/0这个目录下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), Environment.getExternalStorageDirectory().getAbsolutePath() + <span class="string">"/patch_signed_7zip.apk"</span>);</span><br></pre></td></tr></table></figure></p><p>上传完毕之后，在当前页面点击Button，点击事件调用到上面这一行代码.<br>一切Ok的话（运气好的话），会出现Toast,其实这个Toast是在SampleResultService（一个IntentService）里面写的，也就是说Patch打上的话，开发者可以自定义一些UI事件。</p><p>这时候再Kill Porcess,据说锁屏也行？<br>重新启动后，刚才取消注释的那一行代码就在logcat里面出现了。</p><p>到此，在没有重新打包的情况下，热修复完成。</p><h2 id="2-已有的项目改造"><a href="#2-已有的项目改造" class="headerlink" title="2. 已有的项目改造"></a>2. 已有的项目改造</h2><p>照着改成这样<br>在Gradle.properties里面添加</p><blockquote><p>TINKER_VERSION = 1.9.1 //只是为了集中管理<br>TINKER_ID = 1.0 //这个不添加会报错</p></blockquote><p>project的build.gradle中添加</p><blockquote><p> classpath “com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}”</p></blockquote><p>app的build.gradle中需要新增很多东西，建议直接<a href="https://github.com/Tencent/tinker/blob/master/tinker-sample-android/app/build.gradle">复制</a>过来。<br>需要改的地方就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    tinkerOldApkPath = &quot;$&#123;bakPath&#125;/app-debug-1118-15-50-07.apk&quot;</span><br><span class="line">    // 找到当前app/build/bakApk/目录下的apk文件，把名字改成自己和当前的文件一样的</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ignoreWarning = true //默认是false，不改经常编译报错</span><br><span class="line"></span><br><span class="line">implementation(&quot;com.tencent.tinker:tinker-android-lib:$&#123;TINKER_VERSION&#125;&quot;) &#123; changing = true &#125;</span><br><span class="line">provided(&quot;com.tencent.tinker:tinker-android-anno:$&#123;TINKER_VERSION&#125;&quot;)</span><br><span class="line">annotationProcessor(&quot;com.tencent.tinker:tinker-android-anno:$&#123;TINKER_VERSION&#125;&quot;)</span><br></pre></td></tr></table></figure></p><p>接下来是Application，如果自己继承了android.app.Application的话，得改一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原来</span></span><br><span class="line"><span class="keyword">public</span> MyApplication extends Application&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="meta">@DefaultLifeCycle</span>(application = <span class="string">"com.包名.SomeName"</span>,</span><br><span class="line">        flags = ShareConstants.TINKER_ENABLE_ALL,</span><br><span class="line">        loadVerifyFlag = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppLike</span> <span class="keyword">extends</span> <span class="title">DefaultApplicationLike</span> </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppLike</span><span class="params">(Application application, <span class="keyword">int</span> tinkerFlags, <span class="keyword">boolean</span> tinkerLoadVerifyFlag,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">long</span> applicationStartElapsedTime, <span class="keyword">long</span> applicationStartMillisTime, Intent tinkerResultIntent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * install multiDex before install tinker</span></span><br><span class="line"><span class="comment">     * so we don't need to put the tinker lib classes in the main dex</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> base</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBaseContextAttached</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onBaseContextAttached(base);</span><br><span class="line">        <span class="comment">//you must install multiDex whatever tinker is installed!</span></span><br><span class="line">        MultiDex.install(base);</span><br><span class="line">        AppLike.context = getApplication();</span><br><span class="line">        <span class="comment">//初始化Tinker</span></span><br><span class="line">        TinkerInstaller.install(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerActivityLifecycleCallbacks</span><span class="params">(Application.ActivityLifecycleCallbacks callback)</span> </span>&#123;</span><br><span class="line">        getApplication().registerActivityLifecycleCallbacks(callback);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mainfest里面要改成上面那个“com.包名.SomeName”</span><br></pre></td></tr></table></figure></p><p>接下来按照之前的步骤就Ok了。</p><h2 id="3-Configuration"><a href="#3-Configuration" class="headerlink" title="3. Configuration"></a>3. Configuration</h2><p>以上只是简单的把Demo跑通，接下里需要看下Tinker提供的定制项</p><p>=======================================================================</p><h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. 常见问题</h2><p>Q: 我只不过改了一个Toast的文案，为毛生成的patch_signed_7zip.apk文件这么大()？<br>A: 看下tinkerPatch文件夹下面的log.txt文件（建议用Notepad打开），里面一大堆“Found add resource: res/drawable-hdpi-v4/abc_list_pressed_holo_light.9.png”这样的类似的出现，具体原因跟aapt有关，好像可以设置detect resource change （大概就这意思）为false，这样就不会那么大了。</p><p>Q: Tinker-Patch把补丁文件放在什么位置<br>A: 因为接收补丁的代码就在TinkerInstaller.onReceiveUpgradePatch这一段了。在UpgradePatchRetry.java中，有这么一段：tempPatchFile = new File(SharePatchFileUtil.getPatchTempDirectory(context), TEMP_PATCH_NAME); （/data/data/com.example.myApp/data/tinker_temp/temp.apk）。当然还有其他的，总之就是放在当前应用data文件夹下面的tinker或者tinker_temp文件夹下。</p><p>Q: TinkerPatch和Tinker什么关系<br>A：TinkerPatch的SDK里面包含了Tinker必要的功能，开发者只需要添加TinkerPatch这一条依赖，也不需要去继承ApplicationLike这些东西了，开发者不用自己开一个下载服务去下发patch_signed_7zip.apk这个文件了，onReceiveUpgradePatch这些事也做好了。确实是接入成本最低的方案，搭建后台假如交由自己公司的API团队处理，起码得好几天，还得耽误产品正常的开发节奏。而TinkerPatch给出的报价是399元/月。短期来看，显然前者的成本要高出不少，还得顾虑自家团队维护的代价。算一笔经济账的话，显然企业倾向于花钱买稳定服务。对于个人来讲，目前有免费版可以使用，估计也是为了给测试Demo使用的，想玩简单版的话可以试试。</p><p>Q: 如何更换Dex的<br>A: 引用<a href="http://w4lle.com/2016/12/16/tinker/index.html">Android热补丁之Tinker原理解析</a>中的话：“由于Tinker的方案是基于Multidex实现的修改dexElements的顺序实现的，所以最终还是要修改classLoder中dexPathList中dexElements的顺序。Android中有两种ClassLoader用于加载dex文件，BootClassLoader、PathClassLoader和DexClassLoader都是继承自BaseDexClassLoader。最终在DexPathList的findClass中遍历dexElements，谁在前面用谁。”。所以其实就是根据下发的补丁文件，把dex文件给修改了，这一点跟MultiDex很像。</p><p>Q: Dex文件格式<br>A： <a href="https://blog.bugsnag.com/dex-and-d8/">The Dex File Format</a>。值得一提的是，这篇文章提到了文件头，dex的头是<br>&gt;<br>6465780A 30333800<br>dex<br>038</p><p>这个是hexoDecimal，十六进制2个数字（字母）代表一个byte(2*8bits = 2 bytes)，按照二进制0101的方式来看的话就是： 6465（0110 0100 0110 0101） 780A(0111 1000 0000 1010)。</p><p>Q: broken.apk + patch_signed_7zip = fixed apk的过程<br>A: 在UpgradePatch.tryPath -&gt; DexDiffPatchInternal.tryRecoverDexFiles -&gt; dexOptimizeDexFiles -&gt; TinkerDexOptimizer.optimizeAll -&gt;OptimizeWorker.run -&gt; DexFile.loadDex(DexFile是dalvik.system包下的)。</p><p>=======================================================================</p><h2 id="5-源码解析"><a href="#5-源码解析" class="headerlink" title="5. 源码解析"></a>5. 源码解析</h2><p>至少我现在看到7个包：</p><blockquote><p>com.tencent.tinker:aosp-dexutils:1.91.@jar<br>com.tencent.tinker:bsdiff-util:1.91.@jar<br>com.tencent.tinker:tinker-android-anno:1.91.@jar<br>com.tencent.tinker:tinker-android-lib:1.91.@jar<br>com.tencent.tinker:tinker-android-loader:1.91.@jar<br>com.tencent.tinker:tinker-commons:1.91.@jar<br>com.tencent.tinker:tinker-ziputils:1.91.@jar</p></blockquote><h1 id="分的这么散估计也是希望能够好扩展吧。"><a href="#分的这么散估计也是希望能够好扩展吧。" class="headerlink" title="分的这么散估计也是希望能够好扩展吧。"></a>分的这么散估计也是希望能够好扩展吧。</h1><p>换dex文件的关键方法在<a href="http://androidxref.com/5.0.0_r2/xref/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java#316">DexPathList.findClass这个方法里面</a>。<a href="https://juejin.im/post/5a42f29ef265da43333eaba0">参考</a></p><p>网上关于源码解析的文章已经很多，有时间看看，应该不难。</p><p>看一下官方Tinker项目中的文件夹，有一个tinker-build，里面有两个python文件，这就很有意思了。再看看tinker-patch-gradle-plugin，里面一大堆groovy文件，所以看懂这个对于gradle插件开发是有好处的。</p><h1 id="目前在1-9-1版本里面好像看到了一个tinkerFastCrashProtect，看来也是跟风天猫快速修复启动保护那一套。"><a href="#目前在1-9-1版本里面好像看到了一个tinkerFastCrashProtect，看来也是跟风天猫快速修复启动保护那一套。" class="headerlink" title="目前在1.9.1版本里面好像看到了一个tinkerFastCrashProtect，看来也是跟风天猫快速修复启动保护那一套。"></a>目前在1.9.1版本里面好像看到了一个<em>tinkerFastCrashProtect</em>，看来也是跟风天猫快速修复启动保护那一套。</h1><p>关于Tinker-Patch这个外包给第三方的服务，纯属好奇就去看了下url到底长什么样。在<a href="https://github.com/TinkerPatch/tinkerpatch-sdk/blob/master/tinkerpatch-sdk/src/main/java/com/tencent/tinker/server/client/TinkerClientAPI.java">TinkerClientAPI</a>里面有这么一段，其实跟Tinker本身庞大的架构比起来，已经算不上什么了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Uri.Builder urlBuilder = Uri.parse(<span class="keyword">this</span>.host).buildUpon(); <span class="comment">// "http://q.tinkerpatch.com"</span></span><br><span class="line">        <span class="keyword">if</span> (clientAPI.debug) &#123;</span><br><span class="line">            urlBuilder.appendPath(<span class="string">"dev"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String url = urlBuilder.appendPath(<span class="keyword">this</span>.appKey)</span><br><span class="line">            .appendPath(<span class="keyword">this</span>.appVersion)</span><br><span class="line">            .appendQueryParameter(<span class="string">"d"</span>, versionUtils.id())</span><br><span class="line">            .appendQueryParameter(<span class="string">"v"</span>, String.valueOf(System.currentTimeMillis()))</span><br><span class="line">            .build().toString();</span><br></pre></td></tr></table></figure></p><p>除此之外，为了能够在测试环境验证补丁，还提供了一个<a href="https://github.com/TinkerPatch/tinkerpatch-debug-tool">小工具</a></p><p>很感谢鹅厂能够将Tinker这样的工具开源出来造福广大开发者，抛开技术上的实力不说，能够一直积极维护也是一件了不起的事情。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://jp1017.top/2016/11/25/%E5%BE%AE%E4%BF%A1%E7%83%AD%E4%BF%AE%E5%A4%8Dtinker%E5%8F%8Atinker-server%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5/">微信热修复tinker及tinker-server快速接入</a></li><li><a href="https://github.com/TinkerPatch/tinkerpatch-sdk">TinkerPatch</a>，其实就是帮你把下发“patch_signed_7zip.apk”这个文件的活干了，还给了非常直观的报表，收费也是合情合理。</li><li><a href="http://w4lle.com/2016/12/16/tinker/index.html">Android热补丁之Tinker原理解析</a>，这篇文章基本将整个流程都讲清楚了</li><li><a href="http://blog.csdn.net/huweigoodboy/article/details/62428170">热更新Tinker研究（三）：加载补丁</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286384&amp;idx=1&amp;sn=f1aff31d6a567674759be476bcd12549&amp;scene=4#wechat_redirect">微信Tinker的一切都在这里，包括源码</a></li><li><a href="https://www.youtube.com/watch?v=v4Ewjq6r9XI">Enabling Android Teams: Dex Ed by Jesse Wilson</a>Jesse Wilson谈Dex文件的结构，可惜视频清晰度垃圾</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Android Application集成Tinker的一次记录。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/single-yellow-beauty-flower-on-the-fence-wallpaper-56801fde208df.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
      <category term="热修复" scheme="https://haldir65.github.io/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>css操作手册</title>
    <link href="https://haldir65.github.io/2017/10/29/2017-10-29-pure-css/"/>
    <id>https://haldir65.github.io/2017/10/29/2017-10-29-pure-css/</id>
    <published>2017-10-29T22:46:52.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p><strong>css使用记录及速查手册</strong><br><img src="http://odzl05jxx.bkt.clouddn.com/beautiful-red-rose-petals-wallpaper-56801fc038122.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><p>css基本语法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">SELECTOR</span> <span class="selector-tag">DECLARATION</span></span><br><span class="line"><span class="selector-id">#page-header</span> &#123; <span class="attribute">font-szie </span>: <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="comment">/*对了，我找了半天，发现这个page-header和大括号之间有没有空格无所谓的*/</span></span><br><span class="line"><span class="selector-id">#page-header</span>&#123; <span class="attribute">font-szie </span>: <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="comment">/*也就是这么写也无所谓，反正最终部署都会删掉空格*/</span></span><br></pre></td></tr></table></figure></p><p>例如<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.better</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。</strong></p><p>css中的长度单位有px,em,以及rem（ ios：6.1系统以上都支持. android：2.1系统以上都支持.），当然还有百分比。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars0.githubusercontent.com/u/1?v=4"</span> <span class="attr">width</span>=<span class="string">"70"</span> <span class="attr">height</span>=<span class="string">"70"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>不写单位就默认是px了</p><h2 id="2-引用方式"><a href="#2-引用方式" class="headerlink" title="2. 引用方式"></a>2. 引用方式</h2><p>html中引用css有三种方式:</p><ul><li><p>InLine Styling(内联样式)  只在非常特殊的情况下才使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">'content'</span> <span class="attr">style</span>=<span class="string">"position: absolute; top:0; left:0; width: 100%"</span>&gt;</span>Inline style are bad<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Embedded style sheets(嵌入样式) 在当前页面中添加一个样式，不能复用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Embedded style<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  p&#123;</span></span><br><span class="line"><span class="undefined">    font-size : 10px;</span></span><br><span class="line"><span class="undefined">    color: red;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.welcome</span>&#123;</span></span><br><span class="line"><span class="undefined">    color: blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> now every p tag in this page will have my style<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"welcome"</span>&gt;</span> this one will have blue text color<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>External style sheets(外部样式)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Embedded style<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/syntax.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> now every p tag in this page will have my style<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意上面那个rel表示relation.</strong></p><h2 id="3-选择器及优先级，各种Selector的写法"><a href="#3-选择器及优先级，各种Selector的写法" class="headerlink" title="3. 选择器及优先级，各种Selector的写法"></a>3. 选择器及优先级，各种Selector的写法</h2><p><strong>派生选择器，两种不同的效果</strong></p><h3 id="3-1-基于类的，很多时候看到中间有一个空格，意思就是在前者的基础上，再加上一些限定条件进行查找"><a href="#3-1-基于类的，很多时候看到中间有一个空格，意思就是在前者的基础上，再加上一些限定条件进行查找" class="headerlink" title="3.1 基于类的，很多时候看到中间有一个空格，意思就是在前者的基础上，再加上一些限定条件进行查找"></a>3.1 基于类的，很多时候看到中间有一个空格，意思就是在前者的基础上，再加上一些限定条件进行查找</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"fancy"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">td</span><span class="selector-class">.fancy</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#f60</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有class是fancy的td将是带有灰色背景的橙色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'fancy'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fancy</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f60</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有class是fancy的元素，里面的td都将是带有灰色背景的橙色。</p><h3 id="3-2-基于id的"><a href="#3-2-基于id的" class="headerlink" title="3.2 基于id的"></a>3.2 基于id的</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有id是sidebar的标签，内部的p段落全部应用上述样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> dotted <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为id 属性只能在每个 HTML 文档中出现一次，所以上面两个是一样的，后者指的是该元素所属的父标签。<br><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Cascade_and_inheritance">css层叠优先级</a>:</p><blockquote><p>IDs、class 选择器优先于element选择器<br>比起class而言id优先级更高<br>!important具有最高的优先级，尽量不要使用<br>简单说!import &gt; id &gt; class &gt; 普通的tag</p></blockquote><p>关于<del>important</del>，能不用就不要用。有人开玩笑说，职业生涯中不要使用超过5次。</p><h3 id="3-3-css-Conflict"><a href="#3-3-css-Conflict" class="headerlink" title="3.3 css Conflict"></a>3.3 css Conflict</h3><p>假如一个css文件里面出现了<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.span</span>&#123;</span><br><span class="line">  <span class="attribute">color </span>: blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.span</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果是底部红色的赢了，原因是css是Cascade的，从上往下读文件。前提是两个选择器一模一样<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">color </span>: blue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.span</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>这种情况还是蓝色的赢</em></p><h3 id="3-4-css的继承"><a href="#3-4-css的继承" class="headerlink" title="3.4 css的继承"></a>3.4 css的继承</h3><p>在一个页面中，父tag定义的样式是会传递给子tag的，如果子tag没有复写掉，那么就会propogate整个父tag的范围<br>例如<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color </span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color </span>: yellow</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面body的红色字体颜色会传递给当前页面所有tag的字体中，但div和p各自定义了自己的字体颜色，所以等于复写了。需要注意的是，这个时候有些tag，例如a tag是会获得浏览器默认属性的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>类似于浏览器默认给你加上了这么一行css。<br>browser 的default browser style,如果什么css都不加的话，就能看出来了</p><h3 id="3-5-Targeting-Multipe-Elements"><a href="#3-5-Targeting-Multipe-Elements" class="headerlink" title="3.5 Targeting Multipe Elements"></a>3.5 Targeting Multipe Elements</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*还不如写成这样*/</span></span><br><span class="line"><span class="selector-tag">p</span>, <span class="selector-tag">span</span>, <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-Descendant-Selector（后代选择器）"><a href="#3-6-Descendant-Selector（后代选择器）" class="headerlink" title="3.6 Descendant Selector（后代选择器）"></a>3.6 Descendant Selector（后代选择器）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这个意思就是，把content这个class里面的所有p tag的字体颜色都改成红色*/</span></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*这个更进一步，一层层嵌套下去，指定的p tag才会获得属性*/</span></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-id">#child-content</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么嵌套多少层其实没关系，实践中，不要嵌套太多层，不方便维护</p><h3 id="3-7-Child-Selector（子选择器）"><a href="#3-7-Child-Selector（子选择器）" class="headerlink" title="3.7 Child Selector（子选择器）"></a>3.7 Child Selector（子选择器）</h3><p>碰到下面这种html，如果只想给Direct Child赋属性，可以使用child selector<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Direct child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Direct child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Direct child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Indirect child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这个向右的箭头就表示child selector*/</span></span><br><span class="line"><span class="selector-id">#content</span> &gt; <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这个时候不会对Indirect child生效*/</span></span><br></pre></td></tr></table></figure><p>这种方式能够在不影响其他Descendant的情况下设置属性</p><h3 id="3-8-Adjacent-Selector（相邻选择器）"><a href="#3-8-Adjacent-Selector（相邻选择器）" class="headerlink" title="3.8 Adjacent Selector（相邻选择器）"></a>3.8 Adjacent Selector（相邻选择器）</h3><p>给一个tag之后下一个tag赋属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'all-posts'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>First Article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Published by Smith<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Second Article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Published by John<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Third Article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Published by Ted<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>something specific about the article content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>现在想要把所有紧跟着h2标签后面的那个p tag装饰下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.all-posts</span> <span class="selector-tag">h2</span> + <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Adjacent Selector必须是follow directly after first element</p><h3 id="3-8-Attribute-Selector（属性选择器）"><a href="#3-8-Attribute-Selector（属性选择器）" class="headerlink" title="3.8 Attribute Selector（属性选择器）"></a>3.8 Attribute Selector（属性选择器）</h3><p>首先明确什么是attribute，href,class,id,rel,type,title这些全都是Attribute。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Span without an class Attribute<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"Deck"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"Deck"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"Deck"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[class]</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这样就能选中所有上面带有class属性的tag*/</span></span><br></pre></td></tr></table></figure><p>同样的，只要用一个方括号括起来的选择器，就能选中带有特定属性的标签<br>当然还能更具体一点，例如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'#'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'http://www.google.com'</span> <span class="attr">title</span>=<span class="string">'Google'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'http://www.baidu.com'</span> <span class="attr">title</span>=<span class="string">'Baidu'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[title='google']</span>&#123;</span><br><span class="line">  <span class="attribute">color </span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这样只有上面的Google标签才变成红色*/</span></span><br></pre></td></tr></table></figure><p>还有更高级的Pattern Matching<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Span without an class Attribute<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"deck halls"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"deck tails"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"deck"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[class~='deck']</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这样上面三个都会变成紫色,或者~符号的意思是只要属性值里面包含了这个deck单词就算*/</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>web page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"something.pdf"</span>&gt;</span>View as pdf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[href$='pdf']</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这个美元符号的意思是任何以pdf结尾的href，如果要算上以xx开头的话，这样*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[href^='http']</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-Pseudo-selector"><a href="#3-9-Pseudo-selector" class="headerlink" title="3.9 Pseudo selector"></a>3.9 Pseudo selector</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"site"</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>站点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">text-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*active的状态是指鼠标点上去，但还没有跳转页面那一瞬间。其实你也可以鼠标点上去不放开，就是active了*/</span></span><br></pre></td></tr></table></figure><h3 id="3-10还有first-child等"><a href="#3-10还有first-child等" class="headerlink" title="3.10还有first child等"></a>3.10还有first child等</h3><p>例如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">acticle</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>First line,or first child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>center and other stuffs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>center and other stuffs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>center and other stuffs<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>this is the last child<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span>&#123;</span><br><span class="line">  <span class="attribute">color </span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">p</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键词就是first-child和last-child这么简单<br>还有first-of-type,last-of-type</p><h2 id="4-常用属性"><a href="#4-常用属性" class="headerlink" title="4. 常用属性"></a>4. 常用属性</h2><p>顺便说一下，mrakDown里面是能直接插入img标签的<br><img src='http://odzl05jxx.bkt.clouddn.com/beautiful-red-rose-petals-wallpaper-56801fc038122.jpg?imageView2/2/w/4000' width = '400px'></p><blockquote><p>background-size : cover;(比如说你要拿一张很大的图片作为body的background，但图片的大小已经超出了浏览器的大小，这时候就用cover缩放一下，就能填满了)</p></blockquote><ul><li>box-sizing</li></ul><p>如果两个element都有margin，挤在一起的话，最终的margin不是两个元素之间的margin相加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">10px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这俩都是inline-elements，最终生成的margin不是10+10=20px ,而是10px</p><p>flex box可以实现有效的居中。外部容器添加display:flex属性，子元素可以设置自己的order(越小越靠前/左，负数最小)。<br>父容器可以设置的属性包括：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flex-direction</span><br><span class="line">flex-wrap</span><br><span class="line">flex-flow</span><br><span class="line">justify-content</span><br><span class="line">align-items</span><br><span class="line">align-content</span><br><span class="line">/*子元素可以设置的属性包括:*/</span><br><span class="line">order</span><br><span class="line">align-self</span><br><span class="line">flex-grow</span><br><span class="line">flex-shrink</span><br><span class="line">flex-basis</span><br></pre></td></tr></table></figure></p><p>更多参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Flexible_Box_Layout/%E5%BC%B9%E6%80%A7%E6%A1%86%E7%9A%84%E9%AB%98%E7%BA%A7%E5%B8%83%E5%B1%80">MDN</a></p><h2 id="5-blcok，inline和inline-block"><a href="#5-blcok，inline和inline-block" class="headerlink" title="5. blcok，inline和inline-block"></a>5. blcok，inline和inline-block</h2><ul><li>display<br>可能的值包括inline,block,inline-block.<br>参考MDN网站，inline的说法是相较block来说的，就是默认不会另起一行：<blockquote><p>An inline element does not start on a new line and only takes up as much width as necessary.</p></blockquote></li></ul><p>block-level elements(块级元素)和inline elements(内联元素)；block元素可以包含block元素和inline元素；但inline元素只能包含inline元素。要注意的是这个是个大概的说法，每个特定的元素能包含的元素也是特定的，所以具体到个别元素上，这条规律是不适用的。比如 P 元素，只能包含inline元素，而不能包含block元素。</p><h3 id="display-block"><a href="#display-block" class="headerlink" title="display:block"></a>display:block</h3><pre><code>block元素会独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素宽度。block元素可以设置width,height属性。块级元素即使设置了宽度,仍然是独占一行。block元素可以设置margin和padding属性。</code></pre><h3 id="display-inline"><a href="#display-inline" class="headerlink" title="display:inline"></a>display:inline</h3><pre><code>inline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化。inline元素设置width,height属性无效。inline元素的margin和padding属性，水平方向的padding-left, padding-right, margin-left, margin-right都产生边距效果；但竖直方向的padding-top, padding-bottom, margin-top, margin-bottom不会产生边距效果。</code></pre><h3 id="display-inline-block"><a href="#display-inline-block" class="headerlink" title="display:inline-block"></a>display:inline-block</h3><pre><code>简单来说就是将对象呈现为inline对象，但是对象的内容作为block对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个link（a元素）inline-block属性值，使其既具有block的宽度高度特性又具有inline的同行特性。</code></pre><h2 id="5-css的简写多的不敢想-short-hand"><a href="#5-css的简写多的不敢想-short-hand" class="headerlink" title="5.css的简写多的不敢想,short-hand"></a>5.css的简写多的不敢想,short-hand</h2><p>下面这三个是一个意思，也就是说css是按照顺时针上，右，下，左的顺序来的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">  margin 10px 20px 10px 20px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  margin 10px 20px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span> <span class="number">#0000000</span> ;</span><br><span class="line">  <span class="comment">/* 这个意思是平时是白色，鼠标移上去就变成黑色 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了margin以外,padding也是。至于那种倒角，例如border-radius,则是左上角,右上角，右下角，左下角这样的顺序<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.round_corner</span>&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.round_corner</span>&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/* 左上角，右下角10px,右上角和左下角20px*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.round_corner</span>&#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.circle</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="comment">/* 糊一个圆*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.back</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#606060</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(#) ;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="comment">/*repeat的意思是图片填不满容器的话，从左到右，从上到下重复一遍 */</span></span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="comment">/*将图片居中摆放在容器中，还有bottom-center，bottom-right等*/</span></span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/*距离左边10px,顶部20px*/</span></span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="comment">/*图片的宽高，自动缩放*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.simplyfy</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:  url (#) no-repeat top center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#606060</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这是一种简写的方式,注意backgroundColor和background最好分开写*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.multiple_background</span>&#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'url1'</span>),<span class="built_in">url</span>(<span class="string">'url2'</span>);</span><br><span class="line">  <span class="comment">/*多层背景，url1叠在最顶层，可以想象是z轴最上方，url2在下面，中间一定要有一个逗号。*/</span></span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat,no-repeat;</span><br><span class="line">  <span class="comment">/*中间有一个逗号，no-repeat属性分别应用在url1和url2上。由于上面这俩一样的，所以只写一个也行*/</span></span><br><span class="line">  <span class="attribute">background-position</span>: center,top left;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">300px</span>,<span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/*都是一样的，分别一一对应*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*画三个圆*/</span></span><br><span class="line"><span class="selector-id">#circle</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(200, 200, 100);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 这个是透明度，0表示完全透明*/</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(200, 200, 100, 0.5);</span><br><span class="line">  <span class="comment">/*注意opacity会影响div里面text的透明 度，rgba不会影响*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#circle-2</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(200, 100, 200);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#circle-3</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#aadddd</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(top,#aadddd,0%,#77aaaa,100%);</span><br><span class="line">  <span class="comment">/*Gradient在有些浏览器上不支持，毕竟是比较新的属性，这时候就会fallback到background上，所以支持的话就有渐变色，不支持的话就恢复到设定的颜色，这也就是一个属性写两遍的原因*/</span></span><br><span class="line">  <span class="comment">/*但是上面两行在chrome里面不会出现渐变色,需要vender-prefix*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(top,#aadddd,0%,#77aaaa,100%);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top,#aadddd,0%,#77aaaa,100%);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(top,#aadddd,0%,#77aaaa,100%);</span><br><span class="line">  <span class="comment">/*这个top的意思是从上开始渐变，写bottom也行，从下往上*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.shadow_box</span>&#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">4px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(40,40,40,0.6);</span><br><span class="line">  <span class="comment">/*分别是阴影距离元素的右侧的距离和距离底部的距离以及阴影需要多深，越大越深，最后是阴影拓展的距离.外加阴影的颜色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cssmatic.com/box-shadow">cssmatic</a>这个网站可以使用拖拽的方式生成shadow的css文件<br>======================================sass=============================</p><h2 id="5-css-positioning"><a href="#5-css-positioning" class="headerlink" title="5. css positioning"></a>5. css positioning</h2><p>首先是float,Float 可用于实现文字环绕图片(加在图片的属性上)<br><em>the float element no longer take any height in document flow</em><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"picture.jpg"</span> <span class="attr">width</span>=<span class="string">"300px"</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这段文字默认会另起一行在图片下面<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*margin auto 让这个wrapper在其父容器中横向居中显示*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*float: left的意思是让这个图片居左显示，同时，旁边的text会自动调整，不至于被图片挡住。就能实现图文混排的效果*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*更具体一点的意思就是，float属性的标签，在html计算是否需要换行的时候是不会考虑这个标签的，同时，将根据float:left或者right摆在父容器的左边或者右边。感觉就像是在z轴方向提升了一个层级。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*但如果每一个标签都被提升到一个z层级,比如两个div都有float:left属性，后面一个会排在前面一个的右边*/</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'container'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left_float"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>First Tag<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left_float"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Second<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- 注意这时候container的height是0，因为它的子元素不占据dom中高度 --><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left_float</span>&#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*float有一点好处就是浏览器不会让文字被float的元素遮挡住，所以会挪到下面去，但文字标签的背景会延伸到float元素的下面*/</span></span><br><span class="line"><span class="selector-class">.clear_float_for_text</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*clear both的意思是让文字的左右和上下背景都不会延伸到float元素的下面*/</span></span><br></pre></td></tr></table></figure><p>float的元素和下面的文字之间使用margin无效，一般在text前面加一个空的<br><!-- <div style='clear:both'></div> --><br>或者在float的父元素加上<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.folat_wrapper</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方式更好，after被称为伪元素，就是在父容器后面插入一个空的元素</p><p> css3有一个transition效果，就是操作任何属性变换都设定一个事件，达到一种类似于动画演进的效果</p><p> list-style-type : none会把li标签前面的方块干掉<br> text-align: center;不仅会把文字居中，还会把这个容器中的img也居中</p><h3 id="CSS-Positioning"><a href="#CSS-Positioning" class="headerlink" title="CSS Positioning"></a>CSS Positioning</h3><p><strong><em>position : absolute意味着remove it from normal document flow;position:relative意味着相对原本应该的位置移动，但依然占据document flow;position:fixed意味着</em></strong></p><p><strong>absolute 是最棘手的position值。 absolute 与 fixed 的表现类似，但是它不是相对于视窗而是相对于最近的“positioned”祖先元素。如果绝对定位（position属性的值为absolute）的元素没有“positioned”祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动。记住一个“positioned”元素是指 position 值不是 static 的元素。</strong></p><p>其实就是元素的postion:absolute之后，就可以添加top,right,bottom,left这些属性了。<strong><em>但是</em></strong> 这些属性不是简单的说就直接相对于其parent元素的。而是相对于最近一个position不是static的父元素（static是default，所以如果直系父元素不写的话，子元素会忽略 top, bottom, left, right 或者 z-index 声明）。如果真的一个个往上找都没有的话，直接相对于body起效。</p><p>Definitely will center a text in div , both horizontally and vertically<a href="https://stackoverflow.com/questions/5703552/css-center-text-horizontally-and-vertically-inside-a-div-block">CSS center text (horizontally and vertically) inside a div block</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    Line 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> toggle = <span class="literal">true</span>;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (toggle) &#123;</span><br><span class="line">      $(<span class="string">"#content"</span>).html(<span class="string">"Line 1"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">"#content"</span>).html(<span class="string">"&lt;div&gt;Line 1&lt;/div&gt;&lt;div&gt;Line 2&lt;/div&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    toggle = !toggle;</span><br><span class="line">  &#125;, <span class="number">1300</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">36px</span> Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffbd17</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">260px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#content</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#06c</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>css position z index and stack ordering</strong><br>html文件从上到下，越是在下面的文件，在z轴方向上的高度就越高。所以顶部nav要写在最底下。这是默认情况<br>如果要放在顶部的话，需要添加z-index：1;默认所有的z-index=0。<br><strong><em>使z-index生效的前提是给了一个position属性</em></strong></p><p><strong>Clipping Content</strong><br>先加上一个max-height，然后使用over-flow : hidden; 这个属性默认值是visible。使用auto会在内容高度超过容器高度的时候带上一个scrollbar，内容可以滚动。使用scroll的时候会在右侧和底部加上scrollbar，无论是否超出了max-height</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Media</span>(<span class="keyword">max</span>-<span class="keyword">width</span>=<span class="keyword">768</span>)&#123;</span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里面的css只会在平板及手机上生效，其实768px也就是平板和一般电脑宽度像素的界限了</strong></p><p><a href="https://stackoverflow.com/questions/1762539/margin-on-child-element-moves-parent-element">子元素的margin会移动父元素</a> 给parent加上overflow :auto就好了</p><h3 id="font-awesome怎么用"><a href="#font-awesome怎么用" class="headerlink" title="font awesome怎么用"></a>font awesome怎么用</h3><p>直接下载下来一个zip文件，解压后得到font-awesome文件夹，整个丢到项目中，html中引用’./font-awesome/css/font-awesome.css.min’即可。一般是粘贴到一个a标签里面。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul><li><a href="https://www.cssmatic.com/box-shadow">cssmatic</a>很多时候，手写css是一种奢侈，css这种东西本来就属于样式一类，尽量去复制粘贴，不要自己写</li><li>有些浏览器不支持特定样式的话，可以使用Modernizrz这个javaScript库</li><li>作为新手，多数时候css不起效是因为class和id在html中和css中拼写错了</li><li><a href="http://zh.learnlayout.com/position.html">比较合适的css布局教程</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Cascade_and_inheritance">css层叠优先级</a><br><a href="https://getmdl.io/components/index.html">Material CSS</a><br><a href="https://www.w3cschool.cn/css/css-selector.html">css选择器汇总</a><br><a href="https://fonts.google.com/">谷歌的字体库</a> 自己去下，很多</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;css使用记录及速查手册&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/beautiful-red-rose-petals-wallpaper-56801fc038122.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="https://haldir65.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS Tips</title>
    <link href="https://haldir65.github.io/2017/10/29/2017-10-29-pure-javaScript/"/>
    <id>https://haldir65.github.io/2017/10/29/2017-10-29-pure-javaScript/</id>
    <published>2017-10-29T22:10:27.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>Vanilla JS其实就是原生javascript了。论运行速度，在Vanilla JS面前，所有的js library都要慢很多。<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery04e31f5513d62958957b4caa1d944ae4.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><p>关于js的历史，根据Patrick Dubroy在2014年的一次<a href="https://www.youtube.com/watch?v=34cw-XRknWM">演讲</a>，ES3是1999年出来的，ES3之前的版本简直是翔。ES4设计的实在太牛逼，一直拖到2008年也没搞定，所以大家决定直接跳过ES4(历史上也从未有过ES4)，推出了ES5（只把ES4中的一部分实现了），实际上2015年6月ES6(也就是2008年那帮人所称呼的harmony)才发布。关于Patrick Dubroy，这人在2011年的Google IO上做过关于用mat检测Android Memory Leak的演讲，老外真是全才。</p><h2 id="TakeAways"><a href="#TakeAways" class="headerlink" title="TakeAways"></a>TakeAways</h2><ol><li><a href="#1-一些作为一门语言基本的操作都有">基本语法</a></li><li><a href="#2-操作HTML-DOM的一些方法">操作html的一些点</a></li><li><a href="#3-从onclick开始到整个交互事件模型">交互事件的注册，捕获，拦截</a></li><li><a href="#4-异步的实现">异步</a></li><li><a href="#5-ES6新增的一些东西">ES6新增的东西</a></li><li><a href="#6-我也不知道归到哪一类的问题">我也不知道归到哪一类的问题</a></li></ol><h2 id="1-一些作为一门语言基本的操作都有"><a href="#1-一些作为一门语言基本的操作都有" class="headerlink" title="1. 一些作为一门语言基本的操作都有"></a>1. 一些作为一门语言基本的操作都有</h2><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110078544.jpg?imageView2/2/w/600" alt=""></p><h3 id="1-1-比如说module（就是import，export这种，虽然是ES6才补上的）"><a href="#1-1-比如说module（就是import，export这种，虽然是ES6才补上的）" class="headerlink" title="1.1 比如说module（就是import，export这种，虽然是ES6才补上的）"></a>1.1 比如说module（就是import，export这种，虽然是ES6才补上的）</h3><p> <del>js中好像没有像java中那种javaBean的特殊的数据类型的存在。</del>其实也不需要，js并不是一种用class来model real world object的语言。<br>ES6开始可以使用import和export语法，有类似的效果，<a href="https://stackoverflow.com/questions/34741111/exporting-importing-json-object-in-es6">参考</a><br>但node js目前(version 8.x)还不支持es 2015的import export语法，偏偏node对于其他es2015的特性都支持到位了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// states.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  STATES: &#123;</span><br><span class="line">    <span class="string">'AU'</span> : &#123;...&#125;,</span><br><span class="line">    <span class="string">'US'</span> : &#123;...&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// accept.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; STATES &#125; <span class="keyword">from</span> <span class="string">'./states'</span>;  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">import</span>  STATES  <span class="keyword">from</span> <span class="string">'./states'</span>;  <span class="comment">// concrete object ,this works</span></span><br><span class="line"><span class="keyword">import</span> whatever <span class="keyword">from</span> <span class="string">'states'</span>; <span class="comment">// concrete object, this works</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种情况</span></span><br><span class="line"><span class="keyword">var</span> STATES = &#123;&#125;;</span><br><span class="line">STATES.AU = &#123;...&#125;;</span><br><span class="line">STATES.US = &#123;...&#125;;</span><br><span class="line"><span class="keyword">export</span> STATES;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; STATES &#125; <span class="keyword">from</span> <span class="string">'states'</span>;<span class="comment">//如果输出方使用export default，接收方不应加上大括号。此时输出方输出的是匿名Object，接收方随便起什么名字都行。</span></span><br><span class="line"><span class="comment">// 如果输出方输出有明确定义的function, object，接收方需要添加大括号。</span></span><br></pre></td></tr></table></figure><p>es6的import和export需要注意<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B.js</span></span><br><span class="line"><span class="keyword">import</span> firstGreet <span class="keyword">from</span> <span class="string">'.A.js'</span>; <span class="comment">//this works</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstGreet &#125; <span class="keyword">from</span> <span class="string">'.A.js'</span>; <span class="comment">// undefined !</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A.js</span></span><br><span class="line"><span class="keyword">const</span> sayHi = <span class="function"><span class="keyword">function</span> <span class="title">hi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hi"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; sayHi &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstGreet &#125; <span class="keyword">from</span> <span class="string">'.A.js'</span>; <span class="comment">// this works</span></span><br></pre></td></tr></table></figure></p><p>原因就在于第一种方式是使用匿名export的。</p><h3 id="1-2-基本的操作符，dynanic-type-函数，变量，oop-class（ES6）-for循环-while这些都有"><a href="#1-2-基本的操作符，dynanic-type-函数，变量，oop-class（ES6）-for循环-while这些都有" class="headerlink" title="1.2 基本的操作符，dynanic type,函数，变量，oop,class（ES6）,for循环,while这些都有"></a>1.2 基本的操作符，dynanic type,函数，变量，oop,class（ES6）,for循环,while这些都有</h3><ul><li><p>js里面判断两个变量相等的方式，建议一律使用三个等号（严格相等）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"3"</span>;</span><br><span class="line">a==b 返回 <span class="literal">true</span></span><br><span class="line">a===b 返回 <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为a,b的类型不一样</span></span><br><span class="line"><span class="comment">// ==只比较了值</span></span><br><span class="line"><span class="comment">// ===只有在值和类型完全相同的时候才为true，用来进行严格的比较判断</span></span><br><span class="line"><span class="comment">// !=（只检查值）和!==（检查值和类型）也差不多的意思。</span></span><br><span class="line">= 赋值运算符</span><br><span class="line">== 等于</span><br><span class="line">=== 严格等于</span><br><span class="line">&amp;&amp;和||也有，!=也有</span><br><span class="line"></span><br><span class="line">- <span class="literal">true</span>和<span class="literal">false</span>也有</span><br><span class="line"><span class="comment">// truthy的概念是js里面特有的</span></span><br><span class="line"><span class="comment">// 在console里面输入：</span></span><br><span class="line">Boolan(<span class="number">5</span>)  &gt; 输出<span class="literal">true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">-5</span>) &gt;输出<span class="literal">false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">7</span>&gt;<span class="number">5</span>) &gt; 输出<span class="literal">true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">'someword'</span>) &gt; <span class="literal">true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>) &gt; <span class="literal">false</span></span><br><span class="line"><span class="comment">// 只有Boolan(0)才是false</span></span><br></pre></td></tr></table></figure></li><li><p>string，number,array也有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var myString = 'i 'm a "funny" string' #这样是不行的</span></span><br><span class="line"><span class="keyword">var</span> myString = <span class="string">'i \'m a "funny" string'</span>;<span class="comment">//加一个转义就好了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">'abc'</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'bcd'</span></span><br><span class="line">a&lt;b <span class="comment">// true,因为ASCII表里面，a在b前面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span></span><br><span class="line"><span class="keyword">var</span> str2 = str.slice(<span class="number">2</span>,<span class="number">9</span>);</span><br><span class="line">str2 <span class="comment">// 'llo,wo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tags = <span class="string">'meat,ham ,salami,prok,beef,chicken'</span></span><br><span class="line"><span class="keyword">var</span> tagsArray = tags.split(<span class="string">","</span>)</span><br><span class="line"><span class="comment">//生成</span></span><br><span class="line">[<span class="string">"meat"</span>,<span class="string">"ham"</span>,<span class="string">"salami"</span>,<span class="string">"prok"</span>,<span class="string">"beef"</span>,<span class="string">"chicken"</span>]</span><br></pre></td></tr></table></figure></li></ul><p><em>js的Array里面能够装不同类型的数据，跟Python很像</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Array的方式很多</span></span><br><span class="line"><span class="keyword">var</span> array = []</span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="string">'stuff'</span>,<span class="string">'jeff'</span>,<span class="number">20</span>]</span><br><span class="line"><span class="keyword">var</span> array2 = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myArray = []<span class="comment">// 初始化就好了，无需指定容量</span></span><br><span class="line">myArray[<span class="number">0</span>] =<span class="string">'stuff'</span></span><br><span class="line">myArray[<span class="number">1</span>] = <span class="number">70</span></span><br><span class="line">myArray &gt; [<span class="string">'stuff'</span>,<span class="number">70</span>]</span><br><span class="line"></span><br><span class="line">myArray[<span class="number">30</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下为亲测console中的输出就这样</span></span><br><span class="line">myArray &gt; (<span class="number">31</span>) [<span class="string">"stuff"</span>, <span class="number">70</span>, empty × <span class="number">28</span>, <span class="literal">true</span>]</span><br><span class="line">myArray[<span class="number">12</span>] &gt; <span class="string">'undefined'</span></span><br><span class="line">myArray.length &gt; <span class="number">31</span></span><br><span class="line">myArray.sort() &gt; (<span class="number">31</span>) [<span class="number">70</span>, <span class="string">"stuff"</span>, <span class="literal">true</span>, empty × <span class="number">28</span>]</span><br></pre></td></tr></table></figure></p><p><em>Object，class这种oop的特性也有</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myCaR = <span class="keyword">new</span> Car()</span><br><span class="line">VM315:<span class="number">1</span> Uncaught <span class="built_in">ReferenceError</span>: Car is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">1</span>:<span class="number">13</span></span><br><span class="line"><span class="keyword">var</span> myString = <span class="keyword">new</span> <span class="built_in">String</span>()</span><br><span class="line">myString = <span class="string">'hello'</span>    </span><br><span class="line">myString.length &gt; <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> mystring23 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'stuff'</span>)<span class="comment">//这也是行的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接在console里写</span></span><br><span class="line"><span class="keyword">var</span> myCar = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">myCar.speed = <span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line">myCar.speed</span><br><span class="line"><span class="number">20</span></span><br><span class="line">myCar.name = <span class="string">'benz'</span></span><br><span class="line"><span class="string">"benz"</span></span><br><span class="line">myCar.name</span><br><span class="line"><span class="string">"benz"</span></span><br><span class="line">myCar</span><br><span class="line">&#123;<span class="attr">speed</span>: <span class="number">20</span>, <span class="attr">name</span>: <span class="string">"benz"</span>&#125; <span class="comment">//json即object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car2 = &#123;<span class="attr">speed</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">"tesla"</span>&#125;</span><br><span class="line"></span><br><span class="line">car2</span><br><span class="line">&#123;<span class="attr">speed</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">"tesla"</span>&#125;</span><br></pre></td></tr></table></figure></p><p><em>上下文的概念也有，this关键字，但要注意闭包</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// console直接输入</span></span><br><span class="line"><span class="keyword">this</span></span><br><span class="line">Window &#123;<span class="attr">frames</span>: Window, <span class="attr">postMessage</span>: ƒ, <span class="attr">blur</span>: ƒ, <span class="attr">focus</span>: ƒ, <span class="attr">close</span>: ƒ, …&#125;<span class="comment">//window是一个有很多变量(function也是变量)的对象，在当前语义下，就是window</span></span><br><span class="line"></span><br><span class="line">car2.test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;</span><br><span class="line">car2</span><br><span class="line">&#123;<span class="attr">speed</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">"tesla"</span>, <span class="attr">test</span>: ƒ&#125;</span><br><span class="line"></span><br><span class="line">car2.test</span><br><span class="line">ƒ ()&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;</span><br><span class="line"></span><br><span class="line">car2.test()<span class="comment">//这时候this就是car2这个Object了</span></span><br><span class="line">VM592:<span class="number">1</span> &#123;<span class="attr">speed</span>: <span class="number">30</span>, <span class="attr">name</span>: <span class="string">"tesla"</span>, <span class="attr">test</span>: ƒ&#125;</span><br></pre></td></tr></table></figure></p><p>this应该是当前上下文</p><p> <em>Construction function，函数也是一个object的成员</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Car = <span class="function"><span class="keyword">function</span> (<span class="params">name,speed</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.speed = speed</span><br><span class="line">  <span class="keyword">this</span>.test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'speed is '</span>+speed)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car24 = <span class="keyword">new</span> Car(<span class="string">'jim'</span>,<span class="number">40</span>)</span><br><span class="line">car24</span><br><span class="line">Car &#123;<span class="attr">name</span>: <span class="string">"jim"</span>, <span class="attr">speed</span>: <span class="number">40</span>, <span class="attr">test</span>: ƒ&#125;</span><br><span class="line">car24.test()</span><br><span class="line">VM621:<span class="number">5</span> speed is <span class="number">40</span></span><br></pre></td></tr></table></figure></p><ul><li>Object definition(construcor)，class也有</li><li>还有随便用的log</li></ul><h3 id="1-3-一些工具，时间-Math，io操作（文件系统、网络）也有"><a href="#1-3-一些工具，时间-Math，io操作（文件系统、网络）也有" class="headerlink" title="1.3 一些工具，时间,Math，io操作（文件系统、网络）也有"></a>1.3 一些工具，时间,Math，io操作（文件系统、网络）也有</h3><p>Date Object的使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> past = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2007</span>,<span class="number">11</span>,<span class="number">9</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">past</span><br><span class="line"><span class="comment">// Sun Dec 09 2007 00:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line">past.getDay</span><br><span class="line">ƒ getDay() &#123; [native code] &#125;</span><br><span class="line">past.getDay()</span><br><span class="line"><span class="number">0</span></span><br><span class="line">past.getFullYear()</span><br><span class="line"><span class="number">2007</span></span><br><span class="line">past.getDate</span><br><span class="line">ƒ getDate() &#123; [native code] &#125;</span><br><span class="line">past.getDate()</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure></p><p><img src="http://odzl05jxx.bkt.clouddn.com/unclassified_unclassified--115_07-1920x1440.jpg?imageView2/2/w/600" alt=""></p><p>网络请求，Ajax(Asynchronous javaScript &amp; xml)请求的套路也有(AJAX命名上就是异步的)<br>XMLHttpRequest缩写是(XHR)<br>关于XHR Object</p><ul><li>API In the form of an object</li><li>Provided by the browser’s js environment</li><li>can be used with other protocols than http</li><li>Can work with data other than XML(Json ,plain text)</li></ul><p>有很多的Library能干ajax一样的事情:<br>jQuery,Axios,Superagent,Fetch API,Prototype,Node HTTP</p><p>ajax的onload只会在onreadystatechange==4的时候才会触发<br>MDN文档上说ajax的readyState有五种：<br>0    UNSENT    代理被创建，但尚未调用 open() 方法。<br>1    OPENED    open() 方法已经被调用。<br>2    HEADERS_RECEIVED    send() 方法已经被调用，并且头部和状态已经可获得。<br>3    LOADING    下载中； responseText 属性已经包含部分数据。<br>4    DONE    下载操作已完成。</p><p>xhr.onProgress的readyState是3，这个时候显示加载进入条就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getJSON = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    client.open(<span class="string">"GET"</span>, url,<span class="literal">true</span>);</span><br><span class="line">    client.onreadystatechange = handler;</span><br><span class="line">    client.responseType = <span class="string">"json"</span>;</span><br><span class="line">    client.setRequestHeader(<span class="string">"Accept"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    client.send();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(<span class="keyword">this</span>.response);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="keyword">this</span>.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Contents: '</span> + json);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'出错了'</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>表单的操作<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Normal get form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"GET"</span> <span class="attr">action</span>=<span class="string">"process.php"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Ajax get form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'getForm'</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'name'</span> <span class="attr">id</span>=<span class="string">'name1'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Normal post form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">action</span>=<span class="string">"process.php"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Ajax post form<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'postForm'</span> <span class="attr">name</span>=<span class="string">'name'</span> <span class="attr">id</span>=<span class="string">'name2'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'name'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'getForm'</span>).addEventListener(<span class="string">'submit'</span>,</span><br><span class="line">getName);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">'name1'</span>).value;<span class="comment">//用户输入的内容</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">'GET'</span>,<span class="string">'process.php?name='</span>+name,<span class="literal">true</span>);</span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'postForm'</span>).addEventListener(<span class="string">'submit'</span>,</span><br><span class="line">postName);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postName</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">'name2'</span>).value;<span class="comment">//用户输入的内容</span></span><br><span class="line">  <span class="keyword">var</span> params =<span class="string">"name="</span>+name;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">'POST'</span>,<span class="string">'process.php'</span>,<span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">'Content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript random方法得到随机整数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">3</span>))  <span class="comment">//得到1-3的整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">4</span>)); <span class="comment">//得到0-3的整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.round() <span class="comment">//当小数是0.5或者大于0.5的时候向上一位</span></span><br><span class="line"><span class="built_in">Math</span>.ceil() <span class="comment">//始终向上一位</span></span><br><span class="line"><span class="built_in">Math</span>.floor() <span class="comment">// 始终向下舍入</span></span><br></pre></td></tr></table></figure></p><h2 id="2-操作HTML-DOM的一些方法"><a href="#2-操作HTML-DOM的一些方法" class="headerlink" title="2. 操作HTML-DOM的一些方法"></a>2. 操作HTML-DOM的一些方法</h2><p>通过 id 找到 HTML 元素 window.document.getElementById()<br>通过标签名找到 HTML 元素 window.document.getElementsByTagName()//比如说’h2’这种<br>通过类名找到 HTML 元素 window.document.getElementsByClassName()<br>注意方法名称，带s的返回的是一个数组，不带s返回一个object<br>找form 标签的话，还有一种方法:<br>先手写一段html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>有时候手写html不是坏事<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">'my-form'</span> <span class="attr">name</span>=<span class="string">'myForm'</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>Name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      &lt;label&gt;Hobbies: &lt;/label&lt;br/&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"biking"</span> <span class="attr">value</span>=<span class="string">"biking"</span>&gt;</span>Biking<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"sking"</span> <span class="attr">value</span>=<span class="string">"sking"</span>&gt;</span>Sking<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"diving"</span> <span class="attr">value</span>=<span class="string">"diving"</span>&gt;</span>Diving<span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colour"</span>&gt;</span>Fav colour: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"colour"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">'Submit'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myForm = <span class="built_in">document</span>.forms.myForm<span class="comment">//myForm是这个Form标签的name属性,form是跟input配合使用的</span></span><br><span class="line">myForm.name  &gt; 那个input标</span><br><span class="line">myForm.name.value  &gt; 那个input标签，其实也就是那个输入框里面的文字</span><br><span class="line">myForm.colour.vaule &gt; 显示当前选中的select值</span><br></pre></td></tr></table></figure><p>还是上面那个表单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myForm = <span class="built_in">document</span>.forms.myForm</span><br><span class="line"><span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>)</span><br><span class="line"></span><br><span class="line">myForm.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//就是上面那个submit被点击时触发</span></span><br><span class="line">  <span class="keyword">if</span>(myForm.name.value === <span class="string">''</span>)&#123;</span><br><span class="line">    message.innerHtml = <span class="string">'please enter an not empty name'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">//summit事件被终止</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    message.innerHtml = <span class="string">''</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>div.innerHtml（把整个html对象都返回了）和div.textContent(只返回文字)。所以innerHtml可以用来把一个div里面的tag全部替换掉（比如原来是个p，现在换成h1），而textContent只能把某一个tag里面的文字改掉。<br>想要<a href="https://stackoverflow.com/questions/4365246/how-to-change-href-of-a-tag-on-button-click-through-javascript">改href</a>的话，得这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="built_in">document</span>.getElementById(<span class="string">"abc"</span>);</span><br><span class="line">link.setAttribute(<span class="string">"href"</span>, <span class="string">"xyz.php"</span>);</span><br></pre></td></tr></table></figure></p><p>setAttribute()可以用于设置一个在当前tag上不存在的attr<br>设置class可以用setAttribute(‘class’,’XXX’)，也可以用div.className = ‘XXX’<br>对于一个a标签<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/subpage"</span>&gt;</span>Some Thing<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这时候调用a.href &gt; 会输出’<a href="http://www.host.com/subpage&#39;，即输出完整的路径">http://www.host.com/subpage&#39;，即输出完整的路径</a><br>但是如果使用a.getAttribute(‘href’) &gt; 输出’/subpage’</p><p>改一个tag的背景元素不能这么改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.style.background-color= <span class="string">'blue'</span></span><br><span class="line"><span class="comment">//得这样</span></span><br><span class="line">a.style.backgroundColor= <span class="string">'blue'</span><span class="comment">//其实就是横线换成CammelCase</span></span><br></pre></td></tr></table></figure></p><ol><li>在dom中新增一个element的方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>) <span class="comment">//创建一个新的li标签,</span></span><br><span class="line">parentTag.appendChild(li)<span class="comment">//添加到尾部</span></span><br><span class="line">parentTag.insertBefore(li,parentTag.getElementsByTagName(<span class="string">'li'</span>)[<span class="number">0</span>])<span class="comment">//添加到原来的0元素前面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个tag的话</span></span><br><span class="line"><span class="keyword">var</span> removed = parentTag.removeChild(li)<span class="comment">//移除方法会返回被移除的元素</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-从onclick开始到整个交互事件模型"><a href="#3-从onclick开始到整个交互事件模型" class="headerlink" title="3.从onclick开始到整个交互事件模型"></a>3.从onclick开始到整个交互事件模型</h2><h2 id="4-异步的实现"><a href="#4-异步的实现" class="headerlink" title="4. 异步的实现"></a>4. 异步的实现</h2><p>首先js里面也是有callback hell这种概念的，一个接口好了请求另一个接口，好了之后在请求第三个接口，这样一层套一层谁也不喜欢。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">   http.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(http.readyState==<span class="number">4</span>&amp;&amp;http.status==<span class="number">200</span>)&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(http.response))</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   http.open(<span class="string">"GET"</span>,<span class="string">'data/tweets.json'</span>,<span class="literal">true</span>);</span><br><span class="line">   http.send();</span><br></pre></td></tr></table></figure></p><p>上面这段直接在chrome里面跑的话会出错： Cross origin requests are only supported<br> for protocol schemes: http, data, chrome, chrome-extension, https<br> Chrome 默认不支持跨域请求，启动时要加上个flag就行了</p><blockquote><p>ajax的readyState有四种</p><ol><li>request not initialized</li><li>request has been set up</li><li>request has been set</li><li>request is in process</li><li>request is complete</li></ol></blockquote><p>ajax的open第三个参数表示是异步还是同步，一般都得异步。由于js是单线程的，<br>所以会把实际的网络请求工作放到一条js以外的线程中，完成后丢到当前js线程任务池的最后。 当前线程的任务完成后就可以执行这段回调</p><p>ES6提供了Promise，能够将事情简化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//promise(ES6) is a placeholder for something that will happen in the future</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> http = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            http.open(<span class="string">'GET'</span>,url,<span class="literal">true</span>);</span><br><span class="line">            http.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(http.status==<span class="number">200</span>)&#123;</span><br><span class="line">                    resolve(<span class="built_in">JSON</span>.parse(http.response));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    reject(http.statusText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            http.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                reject(http.statusText)</span><br><span class="line">            &#125;</span><br><span class="line">            http.send();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> promise = get(<span class="string">'data/tweets.json'</span>);</span><br><span class="line">        promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">tweets</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(tweets);</span><br><span class="line">            <span class="keyword">return</span> get(<span class="string">'data/friends.json'</span>)</span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params">friends</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(friends);</span><br><span class="line">        &#125;).</span><br><span class="line">        <span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>更加有效的方式是使用generator，还不是很了解<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myGen = gen()</span><br><span class="line"><span class="comment">// myGen.done</span></span><br><span class="line"><span class="comment">//myGen.value()</span></span><br></pre></td></tr></table></figure></p><h2 id="5-ES6新增的一些东西"><a href="#5-ES6新增的一些东西" class="headerlink" title="5. ES6新增的一些东西"></a>5. ES6新增的一些东西</h2><p>let(lexical)的用法就在一个循环里给function赋值，很常见。<br>注意的是var的作用域是跨大括号的。所以大括号里面的var是能被大括号外面访问的，let就不行。<br>async await 都是ES2017（比ES2015更高的版本）中出现的。<br>default parameters： 默认参数，和python中很像<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myLog</span>(<span class="params">name,age,id</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myDefaultFunction</span>(<span class="params">name=<span class="string">'john'</span>,age=<span class="number">27</span>,id =<span class="number">100</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用：</span></span><br><span class="line">myDefalutFunction()<span class="comment">// 不传参也可</span></span><br></pre></td></tr></table></figure></p><p>spread operator<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> num2 = [num1,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(num2)</span><br><span class="line"><span class="comment">// var num2 = [num1,5,6]</span></span><br><span class="line"><span class="keyword">var</span> num2 = [...num1,<span class="number">5</span>,<span class="number">6</span>] <span class="comment">//三个点</span></span><br><span class="line"><span class="built_in">console</span>.log(num2)</span><br><span class="line"><span class="comment">// (5) [1, 2, 3, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//另外一个用处</span></span><br><span class="line"><span class="keyword">var</span> num3 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">acceptAnArray</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a+b+c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">acceptAnArray(...num3) <span class="comment">// 输出6</span></span><br></pre></td></tr></table></figure></p><p>template String(这个不是引号，是在tab键上面那个)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myString = <span class="string">`This is an template String ,</span></span><br><span class="line"><span class="string">          note we have some line break here,that will be honored. Also there are some whiteSpace afront , which will be honored too`</span></span><br><span class="line"><span class="built_in">console</span>.log(myString)          </span><br><span class="line"><span class="keyword">var</span> nextString = <span class="string">`This is `</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logLiteralString</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`the name is <span class="subst">$&#123;name&#125;</span> and the age is <span class="subst">$&#123;<span class="number">10</span>+<span class="number">12</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// the name is hhaha and the age is 22 。 String literals.</span></span><br></pre></td></tr></table></figure></p><p>String新增了一些方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hahhaha'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.repeat(<span class="number">3</span>));</span><br><span class="line"><span class="comment">// hahhahahahhahahahhaha</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'goodbye'</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.startWith(<span class="string">'good'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.startWith(<span class="string">'bye'</span>,<span class="number">4</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.endsWith(<span class="string">'good'</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.endsWith(<span class="string">'good'</span>,str2.length<span class="number">-3</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">'Good Day'</span></span><br><span class="line"><span class="built_in">console</span>.log(str3.includes(<span class="string">'Day'</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>Object Literal notation<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5得这么写</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Josh'</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">27</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: name,</span><br><span class="line">  age: age,</span><br><span class="line">  greet: <span class="function"><span class="keyword">function</span> (<span class="params">X</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`you say <span class="subst">$&#123;X&#125;</span> in your greets`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6这样就行了</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name,age,</span><br><span class="line">  greet(X)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`you say <span class="subst">$&#123;X&#125;</span> in your greets`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简明很多</p><p>Arrow Function（箭头函数）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> stuff = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'say Stuff'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> stuff2 = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this is more precise'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> stuff3 = <span class="function"><span class="params">()</span> =&gt;</span>   <span class="built_in">console</span>.log(<span class="string">'只有一行的话可以不要大括号'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stuff4 = <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`the name is <span class="subst">$&#123;name&#125;</span> and hi`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> stuff5 = <span class="function"><span class="params">name</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`只有一个参数 <span class="subst">$&#123;name&#125;</span>的话，参数的小括号也不要了`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一个好处就是: the arrow function will bind the this keyword lexically.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> jam = &#123;</span><br><span class="line">    name : <span class="string">'Jane'</span>,</span><br><span class="line">    greeting: <span class="function"><span class="keyword">function</span> (<span class="params">X</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (X&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">' greet you'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,<span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  jam.greeting(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 greet you</span></span><br></pre></td></tr></table></figure></p><p>原因是this已经不是jam这个object了，也就是闭包问题.es6之前用下面这种方式规避一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> jam = &#123;</span><br><span class="line">    name : <span class="string">'Jane'</span>,</span><br><span class="line">    greeting(X) &#123;</span><br><span class="line">      <span class="keyword">var</span> _this =<span class="keyword">this</span>;</span><br><span class="line">      <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (X&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(_this.name+<span class="string">' greet you'</span>);</span><br><span class="line">            X--;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,<span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  jam.greeting(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> jam = &#123;</span><br><span class="line">    name : <span class="string">'Jane'</span>,</span><br><span class="line">    greeting(X) &#123;</span><br><span class="line">      <span class="built_in">window</span>.setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (X&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">' greet you'</span>);</span><br><span class="line">            X--;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,<span class="number">500</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  jam.greeting(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>class definition<br>es6 新增了class的概念，还有extends的概念<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Band</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name ,location) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.location = location;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubBand</span> <span class="keyword">extends</span> <span class="title">Band</span> </span>&#123;</span><br><span class="line">  construcor(name ,location,popularity) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name ,location); <span class="comment">// this is essential , 如果后面想要使用parent 的属性的话，需要加上super()</span></span><br><span class="line">    <span class="keyword">this</span>.popularity = popularity;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> garage = <span class="keyword">new</span> Band(<span class="string">'john'</span>, <span class="string">'Doe'</span>);</span><br><span class="line">garage.greet();</span><br></pre></td></tr></table></figure></p><p>Sets是新增的用于存储unique数据的集合(元素不能重复)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">names.add(<span class="string">"josh"</span>).add(<span class="string">'bob'</span>).add(<span class="string">'neo'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(names);</span><br><span class="line"><span class="built_in">console</span>.log(names.size);</span><br><span class="line">names.delete(<span class="string">'bob'</span>) <span class="comment">// 返回true表示删除成功，false表示删除失败</span></span><br><span class="line">names.clear()</span><br><span class="line">names.has(<span class="string">'bob'</span>) <span class="comment">//就是contains的意思</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> duplicatedArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">'jane'</span>,<span class="string">'harry'</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> undepulicatedSet = <span class="keyword">new</span> <span class="built_in">Set</span>(duplicatedArray);</span><br><span class="line"><span class="built_in">console</span>.log(undepulicatedSet);</span><br><span class="line">duplicatedArray = [...undepulicatedSet] <span class="comment">//使用spread operater将set变成各个单一的元素</span></span><br><span class="line"><span class="built_in">console</span>.log(duplicatedArray);</span><br></pre></td></tr></table></figure></p><p>add的时候如果存在重复元素直接无视新增的重复元素</p><h2 id="6-我也不知道归到哪一类的问题"><a href="#6-我也不知道归到哪一类的问题" class="headerlink" title="6. 我也不知道归到哪一类的问题"></a>6. 我也不知道归到哪一类的问题</h2><ul><li><p>js语法上虽说不用加分号，但实际应用中为避免压缩js文件时出现歧义，还是得老老实实加上分号</p></li><li><p>IIFE(Immediately Invoked Function Expression) Library use this to avoid polluting global environment</p></li><li><p>如果引用一个未声明的变量，js会直接创建一个（除非使用use strict）</p></li></ul><ol><li>交互事件的捕获，拦截，消费（冒泡）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加点击事件点击事件：</span></span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>)</span><br><span class="line">button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'you click this button'</span>);</span><br><span class="line">&#125;</span><br><span class="line">button.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body...</span></span><br><span class="line">&#125;</span><br><span class="line">button.onblur = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelEvent</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e) &#123;</span><br><span class="line">        e.stopPropagation();  <span class="comment">//非IE</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;  <span class="comment">//IE</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在一个元素上触发事件，如果此元素定义了处理程序，那么此次事件就会被捕获，根据程序进行该事件的处理。否则这个事件会根据DOM树向父节点逐级传播，如果从始至终都没有被处理，那么最终会到达document或window根元素。所以事件是往上传递的，即冒泡。</p><p>//事件注册的时机<br>对于简单的script，需要在body的最后一行，因为浏览器是从上到下解析的，轮到script解析的时候，需要操作dom，这就要求dom元素已经建立好。有时候，就算你把script写在body最后一行，轮到解析script的时候，前面的html还在加载（比如说非常大的html什么的，总之是有可能的）。所以一般用window.onLoad来注册事件。</p><p>复杂点的script放在外面，用src引用。 也要用window.onLoad来注册事件。所以，一般的js长这样（假如的你js要操作dom）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setUpEvents</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> button = ....</span><br><span class="line">  <span class="keyword">var</span> ....</span><br><span class="line">  button.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  button.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onLoad = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  setUpEvents()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><p>this的作用范围<br>代码<a href="https://cn.vuejs.org/v2/guide/computed.html">来源</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> watchExampleVM = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#watch-example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    question: <span class="string">''</span>,</span><br><span class="line">    answer: <span class="string">'I cannot give you an answer until you ask a question!'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 如果 `question` 发生改变，这个函数就会运行</span></span><br><span class="line">    question: <span class="function"><span class="keyword">function</span> (<span class="params">newQuestion</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.answer = <span class="string">'Waiting for you to stop typing...'</span></span><br><span class="line">      <span class="keyword">this</span>.getAnswer()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span><br><span class="line">    <span class="comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span><br><span class="line">    <span class="comment">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span><br><span class="line">    <span class="comment">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span><br><span class="line">    <span class="comment">// 请参考：https://lodash.com/docs#debounce</span></span><br><span class="line">    getAnswer: _.debounce(</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.question.indexOf(<span class="string">'?'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">          <span class="keyword">this</span>.answer = <span class="string">'Questions usually contain a question mark. ;-)'</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.answer = <span class="string">'Thinking...'</span></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">this</span> <span class="comment">//这里需要把this（VewComponent）作为一个变量</span></span><br><span class="line">        axios.get(<span class="string">'https://yesno.wtf/api'</span>)</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">            vm.answer = _.capitalize(response.data.answer)</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">            vm.answer = <span class="string">'Error! Could not reach the API. '</span> + error</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 这是我们为判定用户停止输入等待的毫秒数</span></span><br><span class="line">      <span class="number">500</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>js去刷新当前页面，返回上级页面。。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:history.go(-1)"</span>&gt;</span>返回上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:location.reload()"</span>&gt;</span>刷新当前页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:"</span> <span class="attr">onclick</span>=<span class="string">"history.go(-2); "</span>&gt;</span>返回前两页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:"</span> <span class="attr">onclick</span>=<span class="string">"self.location=document.referrer;"</span>&gt;</span>返回上一页并刷新<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:"</span> <span class="attr">onclick</span>=<span class="string">"history.back(); "</span>&gt;</span>返回上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>监听关闭窗口事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"Bye now!"</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string">[JavaScript使用哪一种编码？](http://www.ruanyifeng.com/blog/2014/12/unicode.html),不是utf-8</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[atom安装插件被墙问题](http://blog.csdn.net/qianghaohao/article/details/52331432)</span></span><br><span class="line"><span class="string">Atom推荐插件</span></span><br><span class="line"><span class="string">[atom-beautify](https://atom.io/packages/atom-beautify)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">===============================================================================================</span></span><br><span class="line"><span class="string">## 使用Atom的时候，按下ctrl+shift+i ，会发现原来atom编辑页面就特么是一个网页。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[javaScript自己的Utils](https://juejin.im/post/5a2a7a5051882535cd4abfce)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">12. MicroTask和MacroTask的执行顺序是：Stack -&gt; MacroTask -&gt; MicroTask [参考](https://juejin.im/entry/59e95b4c518825579d131fad)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">9. setTimeout是schedule一个task，setInterval是设定一个周期性执行的任务。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8. 可以检测是ES5还是ES6</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javaScript</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am outside!'</span>); &#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line"><span class="comment">// 重复声明一次函数f,ES5会输出'i am insider', ES6会输出'i am outsider'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'I am inside!'</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li><li><p>javaScript debug的方法：选中一个html 的tag，break on 。。。 自然会在执行到的时候停下来，evalulate value需要自己在console里面敲（注意此时应该位于Sources标签页下）。</p></li><li><p>json object有一个prototype属性，表面其所代表的类型。</p></li></ol><ol><li>js迭代一个数组的方法：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">  <span class="comment">// array[i]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>,len=array.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// array[i]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// item</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于列出对象所有的属性</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'test'</span>,</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    day: <span class="string">'sunday'</span>,</span><br><span class="line">    number: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj[key])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">for</span> (variable <span class="keyword">of</span> iterable) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">array.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>基本上就这些了<a href="https://juejin.im/post/5a3a59e7518825698e72376b">参考</a></p><h2 id="1-js跨域请求"><a href="#1-js跨域请求" class="headerlink" title="1. js跨域请求"></a>1. js跨域请求</h2><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">cors的概念</a></p><blockquote><p>search “原生javaScript跨域”、’jsonp跨域请求豆瓣250’</p></blockquote><p><a href="http://www.jianshu.com/p/1f32c9a96064">jsonp跨域获取豆瓣250接口</a>，豆瓣能支持jsonp是因为豆瓣服务器响应了</p><blockquote><p><a href="http://api.douban.com/v2/movie/top250?callback=anything这个query,这个anything是我们自己网页里面script里面定义的方法，豆瓣会返回一个">http://api.douban.com/v2/movie/top250?callback=anything这个query,这个anything是我们自己网页里面script里面定义的方法，豆瓣会返回一个</a>: anything({json})的数据回来，直接调用anything方法<br>json【JavaScript Object Notation】<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">MDN上的corz</a></p></blockquote><p>将网页设置为允许 XMLHttpRequest 跨域访问<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Access-Control-Allow-Origin"</span> <span class="attr">content</span>=<span class="string">"*"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Access-Control-Allow-Origin"</span> <span class="attr">content</span>=<span class="string">"http://www.1688hot.com:80"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="http://schock.net/articles/2013/02/05/how-jsonp-really-works-examples/">jsonp的解释</a></p><p>亲测，Flask里面给response添加Header:</p><blockquote><p> response.headers[‘Access-Control-Allow-Origin’] = ‘<a href="http://localhost:8080">http://localhost:8080</a>‘</p></blockquote><p>在8080端口的web页面发起请求就能成功</p><p>异常捕获(try catch也有)</p><p>javaScript操作cookie:</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://tonghuashuo.github.io/blog/jsonp.html">5 分钟彻底明白 JSONP</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vanilla JS其实就是原生javascript了。论运行速度，在Vanilla JS面前，所有的js library都要慢很多。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery04e31f5513d62958957b4caa1d944ae4.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="javaScript" scheme="https://haldir65.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式手册</title>
    <link href="https://haldir65.github.io/2017/09/10/2017-09-10-wielding-regular-expressions/"/>
    <id>https://haldir65.github.io/2017/09/10/2017-09-10-wielding-regular-expressions/</id>
    <published>2017-09-10T23:10:05.000Z</published>
    <updated>2018-01-23T03:37:30.911Z</updated>
    
    <content type="html"><![CDATA[<p>关于正则的一些收集</p><a id="more"></a><p><strong><em>We need more Pictures</em></strong></p><p>一般情况下不要乱用正则<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/bee-getting-the-pollen-wallpaper-538358eb5d5a3.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110067848.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100718415.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/fresh-sparkle-dew-drops-on-red-flower-wallpaper-53861cf580909.jpg?imageView2/2/w/600" alt=""></p><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/1513521515888.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/1513521557303.jpg?imageView2/2/w/600" alt=""></p><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/1513521623756.jpg?imageView2/2/w/600" alt=""></p><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/black-mountains.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/Carla Ossa in strapless gown.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/street lights dark night car city.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/water foot cold dark river.jpg?imageView2/2/w/600" alt=""></p><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/street lights dark night car city bw.jpg?imageView2/2/w/600" alt=""></p><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100729187.jpg?imageView2/2/w/600" alt=""></p><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110074347.jpg?imageView2/2/w/600" alt=""></p><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100746620.jpg?imageView2/2/w/600" alt=""><br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/sceneryd15ddf2ba4fb7b5f4e51dfa6cb74cb70.jpg?imageView2/2/w/600" alt=""></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.importnew.com/26560.html">DFA和NFA</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于正则的一些收集&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
</feed>
