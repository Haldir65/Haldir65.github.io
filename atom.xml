<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haldir的博客</title>
  <subtitle>Android狗，python学习中</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haldir65.github.io/"/>
  <updated>2016-10-13T07:44:51.771Z</updated>
  <id>http://haldir65.github.io/</id>
  
  <author>
    <name>Haldir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>主线程的工作原理</title>
    <link href="http://haldir65.github.io/2016/10/12/2016-10-12-How-the-mainThread-work/"/>
    <id>http://haldir65.github.io/2016/10/12/2016-10-12-How-the-mainThread-work/</id>
    <published>2016-10-12T08:47:42.000Z</published>
    <updated>2016-10-13T07:44:51.771Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/writing%20code%20that%20nobody%20else%20can%20read.jpg" alt=""></p>
<p>​    今天突然找到这样一个问题: “Handler的postDelayed会阻塞线程吗？”。基于自己之前对于Handler的线程间通讯机制的理解，还是不能给出明确的答案。正好打算把一篇关于主线程的工作原理的文章写出来，顺带看下能否把这个问题从源码的角度解释清楚。<a id="more"></a></p>
<h3 id="1-从线程（Thread）开始"><a href="#1-从线程（Thread）开始" class="headerlink" title="1. 从线程（Thread）开始"></a>1. 从线程（Thread）开始</h3><p>通常，一个Process会有一个主线程, 而在Android中，UI控件相关的方法和一些系统callback都会发生在主线程上(onResume,onCreate,onStartCommand,onDraw, etc)。 如果App中使用了多个Process，则每个Process都会有一个主线程，但这不是今天的重点。<br>Android应用是如何启动的?<br>启动一个应用时，系统会从Zygote Process fork出一个新的Process，最终走到ActivityThread 的main方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"><span class="comment">//省略部分无关代码</span></div><div class="line">       Looper.prepareMainLooper();</div><div class="line">       ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">       thread.attach(<span class="keyword">false</span>);</div><div class="line">       <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">           sMainThreadHandler = thread.getHandler();</div><div class="line">       &#125;</div><div class="line">       <span class="comment">// End of event ActivityThreadMain.</span></div><div class="line">       Looper.loop();</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);<span class="comment">//从这里可以猜到Looper.loop方法会一直执行下去</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>看一下Looper.prepareMainLooper()方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Initialize the current thread as a looper, marking it as an</div><div class="line"> * application's main looper. The main looper for your application</div><div class="line"> * is created by the Android environment, so you should never need</div><div class="line"> * to call this function yourself.  See also: &#123;<span class="doctag">@link</span> #prepare()&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</div><div class="line">        &#125;</div><div class="line">        sMainLooper = myLooper();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>大致意思就是为当前Thread添加一个Looper。<br>Looper.java是一个普通的class，其大致作用就是<strong>为当前Thread维持一个message loop</strong>，默认情况下一个Thread并没有一个Looper，要想添加一个，需要在该线程中调用Looper.prepare()，然后调用Looper.loop()方法即可让消息循环一直持续下去。大部分和message Loop的交互都是通过Handler这个类来进行的。例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">  *      <span class="keyword">public</span> Handler mHandler;</div><div class="line">  *</div><div class="line">  *      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">  *          Looper.prepare();</div><div class="line">  *</div><div class="line">  *          mHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">  *              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">  *                  <span class="comment">// 在这里处理消息</span></div><div class="line">  *              &#125;</div><div class="line">  *          &#125;;</div><div class="line">  *	</div><div class="line">  *          Looper.loop();</div><div class="line">    		<span class="comment">//这里面发送消息</span></div><div class="line">  *      &#125;</div><div class="line">  *  &#125;</div></pre></td></tr></table></figure></p>
<p>Looper持有一个MessageQueue(消息队列)成员变量，消息循环时，Looper就不断地从消息队列中拿出消息进行处理。<br>下面来看Looper.loop()方法里所做的事：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 删除了部分不相关的代码</span></div><div class="line">   * Run the message queue in this thread. Be sure to call</div><div class="line">   * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> Looper me = myLooper();<span class="comment">//返回当前线程中对应的Looper，看看下面的Exception就知道了</span></div><div class="line">      <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line">      <span class="keyword">for</span> (;;) &#123;</div><div class="line">          Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">          <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">              <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">              <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              msg.target.dispatchMessage(msg);</div><div class="line">          &#125; <span class="keyword">finally</span> &#123;</div><div class="line">             ....省略</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>简单解释一下，也就是从消息队列中取出新的消息(msg)。交给msg.target.dispatchMessage(msg)<br>这个trarget是个Handler<br>来看下Handler里面的dispatchMessage方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Handle system messages here.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">           handleCallback(msg);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                   <span class="keyword">return</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           handleMessage(msg);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>很明显是一个either or 的过程：<br>Message这个类里面有个Runnable callback，如果这个message有callback的话，就执行这个runnable，否则执行handler.callBack.handleMessage。也就是我们经常用的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Handler handler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div></pre></td></tr></table></figure></p>
<p>这种内部类的形式了<br>需要注意的是，Message最好不要用new，使用obtain方法获得，使用release方法释放，这里面有一个消息池的概念，我也不太理解。<br>MessageQueue中没有太多的公共方法，其中next()方法会返回</p>
<blockquote>
<p>message that should be processed. Will not return message that will be processed at future times.<br>Message有一个long类型的变量Message.when，指的是这条消息最早可以被执行的时间，这个时间是基于SystemClock.uptimeMills()的。所以如果消息队列中没有一条message到达自己的可执行时间, 这个next()方法就会一直block。值得注意的是SystemClock.uptimeMills是基于CPU活动时间的，如果cpu处于sleep状态，这个sleep时间是不算的。所以如果你postDelayed了10s，假设cpu5s后开始休眠，10s后醒来，睡眠的这段时间是不算的。所以真正执行的时间可能还会往后延迟。</p>
</blockquote>
<h3 id="2-Handler"><a href="#2-Handler" class="headerlink" title="2. Handler"></a>2. Handler</h3><p>Handler基本上就做两件事</p>
<ol>
<li>add message to the messageQueue of the Looper it’s associated with</li>
</ol>
<ul>
<li>post()  //把一条消息添加到所有可以被执行的消息的最后面，但在还没到时间的消息的前面</li>
<li>postDelayed()/postAtTime() //一个相对时间，一个绝对时间</li>
<li>postAtFrontOfQueue() // @piwai 插队行为，不要用</li>
</ul>
<ol>
<li>Handle message when this message doesn’t have callback<br>Handler的构造方法有7个,初始化时需要获得一个Looper<br>常用的Handler handler = new Handler() 会创建一个基于当前线程的Looper的Handler,如果当前线程没有调用Looper.Prepare，会抛出一个异常，这些在源代码里都能看到。<br>一些好用的构造函数<blockquote>
<p>Handler (Looper.getMainLooper()) //往主线程的Looper的消息队列里发消息<br>Hanlder(Looper.myLooper()) //往当前线程Looper的消息队列里添加消息</p>
</blockquote>
</li>
</ol>
<h3 id="Choreographer"><a href="#Choreographer" class="headerlink" title="Choreographer"></a>Choreographer</h3><p>使用Android studio时，经常会在Logcat里看到这样的 info:</p>
<blockquote>
<p>Skipped 60 frames! The application may be doing too much work on its main thread</p>
</blockquote>
<p>这段log出自Chreographer ，大意就是主线程上做的事太多或者做了太多不该在主线程上做的事。至于为什么不要在主线程上做太多的事，来看看主线程都有哪些工作:<br>System Events , Input Events ,Application callback ,Services, Alarm ,UI Drawing….另外，当屏幕内容发生变化，或者在Animation运行中，系统将会尝试每隔16ms来Draw a Frame。而这部分工作是由Choregrapher来完成的，而其内部是通过一个Handler来进行Frame更新的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">FrameHandler mHandler = <span class="keyword">new</span> FrameHandler(Looper.myLooper());</div><div class="line">Message msg = mHandler.obtainMessage(MSG_DO_FRAME);</div><div class="line">msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">mHandler.sendMessageAtTime(msg,nextFrameTime)</div><div class="line"></div><div class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FrameHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">FrameHandler</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(looper);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> MSG_DO_FRAME:</div><div class="line">                    doFrame(System.nanoTime(), <span class="number">0</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MSG_DO_SCHEDULE_VSYNC:</div><div class="line">                    doScheduleVsync();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> MSG_DO_SCHEDULE_CALLBACK:</div><div class="line">                    doScheduleCallback(msg.arg1);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>假设你在onMeasure,onLayout,onDraw这些方法中耽误主线程太多时间，Choregrapher将不能及时的更新Frame，哪怕你只耽误了1ms，系统也只能在16ms(大约)之后才能更新下一Frame。</p>
<h3 id="3-为了在开发中发现不应该在主线程中进行的操作-IO，网络-，可以使用StrictMode："><a href="#3-为了在开发中发现不应该在主线程中进行的操作-IO，网络-，可以使用StrictMode：" class="headerlink" title="3. 为了在开发中发现不应该在主线程中进行的操作(IO，网络)，可以使用StrictMode："></a>3. 为了在开发中发现不应该在主线程中进行的操作(IO，网络)，可以使用StrictMode：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</div><div class="line">            StrictMode.setThreadPolicy(<span class="keyword">new</span> StrictMode.ThreadPolicy.Builder()</div><div class="line">                    .detectDiskReads()</div><div class="line">                    .detectDiskWrites()</div><div class="line">                    .detectNetwork()   <span class="comment">// or .detectAll() for all detectable problems</span></div><div class="line">                    .penaltyLog()</div><div class="line">                    .build());</div><div class="line">            StrictMode.setVmPolicy(<span class="keyword">new</span> StrictMode.VmPolicy.Builder()</div><div class="line">                    .detectLeakedSqlLiteObjects()</div><div class="line">                    .detectLeakedClosableObjects()</div><div class="line">                    .penaltyLog()</div><div class="line">                    .penaltyDeath()</div><div class="line">                    .build());</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="4-Activity-LifeCycle-Events"><a href="#4-Activity-LifeCycle-Events" class="headerlink" title="4 .Activity LifeCycle Events"></a>4 .Activity LifeCycle Events</h3><ul>
<li>Activity LifeCycle Events(startActivity(), finishi()) go out of your process through Binder IPC to the ActivityManager //有时候startActivity启动的Activity不是自己Process的,比如调用系统相机这种</li>
<li>Then back on to your main queue in the form of lifeCycle callbacks(onCreate(),onDestory() et_al) // 异步，异步！</li>
</ul>
<p>最后回到文章开头的那个问题：Handler.postDelay会阻塞线程吗？<br>答案在<a href="http://www.dss886.com/android/2016/08/17/17-18" target="_blank" rel="external">这里</a>找到了<br>postDelayed本身就是把一条消息推迟到相对时间多久之后。关键在Looper取出这条消息时，用的是</p>
<blockquote>
<p>Message msg = queue.next();  // might block</p>
</blockquote>
<p>注释已经暗示了可能会阻塞，看下next方法做了什么:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">   <span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">   .....省略</div><div class="line">       <span class="keyword">for</span> (;;) &#123;</div><div class="line">           <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</div><div class="line">               Binder.flushPendingCommands();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class="line"></div><div class="line">           <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">               <span class="comment">// Try to retrieve the next message.  Return if found.</span></div><div class="line">               <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">               Message prevMsg = <span class="keyword">null</span>;</div><div class="line">               Message msg = mMessages;</div><div class="line">               <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class="line">                   do &#123;</div><div class="line">                       prevMsg = msg;</div><div class="line">                       msg = msg.next;</div><div class="line">                   &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="keyword">if</span> (now &lt; msg.when) &#123;</div><div class="line">                       <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class="line">                       nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                   &#125; <span class="keyword">else</span> &#123;</div><div class="line">                       <span class="comment">// Got a message.</span></div><div class="line">                       mBlocked = <span class="keyword">false</span>;</div><div class="line">                       <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</div><div class="line">                           prevMsg.next = msg.next;</div><div class="line">                       &#125; <span class="keyword">else</span> &#123;</div><div class="line">                           mMessages = msg.next;</div><div class="line">                       &#125;</div><div class="line">                       msg.next = <span class="keyword">null</span>;</div><div class="line">                       msg.markInUse();</div><div class="line">                       <span class="keyword">return</span> msg;</div><div class="line">                   &#125;</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="comment">// No more messages.</span></div><div class="line">                   nextPollTimeoutMillis = -<span class="number">1</span>;</div><div class="line">               &#125;</div><div class="line">....省略部分</div></pre></td></tr></table></figure></p>
<p>首先进来 调用了nativePollOnce(ptr,nextPollTimeoutMillis);<br>这是个native方法，类似于线程的wait方法，不过使用了Native的方法会更加精准。可以认为是用native方法让这个queue.next的方法耗时延长了，所以return时返回的Message也就满足合适的时间。<br>往下看</p>
<blockquote>
<p> // Next message is not ready.  Set a timeout to wake up when it is ready.<br> nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);</p>
</blockquote>
<p>所以确实是blocked了。但这并不意味着从postDelayed(r,10)开始，接下来的10ms就真的完全堵塞了(queue.next阻塞)<br>PostDelayed最终会调用到enqueMessage方法，看一下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">        IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</div><div class="line">                msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</div><div class="line">        Log.w(TAG, e.getMessage(), e);</div><div class="line">        msg.recycle();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    msg.markInUse();</div><div class="line">    msg.when = when;</div><div class="line">    Message p = mMessages;</div><div class="line">    <span class="keyword">boolean</span> needWake;</div><div class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">        <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">        msg.next = p;</div><div class="line">        mMessages = msg;</div><div class="line">        needWake = mBlocked;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class="line">        <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">        <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line">        needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">        Message prev;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            prev = p;</div><div class="line">            p = p.next;</div><div class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                needWake = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">        prev.next = msg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">    <span class="keyword">if</span> (needWake) &#123;</div><div class="line">        nativeWake(mPtr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意nativeWake方法，在满足一定情况下会唤醒线程<br>总结一下就是postDelayed确实调用了阻塞线程的方法，但一旦消息队列前面插入了可执行的message，会调用唤醒线程的方法。这些大部分在MessageQueue这个class中，看一下基本都能明白。</p>
<h4 id="回顾一下整个过程"><a href="#回顾一下整个过程" class="headerlink" title="回顾一下整个过程:"></a>回顾一下整个过程:</h4><p>主线程作为一个Thread，持有一个Looper对象，Looper持有一个MessageQueue的消息队列，并一个一个地从中取出满足执行时间条件的Message，执行Messgae的callback或者交给Handler的handleMessage去处理。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="http://www.dss886.com/android/2016/08/17/17-18" target="_blank" rel="external">Handler.postDelayed()是如何精确延迟指定时间的</a></li>
<li><a href="https://www.youtube.com/watch?v=aFGbv9Ih9qQ" target="_blank" rel="external">How the Main Thread works</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/writing%20code%20that%20nobody%20else%20can%20read.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;​    今天突然找到这样一个问题: “Handler的postDelayed会阻塞线程吗？”。基于自己之前对于Handler的线程间通讯机制的理解，还是不能给出明确的答案。正好打算把一篇关于主线程的工作原理的文章写出来，顺带看下能否把这个问题从源码的角度解释清楚。
    
    </summary>
    
      <category term="Android" scheme="http://haldir65.github.io/categories/Android/"/>
    
    
      <category term="Handler Message" scheme="http://haldir65.github.io/tags/Handler-Message/"/>
    
  </entry>
  
  <entry>
    <title>Theme和Style的区别</title>
    <link href="http://haldir65.github.io/2016/10/10/theme-versus-style/"/>
    <id>http://haldir65.github.io/2016/10/10/theme-versus-style/</id>
    <published>2016-10-10T11:35:32.000Z</published>
    <updated>2016-10-10T19:51:17.483Z</updated>
    
    <content type="html"><![CDATA[<p>认识Theme和Styles</p>
<p>重新看一遍Using Themes and styles without going crazy，大部分属于直接翻译</p>
<h4 id="1-Styles"><a href="#1-Styles" class="headerlink" title="1. Styles"></a>1. Styles</h4><h5 id="1-1-首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来"><a href="#1-1-首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来" class="headerlink" title="1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来"></a>1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">android:background</span>= <span class="string">"#ff0000"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>变成</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>= <span class="string">"@Style/MyStyle"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">name</span> = <span class="string">"MyStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span> = <span class="string">"android:background"</span>&gt;</span>#ff0000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种形式，对于大量的具有相同属性的且具有<em>共性</em>的View，可以直接使用对应的Style，这能够让layout文件更加整洁。前提是确信layout文件中使用的View具有相同的属性。</p>
<a id="more"></a>
<h5 id="1-2-Style-Inheritance"><a href="#1-2-Style-Inheritance" class="headerlink" title="1.2 Style Inheritance"></a>1.2 Style Inheritance</h5><p>Style可以继承，两种方式：</p>
<p>假设有parent style ，一种在name中使用前缀的方式指明parent，另一种在后面显式的声明parent</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span> = <span class="string">"Parent"</span>/&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure>
<p>Explicit child</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span> = <span class="string">"Child"</span> <span class="attr">parent</span> = <span class="string">"Parent"</span>&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure>
<p>  Implicit Child</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span> = <span class="string">"Parent.Child"</span>/&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure>
<p>同时使用两种方式时，默认使用Explicit Parent  </p>
<p>为避免混淆，推荐使用Explicit Child且Child name不带前缀  </p>
<p>View不能拥有两个Style,除了TextView及其子类，例如</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span>&gt;</span></div><div class="line">  android:textColor = "#ffffff"</div><div class="line">truestyle="@style/SomeStyle"</div><div class="line">  android:textAppearance = "@style/MyText"</div><div class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如上所示，TextView中可以定义TextAppearance，后者包含了常见的textColor，textSize等attributes，而在一个View中可以同时定义两个Style。如果出现冲突，styles之间相同attributes的应用优先级为：</p>
<blockquote>
<p>android:textColor &gt;&gt; SomeStyle中的android:textColor&gt;&gt;MyText中的android:textColor</p>
<p>使用TextAppearance 时一定要有一个parent</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span> = <span class="string">"MyText"</span> <span class="attr">parent</span>=<span class="string">"TextAppearance.Appcompat"</span>&gt;</span><span class="xml"></span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span> = <span class="string">"android:TextColor"</span>&gt;</span>#F08<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>因为使用style时，系统将把style中定义的attribute和当前View的默认attribute融合起来，而TextView默认attribute 中什么也没有，造成textSize = 0的情况，所以务必选择parent，在parent style已经定义好大多数属性的情况下再去修改小部分属性将简单得多。TextAppearance可以在Theme中定义，也可以写在单一的TextView上。</p>
<ul>
<li><p>####2. Themes<br>在Android中，Theme名字以”Theme.”开头，查看源码会发现只是定义了一大堆color attributes 和Window attributes。Themes比Styles的作用范围更广，themes可以在Application,Activity层面管理Widget外观，Theme还可以实现夜间模式切换</p>
<p>来看如何定义一个Theme</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span> = <span class="string">"Theme"</span>&gt;</span><span class="xml"></span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span> = <span class="string">android:statusBarColor</span>&gt;</span>#ff0000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>回头看一下Style</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">name</span> = <span class="string">"Style"</span>&gt;</span><span class="xml"></span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span> = <span class="string">"android:background"</span>&gt;</span>#ff0000<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>语法看起来完全一样。</p>
<p>区别：styles中的属性被直接送到View的构造函数中，记得在自定义View时写的那些attrs吗，其实就是两个参数的构造函数中的AttributeSets</p>
<p>Theme应用范围更广，定义的属性和Style也不尽相同。</p>
<p>两者之间有一些联系：例如Theme中可以定义default widget style，Style可以引用Theme中定义的属性(?attr:selectableItemBackground还记得吗)<br>上面提到了Theme中可以定义default widget style，具体做法无非就是这样:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>= <span class="string">"MyTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light"</span>&gt;</span><span class="xml"></span></div><div class="line">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:editTextStyle"</span>&gt;</span>@style/MyEditTextStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所以，只要在AppTheme中点进去，找一下这个键对应的值就可以了</p>
</li>
</ul>
<p>  2.1 使用Theme</p>
<p>  两种方式:</p>
<p>  1.在Manifest中，例如</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">  <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat"</span> /&gt;</div><div class="line"></div><div class="line">或者</div><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">  <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat.Light"</span>        /&gt;</div></pre></td></tr></table></figure>
<p>  activty中Theme override Application的Theme</p>
<ol>
<li><p>应用于View</p>
<p>Lollipop开始引入View Theming的概念</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Toolbar</span></span></div><div class="line">   <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">   <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompa.Light"</span>/&gt;</div></pre></td></tr></table></figure>
<p>  应用在View上的Theme将能够作用在该View及其所有的Children，这样做的好处在于没有必要专门为了一个View而去选择其他的Theme。</p>
<p>  例如在Holo中有Holo.Light.DarkActionBar，为了专门适配ActionBar需要一个专门的Theme。目前看来主要应用在Toolbar上。</p>
<h3 id="3-墙裂推荐使用AppCompat"><a href="#3-墙裂推荐使用AppCompat" class="headerlink" title="3 .墙裂推荐使用AppCompat"></a>3 .墙裂推荐使用AppCompat</h3><p>  好处: </p>
<ul>
<li>Material on all devices ,记得以前听说AppCompat在21以上继承自Theme.Material。</li>
<li><p>Baseline themes/styles AppCompat 预设了一系列样式标准，只需要继承AppCompat，改动一小部分样式就能完成设计</p>
<ul>
<li>Enable View theming pre-Lollipop </li>
<li>使用ColorPrimary , ColorAccent等attributes(backPorted by AppCompat)设置Widget样式</li>
<li>在Theme中可以定义默认的Widget样式，例如<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span> = <span class="string">"Theme.AppCompat"</span>&gt;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:spinnerItemStyle"</span>&gt;</span>@sytle/MySpinnerStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>还可以更改默认样式：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span> = <span class="string">"AttrTheme"</span> <span class="attr">parent</span> =<span class="string">"Theme.AppCompat"</span>&gt;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span> =<span class="string">"selectableItemBackground"</span>&gt;</span>@drawable/bg<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">使用时</div><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:background</span>=<span class="string">?attr/selectableItemBackground</span>"/&gt;</span></div></pre></td></tr></table></figure>
<p>这样就可以自定义点击时的Drawable了。</p>
<ul>
<li>支持android:theme: API 7+(只应用于该View)，API 11+(View及其子View) </li>
</ul>
<p>View theming原本只是API 21才引入的概念，AppCompat实现了向前兼容</p>
<h3 id="4-attr的问题"><a href="#4-attr的问题" class="headerlink" title="4 .  ?attr的问题"></a>4 .  ?attr的问题</h3><blockquote>
<p>?android:attr/selectableItemBackground</p>
</blockquote>
<p>一个个来解释：</p>
<p>?  :  we’re doing a theme lookup</p>
<p>android:  we’re looking up something within the android namespace</p>
<p>attr/  : we’re looking for an attribute(可省略)</p>
<p>selectableItemBackground: The name of the atribute we’re looking up</p>
<p>把attr/省略掉后变成</p>
<blockquote>
<p>?android:selectableItemBackground</p>
</blockquote>
<p>效果完全一样</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span> = <span class="string">"android:colorPrimary"</span>&gt;</span>@color/red<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>问题在于android:ColorPromary是Lollipop才引入的，解决方案</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">syle</span> <span class="attr">name</span> = <span class="string">"MyTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat"</span>&gt;</span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span> = <span class="string">"colorPrimary"</span>&gt;</span>@color/red<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">syle</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意这里没有android: 前缀，AppCompat针对API21之前的版本定义了自己的一套资源。</p>
<p>再举个例子</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">在values/attrs.xml中</div><div class="line"><span class="tag">&lt;<span class="name">attr</span> <span class="attr">name:</span>"<span class="attr">myAttribute</span>" <span class="attr">format</span>=<span class="string">"dimension"</span>/&gt;</span></div><div class="line"></div><div class="line">在values/themes.xml中</div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span> = <span class="string">"MyTheme"</span> <span class="attr">parent</span> = <span class="string">"Theme.AppCompat"</span>&gt;</span><span class="xml"></span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"myAttribute"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  这就是实际使用的Theme</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">在values/styles.xml中</div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:padding"</span>&gt;</span>?attr/myAttribute<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">实际操作中</div><div class="line">在layout文件中，通过将一个长度，颜色定义为?attr的方式，就会去当前的Theme中寻找相对应的attribute，这就是黑夜模式切换的原理</div></pre></td></tr></table></figure>
<p>要注意的是，所有非android nameSpace的attribute Name都是global的，所以如果两个library定义了相同的attribute Name，将无法编译通过。</p>
<p>Style可以通过?attr的方式引用Theme中的资源</p>
<h3 id="5-获取Theme"><a href="#5-获取Theme" class="headerlink" title="5 .获取Theme"></a>5 .获取Theme</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">context.getTheme().resolveAttribute(R.attr.dialogTheme,outValue,<span class="keyword">true</span>)</div><div class="line">  </div><div class="line">在View中</div><div class="line">  TypedArray a = context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.ImageView,defStyleAttr,defStyleRes)</div><div class="line">  </div><div class="line"><span class="keyword">int</span> alpha = a.getInt(</div><div class="line">  com.android.internal.R.styleable.ImageView_drawableAlpha,<span class="number">255</span>)</div></pre></td></tr></table></figure>
<p>Activity有一个setTheme(int themeResId)方法，注意，这个方法并不是取代原先的Theme,只是在原有的Theme上apply了。所以这个命名不算太好。Activity内部会在onCreate()前调用setTheme(你写在manifest里面的Theme)</p>
<h3 id="6-v21的问题"><a href="#6-v21的问题" class="headerlink" title="6. v21的问题"></a>6. v21的问题</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">在values/styles.xml中</div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BaseToolbar"</span>/&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">在values-v21/styles.xml中</div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>= <span class="string">"BaseToolbar"</span>&gt;</span><span class="xml"></span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span> = <span class="string">"android:elevation"</span>&gt;</span>4dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">elevation是21以上api才有的属性，lint会提示问题</div><div class="line">这样，在values/styles.xml中</div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span> = <span class="string">"Toolbar"</span> <span class="attr">parent</span> = <span class="string">"BaseToolbar"</span>/&gt;</span><span class="undefined"></span></div><div class="line">lint就不会飙黄了，直接引用Toolbar即可</div></pre></td></tr></table></figure>
<p>通过这种继承的方式能够在自己的Theme中使用统一的theme，针对不同的运行时版本确定最终运行的Theme。</p>
<h3 id="7-ThemeOverlay"><a href="#7-ThemeOverlay" class="headerlink" title="7 . ThemeOverlay"></a>7 . ThemeOverlay</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ThemeOverlay.Material.Light</div><div class="line">ThemeOverlay.Material.Dark</div><div class="line"><span class="comment">//etc ...</span></div></pre></td></tr></table></figure>
<p>用于添加到现有的Theme上，例如Theme.Material.Light只包含color relevant to a light Theme，不会改变原有Theme的window Attributes。查看源码，只是完整的Theme中的一小部分attribute。</p>
<h3 id="8-常见错误"><a href="#8-常见错误" class="headerlink" title="8. 常见错误"></a>8. 常见错误</h3><ol>
<li>作为Theme中引用的style必须要有一个parent</li>
</ol>
<p>例如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">在AppTheme中</div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span> = <span class="string">"android:editTextStyle"</span>&gt;</span>@style/MyEditTextStyle<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>= <span class="string">"MyEditTextStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>= <span class="string">"android:fontFamily"</span>&gt;</span></div><div class="line">  sans-serif-medium</div><div class="line">  <span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样做的结果将是所有的EditText都会失去基本的属性</p>
<ol>
<li>defStyleAttr vs defStyleRes</li>
</ol>
<p>常见于 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ObtainStyledAttributes(AttributeSet set,<span class="keyword">int</span> []attrs,</div><div class="line"> <span class="keyword">int</span> defStyleAttr,<span class="keyword">int</span> defStyleRes)</div></pre></td></tr></table></figure>
<p>直接解释：</p>
<blockquote>
<p> defStyleAttr: The attr in your theme which points to the default style</p>
<p> eg: R.attr.editTextStyle</p>
<p> defStyleRes: The resource ID of the default style</p>
<p> eg:R.style.Widget_Material_EditText</p>
</blockquote>
<p>ObtainStyledAttributes查找Value时读取的顺序如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. Value in the AttributeSet</div><div class="line"><span class="number">2</span>. Value in the explicit style</div><div class="line"><span class="number">3</span>. Default style specified in defStyleRes</div><div class="line"><span class="number">4</span>. Default style specified in defStyleAttr</div><div class="line"><span class="number">5</span>. Base value in <span class="keyword">this</span> theme</div></pre></td></tr></table></figure>
<p>注意最后一条，万一在Manifest中出现这种东西</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Style</span> <span class="attr">name</span> = <span class="string">"AppTheme"</span> <span class="attr">parent</span> = <span class="string">"Theme.AppCompat"</span>&gt;</span><span class="xml"></span></div><div class="line">true<span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span> = <span class="string">"android:background"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这意味着</p>
<blockquote>
<p>Any View which doesn’t have a background set ,will use the theme’s value ,  SHIT!</p>
</blockquote>
<h3 id="9-最后，一点好玩的"><a href="#9-最后，一点好玩的" class="headerlink" title="9. 最后，一点好玩的"></a>9. 最后，一点好玩的</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Context themedContext = </div><div class="line">  <span class="keyword">new</span> ContextThemeWrapper(baseContext,R.style.MyTheme);</div><div class="line"></div><div class="line">View view = LayoutInflator.form(themedContext)</div><div class="line">  		.inflate(R.layout.some_layout,<span class="keyword">null</span>);</div><div class="line"><span class="comment">//或者</span></div><div class="line">View view = <span class="keyword">new</span> View(themedContext);</div><div class="line"><span class="comment">//生成的View就会带有MyTheme中的属性，动态设置。</span></div></pre></td></tr></table></figure>
<p>而这也是AppComPat对于API 21以下版本进行兼容的原理<br>翻了一下文档：<br>ContextThemeWrapper : Added in API level 1</p>
<p>这一点AppCompat的作者也在2014年的一篇 <a href="https://chris.banes.me/2014/11/12/theme-vs-style/" target="_blank" rel="external">博客</a>中提到了。</p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><a href="https://www.youtube.com/watch?v=Jr8hJdVGHAk" target="_blank" rel="external">Daniel Lew</a></li>
<li><a href="http://blog.danlew.net/2016/07/19/a-deep-dive-into-android-view-constructors/" target="_blank" rel="external">View Constructor</a></li>
<li><a href="https://www.youtube.com/watch?v=TIHXGwRTMWI" target="_blank" rel="external">IO 2016</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;认识Theme和Styles&lt;/p&gt;
&lt;p&gt;重新看一遍Using Themes and styles without going crazy，大部分属于直接翻译&lt;/p&gt;
&lt;h4 id=&quot;1-Styles&quot;&gt;&lt;a href=&quot;#1-Styles&quot; class=&quot;headerlink&quot; title=&quot;1. Styles&quot;&gt;&lt;/a&gt;1. Styles&lt;/h4&gt;&lt;h5 id=&quot;1-1-首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来&quot;&gt;&lt;a href=&quot;#1-1-首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来&quot; class=&quot;headerlink&quot; title=&quot;1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来&quot;&gt;&lt;/a&gt;1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来&lt;/h5&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:background&lt;/span&gt;= &lt;span class=&quot;string&quot;&gt;&quot;#ff0000&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;变成&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;= &lt;span class=&quot;string&quot;&gt;&quot;@Style/MyStyle&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;MyStyle&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;true&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;android:background&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;#ff0000&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;Style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种形式，对于大量的具有相同属性的且具有&lt;em&gt;共性&lt;/em&gt;的View，可以直接使用对应的Style，这能够让layout文件更加整洁。前提是确信layout文件中使用的View具有相同的属性。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>android 7.0一些新特性介绍</title>
    <link href="http://haldir65.github.io/2016/10/08/android-7-0-new-features/"/>
    <id>http://haldir65.github.io/2016/10/08/android-7-0-new-features/</id>
    <published>2016-10-07T19:02:26.000Z</published>
    <updated>2016-10-07T19:31:31.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BackGround-Optimization"><a href="#BackGround-Optimization" class="headerlink" title="BackGround Optimization"></a>BackGround Optimization</h2><p><del>CONNECTIVITY_CHANGE</del>(很多应用喜欢在Manifest里注册这个BroadCasetReceiver，导致网络变化时，一大堆应用都被唤醒，而ram中无法同时存在这么多process，系统不得不kill old process，由此导致memory thrashing)</p>
<p>同时被移除的还有<del>NEW_PICTURE</del>,<del>NEW_VIDEO</del>.</p>
<p>具体来说: 对于<strong>targeting N</strong>的应用，在manifest文件中声明 static broadcastReceiver，监听<del>CONNECTIVITY_CHANGE</del>将不会唤醒应用。如果应用正在运行，使用context.registerReceiver，将仍能够接受到broadcast。但不会被唤醒。</p>
<p>解决方案: 使用JobScheduler或firebase jobDispatcher。</p>
<p>对于<del>NEW_PICTURE</del>,<del>NEW_VIDEO</del>.</p>
<p>所有在7.0 Nuget以上设备运行的应用(无论是否 target N) 都不会收到这些broadcast。简单来说，fully deprecated  !!!</p>
<p>解决方案：使用JobScheduler(可以监听contentProvider change)</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://developer.android.com/topic/performance/background-optimization.html?utm_campaign=adp_series__100616&amp;utm_source=anddev&amp;utm_medium=yt-desc" target="_blank" rel="external">Docs</a></li>
<li><a href="https://www.youtube.com/watch?v=vBjTXKpaFj8" target="_blank" rel="external">youtube</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BackGround-Optimization&quot;&gt;&lt;a href=&quot;#BackGround-Optimization&quot; class=&quot;headerlink&quot; title=&quot;BackGround Optimization&quot;&gt;&lt;/a&gt;BackGround Optimi
    
    </summary>
    
    
      <category term="android 7" scheme="http://haldir65.github.io/tags/android-7/"/>
    
  </entry>
  
  <entry>
    <title>安卓事件分发流程</title>
    <link href="http://haldir65.github.io/2016/10/06/touch-event-distribution/"/>
    <id>http://haldir65.github.io/2016/10/06/touch-event-distribution/</id>
    <published>2016-10-06T15:32:30.000Z</published>
    <updated>2016-10-12T14:16:22.197Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/dispatch_touch_event_video.JPG" alt=""></p>
<p>图1 默认情况下事件传递的路径 </p>
<blockquote>
<p>Touch事件始于ACTION_DOWN, 终止于ACTION_UP, 这其中可能会伴随着ACTION_MOVE,ACTION_CANCEL等等。<br><a id="more"></a></p>
</blockquote>
<ul>
<li>首先来关注ACTION_DOWN，用户触摸屏幕，MotionEvent开始传递：</li>
</ul>
<blockquote>
<ol>
<li><p>Activity.dispatchTouchEvent</p>
</li>
<li><p>ViewGroup.dispatchTouchEvent</p>
</li>
<li><p>ViewGroup.onInterceptTouchEvent</p>
<p>…..中间省略n个视图层级 ….&gt;&gt;&gt;</p>
</li>
<li><p>View.dispatchTouchEvent</p>
</li>
<li><p>View.onTouchEvent</p>
</li>
</ol>
<p>​      ….中间省略n个视图层级….&gt;&gt;&gt;</p>
<ol>
<li>ViewGroup.onTouchEvent</li>
<li>Activity.onTouchEvent</li>
</ol>
</blockquote>
<p>这也就是本文最开始的图1内描述的内容，注意，在默认情况下(各个函数都返回super的情况下)才能将这个从上到下，再从下到上的循环走完整。这里讨论的还只是ACTION_DOWN。</p>
<ul>
<li><p>接下来看ACTION_DOWN下发过程中各个函数返回值对于整个传递链走向的影响，我们在override这些函数的时候，返回值无非三种：</p>
<blockquote>
<p>true , false ,super</p>
</blockquote>
<ul>
<li>return true：ACTION_DOWN事件分发到此结束(消费掉)，这里有一个要注意的是onInterceptTouchEvent,返回true表示该ViewGroup打算将事件拦截下来，底层View将接收到一个ACTION_CANCEL，事件传递给该ViewGroup的onTouchEvent</li>
<li>return false: 对于dispatchTouchEvent，返回false表明不再向下分发，ACTION_DOWN发送到上一层ViewGroup(Activity)的OnTouchEvent；对于onInterceptTouchEvent,返回false表明该ViewGroup不打算拦截，继续下发，对于onTouchEvent，返回false，事件继续上传至上一层级ViewGroup的OnTouchEvent 。</li>
<li>return super : 完成整个传递链，就像图1中展示的一样。</li>
</ul>
</li>
</ul>
<p><img src="http://odzl05jxx.bkt.clouddn.com/touch_event_1.png" alt=""></p>
<p>图2 来自<a href="http://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">图解安卓事件分发机制</a>  完美地解释了事件分发各个流程中返回值对于事件传递的影响。</p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/touch_event_2.png" alt=""></p>
<p>图3 来自<a href="http://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">图解安卓事件分发机制</a> </p>
<p>接下来看ACTION_DOWN时返回值对于后续ACTION_MOVE,ACTION_UP等传递路径的影响：</p>
<p>首先介绍概念：</p>
<blockquote>
<p>gesture = ACTION_DOWN+ a bounch of ACTIONS +ACTION_UP</p>
</blockquote>
<p>一个gesture(手势)即从手指按下到手指离开这段过程中所有的事件的集合,swipe,click,fling等等</p>
<p>ACTION_DWON发生时，android将会在当前touch区域所有的View中确定一个Touch Target,后者将接管此次gesture中的所有ACTION_MOVE,ACTION_UP。（这样做有两点好处：1.一旦确定了Touch Target，系统将会把所有的后续事件全部传递到这个target为止，这就避免了复杂的view traversing，有助于提升性能; 2：传递链中第一个能够成为Touch Target的View将独立处理后续事件，不需要考虑其他View受到影响）。在在一个gesture开始时，OnTouchEvent（ACTION_DOWN）返回true,就意味着成为TouchTarget。借用简书<a href="http://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">作者</a>的总结:</p>
<blockquote>
<p>ACTION_DOWN事件在哪个控件消费了（return true），  那么ACTION_MOVE和ACTION_UP就会从上往下（通过dispatchTouchEvent）做事件分发往下传，就只会传到这个控件，不会继续往下传，如果ACTION_DOWN事件是在dispatchTouchEvent消费，那么事件到此为止停止传递，如果ACTION_DOWN事件是在onTouchEvent消费的，那么会把ACTION_MOVE或ACTION_UP事件传给该控件的onTouchEvent处理并结束传递。</p>
</blockquote>
<p>这里可以看到，事件依旧是从上往下一直分发到TouchTarget这一层，只是在TouchTarget这一层被消费了，<strong><em>且不再往上传递</em></strong>(有助于性能提升)。父ViewGroup的dispatchTouchEvent和onInterceptTouchEvent依旧会先于TouchTarget接收到ACTION_MOVE等事件。所以此时如果父ViewGroup在onInterceptTouchEvent中返回true，父ViewGroup将取代原有的子View成为新的ViewTarget,后续事件(ACTION_MOVE等)将传递到该父ViewGroup中，而子View将收到ACTION_CANCEL(可以在这里做一些恢复状态的工作，比如从foucused变成unfocused)。举一个例子：在ScrollView(不是Android自带的那个)中放一个Button，ACTION_DOWN时，BUTTON表示可以处理ACTION_DOWN,因为这可能会是一次click，于是Button就成了TouchTarget，后续事件将不会传递到ScrollView中，ScrollView也就无法滑动。为解决这个问题，在ScrollView的onInterceptTouchEvent中，如果看到ACTION_DWON，返回false(点击事件对于滑动毫无意义)，但如果看到ACTION_MOVE(滑动事件),返回true并成为新的TouchTarget。注意是在OnInterceptTouchEvent中拦截而不是dispatchTouchEvent中拦截，后者会将事件传递到上层ViewGroup的onTouchEvent中。想想看，不去dispatch了、、、android这种Api起名还是可以的。</p>
<h3 id="onClick事件"><a href="#onClick事件" class="headerlink" title="#onClick事件"></a>#onClick事件</h3><p>接下来看onClick和onLongClick，onTouchListener这类事件何时触发</p>
<p>首先是View的dispatchTouchEvent源码部分</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                    <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</div><div class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</div><div class="line">                        <span class="comment">// take focus if we don't have it already and we should in</span></div><div class="line">                        <span class="comment">// touch mode.</span></div><div class="line">                        <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class="line">                            focusTaken = requestFocus();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                            <span class="comment">// The button is being released before we actually</span></div><div class="line">                            <span class="comment">// showed it as pressed.  Make it show the pressed</span></div><div class="line">                            <span class="comment">// state now (before scheduling the click) to ensure</span></div><div class="line">                            <span class="comment">// the user sees it.</span></div><div class="line">                            setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class="line">                            <span class="comment">// This is a tap, so remove the longpress check</span></div><div class="line">                            removeLongPressCallback();</div><div class="line"></div><div class="line">                            <span class="comment">// Only perform take click actions if we were in the pressed state</span></div><div class="line">                            <span class="keyword">if</span> (!focusTaken) &#123;</div><div class="line">                                <span class="comment">// Use a Runnable and post this rather than calling</span></div><div class="line">                                <span class="comment">// performClick directly. This lets other visual state</span></div><div class="line">                                <span class="comment">// of the view update before click actions start.</span></div><div class="line">                                <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</div><div class="line">                                    mPerformClick = <span class="keyword">new</span> PerformClick();</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                                    performClick();</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (mUnsetPressedState == <span class="keyword">null</span>) &#123;</div><div class="line">                            mUnsetPressedState = <span class="keyword">new</span> UnsetPressedState();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                            postDelayed(mUnsetPressedState,</div><div class="line">                                    ViewConfiguration.getPressedStateDuration());</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</div><div class="line">                            <span class="comment">// If the post failed, unpress right now</span></div><div class="line">                            mUnsetPressedState.run();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        removeTapCallback();</div><div class="line">                    &#125;</div><div class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>所以onClick事件是在ACTION_UP中执行的</p>
<p>而LongClick事件要看ACTION_DOWN了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                  mHasPerformedLongPress = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">                  <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">                  &#125;</div><div class="line"></div><div class="line">                  <span class="comment">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></div><div class="line">                  <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</div><div class="line"></div><div class="line">                  <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></div><div class="line">                  <span class="comment">// a short period in case this is a scroll.</span></div><div class="line">                  <span class="keyword">if</span> (isInScrollingContainer) &#123;</div><div class="line">                      mPrivateFlags |= PFLAG_PREPRESSED;</div><div class="line">                      <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</div><div class="line">                          mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</div><div class="line">                      &#125;</div><div class="line">                      mPendingCheckForTap.x = event.getX();</div><div class="line">                      mPendingCheckForTap.y = event.getY();</div><div class="line">                      postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class="line">                  &#125; <span class="keyword">else</span> &#123;</div><div class="line">                      <span class="comment">// Not inside a scrolling container, so show the feedback right away</span></div><div class="line">                      setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                      checkForLongClick(<span class="number">0</span>, x, y);</div><div class="line">                  &#125;</div><div class="line">                  <span class="keyword">break</span>;</div></pre></td></tr></table></figure>
<p>关键看checkForLongClick, 不贴代码了，结论是：在ACTION_DOWN事件被捕捉后，系统会开始触发一个postDelayed操作，delay的时间为</p>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; ViewConfiguration.getLongPressTimeout() - delayOffset</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>（这个值在Eclair2.1上为500ms），500ms后会触发CheckForLongPress线程的执行：</p>
<p>想想看，LongClick事件是在DOWN时开始计时，500ms假设，OnClick是在UP是发生，所以完全有可能同时发生OnClick和OnLongClick。这里看到当onLongClick的返回值为true时， <em>mHasPerformedLongPress</em> = true ,仔细看ACTION_UP中，如果HasPerformLongPress==true，就不会走到onClick事件里。所以在onLongClickListener里需要返回一个boolean值的原因就这么简单。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class="line">                           <span class="comment">// This is a tap, so remove the longpress check</span></div><div class="line">                           removeLongPressCallback();</div><div class="line"></div><div class="line">                           <span class="comment">// Only perform take click actions if we were in the pressed state</span></div><div class="line">                           <span class="keyword">if</span> (!focusTaken) &#123;</div><div class="line">                               <span class="comment">// Use a Runnable and post this rather than calling</span></div><div class="line">                               <span class="comment">// performClick directly. This lets other visual state</span></div><div class="line">                               <span class="comment">// of the view update before click actions start.</span></div><div class="line">                               <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</div><div class="line">                                   mPerformClick = <span class="keyword">new</span> PerformClick();</div><div class="line">                               &#125;</div><div class="line">                               <span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                                   performClick();</div><div class="line">                               &#125;</div><div class="line">                           &#125;</div><div class="line">                       &#125;</div></pre></td></tr></table></figure>
<p>接下来是OnTouchListener，直接上结论: onTouchListener里面的方法是在dispatchTouchEvent里面调用的，并且如果listener里面的onTouch返回true，事件将不会发送给onTouchEvent，因此OnTouchListener势必会优先级高于onClick和onLongClick。</p>
<h2 id="VelocityTracker"><a href="#VelocityTracker" class="headerlink" title="VelocityTracker"></a>VelocityTracker</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">velocityTracker = VelocityTracker.obtain()；</div><div class="line">velocityTracker.addMovement(event);</div><div class="line">velocityTracker.computeCurrentVelocity(<span class="number">1</span>);  </div><div class="line">velocityTracker.getXVelocity();</div><div class="line">velocityTracker.recycle();</div></pre></td></tr></table></figure>
<p>值得注意的是，VelocityTracker内部使用了大量的native方法，所以执行速度比java要快很多。</p>
<h3 id="实现Fling效果"><a href="#实现Fling效果" class="headerlink" title="实现Fling效果"></a>实现Fling效果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onFling</span><span class="params">(<span class="keyword">float</span> velocityX,<span class="keyword">float</span> velocityY)</span></span>&#123;</div><div class="line">  scroller.fling(getScrollX(),getScrollY(),(<span class="keyword">int</span>)-velocityX</div><div class="line">                (<span class="keyword">int</span>)-velocityY,minScrollX,maxScrollX,</div><div class="line">                minScrollY,maxScrollY);</div><div class="line">  invalidate();</div><div class="line">&#125;</div><div class="line"><span class="meta">@overdide</span><span class="comment">// 这是每个View都有的方法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">if</span>(scroller.isFinished())&#123;</div><div class="line">    scroller.computeScrollOffset();</div><div class="line">    scrollTo(scroller.getCurrX(),scroller.getCurrY());</div><div class="line">    postInvalidateOnAnimation();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="捕获双击事件"><a href="#捕获双击事件" class="headerlink" title="捕获双击事件"></a>捕获双击事件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"> </div><div class="line">GestureDetector gestureDetector;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs);</div><div class="line">            <span class="comment">// creating new gesture detector </span></div><div class="line">    gestureDetector = <span class="keyword">new</span> GestureDetector(context, <span class="keyword">new</span> GestureListener());</div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="comment">// skipping measure calculation and drawing </span></div><div class="line"> </div><div class="line">    <span class="comment">// delegate the event to the gesture detector </span></div><div class="line"><span class="meta">@Override</span> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> gestureDetector.onTouchEvent(e);</div><div class="line">&#125; </div><div class="line"> </div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">GestureListener</span> <span class="keyword">extends</span> <span class="title">GestureDetector</span>.<span class="title">SimpleOnGestureListener</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDown</span><span class="params">(MotionEvent e)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; </div><div class="line">    &#125; </div><div class="line">    <span class="comment">// event when double tap occurs </span></div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDoubleTap</span><span class="params">(MotionEvent e)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> x = e.getX();</div><div class="line">        <span class="keyword">float</span> y = e.getY();</div><div class="line"> </div><div class="line">        Log.d(<span class="string">"Double Tap"</span>, <span class="string">"Tapped at: ("</span> + x + <span class="string">","</span> + y + <span class="string">")"</span>);</div><div class="line"> </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 最后是关于ViewConfiguration的一些常量获取的静态方法：</p>
<p>int getScaledTouchSlop(); (if Math.abs(x<em>x+y</em>y)&gt;mTouchSlop 就可以认为是滑动事件了)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**    </span></div><div class="line">  * 包含了方法和标准的常量用来设置UI的超时、大小和距离    </div><div class="line">  */ </div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewConfiguration</span> </span>&#123;     </div><div class="line">     <span class="comment">// 设定水平滚动条的宽度和垂直滚动条的高度，单位是像素px     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SCROLL_BAR_SIZE = <span class="number">10</span>;     </div><div class="line">          </div><div class="line">     <span class="comment">//定义滚动条逐渐消失的时间，单位是毫秒     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SCROLL_BAR_FADE_DURATION = <span class="number">250</span>;     </div><div class="line">          </div><div class="line">     <span class="comment">// 默认的滚动条多少秒之后消失，单位是毫秒     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SCROLL_BAR_DEFAULT_DELAY = <span class="number">300</span>;     </div><div class="line">          </div><div class="line">     <span class="comment">// 定义边缘地方褪色的长度     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FADING_EDGE_LENGTH = <span class="number">12</span>;     </div><div class="line">          </div><div class="line">     <span class="comment">//定义子控件按下状态的持续事件     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PRESSED_STATE_DURATION = <span class="number">125</span>;     </div><div class="line">              </div><div class="line">     <span class="comment">//定义一个按下状态转变成长按状态的转变时间     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LONG_PRESS_TIMEOUT = <span class="number">500</span>;     </div><div class="line">              </div><div class="line">     <span class="comment">//定义用户在按住适当按钮，弹出全局的对话框的持续时间     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GLOBAL_ACTIONS_KEY_TIMEOUT = <span class="number">500</span>;     </div><div class="line">              </div><div class="line">     <span class="comment">//定义一个touch事件中是点击事件还是一个滑动事件所需的时间，如果用户在这个时间之内滑动，那么就认为是一个点击事件     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TAP_TIMEOUT = <span class="number">115</span>;     </div><div class="line">              </div><div class="line">     <span class="comment">/**    </span></div><div class="line">      * Defines the duration in milliseconds we will wait to see if a touch event     </div><div class="line">      * is a jump tap. If the user does not complete the jump tap within this interval, it is    </div><div class="line">      * considered to be a tap.     </div><div class="line">      */ </div><div class="line">     <span class="comment">//定义一个touch事件时候是一个点击事件。如果用户在这个时间内没有完成这个点击，那么就认为是一个点击事件     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> JUMP_TAP_TIMEOUT = <span class="number">500</span>;     </div><div class="line">          </div><div class="line">     <span class="comment">//定义双击事件的间隔时间     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DOUBLE_TAP_TIMEOUT = <span class="number">300</span>;     </div><div class="line">              </div><div class="line">     <span class="comment">//定义一个缩放控制反馈到用户界面的时间     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ZOOM_CONTROLS_TIMEOUT = <span class="number">3000</span>;     </div><div class="line">          </div><div class="line">     <span class="comment">/**    </span></div><div class="line">      * Inset in pixels to look for touchable content when the user touches the edge of the screen    </div><div class="line">      */ </div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EDGE_SLOP = <span class="number">12</span>;     </div><div class="line">              </div><div class="line">     <span class="comment">/**    </span></div><div class="line">      * Distance a touch can wander before we think the user is scrolling in pixels    </div><div class="line">      */ </div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOUCH_SLOP = <span class="number">16</span>;     </div><div class="line">              </div><div class="line">     <span class="comment">/**    </span></div><div class="line">      * Distance a touch can wander before we think the user is attempting a paged scroll    </div><div class="line">      * (in dips)    </div><div class="line">      */ </div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGING_TOUCH_SLOP = TOUCH_SLOP * <span class="number">2</span>;     </div><div class="line">              </div><div class="line">     <span class="comment">/**    </span></div><div class="line">      * Distance between the first touch and second touch to still be considered a double tap    </div><div class="line">      */ </div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DOUBLE_TAP_SLOP = <span class="number">100</span>;     </div><div class="line">              </div><div class="line">     <span class="comment">/**    </span></div><div class="line">      * Distance a touch needs to be outside of a window's bounds for it to    </div><div class="line">      * count as outside for purposes of dismissing the window.    </div><div class="line">      */ </div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WINDOW_TOUCH_SLOP = <span class="number">16</span>;     </div><div class="line">          </div><div class="line">    <span class="comment">//用来初始化fling的最小速度，单位是每秒多少像素     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINIMUM_FLING_VELOCITY = <span class="number">50</span>;     </div><div class="line">              </div><div class="line">     <span class="comment">//用来初始化fling的最大速度，单位是每秒多少像素     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_FLING_VELOCITY = <span class="number">4000</span>;     </div><div class="line">          </div><div class="line">     <span class="comment">//视图绘图缓存的最大尺寸，以字节表示。在ARGB888格式下，这个尺寸应至少等于屏幕的大小     </span></div><div class="line">     <span class="meta">@Deprecated</span>     </div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_DRAWING_CACHE_SIZE = <span class="number">320</span> * <span class="number">480</span> * <span class="number">4</span>; <span class="comment">// HVGA screen, ARGB8888     </span></div><div class="line">          </div><div class="line">     <span class="comment">//flings和scrolls摩擦力度大小的系数     </span></div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> SCROLL_FRICTION = <span class="number">0.015f</span>;     </div><div class="line">          </div><div class="line">     <span class="comment">/**    </span></div><div class="line">      * Max distance to over scroll for edge effects    </div><div class="line">      */ </div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OVERSCROLL_DISTANCE = <span class="number">0</span>;     </div><div class="line">          </div><div class="line">     <span class="comment">/**    </span></div><div class="line">      * Max distance to over fling for edge effects    </div><div class="line">      */ </div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OVERFLING_DISTANCE = <span class="number">4</span>;     </div><div class="line">          </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2></li>
</ul>
<ol>
<li><a href="http://www.jianshu.com/p/e99b5e8bd67b" target="_blank" rel="external">图解安卓事件分发机制</a></li>
<li><a href="https://www.youtube.com/watch?v=usBaTHZdXSI" target="_blank" rel="external">making sense of the touch system</a></li>
<li><a href="http://blog.csdn.net/ddna/article/details/5451722" target="_blank" rel="external">Android onTouchEvent, onClick及onLongClick的调用机制</a></li>
<li><a href="http://wangkuiwu.github.io/2015/01/03/TouchEvent-View/" target="_blank" rel="external">Android触摸事件机制(三)</a></li>
<li><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2013/0225/907.html" target="_blank" rel="external">ViewConfiguration用法</a></li>
<li><p><a href="http://glblong.blog.51cto.com/3058613/1559320" target="_blank" rel="external">触摸事件的分析与总结</a></p>
<p>​</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/dispatch_touch_event_video.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;图1 默认情况下事件传递的路径 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Touch事件始于ACTION_DOWN, 终止于ACTION_UP, 这其中可能会伴随着ACTION_MOVE,ACTION_CANCEL等等。&lt;br&gt;
    
    </summary>
    
    
      <category term="TouchEvent" scheme="http://haldir65.github.io/tags/TouchEvent/"/>
    
  </entry>
  
  <entry>
    <title>service和activity的通信方式</title>
    <link href="http://haldir65.github.io/2016/09/30/service-activity-communication/"/>
    <id>http://haldir65.github.io/2016/09/30/service-activity-communication/</id>
    <published>2016-09-30T07:25:28.000Z</published>
    <updated>2016-10-08T14:29:00.554Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/service_lifecycle.png" alt=""></p>
<p>一年以前写过一篇关于service和Activity相互通信的很详细的博客，当时真的是费了很大心思在上面。现在回过头来看，还是有些不完善的地方，比如aidl没有给，demo不够全面。现在补上。</p>
<a id="more"></a>
<ol>
<li>关于Android的Service，<a href="https://developer.android.com/guide/components/services.html" target="_blank" rel="external">官方文档</a>是这样描述的</li>
</ol>
<blockquote>
<p><code>Service</code> 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。</p>
</blockquote>
<p>这其中也能看出Android对于Service角色的定位，后台工作，不涉及UI。</p>
<p>Service本身包含started Service和Binded Service</p>
<p>对于Binded Service 使用</p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/service_binding_tree_lifecycle.png" alt=""></p>
<h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2><h3 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h3><p><a href="http://blog.csdn.net/javazejian/article/details/52709857" target="_blank" rel="external">csdn</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/service_lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一年以前写过一篇关于service和Activity相互通信的很详细的博客，当时真的是费了很大心思在上面。现在回过头来看，还是有些不完善的地方，比如aidl没有给，demo不够全面。现在补上。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://haldir65.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android" scheme="http://haldir65.github.io/tags/android/"/>
    
      <category term="service" scheme="http://haldir65.github.io/tags/service/"/>
    
  </entry>
  
  <entry>
    <title>git常用手册</title>
    <link href="http://haldir65.github.io/2016/09/27/git-manual/"/>
    <id>http://haldir65.github.io/2016/09/27/git-manual/</id>
    <published>2016-09-27T09:24:51.000Z</published>
    <updated>2016-10-06T09:33:19.280Z</updated>
    
    <content type="html"><![CDATA[<p>常用git命令，使用场景</p>
<ol>
<li>在本地创建一个项目并同步到github的过程</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ mkdir ~/hello-world    //创建一个项目hello-world</div><div class="line">$ cd ~/hello-world       //打开这个项目</div><div class="line">$ git init             //初始化 </div><div class="line">$ touch README   		//创建文件</div><div class="line">$ git add README        //更新README文件</div><div class="line">$ git commit -m &apos;first commit&apos;     //提交更新，并注释信息“first commit”</div><div class="line">$ git remote add origin git@github.test/hellotest.git     //连接远程github项目  </div><div class="line">$ git push -u origin master     //将本地项目更新到github项目上去</div></pre></td></tr></table></figure>
<ol>
<li>将本地git branch和远程github repository同步</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --set-upstream local_branch origin/remote_branch</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>git默认对大小写不敏感，所以，新建一个文件adapter.java，上传到github之后说不定就给变成了Adapter.java</li>
</ol>
<blockquote>
<p>在windows下面将已经push到远端的文件，改变其文件名的大小写时，Git默认会认为文件没有发生任何改动，从而拒绝提交和推送，原因是其默认配置为大小写不敏感，故须在bash下修改配置：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config core.ignorecase false</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用git命令，使用场景&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在本地创建一个项目并同步到github的过程&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ mkdir ~/hello-world    //创建一个项目hello-world&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd ~/hello-world       //打开这个项目&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git init             //初始化 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ touch README   		//创建文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git add README        //更新README文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git commit -m &amp;apos;first commit&amp;apos;     //提交更新，并注释信息“first commit”&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git remote add origin git@github.test/hellotest.git     //连接远程github项目  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ git push -u origin master     //将本地项目更新到github项目上去&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;将本地git branch和远程github repository同步&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git branch --set-upstream local_branch origin/remote_branch&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://haldir65.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="git" scheme="http://haldir65.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>activity transition pre and post lollipop</title>
    <link href="http://haldir65.github.io/2016/09/27/activity-transition-pre-and-post-lollipop/"/>
    <id>http://haldir65.github.io/2016/09/27/activity-transition-pre-and-post-lollipop/</id>
    <published>2016-09-27T06:53:25.000Z</published>
    <updated>2016-10-06T09:04:53.709Z</updated>
    
    <content type="html"><![CDATA[<p>Lollipop开始引入了新的Activity Transition动画效果，比起常用的overridePendingTransaction() 效果要强大许多</p>
<p>测试环境<br>supportLibVersion = “24.2.1”<br>gradle plugin version : “classpath ‘com.android.tools.build:gradle:2.2.0’”<br>gradle version : 3.1<br>compileSdkVersion 24<br>buildToolsVersion “24.0.2”</p>
<a id="more"></a>
<ul>
<li>常规用法:</li>
</ul>
<p>A activity &gt;&gt;&gt;&gt; B activity</p>
<p>A activity中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">intent = <span class="keyword">new</span> Intent(getActivity(), PictureDetailSubActivity2.class);</div><div class="line">               intent.putExtra(EXTRA_IMAGE_URL, R.drawable.b2);</div><div class="line">               intent.putExtra(EXTRA_IMAGE_TITLE, <span class="string">"使用ActivityCompat动画"</span>);</div><div class="line">               ActivityOptionsCompat optionsCompat = ActivityOptionsCompat.</div><div class="line">                       makeSceneTransitionAnimation(getActivity(), view, TRANSIT_PIC);</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   ActivityCompat.startActivity(getActivity(), intent, optionsCompat.toBundle()); <span class="comment">//据说部分三星手机上会失效</span></div><div class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                   e.printStackTrace();</div><div class="line">                   ToastUtils.showTextShort(getActivity(), <span class="string">"ActivityCompat出错！！"</span>);</div><div class="line">                   startActivity(intent);</div><div class="line">               &#125;</div></pre></td></tr></table></figure>
<p>Pair这个class是v4包里的一个Util类，用来装载一组(pair)对象，支持泛型，很好用。由于都是v4包里的方法，省去了做API版本判断，在API 16以下，就只会调用普通的startActivity方法。上面加了try catch是避免部分手机上出现问题</p>
<p>B activity中onCreate调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ViewCompat.setTransitionName(binding.imageDetail, TRANSIT_PIC);</div></pre></td></tr></table></figure>
<p>就可实现普通的转场动画。</p>
<ul>
<li><p>兼容方式(将连续的Transition带到API16以下)</p>
<p>主要的原理: 在A activity中记录要带到B activity中的View的当前位置，在B activity中添加onPredrawListener(measure完毕，layout完毕，即将开始Draw的时候)，此时开始进行动画，将SharedView从原位置animate到B Activty中的位置</p>
<p>原理及详细代码在这里:</p>
<p> <a href="https://www.youtube.com/watch?v=CPxkoe2MraA" target="_blank" rel="external">Dev Bytes Activity Animations Youtube</a> 我照着写了一些关于Activity Transition的模板，<a href="https://github.com/Haldir65/CustomActivityTransition" target="_blank" rel="external">gitHub</a> 基本能实现兼容到API 16以下的效果</p>
</li>
<li><p>最后是这几天遇到的天坑</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState, PersistableBundle persistentState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState, persistentState);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样的Activity绝对会出ClassNotFoundException , 而且并不会主动出现在logcat中</p>
<ul>
<li>overridePendingTransaction要在startActivity以及finish之后才能调用</li>
</ul>
<p>gitHub上有一个比较好的<a href="https://github.com/takahirom/PreLollipopTransition" target="_blank" rel="external">兼容库</a>，大致原理也是使用onPreDrawListener</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lollipop开始引入了新的Activity Transition动画效果，比起常用的overridePendingTransaction() 效果要强大许多&lt;/p&gt;
&lt;p&gt;测试环境&lt;br&gt;supportLibVersion = “24.2.1”&lt;br&gt;gradle plugin version : “classpath ‘com.android.tools.build:gradle:2.2.0’”&lt;br&gt;gradle version : 3.1&lt;br&gt;compileSdkVersion 24&lt;br&gt;buildToolsVersion “24.0.2”&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://haldir65.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android" scheme="http://haldir65.github.io/tags/android/"/>
    
      <category term="transition" scheme="http://haldir65.github.io/tags/transition/"/>
    
  </entry>
  
  <entry>
    <title>android使用selectableItemBackground的一些坑</title>
    <link href="http://haldir65.github.io/2016/09/23/selectableItemBackground-foreground/"/>
    <id>http://haldir65.github.io/2016/09/23/selectableItemBackground-foreground/</id>
    <published>2016-09-23T11:56:39.000Z</published>
    <updated>2016-10-06T09:04:53.749Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>android:foreground=”?android:attr/selectableItemBackground”</p>
</blockquote>
<p>或是</p>
<blockquote>
<p>android:background=”?android:attr/selectableItemBackground”</p>
</blockquote>
<p>这个xml属性最早是我学着写recyclerVeiw的item xml的时候接触到的，简单来说就是，在API 21及以上，用户点击这个itemView时候会出现一个Ripple效果<br>非常好看，而在API 21以下则会表现为MonoChrome的类似按压色的效果<img src="https://cloud.githubusercontent.com/assets/12274855/18787855/2a6d93f2-81d7-11e6-8026-58cdbd8583d4.JPG" alt=""> <br><br>而这个点击时的水波纹颜色也是可以Customize的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;item name=&quot;android:colorControlHighlight&quot;&gt;@color/my_ripple_color&lt;/item&gt;</div></pre></td></tr></table></figure></p>
<p>//这个要写在自己的Activity的Theme(style-v21)里，注意，当前Activity的Theme必须继承自Appcompat!!<br>于是，我写了这样的xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/item_root"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?android:attr/listPreferredItemHeight"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"@&#123;(view) -&gt; callback.onClick(view,data)&#125;"</span></div><div class="line">        <span class="attr">android:elevation</span>=<span class="string">"2dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/md_amber_200"</span></div><div class="line">        <span class="attr">android:foreground</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line">        /&gt;</div></pre></td></tr></table></figure></p>
<p>然而，点击之后并没有出现水波纹(模拟器 API 21)，换成CardView或是将foreground改为background之后才有效。查了很多博客，最后得出结论:<br>android:foreground在API 23之前只对FrameLayout有效(CardView继承自FrameLayout当然有效)。<br><a id="more"></a></p>
<p>##所以正确的做法是</p>
<blockquote>
<p>android:foreground=”?android:attr/selectableItemBackground”</p>
</blockquote>
<p>改为</p>
<blockquote>
<p>android:background=”?android:attr/selectableItemBackground”</p>
</blockquote>
<p>或者使用FrameLayout。</p>
<ul>
<li><p>关于foreground<br>之前看google io2016时，<a href="https://github.com/chrisbanes" target="_blank" rel="external">Chris Banes</a>给了这样的解释。<br><img src="https://cloud.githubusercontent.com/assets/12274855/18787841/1d0b2d82-81d7-11e6-916e-b4113772c3a2.JPG" alt="">,<br>android:foreground在API 1 的FrameLayout中就有了，但直到API 23才将这个属性添加到View中。<br>所以，换成API 23的手机上面那段代码foreground也是可以出现Ripple的,至于23之前为什么foreground无效，并不清楚为什么</p>
</li>
<li><p>首先是一种简单的模拟这种视觉效果的尝试：<a href="http://effmx.com/articles/ru-he-chuang-jian-jian-rong-de-foreground-drawable-selectorshi-xian-layoutdian-ji-xiao-guo/" target="_blank" rel="external">如何创建兼容的Forefround drawable selector</a> 这篇文章提到了:</p>
<blockquote>
<p>简单来讲，Foreground 定义了绘制于当前内容之上的 Drawable，类似一层覆盖物。所以我们可以为设置 Foreground 的值为 drawable或者color， 那如果将 Froeground 设置为 drawable selector，自然就可以为控件实现点击响应效果了。 比较奇怪的是在 sdk 23 以前，foregrond 属性只对 Framelayout 生效，但这个问题现在得到了解决，所以也请确保你的 compileSdkVersion 大于等于23<br>  这篇文章的做法是针对21以下的版本使用slelector Drawable实现类似的效果</p>
</blockquote>
</li>
<li><p>如何真正实现为API23之前的View,ViewGroup添加foreground?<br>随后我找到了<a href="https://dzone.com/articles/adding-foreground-selector" target="_blank" rel="external">这篇博客</a>，具体的逻辑并不太多。<br>这里插一句，任何Drawable对象，在你调用setDrawable之后，该Drawable都会保留一个最后一个调用对象的callback</p>
<blockquote>
<p>Drawable-&gt;View-&gt;Context //leak!<br>//所以Drawable也有可能导致Activity leak</p>
</blockquote>
</li>
<li><p>随后我发现了更多有意思的讨论<br>首先是<a href="https://github.com/chrisbanes" target="_blank" rel="external">Chris Banes</a>在G+上的Post : <a href="https://plus.google.com/+ChrisBanes/posts/DRerZ8wEFuF" target="_blank" rel="external">Foreground Doge</a><br>他给出了两种方案,Chris作为Google员工，给出的解决方案应该是比较官方的了</p>
</li>
</ul>
<ol>
<li>如果想利用FrameLayout的foreground特性来实现点击特效的话，完全可以在自己的xml外面再包裹一层FrameLayout</li>
<li>自己动手写一个实现foreground的Viewgroup , <a href="https://gist.github.com/chrisbanes/9091754" target="_blank" rel="external">代码</a></li>
</ol>
<ul>
<li>attrs:<figure class="highlight plain"><figcaption><span>version="1.0" encoding="utf-8"?></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    &lt;declare-styleable name=&quot;ForegroundLinearLayout&quot;&gt;</div><div class="line">        &lt;attr name=&quot;android:foreground&quot; /&gt;</div><div class="line">        &lt;attr name=&quot;android:foregroundInsidePadding&quot; /&gt;</div><div class="line">        &lt;attr name=&quot;android:foregroundGravity&quot; /&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line"> * Copyright (C) 2006 The Android Open Source Project </div><div class="line"> * </div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License"); </div><div class="line"> * you may not use this file except in compliance with the License. </div><div class="line"> * You may obtain a copy of the License at </div><div class="line"> * </div><div class="line"> *      http://www.apache.org/licenses/LICENSE-2.0 </div><div class="line"> * </div><div class="line"> * Unless required by applicable law or agreed to in writing, software </div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS, </div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. </div><div class="line"> * See the License for the specific language governing permissions and </div><div class="line"> * limitations under the License. </div><div class="line"> */ </div><div class="line"> </div><div class="line"><span class="keyword">package</span> your.<span class="keyword">package</span>; </div><div class="line"> </div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.Gravity;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> your.<span class="keyword">package</span>.R; </div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForegroundLinearLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> Drawable mForeground;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Rect mSelfBounds = <span class="keyword">new</span> Rect();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Rect mOverlayBounds = <span class="keyword">new</span> Rect();</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mForegroundGravity = Gravity.FILL;</div><div class="line"> </div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> mForegroundInPadding = <span class="keyword">true</span>;</div><div class="line"> </div><div class="line">    <span class="keyword">boolean</span> mForegroundBoundsChanged = <span class="keyword">false</span>;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForegroundLinearLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForegroundLinearLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForegroundLinearLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line"> </div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundLinearLayout,</div><div class="line">                defStyle, <span class="number">0</span>);</div><div class="line"> </div><div class="line">        mForegroundGravity = a.getInt(</div><div class="line">                R.styleable.ForegroundLinearLayout_android_foregroundGravity, mForegroundGravity);</div><div class="line"> </div><div class="line">        <span class="keyword">final</span> Drawable d = a.getDrawable(R.styleable.ForegroundLinearLayout_android_foreground);</div><div class="line">        <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123;</div><div class="line">            setForeground(d);</div><div class="line">        &#125; </div><div class="line"> </div><div class="line">        mForegroundInPadding = a.getBoolean(</div><div class="line">                R.styleable.ForegroundLinearLayout_android_foregroundInsidePadding, <span class="keyword">true</span>);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * Describes how the foreground is positioned. </div><div class="line">     * </div><div class="line">     * <span class="doctag">@return</span> foreground gravity. </div><div class="line">     * </div><div class="line">     * <span class="doctag">@see</span> #setForegroundGravity(int) </div><div class="line">     */ </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getForegroundGravity</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> mForegroundGravity;</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * Describes how the foreground is positioned. Defaults to START and TOP. </div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> foregroundGravity See &#123;<span class="doctag">@link</span> android.view.Gravity&#125; </div><div class="line">     * </div><div class="line">     * <span class="doctag">@see</span> #getForegroundGravity() </div><div class="line">     */ </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForegroundGravity</span><span class="params">(<span class="keyword">int</span> foregroundGravity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mForegroundGravity != foregroundGravity) &#123;</div><div class="line">            <span class="keyword">if</span> ((foregroundGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) == <span class="number">0</span>) &#123;</div><div class="line">                foregroundGravity |= Gravity.START;</div><div class="line">            &#125; </div><div class="line"> </div><div class="line">            <span class="keyword">if</span> ((foregroundGravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == <span class="number">0</span>) &#123;</div><div class="line">                foregroundGravity |= Gravity.TOP;</div><div class="line">            &#125; </div><div class="line"> </div><div class="line">            mForegroundGravity = foregroundGravity;</div><div class="line"> </div><div class="line"> </div><div class="line">            <span class="keyword">if</span> (mForegroundGravity == Gravity.FILL &amp;&amp; mForeground != <span class="keyword">null</span>) &#123;</div><div class="line">                Rect padding = <span class="keyword">new</span> Rect();</div><div class="line">                mForeground.getPadding(padding);</div><div class="line">            &#125; </div><div class="line"> </div><div class="line">            requestLayout();</div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">verifyDrawable</span><span class="params">(Drawable who)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.verifyDrawable(who) || (who == mForeground);</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jumpDrawablesToCurrentState</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">super</span>.jumpDrawablesToCurrentState(); </div><div class="line">        <span class="keyword">if</span> (mForeground != <span class="keyword">null</span>) mForeground.jumpToCurrentState();</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">drawableStateChanged</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="keyword">super</span>.drawableStateChanged(); </div><div class="line">        <span class="keyword">if</span> (mForeground != <span class="keyword">null</span> &amp;&amp; mForeground.isStateful()) &#123;</div><div class="line">            mForeground.setState(getDrawableState());</div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * Supply a Drawable that is to be rendered on top of all of the child </div><div class="line">     * views in the frame layout.  Any padding in the Drawable will be taken </div><div class="line">     * into account by ensuring that the children are inset to be placed </div><div class="line">     * inside of the padding area. </div><div class="line">     * </div><div class="line">     * <span class="doctag">@param</span> drawable The Drawable to be drawn on top of the children. </div><div class="line">     */ </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mForeground != drawable) &#123;</div><div class="line">            <span class="keyword">if</span> (mForeground != <span class="keyword">null</span>) &#123;</div><div class="line">                mForeground.setCallback(<span class="keyword">null</span>);</div><div class="line">                unscheduleDrawable(mForeground);</div><div class="line">            &#125; </div><div class="line"> </div><div class="line">            mForeground = drawable;</div><div class="line"> </div><div class="line">            <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</div><div class="line">                setWillNotDraw(<span class="keyword">false</span>);</div><div class="line">                drawable.setCallback(<span class="keyword">this</span>);</div><div class="line">                <span class="keyword">if</span> (drawable.isStateful()) &#123;</div><div class="line">                    drawable.setState(getDrawableState());</div><div class="line">                &#125; </div><div class="line">                <span class="keyword">if</span> (mForegroundGravity == Gravity.FILL) &#123;</div><div class="line">                    Rect padding = <span class="keyword">new</span> Rect();</div><div class="line">                    drawable.getPadding(padding);</div><div class="line">                &#125; </div><div class="line">            &#125;  <span class="keyword">else</span> &#123; </div><div class="line">                setWillNotDraw(<span class="keyword">true</span>);</div><div class="line">            &#125; </div><div class="line">            requestLayout();</div><div class="line">            invalidate();</div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * Returns the drawable used as the foreground of this FrameLayout. The </div><div class="line">     * foreground drawable, if non-null, is always drawn on top of the children. </div><div class="line">     * </div><div class="line">     * <span class="doctag">@return</span> A Drawable or null if no foreground was set. </div><div class="line">     */ </div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">getForeground</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mForeground;</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</div><div class="line">        mForegroundBoundsChanged = changed;</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line">        mForegroundBoundsChanged = <span class="keyword">true</span>;</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="meta">@Override</span> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.draw(canvas);</div><div class="line"> </div><div class="line">        <span class="keyword">if</span> (mForeground != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">final</span> Drawable foreground = mForeground;</div><div class="line"> </div><div class="line">            <span class="keyword">if</span> (mForegroundBoundsChanged) &#123;</div><div class="line">                mForegroundBoundsChanged = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">final</span> Rect selfBounds = mSelfBounds;</div><div class="line">                <span class="keyword">final</span> Rect overlayBounds = mOverlayBounds;</div><div class="line"> </div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> w = getRight() - getLeft();</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> h = getBottom() - getTop();</div><div class="line"> </div><div class="line">                <span class="keyword">if</span> (mForegroundInPadding) &#123;</div><div class="line">                    selfBounds.set(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line">                &#125; <span class="keyword">else</span> &#123; </div><div class="line">                    selfBounds.set(getPaddingLeft(), getPaddingTop(),</div><div class="line">                            w - getPaddingRight(), h - getPaddingBottom());</div><div class="line">                &#125; </div><div class="line"> </div><div class="line">                Gravity.apply(mForegroundGravity, foreground.getIntrinsicWidth(),</div><div class="line">                        foreground.getIntrinsicHeight(), selfBounds, overlayBounds);</div><div class="line">                foreground.setBounds(overlayBounds);</div><div class="line">            &#125; </div><div class="line"> </div><div class="line">            foreground.draw(canvas);</div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>使用方式</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">your.package.ForegroundLinearLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:foreground</span>=<span class="string">"?android:selectableItemBackground"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">”@+id/imageview_opaque”</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line">    ... other views ...</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>接着是<a href="https://github.com/JakeWharton" target="_blank" rel="external">Jack Wharton</a>的<a href="https://gist.github.com/JakeWharton/0a251d67649305d84e8a" target="_blank" rel="external">ForegroundImageView</a><br></p>
</li>
<li><p>attrs</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"ForegroundImageView"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"android:foreground"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForegroundImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Drawable foreground;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ForegroundImageView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ForegroundImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs);</div><div class="line"> </div><div class="line">    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundImageView);</div><div class="line">    Drawable foreground = a.getDrawable(R.styleable.ForegroundImageView_android_foreground);</div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</div><div class="line">      setForeground(foreground);</div><div class="line">    &#125; </div><div class="line">    a.recycle();</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="comment">/** </span></div><div class="line">   * Supply a drawable resource that is to be rendered on top of all of the child </div><div class="line">   * views in the frame layout. </div><div class="line">   * </div><div class="line">   * <span class="doctag">@param</span> drawableResId The drawable resource to be drawn on top of the children. </div><div class="line">   */ </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForegroundResource</span><span class="params">(<span class="keyword">int</span> drawableResId)</span> </span>&#123;</div><div class="line">    setForeground(getContext().getResources().getDrawable(drawableResId));</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="comment">/** </span></div><div class="line">   * Supply a Drawable that is to be rendered on top of all of the child </div><div class="line">   * views in the frame layout. </div><div class="line">   * </div><div class="line">   * <span class="doctag">@param</span> drawable The Drawable to be drawn on top of the children. </div><div class="line">   */ </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (foreground == drawable) &#123;</div><div class="line">      <span class="keyword">return</span>; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</div><div class="line">      foreground.setCallback(<span class="keyword">null</span>);</div><div class="line">      unscheduleDrawable(foreground);</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    foreground = drawable;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</div><div class="line">      drawable.setCallback(<span class="keyword">this</span>);</div><div class="line">      <span class="keyword">if</span> (drawable.isStateful()) &#123;</div><div class="line">        drawable.setState(getDrawableState());</div><div class="line">      &#125; </div><div class="line">    &#125; </div><div class="line">    requestLayout();</div><div class="line">    invalidate();</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">verifyDrawable</span><span class="params">(Drawable who)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.verifyDrawable(who) || who == foreground;</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jumpDrawablesToCurrentState</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">super</span>.jumpDrawablesToCurrentState(); </div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) foreground.jumpToCurrentState();</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">drawableStateChanged</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">super</span>.drawableStateChanged(); </div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span> &amp;&amp; foreground.isStateful()) &#123;</div><div class="line">      foreground.setState(getDrawableState());</div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</div><div class="line">      foreground.setBounds(<span class="number">0</span>, <span class="number">0</span>, getMeasuredWidth(), getMeasuredHeight());</div><div class="line">      invalidate();</div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</div><div class="line">      foreground.setBounds(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line">      invalidate();</div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.draw(canvas);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</div><div class="line">      foreground.draw(canvas);</div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>最后，还有人给出据说更好的<a href="https://github.com/cesards/ForegroundViews" target="_blank" rel="external">解决方案</a><br>没有测试过，不了解</p>
<p>##reference</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=TIHXGwRTMWI" target="_blank" rel="external">Android themes and styles demisfied</a> 关于Theme和Style的区别的很好的学习资料</li>
<li><a href="https://plus.google.com/108967384991768947849/posts/aHPVDtr6mcp" target="_blank" rel="external">Chris Banes G+ post</a> 评论很精彩</li>
<li><a href="https://gist.github.com/shakalaca/6199283" target="_blank" rel="external">RelativeLayout with foreGround</a> 没测试过</li>
<li><a href="https://github.com/traex/RippleEffect" target="_blank" rel="external">Ripple Effect</a> 将Ripple的动画兼容到API 9+ ，很出色的一个库。之前项目中用过，就是一个继承自RelativeLayout的自定义ViewGroup。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;android:foreground=”?android:attr/selectableItemBackground”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;android:background=”?android:attr/selectableItemBackground”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个xml属性最早是我学着写recyclerVeiw的item xml的时候接触到的，简单来说就是，在API 21及以上，用户点击这个itemView时候会出现一个Ripple效果&lt;br&gt;非常好看，而在API 21以下则会表现为MonoChrome的类似按压色的效果&lt;img src=&quot;https://cloud.githubusercontent.com/assets/12274855/18787855/2a6d93f2-81d7-11e6-8026-58cdbd8583d4.JPG&quot; alt=&quot;&quot;&gt; &lt;/br&gt;&lt;br&gt;而这个点击时的水波纹颜色也是可以Customize的&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;item name=&amp;quot;android:colorControlHighlight&amp;quot;&amp;gt;@color/my_ripple_color&amp;lt;/item&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;//这个要写在自己的Activity的Theme(style-v21)里，注意，当前Activity的Theme必须继承自Appcompat!!&lt;br&gt;于是，我写了这样的xml&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;LinearLayout&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/item_root&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?android:attr/listPreferredItemHeight&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:orientation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vertical&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:gravity&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@&amp;#123;(view) -&amp;gt; callback.onClick(view,data)&amp;#125;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:elevation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;2dp&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@color/md_amber_200&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:foreground&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?android:attr/selectableItemBackground&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而，点击之后并没有出现水波纹(模拟器 API 21)，换成CardView或是将foreground改为background之后才有效。查了很多博客，最后得出结论:&lt;br&gt;android:foreground在API 23之前只对FrameLayout有效(CardView继承自FrameLayout当然有效)。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://haldir65.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android" scheme="http://haldir65.github.io/tags/android/"/>
    
      <category term="随笔" scheme="http://haldir65.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="foreground" scheme="http://haldir65.github.io/tags/foreground/"/>
    
  </entry>
  
  <entry>
    <title>replace butterKnife with databinding</title>
    <link href="http://haldir65.github.io/2016/09/22/replace-butterKnife-with-databinding/"/>
    <id>http://haldir65.github.io/2016/09/22/replace-butterKnife-with-databinding/</id>
    <published>2016-09-22T07:17:39.000Z</published>
    <updated>2016-10-06T09:04:53.739Z</updated>
    
    <content type="html"><![CDATA[<p>Yigit Boyar 在2015年的android Dev summit上介绍了Databinding，当时好像提到一句:<br>“no binding libraries will be created from now on “，大意如此。<br>本文介绍使用Databinding替代ButterKnife的用法</p>
<h2 id="本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。"><a href="#本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。" class="headerlink" title="本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。"></a>本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。</h2><a id="more"></a>
<h1 id="1-在Activity中使用"><a href="#1-在Activity中使用" class="headerlink" title="1.在Activity中使用"></a>1.在Activity中使用</h1><p><em>before</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="meta">@Bind</span>(R.id.title) TextView title;</div><div class="line">  <span class="meta">@Bind</span>(R.id.subtitle) TextView subtitle;</div><div class="line">  <span class="meta">@Bind</span>(R.id.footer) TextView footer;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.simple_activity);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>after</em><br>首先需要将xml文件添加 <strong>Layout</strong> tag<br><code>R.layout.smple_activity</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layout</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/title"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/subtitle"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/footer"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> ActivitySampleBinding binding;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    binding = DataBindingUtils.setContentView(<span class="keyword">this</span>, R.layout.simple_activity);</div><div class="line">    binding.title.setText(<span class="string">"I am Title"</span>);</div><div class="line">    <span class="comment">//no more findViewById!!!</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-在Fragment中使用"><a href="#2-在Fragment中使用" class="headerlink" title="2.在Fragment中使用"></a>2.在Fragment中使用</h1><p><em>before</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button1) Button button1;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button2) Button button2;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    <span class="comment">// TODO Use fields...</span></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>after</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> FragmentFancyBinding binding;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    binding = DataBindingUtil.inflate(inflater,R.layout.fragment_fancy, container, <span class="keyword">false</span>);</div><div class="line">true  <span class="keyword">return</span> binding.getRoot();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="3-在ViewHolder中使用"><a href="#3-在ViewHolder中使用" class="headerlink" title="3.在ViewHolder中使用"></a>3.在ViewHolder中使用</h1><p><em>before</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View view, ViewGroup parent)</span> </span>&#123;</div><div class="line">    ViewHolder holder;</div><div class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">      holder = (ViewHolder) view.getTag();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      view = inflater.inflate(R.layout.list_item_sample, parent, <span class="keyword">false</span>);</div><div class="line">      holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">      view.setTag(holder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    holder.name.setText(<span class="string">"John Doe"</span>);</div><div class="line">    <span class="comment">// etc...</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">    <span class="meta">@Bind</span>(R.id.title) TextView name;</div><div class="line">    <span class="meta">@Bind</span>(R.id.job_title) TextView jobTitle;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>after</em></p>
<h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">      ListItemSampleBinding binding;</div><div class="line">      <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">          binding = DataBindingUtil.inflate(inflater, R.layout.list_item_sample, parent, <span class="keyword">false</span>);</div><div class="line">          convertView = binding.getRoot();</div><div class="line">          convertView.setTag(binding);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          binding = (ListItemSampleBinding) convertView.getTag();</div><div class="line">      &#125;</div><div class="line">      binding.setUser(getItem(position));</div><div class="line">      <span class="comment">// binding.name.setText("John Doe");</span></div><div class="line"></div><div class="line">      <span class="keyword">return</span> convertView;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="recyclerView"><a href="#recyclerView" class="headerlink" title="recyclerView"></a>recyclerView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleRecyclerAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">SampleRecyclerAdapter</span>.<span class="title">BindingHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RegisterableDeviceListAdapter.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_sample, parent, <span class="keyword">false</span>);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BindingHolder(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BindingHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    holder.getBinding().setVariable(BR.user, getItem(position));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ViewDataBinding binding;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BindingHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>(itemView);</div><div class="line">      binding = DataBindingUtil.bind(itemView)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewDataBinding <span class="title">getBinding</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> binding;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-在CustomView中使用"><a href="#4-在CustomView中使用" class="headerlink" title="4.在CustomView中使用"></a>4.在CustomView中使用</h1><p>在自定义View(ViewGroup)的时候，可以用ButterKnife减少自定义ViewGroup中的findViewById,使用Databinding之后是这样的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pagination</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> ViewPaginationBinding binding;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Pagination</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Pagination</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs);</div><div class="line">    binding = DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.view_pagination, <span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(Pagination paginate, View target, OnPaginationClickListener listener)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">      target.setOnClickListener(_v -&gt; listener.onClick(paginate));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@BindingAdapter</span>(&#123;<span class="string">"android:onPrevButtonClicked"</span>&#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPrevClickListener</span><span class="params">(Pagination view, OnPaginationClickListener listener)</span> </span>&#123;</div><div class="line">    setListener(view, view.binding.btnPrevPage, listener);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@BindingAdapter</span>(&#123;<span class="string">"android:onNextButtonClicked"</span>&#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNextClickListener</span><span class="params">(Pagination view, OnPaginationClickListener listener)</span> </span>&#123;</div><div class="line">    setListener(view, view.binding.btnNextPage, listener);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnPaginationClickListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(Pagination pagination)</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="5-EventHandler-setDefaultComponent…"><a href="#5-EventHandler-setDefaultComponent…" class="headerlink" title="5.EventHandler, setDefaultComponent…"></a>5.EventHandler, setDefaultComponent…<br></h1><p>Databinding还有很多高级用法，目前给我带来的好处就是明显减少了boilerplate code <br><br>So ,感谢ButterKnife给我们带来的便利，Googbye ButterKnife，Hello DataBinding!</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="external">Data Binding Library</a></li>
<li><a href="https://realm.io/cn/news/data-binding-android-boyar-mount/" target="_blank" rel="external">data-binding-android-boyar-mount</a> </li>
<li><a href="https://www.youtube.com/watch?v=DAmMN7m3wLU" target="_blank" rel="external">Advanced Data Bindinding</a> Two-Way Data Binding at google io 2016</li>
<li><a href="https://www.youtube.com/watch?v=NBbeQMOcnZ0" target="_blank" rel="external">Android Dev Summit 2015</a></li>
<li><a href="http://qiita.com/izumin5210/items/2784576d86ce6b9b51e6" target="_blank" rel="external">Goodbye Butter Knife</a></li>
<li><a href="https://github.com/google/android-ui-toolkit-demos" target="_blank" rel="external">Google Sample</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yigit Boyar 在2015年的android Dev summit上介绍了Databinding，当时好像提到一句:&lt;br&gt;“no binding libraries will be created from now on “，大意如此。&lt;br&gt;本文介绍使用Databinding替代ButterKnife的用法&lt;/p&gt;
&lt;h2 id=&quot;本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。&quot;&gt;&lt;a href=&quot;#本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。&quot; class=&quot;headerlink&quot; title=&quot;本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。&quot;&gt;&lt;/a&gt;本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。&lt;/h2&gt;
    
    </summary>
    
      <category term="blog" scheme="http://haldir65.github.io/categories/blog/"/>
    
    
      <category term="android" scheme="http://haldir65.github.io/tags/android/"/>
    
      <category term="databinding" scheme="http://haldir65.github.io/tags/databinding/"/>
    
      <category term="Butterknife" scheme="http://haldir65.github.io/tags/Butterknife/"/>
    
  </entry>
  
  <entry>
    <title>android内部类导致leak模板</title>
    <link href="http://haldir65.github.io/2016/09/18/android-inner-class-leak/"/>
    <id>http://haldir65.github.io/2016/09/18/android-inner-class-leak/</id>
    <published>2016-09-18T02:23:42.000Z</published>
    <updated>2016-10-06T09:04:53.716Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>通常我们在一个class里面写内部类时，不是一定要用static声明为静态类，但是推荐作为内部静态类，因为内部类会隐式持有外部类的引用，有些时候如果代码处理不对容易造成内存泄漏<br>下面就是个内存泄漏的例子<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">true<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</div><div class="line">true<span class="meta">@Override</span></div><div class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">truetrue<span class="keyword">if</span>(msg.what==<span class="number">1</span>)&#123;</div><div class="line">truetruetrue<span class="keyword">new</span> Thread()&#123;</div><div class="line">truetruetruetrue<span class="meta">@Override</span></div><div class="line">truetruetruetrue<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">truetruetruetruetrue<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">truetruetruetruetruetrue<span class="comment">//do something</span></div><div class="line">truetruetruetruetrue&#125;</div><div class="line">truetruetruetrue&#125;</div><div class="line">truetruetrue&#125;.start();</div><div class="line">truetrue&#125;</div><div class="line">true&#125;</div><div class="line">true&#125;</div><div class="line">true<span class="keyword">public</span> MyHandler handler;</div><div class="line">true<span class="meta">@Override</span></div><div class="line">true<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">truetrue<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">truetruesetContentView(R.layout.activity_main);</div><div class="line">truetrue</div><div class="line">truetrue<span class="comment">//...</span></div><div class="line">truetruehandler.sendEmptyMessage(<span class="number">1</span>);</div><div class="line">truetruefinish();</div><div class="line">true    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上面代码所示，在onCreate方法里发送了一条消息给handler处理然后finish方法关闭activity，但是代码并不能如愿，因为在handler收到消息启动了一个线程并且是<strong>死循环</strong>，<br>这时候Thread持有handler的引用，而handler又持有activity的引用，这就导致了handler不能回收和activty也不能回收，所以推荐使用静态内部类，因为静态内部类不持有外部类的引用，可以避免这些不必要的麻烦。</p>
<p>除此之外，在Activity里面创建一个AsyncTask的子类也容易导致leak<br>例如 <a href="http://stackoverflow.com/questions/24679383/memory-leak-using-asynctask-as-a-inner-class" target="_blank" rel="external">stackoverFlow上的这个问题</a></p>
<p>对于这类问题的比较常用的方式:<br>WeakReference<br>例如,写这样一个的静态内部类</p>
<pre><code class="java"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IncomingHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>{
    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;MessagingService&gt; mReference;

    IncomingHandler(MessagingService service) {
        mReference = <span class="keyword">new</span> WeakReference&lt;&gt;(service);
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>{
        MessagingService service = mReference.get();
        <span class="keyword">switch</span> (msg.what) {
            <span class="keyword">case</span> MSG_SEND_NOTIFICATION:
                <span class="keyword">int</span> howManyConversations = msg.arg1 &lt;= <span class="number">0</span> ? <span class="number">1</span> : msg.arg1;
                <span class="keyword">int</span> messagesPerConversation = msg.arg2 &lt;= <span class="number">0</span> ? <span class="number">1</span> : msg.arg2;
                <span class="keyword">if</span> (service != <span class="keyword">null</span>) {
                    service.sendNotification(howManyConversations,
                    messagesPerConversation);
                }
                <span class="keyword">break</span>;
            <span class="keyword">default</span>:
                <span class="keyword">super</span>.handleMessage(msg);
        }
    }
}
</code></pre>
<p>//handler通过弱引用持有service对象，外加static内部类不持有外部类引用，应该不会leak了</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;通常我们在一个class里面写内部类时，不是一定要用static声明为静态类，但是推荐作为内部静态类，因为内部类会隐式持有外部类的引用，有些时候如果代码处理不对容易造成内存泄漏&lt;br&gt;下面就是个内存泄漏的例子&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://haldir65.github.io/categories/blog/"/>
    
    
      <category term="android" scheme="http://haldir65.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://haldir65.github.io/2016/09/18/hello-world/"/>
    <id>http://haldir65.github.io/2016/09/18/hello-world/</id>
    <published>2016-09-18T00:44:19.677Z</published>
    <updated>2016-10-06T09:04:53.728Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
