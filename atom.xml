<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人随笔</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haldir65.github.io/"/>
  <updated>2016-09-23T14:37:16.673Z</updated>
  <id>http://haldir65.github.io/</id>
  
  <author>
    <name>Haldir65</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>android使用selectableItemBackground的一些坑</title>
    <link href="http://haldir65.github.io/2016/09/23/selectableItemBackground-foreground/"/>
    <id>http://haldir65.github.io/2016/09/23/selectableItemBackground-foreground/</id>
    <published>2016-09-23T11:56:39.000Z</published>
    <updated>2016-09-23T14:37:16.673Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>android:foreground=”?android:attr/selectableItemBackground”</p>
</blockquote>
<p>或是</p>
<blockquote>
<p>android:background=”?android:attr/selectableItemBackground”</p>
</blockquote>
<p>这个xml属性最早是我学着写recyclerVeiw的item xml的时候接触到的，简单来说就是，在API 21及以上，用户点击这个itemView时候会出现一个Ripple效果<br>非常好看，而在API 21以下则会表现为MonoChrome的类似按压色的效果<img src="https://cloud.githubusercontent.com/assets/12274855/18787855/2a6d93f2-81d7-11e6-8026-58cdbd8583d4.JPG" alt=""> <br><br>而这个点击时的水波纹颜色也是可以Customize的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;item name=&quot;android:colorControlHighlight&quot;&gt;@color/my_ripple_color&lt;/item&gt;</div></pre></td></tr></table></figure></p>
<p>//这个要写在自己的Activity的Theme(style-v21)里，注意，当前Activity的Theme必须继承自Appcompat!!<br>于是，我写了这样的xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/item_root"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?android:attr/listPreferredItemHeight"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></div><div class="line">        <span class="attr">android:onClick</span>=<span class="string">"@&#123;(view) -&gt; callback.onClick(view,data)&#125;"</span></div><div class="line">        <span class="attr">android:elevation</span>=<span class="string">"2dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@color/md_amber_200"</span></div><div class="line">        <span class="attr">android:foreground</span>=<span class="string">"?android:attr/selectableItemBackground"</span></div><div class="line">        /&gt;</div></pre></td></tr></table></figure></p>
<p>然而，点击之后并没有出现水波纹(模拟器 API 21)，换成CardView或是将foreground改为background之后才有效。查了很多博客，最后得出结论:<br>android:foreground在API 23之前只对FrameLayout有效(CardView继承自FrameLayout当然有效)。<br><a id="more"></a></p>
<p>##所以正确的做法是</p>
<blockquote>
<p>android:foreground=”?android:attr/selectableItemBackground”</p>
</blockquote>
<p>改为</p>
<blockquote>
<p>android:background=”?android:attr/selectableItemBackground”</p>
</blockquote>
<p>或者使用FrameLayout。</p>
<ul>
<li><p>关于foreground<br>之前看google io2016时，<a href="https://github.com/chrisbanes" target="_blank" rel="external">Chris Banes</a>给了这样的解释。<br><img src="https://cloud.githubusercontent.com/assets/12274855/18787841/1d0b2d82-81d7-11e6-916e-b4113772c3a2.JPG" alt="">,<br>android:foreground在API 1 的FrameLayout中就有了，但直到API 23才将这个属性添加到View中。<br>所以，换成API 23的手机上面那段代码foreground也是可以出现Ripple的,至于23之前为什么foreground无效，并不清楚为什么</p>
</li>
<li><p>首先是一种简单的模拟这种视觉效果的尝试：<a href="http://effmx.com/articles/ru-he-chuang-jian-jian-rong-de-foreground-drawable-selectorshi-xian-layoutdian-ji-xiao-guo/" target="_blank" rel="external">如何创建兼容的Forefround drawable selector</a> 这篇文章提到了:</p>
<blockquote>
<p>简单来讲，Foreground 定义了绘制于当前内容之上的 Drawable，类似一层覆盖物。所以我们可以为设置 Foreground 的值为 drawable或者color， 那如果将 Froeground 设置为 drawable selector，自然就可以为控件实现点击响应效果了。 比较奇怪的是在 sdk 23 以前，foregrond 属性只对 Framelayout 生效，但这个问题现在得到了解决，所以也请确保你的 compileSdkVersion 大于等于23<br>  这篇文章的做法是针对21以下的版本使用slelector Drawable实现类似的效果</p>
</blockquote>
</li>
<li><p>如何真正实现为API23之前的View,ViewGroup添加foreground?<br>随后我找到了<a href="https://dzone.com/articles/adding-foreground-selector" target="_blank" rel="external">这篇博客</a>，具体的逻辑并不太多。<br>这里插一句，任何Drawable对象，在你调用setDrawable之后，该Drawable都会保留一个最后一个调用对象的callback</p>
<blockquote>
<p>Drawable-&gt;View-&gt;Context //leak!<br>//所以Drawable也有可能导致Activity leak</p>
</blockquote>
</li>
<li><p>随后我发现了更多有意思的讨论<br>首先是<a href="https://github.com/chrisbanes" target="_blank" rel="external">Chris Banes</a>在G+上的Post : <a href="https://plus.google.com/+ChrisBanes/posts/DRerZ8wEFuF" target="_blank" rel="external">Foreground Doge</a><br>他给出了两种方案,Chris作为Google员工，给出的解决方案应该是比较官方的了</p>
</li>
</ul>
<ol>
<li>如果想利用FrameLayout的foreground特性来实现点击特效的话，完全可以在自己的xml外面再包裹一层FrameLayout</li>
<li>自己动手写一个实现foreground的Viewgroup , <a href="https://gist.github.com/chrisbanes/9091754" target="_blank" rel="external">代码</a></li>
</ol>
<ul>
<li>attrs:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;declare-styleable name=&quot;ForegroundLinearLayout&quot;&gt;</div><div class="line">        &lt;attr name=&quot;android:foreground&quot; /&gt;</div><div class="line">        &lt;attr name=&quot;android:foregroundInsidePadding&quot; /&gt;</div><div class="line">        &lt;attr name=&quot;android:foregroundGravity&quot; /&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div></pre></td><td class="code"><pre><div class="line">/* </div><div class="line"> * Copyright (C) 2006 The Android Open Source Project </div><div class="line"> * </div><div class="line"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); </div><div class="line"> * you may not use this file except in compliance with the License. </div><div class="line"> * You may obtain a copy of the License at </div><div class="line"> * </div><div class="line"> *      http://www.apache.org/licenses/LICENSE-2.0 </div><div class="line"> * </div><div class="line"> * Unless required by applicable law or agreed to in writing, software </div><div class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, </div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. </div><div class="line"> * See the License for the specific language governing permissions and </div><div class="line"> * limitations under the License. </div><div class="line"> */ </div><div class="line"> </div><div class="line">package your.package; </div><div class="line"> </div><div class="line">import android.content.Context;</div><div class="line">import android.content.res.TypedArray;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Rect;</div><div class="line">import android.graphics.drawable.Drawable;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.Gravity;</div><div class="line">import android.widget.LinearLayout;</div><div class="line"> </div><div class="line">import your.package.R; </div><div class="line"> </div><div class="line">public class ForegroundLinearLayout extends LinearLayout &#123;</div><div class="line"> </div><div class="line">    private Drawable mForeground;</div><div class="line"> </div><div class="line">    private final Rect mSelfBounds = new Rect();</div><div class="line">    private final Rect mOverlayBounds = new Rect();</div><div class="line"> </div><div class="line">    private int mForegroundGravity = Gravity.FILL;</div><div class="line"> </div><div class="line">    protected boolean mForegroundInPadding = true;</div><div class="line"> </div><div class="line">    boolean mForegroundBoundsChanged = false;</div><div class="line"> </div><div class="line">    public ForegroundLinearLayout(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    public ForegroundLinearLayout(Context context, AttributeSet attrs) &#123;</div><div class="line">        this(context, attrs, 0);</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    public ForegroundLinearLayout(Context context, AttributeSet attrs, int defStyle) &#123;</div><div class="line">        super(context, attrs, defStyle);</div><div class="line"> </div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundLinearLayout,</div><div class="line">                defStyle, 0);</div><div class="line"> </div><div class="line">        mForegroundGravity = a.getInt(</div><div class="line">                R.styleable.ForegroundLinearLayout_android_foregroundGravity, mForegroundGravity);</div><div class="line"> </div><div class="line">        final Drawable d = a.getDrawable(R.styleable.ForegroundLinearLayout_android_foreground);</div><div class="line">        if (d != null) &#123;</div><div class="line">            setForeground(d);</div><div class="line">        &#125; </div><div class="line"> </div><div class="line">        mForegroundInPadding = a.getBoolean(</div><div class="line">                R.styleable.ForegroundLinearLayout_android_foregroundInsidePadding, true);</div><div class="line"> </div><div class="line">        a.recycle();</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    /** </div><div class="line">     * Describes how the foreground is positioned. </div><div class="line">     * </div><div class="line">     * @return foreground gravity. </div><div class="line">     * </div><div class="line">     * @see #setForegroundGravity(int) </div><div class="line">     */ </div><div class="line">    public int getForegroundGravity() &#123; </div><div class="line">        return mForegroundGravity;</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    /** </div><div class="line">     * Describes how the foreground is positioned. Defaults to START and TOP. </div><div class="line">     * </div><div class="line">     * @param foregroundGravity See &#123;@link android.view.Gravity&#125; </div><div class="line">     * </div><div class="line">     * @see #getForegroundGravity() </div><div class="line">     */ </div><div class="line">    public void setForegroundGravity(int foregroundGravity) &#123;</div><div class="line">        if (mForegroundGravity != foregroundGravity) &#123;</div><div class="line">            if ((foregroundGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) &#123;</div><div class="line">                foregroundGravity |= Gravity.START;</div><div class="line">            &#125; </div><div class="line"> </div><div class="line">            if ((foregroundGravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == 0) &#123;</div><div class="line">                foregroundGravity |= Gravity.TOP;</div><div class="line">            &#125; </div><div class="line"> </div><div class="line">            mForegroundGravity = foregroundGravity;</div><div class="line"> </div><div class="line"> </div><div class="line">            if (mForegroundGravity == Gravity.FILL &amp;&amp; mForeground != null) &#123;</div><div class="line">                Rect padding = new Rect();</div><div class="line">                mForeground.getPadding(padding);</div><div class="line">            &#125; </div><div class="line"> </div><div class="line">            requestLayout();</div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    @Override </div><div class="line">    protected boolean verifyDrawable(Drawable who) &#123;</div><div class="line">        return super.verifyDrawable(who) || (who == mForeground);</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    @Override </div><div class="line">    public void jumpDrawablesToCurrentState() &#123; </div><div class="line">        super.jumpDrawablesToCurrentState(); </div><div class="line">        if (mForeground != null) mForeground.jumpToCurrentState();</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    @Override </div><div class="line">    protected void drawableStateChanged() &#123; </div><div class="line">        super.drawableStateChanged(); </div><div class="line">        if (mForeground != null &amp;&amp; mForeground.isStateful()) &#123;</div><div class="line">            mForeground.setState(getDrawableState());</div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    /** </div><div class="line">     * Supply a Drawable that is to be rendered on top of all of the child </div><div class="line">     * views in the frame layout.  Any padding in the Drawable will be taken </div><div class="line">     * into account by ensuring that the children are inset to be placed </div><div class="line">     * inside of the padding area. </div><div class="line">     * </div><div class="line">     * @param drawable The Drawable to be drawn on top of the children. </div><div class="line">     */ </div><div class="line">    public void setForeground(Drawable drawable) &#123;</div><div class="line">        if (mForeground != drawable) &#123;</div><div class="line">            if (mForeground != null) &#123;</div><div class="line">                mForeground.setCallback(null);</div><div class="line">                unscheduleDrawable(mForeground);</div><div class="line">            &#125; </div><div class="line"> </div><div class="line">            mForeground = drawable;</div><div class="line"> </div><div class="line">            if (drawable != null) &#123;</div><div class="line">                setWillNotDraw(false);</div><div class="line">                drawable.setCallback(this);</div><div class="line">                if (drawable.isStateful()) &#123;</div><div class="line">                    drawable.setState(getDrawableState());</div><div class="line">                &#125; </div><div class="line">                if (mForegroundGravity == Gravity.FILL) &#123;</div><div class="line">                    Rect padding = new Rect();</div><div class="line">                    drawable.getPadding(padding);</div><div class="line">                &#125; </div><div class="line">            &#125;  else &#123; </div><div class="line">                setWillNotDraw(true);</div><div class="line">            &#125; </div><div class="line">            requestLayout();</div><div class="line">            invalidate();</div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    /** </div><div class="line">     * Returns the drawable used as the foreground of this FrameLayout. The </div><div class="line">     * foreground drawable, if non-null, is always drawn on top of the children. </div><div class="line">     * </div><div class="line">     * @return A Drawable or null if no foreground was set. </div><div class="line">     */ </div><div class="line">    public Drawable getForeground() &#123;</div><div class="line">        return mForeground;</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    @Override </div><div class="line">    protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;</div><div class="line">        super.onLayout(changed, left, top, right, bottom);</div><div class="line">        mForegroundBoundsChanged = changed;</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    @Override </div><div class="line">    protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</div><div class="line">        super.onSizeChanged(w, h, oldw, oldh);</div><div class="line">        mForegroundBoundsChanged = true;</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    @Override </div><div class="line">    public void draw(Canvas canvas) &#123;</div><div class="line">        super.draw(canvas);</div><div class="line"> </div><div class="line">        if (mForeground != null) &#123;</div><div class="line">            final Drawable foreground = mForeground;</div><div class="line"> </div><div class="line">            if (mForegroundBoundsChanged) &#123;</div><div class="line">                mForegroundBoundsChanged = false;</div><div class="line">                final Rect selfBounds = mSelfBounds;</div><div class="line">                final Rect overlayBounds = mOverlayBounds;</div><div class="line"> </div><div class="line">                final int w = getRight() - getLeft();</div><div class="line">                final int h = getBottom() - getTop();</div><div class="line"> </div><div class="line">                if (mForegroundInPadding) &#123;</div><div class="line">                    selfBounds.set(0, 0, w, h);</div><div class="line">                &#125; else &#123; </div><div class="line">                    selfBounds.set(getPaddingLeft(), getPaddingTop(),</div><div class="line">                            w - getPaddingRight(), h - getPaddingBottom());</div><div class="line">                &#125; </div><div class="line"> </div><div class="line">                Gravity.apply(mForegroundGravity, foreground.getIntrinsicWidth(),</div><div class="line">                        foreground.getIntrinsicHeight(), selfBounds, overlayBounds);</div><div class="line">                foreground.setBounds(overlayBounds);</div><div class="line">            &#125; </div><div class="line"> </div><div class="line">            foreground.draw(canvas);</div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>使用方式</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">your.package.ForegroundLinearLayout</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:foreground</span>=<span class="string">"?android:selectableItemBackground"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">”@+id/imageview_opaque”</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div><div class="line"></div><div class="line">    ... other views ...</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">your.package.ForegroundLinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>接着是<a href="https://github.com/JakeWharton" target="_blank" rel="external">Jack Wharton</a>的<a href="https://gist.github.com/JakeWharton/0a251d67649305d84e8a" target="_blank" rel="external">ForegroundImageView</a><br></p>
</li>
<li><p>attrs</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"ForegroundImageView"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"android:foreground"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.ImageView;</div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForegroundImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Drawable foreground;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ForegroundImageView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ForegroundImageView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs);</div><div class="line"> </div><div class="line">    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundImageView);</div><div class="line">    Drawable foreground = a.getDrawable(R.styleable.ForegroundImageView_android_foreground);</div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</div><div class="line">      setForeground(foreground);</div><div class="line">    &#125; </div><div class="line">    a.recycle();</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="comment">/** </span></div><div class="line">   * Supply a drawable resource that is to be rendered on top of all of the child </div><div class="line">   * views in the frame layout. </div><div class="line">   * </div><div class="line">   * <span class="doctag">@param</span> drawableResId The drawable resource to be drawn on top of the children. </div><div class="line">   */ </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForegroundResource</span><span class="params">(<span class="keyword">int</span> drawableResId)</span> </span>&#123;</div><div class="line">    setForeground(getContext().getResources().getDrawable(drawableResId));</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="comment">/** </span></div><div class="line">   * Supply a Drawable that is to be rendered on top of all of the child </div><div class="line">   * views in the frame layout. </div><div class="line">   * </div><div class="line">   * <span class="doctag">@param</span> drawable The Drawable to be drawn on top of the children. </div><div class="line">   */ </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setForeground</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (foreground == drawable) &#123;</div><div class="line">      <span class="keyword">return</span>; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</div><div class="line">      foreground.setCallback(<span class="keyword">null</span>);</div><div class="line">      unscheduleDrawable(foreground);</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    foreground = drawable;</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</div><div class="line">      drawable.setCallback(<span class="keyword">this</span>);</div><div class="line">      <span class="keyword">if</span> (drawable.isStateful()) &#123;</div><div class="line">        drawable.setState(getDrawableState());</div><div class="line">      &#125; </div><div class="line">    &#125; </div><div class="line">    requestLayout();</div><div class="line">    invalidate();</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">verifyDrawable</span><span class="params">(Drawable who)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.verifyDrawable(who) || who == foreground;</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jumpDrawablesToCurrentState</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">super</span>.jumpDrawablesToCurrentState(); </div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) foreground.jumpToCurrentState();</div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">drawableStateChanged</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">super</span>.drawableStateChanged(); </div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span> &amp;&amp; foreground.isStateful()) &#123;</div><div class="line">      foreground.setState(getDrawableState());</div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</div><div class="line">      foreground.setBounds(<span class="number">0</span>, <span class="number">0</span>, getMeasuredWidth(), getMeasuredHeight());</div><div class="line">      invalidate();</div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</div><div class="line">      foreground.setBounds(<span class="number">0</span>, <span class="number">0</span>, w, h);</div><div class="line">      invalidate();</div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.draw(canvas);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (foreground != <span class="keyword">null</span>) &#123;</div><div class="line">      foreground.draw(canvas);</div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>最后，还有人给出据说更好的<a href="https://github.com/cesards/ForegroundViews" target="_blank" rel="external">解决方案</a><br>没有测试过，不了解</p>
<p>##reference</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=TIHXGwRTMWI" target="_blank" rel="external">Android themes and styles demisfied</a> 关于Theme和Style的区别的很好的学习资料</li>
<li><a href="https://plus.google.com/108967384991768947849/posts/aHPVDtr6mcp" target="_blank" rel="external">Chris Banes G+ post</a> 评论很精彩</li>
<li><a href="https://gist.github.com/shakalaca/6199283" target="_blank" rel="external">RelativeLayout with foreGround</a> 没测试过</li>
<li><a href="https://github.com/traex/RippleEffect" target="_blank" rel="external">Ripple Effect</a> 将Ripple的动画兼容到API 9+ ，很出色的一个库。之前项目中用过，就是一个继承自RelativeLayout的自定义ViewGroup。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;android:foreground=”?android:attr/selectableItemBackground”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;android:background=”?android:attr/selectableItemBackground”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个xml属性最早是我学着写recyclerVeiw的item xml的时候接触到的，简单来说就是，在API 21及以上，用户点击这个itemView时候会出现一个Ripple效果&lt;br&gt;非常好看，而在API 21以下则会表现为MonoChrome的类似按压色的效果&lt;img src=&quot;https://cloud.githubusercontent.com/assets/12274855/18787855/2a6d93f2-81d7-11e6-8026-58cdbd8583d4.JPG&quot; alt=&quot;&quot;&gt; &lt;/br&gt;&lt;br&gt;而这个点击时的水波纹颜色也是可以Customize的&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;item name=&amp;quot;android:colorControlHighlight&amp;quot;&amp;gt;@color/my_ripple_color&amp;lt;/item&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;//这个要写在自己的Activity的Theme(style-v21)里，注意，当前Activity的Theme必须继承自Appcompat!!&lt;br&gt;于是，我写了这样的xml&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;LinearLayout&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/item_root&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?android:attr/listPreferredItemHeight&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:orientation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vertical&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:gravity&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:onClick&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@&amp;#123;(view) -&amp;gt; callback.onClick(view,data)&amp;#125;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:elevation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;2dp&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@color/md_amber_200&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:foreground&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?android:attr/selectableItemBackground&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然而，点击之后并没有出现水波纹(模拟器 API 21)，换成CardView或是将foreground改为background之后才有效。查了很多博客，最后得出结论:&lt;br&gt;android:foreground在API 23之前只对FrameLayout有效(CardView继承自FrameLayout当然有效)。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://haldir65.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="android" scheme="http://haldir65.github.io/tags/android/"/>
    
      <category term="随笔" scheme="http://haldir65.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="foreground" scheme="http://haldir65.github.io/tags/foreground/"/>
    
  </entry>
  
  <entry>
    <title>replace butterKnife with databinding</title>
    <link href="http://haldir65.github.io/2016/09/22/replace-butterKnife-with-databinding/"/>
    <id>http://haldir65.github.io/2016/09/22/replace-butterKnife-with-databinding/</id>
    <published>2016-09-22T07:17:39.000Z</published>
    <updated>2016-09-23T13:55:39.514Z</updated>
    
    <content type="html"><![CDATA[<p>Yigit Boyar 在2015年的android Dev summit上介绍了Databinding，当时好像提到一句:<br>“no binding libraries will be created from now on “，大意如此。<br>本文介绍使用Databinding替代ButterKnife的用法</p>
<h2 id="本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。"><a href="#本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。" class="headerlink" title="本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。"></a>本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。</h2><a id="more"></a>
<h1 id="1-在Activity中使用"><a href="#1-在Activity中使用" class="headerlink" title="1.在Activity中使用"></a>1.在Activity中使用</h1><p><em>before</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="meta">@Bind</span>(R.id.title) TextView title;</div><div class="line">  <span class="meta">@Bind</span>(R.id.subtitle) TextView subtitle;</div><div class="line">  <span class="meta">@Bind</span>(R.id.footer) TextView footer;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.simple_activity);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>after</em><br>首先需要将xml文件添加 <strong>Layout</strong> tag<br><code>R.layout.smple_activity</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layout</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">LinearLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/title"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/subtitle"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/footer"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> ActivitySampleBinding binding;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    binding = DataBindingUtils.setContentView(<span class="keyword">this</span>, R.layout.simple_activity);</div><div class="line">    binding.title.setText(<span class="string">"I am Title"</span>);</div><div class="line">    <span class="comment">//no more findViewById!!!</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="2-在Fragment中使用"><a href="#2-在Fragment中使用" class="headerlink" title="2.在Fragment中使用"></a>2.在Fragment中使用</h1><p><em>before</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button1) Button button1;</div><div class="line">  <span class="meta">@Bind</span>(R.id.button2) Button button2;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</div><div class="line">    ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    <span class="comment">// TODO Use fields...</span></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>after</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> FragmentFancyBinding binding;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    binding = DataBindingUtil.inflate(inflater,R.layout.fragment_fancy, container, <span class="keyword">false</span>);</div><div class="line">	  <span class="keyword">return</span> binding.getRoot();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="3-在ViewHolder中使用"><a href="#3-在ViewHolder中使用" class="headerlink" title="3.在ViewHolder中使用"></a>3.在ViewHolder中使用</h1><p><em>before</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View view, ViewGroup parent)</span> </span>&#123;</div><div class="line">    ViewHolder holder;</div><div class="line">    <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">      holder = (ViewHolder) view.getTag();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      view = inflater.inflate(R.layout.list_item_sample, parent, <span class="keyword">false</span>);</div><div class="line">      holder = <span class="keyword">new</span> ViewHolder(view);</div><div class="line">      view.setTag(holder);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    holder.name.setText(<span class="string">"John Doe"</span>);</div><div class="line">    <span class="comment">// etc...</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">    <span class="meta">@Bind</span>(R.id.title) TextView name;</div><div class="line">    <span class="meta">@Bind</span>(R.id.job_title) TextView jobTitle;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      ButterKnife.bind(<span class="keyword">this</span>, view);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>after</em></p>
<h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">      ListItemSampleBinding binding;</div><div class="line">      <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line">          binding = DataBindingUtil.inflate(inflater, R.layout.list_item_sample, parent, <span class="keyword">false</span>);</div><div class="line">          convertView = binding.getRoot();</div><div class="line">          convertView.setTag(binding);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          binding = (ListItemSampleBinding) convertView.getTag();</div><div class="line">      &#125;</div><div class="line">      binding.setUser(getItem(position));</div><div class="line">      <span class="comment">// binding.name.setText("John Doe");</span></div><div class="line"></div><div class="line">      <span class="keyword">return</span> convertView;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="recyclerView"><a href="#recyclerView" class="headerlink" title="recyclerView"></a>recyclerView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleRecyclerAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">SampleRecyclerAdapter</span>.<span class="title">BindingHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RegisterableDeviceListAdapter.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_sample, parent, <span class="keyword">false</span>);</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BindingHolder(v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BindingHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">    holder.getBinding().setVariable(BR.user, getItem(position));</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ViewDataBinding binding;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BindingHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>(itemView);</div><div class="line">      binding = DataBindingUtil.bind(itemView)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewDataBinding <span class="title">getBinding</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> binding;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-在CustomView中使用"><a href="#4-在CustomView中使用" class="headerlink" title="4.在CustomView中使用"></a>4.在CustomView中使用</h1><p>在自定义View(ViewGroup)的时候，可以用ButterKnife减少自定义ViewGroup中的findViewById,使用Databinding之后是这样的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pagination</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> ViewPaginationBinding binding;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Pagination</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Pagination</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs);</div><div class="line">    binding = DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.view_pagination, <span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(Pagination paginate, View target, OnPaginationClickListener listener)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</div><div class="line">      target.setOnClickListener(_v -&gt; listener.onClick(paginate));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@BindingAdapter</span>(&#123;<span class="string">"android:onPrevButtonClicked"</span>&#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPrevClickListener</span><span class="params">(Pagination view, OnPaginationClickListener listener)</span> </span>&#123;</div><div class="line">    setListener(view, view.binding.btnPrevPage, listener);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@BindingAdapter</span>(&#123;<span class="string">"android:onNextButtonClicked"</span>&#125;)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setNextClickListener</span><span class="params">(Pagination view, OnPaginationClickListener listener)</span> </span>&#123;</div><div class="line">    setListener(view, view.binding.btnNextPage, listener);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnPaginationClickListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(Pagination pagination)</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="5-EventHandler-setDefaultComponent…"><a href="#5-EventHandler-setDefaultComponent…" class="headerlink" title="5.EventHandler, setDefaultComponent…"></a>5.EventHandler, setDefaultComponent…<br></h1><p>Databinding还有很多高级用法，目前给我带来的好处就是明显减少了boilerplate code <br><br>So ,感谢ButterKnife给我们带来的便利，Googbye ButterKnife，Hello DataBinding!</p>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="external">Data Binding Library</a></li>
<li><a href="https://realm.io/cn/news/data-binding-android-boyar-mount/" target="_blank" rel="external">data-binding-android-boyar-mount</a> </li>
<li><a href="https://www.youtube.com/watch?v=DAmMN7m3wLU" target="_blank" rel="external">Advanced Data Bindinding</a> Two-Way Data Binding at google io 2016</li>
<li><a href="https://www.youtube.com/watch?v=NBbeQMOcnZ0" target="_blank" rel="external">Android Dev Summit 2015</a></li>
<li><a href="http://qiita.com/izumin5210/items/2784576d86ce6b9b51e6" target="_blank" rel="external">Goodbye Butter Knife</a></li>
<li><a href="https://github.com/google/android-ui-toolkit-demos" target="_blank" rel="external">Google Sample</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yigit Boyar 在2015年的android Dev summit上介绍了Databinding，当时好像提到一句:&lt;br&gt;“no binding libraries will be created from now on “，大意如此。&lt;br&gt;本文介绍使用Databinding替代ButterKnife的用法&lt;/p&gt;
&lt;h2 id=&quot;本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。&quot;&gt;&lt;a href=&quot;#本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。&quot; class=&quot;headerlink&quot; title=&quot;本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。&quot;&gt;&lt;/a&gt;本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。&lt;/h2&gt;
    
    </summary>
    
      <category term="blog" scheme="http://haldir65.github.io/categories/blog/"/>
    
    
      <category term="databinding" scheme="http://haldir65.github.io/tags/databinding/"/>
    
      <category term="Butterknife" scheme="http://haldir65.github.io/tags/Butterknife/"/>
    
      <category term="android" scheme="http://haldir65.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>android内部类导致leak模板</title>
    <link href="http://haldir65.github.io/2016/09/18/android-inner-class-leak/"/>
    <id>http://haldir65.github.io/2016/09/18/android-inner-class-leak/</id>
    <published>2016-09-18T02:23:42.000Z</published>
    <updated>2016-09-22T08:21:00.492Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>通常我们在一个class里面写内部类时，不是一定要用static声明为静态类，但是推荐作为内部静态类，因为内部类会隐式持有外部类的引用，有些时候如果代码处理不对容易造成内存泄漏<br>下面就是个内存泄漏的例子<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(msg.what==<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">new</span> Thread()&#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">					<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">						<span class="comment">//do something</span></div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;.start();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> MyHandler handler;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		</div><div class="line">		<span class="comment">//...</span></div><div class="line">		handler.sendEmptyMessage(<span class="number">1</span>);</div><div class="line">		finish();</div><div class="line">	    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如上面代码所示，在onCreate方法里发送了一条消息给handler处理然后finish方法关闭activity，但是代码并不能如愿，因为在handler收到消息启动了一个线程并且是<strong>死循环</strong>，<br>这时候Thread持有handler的引用，而handler又持有activity的引用，这就导致了handler不能回收和activty也不能回收，所以推荐使用静态内部类，因为静态内部类不持有外部类的引用，可以避免这些不必要的麻烦。</p>
<p>除此之外，在Activity里面创建一个AsyncTask的子类也容易导致leak<br>例如 <a href="http://stackoverflow.com/questions/24679383/memory-leak-using-asynctask-as-a-inner-class" target="_blank" rel="external">stackoverFlow上的这个问题</a></p>
<p>对于这类问题的比较常用的方式:<br>WeakReference<br>例如,写这样一个的静态内部类</p>
<pre><code class="java"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IncomingHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>{
    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;MessagingService&gt; mReference;

    IncomingHandler(MessagingService service) {
        mReference = <span class="keyword">new</span> WeakReference&lt;&gt;(service);
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>{
        MessagingService service = mReference.get();
        <span class="keyword">switch</span> (msg.what) {
            <span class="keyword">case</span> MSG_SEND_NOTIFICATION:
                <span class="keyword">int</span> howManyConversations = msg.arg1 &lt;= <span class="number">0</span> ? <span class="number">1</span> : msg.arg1;
                <span class="keyword">int</span> messagesPerConversation = msg.arg2 &lt;= <span class="number">0</span> ? <span class="number">1</span> : msg.arg2;
                <span class="keyword">if</span> (service != <span class="keyword">null</span>) {
                    service.sendNotification(howManyConversations,
                    messagesPerConversation);
                }
                <span class="keyword">break</span>;
            <span class="keyword">default</span>:
                <span class="keyword">super</span>.handleMessage(msg);
        }
    }
}
</code></pre>
<p>//handler通过弱引用持有service对象，外加static内部类不持有外部类引用，应该不会leak了</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;通常我们在一个class里面写内部类时，不是一定要用static声明为静态类，但是推荐作为内部静态类，因为内部类会隐式持有外部类的引用，有些时候如果代码处理不对容易造成内存泄漏&lt;br&gt;下面就是个内存泄漏的例子&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://haldir65.github.io/categories/blog/"/>
    
    
      <category term="android" scheme="http://haldir65.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://haldir65.github.io/2016/09/18/hello-world/"/>
    <id>http://haldir65.github.io/2016/09/18/hello-world/</id>
    <published>2016-09-18T00:44:19.677Z</published>
    <updated>2016-09-22T08:23:26.647Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
