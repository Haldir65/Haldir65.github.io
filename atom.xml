<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haldir的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haldir65.github.io/"/>
  <updated>2018-06-13T15:40:22.185Z</updated>
  <id>https://haldir65.github.io/</id>
  
  <author>
    <name>Haldir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo部署个人博客记录</title>
    <link href="https://haldir65.github.io/2217/01/08/2017-01-08-trouble-shooting-with-my-blog/"/>
    <id>https://haldir65.github.io/2217/01/08/2017-01-08-trouble-shooting-with-my-blog/</id>
    <published>2217-01-08T18:01:01.000Z</published>
    <updated>2018-06-13T15:40:22.185Z</updated>
    
    <content type="html"><![CDATA[<p>使用 hexo 写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的 blog 一个值得置顶的文章的话，我觉得一篇记录使用 hexo 过程中的一些解决问题的方法的文章是再合适不过的了。</br><br><img src="http://odzl05jxx.bkt.clouddn.com/40164340_40164340_1414330224938_mthumb.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><h2 id="1-经常更新-yilia-的-theme"><a href="#1-经常更新-yilia-的-theme" class="headerlink" title="1. 经常更新 yilia 的 theme"></a>1. 经常更新 yilia 的 theme</h2><p><a href="https://github.com/litten/hexo-theme-yilia">yilia</a>主题经常会更新，及时更新 theme 会发现很多新的特性及 bug fix</p><h2 id="2-部署相关"><a href="#2-部署相关" class="headerlink" title="2. 部署相关"></a>2. 部署相关</h2><ul><li>部署到 github</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment">//清除缓存</span></span><br><span class="line">hexo g -d <span class="comment">//一步到位 = hexo g + hexo d</span></span><br><span class="line">hexo s <span class="comment">//localost:4000本地预览</span></span><br></pre></td></tr></table></figure><ul><li>部署过程中出现的一些错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br><span class="line">INFO  Start processing</span><br><span class="line">ERROR Process failed: _posts/<span class="number">2016</span><span class="number">-12</span><span class="number">-10</span>-adb-command.md</span><br><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line <span class="number">3</span>, column <span class="number">11</span>:</span><br><span class="line">    categories:  [技术]</span><br><span class="line">              ^</span><br><span class="line">    at generateError (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">162</span>:<span class="number">10</span>)</span><br><span class="line">    at throwError (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">168</span>:<span class="number">9</span>)</span><br><span class="line">    at readBlockMapping (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1040</span>:<span class="number">9</span>)</span><br><span class="line">    at composeNode (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1326</span>:<span class="number">12</span>)</span><br><span class="line">    at readDocument (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1488</span>:<span class="number">3</span>)</span><br><span class="line">    at loadDocuments (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1544</span>:<span class="number">5</span>)</span><br><span class="line">    at <span class="built_in">Object</span>.load (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1561</span>:<span class="number">19</span>)</span><br><span class="line">    at parseYAML (D:\Blog\github\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:<span class="number">80</span>:<span class="number">21</span>)</span><br><span class="line">    at parse (D:\Blog\github\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:<span class="number">56</span>:<span class="number">12</span>)</span><br><span class="line">    at D:\Blog\github\node_modules\hexo\lib\plugins\processor\post.js:<span class="number">52</span>:<span class="number">18</span></span><br><span class="line">    at tryCatcher (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">507</span>:<span class="number">35</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">567</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">125</span>:<span class="number">19</span>)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">143</span>:<span class="number">14</span>)</span><br><span class="line">    at PromiseArray._iterate (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">113</span>:<span class="number">31</span>)</span><br><span class="line">    at PromiseArray.init [<span class="keyword">as</span> _init] (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">77</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">564</span>:<span class="number">21</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">125</span>:<span class="number">19</span>)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">143</span>:<span class="number">14</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">572</span>:<span class="number">26</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._resolveCallback (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">431</span>:<span class="number">57</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">522</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">567</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\nodeback.js:<span class="number">42</span>:<span class="number">21</span></span><br><span class="line">    at D:\Blog\github\node_modules\hexo\node_modules\hexo-fs\node_modules\graceful-fs\graceful-fs.js:<span class="number">78</span>:<span class="number">16</span></span><br><span class="line">    at tryToString (fs.js:<span class="number">455</span>:<span class="number">3</span>)</span><br><span class="line">    at FSReqWrap.readFileAfterClose [<span class="keyword">as</span> oncomplete] (fs.js:<span class="number">442</span>:<span class="number">12</span>)</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> <span class="number">1.48</span> s</span><br><span class="line">INFO  Generated: sitemap.xml</span><br><span class="line">INFO  Generated: atom.xml</span><br><span class="line">INFO  Generated: <span class="number">2017</span>/<span class="number">01</span>/<span class="number">08</span>/<span class="number">2017</span><span class="number">-01</span><span class="number">-08</span>-trouble-shooting-<span class="keyword">with</span>-my-blog/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  <span class="number">4</span> files generated <span class="keyword">in</span> <span class="number">2.26</span> s</span><br><span class="line">INFO  Deploying: git</span><br></pre></td></tr></table></figure><p>找了好久，有说”_config.xml” 文件 有空格的，有说 title 被乱改的，试了好长时间，改成这样就不再报错了。所以，<strong>冒号后面一定要加空格，英文半角的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: adb常用命令手册</span><br><span class="line">date: 2016-12-10 21:14:14</span><br><span class="line">tags:</span><br><span class="line"> - android</span><br><span class="line"> - adb</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>tags 有两种写法，一种是上面这样前面加横杠另一种长这样，写成数组形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: my awesometitle</span><br><span class="line">date: 2017-05-07 16:48:01</span><br><span class="line">categories: blog</span><br><span class="line">tags: [linux,python]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="3-一些功能的实现"><a href="#3-一些功能的实现" class="headerlink" title="3. 一些功能的实现"></a>3. 一些功能的实现</h2><ul><li>置顶功能将 node_modules/hexo-generator-index/lib/generator.js 的文件内容替换成以下内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">"hexo-pagination"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">      <span class="keyword">if</span> (a.top == b.top)</span><br><span class="line">        <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.top &amp;&amp; !b.top) &#123;</span><br><span class="line">      <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">"page"</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">""</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">"index"</span>, <span class="string">"archive"</span>],</span><br><span class="line">    format: paginationDir + <span class="string">"/%d/"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>同时在文章开头添加 top : 1 即可 ，实际排序按照这个数字从大到小排序</li></ul><p>另一种做法是手动将date改大，日期越靠后的越在前面。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> title: Hexo置顶文章</span><br><span class="line">date: <span class="number">2016</span>-<span class="number">11</span>-<span class="number">11</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">22</span></span><br><span class="line">tags:[置顶]</span><br><span class="line">categories: Hexo</span><br><span class="line">top: 0 # 0或者1</span><br></pre></td></tr></table></figure><p>个人建议：置顶不要太多</p><h2 id="4-SublimeText-的一些快捷键"><a href="#4-SublimeText-的一些快捷键" class="headerlink" title="4. SublimeText 的一些快捷键"></a>4. SublimeText 的一些快捷键</h2><p>由于文章大部分都是使用 SublimeText 写的，Typroa 这种所见即所得的编辑器也不错，但对于掌握 MardkDown 语法没有帮助。这里摘录一些 SubLimeText 的快捷键。</p><blockquote><p><strong>Ctrl+Shift+P：打开命令面板</strong><br>Ctrl+P：搜索项目中的文件<br>Ctrl+G：跳转到第几行<br>Ctrl+W：关闭当前打开文件 CTRL+F4 也可以<br>Ctrl+Shift+W：关闭所有打开文件<br>Ctrl+Shift+V：粘贴并格式化<br>Ctrl+D：选择单词，重复可增加选择下一个相同的单词<br><strong>Ctrl+L：选择行，重复可依次增加选择下一行</strong><br><strong>Alt+Shift+数字：分屏显示</strong><br><strong>Ctrl+Shift+L：选择多行</strong><br><strong>Ctrl+Shift+D：复制粘贴当前行</strong><br><strong>Ctrl+X：删除当前行</strong><br><strong>Ctrl+Shift+左箭头 往左边选择内容</strong><br><strong>Shift+向左箭头 向左选择文本</strong><br><strong>Ctrl+B 编译，markDown 生成 html 文件</strong><br><strong>Alt+2 切换到第二个 Tab（打开的文件，记得 chrome 是 ctrl+2）</strong><br><strong>Ctrl+R：前往 对应的方法的实现*</strong><br><strong>快速加上[] 选中单词按 [ 即可</strong><br><strong>批量更改当前页面相同的单词 alt+F3 </strong><br><strong>Ctrl+Enter 在下一行插入新的一行</strong><br><strong>Ctrl+Shift+Enter 在上一行插入新的一行</strong><br><strong>Shift+ 向上箭头 向上选中多行</strong></p></blockquote><p>Ctrl+Shift+D：复制粘贴当前行 Ctrl+Shift+Enter：在当前行前插入新行<br>Ctrl+M：跳转到对应括号<br>Ctrl+U：软撤销，撤销光标位置<br>Ctrl+J：选择标签内容<br>Ctrl+F：查找内容<br>Ctrl+Shift+F：查找并替换<br>Ctrl+H：替换<br>Ctrl+N：新建窗口<br>Ctrl+K+B：开关侧栏<br>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身<br>Ctrl+F2：设置/删除标记<br>Ctrl+/：注释当前行<br>Ctrl+Shift+/：当前位置插入注释<br>Ctrl+Alt+/：块注释，并 Focus 到首行，写注释说明用的<br>Ctrl+Shift+A：选择当前标签前后，修改标签用的<br>F11：全屏<br>Shift+F11：全屏免打扰模式，只编辑当前文件<br>Alt+F3：选择所有相同的词<br>Alt+.：闭合标签<br>Shift+右键拖动：光标多不，用来更改或插入列内容<br>Alt+数字：切换打开第 N 个文件鼠标的前进后退键可切换 Tab 文件按 Ctrl，依次点击或选取，可需要编辑的多个位置按 Ctrl+Shift+上下键，可替换行</p><h2 id="5-title-不能以-开头"><a href="#5-title-不能以-开头" class="headerlink" title="5. title 不能以[]开头"></a>5. title 不能以[]开头</h2><p>前面加上###确实能够让字号变大，但不要写 4 个#，后面的字母会大小写不分的</p><h2 id="6-markdown-语法"><a href="#6-markdown-语法" class="headerlink" title="6. markdown 语法"></a>6. markdown 语法</h2><p>MarkDown 页面内部跳转<br><a href="http://www.cnblogs.com/JohnTsai/p/4027229.html">MarkDown 技巧：两种方式实现页内跳转</a></p><blockquote><p><em>一个星星包起来是斜体字</em><br><strong>两个星星包起来是粗体字</strong><br><strong><em>那么三个星星呢</em></strong></p></blockquote><h2 id="7-github-提交-commit-的时候显示-Emoji"><a href="#7-github-提交-commit-的时候显示-Emoji" class="headerlink" title="7.github 提交 commit 的时候显示 Emoji"></a>7.github 提交 commit 的时候显示 Emoji</h2><p>链接<a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/">在此</a></p><h2 id="8-换电脑了怎么办"><a href="#8-换电脑了怎么办" class="headerlink" title="8.换电脑了怎么办"></a>8.换电脑了怎么办</h2><p>亲测，把整个目录下所有文件全部复制粘贴到新电脑上，装上 node，然后装上 hexo，记得勾选添加到 PATH,然后就可以了。需要注意的是小文件比较多，所以复制粘贴可能要十几分钟。</p><h2 id="9-有时候写的代码会给你在每一行前面加上-true"><a href="#9-有时候写的代码会给你在每一行前面加上-true" class="headerlink" title="9. 有时候写的代码会给你在每一行前面加上 true"></a>9. 有时候写的代码会给你在每一行前面加上 true</h2><p>比如写一段 css 的代码时候，很多时候预览会给每一行前面加上一个 true，解决办法：用 TAB 键缩进即可</p><h2 id="10-markdown-live-是一个非常好用的-node-module"><a href="#10-markdown-live-是一个非常好用的-node-module" class="headerlink" title="10. markdown-live 是一个非常好用的 node module"></a>10. markdown-live 是一个非常好用的 node module</h2><p><a href="https://www.npmjs.com/package/markdown-live">项目地址</a><br><strong>前提是安装了 node</strong></p><blockquote><p>npm install -g markdown-live</p><p>md-live</p></blockquote><p><br><br><strong><em>编辑md文件的同时，保存就会同步刷新网页预览，非常好用</em></strong></p><h2 id="11-如果运行-hexo-g-生成的-index-html-是空的"><a href="#11-如果运行-hexo-g-生成的-index-html-是空的" class="headerlink" title="11. 如果运行 hexo g 生成的 index.html 是空的"></a>11. 如果运行 hexo g 生成的 index.html 是空的</h2><p>输出</p><blockquote><p>WARN No layout: tags/service/index.html<br>原因是 themes/文件夹下没有 clone 对应的主题</p></blockquote><p>换成travis之后，在travis.yml文件中，添加了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cache:</span><br><span class="line">  yarn: true</span><br><span class="line">  directories:</span><br><span class="line">  - node_modules</span><br><span class="line">  - themes</span><br></pre></td></tr></table></figure></p><p>cahe也就意味着后续，所有对于themes文件夹中的_config.yml文件的修改都不会生效。这也就是我一遍遍尝试更改theme文件夹中_config文件不生效的原因。<br>所以要么去掉cache ，要么自己写bash script一行行的改。</p><h2 id="12-markdown写表格"><a href="#12-markdown写表格" class="headerlink" title="12. markdown写表格"></a>12. markdown写表格</h2><p>直接在atom下面敲table，就会自动提示出来的<br>| Header One     | Header Two     |<br>| :————- | :————- |<br>| Item One       | Item Two       |</p><p>中间的虚线左边的冒号表示下面的单元格左对齐，冒号放右边就右对齐，左右都放一个就表示居中</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://yanhuili.github.io/2016/11/21/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%8A%80%E5%B7%A7/">Hexo 博文置顶技巧</a></li><li><a href="http://www.daqianduan.com/4820.html">SublimeText 快捷键</a></li><li><a href="http://itmyhome.com/markdown/article/syntax/emphasis.html">MarkDown 语法学起来很快的</a></li><li><a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/">travis 自动部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 hexo 写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的 blog 一个值得置顶的文章的话，我觉得一篇记录使用 hexo 过程中的一些解决问题的方法的文章是再合适不过的了。&lt;/br&gt;&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/40164340_40164340_1414330224938_mthumb.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://haldir65.github.io/tags/hexo/"/>
    
      <category term="置顶" scheme="https://haldir65.github.io/tags/%E7%BD%AE%E9%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>即刻备忘录</title>
    <link href="https://haldir65.github.io/2046/12/18/2017-12-18-random-new-thoughts/"/>
    <id>https://haldir65.github.io/2046/12/18/2017-12-18-random-new-thoughts/</id>
    <published>2046-12-18T22:58:14.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p>一个待办事项的仓库<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/girlfriend lake green nature water cold.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><ul><li><a href="https://juejin.im/post/5a0c1956f265da430a501f51">个人分享–web 前端学习资源分享</a></li><li><a href="https://huangxuan.me/2017/02/09/nextgen-web-pwa/">WPA 所代表的 Web 开发应是未来</a></li><li><a href="https://segmentfault.com/a/1190000003818163">js 循环闭包的解决方法</a></li><li>动态类型一时爽，代码重构火葬场</li><li>Promise 链式调用与终止，异常处理</li><li>iview，elementUi</li><li><a href="https://css-tricks.com/NetMag/FluidWidthVideo/Article-FluidWidthVideo.php">embeed video with iframe</a><a href="https://www.youtube.com/watch?v=g3F7Imjcd4k">AC2016腾讯前端技术大会 1 1 1 H5直播那些事</a></li><li>[ ] flex,grid</li><li><a href="https://sspai.com/post/31500">scheme 这东西算跨客户端平台的</a>，比如在 App 中调起支付宝(用的是 alipayqr://)。其实就是一个系统内跨应用调用。<a href="http://blog.csdn.net/qq_23547831/article/details/51685310">用法</a></li><li>[ ] Paul Irish from google</li><li>[ ] form表单可以跨域一个是历史原因要保持兼容性</li><li>[ ] 通过file input上传图片，原生ajax以及Ajax，自己搭建上传服务器<a href="https://zhuanlan.zhihu.com/p/24513281?refer=flask">大概能猜到暴风影音的局域网传输实现了</a></li><li>[ ] <a href="http://lokeshdhakar.com/projects/lightbox2/">lightbox一个很好看的js图片查看库</a></li><li>[ ] <a href="https://www.js-css.cn/a/jscode/album/2014/0915/1319.html">仿门户网站js相册</a>， <a href="https://www.js-css.cn/a/jscode/album/2014/0914/1318.html">js相册2</a></li><li>[ ] <a href="http://python.jobbole.com/82270/">八大排序算法的python实现</a></li><li>[ ] <a href="https://gist.github.com/quexer/3619237">如何编写 jQuery 插件</a></li><li>[ ] 用正则检测或者解析json(jQuery源码里有)</li><li>[ ]javascript中new FileReader()，以及canvas api,以及<a href="https://juejin.im/post/5a98c5c26fb9a028d82b34ee">js进行图片缩放和裁剪</a></li><li>[ ] Django部署个人网站(Gunicorn，Nginx)</li><li>[ ] Redux和Flux很像</li><li>[ ] URL Encoding,就是那个在网址里把字符转成百分号加上UTF-8的<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html">找到了阮一峰老师的解释</a></li><li>[ ] <a href="https://blog.csdn.net/u013553529/article/details/53856800">和网页类似，Activity也有一个referer的概念</a>，用于判断当前页面是由谁发起请求的</li><li>[ ] <a href="https://www.jianshu.com/p/a4ab102fa4ac">一个展示如何在宿主App中提取一个apk文件并加载代码和资源</a></li><li>[ ] <a href="https://www.jianshu.com/p/534741f5151c">libmp3lame移植到Android</a>,跟jni有关了</li><li>[ ]一直不会maven是在是太丢人了</li><li>[ ] 网易云音乐API</li></ul><h3 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h3><ul><li>用 express 转接一个知乎 Api，添加 Access-control-allow-origin,或许还可以用 redis 缓存数据结果（一个就好）由此想到一篇文章”How to use Pythonto build a restful Web Service”.只不过用的是 Tornado</li><li>git hook (github travis 持续集成，git push 会触发服务器的一系列操作)</li><li>基于前后端分离的理念，后台只负责提供数据，render page 的任务应该交给前端。（所以用 express-handlebars 写页面的方式写着很累）</li><li>集成 travis-ci，记得 after-success script 的结果并不会影响 build 的结果（即，after-success 执行脚本发生了错误，在日志里有输出 error，但实际显示的 build result 仍为 success），还有 travis 的输出 log 需要默认是折叠的，要展开才能看清楚，但在 afterSuccess 里面的指令的输出一定是有的。</li><li>随便放一个文件到/usr/bin/就可以直接调用这个文件名来起这个命令了吗？（实际操作只需要建立一个symbolic link就好了）</li><li>单个网卡最多65535个端口，c10K。<a href="https://www.zhihu.com/question/66553828">65536其实不是操作系统限制的，而是tcp协议就只给port留了2个bytes给source port，只留了2个bytes给destination port</a></li><li>oAuth2原理，其实流程上和很多客户端的微信登陆，新浪微博登陆很像的</li><li>在Android手机上尝试用一个unix domain socket用于localhost进程间ipc(其实就是保证端口号一致，给网络权限就好了)</li><li>写 groovy 用intelij全家桶就可以了，groovy的<a href="https://www.tutorialspoint.com/groovy/groovy_closures.htm">语法</a>其实没什么，主要是了解编译的流程和基本原理，这个需要看<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases">official doc</a></li><li><a href="https://github.com/JLLK/gradle-android-maindexlist-plugin">开发gradle plugin优化MultiDex</a>。长远来看，5.0以后的手机越来越多，MultiDex也不值得过于关注。</li><li>intelij 点击run 实际调用的command line是两个，一个是javac，编译出来的class文件放到了target文件夹，紧接着用java命令带上一大串classpath去调用主函数</li><li><a href="https://fucknmb.com/2017/05/11/Android-Studio-Library%E6%A8%A1%E5%9D%97%E4%B8%ADNative%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8Cdebug%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/">Android Studio 编译过程</a>，其实就是gradle assembleXXX 好了之后adb push到手机上，再安装，最后起主界面</li><li><a href="http://mouxuejie.com/blog/2016-06-21/multidex-compile-and-dex-source-analysis/">Android 编译及 Dex 过程源码分析</a></li><li><a href="http://www.wangyuwei.me/">如何调试 Android 打包流程？</a>，一个remote的事</li><li><a href="https://github.com/chenenyu/img-optimizer-gradle-plugin">一个用于优化 png 图片的 gradle 插件</a>，用来看 groovy 语法挺好的。以及 <a href="http://yuanfentiank789.github.io/2017/09/20/%E5%9C%A8AndroidStudio%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6/">How to write gradle plugin</a></li><li>XSS 攻击,DOM based和Stored XSS,基本上就是不要相信用户的输入，除了合法输入以外一律过滤掉</li></ul><ul><li>[其实就是socket io] websocket nodejs，局限性就是前后台都得用socket.io的库。前端是浏览器的话还好，app的话java,Android都有对应的实现</li></ul><h3 id="Good-For-Nothing"><a href="#Good-For-Nothing" class="headerlink" title="Good For Nothing"></a>Good For Nothing</h3><ul><li>[ ] 用GDB调试程序</li><li>[ ] npm install graphql(mostly a server side javascript stuff)</li><li>使用 express 模拟网络延迟</li><li><a href="https://juejin.im/post/5a157b7a5188257bfe457ff0">基于 Docker 打造前端持续集成开发环境</a></li><li>vS Code Vender Prefix plugin =&gt; auto prefix loader</li><li>前后端分离</li><li>sql漏洞</li><li><a href="https://cloud.tencent.com/developer/article/1004755">深入浅出腾讯云 CDN：缓存篇</a>不管SSD盘或者SATA盘都有最小的操作单位，可能是512B，4KB，8KB。如果读写过程中不进行对齐，底层的硬件或者驱动就需要替应用层来做对齐操作，并将一次读写操作分裂为多次读写操作。</li><li><a href="http://www.codebelief.com/article/2017/05/linux-command-line-curl-usage/">curl的几种常见用法</a></li><li>Android进程的<a href="https://juejin.im/post/5a646211f265da3e3f4cc997">加载流程</a></li><li>前后端同构</li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins">install nginx , jenkin ci, deploying nginx in docker(Http Load Balaning with Docker and nginx)</a></li><li><a href="https://juejin.im/post/59fffdb76fb9a0450a66bd58">nio stuff</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个待办事项的仓库&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/girlfriend lake green nature water cold.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>django学习记录</title>
    <link href="https://haldir65.github.io/2018/06/12/2018-06-12-django-the-pony/"/>
    <id>https://haldir65.github.io/2018/06/12/2018-06-12-django-the-pony/</id>
    <published>2018-06-12T22:40:01.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p>django is a pony<br><a id="more"></a><br>首先是几个常用命令<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --no-site-packages venv <span class="comment">## virtualenv好习惯</span></span><br><span class="line">source venv/bin/activate <span class="comment">## windows下应该不用source</span></span><br><span class="line">deactivate <span class="comment">## 退出</span></span><br><span class="line"></span><br><span class="line">django-admin startproject  mysite <span class="comment">## 创建项目</span></span><br><span class="line">python manage.py runserver <span class="comment">## 本地运行，默认8000端口</span></span><br><span class="line">python manage.py runserver <span class="number">8080</span>  <span class="comment">## 端口也可以自己决定</span></span><br><span class="line"></span><br><span class="line">python manage.py migrate <span class="comment">##创建了新的model，数据库需要建表</span></span><br><span class="line">python manage.py createsuperuser <span class="comment">## 创建admin</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是，runserver命令多数情况下能够实现自动reload，比如修改了一个py文件。但如果是创建了一个新的文件，还是需要重新跑一遍的</p><blockquote><p>settings.py中的SECRET_KEY不应该对外公布</p></blockquote><p>models简化了建表操作，添加的<strong>str</strong>方法类似于将Object类型的数据展示为String的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure></p><p>官方tutorial中的url和view的匹配也很简单<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s."</span> % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    response = <span class="string">"You're looking at the results of question %s."</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;django is a pony&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>网络通信手册-2</title>
    <link href="https://haldir65.github.io/2018/04/26/2018-04-26-network-manual-2/"/>
    <id>https://haldir65.github.io/2018/04/26/2018-04-26-network-manual-2/</id>
    <published>2018-04-26T13:00:02.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p>OkHttp通过ConnectionPool做到tcp连接复用（在Timeout内）,所以并不是每个http都去建立一个tcp连接<br>自定义通讯协议，使用java socket实现客户端和服务端。需要注意的是分包问题和黏包问题<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpglight-and-shadow-2411321_960_720.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h2 id="1-http请求中tcp连接的复用-深入okHttp-3-9-1的connectionPool以及引用计数"><a href="#1-http请求中tcp连接的复用-深入okHttp-3-9-1的connectionPool以及引用计数" class="headerlink" title="1. http请求中tcp连接的复用(深入okHttp 3.9.1的connectionPool以及引用计数)"></a>1. http请求中tcp连接的复用(深入okHttp 3.9.1的connectionPool以及引用计数)</h2><p>在高并发的请求连接情况下或者同个客户端多次频繁的请求操作，无限制的创建连接会导致性能低下。所以OkHttp做到了对socket的复用和及时清理。<br>从第四个intercepter开始<br>ConnectInterceptor.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">  Request request = realChain.request();</span><br><span class="line">  <span class="comment">// 第一步，获取streamAllocation</span></span><br><span class="line">  StreamAllocation streamAllocation = realChain.streamAllocation();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We need the network to satisfy this request. Possibly for validating a conditional GET.</span></span><br><span class="line">  <span class="keyword">boolean</span> doExtensiveHealthChecks = !request.method().equals(<span class="string">"GET"</span>);</span><br><span class="line">  <span class="comment">// 第二步，使用streamAllocation创建(或者复用)一个httpCodec模型（即处理header和body的读写策略，具体实现包括Http1Codec和Http2Codec）</span></span><br><span class="line">  HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);</span><br><span class="line">  <span class="comment">// 第三部，挑选出RealConnection,streamAllocation对象中的mConnection变量是在第二步里面赋值的</span></span><br><span class="line">  RealConnection connection = streamAllocation.connection();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> realChain.proceed(request, streamAllocation, httpCodec, connection);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以socket连接复用就在这句话里面了</p><blockquote><p>HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);</p></blockquote><p>StreamAllocation.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> HttpCodec <span class="title">newStream</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    OkHttpClient client, Interceptor.Chain chain, <span class="keyword">boolean</span> doExtensiveHealthChecks)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 省略部分，主要是这两句话</span></span><br><span class="line">      RealConnection resultConnection = findHealthyConnection(connectTimeout, readTimeout,</span><br><span class="line">               writeTimeout, connectionRetryEnabled, doExtensiveHealthChecks);</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      HttpCodec resultCodec = resultConnection.newCodec(client, chain, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>findHealthyConnection最终走到这里<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Attempt to get a connection from the pool.</span></span><br><span class="line"><span class="keyword">for</span> (RealConnection connection : connections) &#123;</span><br><span class="line">    <span class="keyword">if</span> (connection.isEligible(address, route)) &#123;</span><br><span class="line">      streamAllocation.acquire(connection, <span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否isEligible的方法在RealConnection里面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// If the non-host fields of the address don't overlap, we're done.</span></span><br><span class="line"> <span class="keyword">if</span> (!Internal.instance.equalsNonHost(<span class="keyword">this</span>.route.address(), address)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 只要DNS,port,protocols等host无关的参数中有一个不同就不能复用</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// If the host exactly matches, we're done: this connection can carry the address.</span></span><br><span class="line"> <span class="keyword">if</span> (address.url().host().equals(<span class="keyword">this</span>.route().address().url().host())) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// This connection is a perfect match.</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 这里说明host是相同的，上面的DNS什么的都是一样的，只有后面的path,query或者RequestBody不同，那么直接复用</span></span><br></pre></td></tr></table></figure></p><p>所以这里socket复用的方式是直接使用RealConnection持有Socket对象的引用，每一次在RealConnection的connect成功后，都会讲这个socket包装成一个BufferedSource(读取Response)和BufferedSink(往外写Request)，在timeout时长内，socket不会被关闭。既然缓存就一定会有清理</p><p>在上面的findHealthyConnection中有一段</p><blockquote><p>streamAllocation.acquire(connection, true);</p></blockquote><p>这里面的作用就是将这条请求（Stream）添加到当前连接承载的一个List&lt;Reference<StreamAllocation>&gt;中，也就是所谓的引用计数。提到这一点是要谈到清理的实现：<br>ConnectionPool中有一个Executor，目的就是执行一个cleanupRunnable的Runnable，这里面的清理操作大致如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">cleanup</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Find either a connection to evict, or the time that the next eviction is due.</span></span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">     <span class="keyword">for</span> (Iterator&lt;RealConnection&gt; i = connections.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">       RealConnection connection = i.next();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// If the connection is in use, keep searching.</span></span><br><span class="line">       <span class="keyword">if</span> (pruneAndGetAllocationCount(connection, now) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         inUseConnectionCount++; <span class="comment">//这条连接还在用</span></span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       idleConnectionCount++; <span class="comment">//这条连接现在空闲下来了</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// If the connection is ready to be evicted, we're done.</span></span><br><span class="line">       <span class="keyword">long</span> idleDurationNs = now - connection.idleAtNanos;<span class="comment">// 这条连接已经多久没用到了，假如超过了闲置时间(默认5纳秒)，就准备干掉这个socket</span></span><br><span class="line">       <span class="keyword">if</span> (idleDurationNs &gt; longestIdleDurationNs) &#123;</span><br><span class="line">         longestIdleDurationNs = idleDurationNs;</span><br><span class="line">         longestIdleConnection = connection;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">       <span class="comment">// We've found a connection to evict. Remove it from the list, then close it below (outside</span></span><br><span class="line">       <span class="comment">// of the synchronized block).</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// A connection will be ready to evict soon.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// All connections are in use. It'll be at least the keep alive duration 'til we run again.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// No connections, idle or in use.</span></span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 在这前面如果找不到一条该被干掉的连接，直接return</span></span><br><span class="line">   closeQuietly(longestIdleConnection.socket());<span class="comment">// 这里面就是socket.close了</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Cleanup again immediately.</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>观察一下ConnectionPool的构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Create a new connection pool with tuning parameters appropriate for a single-user application.</span></span><br><span class="line"><span class="comment">  * The tuning parameters in this pool are subject to change in future OkHttp releases. Currently</span></span><br><span class="line"><span class="comment">  * this pool holds up to 5 idle connections which will be evicted after 5 minutes of inactivity.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// 最多保留5条闲置RealConnection(也就是底层5个Socket),每个连接(Socket)如果超过5分钟没有接客，直接干掉</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(<span class="number">5</span>, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>所以，在创建Client的时候，可以把socket的缓存数量写大一点，也可以自定义一个ConnectionPool，只要实现了put,get,remove等标准的CRD操作就行了。简单来说就是自己设计一个Cache，我觉得可以根据实际的endpoint数量来设定缓存的socket的数量。</p><h2 id="2-自定义通讯协议"><a href="#2-自定义通讯协议" class="headerlink" title="2. 自定义通讯协议"></a>2. 自定义通讯协议</h2><p>http这种属于应用层的协议定义了每个数据包的结构是怎样的。在一些场合下，比如追求通讯速度，自定义加密手段，可能需要自定义结构体。<br>自己用Socket实现一套server-clinent通讯模型其实不难。<br>server这边，先确定自己对外公布的ip,port。然后起一个serverSocket，死循环去accept，每次accept到一个就添加到一个列表中，同时用线程池去执行一个死跑从socket中read的runnable。<br>clent这边，根据server的ip和port去连接上，client主动发消息(byte，int,String类型都行)，server这边读到信息，给出response，clinent再读取server的回话，就跟两个人之间你一句我一句说话一样。整个过程中 <strong>保持了长连接</strong>,只要任何一方没有手动设置socket.setSoTimeout的话，放一晚上都不会断开。</p><p>一个重点是双方发送的消息格式，即两个人交流的语言，如果全部是String的话，那就跟http很像了，当然任何数据格式从socket发出去最终都是以byte的形式发出去的(比如string会用utf-8或者gbk编码成byte数组)。<br>google的protoBuffer最重要的两个方法writeTo(object转成byte数组)和parseFrom(byte数组转成object)。</p><p><a href="https://blog.csdn.net/u010818425/article/details/53448817">基于Java Socket的自定义协议，实现Android与服务器的长连接（二）</a>，基于这篇文章，可以将数据类型定义为统一的protocol，protocol的要素包括:</p><blockquote><p>协议版本<br>数据类型（数据类协议，数据ack类协议，心跳类协议，心跳ack类协议）<br>数据长度(这很重要)<br>消息id<br>扩展字段</p></blockquote><p>协议版本要做到向后兼容，基本上只添加数据实体不删除数据实体就可以了<br>数据类型必需的三个要素是：<br><strong>长度，版本号，数据类型</strong> (比方说0表示业务数据，1表示数据ack,2表示心跳，3表示心跳ack)。<br>扩展字段类似于extra，可以用json或者别的什么去实现。</p><h2 id="3-tcp的分包和粘包问题"><a href="#3-tcp的分包和粘包问题" class="headerlink" title="3. tcp的分包和粘包问题"></a>3. tcp的分包和粘包问题</h2><p>tcp发包的时候，如果一个包过大，会拆成两个包发(分包)。如果太小，发送方会攒着和下一个包一起发（粘包）。作为接收方并不知道收到的包是一个完整的包还是被拆分的还是由两个包合并而来。</p><p>可能发生分包和粘包的原因包括：<br>1、要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</p><p>2、待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。</p><p>3、要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。</p><p>4、接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</p><p>我们都知道TCP属于传输层的协议，传输层除了有TCP协议外还有UDP协议。那么UDP是否会发生粘包或拆包的现象呢？答案是不会。UDP是基于报文发送的，从UDP的帧结构可以看出，在UDP首部采用了16bit来指示UDP数据报文的长度，因此在应用层能很好的将不同的数据报文区分开，从而避免粘包和拆包的问题。而TCP是基于字节流的，虽然应用层和TCP传输层之间的数据交互是大小不等的数据块，但是TCP把这些数据块仅仅看成一连串无结构的字节流，没有边界；另外从TCP的帧结构也可以看出，在TCP的首部没有表示数据长度的字段，基于上面两点，在使用TCP传输数据时，才有粘包或者拆包现象发生的可能。</p><p>虽然有分包和粘包问题，但是作为传输层的tcp能够保证发送出去的顺序和接收到的顺序是一致的。<br>那么基本的解决方法也很成熟了：</p><blockquote><p>1、发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。<br>2、发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。<br>3、可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。</p></blockquote><p>另外，http协议是通过添加换行符“ /r/n”这种形式来解决上述问题的<br>参考<a href="https://blog.csdn.net/Scythe666/article/details/51996268">TCP粘包，拆包及解决方法</a></p><h2 id="4-java这边socket的inputStream的read方法是会堵塞的"><a href="#4-java这边socket的inputStream的read方法是会堵塞的" class="headerlink" title="4. java这边socket的inputStream的read方法是会堵塞的"></a>4. java这边socket的inputStream的read方法是会堵塞的</h2><p><a href="https://blog.csdn.net/cauchyweierstrass/article/details/49552053">就是read方法一直不返回</a>，Socket只是一座桥梁，并不像本地文件一样，所以无法知道对方是否把话说完了。只有一方调用socket的close方法时才会发送EOF结束符，另一方的read = -1 才能成立，否则read方法就堵塞在那里。<br>InputStream有一个available()方法：<br>an estimate of the number of bytes that can be read (or skipped<br>over) from this input stream without blocking or  0 when it reaches the end of the input stream.<br>oves) 。不要把这个方法中的返回值当做这个流中所有可能数据的总和(多数情况下这种猜测是错误的)。</p><p>tcp的backlog变量</p><p>建立TCP连接时需要发送同步SYN报文，然后等待确认报文SYN+ACK，最后再发送确认报文ACK。</p><p><strong>如果应用层不能及时接受已被TCP接受的连接，这些连接可能占满整个连接队列，新的连接请求可能不被响应而会超时。如果一个连接请求SYN发送后，一段时间后没有收到确认SYN+ACK，TCP会重传这个连接请求SYN两次，每次重传的时间间隔加倍，在规定的时间内仍没有收到SYN+ACK，TCP将放弃这个连接请求，连接建立就超时了。</strong></p><p><a href="https://blog.csdn.net/sureyonder/article/details/5633647">JAVA Socket超时浅析</a></p><p>BufferedWriter的主要原理是内部保留了一个char[]的数组，每次外部调用write的时候，不是直接写到underlying 的output中，而是system.arrayCopy到自己的char[]数组中，等发现char[]数组填满了，才去flushBuffer，就是把所有缓存的内容一次性写到底层的outputStream中。因为outputStream是一个字节一个字节去写的，每次写都要调用io操作，而io操作是很耗费资源的。所以bufferedWriter一次性写大量的数据，能够有效减少io次数，提高性能。</p><p><a href="https://zhuanlan.zhihu.com/p/36414915">以TCP/IP协议为例，如何通过wireshark抓包分析？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OkHttp通过ConnectionPool做到tcp连接复用（在Timeout内）,所以并不是每个http都去建立一个tcp连接&lt;br&gt;自定义通讯协议，使用java socket实现客户端和服务端。需要注意的是分包问题和黏包问题&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpglight-and-shadow-2411321_960_720.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Android手册-4</title>
    <link href="https://haldir65.github.io/2018/04/13/2018-04-13-android-cheat-sheet-four/"/>
    <id>https://haldir65.github.io/2018/04/13/2018-04-13-android-cheat-sheet-four/</id>
    <published>2018-04-13T13:53:52.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/street lights dark night car city bw.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><h2 id="1-在子线程中显示一个Toast是亲测可行的"><a href="#1-在子线程中显示一个Toast是亲测可行的" class="headerlink" title="1. 在子线程中显示一个Toast是亲测可行的"></a>1. 在子线程中显示一个Toast是亲测可行的</h2><p>不是那种post到主线程的方案<br><a href="https://www.zhihu.com/question/51099935">其实知乎上已经有了讨论</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     Context mContext;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ToastThread</span><span class="params">(Context mContext)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.mContext = mContext;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         Looper.prepare();</span><br><span class="line">         String threadId = String.valueOf(Thread.currentThread().getId());</span><br><span class="line">         Toast.makeText(mContext,threadId,Toast.LENGTH_SHORT).show();</span><br><span class="line">         Looper.loop();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/toast_transact.JPG" alt=""><br>其实Toast的原理就是通过IPC向NotificationManager请求加入队列，后者会检测权限xxxx。然后通过上面的ipc回调到客户端的onTransact中，这里也就是走到了Toast.TN这个static inner class的handler中，发送一个Message，handlerMessage中完成了WindowManager.addView的操作<br>需要注意的是，这里还是子线程，所以确实可能存在多条线程同时操作UI的现象。从形式上看，主线程和子线程中的Toast对象各自通过自己的Looper维护了一个消息循环队列，这其中的消息类型包括show,hide和cancel。所以可能存在多条线程同时调用WindowManager的方法，View也是每条线程各自独有的，最坏的场景莫过于两条线程同时各自添加了一个View到window上。另外，子线程中引入looper的形式也造成了子线程实质上的阻塞，当然可以直接当成一个handlerThread来用。<br>所以不是很推荐这么干，只是说可以做。<br><strong>Toast.TN.handleShow</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      mWM.addView(mView, mParams);</span><br><span class="line">      trySendAccessibilityEvent();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (WindowManager.BadTokenException e) &#123;</span><br><span class="line">      <span class="comment">/* ignore */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-ContentProvider的onCreate要早于Application的onCreate发生"><a href="#2-ContentProvider的onCreate要早于Application的onCreate发生" class="headerlink" title="2.ContentProvider的onCreate要早于Application的onCreate发生"></a>2.ContentProvider的onCreate要早于Application的onCreate发生</h2><p>比如ArchitectureComponent中的lifeCycle就是这么干的，写了个dummpy的contentProvider，在provider的onCreate中去loadLibrary.</p><h2 id="3-看到一个关于apk反编译和重新打包的帖子，非常好用"><a href="#3-看到一个关于apk反编译和重新打包的帖子，非常好用" class="headerlink" title="3. 看到一个关于apk反编译和重新打包的帖子，非常好用"></a>3. 看到一个关于apk反编译和重新打包的帖子，非常好用</h2><p><a href="https://www.jianshu.com/p/792a08d5452c">Android apk反编译及重新打包流程</a>，关键词apktool。<br>但是，360加固之后的apk是不能用dex2jar查看java代码的。</p><h3 id="4-从base-apk谈到apk安装的过程"><a href="#4-从base-apk谈到apk安装的过程" class="headerlink" title="4.从base.apk谈到apk安装的过程"></a>4.从base.apk谈到apk安装的过程</h3><p><a href="https://www.jianshu.com/p/ae45af3c3098">APK安装过程</a>。<br>之前无意间在FileExplorer中看到了base.apk这个文件，由此展开apk安装过程的研究。</p><h2 id="5-关于模块化和项目重构"><a href="#5-关于模块化和项目重构" class="headerlink" title="5.关于模块化和项目重构"></a>5.关于模块化和项目重构</h2><p>很多关于Android甚至java项目的重构的文章都会最终提到两条：<br>面向接口编程 -&gt; 依赖注入(IOC)<br>然后跟上一大堆专业分析和没什么用的废话。<br>这俩在java的领域翻译过来就是：<br>在A模块中用Dagger2生成B模块中定义的interface的impl实例。<br><del>其实不用Dagger2也行，就是每次在B模块的生命周期开始时准备一个HashMap<interfaceClass,ImplClass>这样的一大堆键值对，然后在A模块中根据想要的interface class去找impl class，用反射去创建，生产环境肯定不能这么干。</del><br>在Dagger2中大致是这么干的：</p><p>先声明好B模块对外提供的接口，以下这俩都在另一个module中，A module通过gradle引用了B模块<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreImpl</span> <span class="keyword">implements</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dummy products"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>B模块中再提供Component和provide的module<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = StoreModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StoreComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">Store <span class="title">eject</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Store <span class="title">provideStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StoreImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>A模块中最终使用的方式应该是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Store store = DaggerStoreComponent.builder().build().eject();</span><br></pre></td></tr></table></figure></p><h2 id="6-写sqlite语句的时候总是容易出小错误"><a href="#6-写sqlite语句的时候总是容易出小错误" class="headerlink" title="6.写sqlite语句的时候总是容易出小错误"></a>6.写sqlite语句的时候总是容易出小错误</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//错误写法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table_one ( _id <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT, studentName <span class="built_in">TEXT</span>,studentNick <span class="built_in">TEXT</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> table_one (studentName,studentNick) <span class="keyword">VALUES</span> ( name1,nick1)</span><br><span class="line">//  SQLiteException: <span class="keyword">no</span> such <span class="keyword">column</span>: name1 (code <span class="number">1</span>) 报错</span><br><span class="line"></span><br><span class="line">//正确写法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table_one ( _id <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT, studentName <span class="built_in">TEXT</span>,studentNick <span class="built_in">TEXT</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> table_one (studentName,studentNick) <span class="keyword">VALUES</span> ( <span class="string">'name1'</span>,<span class="string">'nick1'</span>)</span><br></pre></td></tr></table></figure><p>唯一的区别就在于name1和nick1这俩用 <strong>单引号单引号单引号</strong> 包起来了。</p><h2 id="7-Webview的坑的总结"><a href="#7-Webview的坑的总结" class="headerlink" title="7. Webview的坑的总结"></a>7. Webview的坑的总结</h2><p><a href="http://iluhcm.com/2017/12/10/design-an-elegant-and-powerful-android-webview-part-one/">WebView的那些坑</a></p><h2 id="8-BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException"><a href="#8-BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException" class="headerlink" title="8.BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException"></a>8.BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/street lights dark night car city bw.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React语法及Redux实践笔记</title>
    <link href="https://haldir65.github.io/2018/03/17/2018-03-17-react-cheatSheet/"/>
    <id>https://haldir65.github.io/2018/03/17/2018-03-17-react-cheatSheet/</id>
    <published>2018-03-17T23:56:45.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/food%20knife%20green%20kitchen%20city%20life.jpg?imageView2/2/w/600" alt=""><br>介绍React语法及一些Redux的使用方法<br><a id="more"></a></p><p><strong><em>Take Away</em></strong><br>基本的流程就是创建一个继承React.Component的class，设定state，添加点击事件。<br>最重要的是在render()函数中返回一个element，比如说这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> myelement= <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>hello 这就是jsx语法 there<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">       <span class="keyword">return</span>(</span><br><span class="line">           <span class="comment">// &lt;div&gt;</span></span><br><span class="line">           <span class="comment">//     &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125;/&gt;</span></span><br><span class="line">           <span class="comment">//     &#123;button&#125;</span></span><br><span class="line">           <span class="comment">// &lt;/div&gt;</span></span><br><span class="line">           myelement <span class="comment">// 这里把html tag提取到外面也行，写在里面也行，混着写的话，&#123;myelement&#125;，加上大括号就是了</span></span><br><span class="line">           <span class="comment">// 官方guide上的原话是: You may embed any expressions in JSX by wrapping them in curly braces(大括号).</span></span><br><span class="line"></span><br><span class="line">       )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return里面只能返回一个tag</span></span><br></pre></td></tr></table></figure></p><p><strong><em>props是只读的</em></strong></p><p><strong><em>JSX allows embedding any expressions ,就是说jsx语句中，大括号包起来的地方，什么js都能写</em></strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>yarn global add create-react-app<br>create-react-app my-app<br>cd my-app<br>npm start</p></blockquote><h2 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h2><p>在html文件中添加这样一个tag<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在index.js中添加这样一段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure></p><p><strong>可以认为ReactDOM.render方法就是程序的入口</strong></p><h2 id="Element和Component的概念"><a href="#Element和Component的概念" class="headerlink" title="Element和Component的概念"></a>Element和Component的概念</h2><p>Element感觉上就像一个或者多个UI控件的集合<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>; <span class="comment">//这就算一个Element,用于描述将要展示在屏幕上的效果</span></span><br></pre></td></tr></table></figure></p><p>Component就像javaScript函数一样，它们接收任意输入，输出React element以显示在屏幕上。需要注意的是，Component的名字一定要 <strong>首字母大写</strong> ，因为React把小写字母开头的当做正常的html element来处理了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个返回Element的函数就算作是Component了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者用es6语法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有就是props是immutable的，想要改的话用State吧。也即Component应该表现为纯粹的function，不修改状态。</p><h2 id="State的更改"><a href="#State的更改" class="headerlink" title="State的更改"></a>State的更改</h2><p>State是在constructor里面初始化的，想要更改其中的值的话，不能直接赋值，需要使用setState方法</p><blockquote><p>this.setState({comment: ‘Hello’});</p></blockquote><p>但有时State的更新是异步的，所以要使用两个参数的setState方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h2 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1 className=<span class="string">"greeting"</span>&gt;</span><br><span class="line">    Hello, world!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 这俩其实是一样的</span></span><br><span class="line"><span class="regexp">const element = React.createElement(</span></span><br><span class="line"><span class="regexp">  'h1',</span></span><br><span class="line"><span class="regexp">  &#123;className: 'greeting'&#125;,</span></span><br><span class="line"><span class="regexp">  'Hello, world!'</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ jsx语句最终都是被用在component的return语句中的：</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function WarningBanner(props) &#123;</span></span><br><span class="line"><span class="regexp">  if (!props.warn) &#123;</span></span><br><span class="line"><span class="regexp">    return null;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="warning"&gt;</span></span><br><span class="line"><span class="regexp">      Warning!</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部更新"><a href="#局部更新" class="headerlink" title="局部更新"></a>局部更新</h3><p>页面发生变化时，React只更新需要刷新的部分</p><h2 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  fetchPosts().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      posts: response.posts</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  fetchComments().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      comments: response.comments</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The link was clicked.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">      Click me</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const element = &lt;h1&gt;Hello, world&lt;/</span>h1&gt;;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">ActionLink</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者是使用箭头函数 以及  Function.prototype.bind</span></span><br><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在一个Component中，时间监听最后要加上bind(this)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">temperature</span>: <span class="string">''</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">temperature</span>: e.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.state.temperature;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;fieldset&gt;</span><br><span class="line">        &lt;legend&gt;Enter temperature <span class="keyword">in</span> Celsius:<span class="xml"><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span></span><br><span class="line">        &lt;input</span><br><span class="line">          value=&#123;temperature&#125;</span><br><span class="line">          onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;BoilingVerdict</span><br><span class="line">          celsius=&#123;<span class="built_in">parseFloat</span>(temperature)&#125; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;<span class="regexp">/fieldset&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="组件之间通信"><a href="#组件之间通信" class="headerlink" title="组件之间通信"></a>组件之间通信</h2><p>In React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. 也就是说，要把state提取到最近的公用父组件中。事件发生时，子组件调用this.props.onXXX(由父组件提供)通知父组件，子组件不再维护自身state，父组件的state成为两个子组件唯一的共有的single source of truth</p><p>渲染list的时候记得要加上一个key，这是规定<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">  &lt;li&gt;&#123;number&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/正确</span></span><br><span class="line"><span class="regexp">const listItems = numbers.map((number) =&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key=&#123;number.toString()&#125;&gt;&#123;number&#125;&lt;/</span>li&gt;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//一个List element中的list元素应当具有独一无二的key，但不同List element实例之间，元素的key没必要遵守这一规则</span></span><br></pre></td></tr></table></figure></p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><blockquote><p>Super expression must either be null or a function, not undefined<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 应该是</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/food%20knife%20green%20kitchen%20city%20life.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;介绍React语法及一些Redux的使用方法&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>mysql填坑记录</title>
    <link href="https://haldir65.github.io/2018/02/04/2018-02-04-mysql-metup/"/>
    <id>https://haldir65.github.io/2018/02/04/2018-02-04-mysql-metup/</id>
    <published>2018-02-04T21:37:37.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/fuchsia-973x547.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a><br>关系型数据库很多如，MS Access, SQL Server, MySQL<br>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”，NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。典型的代表如MongoDb.</p><p>读音：<br>MySQL is pronounced as “my ess-que-ell,” in contrast with SQL, pronounced “sequel.”</p><p>RDBMS(关系型数据库)<br>RDBMS stands for Relational Database Management System. RDBMS is the basis for SQL, and for all modern database systems like MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.</p><p><a href="https://www.tutorialspoint.com/sql/sql-select-query.htm">sql tutorials</a></p><p> mySql相关</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial">How to Install MySQL on Ubuntu</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql">how-to-create-a-new-user-and-grant-permissions-in-mysql</a><br><a href="https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial">a-basic-mysql-tutorial</a></p><blockquote><p>mysql -u root -p ## 以root身份登录</p></blockquote><p><a href="https://stackoverflow.com/questions/4932503/how-to-kill-mysql-connections">Too many connections</a><br>mysql连接多了容易爆内存，关掉的<a href="https://stackoverflow.com/questions/11091414/how-to-stop-mysqld">方法</a></p><blockquote><p>mysqladmin -u root -p shutdown ## 关闭<br>sudo /etc/init.d/mysql restart ## 重启</p></blockquote><p><a href="https://stackoverflow.com/questions/1559955/host-xxx-xx-xxx-xxx-is-not-allowed-to-connect-to-this-mysql-server">host-xxx-xx-xxx-xxx-is-not-allowed-to-connect-to-this-mysql-server</a></p><blockquote><p>1。 改表法。<br>可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称”%”</p></blockquote><p><a href="https://stackoverflow.com/questions/119008/cant-connect-to-mysql-server-on-localhost-10061">windows登录出错报10061的解决方式</a><br>services.msc =&gt; 找到MySQL57 =&gt; 右键（启动）</p><p>配置文件的位置:</p><blockquote><p>nano /etc/mysql/mysql.conf.d/mysqld.conf</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host = <span class="string">'%'</span> <span class="keyword">where</span> <span class="keyword">user</span> = <span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">select</span> host, <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><ol><li>授权法。</li></ol><p>例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'myuser'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mypassword'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="keyword">FLUSH</span>   <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p><p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器，并使用mypassword作为密码<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'myuser'</span>@<span class="string">'192.168.1.3'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mypassword'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">FLUSH</span>   <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p><p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器的dk数据库，并使用mypassword作为密码<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> dk.* <span class="keyword">TO</span> <span class="string">'myuser'</span>@<span class="string">'192.168.1.3'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mypassword'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">FLUSH</span>   <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p><h2 id="HeidiSQL-中创建database记得选择character-set-‘utf-8’"><a href="#HeidiSQL-中创建database记得选择character-set-‘utf-8’" class="headerlink" title="HeidiSQL 中创建database记得选择character set ‘utf-8’"></a>HeidiSQL 中创建database记得选择character set ‘utf-8’</h2><p>Collation: ‘utf_8_general_cli’;</p><h2 id="CURD-COMMANDS"><a href="#CURD-COMMANDS" class="headerlink" title="CURD COMMANDS"></a>CURD COMMANDS</h2><p>首先要注意的是所有sql语句最后面都要跟一个分号<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> dbname;</span><br><span class="line"><span class="keyword">USE</span> dbname;</span><br><span class="line"></span><br><span class="line">## show how many tables are there in this table</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line"></span><br><span class="line">## create table</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> potluck (<span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,<span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),food <span class="built_in">VARCHAR</span>(<span class="number">30</span>),confirmed <span class="built_in">CHAR</span>(<span class="number">1</span>),signup_date <span class="built_in">DATE</span>);</span><br><span class="line"></span><br><span class="line">## show everyting</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> potluck;</span><br><span class="line"><span class="keyword">SELECT</span> user_id <span class="keyword">FROM</span> potluck;</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">FROM</span> potluck; // 这么写sql 语法有误，必须声明想要选出那些column</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## how does potluck look like?</span><br><span class="line"><span class="keyword">DESCRIBE</span> potluck;</span><br><span class="line"></span><br><span class="line">## ADD STUFF</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`potluck`</span> (<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`food`</span>,<span class="string">`confirmed`</span>,<span class="string">`signup_date`</span>) <span class="keyword">VALUES</span> (<span class="literal">NULL</span>, <span class="string">"John"</span>, <span class="string">"Casserole"</span>,<span class="string">"Y"</span>, <span class="string">'2012-04-11'</span>);</span><br><span class="line">### 亲测，在heidisql中这么输入也能insert一行,所以这些冒号也不是必须的</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (user_id,login,<span class="keyword">password</span>,email,date_added,date_modified) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">"firstlogin"</span>,<span class="string">"dumbpasws"</span>,<span class="string">"sample@email.com"</span>,<span class="string">'2012-03-09'</span>,<span class="string">'2018-01-09'</span>);</span><br><span class="line"></span><br><span class="line">## update stuff</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`potluck`</span> <span class="keyword">SET</span> <span class="string">`confirmed`</span> = <span class="string">'Y'</span> <span class="keyword">WHERE</span> <span class="string">`potluck`</span>.<span class="string">`name`</span> =<span class="string">'Sandy'</span>;</span><br><span class="line">UPDATE user SET user_id = 11 WHERE user_id =10;## 亲测这么干也没问题</span><br><span class="line">SELECT user_id FROM user WHERE user_nick = 'john' OR user_id &gt; 10; ## 精确匹配字符串用等号</span><br><span class="line"></span><br><span class="line">UPDATE user SET salary= 10000 WHERE salary is NULL;## 更新的时候用=号，判断为空用IS NULL ，对应的也有IS NOT NULL.</span><br><span class="line">UPDATE user SET salary= 22000 WHERE salary &lt; 20000; ## 亲测这么干也行</span><br><span class="line"></span><br><span class="line">## 这样的条件语句还有很多，这个应该叫做Operator(操作符)</span><br><span class="line">操作符主要分为四类</span><br><span class="line">Arithmetic operators  （数学加减乘除）</span><br><span class="line">Comparison operators（比较大小的）</span><br><span class="line">Logical operators （逻辑运算符） AND， ANY, BETWEEN,EXISTS,LIKE,OR ,IS NULL ,IS NOT NULL, UNIQUE</span><br><span class="line">Operators used to negate conditions</span><br><span class="line"></span><br><span class="line">挑几个不容易理解的</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> todo <span class="keyword">WHERE</span> user_id = <span class="number">1</span>) ;</span><br><span class="line">## UNIQUE是用在创建表或者改表结构的:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">Id_P <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">UNIQUE</span> (Id_P)</span><br><span class="line">)</span><br><span class="line">// <span class="keyword">unique</span>的意思很明显，不能允许出现同样的<span class="keyword">row</span></span><br><span class="line"></span><br><span class="line">如果在<span class="keyword">SELECT</span>的时候想要去重，用<span class="keyword">DISTINCT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">content</span> <span class="keyword">FROM</span> todo;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span>  todo; // 看下当前数据库有多少行了</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">content</span>) <span class="keyword">FROM</span>  todo; // 去重后看下有多少行</span><br><span class="line"></span><br><span class="line">### 模糊查询</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">user</span>] <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">'%三%'</span>; //将会把u_name为“张三”，“张猫三”、“三脚猫”，“唐三藏”等等有“三”的记录全找出来。</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">user</span>] <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">'_三_'</span>;  //只找出“唐三藏”这样u_name为三个字且中间一个字是“三”的；_ ： 表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字</span><br><span class="line">符长度语句：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">user</span>] <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">'[张李王]三'</span> ; 将找出“张三”、“李三”、“王三”（而不是“张李王三”）；</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">user</span>] <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">'[^张李王]三'</span>; 将找出不姓“张”、“李”、“王”的“赵三”、“孙三”等；</span><br><span class="line"></span><br><span class="line">## orderBy</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMERS <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">NAME</span> <span class="keyword">DESC</span>; //就是把查出来的结果排序，按照名称的ASIC顺序倒序排列</span><br><span class="line"></span><br><span class="line">## groupBy</span><br><span class="line">GROUP BY的顺序在orderBy前面，意思就是把相同结果的整合成一行</span><br><span class="line">基本的语法是</span><br><span class="line"><span class="keyword">SELECT</span> column_one <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span></span><br><span class="line">  column_two = <span class="string">""</span> <span class="keyword">AND</span> ...</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> column_one</span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> column_two;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, <span class="keyword">SUM</span>(SALARY) <span class="keyword">FROM</span> CUSTOMERS</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">NAME</span>; // 这里还用了sum函数，计算CUSTOMER表中各个用户的salary总和，name相同的算作一个合并起来。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## we want to add a column to table</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> potluck <span class="keyword">ADD</span> email <span class="built_in">VARCHAR</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">## this way we add to a specific position</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> potluck <span class="keyword">ADD</span> email <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">AFTER</span> <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line">## drop this column</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> potluck <span class="keyword">DROP</span> email;</span><br><span class="line"></span><br><span class="line">## how about delete this row</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> potluck  <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'Sandy'</span>;</span><br><span class="line"></span><br><span class="line">## 从删库到跑路</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span>  table_name; //将这张表的内容全部抹掉</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name; //删除这个数据库</span><br></pre></td></tr></table></figure></p><h3 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h3><p>signed or unsigned.(有符号或者无符号的)</p><ul><li>Numeric<br>INT (signed : -2147483648 to 2147483647  or unsigned: 0 to 4294967295.)，2的32次方(4 byte)<br>TINYINT(signed : -128 to 127, or unsigned: from 0 to 255)，2的八次方(1 byte)<br>BIGINT( signed :-32768 to 32767, or unsigned: from 0 to 65535.)，2的四次方(2 byte)<br>FLOAT(只能是signed)，<br>DOUBLE，<br>DECIMAL</li><li>Date and Time<br>DATE (1973-12-30), DATETIME (1973-12-30 15:30:00),TIMESTAMP (19731230153000),TIME (HH:MM:SS),</li><li>String Types.<br>CHAR(fixed-length，长度固定，不强制要求设置长度，默认1) ,<br>VARCHAR(ariable-length string between 1 and 255，长度可变， ),<br>BLOB or TEXT(BLOBs case sensitive，TEXT not case sensitive,这俩不需要设定长度，最大长度65535 )<br>ENUM (置顶的枚举类型中之一，可以为NULL)<br><del>BOOLEAN类型是不存在的</del>用TINYINT就好了，0表示false，1表示true;</li></ul><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>constraint的一个例子，A表的一个column引用了B表的一个id键作为foreign key.这时候如果想往A表里添加数据，假如尝试添加的这个外键在B表中不存在，会无法执行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> todo (todo_id,user_id,<span class="keyword">content</span>,completed,date_added,date_modified) <span class="keyword">VALUES</span> (<span class="number">102</span>,<span class="number">11</span>,<span class="string">"random stufffssss"</span>,<span class="number">0</span>,<span class="string">"2012-02-09"</span>,<span class="string">"2016-03-27"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="Joins-clause-从多个表中进行查询，对共有的属性进行操作"><a href="#Joins-clause-从多个表中进行查询，对共有的属性进行操作" class="headerlink" title="Joins clause 从多个表中进行查询，对共有的属性进行操作"></a>Joins clause 从多个表中进行查询，对共有的属性进行操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">NAME</span>, AGE, AMOUNT <span class="keyword">FROM</span> CUSTOMERS, ORDERS <span class="keyword">WHERE</span>  CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br><span class="line"></span><br><span class="line">inner join(查的是customer表，但查出来的结果里有来自ORDERS的column)</span><br><span class="line">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class="line">   FROM CUSTOMERS</span><br><span class="line">   INNER JOIN ORDERS</span><br><span class="line">   ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>这一部分应该属于sql的函数了<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>();  // YYYY-MM-DD格式 2018-02-10</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>(); // 2018-02-10 15:49:10</span><br><span class="line">想要时间戳的话可以这么干</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">unix_timestamp</span>(); // 1518249025</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">unix_timestamp</span>(<span class="string">'2008-08-08'</span>);  // 1218124800</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">unix_timestamp</span>(<span class="keyword">CURDATE</span>());   //1518192000</span><br><span class="line"></span><br><span class="line">// <span class="keyword">insert</span>一行的时候自动设置插入的时间戳，当然简单了</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> Student</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  DateOfAddmission datetime <span class="keyword">default</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="建索引-Advanced-sql"><a href="#建索引-Advanced-sql" class="headerlink" title="建索引(Advanced sql)"></a>建索引(Advanced sql)</h3><p>常常听后台的人说，这个sql查询太慢了，要建索引哈。<br>但是索引对于提高查询性能也不是万能的，也不是建立越多的索引就越好。索引建少了，用 WHERE 子句找数据效率低，不利于查找数据。索引建多了，不利于新增、修改和删除等操作，因为做这些操作时，SQL SERVER 除了要更新数据表本身，还要连带立即更新所有的相关索引，而且过多的索引也会浪费硬盘空间。</p><p>查了下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PersonIndex</span><br><span class="line"><span class="keyword">ON</span> Person (LastName) ; //名为 "PersonIndex"，在 Person 表的 LastName 列：</span><br></pre></td></tr></table></figure></p><p>sql建索引主要是为了查找的时候能够跟翻字典一样快。一般来说，主键，外键应该建索引，频繁更新的列就不要更新索引了<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> salary_index <span class="keyword">ON</span> COMPANY(salary); // 创建索引</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COMPANY INDEXED <span class="keyword">BY</span> salary_index <span class="keyword">WHERE</span> salary &gt; <span class="number">5000</span>; //创建好了之后就要根据index来查了</span><br></pre></td></tr></table></figure></p><h3 id="Transaction-事务"><a href="#Transaction-事务" class="headerlink" title="Transaction 事务"></a>Transaction 事务</h3><ul><li><p>Atomicity − ensures that all operations within the work unit are completed successfully. Otherwise, the transaction is aborted at the point of failure and all the previous operations are rolled back to their former state.</p></li><li><p>Consistency − ensures that the database properly changes states upon a successfully committed transaction.</p></li><li><p>Isolation − enables transactions to operate independently of and transparent to each other.</p></li><li><p>Durability − ensures that the result or effect of a committed transaction persists in case of a system failure.</p></li></ul><p>论ACID是什么<br>事务的写法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> CUSTOMERS</span><br><span class="line">   <span class="keyword">WHERE</span> AGE = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span>; //回滚</span><br><span class="line"><span class="keyword">COMMIT</span>; //提交更改</span><br><span class="line"><span class="keyword">SAVEPOINT</span> SAVEPOINT_NAME;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> SAVEPOINT_NAME;</span><br></pre></td></tr></table></figure></p><h2 id="language-support"><a href="#language-support" class="headerlink" title="language support"></a>language support</h2><p><a href="https://github.com/mysqljs/mysql">using mysql in node js</a><br>java的版本<a href="https://spring.io/guides/gs/accessing-data-mysql/">accessing-data-mysql</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vae.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCtest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据库连接地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String URL = <span class="string">"jdbc:mysql://localhost:3306/JDBCdb"</span>;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String USERNAME = <span class="string">"root"</span>;</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String PASSWORD = <span class="string">"smyh"</span>;</span><br><span class="line">    <span class="comment">//驱动类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//insert(p);</span></span><br><span class="line">        <span class="comment">//update(p);</span></span><br><span class="line">        <span class="comment">//delete(3);</span></span><br><span class="line">        insertAndQuery();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法：使用PreparedStatement插入数据、更新数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertAndQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVER);</span><br><span class="line">            conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line">            String sql1 = <span class="string">"insert into user(name,pwd)values(?,?)"</span>;</span><br><span class="line">            String sql2 = <span class="string">"update user set pwd=? where name=?"</span>;</span><br><span class="line">            PreparedStatement ps = conn.prepareStatement(sql1); <span class="comment">// 这行其实比较费性能</span></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"smyhvae"</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>, <span class="string">"007"</span>);            </span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            ps = conn.prepareStatement(sql2);</span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"008"</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>, <span class="string">"smyh"</span>);            </span><br><span class="line">            ps.executeUpdate();            </span><br><span class="line"></span><br><span class="line">            ps.close();</span><br><span class="line">            conn.close();            </span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>python的版本<a href="http://www.runoob.com/python/python-mysql.html">python-mysql</a></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>SQLite支持事务，这就以外这需要在并发环境下，保持事务的ACID特性。Sqlite的锁实现基于文件锁，对于Linux系统，文件锁主要包含协同锁和强制锁。</p><p><a href="https://stackoverflow.com/questions/8442147/how-to-delete-or-add-column-in-sqlite">sqlite不支持删除column,确定无疑</a><br>SQLite supports a limited subset of ALTER TABLE. The ALTER TABLE command in SQLite allows the user to rename a table or to add a new column to an existing table. It is not possible to rename a column, remove a column, or add or remove constraints from a table.<br>It is not possible to rename a column, remove a column, or add or remove constraints from a table。//更改约束也不行</p><p>alter table record drop column name;  //报错</p><p>//一种周转的方法<br>create table temp as select recordId, customer, place, time from record where 1 = 2;  //复制record的表结构，不包含内容<br>drop table record;<br>alter table temp rename to record;  </p><p>// Sqlite的优化手段</p><ol><li>beginTransaction</li><li>DB.compileStatement(“DELETE FROM users WHERE first_name = ?”)//节省了每次parse sql语句的开销</li><li><a href="https://www.jianshu.com/p/faa5e852b76b">sqlite一次插入多条记录的优化方法</a>，使用union</li></ol><h3 id="Another-choice"><a href="#Another-choice" class="headerlink" title="Another choice"></a>Another choice</h3><p><a href="https://mariadb.org/">mariadb</a><br>PostgreSQL</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/fuchsia-973x547.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gradle command记事本</title>
    <link href="https://haldir65.github.io/2018/02/03/2018-02-03-gradle-command-explained/"/>
    <id>https://haldir65.github.io/2018/02/03/2018-02-03-gradle-command-explained/</id>
    <published>2018-02-03T14:46:09.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/street lights dark night car city.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><p><a href="https://gradle.org/">Gradle</a>插件开发，官方推荐的具备first class supprot 的IDE包括Android Studio和Intelij Idea等。<br>Gradle的编译流程分为三步<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html">build_lifecycle</a><br>Initialization -&gt; Configuration -&gt; Execution<br>执行的单位叫做<a href="https://docs.gradle.org/current/userguide/more_about_tasks.html">Task</a><br><a href="https://docs.gradle.org/current/userguide/build_environment.html">Gradle作为一个program，可以为编译环境设置的参数很多</a></p><blockquote><p>Android dependency ‘com.android.support:support-v4’ has different version for the compile (21.0.3) and runtime (26.1.0) classpath. You should manually set the same version via DependencyResolution</p></blockquote><p>一些常用的gralde的command 如下</p><blockquote><p>gradlew :app:dependencies –configuration releaseCompileClasspath<br>//前面这个:app只是代表app这个project的<br>gradle tasks –all ## 查看当前project的所有tasks<br>gradle taskA taskB ##多个task是可以同时执行的<br>gradle –status  ## 查看当前操作系统中还有那些Daemon可以用</p></blockquote><p>afterEvaluate是属于project的属性(也可以在allProject中加)</p><p>I forced the version of support-v4 using this block in root build.gradle:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    project.configurations.all &#123;</span><br><span class="line">        resolutionStrategy.eachDependency &#123; details -&gt;</span><br><span class="line">            <span class="keyword">if</span> (details.requested.group == <span class="string">'com.android.support'</span></span><br><span class="line">                    &amp;&amp; !details.requested.name.contains(<span class="string">'multidex'</span>) ) &#123;</span><br><span class="line">                details.useVersion <span class="string">"$supportlib_version"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/42374151/all-com-android-support-libraries-must-use-the-exact-same-version-specification">All com.android.support libraries must use the exact same version [duplicate]</a></p><p>关于gradlew只是一层gradle的wrapper，找到这么一段话:<br><strong>The Gradle Wrapper is the preferred way of starting a Gradle build. It consists of a batch script for Windows and a shell script for OS X and Linux. These scripts allow you to run a Gradle build without requiring that Gradle be installed on your system. This used to be something added to your build file, but it’s been folded into Gradle, so there is no longer any need. Instead, you simply use the following command.</strong></p><blockquote><p>$ gradle wrapper –gradle-version 2.13</p><p>./gradlew -v 版本号<br>./gradlew clean 清除app目录下的build文件夹<br>./gradlew build 检查依赖并编译打包<br>./gradlew assembleDebug 编译并打Debug包<br>./gradlew assembleRelease 编译并打Release的包<br>或者<br>./gradlew aR<br>./gradlew installRelease Release模式打包并安装<br>或者<br>./gradlew iR<br>./gradlew uninstallRelease 卸载Release模式包</p></blockquote><p>Android项目迁移到gradle 3.0需要注意的一些事</p><ul><li>implementation和api的区别：<blockquote><p>When your module configures an implementation dependency, it’s letting Gradle know that the module does not want to leak the dependency to other modules at compile time. That is, the dependency is available to other modules only at runtime.<br>Using this dependency configuration instead of api or compile can result in significant build time improvements because it reduces the amount of projects that the build system needs to recompile. For example, if an implementation dependency changes its API, Gradle recompiles only that dependency and the modules that directly depend on it. Most app and test modules should use this configuration.<br>// a module 使用implementation引入了某个dependency，这个依赖就不会暴露给依赖于a的mudule。</p></blockquote></li></ul><blockquote><p>When a module includes an api dependency, it’s letting Gradle know that the module wants to transitively export that dependency to other modules, so that it’s available to them at both runtime and compile time. This configuration behaves just like compile (which is now deprecated), and you should typically use this only in library modules. That’s because, if an api dependency changes its external API, Gradle recompiles all modules that have access to that dependency at compile time. So, having a large number of api dependencies can significantly increase build times. Unless you want to expose a dependency’s API to a separate test module, app modules should instead use implementation dependencies.<br>//所以如果想要把自己的某项依赖暴露出去，让依赖自己的mudule也能用到这项依赖，就要用api了<br>但是api和之前的compile是一样的，所以编译速度比implementation慢很多。</p></blockquote><p>看到一份关于android build tasks解释的<a href="https://www.diycode.cc/topics/683">非常好的文章</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mergeDebugResources任务的作用是解压所有的aar包输出到app/build/intermediates/exploded-aar，并且把所有的资源文件合并到app/build/intermediates/res/merged/debug目录里</span><br><span class="line"></span><br><span class="line">processDebugManifest任务是把所有aar包里的AndroidManifest.xml中的节点，合并到项目的AndroidManifest.xml中，并根据app/build.gradle中当前buildType的manifestPlaceholders配置内容替换manifest文件中的占位符，最后输出到app/build/intermediates/manifests/full/debug/AndroidManifest.xml</span><br><span class="line"></span><br><span class="line">processDebugResources的作用</span><br><span class="line">1、调用aapt生成项目和所有aar依赖的R.java,输出到app/build/generated/source/r/debug目录</span><br><span class="line">3、生成资源索引文件app/build/intermediates/res/resources-debug.ap_</span><br><span class="line">2、把符号表输出到app/build/intermediates/symbols/debug/R.txt</span><br><span class="line"></span><br><span class="line">compileDebugJavaWithJavac这个任务是用来把java文件编译成class文件，输出的路径是app/build/intermediates/classes/debug</span><br><span class="line">编译的输入目录有</span><br><span class="line">- 1、项目源码目录，默认路径是app/src/main/java，可以通过sourceSets的dsl配置，允许有多个（打印project.android.sourceSets.main.java.srcDirs可以查看当前所有的源码路径,具体配置可以参考android-doc</span><br><span class="line">- 2、app/build/generated/source/aidl</span><br><span class="line">- 3、app/build/generated/source/buildConfig</span><br><span class="line">- 4、app/build/generated/source/apt(继承javax.annotation.processing.AbstractProcessor做动态代码生成的一些库，输出在这个目录，具体可以参考Butterknife 和 Tinker)的代码</span><br><span class="line"></span><br><span class="line">transformClassesWithJarMergingForDebug的作用是把compileDebugJavaWithJavac任务的输出app/build/intermediates/classes/debug，和app/build/intermediates/exploded-aar中所有的classes.jar和libs里的jar包作为输入，合并起来输出到app/build/intermediates/transforms/jarMerging/debug/jars/1/1f/combined.jar，我们在开发中依赖第三方库的时候有时候报duplicate entry:xxx 的错误，就是因为在合并的过程中在不同jar包里发现了相同路径的类</span><br><span class="line"></span><br><span class="line">transformClassesWithMultidexlistForDebug这个任务花费的时间也很长将近8秒，它有两个作用</span><br><span class="line">- 1、扫描项目的AndroidManifest.xml文件和分析类之间的依赖关系，计算出那些类必须放在第一个dex里面,最后把分析的结果写到app/build/intermediates/multi-dex/debug/maindexlist.txt文件里面</span><br><span class="line">- 2、生成混淆配置项输出到app/build/intermediates/multi-dex/debug/manifest_keep.txt文件里</span><br><span class="line"></span><br><span class="line">项目里的代码入口是manifest中application节点的属性android.name配置的继承自Application的类，在android5.0以前的版本系统只会加载一个dex(classes.dex)，classes2.dex .......classesN.dex 一般是使用android.support.multidex.MultiDex加载的，所以如果入口的Application类不在classes.dex里5.0以下肯定会挂掉，另外当入口Application依赖的类不在classes.dex时初始化的时候也会因为类找不到而挂掉，还有如果混淆的时候类名变掉了也会因为对应不了而挂掉,综上所述就是这个任务的作用</span><br><span class="line"></span><br><span class="line">transformClassesWithDexForDebug这个任务的作用是把包含所有class文件的jar包转换为dex，class文件越多转换的越慢</span><br><span class="line">输入的jar包路径是app/build/intermediates/transforms/jarMerging/debug/jars/1/1f/combined.jar</span><br><span class="line">输出dex的目录是build/intermediates/transforms/dex/debug/folders/1000/1f/main</span><br></pre></td></tr></table></figure></p><p>app/build/intermediates/symbols/debug/R.txt这个文件长这样</p><blockquote><p>int anim abc_fade_in 0x7f010000<br>int anim abc_fade_out 0x7f010001<br>int anim abc_grow_fade_in_from_bottom 0x7f010002<br>int anim abc_popup_enter 0x7f010003<br>int anim abc_popup_exit 0x7f010004<br>int anim abc_shrink_fade_out_from_bottom 0x7f010005<br>int anim abc_slide_in_bottom 0x7f010006<br>int anim abc_slide_in_top 0x7f010007<br>int anim abc_slide_out_bottom 0x7f010008<br>int anim abc_slide_out_top 0x7f010009<br>int anim design_bottom_sheet_slide_in 0x7f01000a<br>int anim design_bottom_sheet_slide_out 0x7f01000b<br>int anim design_snackbar_in 0x7f01000c<br>int anim design_snackbar_out 0x7f01000d<br>int anim tooltip_enter 0x7f01000e<br>int anim tooltip_exit 0x7f01000f<br>int animator design_appbar_state_list_animator 0x7f020000<br>int attr actionBarDivider 0x7f030000<br>int attr actionBarItemBackground 0x7f030001<br>int attr actionBarPopupTheme 0x7f030002<br>int attr actionBarSize 0x7f030003<br>…<br>按照字母从a-z开始，hex value自增(0x7f开头)</p></blockquote><p>Android Studio中点击run之后，执行了这些tasks</p><blockquote><p>Task spend time:<br>      2ms  :app:preBuild<br>     64ms  :app:preDebugBuild<br>      9ms  :app:compileDebugAidl<br>      4ms  :app:compileDebugRenderscript<br>      1ms  :app:checkDebugManifest<br>      2ms  :app:generateDebugBuildConfig<br>      1ms  :app:prepareLintJar<br>      1ms  :app:generateDebugResValues<br>      0ms  :app:generateDebugResources<br>     57ms  :app:mergeDebugResources<br>      1ms  :app:createDebugCompatibleScreenManifests<br>      4ms  :app:processDebugManifest<br>      1ms  :app:splitsDiscoveryTaskDebug<br>     18ms  :app:processDebugResources<br>      1ms  :app:generateDebugSources<br>     11ms  :app:javaPreCompileDebug<br>     10ms  :app:compileDebugJavaWithJavac<br>      1ms  :app:compileDebugNdk<br>      0ms  :app:compileDebugSources<br>      4ms  :app:mergeDebugShaders<br>      1ms  :app:compileDebugShaders<br>      0ms  :app:generateDebugAssets<br>      8ms  :app:mergeDebugAssets<br>     19ms  :app:transformClassesWithDexBuilderForDebug<br>      6ms  :app:transformDexArchiveWithExternalLibsDexMergerForDebug<br>      7ms  :app:transformDexArchiveWithDexMergerForDebug<br>      1ms  :app:mergeDebugJniLibFolders<br>     12ms  :app:transformNativeLibsWithMergeJniLibsForDebug<br>     10ms  :app:transformNativeLibsWithStripDebugSymbolForDebug<br>      0ms  :app:processDebugJavaRes<br>     24ms  :app:transformResourcesWithMergeJavaResForDebug<br>      2ms  :app:validateSigningDebug<br>      7ms  :app:packageDebug<br>      0ms  :app:assembleDebug</p></blockquote><p>可以分成这5类吧</p><ul><li>Preparation of dependencies. During this phase Gradle check that all libraries this module depends on are ready. If this module depends on another one, that module would be built as well.</li><li>Merging resources and processing Manifest. After this phase resources and Manifest are ready to be packaged in the result file.</li><li>Compiling. This phase started with Annotation Processors, in case you use them. Then source code is compiled into byte code. If you are using AspectJ, weaving also happens here.</li><li>Postprocessing. All Gradle tasks with a “transform” prefix are part of this phase. Most important ones are: transformClassesWithMultidexlist and transformClassesWithDex. They produce .DEX files.</li><li>Packaging and publishing. For libraries this stage means creating an .AAR file in the end, for applications — .APK.</li></ul><p><a href="https://www.jianshu.com/p/cc88488e5163">简书上有人总结了</a></p><p>Gradle的Flavor能否配置sourceset?<br>在sourceSets中可以设置不同flavor各自的java.srcDirs和res.srcDirs</p><p>Product flavors<br>一个product flavor定义了从项目中构建了一个应用的自定义版本。一个单一的项目可以同时定义多个不同的flavor来改变应用的输出。<br>Build Type  + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）<br>这句话的意思就是，BuildTypes有n种，product flavor有m种，最终可能的组合有m*n种<br><a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants">Gradle Plugin User Guide</a></p><p><a href="https://tech.meituan.com/meituan_food_delivery_android_architecture_evolution.html">美团外卖Android平台化架构演进实践</a></p><p><a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/pull/75/files#diff-a5277607f48bf80ac7edd5dbafa307ae">gradle 4.4之后Clock 被Deprecated的方案是自己创建一个groovy文件</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.util.Clock() <span class="comment">// 被Deprecated之后的解决方案</span></span><br></pre></td></tr></table></figure></p><p><a href="https://guides.gradle.org/building-android-apps/">building-android-apps</a></p><h2 id="2-创建java-Library并提交到jcenter的方法"><a href="#2-创建java-Library并提交到jcenter的方法" class="headerlink" title="2. 创建java Library并提交到jcenter的方法"></a>2. 创建java Library并提交到jcenter的方法</h2><p>JFrog 是软件管理和分发的领先通用解决方案JFrog 是软件管理和分发的领先通用解决方案，JFrog Bintray（通用分发平台）只是他家的众多服务之一。这个通用分发平台，就当CDN用好了。<br><a href="https://bintray.com/signup/oss">bintray的注册地址</a>。注册好了之后登录bintray，创建一个仓库，随便起名字，比如叫maven。在build.gradle中就可以引入</p><blockquote><p>maven { url ‘<a href="https://dl.bintray.com/yourusername/maven">https://dl.bintray.com/yourusername/maven</a>‘ }<br>compile ‘com.yourusername:librayName:1.0.0’</p></blockquote><p>到这里，就可以自己直接使用了。要想提交到jcenter(就是说不用添加一个maven {url }这样的源)，jcenter(托管在Bintray网站上的官方库，官方和普通的区别就是提交上去要审核)和mavenCentral也是仓库。只不过是有官方维护的了。因为maven的标准写法是</p><blockquote><p> maven { url “<a href="https://someurl">https://someurl</a>“ }   //<br> maven { url “<a href="https://jitpack.io">https://jitpack.io</a>“ }   // 比如说jitpack仓库</p></blockquote><p>正儿八经的上传到jcenter的方式：<br>一.在最外层build.gradle中添加</p><blockquote><p>classpath ‘com.github.dcendents:android-maven-gradle-plugin:1.3’   //<br>  classpath ‘com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6’</p></blockquote><p>配好了大概长这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:3.0.1&apos;</span><br><span class="line"></span><br><span class="line">        classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.4.1&apos;</span><br><span class="line">        classpath &apos;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6&apos;</span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>android-maven-gradle-plugin插件是用来打包Maven所需文件的。<br>gradle-bintray-plugin插件是用来将生成的Maven所需文件上传到Bintray的。</p><p>二.在library module的build.gradle中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.github.dcendents.android-maven&apos;</span><br><span class="line">apply plugin: &apos;com.jfrog.bintray&apos;</span><br><span class="line">// This is the library version used when deploying the artifact</span><br><span class="line">version = &quot;1.0.0&quot;</span><br><span class="line"></span><br><span class="line">def siteUrl = &apos;https://github.com/Haldir65/androidMedia&apos;      // 项目的主页</span><br><span class="line">def gitUrl = &apos;https://github.com/Haldir65/androidMedia.git&apos;   // Git仓库的url</span><br><span class="line">group = &quot;com.github.haldir65.starry&quot;                                        // Maven Group ID for the artifact，一般填你唯一的包名</span><br><span class="line">install &#123;</span><br><span class="line">    repositories.mavenInstaller &#123;</span><br><span class="line">        // This generates POM.xml with proper parameters</span><br><span class="line">        pom &#123;</span><br><span class="line">            project &#123;</span><br><span class="line">                packaging &apos;aar&apos;</span><br><span class="line">                // Add your description here</span><br><span class="line">                name &apos;Starry\n&apos; +</span><br><span class="line">                        &apos;Starry night\n&apos; +</span><br><span class="line">                        &apos;Paint your palette blue and grey&apos;</span><br><span class="line">                url siteUrl</span><br><span class="line">                // Set your license</span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name &apos;The Apache Software License, Version 2.0&apos;</span><br><span class="line">                        url &apos;http://www.apache.org/licenses/LICENSE-2.0.txt&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id &apos;haldir&apos;        //填写的一些基本信息</span><br><span class="line">                        name &apos;johnDoe&apos;</span><br><span class="line">                        email &apos;mjw090608@gmail.com&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection gitUrl</span><br><span class="line">                    developerConnection gitUrl</span><br><span class="line">                    url siteUrl</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task sourcesJar(type: Jar) &#123;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">    classifier = &apos;sources&apos;</span><br><span class="line">&#125;</span><br><span class="line">task javadoc(type: Javadoc) &#123;</span><br><span class="line">    source = android.sourceSets.main.java.srcDirs</span><br><span class="line">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class="line">&#125;</span><br><span class="line">task javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class="line">    classifier = &apos;javadoc&apos;</span><br><span class="line">    from javadoc.destinationDir</span><br><span class="line">&#125;</span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives javadocJar</span><br><span class="line">    archives sourcesJar</span><br><span class="line">&#125;</span><br><span class="line">Properties properties = new Properties()</span><br><span class="line">properties.load(project.rootProject.file(&apos;local.properties&apos;).newDataInputStream())</span><br><span class="line">bintray &#123;</span><br><span class="line">    user = properties.getProperty(&quot;bintray.user&quot;)</span><br><span class="line">    key = properties.getProperty(&quot;bintray.apikey&quot;)</span><br><span class="line">    configurations = [&apos;archives&apos;]</span><br><span class="line">    pkg &#123;</span><br><span class="line">        repo = &quot;maven&quot;</span><br><span class="line">        name = &quot;Starry&quot;    //发布到JCenter上的项目名字</span><br><span class="line">        websiteUrl = siteUrl</span><br><span class="line">        vcsUrl = gitUrl</span><br><span class="line">        licenses = [&quot;Apache-2.0&quot;]</span><br><span class="line">        publish = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">javadoc &#123; //jav doc采用utf-8编码否则会报“GBK的不可映射字符”错误</span><br><span class="line">    options&#123;</span><br><span class="line">        encoding &quot;UTF-8&quot;</span><br><span class="line">        charSet &apos;UTF-8&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三.在local.properities中添加</p><blockquote><p>bintray.user=your bintray username<br>bintray.apikey=your apikey</p></blockquote><p>记得把local.properties加到gitignore里面，搞定</p><p>在需要使用的module的build.gradle中引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url &apos;https://dl.bintray.com/haldir65/maven&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &apos;com.github.haldir65.starry:starry:1.0.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-Building-LifeCycle"><a href="#3-Building-LifeCycle" class="headerlink" title="3. Building LifeCycle"></a>3. Building LifeCycle</h2><p><a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases">编译的各个阶段的hook</a><br>正如gradle官网所介绍的，Build流程分为三个阶段(Initialization -&gt; Configuration -&gt; Execution) .</p><p>The settings file is executed during the initialization phase. 即settings.gradle中的语句是最早被执行的</p><h3 id="setting-gradle"><a href="#setting-gradle" class="headerlink" title="setting.gradle"></a>setting.gradle</h3><blockquote><p>println ‘This is executed during the initialization phase.’</p></blockquote><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">println <span class="string">'This is executed during the configuration phase.'</span></span><br><span class="line"></span><br><span class="line">task configured &#123;</span><br><span class="line">    println <span class="string">'This is also executed during the configuration phase.'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task test &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">'This is executed during the execution phase.'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task testBoth &#123;</span><br><span class="line">    doFirst &#123;</span><br><span class="line">      println <span class="string">'This is executed first during the execution phase.'</span></span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;</span><br><span class="line">      println <span class="string">'This is executed last during the execution phase.'</span></span><br><span class="line">    &#125;</span><br><span class="line">    println <span class="string">'This is executed during the configuration phase as well.'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p> gradle test testBoth<br>This is executed during the initialization phase.<br>This is executed during the configuration phase.<br>This is also executed during the configuration phase.<br>This is executed during the configuration phase as well.<br>:test<br>This is executed during the execution phase.<br>:testBoth<br>This is executed first during the execution phase.<br>This is executed last during the execution phase.<br>BUILD SUCCESSFUL in 0s<br>2 actionable tasks: 2 executed</p></blockquote><p>经常会在build.gradle中看到这样一段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate &#123; project -&gt;</span><br><span class="line">    logger.info(<span class="string">"=========afterEvaluate=============="</span>)</span><br><span class="line">    project.tasks.each &#123; task -&gt;</span><br><span class="line">        <span class="keyword">if</span> (task.name == <span class="string">"test"</span>||task.name.contains(<span class="string">"lint"</span>))&#123;</span><br><span class="line">            task.enabled = <span class="keyword">false</span> <span class="comment">// 有些不必要的确实可以剔除掉</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        task.enabled = false 这么干的话全部任务都不会执行</span></span><br><span class="line">       println(<span class="string">"-------------$&#123;task.name&#125;----"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>closure就是一对花括号包着的东西<br>afterEvaluate发生在Configuration之后，实际上也就是在project配置完成后，开始执行所有task前，对外提供一个closure，其实beforeEvaluate也有。</p><p><strong>immediately invoked after a task is added to a project</strong> 在Task被添加到project的时候执行closure<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks.whenTaskAdded &#123; task -&gt;</span><br><span class="line">    task.ext.srcDir = <span class="string">'src/main/java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task a</span><br><span class="line"></span><br><span class="line">println <span class="string">"source dir is $&#123;a.srcDir&#125;"</span></span><br></pre></td></tr></table></figure></p><p>project evaluate有可能成功，也会失败。但无论成功还是失败，下面的notification都会触发<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gradle.afterProject &#123;project, projectState -&gt;</span><br><span class="line">    <span class="keyword">if</span> (projectState.failure) &#123;</span><br><span class="line">        println <span class="string">"Evaluation of $project FAILED"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println <span class="string">"Evaluation of $project succeeded"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在gradle的plugin中实现也有类似的<br>PluginImpl.groovy<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginImpl</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(Project project)</span> </span>&#123;</span><br><span class="line">     project.gradle.addProjectEvaluationListener() <span class="comment">// 和在build.gradle中afterEvaluate差不多</span></span><br><span class="line">     project.getGradle().taskGraph.addTaskExecutionGraphListener() <span class="comment">//在执行前</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Task execution graph ready(    graphPopulated,This method is called when the TaskExecutionGraph has been populated, and before any tasks are executed.)在任何task执行前被执行</p><p>Task execution(You can receive a notification immediately before and after any task is executed.)<br>(TaskExecutionListener,在task执行前和执行后)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">project.gradle.addListener(<span class="keyword">new</span> TaskExecutionListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">void</span> <span class="title">beforeExecute</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Task task, TaskState taskState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></p><p>而在build.gradle中是这样的写法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">task ok</span><br><span class="line"></span><br><span class="line"><span class="function">task <span class="title">broken</span><span class="params">(dependsOn: ok)</span> </span>&#123;</span><br><span class="line">    group <span class="string">'Welcome'</span> <span class="comment">// 这个是task的一个属性</span></span><br><span class="line">    description <span class="string">'Produces a greeting'</span> <span class="comment">// 这个是在project中输入gradle tasks之后输出的任务列表中每一项后面的描述信息</span></span><br><span class="line"></span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'broken'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gradle.taskGraph.beforeTask &#123; Task task -&gt;</span><br><span class="line">    println <span class="string">"executing $task ..."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gradle.taskGraph.afterTask &#123; Task task, TaskState state -&gt;</span><br><span class="line">    <span class="keyword">if</span> (state.failure) &#123;</span><br><span class="line">        println <span class="string">"FAILED"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        println <span class="string">"done"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-How-to-create-gradle-Plugin"><a href="#4-How-to-create-gradle-Plugin" class="headerlink" title="4. How to create gradle Plugin"></a>4. How to create gradle Plugin</h2><p><a href="https://github.com/helen-x/gradle-plugin-demo">整体的过程和这里面说的差不多</a></p><ol><li>add to your buidl script // 不可复用</li><li>创建BuildSrc文件夹 //依旧不可复用</li><li>创建一个Standalone Project //可复用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Project project)</span> </span>&#123;</span><br><span class="line">        project.task(<span class="string">"hello"</span>)</span><br><span class="line">          .doLast(task -&gt; System.out.println(<span class="string">"Hello Gradle!"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/f43d48abfbf3">使用Transform Api在class变成dex之前对class进行字节码修改</a><br>本质上是在merge{ProductFlavor}{BuildType}Assets Task之后，transformClassesWithDexFor{ProductFlavor}{BuildType} Transform 之前,插入一个transformClassesWith{YourTransformName}For{ProductFlavor}{BuildType} Transform</p><h2 id="5-update"><a href="#5-update" class="headerlink" title="5. update"></a>5. update</h2><p><a href="https://github.com/myjoybar/Android-Router/blob/master/route.sh">待查看</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">preBuild &lt;&lt; &#123;</span><br><span class="line">    <span class="built_in">String</span> cmd = <span class="string">"sh inrouter/maker/route.sh "</span> + project.getName()</span><br><span class="line">    def cmdResult = cmd.execute().text.trim()</span><br><span class="line">    println cmdResult</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="string">"Start make"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">javac -encoding utf-8 ./inrouter/maker/java/com/me/obo/maker/utils/*.java ./inrouter/maker/java/com/me/obo/maker/*.java -d inrouter/maker/class/  -cp inrouter/maker/libs/javapoet-1.9.0.jar</span></span><br><span class="line"><span class="meta">#</span><span class="bash">java -Djava.ext.dirs=inrouter/maker/libs -classpath inrouter/maker/class com.me.obo.maker.CodeMaker <span class="variable">$1</span> <span class="variable">$2</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="string">"End make"</span></span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/Tencent/tinker/blob/master/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy">Tinker的gradle plugin实现，非常有参考意义</a><br>和java libraray提交到jcenter不同，gradle需要提交到<a href="https://guides.gradle.org/publishing-plugins-to-gradle-plugin-portal/">Gradle Plugin Portal</a>。没错，一个完全不一样的网站</p><p><a href="https://github.com/adwiv/android-fat-aar">比较复杂的gradle knowledge</a><br><a href="https://guides.gradle.org/creating-new-gradle-builds/">official gradle docs 是最好的学习资料</a><br><a href="https://docs.gradle.org/current/userguide/custom_plugins.html">custom_plugins</a><br><a href="https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#configure-by-dag">Build Script Basics</a><br><a href="https://juejin.im/post/5a756f11f265da4e7c185bc5">关于Android Gradle你需要知道这些（4）</a><br><a href="https://juejin.im/post/5a767c7cf265da4e9c6300a1#heading-5">Gradle插件学习笔记（四)</a><br><a href="https://android.googlesource.com/platform/tools/build/+/tools_r22/gradle/src/main/groovy/com/android/build/gradle/BasePlugin.groovy">Android Gradle Plugin  source Code</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/street lights dark night car city.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DOM操作手册</title>
    <link href="https://haldir65.github.io/2018/02/02/2018-02-02-html-dom-manipulation/"/>
    <id>https://haldir65.github.io/2018/02/02/2018-02-02-html-dom-manipulation/</id>
    <published>2018-02-02T23:30:25.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p>HTML Document操作手册<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/2138000245bee1e3cc14.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><p>使用javaScript操作dom的记录</p><h2 id="拦截form的submit"><a href="#拦截form的submit" class="headerlink" title="拦截form的submit"></a>拦截form的submit</h2><p><a href="https://stackoverflow.com/questions/3350247/how-to-prevent-form-from-being-submitted">how-to-prevent-form-from-being-submitted</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">"return mySubmitFunction()"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"this is the text before the value"</span><span class="attr">type</span>=<span class="string">'text'</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">type</span>=<span class="string">'text'</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在mySubmitFunction()中return false并不能阻止表单被提交。<br>正确的做法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.querySelector(<span class="string">'form'</span>);</span><br><span class="line">element.addEventListener(<span class="string">'submit'</span>, event =&gt; &#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  <span class="comment">// actual logic, e.g. validate the form</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Form submission cancelled.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="a标签的事件绑定"><a href="#a标签的事件绑定" class="headerlink" title="a标签的事件绑定"></a>a标签的事件绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="input-file选出来的图片路径"><a href="#input-file选出来的图片路径" class="headerlink" title="input file选出来的图片路径"></a>input file选出来的图片路径</h2><p><a href="https://stackoverflow.com/questions/4851595/how-to-resolve-the-c-fakepath">c-fakepath</a>.浏览器并不会将底层的文件实际路径暴露给开发者，这是出于安全考虑。所以使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>)[<span class="number">3</span>].value</span><br><span class="line"><span class="string">"C:\fakepath\image_7.jpg"</span> <span class="comment">//所以一般要用string.split('\\')处理一下</span></span><br></pre></td></tr></table></figure></p><h3 id="被document-getElementById坑了"><a href="#被document-getElementById坑了" class="headerlink" title="被document.getElementById坑了"></a>被document.getElementById坑了</h3><p>一个html页面只能有一个id的规则都知道，可是偏偏一个页面写了两个id一样的tag，网页照样跑，console没有任何报错。但是使用document.getElementById的时候，拿到的就是第一个。浏览器还真是能容错啊。<br>顺便记录下vanilla js和jQuery detect 一个file input的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input2 = <span class="built_in">document</span>.getElementById(<span class="string">'file_2'</span>);</span><br><span class="line">input2.addEventListener(<span class="string">'change'</span>, () =&gt; &#123;</span><br><span class="line">  showPreview2(<span class="keyword">this</span>.id,<span class="string">'portrait2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#file_2'</span>).on(<span class="string">'change'</span>, () =&gt; &#123;</span><br><span class="line">  showPreview2(<span class="string">'file_2'</span>,<span class="string">'portrait2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#file_2'</span>).change( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  showPreview2(<span class="keyword">this</span>.id,<span class="string">'portrait2'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="为毛浏览器内嵌视频要用iframe"><a href="#为毛浏览器内嵌视频要用iframe" class="headerlink" title="为毛浏览器内嵌视频要用iframe"></a>为毛浏览器内嵌视频要用iframe</h3><p>因为video source是host在其他的sites的啊，因为跨域的问题，不得不使用iframe。因为就算用iframe，里面其实还是一个vide的tg。</p><h3 id="html-js是不能写文件的"><a href="#html-js是不能写文件的" class="headerlink" title="html js是不能写文件的"></a>html js是不能写文件的</h3><p>node js提供了fs api来进行文件读写，浏览器中js不能读写本地文件。(html5提供了localStorage api，但最大容量好像是5MB，通过浏览器读文件也必须用户手动触发选择)</p><h3 id="头一次听说noscript这种东西"><a href="#头一次听说noscript这种东西" class="headerlink" title="头一次听说noscript这种东西"></a>头一次听说noscript这种东西</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">         &lt;!--</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"Hello World!"</span>)</span></span><br><span class="line"><span class="javascript">         <span class="comment">//--&gt;</span></span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">         Sorry...JavaScript is needed to go ahead.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果浏览器不支持javascript的话，noScript中的内容就会显示出来</p><h3 id="document对象的所有方法在mdn上都有"><a href="#document对象的所有方法在mdn上都有" class="headerlink" title="document对象的所有方法在mdn上都有"></a>document对象的所有方法在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createTextNode">mdn</a>上都有</h3><h3 id="js操作cookie的方式"><a href="#js操作cookie的方式" class="headerlink" title="js操作cookie的方式"></a>js操作cookie的方式</h3><p>随便开一个网页，在console中输入document.cookie就可以看到设置的cookie<br>或者在chrome的resource tab中也能看到<br>js能够操作cookie的前提是cookie中没有HttpOnly=true 字段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"key1=value1;key2=value2;expires=date"</span>;</span><br></pre></td></tr></table></figure></p><h3 id="浏览器信息一般在Navigator对象里面拿"><a href="#浏览器信息一般在Navigator对象里面拿" class="headerlink" title="浏览器信息一般在Navigator对象里面拿"></a>浏览器信息一般在Navigator对象里面拿</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> browsername=navigator.appName;</span><br><span class="line"><span class="keyword">if</span>( browsername == <span class="string">"Netscape"</span> )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">window</span>.location=<span class="string">"http://www.location.com/ns.htm"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( browsername ==<span class="string">"Microsoft Internet Explorer"</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">window</span>.location=<span class="string">"http://www.location.com/ie.htm"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">window</span>.location=<span class="string">"http://www.location.com/other.htm"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>navigator里面常用的还有platform,userAgent等<br>随便在chrome里面试了下<br>navigator.appName ==&gt; Netscape<br>navigator.platform ==&gt; win32</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML Document操作手册&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/2138000245bee1e3cc14.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg知识手册</title>
    <link href="https://haldir65.github.io/2018/01/24/2018-01-24-ffmpeg-basics-and-rtmp-related/"/>
    <id>https://haldir65.github.io/2018/01/24/2018-01-24-ffmpeg-basics-and-rtmp-related/</id>
    <published>2018-01-24T13:44:33.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p>ffmpeg安装手记<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/water foot cold dark river.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://adaptivesamples.com/how-to-install-ffmpeg-on-windows/">how-to-install-ffmpeg-on-windows</a><br><a href="https://ffmpeg.zeranoe.com/builds/">下载</a></p><p>检查下是否安装完成:</p><blockquote><p>ffmpeg -codecs</p></blockquote><h2 id="Basic-commands"><a href="#Basic-commands" class="headerlink" title="Basic commands"></a>Basic commands</h2><blockquote><p>ffmpeg -i video.mp4 ## 从视频中提取出信息<br> ffmpeg -i video.mp4 video.avi ## 格式转换<br>ffmpeg -i input.mp4 -vn -ab 320 output.mp3 ##提取视频中的音频，转成mp3<br>ffmpeg -i input.mp4  -t 50 output.avi  ## 提取视频前50s<br>ffmpeg -i input.mp4 -aspect 16:9 output.mp4 ## 更改长宽比</p></blockquote><p>参考<a href="https://www.ostechnix.com/20-ffmpeg-commands-beginners/">20-ffmpeg-commands-beginners</a></p><p>需要知道的是，<strong><em>视频转码是很费性能的</em></strong>，消耗的时间也比较长。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/fc64102d6162">nginx搭建rtmp推流服务</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ffmpeg安装手记&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/water foot cold dark river.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>redis-cook-book</title>
    <link href="https://haldir65.github.io/2018/01/20/2018-01-20-redis-cook-book/"/>
    <id>https://haldir65.github.io/2018/01/20/2018-01-20-redis-cook-book/</id>
    <published>2018-01-20T08:19:20.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/apple logo dark bw life night.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><p>redis速度相当快<br><a href="https://github.com/MicrosoftArchive/redis">The Redis project does not officially support Windows. However, the Microsoft Open Tech group develops and maintains this Windows port targeting Win64. </a><br>直接从release page下载msi文件，安装下去很方便的</p><h3 id="start-server-and-client"><a href="#start-server-and-client" class="headerlink" title="start server and client"></a>start server and client</h3><blockquote><p>redis-server  redis.windows.conf<br>双击打开 redis-cli.exe ## start client</p></blockquote><p> 和数据库类似，不同业务的数据需要存贮在不同的数据库中，redis提供了client端的切换数据库的语法</p><blockquote><p>select 1 ## 每个数据库之间的key不冲突</p></blockquote><h3 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h3><blockquote><p>sudo find / -name “redis.conf” ##  linux下应该是装到了/etc/redis/这个目录下，不确定的话find一下</p></blockquote><p>常见的配置包括：</p><blockquote><p>port 6379 ## redis-server监听端口（默认6379）<br>requirepass ## 指定客户端操作需要的密码<br>databases 16 ## 这里面对于可供选择的数据库总数</p></blockquote><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>当内存达到最大值的时候Redis会选择删除哪些数据？有五种方式可供选择</p><blockquote><p>volatile-lru -&gt; 利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used )<br>allkeys-lru -&gt; 利用LRU算法移除任何key<br>volatile-random -&gt; 移除设置过过期时间的随机key<br>allkeys-&gt;random -&gt; remove a random key, any key<br>volatile-ttl -&gt; 移除即将过期的key(minor TTL)<br>noeviction -&gt; 不移除任何可以，只是返回一个写错误</p></blockquote><h3 id="支持的存储类型"><a href="#支持的存储类型" class="headerlink" title="支持的存储类型"></a>支持的存储类型</h3><ul><li>Strings</li><li>Hashes</li><li>Lists</li><li>Sets</li><li>Sorted Sets</li></ul><h2 id="针对各种数据进行CURD操作"><a href="#针对各种数据进行CURD操作" class="headerlink" title="针对各种数据进行CURD操作"></a>针对各种数据进行CURD操作</h2><p><strong>String</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set(key, value)：给数据库中名称为key的string赋予值value</span><br><span class="line">get(key)：返回数据库中名称为key的string的value</span><br><span class="line">getset(key, value)：给名称为key的string赋予上一次的value</span><br><span class="line">mget(key1, key2,…, key N)：返回库中多个string的value</span><br><span class="line">setnx(key, value)：添加string，名称为key，值为value</span><br><span class="line">setex(key, time, value)：向库中添加string，设定过期时间time</span><br><span class="line">mset(key N, value N)：批量设置多个string的值</span><br><span class="line">msetnx(key N, value N)：如果所有名称为key i的string都不存在</span><br><span class="line">incr(key)：名称为key的string增1操作</span><br><span class="line">incrby(key, integer)：名称为key的string增加integer</span><br><span class="line">decr(key)：名称为key的string减1操作</span><br><span class="line">decrby(key, integer)：名称为key的string减少integer</span><br><span class="line">append(key, value)：名称为key的string的值附加value</span><br><span class="line">substr(key, start, end)：返回名称为key的string的value的子串</span><br></pre></td></tr></table></figure></p><p><strong>Hashes</strong><br>A Redis hash is a collection of key value pairs. Redis Hashes are maps between string fields and string values. Hence, they are used to represent objects.</p><p>Hashes用于代表object</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 添加操作</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># set</span></span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HMSET myhash field1 <span class="string">"Hello"</span> field2 <span class="string">"World"</span></span></span><br><span class="line">"OK"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 只在field不存在的时候添加，可以理解为putIfAbsent</span></span></span><br><span class="line">HSETNX myhash field "Hello"</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#返回1表明设置成功，返回0说明不成功</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查询操作</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># get</span></span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HGET myhash field1</span></span><br><span class="line">"Hello"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HGET myhash field2</span></span><br><span class="line">"World"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## delete a specified field from an object</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 删除操作</span></span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HSET myhash field1 <span class="string">"foo"</span></span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> HDEL myhash field1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 返回0表示不存在该key，返回1表示删除成功</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#检查是否存在某个field</span></span></span><br><span class="line">HEXISTS myhash field1</span><br><span class="line">(integer) 1  </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#1表示存在，0表示不存在</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 把某个变量的值增加</span></span></span><br><span class="line">HINCRBY myhash field 1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 返回操作成功后field 的当前value</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看当前object有哪些field,类似于javaScript的iterating  protoType</span></span></span><br><span class="line">HKEYS myhash</span><br></pre></td></tr></table></figure><p><strong>Lists</strong><br>Redis Lists are simply lists of strings, sorted by insertion order. You can add elements to a Redis List on the head or on the tail.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lpush tutoriallist redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush tutoriallist mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush tutoriallist rabitmq</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange tutoriallist 0 10  </span><br><span class="line"></span><br><span class="line">1) "rabitmq"</span><br><span class="line">2) "mongodb"</span><br><span class="line">3) "redis"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rpush(key, value)：在名称为key的list尾添加一个值为value的元素</span><br><span class="line">lpush(key, value)：在名称为key的list头添加一个值为value的 元素</span><br><span class="line">llen(key)：返回名称为key的list的长度</span><br><span class="line">lrange(key, start, end)：返回名称为key的list中start至end之间的元素</span><br><span class="line">ltrim(key, start, end)：截取名称为key的list</span><br><span class="line">lindex(key, index)：返回名称为key的list中index位置的元素</span><br><span class="line">lset(key, index, value)：给名称为key的list中index位置的元素赋值</span><br><span class="line">lrem(key, count, value)：删除count个key的list中值为value的元素</span><br><span class="line">lpop(key)：返回并删除名称为key的list中的首元素</span><br><span class="line">rpop(key)：返回并删除名称为key的list中的尾元素</span><br><span class="line">blpop(key1, key2,… key N, timeout)：lpop命令的block版本。</span><br><span class="line">brpop(key1, key2,… key N, timeout)：rpop的block版本。</span><br><span class="line">rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</span><br></pre></td></tr></table></figure><p><strong>SET</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sadd(key, member)：向名称为key的set中添加元素member</span><br><span class="line">srem(key, member) ：删除名称为key的set中的元素member</span><br><span class="line">spop(key) ：随机返回并删除名称为key的set中一个元素</span><br><span class="line">smove(srckey, dstkey, member) ：移到集合元素</span><br><span class="line">scard(key) ：返回名称为key的set的基数</span><br><span class="line">sismember(key, member) ：member是否是名称为key的set的元素</span><br><span class="line">sinter(key1, key2,…key N) ：求交集</span><br><span class="line">sinterstore(dstkey, (keys)) ：求交集并将交集保存到dstkey的集合</span><br><span class="line">sunion(key1, (keys)) ：求并集</span><br><span class="line">sunionstore(dstkey, (keys)) ：求并集并将并集保存到dstkey的集合</span><br><span class="line">sdiff(key1, (keys)) ：求差集</span><br><span class="line">sdiffstore(dstkey, (keys)) ：求差集并将差集保存到dstkey的集合</span><br><span class="line">smembers(key) ：返回名称为key的set的所有元素</span><br><span class="line">srandmember(key) ：随机返回名称为key的set的一个元素</span><br></pre></td></tr></table></figure><h2 id="一些特性的指令"><a href="#一些特性的指令" class="headerlink" title="一些特性的指令"></a>一些特性的指令</h2><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">save：将数据同步保存到磁盘</span><br><span class="line">bgsave：将数据异步保存到磁盘</span><br><span class="line">lastsave：返回上次成功将数据保存到磁盘的Unix时戳</span><br><span class="line">shundown：将数据同步保存到磁盘，然后关闭服务</span><br></pre></td></tr></table></figure><h3 id="设定有效时间"><a href="#设定有效时间" class="headerlink" title="设定有效时间"></a>设定有效时间</h3><p>expireat</p><h3 id="对Value的操作"><a href="#对Value的操作" class="headerlink" title="对Value的操作"></a>对Value的操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">KEYS * 列出所有的key</span><br><span class="line">exists(key)：确认一个key是否存在</span><br><span class="line">del(key)：删除一个key</span><br><span class="line">type(key)：返回值的类型</span><br><span class="line">keys(pattern)：返回满足给定pattern的所有key</span><br><span class="line">randomkey：随机返回key空间的一个</span><br><span class="line">keyrename(oldname, newname)：重命名key</span><br><span class="line">dbsize：返回当前数据库中key的数目</span><br><span class="line">expire：设定一个key的活动时间（s）</span><br><span class="line">ttl：获得一个key的活动时间</span><br><span class="line">select(index)：按索引查询</span><br><span class="line">move(key, dbindex)：移动当前数据库中的key到dbindex数据库</span><br><span class="line">flushdb：删除当前选择数据库中的所有key</span><br><span class="line">flushall：删除所有数据库中的所有key</span><br></pre></td></tr></table></figure><h3 id="SubScribe和Publish"><a href="#SubScribe和Publish" class="headerlink" title="SubScribe和Publish"></a>SubScribe和Publish</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SUBSCRIBE redisChat  </span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) "subscribe"</span><br><span class="line">2) "redisChat"</span><br><span class="line">3) (integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 另起一个screen</span></span></span><br><span class="line">PUBLISH redisChat "Redis is a great caching technique"  </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 回到刚才的screen : ctrl +a +d screen -r</span></span></span><br></pre></td></tr></table></figure><p>两个client同时subscribe了redisChat这个话题，表现上就和局域网聊天一样。也就有了很多用js+webSocket写的简易聊天室</p><h3 id="pipelining"><a href="#pipelining" class="headerlink" title="pipelining"></a>pipelining</h3><p>一次请求/响应服务器能实现处理新的请求即使旧的请求还未被响应。这样就可以将多个命令发送到服务器，而不用等待回复，最后在一个步骤中读取该答复。<br>省去了RTT(Round Trip deplay time)的时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">非pipleline模式：</span><br><span class="line"></span><br><span class="line">Request----&gt;执行</span><br><span class="line"></span><br><span class="line">----&gt;Response</span><br><span class="line"></span><br><span class="line">Request----&gt;执行</span><br><span class="line"></span><br><span class="line">----&gt;Response</span><br><span class="line">Pipeline模式下：</span><br><span class="line"></span><br><span class="line">Request----&gt;执行，Server将响应结果队列化</span><br><span class="line"></span><br><span class="line">Request----&gt;执行，Server将响应结果队列化</span><br><span class="line"></span><br><span class="line">----&gt;Response</span><br><span class="line"></span><br><span class="line">----&gt;Response</span><br></pre></td></tr></table></figure></p><h3 id="和其他语言的整合"><a href="#和其他语言的整合" class="headerlink" title="和其他语言的整合"></a>和其他语言的整合</h3><p><a href="https://redis.io/clients">支持的lanaguage client</a></p><p><strong>javaScript</strong><br><a href="https://github.com/NodeRedis/node_redis">npm install redis</a><br><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-nodejs-redis/index.html">在 Node.js 应用中集成 Redis</a></p><p><a href="https://github.com/xetorthio/jedis">jedis</a><br><strong>java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pipeline</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        String key = <span class="string">"pipeline-test"</span>;  </span><br><span class="line">        String old = jedis.get(key);  </span><br><span class="line">        <span class="keyword">if</span>(old != <span class="keyword">null</span>)&#123;  </span><br><span class="line">            System.out.println(<span class="string">"Key:"</span> + key + <span class="string">",old value:"</span> + old);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//代码模式1,这种模式是最常见的方式  </span></span><br><span class="line">        Pipeline p1 = jedis.pipelined();  </span><br><span class="line">        p1.incr(key);  </span><br><span class="line">        System.out.println(<span class="string">"Request incr"</span>);  </span><br><span class="line">        p1.incr(key);  </span><br><span class="line">        System.out.println(<span class="string">"Request incr"</span>);  </span><br><span class="line">        <span class="comment">//结束pipeline，并开始从相应中获得数据  </span></span><br><span class="line">        List&lt;Object&gt; responses = p1.syncAndReturnAll();  </span><br><span class="line">        <span class="keyword">if</span>(responses == <span class="keyword">null</span> || responses.isEmpty())&#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Pipeline error: no response..."</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span>(Object resp : responses)&#123;  </span><br><span class="line">            System.out.println(<span class="string">"Response:"</span> + resp.toString());<span class="comment">//注意，此处resp的类型为Long  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//代码模式2  </span></span><br><span class="line">        Pipeline p2 = jedis.pipelined();  </span><br><span class="line">        Response&lt;Long&gt; r1 = p2.incr(key);  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            r1.get();  </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;  </span><br><span class="line">            System.out.println(<span class="string">"Error,you cant get() before sync,because IO of response hasn't begin.."</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Response&lt;Long&gt; r2 = p2.incr(key);  </span><br><span class="line">        p2.sync();  </span><br><span class="line">        System.out.println(<span class="string">"Pipeline,mode 2,---&gt;"</span> + r1.get());  </span><br><span class="line">        System.out.println(<span class="string">"Pipeline,mode 2,---&gt;"</span> + r2.get());  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>python</strong><br><a href="https://github.com/andymccurdy/redis-py">redis-py</a><br><a href="http://debugo.com/python-redis/">使用Python操作Redis</a></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote><p>《Redis Cookbook》对这个经典场景进行详细描述。假定我们对一系列页面需要记录点击次数。例如论坛的每个帖子都要记录点击次数，而点击次数比回帖的次数的多得多。如果使用关系数据库来存储点击，可能存在大量的行级锁争用。所以，点击数的增加使用redis的INCR命令最好不过了。</p></blockquote><h3 id="存储多层次级别的object"><a href="#存储多层次级别的object" class="headerlink" title="存储多层次级别的object"></a>存储多层次级别的object</h3><p><a href="https://stackoverflow.com/questions/16375188/redis-strings-vs-redis-hashes-to-represent-json-efficiency">Redis strings vs Redis hashes to represent JSON: efficiency?</a><br>由于redis各种commands本质上只能存储key-value形式的object，对于多层级的object，需要将key扁平化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> house = &#123;</span><br><span class="line">  roof: &#123;</span><br><span class="line">    color: <span class="string">'black'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  street: <span class="string">'Market'</span>,</span><br><span class="line">  buildYear: <span class="string">'1996'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>HMSET house:1 roof “house:1:roof” street “Market” buildYear “1996”</p></blockquote><p><a href="https://alexandergugel.svbtle.com/storing-relational-data-in-redis">在redis中存储关系型数据</a></p><p><a href="http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html">在redis中缓存session</a></p><blockquote><p>session 可以存放在 1）内存、2）cookie本身、3）redis 或 memcached 等缓存中，或者4）数据库中。线上来说，缓存的方案比较常见，存数据库的话，查询效率相比前三者都太低，不推荐</p></blockquote><p>=================================================================================</p><h3 id="Redis-Cluster-集群"><a href="#Redis-Cluster-集群" class="headerlink" title="Redis Cluster(集群)"></a>Redis Cluster(集群)</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://redis.io/commands/hlen">redis official docs</a><br>[Redis supports 5 types of data types] (<a href="https://www.tutorialspoint.com/redis/redis_data_types.htm">https://www.tutorialspoint.com/redis/redis_data_types.htm</a>)<br><a href="http://www.ttlsa.com/redis/redis-advanced-features-and-performance-tuning/">Redis 高级特性与性能调优</a><br><a href="http://www.dnsdizhi.com/post-219.html">大部分语句转载自</a><br><a href="http://shift-alt-ctrl.iteye.com/blog/1863790">关于pipelining的解释</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/apple logo dark bw life night.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-native-cookbook</title>
    <link href="https://haldir65.github.io/2018/01/19/2018-01-19-react-native-cookbook/"/>
    <id>https://haldir65.github.io/2018/01/19/2018-01-19-react-native-cookbook/</id>
    <published>2018-01-19T22:28:34.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/iu kpop star music sony.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><p>install cli</p><blockquote><p>npm install -g react-native-cli<br>react-native init myproject ## 最好全部小写字母<br>cd myproject<br>react-native run-android<br>注意，可能会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring project &apos;:app&apos;.</span><br><span class="line">&gt; SDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable.</span><br></pre></td></tr></table></figure></p></blockquote><p>新建一个local.properities文件，放到android 文件夹下面就好了</p><p><a href="https://stackoverflow.com/questions/44446523/unable-to-load-script-from-assets-index-android-bundle-on-windows">unable-to-load-script-from-assets-index-android-bundle-on-windows</a></p><p>在android手机上打开显示布局边界，发现react-native app并不是一个webview，而是一个个实在的buttom,text。</p><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>目前暂不支持java 9<br>Double tap R on your keyboard to reload其实并不是按电脑键盘上的R，而是模拟器上的，所以需要鼠标上去，ctrl+m即可<br>如果是一台真实手机的话，需要摇一摇手机，就能显示菜单。但是每次都要摇一摇实在是太麻烦，所以点一下那个Enable LiveReload就能在每次保存文件后Reload。<br>注意，如果更改了state，那么hotReload没用，需要手动Reload</p><p>npm run start是用来起dev server的。<br>react-native run-android是用来向client端推更新的。</p><p>could not connect to development server…的原因就是没有运行npm start。</p><p>所以，正常的流程应该是npm start &amp;&amp; react-native run-android</p><p>debug:<br>react-native run-android是把这个App安装到手机上，然后terminal就返回了，需要查看后续日志输出的话<br>react-native log-android // 这个是帮助在console中输出log</p><p>jsx文件开头的import要注意<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是错误的</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; AppRegistry,  Component,StyleSheet,Text,View&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="comment">//这才是正确的</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRegistry,  Component,StyleSheet,Text,View&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="route"><a href="#route" class="headerlink" title="route"></a>route</h2><p>Navigator is deprecated,use <a href="https://reactnavigation.org/">stack navigator</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StackNavigator &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>; <span class="comment">// 1.0.0-beta.27</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">alignItems</span>: <span class="string">'center'</span>, <span class="attr">justifyContent</span>: <span class="string">'center'</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;Text&gt;Home Screen&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">alignItems</span>: <span class="string">'center'</span>, <span class="attr">justifyContent</span>: <span class="string">'center'</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;Text&gt;Details Screen&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RootStack = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Home: &#123;</span><br><span class="line">      screen: HomeScreen,</span><br><span class="line">    &#125;,</span><br><span class="line">    Details: &#123;</span><br><span class="line">      screen: DetailsScreen,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    initialRouteName: <span class="string">'Home'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">RootStack</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="既然有路由就不免谈到各个组件之间的写法"><a href="#既然有路由就不免谈到各个组件之间的写法" class="headerlink" title="既然有路由就不免谈到各个组件之间的写法"></a>既然有路由就不免谈到各个组件之间的写法</h2><p>显然，你可以将LogoTitle写到另一个文件中去，然后export default，再import出来。<br>下面这种只是为了说明你能这样写，一个很简单的小功能可以放在内部作为一个class自己使用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Image</span><br><span class="line">        source=&#123;<span class="built_in">require</span>(<span class="string">'./spiro.png'</span>)&#125;</span><br><span class="line">        style=&#123;&#123; <span class="attr">width</span>: <span class="number">30</span>, <span class="attr">height</span>: <span class="number">30</span> &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    <span class="comment">// headerTitle instead of title</span></span><br><span class="line">    headerTitle: <span class="xml"><span class="tag">&lt;<span class="name">LogoTitle</span> /&gt;</span>,</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  /* render function, etc */</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="styling"><a href="#styling" class="headerlink" title="styling"></a>styling</h2><p>inline styling在每一个tag的后面跟上两个大括号，<br>styling as seprate file在后面跟一个大括号，引用style对象的properity<br><a href="https://stackoverflow.com/questions/43585297/react-native-button-style-not-work">Button组件的styling仅限于几个属性，可以用TouchableXXX来代替</a></p><h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><h1 id="Android平台一个ScrollView只能有一个ChildView-Node-，在react-native上似乎没有这样的限制"><a href="#Android平台一个ScrollView只能有一个ChildView-Node-，在react-native上似乎没有这样的限制" class="headerlink" title="Android平台一个ScrollView只能有一个ChildView(Node)，在react-native上似乎没有这样的限制"></a>Android平台一个ScrollView只能有一个ChildView(Node)，在react-native上似乎没有这样的限制</h1><p>async storage</p><p>camera Roll<br><a href="https://github.com/yuanguozheng/JdApp">基于React Native构建的仿京东客户端</a></p><!-- <audio src="http://m10.music.126.net/20180121230941/8d878803b3b0542d9c5482ccf613a86b/ymusic/d95e/bab6/a7f5/864661168da79b309c3d2fac971d1698.mp3" autoplay="autoplay">您的浏览器不支持 audio 标签。</audio> -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/iu kpop star music sony.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Webpack资源汇总</title>
    <link href="https://haldir65.github.io/2018/01/14/2018-01-14-webpack-instructions/"/>
    <id>https://haldir65.github.io/2018/01/14/2018-01-14-webpack-instructions/</id>
    <published>2018-01-14T22:56:46.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/hot coffee city life winter.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><p>使用webpack的一个好处是，浏览器的并发请求资源数是有一个上限的，把所有资源打成一个包，能够减少请求数量。</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><blockquote><p>yarn add webpack</p></blockquote><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h2><blockquote><p>webpack is basically pulling  all external js files into on build.js file that we can bundle into our html.<br>这样做的好处很多，能够有效减少浏览器发出的请求数量。</p></blockquote><p>minify js(删掉所有的空行) webpack -p即可</p><h2 id="3-webpack-config-js"><a href="#3-webpack-config-js" class="headerlink" title="3. webpack.config.js"></a>3. webpack.config.js</h2><p>一个基本的config长这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">var</span> BrowserSyncPlugin = <span class="built_in">require</span>(<span class="string">"browser-sync-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./app.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: <span class="literal">true</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">"babel-preset-env"</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span> <span class="comment">/*end with .css*/</span>,</span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"style-loader"</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"css-loader"</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"less-loader"</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: __dirname,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    inline: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">"source-map"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>webpack devServer(内置一个express，在本地起一个local server)</p><blockquote><p>yarn add webpack-dev-server</p></blockquote><p>但是devServer 的hot reload 只能监视js文件的变化，并不能监视html或者server content的变化。这需要<a href="https://browsersync.io/">browserSync</a>以及BrowserSync plugin for Webpack.</p><blockquote><p>yarn add browsersync browser-sync-webpack-plugin</p></blockquote><h2 id="4-babel"><a href="#4-babel" class="headerlink" title="4. babel"></a>4. babel</h2><p>首先需要知道的是mudule.exports那一套在浏览器里是不支持的。会出现”require is undefined…”。解决办法也有，安装babel就行了。<br>babel的作用是把es2015的代码编译成es5的代码, 安装方式</p><blockquote><p>yarn add babel-cli babel-preset-env</p></blockquote><p>然后创建一个.babelrc文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>package.json中添加script:<br>babel : “babel”<br>命令行 ： npm run babel – index.js -o bundle.js -w</p><h2 id="5-loaders"><a href="#5-loaders" class="headerlink" title="5. loaders"></a>5. loaders</h2><h2 id="6-babel-css-precomiler"><a href="#6-babel-css-precomiler" class="headerlink" title="6. babel, css precomiler"></a>6. babel, css precomiler</h2><h2 id="7-react-cli"><a href="#7-react-cli" class="headerlink" title="7. react cli"></a>7. react cli</h2><p>=======================================================================================================<br>todo : webpack boilerplate<br>underscore javaScript library</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/hot coffee city life winter.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>css预处理语言</title>
    <link href="https://haldir65.github.io/2017/12/26/2017-12-26-less-is-more/"/>
    <id>https://haldir65.github.io/2017/12/26/2017-12-26-less-is-more/</id>
    <published>2017-12-26T22:36:49.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p>css预处理语言简介<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/bokeh street lights city art blue.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><p>css预处理语言允许我们以更简单的方式编写样式，通过编译生成浏览器能够使用的css文件。</p><ol><li><a href="http://sass-lang.com/">Sass</a> 诞生于 2007 年，Ruby 编写，其语法功能都十分全面，可以说 它完全把 CSS 变成了一门编程语言。另外 在国内外都很受欢迎，并且它的项目团队很是强大 ，是一款十分优秀的预处理语言。</li><li><a href="http://stylus-lang.com/">Stylus</a> 诞生于 2010 年，来自 Node.js 社区，语法功能也和 Sass 不相伯仲，是一门十分独特的创新型语言。</li><li><a href="http://lesscss.org/">Less</a> 诞生于 2009 年，受Sass的影响创建的一个开源项目。 它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充（引用于官网）。</li></ol><p><a href="http://www.oschina.net/question/12_44255">比较这三种预处理语言</a></p><h2 id="1-Less"><a href="#1-Less" class="headerlink" title="1. Less"></a>1. Less</h2><blockquote><p>安装<br>yarn add less<br>/ or install globally  /<br>yarn global add less<br>// Dead Simple LESS CSS Watch Compiler，实时监控less文件变化，更新到css<br>yarn add less-watch-compiler</p><p>使用<br>lessc styles.less // 并不会生成任何css文件<br>lessc styles.less styles.css //生成一个styles.css文件<br>新建一个style.less文件</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@background-color:</span> <span class="number">#f4f4f4</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@background-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的css文件长这样：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有变量，可以进行数学运算</span></span><br><span class="line"><span class="variable">@line-height:</span> <span class="number">1em</span>+<span class="number">1em</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以嵌套</span></span><br><span class="line"><span class="variable">@secondary-color:</span> <span class="number">#20B2AA</span>;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@background-color</span>;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@secondary-color</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="variable">@line-height</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有继承</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="selector-class">.border-radius</span>(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.primary-btn</span><span class="selector-pseudo">:extend(.btn)</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">@primary-color</span>;</span><br><span class="line">    <span class="selector-class">.text-color</span>(<span class="variable">@primary-color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有函数（mixin），有没有入参都行</span></span><br><span class="line"><span class="selector-class">.bordered</span>&#123;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid2px <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-radius</span>(<span class="variable">@radius</span>) &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还有if statement</span></span><br><span class="line"><span class="selector-class">.text-color</span>(<span class="variable">@a</span>) <span class="keyword">when</span> (lightness(<span class="variable">@a</span>) &gt; = <span class="number">50%</span> )&#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-color</span>(<span class="variable">@a</span>) <span class="keyword">when</span> (lightness(<span class="variable">@a</span>) &lt; <span class="number">50%</span> )&#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>filepath</strong><br>比如经常把一些文件挪到其他位置了，这下在css中引用的位置全部都要换，<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@images:</span> <span class="string">"images/"</span></span><br><span class="line"><span class="variable">@homepage-images</span>: <span class="string">"images/homepage/"</span></span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"@&#123;images&#125;fruit.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>import功能</strong><br>在main.less文件中</p><blockquote><p>@import header.less<br>@import menu.less<br>直接用</p></blockquote><p>更多的使用直接去<a href="http://lesscss.org/">Less</a>查找就好了</p><h3 id="less搭配webpack-webpack-dev-server使用-使用方式"><a href="#less搭配webpack-webpack-dev-server使用-使用方式" class="headerlink" title="less搭配webpack(webpack-dev-server使用)使用方式"></a>less搭配webpack(webpack-dev-server使用)使用方式</h3><p>deadsimple-less-watch-compiler —  watch less<br>webpack-dev-server –  watch js file changes<br>webpack-less-loader</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span>, <span class="attr">options</span>: &#123; <span class="attr">importLoaders</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">          <span class="string">'less-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在index.js中:</p><blockquote><p>import css from ‘styles.less’;</p></blockquote><p>找了好久没有找到关于less-loader hot reload的设置，只好在package.json中设置</p><blockquote><p>“dev”: “less-watch-compiler”,<br>“start”:”webpack-dev-server –progress –hot –inline –config webpack.config.js &amp;&amp; yarn dev”</p></blockquote><p>把两个command chain起来就是了</p><h2 id="2-Stylus"><a href="#2-Stylus" class="headerlink" title="2.Stylus"></a>2.Stylus</h2><blockquote><p>安装<br>yarn add stylus<br>yarn add stylus-loader</p><p>使用<br>stylus -w style.styl -o style.css //w表示watch</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">line-height</span> = <span class="number">10px</span></span><br><span class="line">body</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">    h1</span><br><span class="line">     <span class="attribute">color</span>: <span class="number">#5e5e5e</span></span><br><span class="line">     <span class="attribute">line-height</span>: line-height</span><br></pre></td></tr></table></figure><p>生成的css文件长这样<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5e5e5e</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixin也有</span></span><br><span class="line"><span class="function"><span class="title">border-radius</span><span class="params">(n)</span></span></span><br><span class="line">  -webkit-<span class="attribute">border-radius</span> n</span><br><span class="line">  -moz-<span class="attribute">border-radius</span> n</span><br><span class="line">  <span class="attribute">border-radius</span> n</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">input</span>[type=button]</span><br><span class="line">  <span class="attribute">border-radius</span>(<span class="number">5px</span>)</span><br></pre></td></tr></table></figure><p><a href="http://stylus-lang.com/">官网</a></p><p>当然日常开发中不可能一直手敲 stylus xxx xxx或者 lessc xxx xxx，因为有webpack-loader。</p><h2 id="3-Sass"><a href="#3-Sass" class="headerlink" title="3. Sass"></a>3. Sass</h2><h1 id="Sass需要安装Ruby。"><a href="#Sass需要安装Ruby。" class="headerlink" title="Sass需要安装Ruby。"></a>Sass需要安装Ruby。</h1><p>SCSS 是 Sass 3 引入新的语法，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。也就是说，任何标准的 CSS3 样式表都是具有相同语义的有效的 SCSS 文件。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> rounded($amount) &#123;</span><br><span class="line">  -moz-border-radius: $amount;</span><br><span class="line">  -webkit-border-radius: $amount;</span><br><span class="line">  border-radius: $amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Sass本身不带花括号，加上花括号和分号就成了SCSS了.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css预处理语言简介&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/bokeh street lights city art blue.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot入门记录</title>
    <link href="https://haldir65.github.io/2017/12/13/2017-12-13-spring-boot-elementart-guide/"/>
    <id>https://haldir65.github.io/2017/12/13/2017-12-13-spring-boot-elementart-guide/</id>
    <published>2017-12-13T23:19:33.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p>关于Spring Boot的基本知识要点<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100670897.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h2 id="1-创建一个Spring-Boot-app-非常简单"><a href="#1-创建一个Spring-Boot-app-非常简单" class="headerlink" title="1. 创建一个Spring Boot app 非常简单"></a>1. 创建一个Spring Boot app 非常简单</h2><p><a href="https://medium.com/@ahmetkapusuz/spring-boot-hello-world-application-with-intellij-idea-1524c68ddaae">Creating a Spring Application in Intelij is darn Simple</a></p><h2 id="2-组件及用法"><a href="#2-组件及用法" class="headerlink" title="2. 组件及用法"></a>2. 组件及用法</h2><h3 id="2-1-Service"><a href="#2-1-Service" class="headerlink" title="2.1 Service"></a>2.1 Service</h3><h3 id="2-2-Dao"><a href="#2-2-Dao" class="headerlink" title="2.2 Dao"></a>2.2 Dao</h3><h3 id="2-3-Entity"><a href="#2-3-Entity" class="headerlink" title="2.3 Entity"></a>2.3 Entity</h3><h3 id="2-4-Controller"><a href="#2-4-Controller" class="headerlink" title="2.4 Controller"></a>2.4 Controller</h3><h2 id="3-一些配置"><a href="#3-一些配置" class="headerlink" title="3. 一些配置"></a>3. 一些配置</h2><p>Spring Boot修改内置Tomcat端口号：<br>EmbeddedServletContainerCustomizer</p><blockquote><p>或者在<br>src/main/resources/application.yml文件中添加<br>server<br>  port: 8081</p></blockquote><p>=================================================================<br>在windows里面查看内网ip，从控制面板进去看是不准的，DHCP有效期过了自动换掉，得自己敲ipconfig，这样才是最及时的。</p><p>以Okio为例，maven的搜索网站是<p><a href="https://search.maven.org/remote_content?g=com.squareup.okio&amp;a=okio&amp;v=LATEST">https://search.maven.org/remote_content?g=com.squareup.okio&amp;a=okio&amp;v=LATEST</a></p>，实际下发的域名是<p><a href="https://repo1.maven.org/maven2/com/squareup/okio/okio/1.14.0/okio-1.14.0.jar">https://repo1.maven.org/maven2/com/squareup/okio/okio/1.14.0/okio-1.14.0.jar</a></p>。用wget看，是302重定向了。</p><p>补充一些tomcat和servlet的知识<br>tomcat是web container,servlet是处理业务逻辑的。<br>servlet继承自HttpServlet,里面有doGet和doPost方法。<br>servlet和请求的url的对应关系写在web.xml中。</p><p><a href="https://spring.io/guides/gs/accessing-data-mysql/">accessing-data-mysql</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Spring Boot的基本知识要点&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100670897.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>VPS维护的日常</title>
    <link href="https://haldir65.github.io/2017/12/11/2017-12-11-vps-maintenance/"/>
    <id>https://haldir65.github.io/2017/12/11/2017-12-11-vps-maintenance/</id>
    <published>2017-12-11T16:20:16.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100756208.jpg?imageView2/2/w/600" alt=""></p><a id="more"></a><p>以下在 ubuntu 16.04.3 LTS 上通过</p><h2 id="1-小硬盘清理垃圾"><a href="#1-小硬盘清理垃圾" class="headerlink" title="1. 小硬盘清理垃圾"></a>1. 小硬盘清理垃圾</h2><blockquote><p>sudo apt-get autoclean 清理旧版本的软件缓存<br>sudo apt-get clean 清理所有软件缓存<br>sudo apt-get autoremove 删除系统不再使用的孤立软件<br> sudo rm -rf /var/tmp ## 一般来说/tmp和/var/tmp/文件夹里面的东西可以随便删除，稳妥起见还是先看下这个目录下有没有什么文件被正在跑的程序使用：<br>sudo lsof +D /var ## 我看到一大堆mysql的东西 ，另外说一下，为什么/tmp文件夹这么小，因为ubuntu系统每次重启都会把这里面清一下</p></blockquote><h2 id="2-必要软件"><a href="#2-必要软件" class="headerlink" title="2.必要软件"></a>2.必要软件</h2><p>刚装好的 ubuntu 需要执行以下步骤,都是些常用的软件</p><blockquote><p>安装 git &gt; apt-get install git<br>安装 python &gt; apt-get install python-2.7<br>安装 python-setuptools &gt; apt-get install python-setuptools<br>检查是否安装好： python –version</p></blockquote><p>还有一些，比如 htop<br>htop中各个process的state<a href="https://stackoverflow.com/questions/18470215/what-does-a-c-process-status-mean-in-htop">参考</a></p><blockquote><p>D uninterruptible sleep (usually IO)<br>R running or runnable (on run queue)<br>S interruptible sleep (waiting for an event to complete)<br>T stopped, either by a job control signal or because it is being traced.<br>W paging (not valid since the 2.6.xx kernel)<br>X dead (should never be seen)<br>Z defunct (“zombie”) process, terminated but not reaped by its parent.</p></blockquote><p>只安装security update</p><blockquote><p>sudo unattended-upgrades -d ## 加上-d和verbose的意思差不多</p></blockquote><h3 id="2-1-装-ss"><a href="#2-1-装-ss" class="headerlink" title="2.1 装 ss"></a>2.1 装 ss</h3><blockquote><p>下载 shadowsocks 源码编译<br>git clone <a href="https://github.com/shadowsocks/shadowsocks">https://github.com/shadowsocks/shadowsocks</a></p></blockquote><h1 id="记得切换到-master-分支"><a href="#记得切换到-master-分支" class="headerlink" title="记得切换到 master 分支"></a>记得切换到 master 分支</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p>检查下版本</p><blockquote><p>ssserver –version</p></blockquote><p>编辑配置文件</p><blockquote><p>vim config.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>: <span class="string">"my_server_ip"</span>,  </span><br><span class="line">  <span class="attr">"server_port"</span>: <span class="number">8388</span>,</span><br><span class="line">  <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"mypassword"</span>,</span><br><span class="line">  <span class="attr">"timeout"</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">  <span class="attr">"fast_open"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ipv6的话(把”my_server_ip”改成”::”),这样访问通过ss访问ipv6.google.com就ok了(当然这要在确认host已有ipv6的前提下)<br>这跟nginx ipv6 server block很像：</p><blockquote><p>listen 80 default_server;<br>listen [::]:80 default_server ipv6only=on;</p></blockquote><p>如果你的服务器Linux 内核在3.7+，可以开启fast_open 以降低延迟。<br>linux 内核版本查看：</p><blockquote><p>cat /proc/version</p><p>ssserver -c config.json -d start #启动完成</p></blockquote><p>检查下是否启动了</p><blockquote><p>ps -ef | grep sss</p></blockquote><p>ss 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks/config.json # 前台运行</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 后台运行和停止</span></span></span><br><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##  加入开机启动</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 在/etc/rc.local中加入</span></span></span><br><span class="line">sudo ssserver -c /etc/shadowsocks.json --user username -d start - 不要总是用root用户做事，adduser来做，给sudo权限即可</span><br></pre></td></tr></table></figure><p> nohup /net-speeder/net-speeder/net_speeder eth0 “tcp src port 15674” &gt; /dev/null 2&gt;&amp;1 &amp;<br> nohup /net-speeder/net-speeder/net_speeder eth0 “tcp src port 23636” &gt; /dev/null 2&gt;&amp;1 &amp;</p><h3 id="2-2-SSR-以及一些衍生的软件"><a href="#2-2-SSR-以及一些衍生的软件" class="headerlink" title="2.2 SSR 以及一些衍生的软件"></a>2.2 SSR 以及一些衍生的软件</h3><p><a href="https://github.com/breakwa11/shadowsocks-rss/wiki">ShadowsocksR</a>启动后台运行命令</p><blockquote><p>python server.py -p 443 -k password -m aes-256-cfb -O auth_sha1_v4 -o http_simple -d start</p></blockquote><p><a href="https://zhgcao.github.io/2016/05/26/ubuntu-install-net-speeder/">net-speeder</a></p><blockquote><p>apt-get install libnet1-dev<br>apt-get install libpcap0.8-dev</p><p>venetX，OpenVZ 架构</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cd net-speeder-master/</span><br><span class="line">sh build.sh -DCOOKED</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##Xen，KVM，物理机</span></span></span><br><span class="line">cd net-speeder-master/</span><br><span class="line">sh build.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 加速所有ip协议数据</span></span></span><br><span class="line"></span><br><span class="line">./net_speeder venet0 "ip"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##只加速指定端口，例如只加速TCP协议的 8989端口, 切换到net-speeder的目录下</span></span></span><br><span class="line">./net_speeder venet0:0 "tcp src port 8989"</span><br><span class="line"></span><br><span class="line">./net_speeder venet0 "ip"</span><br></pre></td></tr></table></figure><p><a href="https://blog.kuoruan.com/48.html">net-speeder写入开机脚本</a></p><h3 id="2-3-升级内核开启-BBR"><a href="#2-3-升级内核开启-BBR" class="headerlink" title="2.3 升级内核开启 BBR"></a>2.3 升级内核开启 BBR</h3><p><a href="https://qiujunya.com/linodebbr.html">KVM 架构升级内核开启 BBR</a></p><p><a href="http://www.itfanr.cc/2016/10/02/use-shadowsocks-to-have-better-internet-experience/">ubuntu 16.4 安装 shadowsocks-libev</a></p><p>参考 github<a href="https://github.com/shadowsocks/shadowsocks-libev">官方教程</a>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common -y</span><br><span class="line">sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev -y</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install shadowsocks-libev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Edit the configuration file</span></span><br><span class="line">sudo vi /etc/shadowsocks-libev/config.json ## 这里记得把server address改成实际的ip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Edit the default configuration <span class="keyword">for</span> debian</span></span><br><span class="line">sudo vi /etc/default/shadowsocks-libev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Start the service</span></span><br><span class="line">sudo /etc/init.d/shadowsocks-libev start    # for sysvinit, or</span><br><span class="line">sudo systemctl start shadowsocks-libev      # for systemd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#加入开机启动</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#在/etc/rc.local中加入</span></span></span><br><span class="line">sudo /etc/init.d/shadowsocks-libev start</span><br><span class="line">sudo ss-server -c /etc/shadowsocks-libev/config.json -u ## 开启udp转发  netstat -lnp确认ss-server确实监听了udp端口</span><br></pre></td></tr></table></figure><p>其实跟安装 ss 很像的</p><h2 id="2-4-安装libsodium"><a href="#2-4-安装libsodium" class="headerlink" title="2.4 安装libsodium"></a>2.4 安装libsodium</h2><p>转自<a href="https://doub.io/ss-jc51/">逗比</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># debian系列</span></span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 编译所需组件包：</span></span></span><br><span class="line">apt-get install -y build-essential</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 获取 libsodium最新版本：</span></span></span><br><span class="line">Libsodiumr_ver=$(wget -qO- "https://github.com/jedisct1/libsodium/tags"|grep "/jedisct1/libsodium/releases/tag/"|head -1|sed -r 's/.*tag\/(.+)\"&gt;.*/\1/') &amp;&amp; echo "$&#123;Libsodiumr_ver&#125;"</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 下载最新 libsodium版本编译文件：</span></span></span><br><span class="line">wget --no-check-certificate -N "https://github.com/jedisct1/libsodium/releases/download/$&#123;Libsodiumr_ver&#125;/libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz"</span><br><span class="line">tar -xzf libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz &amp;&amp; cd libsodium-$&#123;Libsodiumr_ver&#125;</span><br><span class="line">./configure --disable-maintainer-mode &amp;&amp; make -j2 &amp;&amp; make install ## 这段最好sudo 去做</span><br><span class="line">ldconfig</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 删掉之前下载的文件</span></span></span><br><span class="line">cd .. &amp;&amp; rm -rf libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz &amp;&amp; rm -rf libsodium-$&#123;Libsodiumr_ver&#125;</span><br></pre></td></tr></table></figure></p><p>现在就可以去config.json文件中将加密方式改成: chacha20 了，重启下ss即可</p><h2 id="3-ubuntu自带的防火墙叫做ufw，用起来也很简单"><a href="#3-ubuntu自带的防火墙叫做ufw，用起来也很简单" class="headerlink" title="3. ubuntu自带的防火墙叫做ufw，用起来也很简单"></a>3. ubuntu自带的防火墙叫做ufw，用起来也很简单</h2><h2 id="4-跑分"><a href="#4-跑分" class="headerlink" title="4.跑分"></a>4.跑分</h2><p><a href="https://github.com/Teddysun/across">VPS 跑分软件</a><br>git clone 下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd across</span><br><span class="line">wget -qO- bench.sh | bash ###（亲测可用，也可以自己看Readme）</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 或者</span></span></span><br><span class="line">curl -Lso- bench.sh | bash</span><br></pre></td></tr></table></figure><p>下面是一些自己试过的</p><h3 id="BandWagon"><a href="#BandWagon" class="headerlink" title="BandWagon"></a>BandWagon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------</span><br><span class="line">CPU model            : Intel(R) Xeon(R) CPU E3-1275 v5 @ 3.60GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 3600.041 MHz</span><br><span class="line">Total size of Disk   : 12.0 GB (10.0 GB Used)</span><br><span class="line">Total amount of Mem  : 256 MB (217 MB Used)</span><br><span class="line">Total amount of Swap : 128 MB (122 MB Used)</span><br><span class="line">System uptime        : 2 days, 4 hour 20 min</span><br><span class="line">Load average         : 0.06, 0.05, 0.01</span><br><span class="line">OS                   : Ubuntu 14.04.1 LTS</span><br><span class="line">Arch                 : i686 (32 Bit)</span><br><span class="line">Kernel               : 2.6.32-042stab123.3</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 855 MB/s</span><br><span class="line">I/O speed(2nd run)   : 1.0 GB/s</span><br><span class="line">I/O speed(3rd run)   : 1.0 GB/s</span><br><span class="line">Average I/O speed    : 967.7 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         76.5MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          17.6MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            8.18MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           8.67MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           12.8MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             9.40MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           62.3MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          66.0MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            12.2MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           11.8MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          13.2MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="BuyVm"><a href="#BuyVm" class="headerlink" title="BuyVm"></a>BuyVm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">CPU model            : Intel(R) Xeon(R) CPU           L5639  @ 2.13GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 2000.070 MHz</span><br><span class="line">Total size of Disk   : 15.0 GB (1.3 GB Used)</span><br><span class="line">Total amount of Mem  : 128 MB (80 MB Used)</span><br><span class="line">Total amount of Swap : 128 MB (32 MB Used)</span><br><span class="line">System uptime        : 0 days, 22 hour 28 min</span><br><span class="line">Load average         : 0.10, 0.04, 0.05</span><br><span class="line">OS                   : Ubuntu 14.04.2 LTS</span><br><span class="line">Arch                 : i686 (32 Bit)</span><br><span class="line">Kernel               : 2.6.32-openvz-042stab116.2-amd64</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 102 MB/s</span><br><span class="line">I/O speed(2nd run)   : 97.1 MB/s</span><br><span class="line">I/O speed(3rd run)   : 147 MB/s</span><br><span class="line">Average I/O speed    : 115.4 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         14.7MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          6.15MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            2.54MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           2.99MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           2.96MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             4.27MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           11.7MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          13.0MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            1.89MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           3.26MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          3.72MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="DigitalOcean-Los-Angeles"><a href="#DigitalOcean-Los-Angeles" class="headerlink" title="DigitalOcean Los Angeles"></a>DigitalOcean Los Angeles</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------</span><br><span class="line">CPU model            : Intel(R) Xeon(R) CPU E5-2650L v3 @ 1.80GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 1799.998 MHz</span><br><span class="line">Total size of Disk   : 20.2 GB (1.0 GB Used)</span><br><span class="line">Total amount of Mem  : 488 MB (33 MB Used)</span><br><span class="line">Total amount of Swap : 0 MB (0 MB Used)</span><br><span class="line">System uptime        : 0 days, 0 hour 3 min</span><br><span class="line">Load average         : 0.16, 0.10, 0.03</span><br><span class="line">OS                   : Ubuntu 16.04.2 LTS</span><br><span class="line">Arch                 : x86_64 (64 Bit)</span><br><span class="line">Kernel               : 4.4.0-78-generic</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 581 MB/s</span><br><span class="line">I/O speed(2nd run)   : 711 MB/s</span><br><span class="line">I/O speed(3rd run)   : 777 MB/s</span><br><span class="line">Average I/O speed    : 689.7 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         161MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          15.7MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            5.96MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           5.71MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           6.45MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             30.4MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           29.9MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          57.7MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            3.64MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           7.59MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          8.84MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="DigitalOcean-Sinapore-ip-adress-lokks-like-Russian"><a href="#DigitalOcean-Sinapore-ip-adress-lokks-like-Russian" class="headerlink" title="DigitalOcean Sinapore (ip adress lokks like Russian)"></a>DigitalOcean Sinapore (ip adress lokks like Russian)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------</span><br><span class="line">CPU model            : Intel(R) Xeon(R) CPU E5-2630L 0 @ 2.00GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 1999.999 MHz</span><br><span class="line">Total size of Disk   : 20.2 GB (1.0 GB Used)</span><br><span class="line">Total amount of Mem  : 488 MB (36 MB Used)</span><br><span class="line">Total amount of Swap : 0 MB (0 MB Used)</span><br><span class="line">System uptime        : 0 days, 0 hour 2 min</span><br><span class="line">Load average         : 0.17, 0.20, 0.09</span><br><span class="line">OS                   : Ubuntu 16.04.2 LTS</span><br><span class="line">Arch                 : x86_64 (64 Bit)</span><br><span class="line">Kernel               : 4.4.0-78-generic</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 662 MB/s</span><br><span class="line">I/O speed(2nd run)   : 741 MB/s</span><br><span class="line">I/O speed(3rd run)   : 728 MB/s</span><br><span class="line">Average I/O speed    : 710.3 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         20.8MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          18.6MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            83.8MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           5.71MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           8.13MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             2.82MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           6.18MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          8.47MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            6.77MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           97.9MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          35.2MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100809920.jpg?imageView2/2/w/600" alt=""></p><h3 id="5-跑java？"><a href="#5-跑java？" class="headerlink" title="5. 跑java？"></a>5. 跑java？</h3><p>算了吧，简单读个文本文件print出来cpu就飙到50%。</p><h3 id="Dnsmasq-vps自建DNS服务器"><a href="#Dnsmasq-vps自建DNS服务器" class="headerlink" title="Dnsmasq vps自建DNS服务器"></a>Dnsmasq vps自建DNS服务器</h3><h3 id="5-关于-docker"><a href="#5-关于-docker" class="headerlink" title="5. 关于 docker"></a>5. 关于 docker</h3><p>youtube 上有人在 Digital Ocean 的 vps 上安装 docker，主要作用就是将一个复杂的操作系统打包成一个下载即用的容器。进入容器中，可以像在实际的操作系统中一样运行指令。所以虚拟化的机器随时可以使用其他操作系统。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.vpser.net/opt/vps-add-swap.html">vps 优化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100756208.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>使用Node和express开发Restful API</title>
    <link href="https://haldir65.github.io/2017/12/10/2017-12-10-Restful-API-Prescription-with-node-express/"/>
    <id>https://haldir65.github.io/2017/12/10/2017-12-10-Restful-API-Prescription-with-node-express/</id>
    <published>2017-12-10T16:20:16.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/sceneryc7fd99f667c9d98a583a174872d58d13.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><blockquote><p>yarn add express body-parser</p></blockquote><p>mongoose安装</p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>MiddleWare(中间件)的概念：<br>从Request到response之间的流程中，任何组件都可以对这个过程中的数据进行修改，所以router其实也是中间件。中间件需要注意的就是<strong><em>顺序很重要</em></strong>。</p><p>调试使用postMan</p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>get请求的参数怎么拿，get的参数本身都是写在url里面的</p><p>比如</p><blockquote><p>GET /student/getById/27 这样一个get请求</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/getById/:age'</span>,functin(req,res)&#123;</span><br><span class="line">    res.send(req.prarms.age);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在postMan发起post请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /api/personal?age=10 HTTP/1.1</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Postman-Token: 79c6d9a1-de8d-3b0b-8d3d-0ed6e1910f69</span><br><span class="line"></span><br><span class="line">name=Josn&amp;age=12</span><br></pre></td></tr></table></figure></p><p>POST请求中的body数据从req.body中拿就好了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req.params   <span class="comment">//  Object ，Json.String = &#123;&#125;</span></span><br><span class="line">req.body    <span class="comment">//  &#123;name:'Josn',age:'12'&#125;  //这个是post里面发送的body数据</span></span><br><span class="line">req.query  <span class="comment">// &#123;"age","10"&#125;  // 显然这是url里面的query</span></span><br></pre></td></tr></table></figure></p><h2 id="3-Serving-static-files"><a href="#3-Serving-static-files" class="headerlink" title="3. Serving static files"></a>3. Serving static files</h2><p>照说serving static file这种事应该交给nginx类似的反向代理来做，express只是提供了一种选择。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(path.join(__dirname,<span class="string">'public'</span>)))</span><br></pre></td></tr></table></figure></p><p>然后在当前目录新建一个public文件夹，添加img文件夹，里面放一张porn.jpg。<br>浏览器访问： localhost:port/img/porn.jpg 。 就能看到放进去的的那张图片了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/jquery'</span>, express.static(__dirname + <span class="string">'/node_modules/jquery/dist/'</span>));</span><br></pre></td></tr></table></figure><p>这意思就是请求/jquery这个目录下的资源就等于访问/node_modules/jquery/dist/目录下同名的资源</p><h2 id="4-response"><a href="#4-response" class="headerlink" title="4. response"></a>4. response</h2><p>response.redirect(‘/all’); //在浏览器里面看，response的header是这样的</p><blockquote><p>HTTP/1.1 302 Found<br>X-Powered-By: Express<br>Location: /all<br>Vary: Accept<br>Content-Type: text/html; charset=utf-8<br>Content-Length: 68<br>Date: Sun, 14 Jan 2018 10:08:50 GMT<br>Connection: keep-alive</p><p>response.direction();<br>和window.location.href差不多</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GET  /api/user */</span> much extra information you can set on its header</span><br><span class="line">app.get(<span class="string">"/user"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    res.set(&#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">        <span class="string">'Content-Length'</span>: <span class="string">'123'</span>,</span><br><span class="line">        <span class="string">'ETag'</span>: <span class="string">'12345'</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">'max-age=5'</span>,</span><br><span class="line">        <span class="string">"Access-Control-Allow-Origin"</span>: <span class="string">'http://127.0.0.1:8080'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.cookie(<span class="string">'name'</span>, <span class="string">'tobi'</span>, &#123; <span class="attr">domain</span>: <span class="string">'.example.com'</span>, <span class="attr">path</span>: <span class="string">'/admin'</span>, <span class="attr">secure</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'response send'</span>);</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"John"</span>,</span><br><span class="line">        <span class="string">"age"</span>:<span class="number">10</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>简单的session处理:</p><blockquote><p>yarn add express cookie-parser express-session<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">"/"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (req.session.user) &#123;</span><br><span class="line">    <span class="keyword">var</span> user = req.session.user;</span><br><span class="line">    <span class="keyword">var</span> name = user.name;</span><br><span class="line">    res.send(<span class="string">"你好"</span> + name + <span class="string">"，欢迎来到我的家园。"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user = &#123;</span><br><span class="line">      name: <span class="string">"Chen-xy"</span>,</span><br><span class="line">      age: <span class="string">"22"</span>,</span><br><span class="line">      address: <span class="string">"bj"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    req.session.user = user;</span><br><span class="line">    res.send(<span class="string">"你还没有登录，先登录下再试试！"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// res.render("index", &#123;</span></span><br><span class="line">  <span class="comment">//   title: "the test for nodejs session",</span></span><br><span class="line">  <span class="comment">//   name: "sessiontest"</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p>======================================================<br>how about error handling</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">"/user"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req,res,next</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>另一种选择，graphQl是和restful功能类似的模式</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.restran.net/2015/08/19/nginx-frontend-helper/">Nginx 是前端工程师的好帮手</a></p><p><a href="http://expressjs.jser.us/api#req.param">Express Api book</a></p><p><a href="http://imweb.io/topic/570130a306f2400432c1396c">在NodeJs中玩转protoBuffer</a></p><p><a href="http://blog.desmondyao.com/fake-server/">使用nodejs 和express搭建本地API服务器</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/sceneryc7fd99f667c9d98a583a174872d58d13.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB手册</title>
    <link href="https://haldir65.github.io/2017/12/10/2017-12-10-MongoDB-recepies/"/>
    <id>https://haldir65.github.io/2017/12/10/2017-12-10-MongoDB-recepies/</id>
    <published>2017-12-10T16:13:54.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100794441.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><p>MongoDB可以作为Spring boot的数据库DAO，也可以和node平台的express module结合。作为后台开发的数据库，应用很广。</p><h2 id="安装-windows平台下"><a href="#安装-windows平台下" class="headerlink" title="安装(windows平台下)"></a>安装(windows平台下)</h2><p>MongoDB默认装到C盘的program files文件夹里面,需要一个data文件夹<br><a href="https://docs.mongodb.com/v3.4/tutorial/install-mongodb-on-windows/">official on installation</a><br>这个文件夹不一定要在c盘，可以放f盘，比如”f://mongndb//data”<br>//这样启动server时记得把–dbpath传一下</p><h2 id="establish-connection"><a href="#establish-connection" class="headerlink" title="establish connection"></a>establish connection</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// start db server</span><br><span class="line">"C:\Program Files\MongoDB\Server\3.4\bin\mongod.exe" --dbpath d:\test\mongodb\data</span><br><span class="line">// open another shell window to connect to server</span><br><span class="line">"C:\Program Files\MongoDB\Server\3.4\bin\mongo.exe"</span><br><span class="line">// then you can start interact with mongo db server</span><br></pre></td></tr></table></figure><h2 id="速查手册"><a href="#速查手册" class="headerlink" title="速查手册"></a>速查手册</h2><p><a href="https://www.tutorialspoint.com/mongodb/mongodb_create_collection.htm">Tutorial, not official</a><br><a href="https://code.tutsplus.com/articles/an-introduction-to-mongoose-for-mongodb-and-nodejs--cms-29527">Mongoose教程</a><br><a href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/#db.collection.findOneAndDelete">官方手册</a><br><a href="https://scotch.io/tutorials/using-mongoosejs-in-node-js-and-mongodb-applications#what-is-mongoose">Mongoose CURD</a><br><a href="https://docs.mongodb.com/ecosystem/drivers/">支持多种语言环境调用mongodb api</a></p><p>语法：</p><blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">use mydb <span class="comment">## 创建一个名mydb的数据库</span></span><br><span class="line">db.createCollection(<span class="string">"students"</span>) <span class="comment">## 创建一个students的collections(类似于sql的table)</span></span><br><span class="line">show collections  <span class="comment">## 显示当前数据库中的所有collections</span></span><br><span class="line">db.students.insert(&#123;<span class="symbol">name:</span> <span class="string">'Json'</span>,<span class="symbol">age:</span> <span class="number">22</span>,<span class="symbol">title:</span>[<span class="string">'teacher'</span>,<span class="string">'professor'</span>,<span class="string">'versatile'</span>]&#125;) <span class="comment">## 往数据库里添加一条数据</span></span><br><span class="line">db.students.find().pretty() /<span class="regexp">/ 显示students的collection中的所有元素，pretty只是好看点</span></span><br><span class="line"><span class="regexp">db.students.updateOne( &#123; "name": "Bob" &#125;, &#123; $set: &#123;"age" : 99&#125;&#125; ); /</span><span class="regexp">/ UPDATE语句 set</span></span><br><span class="line"><span class="regexp">db.students.find( &#123; age : &#123; $gt:24, $lt: 28&#125; &#125; )  /</span><span class="regexp">/ QUERY 语句 greater than and less than</span></span><br><span class="line"><span class="regexp">db.students.deleteOne( &#123; "_id" : ObjectId("5a584a109f157d455472ff11") &#125; ); /</span><span class="regexp">/ DELETE 语句</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">## batchInsert</span></span><br><span class="line"><span class="regexp">try &#123;</span></span><br><span class="line"><span class="regexp">   db.products.insertMany( [</span></span><br><span class="line"><span class="regexp">      &#123; item: "card", qty: 15 &#125;,</span></span><br><span class="line"><span class="regexp">      &#123; item: "envelope", qty: 20 &#125;,</span></span><br><span class="line"><span class="regexp">      &#123; item: "stamps" , qty: 30 &#125;</span></span><br><span class="line"><span class="regexp">   ] );</span></span><br><span class="line"><span class="regexp">&#125; catch (e) &#123;</span></span><br><span class="line"><span class="regexp">   print (e);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><h2 id="在node环境下可以使用"><a href="#在node环境下可以使用" class="headerlink" title="在node环境下可以使用"></a>在node环境下可以使用</h2><p>Mongoose // a wrapper around the mongo db interface</p><p>schema  definition<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// correct</span></span><br><span class="line"><span class="keyword">var</span> studentSchema = mongoose.Schema(&#123;</span><br><span class="line">    _id: <span class="built_in">String</span>,</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// wrong</span></span><br><span class="line"><span class="keyword">var</span> studentSchema = mongoose.Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>===========================================================================<br>// todo validate request data, error handling.</p><p><a href="https://www.youtube.com/watch?v=3f5Q9wDePzY">Uploading Files to MongoDB With GridFS (Node.js App)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100794441.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nodejs学习记录</title>
    <link href="https://haldir65.github.io/2017/12/10/2017-12-10-node-js-cookbook/"/>
    <id>https://haldir65.github.io/2017/12/10/2017-12-10-node-js-cookbook/</id>
    <published>2017-12-10T16:13:30.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p>npm run start<br><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100694324.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>windows上的安装十分方便，就跟安装普通软件一样，一路下一步点下去即可。</p><blockquote><p>npm install -g grunt –save-dev # 安装，成为全局(-g)module，保存为dev-dependencies(–save-dev) 简写 -D 一个意思<br>npm install -g grunt –save # 安装，保存为dependencies</p><p>npm run dev # 打开发环境包<br>npm run build # 打release包<br>node is based on chrome v8 engine,it’s javaScript without the browser.</p></blockquote><p>npm的configuration非常方便设置,首先是<a href="https://stackoverflow.com/questions/7559648/is-there-a-way-to-make-npm-install-the-command-to-work-behind-proxy">设置proxy</a></p><blockquote><p>npm config set strict-ssl false<br>npm config set registry “<a href="http://registry.npmjs.org/">http://registry.npmjs.org/</a>“<br>npm config set proxy <a href="http://127.0.0.1:1080">http://127.0.0.1:1080</a> ## 以上三句话设置代理<br>npm config list ##列出当前所有的设置<br>npm config get stuff ##比如说registry等等</p></blockquote><p>也有用淘宝cnpm的做法:</p><blockquote><p>$ npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a><br>$ npm config set registry <a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a><br>$ cnpm install [name]  ## 这样就能安装了</p></blockquote><p><a href="https://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies">whats-the-difference-between-dependencies-devdependencies-and-peerdependencies</a><br>npm有个dependencies的概念，此外还有dev-dependencies的概念，主要看package.json这个文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"foo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"node build/dev-server.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"node build/build.js"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"lint"</span>: <span class="string">"eslint --ext .js,.vue src test/unit/specs test/e2e/specs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"axios"</span>: <span class="string">"^0.15.3"</span>,</span><br><span class="line">    <span class="attr">"jsonp"</span>: <span class="string">"^0.2.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^2.6.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-middleware"</span>: <span class="string">"^1.10.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-hot-middleware"</span>: <span class="string">"^2.18.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-merge"</span>: <span class="string">"^4.1.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*script的意思是输入npm run dev = node build/dev-server.js  类似于 linux下的alias*/</span><br><span class="line"></span><br><span class="line">/*向上箭头的意思是安装的时候会自动去查找安装最新的minor version。关于版本号，第一位表示major version，may incur code imcompatibility,第二位表示minor version，代表new features,第三位表示bug fixes.所以向上箭头意味着安装时不会动第一位，只会升级为第二位最新的版本*/</span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/22343224/whats-the-difference-between-tilde-and-caret-in-package-json">stackoverflow上的解释</a></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>app.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello!'</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p>node app.js<br>hello!</p></blockquote><h2 id="创建node-project"><a href="#创建node-project" class="headerlink" title="创建node project"></a>创建node project</h2><blockquote><p>npm init<br>会提示一些信息，生成一个package.json文件</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main是指程序的运行入口<br>script是指可以自己设置启动的命令，有点像alias<br>比如 vue-cli的package.json里面就是这样的</p><blockquote><p>“dev”: “node build/dev-server.js”,<br>“build”: “node build/build.js”</p></blockquote><p>所以用户只要输入</p><blockquote><p>npm run dev<br>就等同于<br>node build/dev-server.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">// http is a core module ,so we do't need install</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">cost server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">trueres.statusCode = <span class="number">200</span>;</span><br><span class="line">trueres.setHeader(<span class="string">'Content-type'</span>,<span class="string">'text/plain'</span>);</span><br><span class="line">trueres.end(<span class="string">'Hello there!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(port,hostname,() =&gt;&#123;</span><br><span class="line">true<span class="built_in">console</span>.log(<span class="string">'Server started on port '</span>+ port);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时去浏览器中打开’localhost:3000’，会返回’Hello there!’</p><p>想要返回一个html并在浏览器中渲染，<br>ctrl+c停止服务器，修改代码如下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs =<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'index.html'</span>,(err,html) =&gt; &#123;</span><br><span class="line">true<span class="keyword">if</span> (err) &#123;</span><br><span class="line">truetrue<span class="keyword">throw</span> err;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">truetrueres.statusCode = <span class="number">200</span>;</span><br><span class="line">truetrueres.setHeader(<span class="string">'Content-type'</span>,<span class="string">'text/html'</span>);</span><br><span class="line">truetrueres.write(html);</span><br><span class="line">truetrueres.end();</span><br><span class="line">true&#125;);</span><br><span class="line"></span><br><span class="line">trueserver.listen(port,hostname,() =&gt;&#123;</span><br><span class="line">truetrue<span class="built_in">console</span>.log(<span class="string">'Server started on port '</span>+ port);</span><br><span class="line">true&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在重新运行node index，打开浏览器，在3000端口就能看到html网页了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"api"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"app.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"^1.18.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dependencies里面向上箭头表示安装最新的minor version。而使用”*“号的话就表示想要使用latest version</p><h2 id="一些node自带的module"><a href="#一些node自带的module" class="headerlink" title="一些node自带的module"></a>一些node自带的module</h2><p>比如fs,path,http，这些东西都是不需要安装的,bundled with node installation。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.join(__dirname,<span class="string">'filename'</span>); <span class="comment">// ./filename</span></span><br><span class="line">path.join(__dirname,<span class="string">".."</span>,filename); <span class="comment">// ../filename ,go to parent directory</span></span><br></pre></td></tr></table></figure><p>Compile ES6 ES2017 Code to ES5 Code(这部分属于webpack的内容)</p><blockquote><p>npm install –save-dev webpack webpack-dev-server babel-core babel-loader babel-preset-env<br>npm install –save-dev babel-polyfill babel-preset-stage-0 ## 用async await的话需要安装polyfill</p></blockquote><p>package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"bable-assemble"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"webpack-dev-server --output-public-path=/build/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-cli"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^7.1.2"</span>,</span><br><span class="line">    <span class="attr">"babel-polyfill"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.6.1"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-es2015"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-stage-0"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"http-server"</span>: <span class="string">"^0.10.0"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^3.10.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^2.9.7"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>output的文件夹名有些人喜欢叫dist，有些人用build。都行，没有区别的。</p><p>如果手动敲webpack的话，会提示你找不到webpack，这是因为没有globally install webpack,webpack还只是个local file。 这也就是写在script里面的原因了: 让npm去node_modules里面找一个叫做webpack的依赖，然后运行webpack。</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:&#123;</span><br><span class="line">        app:[<span class="string">'babel-polyfill'</span>,<span class="string">'./src/app.js'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output:&#123;</span><br><span class="line">        path:path.resolve(__dirname,<span class="string">"build"</span>),</span><br><span class="line">        filename:<span class="string">"app.bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        loaders:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:<span class="regexp">/\.js?$/</span>,</span><br><span class="line">                exclude:<span class="regexp">/node_modules/</span>,</span><br><span class="line">                loader:<span class="string">"babel-loader"</span>,</span><br><span class="line">                query:&#123;</span><br><span class="line">                    presets:[<span class="string">'env'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><p>yarn 是facebook设计的，yarn的速度要比npm快。在windows平台上推荐使用msi安装包安装。</p><blockquote><p>npm install express<br>yarn add express</p></blockquote><p>这俩是一样的,一些常用的command</p><blockquote><p>yarn init<br>yarn global add nodemon<br>yarn outdated<br>yarn cache clean<br>yarn run dev // yarn dev 其实run都可以省略<br>yarn upgrade express</p></blockquote><p>eslint修改配置，让js文件每一行后面都得加冒号(allow semi colons)<br><a href="https://stackoverflow.com/questions/40453894/allow-semi-colons-in-javascript-eslint">allow semi colons in javascript eslint</a><br>在.eslintrc中，添加custom rules<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"rules": &#123;</span><br><span class="line">        "semi": [2, "always"]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>node js不支持es2015的import 和export语法，需要使用mudule的话，可使用commonJs，即:<br>其实这事说来就是node对于绝大多数es2015的语法都支持了，偏偏import,export这一套就不支持。<br><a href="https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b">node社区最终决定使用mjs文件后缀</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// library.js</span></span><br><span class="line"><span class="built_in">module</span>.export.awesome = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  consle.log(<span class="string">'awesome'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> library = <span class="built_in">require</span>(<span class="string">'./library'</span>);</span><br><span class="line">library.awesome();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要注意两点，</span></span><br><span class="line"><span class="comment">// 1. require()后面跟的路径是('./library')，是指在当前路径下，而不是在node_modules那个大的文件夹里面找</span></span><br><span class="line"><span class="comment">// 2. require('./library') 和require('./library.js')没有区别</span></span><br></pre></td></tr></table></figure></p><p>sourcemaps<br>开发过程中使用的是ES2015代码，编译之后就成了非常长的es5代码，在浏览器里面几乎无法断点。使用sourcemap就能在浏览器中将es5代码“反编译”成ES2015代码，还可以打断点。</p><p>好用的module<br>path(core module, 无需安装)<br>http(core module, 无需安装)<br>express<br>nodemon // 实时监控本地文件变化，重启服务，安装npm install nodemon -g<br>body-parser<br>ejs<br>pm2 //starting an node app as a bcakground service<br>mongoose</p><h2 id="Howto-debug"><a href="#Howto-debug" class="headerlink" title="Howto debug"></a>Howto debug</h2><p>vscode debug node js的方式，打开调试窗口，点击那个小齿轮(打开launch.json)。直接在代码中断点即可。注意底下有一个debug console(调试控制台)，可以输入变量，查看当前值，和一些大型Ide很像。</p><p>在chrome里面debug的方式：<br>node –inspect app.js ##  一闪而过了<br>node –inspect-brk app.js ##在第一行就给我停下来</p><p>在chrome的地址栏输入 about:inspect , open dedicated DevTools for Node，点一下就会出现一个小窗口<br>或者f12，会出现一个绿色的node的图标，点一下和上面那个open dedicated DevTools for Node是一样的<br><a href="https://www.youtube.com/watch?v=Xb_0awoShR8">Debugging in 2017 with Node.js</a></p><h2 id="process-env-NODE-ENV"><a href="#process-env-NODE-ENV" class="headerlink" title="process.env.NODE_ENV"></a>process.env.NODE_ENV</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'production'</span> ) &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// windows上可以这么设置</span></span><br><span class="line">set NODE_ENV=dev</span><br><span class="line"><span class="comment">//直接写在js里面也行</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span>;</span><br></pre></td></tr></table></figure><p>写在package.json的script里面也是可以的。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "set NODE_ENV=dev &amp;&amp; node app.js"</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>=============================================================================<br>开发环境用nodemon，生产环境用pm2(PM2的优胜之处在于当你要将app需要多核处理的时候，PM2内部集成的负载均衡可以让你很容易的去指定运行多少个实例。)</p><p>node里面就不要用Ajax了，推荐axios，原生自带也有https。<br>而node中的一些module也不能用于浏览器端，比如fs这种属于偏Low level的api</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;npm run start&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery1511100694324.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Nginx使用记录</title>
    <link href="https://haldir65.github.io/2017/12/10/2017-12-10-nginx-culinary-tips/"/>
    <id>https://haldir65.github.io/2017/12/10/2017-12-10-nginx-culinary-tips/</id>
    <published>2017-12-10T16:12:43.000Z</published>
    <updated>2018-06-13T15:40:22.193Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://linode.com/docs/web-servers/nginx/how-to-configure-nginx/">linode的docs里面是这么介绍的</a></p><blockquote><p>nginx is a lightweight, high performance web server designed to deliver large amounts of static content quickly with efficient use of system resources. nginx’s strong point is its ability to efficiently serve static content, like plain HTML and media files. Some consider it a less than ideal server for dynamic content.</p></blockquote><p><img src="http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110073841.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p><a href="http://nginx.org/en/docs/windows.html">Installing nginx on windows</a><br>安装教程，google ‘installing nginx on ubuntu’<br>基本上就是把DigitalOcean写的这些复制粘贴过来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># We can list the applications configurations that ufw knows how to work with by typing:</span></span></span><br><span class="line">sudo ufw app list</span><br><span class="line">sudo ufw allow 'Nginx HTTP'</span><br><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><h3 id="1-1-安装失败的解决方案"><a href="#1-1-安装失败的解决方案" class="headerlink" title="1.1 安装失败的解决方案"></a>1.1 安装失败的解决方案</h3><blockquote><p>Job for nginx.service failed because the control process exited with error code.<br> See “systemctl status nginx.service” and “journalctl -xe” for details.<br>invoke-rc.d: initscript nginx, action “start” failed.<br>● nginx.service - A high performance web server and a reverse proxy server<br>   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</p></blockquote><p>根据<a href="https://askubuntu.com/questions/764222/nginx-installation-error-in-ubuntu-16-04">Nginx installation error in Ubuntu 16.04</a><br>解决方案:</p><blockquote><p>Check your nginx error log:<br>sudo cat /var/log/nginx/error.log|less<br>Then try again:<br>sudo apt-get update;sudo apt-get upgrade</p></blockquote><p>我看到的是:</p><blockquote><p>2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)<br>2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)<br>2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)<br>2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)<br>2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)</p></blockquote><p>就是80端口被占用了，看下谁在用:</p><blockquote><p>lsof -i:80</p></blockquote><h2 id="2-常用command"><a href="#2-常用command" class="headerlink" title="2. 常用command"></a>2. 常用command</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看当前status</span></span></span><br><span class="line">systemctl status nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># stop</span></span></span><br><span class="line">sudo systemctl stop nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># start</span></span></span><br><span class="line">sudo systemctl start nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启</span></span></span><br><span class="line">sudo systemctl restart nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  改了配置文件之后可以直接reload，而不会失去连接</span></span></span><br><span class="line">sudo systemctl reload nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># nginx默认开机启动的,取消开机启动</span></span></span><br><span class="line">sudo systemctl disable nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#  加入开机启动</span></span></span><br><span class="line">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure><h2 id="3-常用目录和文件-直接从DigitalOcean复制过来了"><a href="#3-常用目录和文件-直接从DigitalOcean复制过来了" class="headerlink" title="3. 常用目录和文件(直接从DigitalOcean复制过来了)"></a>3. 常用目录和文件(直接从DigitalOcean复制过来了)</h2><ul><li>/var/www/html ## 就是放默认首页的地方（原因是 /etc/nginx/sites-enabled/default这里面设置的）<blockquote><p>/etc/nginx: The Nginx configuration directory. All of the Nginx configuration files reside here.<br>/etc/nginx/nginx.conf: The main Nginx configuration file. This can be modified to make changes to the Nginx global configuration.<br>/etc/nginx/sites-available/: The directory where per-site “server blocks” can be stored. Nginx will not use the configuration files found in this directory unless they are linked to the sites-enabled directory (see below). Typically, all server block configuration is done in this directory, and then enabled by linking to the other directory.<br>/etc/nginx/sites-enabled/: The directory where enabled per-site “server blocks” are stored. Typically, these are created by linking to configuration files found in the sites-available directory.<br>/etc/nginx/snippets: This directory contains configuration fragments that can be included elsewhere in the Nginx configuration. Potentially repeatable configuration segments are good candidates for refactoring into snippets.</p></blockquote></li></ul><p>访问日志都在这里</p><blockquote><p>/var/log/nginx/access.log: Every request to your web server is recorded in this log file unless Nginx is configured to do otherwise.<br>/var/log/nginx/error.log: Any Nginx errors will be recorded in this log.</p></blockquote><h2 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4.配置文件"></a>4.配置文件</h2><h3 id="4-1-不想用80端口怎么办-比如跟apache冲突了"><a href="#4-1-不想用80端口怎么办-比如跟apache冲突了" class="headerlink" title="4.1 不想用80端口怎么办(比如跟apache冲突了)"></a>4.1 不想用80端口怎么办(比如跟apache冲突了)</h3><p>修改 /etc/nginx/nginx.conf文件<br>config文件的大致结构就是这样,来自<a href="https://stackoverflow.com/questions/10829402/how-to-start-nginx-via-different-portother-than-80">stackoverflow</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">    <span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay        on;</span><br><span class="line"></span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable <span class="string">"MSIE [1-6]\.(?!.*SV1)"</span>;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    include /etc/nginx/sites-enabled/*;</span><br><span class="line">    <span class="comment">## include F:/nginx/conf/sites-enabled/default; 必须是绝对路径，include不认相对路径</span></span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line"></span><br><span class="line">        listen       81;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">         proxy_pass  http://94.143.9.34:9500;</span><br><span class="line">         proxy_set_header   Host             <span class="variable">$host</span>:81;</span><br><span class="line">         proxy_set_header   X-Real-IP        <span class="variable">$remote_addr</span>;</span><br><span class="line">         proxy_set_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">         proxy_set_header Via    <span class="string">"nginx"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> mail &#123;</span><br><span class="line">      See sample authentication script at:</span><br><span class="line">      http://wiki.nginx.org/NginxImapAuthenticateWithApachePhpScript</span><br><span class="line"></span><br><span class="line">      auth_http localhost/auth.php;</span><br><span class="line">      pop3_capabilities <span class="string">"TOP"</span> <span class="string">"USER"</span>;</span><br><span class="line">      imap_capabilities <span class="string">"IMAP4rev1"</span> <span class="string">"UIDPLUS"</span>;</span><br><span class="line"></span><br><span class="line">     server &#123;</span><br><span class="line">         listen     localhost:110;</span><br><span class="line">         protocol   pop3;</span><br><span class="line">         proxy      on;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     server &#123;</span><br><span class="line">         listen     localhost:143;</span><br><span class="line">         protocol   imap;</span><br><span class="line">         proxy      on;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>比如想要通过81端口访问，加上这么一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       81;</span><br><span class="line">    server_name  example.org  www.example.org;</span><br><span class="line">    root         /var/www/html/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Checking nginx config file syntax</p><blockquote><p>nginx -t -c conf/nginx.conf<br>nginx -s quit  //gracefully stop  on windows<br>nginx -s stop // force stop on windows</p></blockquote><h3 id="4-2-限制日志文件的大小"><a href="#4-2-限制日志文件的大小" class="headerlink" title="4.2 限制日志文件的大小"></a>4.2 限制日志文件的大小</h3><p>根据上面的config文件，默认的访问日志是在/var/log/nginx/access.log这个文件里面。限制这个文件的大小的方法：<br><a href="https://serverfault.com/questions/427144/how-to-limit-nginx-access-log-file-size-and-compress">serverfault</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/etc/logrotate.d/nginx</span><br><span class="line">/var/log/nginx/access_log &#123;</span><br><span class="line">    rotate 7</span><br><span class="line">    size 5k</span><br><span class="line">    dateext</span><br><span class="line">    dateformat -%Y-%m-%d</span><br><span class="line">    missingok</span><br><span class="line">    compress</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">        test -r /var/run/nginx.pid &amp;&amp; kill -USR1 `cat /var/run/nginx.pid`</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，当网站访问量大后，日志数据就会很多，如果全部写到一个日志文件中去，文件会变得越来越大。文件大速度就会慢下来，比如一个文件几百兆。写入日志的时候，会影响操作速度。另外，如果我想看看访问日志，一个几百兆的文件，下载下来打开也很慢。为了方便对日志进行分析计算，需要对日志进行定时切割。定时切割的方式有按照月切割、按天切割，按小时切割等。最常用的是按天切割。<a href="http://www.codeceo.com/article/nginx-log.html">脚本</a></p><h3 id="4-3-分享特定目录-serve-static-files"><a href="#4-3-分享特定目录-serve-static-files" class="headerlink" title="4.3 分享特定目录(serve static files)"></a>4.3 分享特定目录(serve static files)</h3><p><a href="https://stackoverflow.com/questions/33989060/how-to-serve-a-directory-of-static-files-at-a-certain-location-path-with-nginx">How to serve a directory of static files at a certain location path with nginx?</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name   something.nateeagle.com;</span><br><span class="line"></span><br><span class="line">  location /something &#123;</span><br><span class="line">    alias /home/neagle/something;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有的时候会看到两种写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">location /static/ &#123;</span><br><span class="line">        root /var/www/app/static/;</span><br><span class="line">        autoindex off;</span><br><span class="line">&#125;</span><br><span class="line">## 结果是/var/www/app/static/static目录</span><br><span class="line"></span><br><span class="line">location /static/ &#123;</span><br><span class="line">        alias /var/www/app/static/;</span><br><span class="line">        autoindex off;</span><br><span class="line">&#125;</span><br><span class="line">##这才是/var/www/app/static目录</span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/10631933/nginx-static-file-serving-confusion-with-root-alias">location里面写root还是alias</a></p><p><a href="http://blog.51cto.com/nolinux/1317109">那alias标签和root标签到底有哪些区别呢？</a><br>1、alias后跟的指定目录是准确的,并且末尾必须加“/”，否则找不到文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /c/ &#123;</span><br><span class="line">      alias /a/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果访问站点<a href="http://location/c">http://location/c</a> ，访问的就是/a/目录下的站点信息。<br>2、root后跟的指定目录是上级目录，并且该上级目录下要含有和location后指定名称的同名目录才行，末尾“/”加不加无所谓。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /c/ &#123;</span><br><span class="line">      root /a/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果访问站点<a href="http://location/c，访问的就是/a/c目录下的站点信息。">http://location/c，访问的就是/a/c目录下的站点信息。</a><br>3、一般情况下，在location /中配置root，在location /other中配置alias是一个好习惯。</p><p>在windows平台下这么写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">           root D:/VDownload;</span><br><span class="line">           index index.html index.htm;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>nginx -s reload 然后重启nginx</p></blockquote><h3 id="4-4-Nginx软链接"><a href="#4-4-Nginx软链接" class="headerlink" title="4.4 Nginx软链接"></a>4.4 Nginx软链接</h3><p>目测不能用软链接</p><p>###4.5 Nginx通过CORS实现跨域<br>在nginx.conf里找到server项,并在里面添加如下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">add_header &apos;Access-Control-Allow-Origin&apos; &apos;http://example.com&apos;;</span><br><span class="line">add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">add_header &apos;Access-Control-Allow-Headers&apos; &apos;Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Requested-With&apos;;</span><br><span class="line">add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET,POST,OPTIONS&apos;;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但上述配置只能实现允许一个domain或者*实现跨域，Nginx允许多个域名跨域访问<br>在location context的上层添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">map $http_origin $corsHost &#123;</span><br><span class="line">    default 0;</span><br><span class="line">    &quot;~http://www.example.com&quot; http://www.example.com;</span><br><span class="line">    &quot;~http://m.example.com&quot; http://m.example.com;</span><br><span class="line">    &quot;~http://wap.example.com&quot; http://wap.example.com;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.example2.com;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    location /</span><br><span class="line">    &#123;</span><br><span class="line">        add_header Access-Control-Allow-Origin $corsHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="5-proxy-pass"><a href="#5-proxy-pass" class="headerlink" title="5. proxy_pass"></a>5. proxy_pass</h2><p>根据<a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-14-04">how-to-set-up-a-node-js-application-for-production-on-ubuntu-14-04</a></p><blockquote><p>/etc/nginx/sites-available/default<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name example.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://APP_PRIVATE_IP_ADDRESS:8080; // A应用跑在8080端口，外部访问http://example.com/即可访问应用服务</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_cache_bypass $http_upgrade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /app2 &#123;</span><br><span class="line">       proxy_pass http://APP_PRIVATE_IP_ADDRESS:8081; // B应用跑在8081端口，外部访问http://example.com/app2即可访问应用服务</span><br><span class="line">       proxy_http_version 1.1;</span><br><span class="line">       proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">       proxy_set_header Connection &apos;upgrade&apos;;</span><br><span class="line">       proxy_set_header Host $host;</span><br><span class="line">       proxy_cache_bypass $http_upgrade;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="5-1-pratical-take-aways"><a href="#5-1-pratical-take-aways" class="headerlink" title="5.1 pratical take aways"></a>5.1 pratical take aways</h3><p><a href="http://seanlook.com/2015/05/17/nginx-location-rewrite/">nginx配置location总结及rewrite规则写法</a></p><h3 id="ddos防御"><a href="#ddos防御" class="headerlink" title="ddos防御"></a>ddos防御</h3><p>from <a href="https://www.nginx.com/blog/mitigating-ddos-attacks-with-nginx-and-nginx-plus/">mitigating-ddos-attacks-with-nginx-and-nginx-plus/</a></p><p><strong>allow a single client IP address to attempt to login only every 2 seconds (equivalent to 30 requests per minute):</strong></p><ol><li><p>Limiting the Rate of Requests<br>eg: 单ip访问login接口频率不能超过2秒每次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    # ...</span><br><span class="line">    location /login.html &#123;</span><br><span class="line">        limit_req zone=one;</span><br><span class="line">    # ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Limiting the Number of Connections<br>eg: 单ip访问/store/不能创建超过10条connections</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">limit_conn_zone $binary_remote_addr zone=addr:10m;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    # ...</span><br><span class="line">    location /store/ &#123;</span><br><span class="line">        limit_conn addr 10;</span><br><span class="line">        # ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Closing Slow Connections<br>eg: 限定nginx一条connection写client header和写client body的时间间隔为5s，默认为60s</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    client_body_timeout 5s;</span><br><span class="line">    client_header_timeout 5s;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>黑名单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 123.123.123.1 through 123.123.123.16 拉黑</span><br><span class="line">location / &#123;</span><br><span class="line">    deny 123.123.123.0/28;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    deny 123.123.123.3;</span><br><span class="line">    deny 123.123.123.5;</span><br><span class="line">    deny 123.123.123.7;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//只允许特定白名单</span><br><span class="line">location / &#123;</span><br><span class="line">    allow 192.168.1.0/24;</span><br><span class="line">    deny all;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ngx_http_proxy_module的configuration<br>proxy_cache_use_stale<br>当客户端请求一项过期的资源时，只发送一次请求，在backend server返回新的资源之前，不再发送新的请求，并只向客户端返回已有的过期资源。这有助于缓解backend server的压力。<br>proxy_cache_key:包含内置三个key$scheme$proxy_host$request_uri。但不要添加$query_string，这会造成过多的caching.</p></li><li><p>几种情况是应该直接拉黑的</p><blockquote><p>Requests to a specific URL that seems to be targeted<br>Requests in which the User-Agent header is set to a value that does not correspond to normal client traffic<br>Requests in which the Referer header is set to a value that can be associated with an attack<br>Requests in which other headers have values that can be associated with an attack</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">location /foo.php &#123;</span><br><span class="line">    deny all; //直接让这个接口不响应</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    if ($http_user_agent ~* foo|bar) &#123;</span><br><span class="line">        return 403;  //User-Agent中有foo或者bar的时候直接forbidden</span><br><span class="line">    &#125;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// NGINX Plus提供的</span><br><span class="line">// An NGINX or NGINX Plus instance can usually handle many more simultaneous connections than the backend servers it is load balancing.</span><br><span class="line">//作为代理，nginx能够接受的连接数要远超其代理的后台服务</span><br><span class="line">upstream website &#123;</span><br><span class="line">    server 192.168.100.1:80 max_conns=200;</span><br><span class="line">    server 192.168.100.2:80 max_conns=200;</span><br><span class="line">    queue 10 timeout=30s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-Nginx模块"><a href="#5-2-Nginx模块" class="headerlink" title="5.2 Nginx模块"></a>5.2 Nginx模块</h3><p>http_image_filter_module（图片裁剪模块）<br>首先查看是否已安装http_image_filter_module模块</p><blockquote><p>nginx -V<br>/etc/nginx/nginx.conf文件添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">location /image &#123;</span><br><span class="line">truetrue   alias &quot;/imgdirectory/&quot;; </span><br><span class="line">            ## 这样直接输入 yourip/image/imgname.jpeg就能返回原始图片</span><br><span class="line">&#125;</span><br><span class="line">location ~* (.*\.(jpg|jpeg|gif|png))!(.*)!(.*)$ &#123;  ## 这个是匹配全站图片资源</span><br><span class="line">        set $width      $3;  </span><br><span class="line">        set $height     $4;  </span><br><span class="line">        rewrite &quot;(.*\.(jpg|jpeg|gif|png))(.*)$&quot; $1;  ## 这样输入 yourip/image/imgname.jpeg!200!200就能返回200*200的图片</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">location ~* /imgs/.*\.(jpg|jpeg|gif|png|jpeg)$ &#123;  </span><br><span class="line">truetruetrueroot &quot;/var/www/&quot;;</span><br><span class="line">  image_filter resize $width $height;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>亲测上述可行，python也有类似库<a href="https://github.com/thumbor/thumbor">thumbor</a></p><p>关于正则匹配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">## 比如匹配全站所有的结尾图片</span><br><span class="line">location ~* \.(jpg|gif|png)$ &#123;</span><br><span class="line">               image_filter resize 500 500;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">### 匹配某个目录所有图片       </span><br><span class="line">location ~* /image/.*\.(jpg|gif|png)$ &#123;</span><br><span class="line">            image_filter resize 500 500;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>更多直接google吧。</p><h3 id="添加黑名单"><a href="#添加黑名单" class="headerlink" title="添加黑名单"></a>添加黑名单</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#获取各个IP访问次数</span></span></span><br><span class="line"></span><br><span class="line">awk '&#123;print $1&#125;' nginx.access.log |sort |uniq -c|sort -n</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 新建一个黑名单文件 blacklist.conf ,放在 nginx/conf下面。</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">#添加一个IP ，deny 192.168.59.1;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 在http或者server模块引入</span></span></span><br><span class="line"></span><br><span class="line">  include blacklist.conf ;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#需要重启服务器, nginx -s reload; 即可生效</span></span></span><br></pre></td></tr></table></figure><p>防御DDOS是一个系统工程，这里只是一小点。</p><h3 id="5-3-return-rewrite-and-try-files"><a href="#5-3-return-rewrite-and-try-files" class="headerlink" title="5.3 return rewrite and try_files"></a>5.3 return rewrite and try_files</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.old-name.com;</span><br><span class="line">    return 301 $scheme://www.new-name.com$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">301 (Moved Permanently)</span><br><span class="line">//上面的scheme是http或者https，request_url就是请求的url。</span><br></pre></td></tr></table></figure><p>rewrite就更加复杂一点，比如可以manipulate url<br>Here’s a sample NGINX rewrite rule that uses the rewrite directive. It matches URLs that begin with the string /download and then include the /media/ or /audio/ directory somewhere later in the path. It replaces those elements with /mp3/ and adds the appropriate file extension, .mp3 or .ra. The $1 and $2 variables capture the path elements that aren’t changing. As an example, /download/cdn-west/media/file1 becomes /download/cdn-west/mp3/file1.mp3. If there is an extension on the filename (such as .flv), the expression strips it off and replaces it with .mp3.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # ...</span><br><span class="line">    rewrite ^(/download/.*)/media/(\w+)\.?.*$ $1/mp3/$2.mp3 last;</span><br><span class="line">    rewrite ^(/download/.*)/audio/(\w+)\.?.*$ $1/mp3/$2.ra  last;</span><br><span class="line">    return  403;</span><br><span class="line">    # ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>In the following example, NGINX serves a default GIF file if the file requested by the client doesn’t exist. When the client requests (for example) <a href="http://www.domain.com/images/image1.gif">http://www.domain.com/images/image1.gif</a>, NGINX first looks for image1.gif in the local directory specified by the root or alias directive that applies to the location (not shown in the snippet). If image1.gif doesn’t exist, NGINX looks for image1.gif/, and if that doesn’t exist, it redirects to /images/default.gif. That value exactly matches the second location directive, so processing stops and NGINX serves that file and marks it to be cached for 30 seconds.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location /images/ &#123;</span><br><span class="line">    try_files $uri $uri/ /images/default.gif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location = /images/default.gif &#123;</span><br><span class="line">    expires 30s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="5-4-NGINX-LOAD-BALANCING-负载均衡"><a href="#5-4-NGINX-LOAD-BALANCING-负载均衡" class="headerlink" title="5.4 NGINX LOAD BALANCING 负载均衡"></a>5.4 NGINX LOAD BALANCING 负载均衡</h3><p>Load balancing across multiple application instances is a commonly used technique for optimizing resource utilization, maximizing throughput, reducing latency, and ensuring fault-tolerant configurations.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        server backend1.example.com weight=5;</span><br><span class="line">        server backend2.example.com;</span><br><span class="line">        server 192.0.0.1 backup;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend; ## 所有的访问http://backend的流量都被导向上面的三个服务器</span><br><span class="line">            ## proxy_pass只是其中一种，还有fastcgi_pass, memcached_pass, uwsgi_pass, scgi_pass</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>导向策略有多种：<br>1.Round-robin (默认) 1, 2 , 1, 2 ,1 ….如此反复<br>2.least_conn 连接数最少的优先（如果有weight，加权选择）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream backend &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    server backend1.example.com;</span><br><span class="line">    server backend2.example.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>ip_hash (一个ip只会导向固定的一个server，这个适合做ab test)<br>这些是主要的策略</li></ol><h3 id="6-问题速查"><a href="#6-问题速查" class="headerlink" title="6. 问题速查"></a>6. 问题速查</h3><ul><li>nginx.service - A high performance web server and a reverse proxy server<br> Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)<br> Active: failed (Result: exit-code) since Fri 2017-12-29 20:12:50 EST; 3min 21s ago</li></ul><p>启动失败，检查/var/log/nginx/error.log 或者/var/log/syslog。<br>windows下应该在nginx/logs/error.log文件里面<br>windows平台下查找当前正在跑的nginx进程：</p><blockquote><p>tasklist /fi “imagename eq nginx.exe”</p></blockquote><p>benchmark，<a href="https://www.digitalocean.com/community/tutorials/how-to-use-apachebench-to-do-load-testing-on-an-ubuntu-13-10-vps">压力测试</a><br><a href="https://www.garron.me/en/go2linux/how-benchmark-stress-your-apache-nginx-or-iis-server.html">Apache Benchmarking tool.</a></p><blockquote><p>ab -kc 1000 -n 10000 <a href="http://www.some-site.cc/tmp/index.html">http://www.some-site.cc/tmp/index.html</a><br>-n表示一共要请求多少次,-c表示每次请求模拟多少个并发</p></blockquote><p>在http response中隐藏nginx版本：在server块添加</p><blockquote><p>server_tokens off;   </p></blockquote><h3 id="7-整理一下linode的文章"><a href="#7-整理一下linode的文章" class="headerlink" title="7. 整理一下linode的文章"></a>7. 整理一下linode的文章</h3><p><a href="https://linode.com/docs/web-servers/nginx/how-to-configure-nginx/">linoe关于nginx配置的文章写得特别好</a><br>/etc/nginx/nginx.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # Basic Settings</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    sendfile on;</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    keepalive_timeout 65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line">    # server_tokens off;</span><br><span class="line"></span><br><span class="line">    # server_names_hash_bucket_size 64;</span><br><span class="line">    # server_name_in_redirect off;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/mime.types;</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # Logging Settings</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    access_log /var/log/nginx/access.log;</span><br><span class="line">    error_log /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">    ##</span><br><span class="line">    # Gzip Settings</span><br><span class="line">    ##</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_disable &quot;msie6&quot;;</span><br><span class="line">    # gzip_vary on;</span><br><span class="line">    # gzip_proxied any;</span><br><span class="line">    # gzip_comp_level 6;  // gzip基本上就是用cpu资源节省带宽，默认是1，最高是9，越大压缩效果越好，也越费cpu</span><br><span class="line">    # gzip_buffers 16 8k;</span><br><span class="line">    # gzip_http_version 1.1;</span><br><span class="line">    include /etc/nginx/sites-enabled/*; //引入site-enabled中所有文件</span><br><span class="line">    include /etc/nginx/conf.d/*.conf; //或者引入config.d文件夹中所有.config文件</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>http这个directive下一层就是server了,一般来说，一个虚拟域名(virtual domain)就对应着一个server块。</p><p><strong>接下来的东西就不要写在/etc/nginx/nginx.conf文件里了,这里应该是一个domian写一个.conf文件</strong><br>/etc/nginx/sites-available/default<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;  //  default_server means this virtual host will answer requests on port 80 that don’t specifically match another virtual host’s listen statement.</span><br><span class="line">        listen [::]:80 default_server ipv6only=on; // 这个是给ipv6用的</span><br><span class="line"></span><br><span class="line">        listen     80;   ## 80端口</span><br><span class="line">        listen     *:80;  ## 80端口，和上面一样</span><br><span class="line">        listen     8080;  ## 8080端口</span><br><span class="line">        listen     *:8080;  ## 8080端口，和上面一样</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line"></span><br><span class="line">        # Make site accessible from http://localhost/ ## localhost其实就是127.0.0.1，这是写在/etc/hosts里面的</span><br><span class="line">        server_name localhost; ## 这可以使得一个ip地址支持多个domian( This allows multiple domains to be served from a single IP address.)</span><br><span class="line"></span><br><span class="line">        ### 这时的文件名应该叫/etc/nginx/sites-available/example.com</span><br><span class="line">        server_name   example.com www.example.com; ##  example.com www.example.com都支持,example.com就支持旗下所有子域名。www.example.com, foo.example.com，等等</span><br><span class="line"></span><br><span class="line">        ### 这时的文件名应该叫/etc/nginx/sites-available/example.com</span><br><span class="line">        server_name   example.*; ## example开头的都行</span><br><span class="line"></span><br><span class="line">        ## 下面这俩意思一样，这时的文件名应该叫/etc/nginx/sites-available/example.com</span><br><span class="line">        server_name   *.example.com;</span><br><span class="line">        server_name   .example.com;</span><br><span class="line"></span><br><span class="line">        ### 这时的文件名应该叫/etc/nginx/sites-available/example</span><br><span class="line">        server_name   example.*; ## example.com, example.org, example.net, example.foo.com, etc.</span><br><span class="line"></span><br><span class="line">        ### 文件名随意啦/etc/nginx/sites-available/multi-list</span><br><span class="line">        server_name   example.com linode.com icann.org  whatever.you.wantwite.isok.org; ## 一个server_name后面跟任何域名都是没问题的</span><br><span class="line"></span><br><span class="line">        ## 比如说你在局域网有个linux机器挂着nginx，你可以创建这样一个文件，/etc/nginx/sites-available/local</span><br><span class="line">        server_name   localhost linode galloway; ### 这样局域网(LAN)内用户访问linode，galloway都能走到你这一块指定的走向（再具体一点，假如你是个前端开发，你跟测试说，手机连我代理，访问galloway就行了）</span><br><span class="line"></span><br><span class="line">        ### /etc/nginx/sites-available/catchall</span><br><span class="line">        server_name   &quot;&quot;;</span><br><span class="line">        ## nginx will process all requests that either do not have a hostname, or that have an unspecified hostname, such as requests for the IP address itself.</span><br><span class="line">        ## 要么是没有hostname，要么是没有一个具体的hostname，说的就是直接浏览器输入ip地址的那帮人</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">                try_files $uri $uri/ /index.html; ## 说的很清楚，先当做文件试试，再当做文件夹试试，再不行试试index.html</span><br><span class="line">                # Uncomment to enable naxsi on this location</span><br><span class="line">                # include /etc/nginx/naxsi.rules</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="access-log是跟着server走的，毕竟你不希望两台不相干的服务器的访问日志搅和在一起"><a href="#access-log是跟着server走的，毕竟你不希望两台不相干的服务器的访问日志搅和在一起" class="headerlink" title="access_log是跟着server走的，毕竟你不希望两台不相干的服务器的访问日志搅和在一起"></a>access_log是跟着server走的，毕竟你不希望两台不相干的服务器的访问日志搅和在一起</h3><p>/etc/nginx/sites-available/example.com文件中写入这么一行</p><blockquote><p>access_log /srv/www/example.com/logs/access.log;</p></blockquote><h3 id="关闭日志也是可以的，不过请不要随便这么做"><a href="#关闭日志也是可以的，不过请不要随便这么做" class="headerlink" title="关闭日志也是可以的，不过请不要随便这么做"></a>关闭日志也是可以的，不过请不要随便这么做</h3><blockquote><p>/etc/nginx/nginx.conf<br>access_log off;</p></blockquote><h3 id="接下来是location"><a href="#接下来是location" class="headerlink" title="接下来是location"></a>接下来是location</h3><blockquote><p>/etc/nginx/sites-available/example.com</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">location / &#123; &#125;  </span><br><span class="line">location /images/ &#123; &#125;</span><br><span class="line">location /blog/ &#123; &#125;</span><br><span class="line">location /planet/ &#123; &#125;</span><br><span class="line">location /planet/blog/ &#123; &#125;</span><br><span class="line"></span><br><span class="line">/* 现在客户端访问http://example.com/，假如前面server_name配置了一个example.com.那个这次请求被location / 获取</span><br><span class="line">Nginx总是会使用匹配程度最高的：比如</span><br><span class="line">Request: http://example.com/planet/blog/ or http://example.com/planet/blog/about/</span><br><span class="line">这俩请求会走到location /planet/blog/ &#123; &#125;而不是location /planet/ &#123; &#125; */</span><br><span class="line"></span><br><span class="line">location ~ IndexPage\.php$ &#123; &#125;</span><br><span class="line">location ~ ^/BlogPlanet(/|/index\.php)$ &#123; &#125; ## 美元符号代表以此结束，反斜杠代表转义字符</span><br><span class="line"></span><br><span class="line">前面这个~符号代表后面跟着的是一个正则表达式（nginx uses Perl Compatible Regular Expressions (PCRE).）但这里还是大小写敏感的正则表达式</span><br><span class="line"></span><br><span class="line">location ~* \.(pl|cgi|perl|prl)$ &#123; &#125;</span><br><span class="line">location ~* \.(md|mdwn|txt|mkdn)$ &#123; &#125;</span><br><span class="line">// 想要大小写不敏感~*即可</span><br><span class="line">## 这回.pl, .PL, .cgi, .CGI, .perl, .Perl, .prl结尾的都能匹配了</span><br><span class="line"></span><br><span class="line">location ^~ /images/IndexPage/ &#123; &#125;</span><br><span class="line">location ^~ /blog/BlogPlanet/ &#123; &#125;</span><br><span class="line">这个^~符号表示告诉nginx，如果找到了匹配，就用这了。意思就是说 /images/IndexPage/info 也会直接用这个了，就算后面有更佳匹配location  /images/IndexPage/info &#123; &#125;也不管</span><br><span class="line"></span><br><span class="line">location = / &#123; &#125;</span><br><span class="line">注意这个中间的等号，意思是访问只有url是http://example.com/的时候才匹配 ，而 http://example.com/index.html 就不会匹配</span><br><span class="line">用=有一个好处就是匹配会稍微快一点，常用于匹配一些特别热门的url</span><br></pre></td></tr></table></figure><p>Directives are processed in the following order:（搜索url匹配的顺序如下）<br>1： Exact string matches are processed first.（就是url字符一模一样的最先匹配上并停止后续搜索）<br>2： Remaining literal string directives are processed next. 如果碰到了^~修饰的匹配的字符，停止搜索<br>3： All location directives with regular expressions (~ and ~* ) are processed.正则表达式搜索开始<br>4： 如果上述都没找到，If no regular expressions match, the most specific literal string match is used.</p><p>Make sure each file and folder under a domain will match at least one location directive.写配置的时候请确保某个domian下的所有文件都能至少被一条规则匹配上</p><blockquote><p>While nginx’s configuration parser is technically capable of reading nested location blocks, this is neither recommended nor supported. ## 不建议写这种location一层套一层的</p></blockquote><p>==========================================================================================================================</p><p>add_header not working on ubuntu server?</p><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p>之前做爬虫的时候，request的header中不添加refer就会返回一张 固定的图片。<br>这个功能nginx也行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(gif|jpg|swf)$ &#123;</span><br><span class="line">    valid_referers none blocked start.igrow.cn sta.igrow.cn;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">       rewrite ^/ http://$host/logo.png;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://wizardforcel.gitbooks.io/nginx-doc/content/Text/6.1_nginx_windows.html">nginx Configurations</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-16-04">How To Install Nginx on Ubuntu 16.04</a></li><li><a href="https://www.digitalocean.com/community/tutorials/understanding-the-nginx-configuration-file-structure-and-configuration-contexts">understanding-the-nginx-configuration-file</a></li><li><a href="https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/">if is evil, 可以,但不要在config文件里面写if</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-optimize-nginx-configuration">nginx的一些优化策略</a></li><li><a href="https://www.nginx.com/blog/creating-nginx-rewrite-rules/">rewrite rules怎么写</a></li><li><a href="https://www.nginx.com/resources/admin-guide/load-balancer/">NGINX LOAD BALANCING – HTTP LOAD BALANCER</a></li><li><a href="https://linode.com/docs/web-servers/nginx/nginx-reverse-proxy/">How to Use NGINX as a Reverse Proxy</a>，不仅是http(s)层的代理，还有其他的protocol也支持</li><li><a href="https://linode.com/docs/uptime/loadbalancing/use-nginx-as-a-front-end-proxy-and-software-load-balancer/">use-nginx-as-a-front-end-proxy-and-software-load-balancer</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://linode.com/docs/web-servers/nginx/how-to-configure-nginx/&quot;&gt;linode的docs里面是这么介绍的&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nginx is a lightweight, high performance web server designed to deliver large amounts of static content quickly with efficient use of system resources. nginx’s strong point is its ability to efficiently serve static content, like plain HTML and media files. Some consider it a less than ideal server for dynamic content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/image/jpg/scenery151110073841.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
      <category term="nginx" scheme="https://haldir65.github.io/tags/nginx/"/>
    
  </entry>
  
</feed>
