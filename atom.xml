<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haldir的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haldir65.github.io/"/>
  <updated>2018-08-06T06:19:32.544Z</updated>
  <id>https://haldir65.github.io/</id>
  
  <author>
    <name>Haldir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo部署个人博客记录</title>
    <link href="https://haldir65.github.io/2217/01/08/2017-01-08-trouble-shooting-with-my-blog/"/>
    <id>https://haldir65.github.io/2217/01/08/2017-01-08-trouble-shooting-with-my-blog/</id>
    <published>2217-01-08T18:01:01.000Z</published>
    <updated>2018-08-06T06:19:32.544Z</updated>
    
    <content type="html"><![CDATA[<p>使用 hexo 写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的 blog 一个值得置顶的文章的话，我觉得一篇记录使用 hexo 过程中的一些解决问题的方法的文章是再合适不过的了。</br><br><img src="http://haldir66.ga/static/imgs/40164340_40164340_1414330224938_mthumb.jpg" alt=""></p><a id="more"></a><h2 id="1-经常更新-yilia-的-theme"><a href="#1-经常更新-yilia-的-theme" class="headerlink" title="1. 经常更新 yilia 的 theme"></a>1. 经常更新 yilia 的 theme</h2><p><a href="https://github.com/litten/hexo-theme-yilia">yilia</a>主题经常会更新，及时更新 theme 会发现很多新的特性及 bug fix</p><h2 id="2-部署相关"><a href="#2-部署相关" class="headerlink" title="2. 部署相关"></a>2. 部署相关</h2><ul><li>部署到 github</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="comment">//清除缓存</span></span><br><span class="line">hexo g -d <span class="comment">//一步到位 = hexo g + hexo d</span></span><br><span class="line">hexo s <span class="comment">//localost:4000本地预览</span></span><br></pre></td></tr></table></figure><ul><li>部署过程中出现的一些错误</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br><span class="line">INFO  Start processing</span><br><span class="line">ERROR Process failed: _posts/<span class="number">2016</span><span class="number">-12</span><span class="number">-10</span>-adb-command.md</span><br><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line <span class="number">3</span>, column <span class="number">11</span>:</span><br><span class="line">    categories:  [技术]</span><br><span class="line">              ^</span><br><span class="line">    at generateError (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">162</span>:<span class="number">10</span>)</span><br><span class="line">    at throwError (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">168</span>:<span class="number">9</span>)</span><br><span class="line">    at readBlockMapping (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1040</span>:<span class="number">9</span>)</span><br><span class="line">    at composeNode (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1326</span>:<span class="number">12</span>)</span><br><span class="line">    at readDocument (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1488</span>:<span class="number">3</span>)</span><br><span class="line">    at loadDocuments (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1544</span>:<span class="number">5</span>)</span><br><span class="line">    at <span class="built_in">Object</span>.load (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1561</span>:<span class="number">19</span>)</span><br><span class="line">    at parseYAML (D:\Blog\github\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:<span class="number">80</span>:<span class="number">21</span>)</span><br><span class="line">    at parse (D:\Blog\github\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:<span class="number">56</span>:<span class="number">12</span>)</span><br><span class="line">    at D:\Blog\github\node_modules\hexo\lib\plugins\processor\post.js:<span class="number">52</span>:<span class="number">18</span></span><br><span class="line">    at tryCatcher (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\util.js:<span class="number">16</span>:<span class="number">23</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">507</span>:<span class="number">35</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">567</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">125</span>:<span class="number">19</span>)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">143</span>:<span class="number">14</span>)</span><br><span class="line">    at PromiseArray._iterate (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">113</span>:<span class="number">31</span>)</span><br><span class="line">    at PromiseArray.init [<span class="keyword">as</span> _init] (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">77</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">564</span>:<span class="number">21</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at PromiseArray._resolve (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">125</span>:<span class="number">19</span>)</span><br><span class="line">    at PromiseArray._promiseFulfilled (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">143</span>:<span class="number">14</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">572</span>:<span class="number">26</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._resolveCallback (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">431</span>:<span class="number">57</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">522</span>:<span class="number">17</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">567</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</span><br><span class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</span><br><span class="line">    at D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\nodeback.js:<span class="number">42</span>:<span class="number">21</span></span><br><span class="line">    at D:\Blog\github\node_modules\hexo\node_modules\hexo-fs\node_modules\graceful-fs\graceful-fs.js:<span class="number">78</span>:<span class="number">16</span></span><br><span class="line">    at tryToString (fs.js:<span class="number">455</span>:<span class="number">3</span>)</span><br><span class="line">    at FSReqWrap.readFileAfterClose [<span class="keyword">as</span> oncomplete] (fs.js:<span class="number">442</span>:<span class="number">12</span>)</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> <span class="number">1.48</span> s</span><br><span class="line">INFO  Generated: sitemap.xml</span><br><span class="line">INFO  Generated: atom.xml</span><br><span class="line">INFO  Generated: <span class="number">2017</span>/<span class="number">01</span>/<span class="number">08</span>/<span class="number">2017</span><span class="number">-01</span><span class="number">-08</span>-trouble-shooting-<span class="keyword">with</span>-my-blog/index.html</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  <span class="number">4</span> files generated <span class="keyword">in</span> <span class="number">2.26</span> s</span><br><span class="line">INFO  Deploying: git</span><br></pre></td></tr></table></figure><p>找了好久，有说”_config.xml” 文件 有空格的，有说 title 被乱改的，试了好长时间，改成这样就不再报错了。所以，<strong>冒号后面一定要加空格，英文半角的</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: adb常用命令手册</span><br><span class="line">date: 2016-12-10 21:14:14</span><br><span class="line">tags:</span><br><span class="line"> - android</span><br><span class="line"> - adb</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>tags 有两种写法，一种是上面这样前面加横杠另一种长这样，写成数组形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: my awesometitle</span><br><span class="line">date: 2017-05-07 16:48:01</span><br><span class="line">categories: blog</span><br><span class="line">tags: [linux,python]</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="3-一些功能的实现"><a href="#3-一些功能的实现" class="headerlink" title="3. 一些功能的实现"></a>3. 一些功能的实现</h2><ul><li>置顶功能将 node_modules/hexo-generator-index/lib/generator.js 的文件内容替换成以下内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">"hexo-pagination"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">      <span class="keyword">if</span> (a.top == b.top)</span><br><span class="line">        <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.top &amp;&amp; !b.top) &#123;</span><br><span class="line">      <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">"page"</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">""</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">"index"</span>, <span class="string">"archive"</span>],</span><br><span class="line">    format: paginationDir + <span class="string">"/%d/"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>同时在文章开头添加 top : 1 即可 ，实际排序按照这个数字从大到小排序</li></ul><p>另一种做法是手动将date改大，日期越靠后的越在前面。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> title: Hexo置顶文章</span><br><span class="line">date: <span class="number">2016</span>-<span class="number">11</span>-<span class="number">11</span> <span class="number">23</span>:<span class="number">26</span>:<span class="number">22</span></span><br><span class="line">tags:[置顶]</span><br><span class="line">categories: Hexo</span><br><span class="line">top: 0 # 0或者1</span><br></pre></td></tr></table></figure><p>个人建议：置顶不要太多</p><h2 id="4-SublimeText-的一些快捷键"><a href="#4-SublimeText-的一些快捷键" class="headerlink" title="4. SublimeText 的一些快捷键"></a>4. SublimeText 的一些快捷键</h2><p>由于文章大部分都是使用 SublimeText 写的，Typroa 这种所见即所得的编辑器也不错，但对于掌握 MardkDown 语法没有帮助。这里摘录一些 SubLimeText 的快捷键。</p><blockquote><p><strong>Ctrl+Shift+P：打开命令面板</strong><br>Ctrl+P：搜索项目中的文件<br>Ctrl+G：跳转到第几行<br>Ctrl+W：关闭当前打开文件 CTRL+F4 也可以<br>Ctrl+Shift+W：关闭所有打开文件<br>Ctrl+Shift+V：粘贴并格式化<br>Ctrl+D：选择单词，重复可增加选择下一个相同的单词<br><strong>Ctrl+L：选择行，重复可依次增加选择下一行</strong><br><strong>Alt+Shift+数字：分屏显示</strong><br><strong>Ctrl+Shift+L：选择多行</strong><br><strong>Ctrl+Shift+D：复制粘贴当前行</strong><br><strong>Ctrl+X：删除当前行</strong><br><strong>Ctrl+Shift+左箭头 往左边选择内容</strong><br><strong>Shift+向左箭头 向左选择文本</strong><br><strong>Ctrl+B 编译，markDown 生成 html 文件</strong><br><strong>Alt+2 切换到第二个 Tab（打开的文件，记得 chrome 是 ctrl+2）</strong><br><strong>Ctrl+R：前往 对应的方法的实现*</strong><br><strong>快速加上[] 选中单词按 [ 即可</strong><br><strong>批量更改当前页面相同的单词 alt+F3 </strong><br><strong>Ctrl+Enter 在下一行插入新的一行</strong><br><strong>Ctrl+Shift+Enter 在上一行插入新的一行</strong><br><strong>Shift+ 向上箭头 向上选中多行</strong></p></blockquote><p>Ctrl+Shift+D：复制粘贴当前行 Ctrl+Shift+Enter：在当前行前插入新行<br>Ctrl+M：跳转到对应括号<br>Ctrl+U：软撤销，撤销光标位置<br>Ctrl+J：选择标签内容<br>Ctrl+F：查找内容<br>Ctrl+Shift+F：查找并替换<br>Ctrl+H：替换<br>Ctrl+N：新建窗口<br>Ctrl+K+B：开关侧栏<br>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身<br>Ctrl+F2：设置/删除标记<br>Ctrl+/：注释当前行<br>Ctrl+Shift+/：当前位置插入注释<br>Ctrl+Alt+/：块注释，并 Focus 到首行，写注释说明用的<br>Ctrl+Shift+A：选择当前标签前后，修改标签用的<br>F11：全屏<br>Shift+F11：全屏免打扰模式，只编辑当前文件<br>Alt+F3：选择所有相同<br>Alt+.：闭合标签<br>Shift+右键拖动：光标多不，用来更改或插入列内容<br>Alt+数字：切换打开第 N 个文件鼠标的前进后退键可切换 Tab 文件按 Ctrl，依次点击或选取，可需要编辑的多个位置按 Ctrl+Shift+上下键，可替换行</p><p>vscode的快捷键最重要的一个是ctrl+shift+p,ctrl+p只是在全局查找文件</p><h2 id="5-title-不能以-开头"><a href="#5-title-不能以-开头" class="headerlink" title="5. title 不能以[]开头"></a>5. title 不能以[]开头</h2><p>前面加上###确实能够让字号变大，但不要写 4 个#，后面的字母会大小写不分的</p><h2 id="6-markdown-语法"><a href="#6-markdown-语法" class="headerlink" title="6. markdown 语法"></a>6. markdown 语法</h2><p>MarkDown 页面内部跳转<br><a href="http://www.cnblogs.com/JohnTsai/p/4027229.html">MarkDown 技巧：两种方式实现页内跳转</a></p><blockquote><p><em>一个星星包起来是斜体字</em><br><strong>两个星星包起来是粗体字</strong><br><strong><em>那么三个星星呢</em></strong></p></blockquote><h2 id="7-github-提交-commit-的时候显示-Emoji"><a href="#7-github-提交-commit-的时候显示-Emoji" class="headerlink" title="7.github 提交 commit 的时候显示 Emoji"></a>7.github 提交 commit 的时候显示 Emoji</h2><p>链接<a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/">在此</a></p><h2 id="8-换电脑了怎么办"><a href="#8-换电脑了怎么办" class="headerlink" title="8.换电脑了怎么办"></a>8.换电脑了怎么办</h2><p>亲测，把整个目录下所有文件全部复制粘贴到新电脑上，装上 node，然后装上 hexo，记得勾选添加到 PATH,然后就可以了。需要注意的是小文件比较多，所以复制粘贴可能要十几分钟。</p><h2 id="9-有时候写的代码会给你在每一行前面加上-true"><a href="#9-有时候写的代码会给你在每一行前面加上-true" class="headerlink" title="9. 有时候写的代码会给你在每一行前面加上 true"></a>9. 有时候写的代码会给你在每一行前面加上 true</h2><p>比如写一段 css 的代码时候，很多时候预览会给每一行前面加上一个 true，解决办法：用 TAB 键缩进即可</p><h2 id="10-markdown-live-是一个非常好用的-node-module"><a href="#10-markdown-live-是一个非常好用的-node-module" class="headerlink" title="10. markdown-live 是一个非常好用的 node module"></a>10. markdown-live 是一个非常好用的 node module</h2><p><a href="https://www.npmjs.com/package/markdown-live">项目地址</a><br><strong>前提是安装了 node</strong></p><blockquote><p>npm install -g markdown-live</p><p>md-live</p></blockquote><p><br><br><strong><em>编辑md文件的同时，保存就会同步刷新网页预览，非常好用</em></strong></p><h2 id="11-如果运行-hexo-g-生成的-index-html-是空的"><a href="#11-如果运行-hexo-g-生成的-index-html-是空的" class="headerlink" title="11. 如果运行 hexo g 生成的 index.html 是空的"></a>11. 如果运行 hexo g 生成的 index.html 是空的</h2><p>输出</p><blockquote><p>WARN No layout: tags/service/index.html<br>原因是 themes/文件夹下没有 clone 对应的主题</p></blockquote><p>换成travis之后，在travis.yml文件中，添加了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cache:</span><br><span class="line">  yarn: true</span><br><span class="line">  directories:</span><br><span class="line">  - node_modules</span><br><span class="line">  - themes</span><br></pre></td></tr></table></figure></p><p>cahe也就意味着后续，所有对于themes文件夹中的_config.yml文件的修改都不会生效。这也就是我一遍遍尝试更改theme文件夹中_config文件不生效的原因。<br>所以要么去掉cache ，要么自己写bash script一行行的改。</p><h2 id="12-markdown写表格"><a href="#12-markdown写表格" class="headerlink" title="12. markdown写表格"></a>12. markdown写表格</h2><p>直接在atom下面敲table，就会自动提示出来的<br>| Header One     | Header Two     |<br>| :————- | :————- |<br>| Item One       | Item Two       |</p><p>中间的虚线左边的冒号表示下面的单元格左对齐，冒号放右边就右对齐，左右都放一个就表示居中</p><p>vscode的返回上一个文件快捷键是ctrl + -</p><h2 id="13-travis-ci自动部署的一些问题"><a href="#13-travis-ci自动部署的一些问题" class="headerlink" title="13 . travis ci自动部署的一些问题"></a>13 . travis ci自动部署的一些问题</h2><p><a href="https://github.com/travis-ci/travis.rb/issues/437">travis ci加密文件无法在travis以外的地方解密，因为key,value都存在travis的数据库了</a></p><p><a href="https://github.com/travis-ci/travis-ci/issues/9668">travis加密文件后用openssl解密出现iv undefined的错误</a></p><p>iv undefined</p><blockquote><p>travis env list<br>encrypted_476ad15a8e52_key=[secure]<br>encrypted_476ad15a8e52_iv=[secure]<br>明明是存在的</p></blockquote><p>在linux 里面运行travis endpoint<br>果然是 API endpoint: <a href="https://api.travis-ci.org/">https://api.travis-ci.org/</a><br>而新的endpoint应该是 <a href="https://api.travis-ci.com/">https://api.travis-ci.com/</a><br>于是travis encrypt-file –help</p><blockquote><p>–pro  short-cut for –api-endpoint ‘<a href="https://api.travis-ci.com/">https://api.travis-ci.com/</a>‘<br>–org short-cut for –api-endpoint ‘<a href="https://api.travis-ci.org/">https://api.travis-ci.org/</a>‘</p></blockquote><p>所以</p><blockquote><p>travis encrypt-file super_secret.txt 应该改成<br>travis encrypt-file super_secret.txt –pro</p></blockquote><p>因为默认的$encrypted_476ad15a8e52_key其实已经存储在travis-ci.org上了<br>所以在travis-ci.com上的项目当然找不到</p><p><a href="https://github.com/openwrtio/openwrtio.github.io/blob/mkdocs/.travis.yml">自动部署的另一个实例</a></p><h2 id="14-hexo-server本地预览出现的问题"><a href="#14-hexo-server本地预览出现的问题" class="headerlink" title="14. hexo server本地预览出现的问题"></a>14. hexo server本地预览出现的问题</h2><p><a href="Refused to execute script from" title="http://localhost:4000/slider.e37972.js&#39; because its MIME type (&#39;text/html">hexo s 本地预览样式加载失败</a> is not executable, and strict MIME type checking is enabled.)</p><p>hexo server的意思是类似于express的serve static功能，<a href="https://hexo.io/zh-cn/docs/server.html">默认只处理public文件下的文件，所以如果本地运行hexo s 出现404的话，直接copy到public文件夹下就可以了</a>注意hexo clear会删掉public文件夹</p><p>[Refused to Execute Script From Because Its MIME Type (Text/plain) Is Not Executable, and Strict MIME Type Checking Is Enabled]这句话的意思</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://yanhuili.github.io/2016/11/21/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%8A%80%E5%B7%A7/">Hexo 博文置顶技巧</a></li><li><a href="http://www.daqianduan.com/4820.html">SublimeText 快捷键</a></li><li><a href="http://itmyhome.com/markdown/article/syntax/emphasis.html">MarkDown 语法学起来很快的</a></li><li><a href="https://blessing.studio/deploy-hexo-blog-automatically-with-travis-ci/">travis 自动部署</a></li><li><a href="https://docs.travis-ci.com/user/legacy-services-to-github-apps-migration-guide/">Legacy GitHub Services to GitHub Apps Migration Guide 2018年10月1号之后不再支持 Legacy GitHub Service</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 hexo 写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的 blog 一个值得置顶的文章的话，我觉得一篇记录使用 hexo 过程中的一些解决问题的方法的文章是再合适不过的了。&lt;/br&gt;&lt;br&gt;&lt;img src=&quot;http://haldir66.ga/static/imgs/40164340_40164340_1414330224938_mthumb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="hexo" scheme="https://haldir65.github.io/tags/hexo/"/>
    
      <category term="置顶" scheme="https://haldir65.github.io/tags/%E7%BD%AE%E9%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>即刻备忘录</title>
    <link href="https://haldir65.github.io/2046/12/18/2017-12-18-random-new-thoughts/"/>
    <id>https://haldir65.github.io/2046/12/18/2017-12-18-random-new-thoughts/</id>
    <published>2046-12-18T22:58:14.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p>一个待办事项的仓库<br><img src="http://haldir66.ga/static/imgs/girlfriend lake green nature water cold.jpg" alt=""></p><a id="more"></a><ul><li><a href="https://juejin.im/post/5a0c1956f265da430a501f51">个人分享–web 前端学习资源分享</a></li><li><a href="https://huangxuan.me/2017/02/09/nextgen-web-pwa/">WPA 所代表的 Web 开发应是未来</a>据说Electron要被PWA干掉</li><li><a href="https://segmentfault.com/a/1190000003818163">js 循环闭包的解决方法</a></li><li>动态类型一时爽，代码重构火葬场</li><li>Promise 链式调用与终止，异常处理</li><li>iview，elementUi</li><li><a href="https://css-tricks.com/NetMag/FluidWidthVideo/Article-FluidWidthVideo.php">embeed video with iframe</a><a href="https://www.youtube.com/watch?v=g3F7Imjcd4k">AC2016腾讯前端技术大会 1 1 1 H5直播那些事</a></li><li>[ ] flex,grid</li><li><a href="https://sspai.com/post/31500">scheme 这东西算跨客户端平台的</a>，比如在 App 中调起支付宝(用的是 alipayqr://)。其实就是一个系统内跨应用调用。<a href="http://blog.csdn.net/qq_23547831/article/details/51685310">用法</a></li><li>[ ] Paul Irish from google</li><li>[ ] form表单可以跨域一个是历史原因要保持兼容性</li><li>[ ] <a href="http://lokeshdhakar.com/projects/lightbox2/">lightbox一个很好看的js图片查看库</a></li><li>[ ] <a href="https://www.js-css.cn/a/jscode/album/2014/0915/1319.html">仿门户网站js相册</a>， <a href="https://www.js-css.cn/a/jscode/album/2014/0914/1318.html">js相册2</a></li><li>[ ] <a href="http://python.jobbole.com/82270/">八大排序算法的python实现</a></li><li>[ ] <a href="https://gist.github.com/quexer/3619237">如何编写 jQuery 插件</a></li><li>[ ] 用正则检测或者解析json(jQuery源码里有)</li><li>[ ] JavaScript中new FileReader()，以及canvas api,以及<a href="https://juejin.im/post/5a98c5c26fb9a028d82b34ee">js进行图片缩放和裁剪</a></li><li>[ ] Redux和Flux很像,react context api</li><li>[ ] <a href="https://www.jianshu.com/p/a4ab102fa4ac">一个展示如何在宿主App中提取一个apk文件并加载代码和资源</a></li><li>[ ] <a href="https://www.jianshu.com/p/534741f5151c">libmp3lame移植到Android</a>,跟jni有关了</li><li>[ ] nodejs ,go ,protobuf rpc</li><li>[ ] <a href="http://www.ruanyifeng.com/blog/2018/07/indexeddb.html">indexed DB</a>,浏览器端数据库，<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">content-disposition</a></li><li>[ ] classloader和class的生命周期</li><li>[ ] <a href="https://stackoverflow.com/questions/59895/getting-the-source-directory-of-a-bash-script-from-within?rq=1">在bash脚本中获取当前脚本所在路径</a></li><li>[ ] <a href="https://seisman.github.io/how-to-write-makefile/introduction.html">如何写makefile</a></li><li>[ ]一致性哈希原理</li><li>[ ] <a href="http://afghl.github.io/2018/06/17/distributed-lock-and-granarity.html">使用redis实现低粒度的分布式锁</a></li><li>[ ]<a href="https://vim.rtorr.com/">Vim cheet sheet</a></li><li>[ ]<a href="http://www.wklken.me/posts/2015/04/26/elk-for-nginx-log.html">LOGSTASH+ELASTICSEARCH+KIBANA处理NGINX访问日志</a>ELK全家桶</li></ul><h3 id="已完成"><a href="#已完成" class="headerlink" title="已完成"></a>已完成</h3><ul><li>用 express 转接一个知乎 Api，添加 Access-control-allow-origin,或许还可以用 redis 缓存数据结果（一个就好）由此想到一篇文章”How to use Pythonto build a restful Web Service”.只不过用的是 Tornado</li><li>git hook (github travis 持续集成，git push 会触发服务器的一系列操作)</li><li>基于前后端分离的理念，后台只负责提供数据，render page 的任务应该交给前端。（所以用 express-handlebars 写页面的方式写着很累）</li><li>集成 travis-ci，记得 after-success script 的结果并不会影响 build 的结果（即，after-success 执行脚本发生了错误，在日志里有输出 error，但实际显示的 build result 仍为 success），还有 travis 的输出 log 需要默认是折叠的，要展开才能看清楚，但在 afterSuccess 里面的指令的输出一定是有的。</li><li>随便放一个文件到/usr/bin/就可以直接调用这个文件名来起这个命令了吗？（实际操作只需要建立一个symbolic link就好了）</li><li>单个网卡最多65535个端口，c10K。<a href="https://www.zhihu.com/question/66553828">65536其实不是操作系统限制的，而是tcp协议就只给port留了2个bytes给source port，只留了2个bytes给destination port</a></li><li>oAuth2原理，其实流程上和很多客户端的微信登陆，新浪微博登陆很像的</li><li>在Android手机上尝试用一个unix domain socket用于localhost进程间ipc(其实就是保证端口号一致，给网络权限就好了)</li><li>写 groovy 用intelij全家桶就可以了，groovy的<a href="https://www.tutorialspoint.com/groovy/groovy_closures.htm">语法</a>其实没什么，主要是了解编译的流程和基本原理，这个需要看<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases">official doc</a></li><li><a href="https://github.com/JLLK/gradle-android-maindexlist-plugin">开发gradle plugin优化MultiDex</a>。长远来看，5.0以后的手机越来越多，MultiDex也不值得过于关注。</li><li>intelij 点击run 实际调用的command line是两个，一个是javac，编译出来的class文件放到了target文件夹，紧接着用java命令带上一大串classpath去调用主函数</li><li><a href="https://fucknmb.com/2017/05/11/Android-Studio-Library%E6%A8%A1%E5%9D%97%E4%B8%ADNative%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8Cdebug%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/">Android Studio 编译过程</a>，其实就是gradle assembleXXX 好了之后adb push到手机上，再安装，最后起主界面</li><li><a href="http://mouxuejie.com/blog/2016-06-21/multidex-compile-and-dex-source-analysis/">Android 编译及 Dex 过程源码分析</a></li><li><a href="http://www.wangyuwei.me/">如何调试 Android 打包流程？</a>，一个remote的事</li><li><a href="https://github.com/chenenyu/img-optimizer-gradle-plugin">一个用于优化 png 图片的 gradle 插件</a>，用来看 groovy 语法挺好的。以及 <a href="http://yuanfentiank789.github.io/2017/09/20/%E5%9C%A8AndroidStudio%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89Gradle%E6%8F%92%E4%BB%B6/">How to write gradle plugin</a></li><li>XSS 攻击,DOM based和Stored XSS,基本上就是不要相信用户的输入，除了合法输入以外一律过滤掉</li></ul><ul><li>websocket nodejs，局限性就是前后台都得用socket.io的库。前端是浏览器的话还好，app的话java,Android都有对应的实现.[其实就是socket io] </li><li>[X]一直不会maven是在是太丢人了<a href="https://maven.apache.org/guides/getting-started/index.html#How_do_I_make_my_first_Maven_project">看文档就行了</a>，其他的<a href="https://www.tutorialspoint.com/maven/maven_build_life_cycle.htm">教程</a>也不错</li><li>[使用Spring boot后台提供protobuf接口实现客户端通信] 不要使用protobf-gradle-plugin了。直接写脚本用protoc去生成文件，指定生成文件的路径要和proto里面写的包名对的上。另外就是客户端和server端依赖的protobuf版本以及protoc工具的版本得一致，比如都是3.5。还有就是protoc的语法，什么import的比较烦。</li><li>[X] 使用jinja2生成文件。<a href="https://github.com/guokr/swagger-py-codegen">一个比较好玩的代码生成器</a></li><li>[X] URL Encoding,就是那个在网址里把字符转成百分号加上UTF-8的<a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html">找到了阮一峰老师的解释</a></li><li>[X] 通过file input上传图片，原生ajax以及Ajax，自己搭建上传服务器<a href="https://zhuanlan.zhihu.com/p/24513281?refer=flask">大概能猜到暴风影音的局域网传输实现了</a>用flask的话自己搭建好后台最简单了，最多再使用flask-wtf和flask-upload规范操作</li></ul><h3 id="Good-For-Nothing"><a href="#Good-For-Nothing" class="headerlink" title="Good For Nothing"></a>Good For Nothing</h3><ul><li>[ ] 用GDB调试程序</li><li>[ ] npm install graphql(mostly a server side javascript stuff)</li><li>使用 express 模拟网络延迟</li><li><a href="https://juejin.im/post/5a157b7a5188257bfe457ff0">基于 Docker 打造前端持续集成开发环境</a></li><li>vS Code Vender Prefix plugin =&gt; auto prefix loader</li><li>前后端分离</li><li>sql漏洞</li><li><a href="https://cloud.tencent.com/developer/article/1004755">深入浅出腾讯云 CDN：缓存篇</a>不管SSD盘或者SATA盘都有最小的操作单位，可能是512B，4KB，8KB。如果读写过程中不进行对齐，底层的硬件或者驱动就需要替应用层来做对齐操作，并将一次读写操作分裂为多次读写操作。</li><li>Android进程的<a href="https://juejin.im/post/5a646211f265da3e3f4cc997">加载流程</a></li><li>前后端同构</li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins">install nginx , jenkin ci, deploying nginx in docker(Http Load Balaning with Docker and nginx)</a></li><li><a href="https://juejin.im/post/59fffdb76fb9a0450a66bd58">nio stuff</a></li><li>[ ] 网易云音乐API</li><li>[X] Django部署个人网站(Gunicorn，Nginx)。django写template就不是前后端分离了</li><li>[ ] Docker<a href="https://medium.com/@elye.project/intro-to-docker-building-android-app-cb7fb1b97602">intro-to-docker-building-android-app</a> 这篇文章其实是两件事，一个是Build docker image(docker build xxxx),另一个是run (docker run xxx)</li><li>[ ] <a href="https://blog.csdn.net/u013553529/article/details/53856800">和网页类似，Activity也有一个referer的概念</a>，用于判断当前页面是由谁发起请求的<br>OpenType® is a cross-platform font file format developed jointly by Adobe and Microsoft.</li></ul><p><a href="https://jsonplaceholder.typicode.com/">jsonplaceholder</a>懒得自己写api的话就用这个吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个待办事项的仓库&lt;br&gt;&lt;img src=&quot;http://haldir66.ga/static/imgs/girlfriend lake green nature water cold.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>C语言学习手册</title>
    <link href="https://haldir65.github.io/2018/07/29/2018-07-29-Learn-to-program-with-c/"/>
    <id>https://haldir65.github.io/2018/07/29/2018-07-29-Learn-to-program-with-c/</id>
    <published>2018-07-29T17:47:28.000Z</published>
    <updated>2018-08-06T06:19:32.556Z</updated>
    
    <content type="html"><![CDATA[<p>C语言实用指南，暂时不涉及cpp内容<br><img src="http://haldir66.ga/static/imgs/pretty-orange-mushroom-wallpaper-5386b0c8c3459.jpg" alt=""><br><a id="more"></a></p><p>gcc ,clang,llvm的历史</p><p><a href="https://www.youtube.com/playlist?list=PLCNJWVn9MJuPtPyljb-hewNfwEGES2oIW">参考教程</a></p><p>.so文件其实是shared object的缩写</p><h2 id="Makefile怎么写"><a href="#Makefile怎么写" class="headerlink" title="Makefile怎么写"></a>Makefile怎么写</h2><p><a href="https://www.youtube.com/watch?v=GExnnTaBELk">C Programming: Makefiles</a></p><p>make file automatic rule</p><p><a href="https://www.geeksforgeeks.org/static-vs-dynamic-libraries/">static and dynamic libraries</a></p><p>static library把依赖的library都打包进去了，体积更大<br>dynamic libvrary只是写了依赖的library的名称，运行时需要去操作系统中去找，会慢一些</p><p>static libiray(compile time已完成link，而dynamic library需要在runtime完成link)</p><p>查看archive文件中的内容<br>ar -tv libmylib.a</p><p>nm somebinaryfile ## 查看动态和静态库中的符号表</p><p>ls /usr/lib ## 文件夹中又各种lib,包括so文件和.a文件<br>ls /usr/include # 这里也有一大堆头文件</p><p>clang wacky.c -L. -lwacky -o wacky ## -L. 表示在当前目录下查找后面的libwacky.so或者libwacky.a文件。所以完全可以link 系统中存在的(/usr/lib目录中)的library并compile到program中</p><p>Makefile for bundling static library（每一个chunk叫做recepie）<br>不能用空格，需要用Tab<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">default: wacky</span><br><span class="line"></span><br><span class="line">wacky: libwacky.a  wacky.c</span><br><span class="line">        clang wacky.c -L. -lwacky -o wacky</span><br><span class="line"></span><br><span class="line">libwacky.a: wacky_math.o</span><br><span class="line">        ar -rcv $@ $^</span><br></pre></td></tr></table></figure></p><h3 id="dynamic-library"><a href="#dynamic-library" class="headerlink" title="dynamic library"></a>dynamic library</h3><p>wacky_math.o: wacky_math.c wacky_math.h<br>        clang -c -fPIC wacky_math.c -o $@</p><p>-fPIC使得生成的object file是relocateable的<br>同时还得告诉run time linke如何去找这个so文件</p><p>man ldpath ##  so文件查找目录<br>export LD_LIBRARY_PATH=. ## 添加当前目录为查找路径</p><p>//一般so文件都在/usr/lib或者/usr/local/lib文件夹下面<br>locate sodium.so</p><p>make wacky 也是可以的，可以指定编译target</p><p>###<br><a href="https://www.youtube.com/watch?v=GExnnTaBELk">C Programming: Makefiles</a></p><p>编译过程可以传一些flag(无论是gcc还是clang都是一样的)<br>preprocessor -E  ##handle #include define<br>compiler -S ##translate C to assembly(生成.s文件)<br>assembler -c ## translate assembly to object file(.o，文件是针对特定cpu,platform的,.o文件是不可执行的)<br>linker bring together object file to produce executable</p><p><a href="https://mooc.guokr.com/note/13202/">编译时发生了什么</a></p><p>如果没有-E -S或者-c的话，就goes all the way down to executable<br>-O 是指定最终生成的executable的名称的</p><p>在c program中使用其他的library以及如何编译生成可执行文件</p><p>make clean</p><p>clean:<br>    rm -f *.o program_name</p><p>因为手动rm可能写成<br>rm -f * .o 中间多一个空格</p><p><a href="https://www.tutorialspoint.com/makefile/makefile_example.htm">make file examples</a></p><p>经常会看到项目里面的安装指南包括./configure make..<br>GNU的AUTOCONF和AUTOMAKE</p><p>./config &amp;&amp; make &amp;&amp; sudo make install || exit 1</p><p>比如说awk的安装过程是这样的<br>wget <a href="http://ftp.gnu.org/gnu/gawk/gawk-4.1.1.tar.xz">http://ftp.gnu.org/gnu/gawk/gawk-4.1.1.tar.xz</a><br>tar xvf gawk-4.1.1.tar.xz<br>cd gawk-4.1.1 &amp;&amp; ./configure<br>make<br>make check<br>sudo make install</p><p>如何生成一个auto build file<br><a href="https://stackoverflow.com/questions/10999549/how-do-i-create-a-configure-script">auto build configure file</a></p><p><a href="http://hahaya.github.io/build-libevent/">Linux下安装、配置libevent</a><br><a href="http://hahaya.github.io/hello-in-libevent/">使用libevent输出Hello</a></p><p>todo read the manual page for gcc(clang) to see all the available command line arguments</p><p>如何使用C语言库<br><a href="https://blog.csdn.net/yanxiangtianji/article/details/20474155">以mysql的c库为例</a><br>如果库在 usr/include/ 目录下，那么就用 #include &lt; *.h &gt;。这个目录下面放的都是些头文件</p><p>如果库在当前目录下，就用　#include “mylib.h”</p><p>gcc -v可以查看compile gcc时预设的链接静态库的搜索路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">默认情况下， GCC在链接时优先使用动态链接库，只有当动态链接库不存在时才考虑使用静态链接库，如果需要的话可以在编译时加上-static选项，强制使用静态链接库。</span><br><span class="line">静态库链接时搜索路径顺序：</span><br><span class="line"></span><br><span class="line">1. ld会去找GCC命令中的参数-L</span><br><span class="line">2. 再找gcc的环境变量LIBRARY_PATH</span><br><span class="line">3. 再找内定目录 /lib /usr/lib /usr/local/lib 这是当初compile gcc时写在程序内的</span><br><span class="line"></span><br><span class="line">动态链接时、执行时搜索路径顺序:</span><br><span class="line"></span><br><span class="line">1. 编译目标代码时指定的动态库搜索路径</span><br><span class="line">2. 环境变量LD_LIBRARY_PATH指定的动态库搜索路径</span><br><span class="line">3. 配置文件/etc/ld.so.conf中指定的动态库搜索路径</span><br><span class="line">4. 默认的动态库搜索路径/lib</span><br><span class="line">5. 默认的动态库搜索路径/usr/lib</span><br><span class="line"></span><br><span class="line">有关环境变量：</span><br><span class="line">LIBRARY_PATH环境变量：指定程序静态链接库文件搜索路径</span><br><span class="line">LD_LIBRARY_PATH环境变量：指定程序动态链接库文件搜索路径</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C语言实用指南，暂时不涉及cpp内容&lt;br&gt;&lt;img src=&quot;http://haldir66.ga/static/imgs/pretty-orange-mushroom-wallpaper-5386b0c8c3459.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://haldir65.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>pragmatic-java-chetsheet</title>
    <link href="https://haldir65.github.io/2018/07/05/2018-07-05-pragmatic-java-chetsheet/"/>
    <id>https://haldir65.github.io/2018/07/05/2018-07-05-pragmatic-java-chetsheet/</id>
    <published>2018-07-05T23:05:52.000Z</published>
    <updated>2018-08-06T06:19:32.556Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://haldir66.ga/static/imgs/20160720094529840.jpg" alt=""><br><a id="more"></a></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><blockquote><p>如何获得一个class对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Class class1 = <span class="keyword">null</span>;</span><br><span class="line">Class class2 = <span class="keyword">null</span>;</span><br><span class="line">Class class3 = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    class1 = Class.forName(<span class="string">"com.example.test.javareflect.ReflectClass"</span>);</span><br><span class="line">    <span class="comment">// java语言中任何一个java对象都有getClass 方法</span></span><br><span class="line">    class2 = <span class="keyword">new</span> ReflectClass().getClass();</span><br><span class="line">    <span class="comment">//java中每个类型都有class 属性</span></span><br><span class="line">    class3 = ReflectClass.class;</span><br><span class="line">    <span class="comment">// 由于class是单例，所以class1 == class2 == class3</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如何检查一个Class中的所有constructor</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.me.reflection._001_basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObject</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObject</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObject</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkInitParams</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Constructor&lt;?&gt; constructor[] = MyObject.class.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructor.length; i++) &#123; <span class="comment">// 运行期这个length是4，如果上面的Object中不手动添加构造函数的话，这个数是1</span></span><br><span class="line">            Class arrayClass[] = constructor[i].getParameterTypes();</span><br><span class="line">            System.out.print(<span class="string">"cons["</span> + i + <span class="string">"] ("</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrayClass.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == arrayClass.length - <span class="number">1</span>)</span><br><span class="line">                    System.out.print(arrayClass[j].getName());</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    System.out.print(arrayClass[j].getName() + <span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出(我怀疑这个顺序是按照字母顺序来的)</p><blockquote><p>cons[0] ()<br>cons[1] (int)<br>cons[2] (java.lang.String, int)<br>cons[3] (java.lang.String)</p><p>实例化一个object，假设有很多个构造函数的话</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createViaReflection</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String className = <span class="string">"com.me.reflection._001_basic.MyObject"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class clazz = Class.forName(className);</span><br><span class="line">        Constructor cons = clazz.getConstructor(String.class); <span class="comment">//我们希望要获得一个String参数的构造函数</span></span><br><span class="line">        Object obj = cons.newInstance(<span class="string">"passing value via constructor is ok -ish"</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MyObject{name=’passing value via constructor is ok -ish’, age=0}</p><p>获取一个class中所有的Fileds（private的也能拿到）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllFields</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String className = <span class="string">"com.me.reflection._001_basic.MyObject"</span>;</span><br><span class="line">        Class rClass = Class.forName(className);</span><br><span class="line">        <span class="comment">// Field: 获取属性，下面还会讲到获取类的方法，注意区分</span></span><br><span class="line">        Field field[] = rClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; field.length; i++) &#123;</span><br><span class="line">            System.out.println(field[i].getName());</span><br><span class="line">            <span class="comment">// 获取修饰权限符</span></span><br><span class="line">            <span class="keyword">int</span> mo = field[i].getModifiers();</span><br><span class="line">            System.out.println(<span class="string">"mo: "</span>+mo);</span><br><span class="line">            String priv = Modifier.toString(mo);</span><br><span class="line">            <span class="comment">// 属性类型</span></span><br><span class="line">            Class type = field[i].getType();</span><br><span class="line">            System.out.println(priv + <span class="string">" "</span> + type.getName() + <span class="string">" "</span> + field[i].getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>name<br>mo: 1<br>public java.lang.String name<br>age<br>mo: 2<br>private int age</p><p>获得一个class中所有的方法(拿不到private的和构造函数，父类的wait,notfy这些反而能够拿到),getMethod只能拿到public的方法，getDeclaredMethod基本上是什么类型的都能拿到(getDeclaredMethods，有个s)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllMethods</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String className = <span class="string">"com.me.reflection._001_basic.MyObject"</span>;</span><br><span class="line">            Class fClass = Class.forName(className);</span><br><span class="line">            <span class="comment">// Method[]: 方法数组</span></span><br><span class="line">            Method method[] = fClass.getMethods();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; method.length; i++) &#123;</span><br><span class="line">                <span class="comment">// returnType :返回类型</span></span><br><span class="line">                Class returnType = method[i].getReturnType();</span><br><span class="line">                System.out.println(<span class="string">"ReturnType: "</span>+returnType);</span><br><span class="line">                <span class="comment">// 获取参数类型</span></span><br><span class="line">                Class para[] = method[i].getParameterTypes();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> temp = method[i].getModifiers();</span><br><span class="line">                System.out.print(<span class="string">"Modifier.toString: "</span>+Modifier.toString(temp) + <span class="string">" "</span>);</span><br><span class="line">                System.out.print(returnType.getName() + <span class="string">"  "</span>);</span><br><span class="line">                System.out.print(method[i].getName() + <span class="string">" "</span>);</span><br><span class="line">                System.out.print(<span class="string">"("</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; para.length; ++j) &#123;</span><br><span class="line">                    System.out.print(para[j].getName() + <span class="string">" "</span> + <span class="string">"arg"</span> + j);</span><br><span class="line">                    <span class="keyword">if</span> (j &lt; para.length - <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.print(<span class="string">","</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获取异常类型</span></span><br><span class="line">                Class&lt;?&gt; exce[] = method[i].getExceptionTypes();</span><br><span class="line">                <span class="keyword">if</span> (exce.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">") throws "</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; exce.length; ++k) &#123;</span><br><span class="line">                        System.out.print(exce[k].getName() + <span class="string">" "</span>);</span><br><span class="line">                        <span class="keyword">if</span> (k &lt; exce.length - <span class="number">1</span>) &#123;</span><br><span class="line">                            System.out.print(<span class="string">","</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.print(<span class="string">")"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试下来，这个方法能够拿到自己写的public方法，private方法似乎拿不到,还有，这里面似乎拿不到构造函数</p><blockquote><p>ReturnType: void<br>Modifier.toString: public final void  wait (long arg0,int arg1) throws java.lang.InterruptedException<br>ReturnType: void<br>Modifier.toString: public final native void  wait (long arg0) throws java.lang.InterruptedException<br>ReturnType: void<br>Modifier.toString: public final void  wait () throws java.lang.InterruptedException<br>ReturnType: boolean<br>Modifier.toString: public boolean  equals (java.lang.Object arg0)<br>ReturnType: class java.lang.String<br>Modifier.toString: public java.lang.String  toString ()<br>ReturnType: int<br>Modifier.toString: public native int  hashCode ()<br>ReturnType: class java.lang.Class<br>Modifier.toString: public final native java.lang.Class  getClass ()<br>ReturnType: void<br>Modifier.toString: public final native void  notify ()<br>ReturnType: void<br>Modifier.toString: public final native void  notifyAll ()</p></blockquote><p>拿到方法（Method对象之后就要invoke了），不管是private还是public的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设我们的class有这么两个方法,也是可以区分开来的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">echo</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">echo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"some kind of echo "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callMethodViaReflection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String className = <span class="string">"com.me.reflection._001_basic.MyObject"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; fClass = Class.forName(className);</span><br><span class="line">            Method method = fClass.getDeclaredMethod(<span class="string">"greet"</span>);</span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>); <span class="comment">//如果这是一个private的method的话，要setAccessible</span></span><br><span class="line">            method.invoke(fClass.newInstance());</span><br><span class="line"></span><br><span class="line">            Method public_method_with_params = fClass.getMethod(<span class="string">"echo"</span>,String.class);</span><br><span class="line">            public_method_with_params.invoke(fClass.newInstance(),<span class="string">"this is params from reflection"</span>);</span><br><span class="line"></span><br><span class="line">            Method public_method_without_params = fClass.getMethod(<span class="string">"echo"</span>);</span><br><span class="line">            public_method_without_params.invoke(fClass.newInstance());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>hello method without parameters<br>this is params from reflection<br>some kind of echo </p><blockquote><p>用反射给class的某个field赋值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFiledWithReflection</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String className = <span class="string">"com.me.reflection._001_basic.MyObject"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class clss = Class.forName(className);</span><br><span class="line">        Object obj = clss.newInstance();</span><br><span class="line">        Field field = clss.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(field.get(obj));</span><br><span class="line"></span><br><span class="line">        field.set(obj,<span class="string">"this is some reflected filed"</span>);</span><br><span class="line">        System.out.println(field.get(obj));</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射相关的东西基本到此完事，实际生产中当然推荐使用成熟的框架，比如<strong>Spring Framework的ReflectionUtils</strong>.当然有些东西是没法用反射去修改的（用InvocationHandler只是夹带了私活），比如函数的内部逻辑，比如常量(因为编译器直接把常量换成对应的值了)。</p><p>比如从Tinker的代码库里面抄来这么一段：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locates a given field anywhere in the class inheritance hierarchy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance an object to search the field into.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name     field name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a field object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException if the field cannot be located</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">findField</span><span class="params">(Object instance, String name)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz = instance.getClass(); clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Field field = clazz.getDeclaredField(name);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!field.isAccessible()) &#123;</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> field;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                <span class="comment">// ignore and search next</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException(<span class="string">"Field "</span> + name + <span class="string">" not found in "</span> + instance.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">findField</span><span class="params">(Class&lt;?&gt; originClazz, String name)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz = originClazz; clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Field field = clazz.getDeclaredField(name);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!field.isAccessible()) &#123;</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> field;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">                <span class="comment">// ignore and search next</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchFieldException(<span class="string">"Field "</span> + name + <span class="string">" not found in "</span> + originClazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locates a given method anywhere in the class inheritance hierarchy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance       an object to search the method into.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name           method name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes method parameter types</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a method object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException if the method cannot be located</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title">findMethod</span><span class="params">(Object instance, String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz = instance.getClass(); clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method method = clazz.getDeclaredMethod(name, parameterTypes);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!method.isAccessible()) &#123;</span><br><span class="line">                    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> method;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="comment">// ignore and search next</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(<span class="string">"Method "</span></span><br><span class="line">            + name</span><br><span class="line">            + <span class="string">" with parameters "</span></span><br><span class="line">            + Arrays.asList(parameterTypes)</span><br><span class="line">            + <span class="string">" not found in "</span> + instance.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locates a given method anywhere in the class inheritance hierarchy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz          a class to search the method into.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name           method name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes method parameter types</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a method object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException if the method cannot be located</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Method <span class="title">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Method method = clazz.getDeclaredMethod(name, parameterTypes);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!method.isAccessible()) &#123;</span><br><span class="line">                    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> method;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="comment">// ignore and search next</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(<span class="string">"Method "</span></span><br><span class="line">                + name</span><br><span class="line">                + <span class="string">" with parameters "</span></span><br><span class="line">                + Arrays.asList(parameterTypes)</span><br><span class="line">                + <span class="string">" not found in "</span> + clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Locates a given constructor anywhere in the class inheritance hierarchy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instance       an object to search the constructor into.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes constructor parameter types</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a constructor object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchMethodException if the constructor cannot be located</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Constructor&lt;?&gt; findConstructor(Object instance, Class&lt;?&gt;... parameterTypes)</span><br><span class="line">            <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; clazz = instance.getClass(); clazz != <span class="keyword">null</span>; clazz = clazz.getSuperclass()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Constructor&lt;?&gt; ctor = clazz.getDeclaredConstructor(parameterTypes);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!ctor.isAccessible()) &#123;</span><br><span class="line">                    ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ctor;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="comment">// ignore and search next</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(<span class="string">"Constructor"</span></span><br><span class="line">                + <span class="string">" with parameters "</span></span><br><span class="line">                + Arrays.asList(parameterTypes)</span><br><span class="line">                + <span class="string">" not found in "</span> + instance.getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>和反射相关的类应该还有Type，关于Type，最有名的就是从一个泛型类中获取泛型里面T的class对象。但这是有条件的。需要泛型定义在一个父类上，子类对象在初始化的时候确定一个T,后面就可以通过这个子类对象的实例来获得刚才这个T的class.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> Class&lt;?&gt; classType = Integer.TYPE; <span class="comment">//这其实是一个class</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 从泛型class中获取T的类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;()&#123;&#125;;</span><br><span class="line">    Type mySuperclass = map.getClass().getGenericSuperclass();</span><br><span class="line">    Type type = ((ParameterizedType)mySuperclass).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">    Type type2 = ((ParameterizedType)mySuperclass).getActualTypeArguments()[<span class="number">1</span>];</span><br><span class="line">    System.out.println(mySuperclass);<span class="comment">// java.util.HashMap&lt;java.lang.String, java.lang.Integer&gt;</span></span><br><span class="line">    System.out.println(type+<span class="string">" "</span>+type2); <span class="comment">//class java.lang.String class java.lang.Integer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someMethod2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 类型擦除</span></span><br><span class="line">    Type mySuperclass = map.getClass().getGenericSuperclass();</span><br><span class="line">    Type type = ((ParameterizedType)mySuperclass).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">    Type type2 = ((ParameterizedType)mySuperclass).getActualTypeArguments()[<span class="number">1</span>];</span><br><span class="line">    System.out.println(mySuperclass); <span class="comment">// java.util.AbstractMap&lt;K, V&gt;</span></span><br><span class="line">    System.out.println(type+<span class="string">" "</span>+type2); <span class="comment">//K V</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//content</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FooChild</span> <span class="keyword">extends</span> <span class="title">Foo</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//content</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Type[] getParameterizedTypes(Object object) &#123;</span><br><span class="line">    Type superclassType = object.getClass().getGenericSuperclass();</span><br><span class="line">    <span class="keyword">if</span> (!ParameterizedType.class.isAssignableFrom(superclassType.getClass())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((ParameterizedType)superclassType).getActualTypeArguments();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Foo foo = <span class="keyword">new</span> FooChild();</span><br><span class="line">        Type[] types=  getParameterizedTypes(foo);</span><br><span class="line">        System.out.println(types[<span class="number">0</span>] == String.class); <span class="comment">// true ,Type是一个接口，实现类只有Class</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>看下来都是需要一个支持泛型的父类，然后子类继承这个父类并指定泛型中的T是哪个class，外部就可以拿着这个父类的指针(指向填充了T类型的子类的Object)调用getGenericSuperclass方法再转成ParameterizedType去调用getActualTypeArguments方法了。</p><p>这里面涉及到的类和接口包括:<br>ParameterizedType,TypeVariable,GenericArrayType,WildcardType（这四个全部是接口）等<br><a href="http://loveshisong.cn/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/2016-02-16-Type%E8%AF%A6%E8%A7%A3.html">Type详解</a><br>由于类型擦除，class对象中并不能保有编译前的类的信息，引入Type似乎是为了迎合反射的需要。</p><p><img src="http://www.haldir66.ga/static/imgs/1279081126453.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://haldir66.ga/static/imgs/20160720094529840.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://haldir65.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>celery-cheetsheet</title>
    <link href="https://haldir65.github.io/2018/07/03/2018-07-03-celery-cheetsheet/"/>
    <id>https://haldir65.github.io/2018/07/03/2018-07-03-celery-cheetsheet/</id>
    <published>2018-07-03T08:43:41.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“There are only two hard things in Computer Science: cache invalidation and naming things.”<br>— Phil Karlton</p></blockquote><p><img src="http://www.haldir66.ga/static/imgs/Celery_picture.jpg" alt=""></p><a id="more"></a><p>因为需要使用Redis，在ubuntu上安装redis可以用apt-get，也能自己下载源码去make（前提是内存充足，内存不足的话make test会失败）。所以我干脆关掉了几个比较耗内存的进程，最后直接用apt-get装上了。</p><p>下面这几步就算最简单的celery入门了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'tasks'</span>, broker=<span class="string">'redis://localhost:6379/0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure></p><p>celery -A tasks worker –loglevel=info<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from tasks import add</span><br><span class="line">&gt;&gt;&gt; add.delay(4, 4)</span><br></pre></td></tr></table></figure></p><p>注意，windows上celery4不完全支持<br><a href="https://stackoverflow.com/questions/45744992/celery-raises-valueerror-not-enough-values-to-unpack">celery-raises-valueerror-not-enough-values-to-unpack</a></p><p>基本的项目结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proj/__init__.py</span><br><span class="line">    /celery.py</span><br><span class="line">    /tasks.py</span><br></pre></td></tr></table></figure></p><p>proj/celery.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'proj'</span>,</span><br><span class="line">             broker=<span class="string">'amqp://'</span>,</span><br><span class="line">             backend=<span class="string">'amqp://'</span>,</span><br><span class="line">             include=[<span class="string">'proj.tasks'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional configuration, see the application user guide.</span></span><br><span class="line">app.conf.update(</span><br><span class="line">    result_expires=<span class="number">3600</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.start()</span><br></pre></td></tr></table></figure></p><p>##耗时的任务都丢到这里就好了<br>proj/tasks.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xsum</span><span class="params">(numbers)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> sum(numbers)</span><br></pre></td></tr></table></figure></p><p>注意下面的命令要在proj项目上层目录中运行</p><blockquote><p>celery -A proj worker -l info</p><p>执行异步方法，这俩都行：<br>add.delay(2, 2)<br>add.apply_async((2, 2)) ##这句话并不会阻塞在这里，后面的方法接着执行，也就达到了异步执行的目的</p></blockquote><p><a href="http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html">在django项目中使用celery</a><br><a href="https://simpleisbetterthancomplex.com/tutorial/2017/08/20/how-to-use-celery-with-django.html">django-celery-example</a></p><p>生产环境需要supervisor守护celery</p><blockquote><p>sudo apt-get install supervisor<br>/etc/supervisor/conf.d/something.conf<br>[program:celery]<br>command=/home/deploy/.virtualenvs/my_env/bin/celery –app=proj_name worker –loglevel=INFO<br>directory=/home/deploy/webapps/django_project<br>user=user_name<br>autostart=true<br>autorestart=true<br>redirect_stderr=true</p></blockquote><h2 id="刷新一下supervisor任务"><a href="#刷新一下supervisor任务" class="headerlink" title="刷新一下supervisor任务"></a>刷新一下supervisor任务</h2><p>sudo supervisorctl reread<br>sudo supervisorctl update</p><p>##启动celery<br>sudo supervisorctl start celery</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 失败了自动retry</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> shared_task</span><br><span class="line"> </span><br><span class="line"><span class="meta">@shared_task(bind=True, max_retries=3)  # you can determine the max_retries here</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">access_awful_system</span><span class="params">(self, my_obj_id)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> core.models <span class="keyword">import</span> Object</span><br><span class="line">    <span class="keyword">from</span> requests <span class="keyword">import</span> ConnectionError</span><br><span class="line">    o = Object.objects.get(pk=my_obj_id)</span><br><span class="line">    <span class="comment"># If ConnectionError try again in 180 seconds</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"> </span><br><span class="line">        o.access_awful_system()</span><br><span class="line">    <span class="keyword">except</span> ConnectionError <span class="keyword">as</span> exc:</span><br><span class="line">        self.retry(exc=exc, countdown=<span class="number">180</span>)  <span class="comment"># the task goes back to the queue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##重试时间指数型增长也行 </span></span><br><span class="line"><span class="meta">@celery_app.task(max_retries=10)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">notify_gcm_device</span><span class="params">(device_token, message, data=None)</span>:</span></span><br><span class="line">  notification_json = build_gcm_json(message, data=data)</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    gcm.notify_device(device_token, json=notification_json)</span><br><span class="line">  <span class="keyword">except</span> ServiceTemporarilyDownError:</span><br><span class="line">    <span class="comment"># Find the number of attempts so far</span></span><br><span class="line">    num_retries = notify_gcm_device.request.retries</span><br><span class="line">    seconds_to_wait = <span class="number">2.0</span> ** num_retries</span><br><span class="line">    <span class="comment"># First countdown will be 1.0, then 2.0, 4.0, etc.</span></span><br><span class="line">    <span class="keyword">raise</span> notify_gcm_device.retry(countdown=seconds_to_wait)</span><br><span class="line"></span><br><span class="line"><span class="comment">## eta 像crontab一样定期执行任务</span></span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line">now = timezone.now() </span><br><span class="line"> </span><br><span class="line"><span class="comment"># later is one hour from now</span></span><br><span class="line">later = now + timedelta(hours=<span class="number">1</span>)</span><br><span class="line">access_awful_system.apply_async((object_id), eta=later)</span><br></pre></td></tr></table></figure><h2 id="创建多个queue"><a href="#创建多个queue" class="headerlink" title="创建多个queue"></a>创建多个queue</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># CELERY ROUTES</span><br><span class="line">CELERY_ROUTES = &#123;</span><br><span class="line">    &apos;core.tasks.too_long_task&apos;: &#123;&apos;queue&apos;: &apos;too_long_queue&apos;&#125;,</span><br><span class="line">    &apos;core.tasks.quick_task&apos;: &#123;&apos;queue&apos;: &apos;quick_queue&apos;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># For too long queue</span><br><span class="line">celery --app=proj_name worker -Q too_long_queue -c 2</span><br><span class="line"># For quick queue</span><br><span class="line">celery --app=proj_name worker -Q quick_queue -c 2</span><br></pre></td></tr></table></figure><p>可以subclass task，比如自定义缓存什么的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span><span class="params">(celery.Task)</span>:</span></span><br><span class="line">    ignore_result = <span class="keyword">False</span>  <span class="comment"># in case you set it to True globally — you should!</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># This code is only called once per worker.</span></span><br><span class="line">        <span class="comment"># Here you can define members, which will be accessible when the task runs, later on.</span></span><br><span class="line">        self.cache = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, user_id, arg)</span>:</span></span><br><span class="line">        <span class="comment"># Now the task is executing.</span></span><br><span class="line">        <span class="comment"># We have the ‘cache’ at our disposal!</span></span><br><span class="line">        <span class="keyword">return</span> self.normal_operation(user_id, arg)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">normal_operation</span><span class="params">(self, user_id, arg)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> (user_id, arg) <span class="keyword">in</span> self.cache:</span><br><span class="line">             <span class="keyword">return</span> self.cache[(user_id, arg)]</span><br><span class="line">        retval = self.some_value(user_id, arg)</span><br><span class="line">        self.cache[(user_id, arg)] = retval</span><br><span class="line">        <span class="keyword">return</span> retval</span><br></pre></td></tr></table></figure></p><h3 id="references"><a href="#references" class="headerlink" title="references"></a>references</h3><p><a href="http://flower.readthedocs.io/en/latest/">celery有一个监控工具Flower</a><br><a href="https://realpython.com/asynchronous-tasks-with-django-and-celery/">asynchronous-tasks-with-django-and-celery</a><br><a href="https://theblog.workey.co/my-experiences-with-a-long-running-celery-based-microprocess-b2cc30da94f5">my-experiences-with-a-long-running-celery-based-microprocess</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;“There are only two hard things in Computer Science: cache invalidation and naming things.”&lt;br&gt;— Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/Celery_picture.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sqlalchemy速查手册</title>
    <link href="https://haldir65.github.io/2018/07/02/2018-07-02-sqlalchemy-cheetsheet/"/>
    <id>https://haldir65.github.io/2018/07/02/2018-07-02-sqlalchemy-cheetsheet/</id>
    <published>2018-07-02T21:12:31.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>pip install SQLAlchemy</p></blockquote><p><img src="http://www.haldir66.ga/static/imgs/side_walk_tree.jpg" alt=""></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="comment">## 想用sqlite?</span></span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///foo.db'</span>, echo=<span class="keyword">True</span>) <span class="comment">## 会在当前目录下生成一个foo.db文件，这个True表示程序运行的时候会打印出生成的sql语句。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 想用mysql?</span></span><br><span class="line">engine = create_engine(<span class="string">'mysql+mysqlconnector://%s:%s@localhost:3306/%s?charset=utf8'</span> % (config.DB_USER_NAME,config.DB_PASS_WORD,config.DB_NAME)) <span class="comment">## mysql也是支持的</span></span><br><span class="line">这里有一个坑：</span><br><span class="line"><span class="comment">## mysql://username:password@server/db  python3下面不能这么写，虽然flask-sqlalchemy教程上是这么教人的</span></span><br><span class="line"><span class="comment">## mysql+pymysql://username:password@server/db  应该这么写，还有pip install PyMySQL</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## postgresql也是可以的</span></span><br><span class="line">engine = create_engine(<span class="string">"postgresql://scott:tiger@localhost/test"</span>)</span><br></pre></td></tr></table></figure><p>创建db的时候注意,sqlite因为是直接写文件，所以要把db的路径写清楚了。如果贸然写一个’sqlite:///db.sqlite3’，可能会出现no such table<br>config.py文件里面<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">project_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">"sqlite:///&#123;&#125;"</span>.format(os.path.join(project_dir, <span class="string">"backend.db"</span>))</span><br></pre></td></tr></table></figure></p><p>数据库创建了，开始<del>建表</del>设计表<br>其实一般没必要这么搞，直接db.create_all()得了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## create table if not exists</span></span><br><span class="line">engine = create_engine(<span class="string">"sqlite:///myexample.db"</span>)  <span class="comment"># Access the DB Engine</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> engine.dialect.has_table(engine, Variable_tableName):  <span class="comment"># If table don't exist, Create.</span></span><br><span class="line">    metadata = MetaData(engine)</span><br><span class="line">    <span class="comment"># Create a table with the appropriate Columns</span></span><br><span class="line">    <span class="comment">##主键，auto_increment是这么设置的</span></span><br><span class="line">    Table(Variable_tableName, metadata,</span><br><span class="line">          Column(<span class="string">'Id'</span>, Integer, primary_key=<span class="keyword">True</span>, nullable=<span class="keyword">False</span>,autoincrement = <span class="keyword">True</span>),</span><br><span class="line">          Column(<span class="string">'Date'</span>, Date), Column(<span class="string">'Country'</span>, String),</span><br><span class="line">          Column(<span class="string">'Brand'</span>, String), Column(<span class="string">'Price'</span>, Float),</span><br><span class="line">    <span class="comment"># Implement the creation</span></span><br><span class="line">    metadata.create_all()</span><br></pre></td></tr></table></figure></p><p>Flask比较好的地方是可以和SQLAlechemy紧密结合<br>Flask一起用<a href="https://www.thatyou.cn/flask%E4%BD%BF%E7%94%A8flask-sqlalchemy%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2/">代码出处</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, request</span><br><span class="line"><span class="keyword">import</span> configparser</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">my_config = configparser.ConfigParser()</span><br><span class="line">my_config.read(<span class="string">'db.conf'</span>)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_DATABASE_URI'</span>] = <span class="string">'mysql://'</span> + my_config.get(<span class="string">'DB'</span>, <span class="string">'DB_USER'</span>) + <span class="string">':'</span> + my_config.get(<span class="string">'DB'</span>, <span class="string">'DB_PASSWORD'</span>) + <span class="string">'@'</span> + my_config.get(<span class="string">'DB'</span>, <span class="string">'DB_HOST'</span>) + <span class="string">'/'</span> + my_config.get(<span class="string">'DB'</span>, <span class="string">'DB_DB'</span>)</span><br><span class="line">app.config[<span class="string">'SQLALCHEMY_TRACK_MODIFICATIONS'</span>] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">mydb = SQLAlchemy()</span><br><span class="line">mydb.init_app(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(mydb.Model)</span>:</span></span><br><span class="line">    user_id = mydb.Column(mydb.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    user_name = mydb.Column(mydb.String(<span class="number">60</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_password = mydb.Column(mydb.String(<span class="number">30</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_nickname = mydb.Column(mydb.String(<span class="number">50</span>))</span><br><span class="line">    user_email = mydb.Column(mydb.String(<span class="number">30</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % self.user_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户列表</span></span><br><span class="line"><span class="meta">@app.route('/users', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUsers</span><span class="params">()</span>:</span></span><br><span class="line">    data = User.query.all()</span><br><span class="line">    datas = []</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> data:</span><br><span class="line">        datas.append(&#123;<span class="string">'user_id'</span>: user.user_id, <span class="string">'user_name'</span>: user.user_name, <span class="string">'user_nickname'</span>: user.user_nickname, <span class="string">'user_email'</span>: user.user_email&#125;)</span><br><span class="line">    <span class="keyword">return</span> jsonify(data=datas)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加用户数据</span></span><br><span class="line"><span class="meta">@app.route('/user', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addUser</span><span class="params">()</span>:</span></span><br><span class="line">    user_name = request.form.get(<span class="string">'user_name'</span>)</span><br><span class="line">    user_password = request.form.get(<span class="string">'user_password'</span>)</span><br><span class="line">    user_nickname = request.form.get(<span class="string">'user_nickname'</span>)</span><br><span class="line">    user_email = request.form.get(<span class="string">'user_email'</span>)</span><br><span class="line">    user = User(user_name=user_name, user_password=user_password, user_nickname=user_nickname, user_email=user_email)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mydb.session.add(user)</span><br><span class="line">        mydb.session.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        mydb.session.rollback()</span><br><span class="line">        mydb.session.flush()</span><br><span class="line">    userId = user.user_id</span><br><span class="line">    <span class="keyword">if</span> (user.user_id <span class="keyword">is</span> <span class="keyword">None</span>):</span><br><span class="line">        result = &#123;<span class="string">'msg'</span>: <span class="string">'添加失败'</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> jsonify(data=result)</span><br><span class="line"></span><br><span class="line">    data = User.query.filter_by(user_id=userId).first()</span><br><span class="line">    result = &#123;<span class="string">'user_id'</span>: user.user_id, <span class="string">'user_name'</span>: user.user_name, <span class="string">'user_nickname'</span>: user.user_nickname, <span class="string">'user_email'</span>: user.user_email&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(data=result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取单条数据</span></span><br><span class="line"><span class="meta">@app.route('/user/&lt;int:userId&gt;', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUser</span><span class="params">(userId)</span>:</span></span><br><span class="line">    user = User.query.filter_by(user_id=userId).first()</span><br><span class="line">    <span class="keyword">if</span> (user <span class="keyword">is</span> <span class="keyword">None</span>):</span><br><span class="line">        result = &#123;<span class="string">'msg'</span>: <span class="string">'找不到数据'</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = &#123;<span class="string">'user_id'</span>: user.user_id, <span class="string">'user_name'</span>: user.user_name, <span class="string">'user_nickname'</span>: user.user_nickname, <span class="string">'user_email'</span>: user.user_email&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(data=result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户数据</span></span><br><span class="line"><span class="meta">@app.route('/user/&lt;int:userId&gt;', methods=['PATCH'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateUser</span><span class="params">(userId)</span>:</span></span><br><span class="line">    user_name = request.form.get(<span class="string">'user_name'</span>)</span><br><span class="line">    user_password = request.form.get(<span class="string">'user_password'</span>)</span><br><span class="line">    user_nickname = request.form.get(<span class="string">'user_nickname'</span>)</span><br><span class="line">    user_email = request.form.get(<span class="string">'user_email'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        user = User.query.filter_by(user_id=userId).first()</span><br><span class="line">        <span class="keyword">if</span> (user <span class="keyword">is</span> <span class="keyword">None</span>):</span><br><span class="line">            result = &#123;<span class="string">'msg'</span>: <span class="string">'找不到要修改的记录'</span>&#125;</span><br><span class="line">            <span class="keyword">return</span> jsonify(data=result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user.user_name = user_name</span><br><span class="line">            user.user_password = user_password</span><br><span class="line">            user.user_nickname = user_nickname</span><br><span class="line">            user.user_email = user_email</span><br><span class="line">            mydb.session.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        mydb.session.rollback()</span><br><span class="line">        mydb.session.flush()</span><br><span class="line">    userId = user.user_id</span><br><span class="line">    data = User.query.filter_by(user_id=userId).first()</span><br><span class="line">    result = &#123;<span class="string">'user_id'</span>: user.user_id, <span class="string">'user_name'</span>: user.user_name, <span class="string">'user_password'</span>: user.user_password, <span class="string">'user_nickname'</span>: user.user_nickname, <span class="string">'user_email'</span>: user.user_email&#125;</span><br><span class="line">    <span class="keyword">return</span> jsonify(data=result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户数据</span></span><br><span class="line"><span class="meta">@app.route('/user/&lt;int:userId&gt;', methods=['DELETE'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteUser</span><span class="params">(userId)</span>:</span></span><br><span class="line">    User.query.filter_by(user_id=userId).delete()</span><br><span class="line">    mydb.session.commit()</span><br><span class="line">    <span class="keyword">return</span> getUsers()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>sclalchemy的model的tablename默认是会根据model的name生成小写的tablename:</p><blockquote><p>For instance the table name is automatically set for you unless overridden. It’s derived from the class name converted to lowercase and with “CamelCase” converted to “camel_case”. To override the table name, set the <strong>tablename</strong> class attribute.</p></blockquote><p>来看看curd的一些常用的地方,<a href="http://docs.sqlalchemy.org/en/latest/orm/query.html#the-query-object">query Api</a><br><a href="http://flask-sqlalchemy.pocoo.org/2.3/queries/">Flask SQLAlchemy query api</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; peter = User.query.filter_by(username=&apos;peter&apos;).first()</span><br><span class="line">&gt;&gt;&gt; peter.id</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; peter.email</span><br><span class="line">u&apos;peter@example.org&apos;</span><br></pre></td></tr></table></figure><p>sqlalchemy这种orm也是需要加锁的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.InvalidRequestError: When initializing mapper Mapper|Newscate|newscate, expression &apos;News&apos; failed to locate a name (&quot;name &apos;News&apos; is not defined&quot;). If this is a class name, consider adding this relationship() to the &lt;class &apos;category.models.Newscate&apos;&gt; class after both dependent classes have been defined.</span><br></pre></td></tr></table></figure><p><a href="http://flask-sqlalchemy.pocoo.org/2.3/models/">flask-sqlalchemy关于一对多，多对多关系的解释</a><br>抄来的model,一对多关系，一个User可以有多个News，一个Newscategory可以有多个News<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Table, MetaData, Column, Integer, String, ForeignKey</span><br><span class="line"><span class="keyword">from</span> database <span class="keyword">import</span> db <span class="keyword">as</span> mydb</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(mydb.Model)</span>:</span></span><br><span class="line">    __tablename__=<span class="string">"t_user"</span></span><br><span class="line">    user_id = mydb.Column(mydb.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    user_name = mydb.Column(mydb.String(<span class="number">60</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_password = mydb.Column(mydb.String(<span class="number">30</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_nickname = mydb.Column(mydb.String(<span class="number">50</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    user_email = mydb.Column(mydb.String(<span class="number">100</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    newses = mydb.relationship(<span class="string">'News'</span>, backref=<span class="string">'user'</span>, lazy=<span class="keyword">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;User %r&gt;'</span> % self.user_nickname</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Newscate</span><span class="params">(mydb.Model)</span>:</span></span><br><span class="line">    __tablename__=<span class="string">"t_newscat"</span></span><br><span class="line">    cate_id = mydb.Column(mydb.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    cate_name = mydb.Column(mydb.String(<span class="number">50</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    cate_title = mydb.Column(mydb.String(<span class="number">50</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    newses = mydb.relationship(<span class="string">'News'</span>, backref=<span class="string">'newscate'</span>, lazy=<span class="keyword">True</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;Newscate %r&gt;'</span> % self.cate_name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">News</span><span class="params">(mydb.Model)</span>:</span></span><br><span class="line">    __tablename__=<span class="string">"t_news"</span></span><br><span class="line">    news_id = mydb.Column(mydb.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    news_date = mydb.Column(mydb.DateTime, nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_content = mydb.Column(mydb.Text, nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_title = mydb.Column(mydb.String(<span class="number">100</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_excerpt = mydb.Column(mydb.Text, nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_status = mydb.Column(mydb.String(<span class="number">20</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_modified = mydb.Column(mydb.DateTime, nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_category = mydb.Column(mydb.Integer, mydb.ForeignKey(<span class="string">'t_newscat.cate_id'</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    news_author = mydb.Column(mydb.Integer, mydb.ForeignKey(<span class="string">'t_user.user_id'</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;News %r&gt;'</span> % self.news_title</span><br></pre></td></tr></table></figure></p><p>开始建表吧，直接在shell里面搞要快很多<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; python </span><br><span class="line">from app import app ## 这个app是一个Flask实例</span><br><span class="line">from database import db</span><br><span class="line">from models import News,User,Newscate</span><br><span class="line">app.app_context().push() ## 这句话是必须的[context](http://flask-sqlalchemy.pocoo.org/2.3/contexts/)</span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure></p><p>如果只要创建一张表的话可以这么干<br>Model.<strong>table</strong>.create(session.bind)</p><p>来看看生成的sql语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line">        user_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">        user_name <span class="built_in">VARCHAR</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        user_password <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        user_nickname <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        user_email <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        PRIMARY <span class="keyword">KEY</span> (user_id)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_newscat (</span><br><span class="line">        cate_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">        cate_name <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        cate_title <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        PRIMARY <span class="keyword">KEY</span> (cate_id)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_news (</span><br><span class="line">        news_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">        news_date DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_content <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_title <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_excerpt <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_status <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_modified DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_category <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        news_author <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">        PRIMARY <span class="keyword">KEY</span> (news_id),</span><br><span class="line">        FOREIGN <span class="keyword">KEY</span>(news_category) <span class="keyword">REFERENCES</span> t_newscat (cate_id),</span><br><span class="line">        FOREIGN <span class="keyword">KEY</span>(news_author) <span class="keyword">REFERENCES</span> t_user (user_id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>生成表之后，开始插入数据，还是在shell里面，快一点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;  User.query.all() </span><br><span class="line">[] ##数据为空</span><br><span class="line">&gt;&gt;&gt; robin = User(user_name=&quot;Tim&quot;,user_password=&quot;secret&quot;,user_nickname=&quot;tim_nick&quot;,user_email=&quot;lenon@gmail.com&quot;)</span><br><span class="line">&gt;&gt;&gt; robin.user_email</span><br><span class="line">&apos;lenon@gmail.com&apos;</span><br><span class="line">&gt;&gt;&gt; robin.newses ## 注意，db中user并没有newses这个column</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; robin.user_id</span><br><span class="line">&gt;&gt;&gt;   ##什么都没有，因为还没有commit到数据库，那么commit一下</span><br><span class="line">&gt;&gt;&gt; robin.user_id</span><br><span class="line">&gt;&gt;&gt; db.session.add(robin)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br><span class="line">再查找一下</span><br><span class="line">&gt;&gt;&gt; robin.user_id</span><br><span class="line">2018-07-15 10:26:58,358 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)</span><br><span class="line">2018-07-15 10:26:58,358 INFO sqlalchemy.engine.base.Engine SELECT t_user.user_id AS t_user_user_id, t_user.user_name AS t_user_user_name, t_user.user_password AS t_user_user_password, t_user.user_nickname AS t_user_user_nickname, t_user.user_email AS t_user_user_email</span><br><span class="line">FROM t_user</span><br><span class="line">WHERE t_user.user_id = %(param_1)s</span><br><span class="line">2018-07-15 10:26:58,359 INFO sqlalchemy.engine.base.Engine &#123;&apos;param_1&apos;: 1&#125;</span><br><span class="line">&gt;&gt;&gt; 1 ##这回就有了</span><br></pre></td></tr></table></figure><p>因为news依赖两个Foreign key，user和newcate，且都不为空，所以在创建News之前得先创建Newscate<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; breaking_news = Newscate(cate_name=&quot;beaking_news&quot;,cate_title=&quot;breaking News&quot;)</span><br><span class="line">&gt;&gt;&gt; breaking_news</span><br><span class="line">&lt;Newscate &apos;beaking_news&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; breaking_news.cate_title</span><br><span class="line">&apos;breaking News&apos;</span><br><span class="line">&gt;&gt;&gt;db.session.add(breaking_news)</span><br><span class="line">&gt;&gt;&gt;db.session.commit()</span><br><span class="line">&gt;&gt;&gt;breaking_news.cate_id</span><br><span class="line">1 ## 查下数据库，User和Newscate里面都有数据了</span><br><span class="line"></span><br><span class="line"> newsitem = News(news_date=datetime.utcnow(),news_content=&quot;content of news item one&quot;,news_title=&quot;title of news item one&quot;,news_excerpt=&quot;excerpt of news item one&quot;,news_status=&quot;normal&quot;,news_modified=datetime.now(),news_category=2,news_author=1)</span><br><span class="line">&gt;&gt;&gt; newsitem</span><br><span class="line">&lt;News &apos;title of news item one&apos;&gt;</span><br><span class="line">&gt;&gt;&gt; db.session.add(newsitem)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br><span class="line">2018-07-15 10:42:11,134 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)</span><br><span class="line">2018-07-15 10:42:11,135 INFO sqlalchemy.engine.base.Engine INSERT INTO t_news (news_date, news_content, news_title, news_excerpt, news_status, news_modified, news_category, news_author) VALUES (%(news_date)s, %(news_content)s, %(news_title)s, %(news_excerpt)s, %(news_status)s, %(news_modified)s, %(news_category)s, %(news_author)s)</span><br><span class="line">2018-07-15 10:42:11,136 INFO sqlalchemy.engine.base.Engine &#123;&apos;news_date&apos;: datetime.datetime(2018, 7, 15, 2, 41, 50, 454505), &apos;news_content&apos;: &apos;content of news item one&apos;, &apos;news_title&apos;: &apos;title of news item one&apos;, &apos;news_excerpt&apos;: &apos;excerpt of news item one&apos;, &apos;news_status&apos;: &apos;normal&apos;, &apos;news_modified&apos;: datetime.datetime(2018, 7, 15, 10, 41, 50, 454505), &apos;news_category&apos;: 2, &apos;news_author&apos;: 1&#125;</span><br><span class="line">2018-07-15 10:42:11,141 INFO sqlalchemy.engine.base.Engine COMMIT</span><br></pre></td></tr></table></figure></p><p>查下数据库，News也插入成功</p><p>后面开始在gui界面中往数据库里面插入一些数据，准备好假数据之后要db.session.commit()一下才会在sqlalchemy这边同步一下。(session好像也没有什么类似于sync的api)</p><p>开始查询：</p><h3 id="根据一个Newsid去查找这篇news的user"><a href="#根据一个Newsid去查找这篇news的user" class="headerlink" title="根据一个Newsid去查找这篇news的user"></a>根据一个Newsid去查找这篇news的user</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; News.query.all()[0].news_author </span><br><span class="line">1 ##正常啊，这里存储的就是user的id,但是我们想要User，还记得上面建表的时候那个&quot;backref&quot;嘛，写的是backref=&apos;user&apos;</span><br><span class="line">&gt;&gt;&gt; News.query.all()[0].user</span><br><span class="line">&lt;User &apos;tim_nick&apos;&gt;</span><br></pre></td></tr></table></figure><h2 id="查询所有发表过News的User（就是user-newses不为空List）"><a href="#查询所有发表过News的User（就是user-newses不为空List）" class="headerlink" title="查询所有发表过News的User（就是user.newses不为空List）"></a>查询所有发表过News的User（就是user.newses不为空List）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; User.query.filter(func.length(User.newses) &gt; 0).all()</span><br><span class="line">[&lt;User &apos;tim_nick&apos;&gt;, &lt;User &apos;bounty hounter&apos;&gt;, &lt;User &apos;sally williams&apos;&gt;, &lt;User &apos;john doe&apos;&gt;]显然不正确</span><br><span class="line"></span><br><span class="line">这种情况的一般sql语句应该是这么写的</span><br><span class="line">&gt;&gt;&gt;SELECT t_user.user_id AS t_user_user_id, t_user.user_name AS t_user_user_name, t_user.user_password AS t_user_user_password, t_user.user_nickname AS t_user_user_nickname, t_user.user_email AS t_user_user_email FROM t_user, t_news WHERE t_user.user_id = t_news.news_author GROUP BY t_user_user_name;</span><br><span class="line"></span><br><span class="line">所以最终凑合得到这样的查询</span><br><span class="line">&gt;&gt;&gt; User.query.filter(User.newses).all()</span><br><span class="line">2018-07-15 11:09:17,584 INFO sqlalchemy.engine.base.Engine SELECT t_user.user_id AS t_user_user_id, t_user.user_name AS t_user_user_name, t_user.user_password AS t_user_user_password, t_user.user_nickname AS t_user_user_nickname, t_user.user_email AS t_user_user_email</span><br><span class="line">FROM t_user, t_news</span><br><span class="line">WHERE t_user.user_id = t_news.news_author</span><br><span class="line">2018-07-15 11:09:17,585 INFO sqlalchemy.engine.base.Engine &#123;&#125;</span><br><span class="line">[&lt;User &apos;tim_nick&apos;&gt;]</span><br></pre></td></tr></table></figure><h2 id="查询一个user发布过的所有news"><a href="#查询一个user发布过的所有news" class="headerlink" title="查询一个user发布过的所有news"></a>查询一个user发布过的所有news</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; News.query.filter(News.news_author==1).all()</span><br><span class="line">2018-07-15 11:29:42,306 INFO sqlalchemy.engine.base.Engine SELECT t_news.news_id AS t_news_news_id, t_news.news_date AS t_news_news_date, t_news.news_content AS t_news_news_content, t_news.news_title AS t_news_news_title, t_news.news_excerpt AS t_news_news_excerpt, t_news.news_status AS t_news_news_status, t_news.news_modified AS t_news_news_modified, t_news.news_category AS t_news_news_category, t_news.news_author AS t_news_news_author</span><br><span class="line">FROM t_news</span><br><span class="line">WHERE t_news.news_author = %(news_author_1)s</span><br><span class="line">2018-07-15 11:29:42,306 INFO sqlalchemy.engine.base.Engine &#123;&apos;news_author_1&apos;: 1&#125;</span><br><span class="line">[&lt;News &apos;title of news item one&apos;&gt;, &lt;News &apos;title of news item two&apos;&gt;]</span><br></pre></td></tr></table></figure><h3 id="到这里一共有三张表，那么join这种联表查询也是ok的"><a href="#到这里一共有三张表，那么join这种联表查询也是ok的" class="headerlink" title="到这里一共有三张表，那么join这种联表查询也是ok的"></a>到这里一共有三张表，那么join这种联表查询也是ok的</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; result = db.session.query(News.news_id, News.news_author, News.news_date, News.news_title, News.news_content, News.news_excerpt, News.news_status, News.news_modified, Newscate.cate_name, Newscate.cate_title, User.user_name, User.user_nickname).filter_by(news_id=1).join(Newscate, News.news_category == Newscate.cate_id).join(User, News.news_author == User.user_id).first()</span><br><span class="line">2018-07-15 14:08:27,487 INFO sqlalchemy.engine.base.Engine SELECT t_news.news_id AS t_news_news_id, t_news.news_author AS t_news_news_author, t_news.news_date AS t_news_news_date, t_news.news_title AS t_news_news_title, t_news.news_content AS t_news_news_content, t_news.news_excerpt AS t_news_news_excerpt, t_news.news_status AS t_news_news_status, t_news.news_modified AS t_news_news_modified, t_newscat.cate_name AS t_newscat_cate_name, t_newscat.cate_title AS t_newscat_cate_title, t_user.user_name AS t_user_user_name, t_user.user_nickname AS t_user_user_nickname</span><br><span class="line">FROM t_news INNER JOIN t_newscat ON t_news.news_category = t_newscat.cate_id INNER JOIN t_user ON t_news.news_author = t_user.user_id</span><br><span class="line">WHERE t_news.news_id = %(news_id_1)s</span><br><span class="line"> LIMIT %(param_1)s</span><br><span class="line">2018-07-15 14:08:27,487 INFO sqlalchemy.engine.base.Engine &#123;&apos;news_id_1&apos;: 1, &apos;param_1&apos;: 1&#125;</span><br><span class="line">(1, 1, datetime.datetime(2018, 7, 15, 2, 41, 50), &apos;title of news item one&apos;, &apos;content of news item one&apos;, &apos;excerpt of news item one&apos;, &apos;normal&apos;, datetime.datetime(2018, 7, 15, 10, 41, 50), &apos;economy&apos;, &apos;economy title&apos;, &apos;Tim&apos;, &apos;tim_nick&apos;)</span><br><span class="line">这里得到的是一个&lt;class &apos;sqlalchemy.util._collections.result&apos;&gt;对象</span><br><span class="line">&gt;&gt;&gt; result.cate_name ## 可以这么访问数据</span><br><span class="line">&apos;economy&apos;</span><br></pre></td></tr></table></figure><p>###查找所有用gmail注册的用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;gmail&quot;)).all()</span><br><span class="line">2018-07-15 13:50:56,237 INFO sqlalchemy.engine.base.Engine SELECT t_user.user_name AS t_user_user_name</span><br><span class="line">FROM t_user</span><br><span class="line">WHERE t_user.user_email LIKE %(user_email_1)s</span><br><span class="line">2018-07-15 13:50:56,239 INFO sqlalchemy.engine.base.Engine &#123;&apos;user_email_1&apos;: &apos;gmail&apos;&#125;</span><br><span class="line">[] ##显然有问题</span><br><span class="line"></span><br><span class="line">数据库里执行这句sql就能正确的找出gmail邮箱的user</span><br><span class="line">&gt;&gt;&gt; SELECT t_user.user_name AS t_user_user_name FROM t_user WHERE t_user.user_email LIKE &apos;%gmail%&apos;</span><br><span class="line">于是改成</span><br><span class="line">&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;%gmail%&quot;)).all()</span><br><span class="line">2018-07-15 13:54:08,541 INFO sqlalchemy.engine.base.Engine SELECT t_user.user_name AS t_user_user_name</span><br><span class="line">FROM t_user</span><br><span class="line">WHERE t_user.user_email LIKE %(user_email_1)s</span><br><span class="line">2018-07-15 13:54:08,542 INFO sqlalchemy.engine.base.Engine &#123;&apos;user_email_1&apos;: &apos;%gmail%&apos;&#125;</span><br><span class="line">[(&apos;Tim&apos;,), (&apos;Django&apos;,), (&apos;Sally&apos;,), (&apos;john&apos;,)]</span><br><span class="line"></span><br><span class="line">### 分页接口，limit,count这种怎么写？</span><br><span class="line">用标准的limit,count似乎并不困难</span><br><span class="line">&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;%gmail%&quot;)).limit(1).all()</span><br><span class="line">[(&apos;Tim&apos;,)]</span><br><span class="line">&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;%gmail%&quot;)).limit(1).offset(2).all()</span><br><span class="line">[(&apos;Sally&apos;,)]</span><br><span class="line">offset超出了实际数据的总量如何？</span><br><span class="line">&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;%gmail%&quot;)).limit(1).offset(10).all()</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">除了标准的limit方法以外，下面这个paginate方法返回了一个pagination object</span><br><span class="line">&gt;&gt;&gt; db.session.query(User.user_name).filter(User.user_email.like(&quot;%gmail%&quot;)).paginate(2,1,False).items</span><br></pre></td></tr></table></figure></p><p><a href="https://www.jianshu.com/p/7d1b6db64a8f">MYSQL分页limit速度太慢优化方法</a></p><h2 id="Many-to-many-relationship"><a href="#Many-to-many-relationship" class="headerlink" title="Many to many relationship"></a>Many to many relationship</h2><p>添加新的model的时候，旧的model import会报错<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"nodes"</span></span><br><span class="line">    __table_args__ = &#123;<span class="string">"useexisting"</span>: <span class="keyword">True</span>&#125; <span class="comment">## 关键是这个</span></span><br></pre></td></tr></table></figure></p><p>这样db.create_all()的时候也不会去动现有的表里面的数据</p><p><a href="https://stackoverflow.com/questions/25668092/flask-sqlalchemy-many-to-many-insert-data">many-to-many-relationship依赖于第三张表</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">association_table = db.Table(<span class="string">'association'</span>, db.Model.metadata,</span><br><span class="line">    db.Column(<span class="string">'left_id'</span>, db.Integer, db.ForeignKey(<span class="string">'left.id'</span>)),</span><br><span class="line">    db.Column(<span class="string">'right_id'</span>, db.Integer, db.ForeignKey(<span class="string">'right.id'</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'left'</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    children = db.relationship(<span class="string">"Child"</span>,</span><br><span class="line">                    secondary=association_table)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'right'</span></span><br><span class="line">    id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加数据</span></span><br><span class="line">p = Parent()</span><br><span class="line">c = Child()</span><br><span class="line">p.children.append(c)</span><br><span class="line">db.session.add(p)</span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student_identifier = db.Table(<span class="string">'student_identifier'</span>,</span><br><span class="line">    db.Column(<span class="string">'class_id'</span>, db.Integer, db.ForeignKey(<span class="string">'classes.class_id'</span>)),</span><br><span class="line">    db.Column(<span class="string">'user_id'</span>, db.Integer, db.ForeignKey(<span class="string">'students.user_id'</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'students'</span></span><br><span class="line">    user_id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    user_fistName = db.Column(db.String(<span class="number">64</span>))</span><br><span class="line">    user_lastName = db.Column(db.String(<span class="number">64</span>))</span><br><span class="line">    user_email = db.Column(db.String(<span class="number">128</span>), unique=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class</span><span class="params">(db.Model)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'classes'</span></span><br><span class="line">    class_id = db.Column(db.Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    class_name = db.Column(db.String(<span class="number">128</span>), unique=<span class="keyword">True</span>)</span><br><span class="line">    children = db.relationship(<span class="string">"Student"</span>,</span><br><span class="line">                    secondary=student_identifier)</span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line">c = Class()</span><br><span class="line">c.children.append(s)</span><br><span class="line">db.session.add(c)</span><br><span class="line">db.session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查询数据</span></span><br><span class="line">db.session.query(Class).all()[<span class="number">0</span>].children <span class="comment">##得到一个Student的list</span></span><br><span class="line">Class.query.with_parent(user_id) <span class="comment">## 获得一个student上的所有课程</span></span><br></pre></td></tr></table></figure></p><p>有时候用db.session.query去查，有时候用Model.query去查</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://docs.sqlalchemy.org/en/latest/orm/tutorial.html">tutorials</a><br><a href="http://docs.sqlalchemy.org/en/latest/orm/query.html">queryapi</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;pip install SQLAlchemy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/side_walk_tree.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django学习记录</title>
    <link href="https://haldir65.github.io/2018/06/12/2018-06-12-django-the-pony/"/>
    <id>https://haldir65.github.io/2018/06/12/2018-06-12-django-the-pony/</id>
    <published>2018-06-12T22:40:01.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.haldir66.ga/static/imgs/djangopony-slide.png" alt=""></p><a id="more"></a><p>首先是几个常用命令<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --no-site-packages venv <span class="comment">## virtualenv好习惯</span></span><br><span class="line">source venv/bin/activate <span class="comment">## windows下应该是Scripts/activate.bat这个文件</span></span><br><span class="line">deactivate <span class="comment">## 退出</span></span><br><span class="line"></span><br><span class="line">python manage.py mkemigrations app1 app2</span><br><span class="line">python manage.py migrate</span><br><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line">django-admin startproject  mysite <span class="comment">## 创建项目</span></span><br><span class="line">django-admin startapp  app1 <span class="comment">## 创建app</span></span><br><span class="line"></span><br><span class="line">python manage.py runserver <span class="comment">## 本地运行，默认8000端口</span></span><br><span class="line">python manage.py runserver <span class="number">8080</span>  <span class="comment">## 端口也可以自己决定</span></span><br><span class="line"></span><br><span class="line">python manage.py migrate <span class="comment">##创建了新的model，数据库需要建表</span></span><br><span class="line">python manage.py createsuperuser <span class="comment">## 创建admin</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是，runserver命令多数情况下能够实现自动reload，比如修改了一个py文件。但如果是创建了一个新的文件，还是需要重新跑一遍的</p><blockquote><p>settings.py中的SECRET_KEY不应该对外公布</p></blockquote><p>models简化了建表操作，添加的<strong>str</strong>方法类似于将Object类型的数据展示为String的方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure></p><p>官方tutorial中的url和view的匹配也很简单<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s."</span> % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    response = <span class="string">"You're looking at the results of question %s."</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ex: /polls/</span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/results/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line">    <span class="comment"># ex: /polls/5/vote/</span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>安装mysql:<br>首先是virtualenv<br>pip install mysql-connector-python  mysql-connector-python</p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-applications-using-uwsgi-web-server-with-nginx">在ununtu上使用uwsgi和nginx运行django application</a></p><p>uwsgi.conf文件里面需要注意的有这么一条<br>[uwsgi]<br>module = somefile:app ## 当前目录下有一个somefile.py文件，里面有一个app = Flask(<strong>name</strong>)</p><p>requirements.txt的生成和使用<br>当然都要在virtualenv中了</p><blockquote><p>(venv) $ pip freeze &gt; requirements.txt # 创建<br>(venv) $ pip install -r requirements.txt ##使用</p></blockquote><h3 id="127-0-0-1和0-0-0-0的区别"><a href="#127-0-0-1和0-0-0-0的区别" class="headerlink" title="127.0.0.1和0.0.0.0的区别"></a>127.0.0.1和0.0.0.0的区别</h3><p>我尝试在vps(216.216.216.216)上运行django应用</p><blockquote><p>python manage.py 17289 ##随便挑一个端口<br>curl localhost:17289 ## 网页的html response展示出来</p></blockquote><p>于是尝试在本地windows上浏览器中输入</p><blockquote><p>216.216.216.216:17289 </p></blockquote><p>没反应，使用postman，没效果。本地curl，curl –trace 依旧没效果。看下防火墙<br>sudo uwf status  # inactive<br>最终找到了<a href="https://stackoverflow.com/questions/47675934/running-django-server-on-localhost">running-django-server-on-localhost</a></p><p>其实只要改用0.0.0.0就可以了</p><blockquote><p>python manage.py runserver 0.0.0.0:8000<br>python manage.py runserver HERE.IS.MY.IP:8000 #或者使用实际的地址</p></blockquote><p><a href="https://serverfault.com/questions/78048/whats-the-difference-between-ip-address-0-0-0-0-and-127-0-0-1">whats-the-difference-between-ip-address-0-0-0-0-and-127-0-0-1</a></p><blockquote><p>In simple terms: Listening on 0.0.0.0 means listening from anywhere that has network access to this computer, for example, from this very computer, from local network or from the Internet, while listening on 127.0.0.1 means only listen from this very computer</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br><span class="line">python manage.py plus_shell</span><br></pre></td></tr></table></figure><p><a href="http://www.django-rest-framework.org/">drf官方文档</a></p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-python-wsgi-applications-using-uwsgi-web-server-with-nginx">在ubuntu服务器上搭配nginx部署django应用</a><br>创建一个myconf.ini文件</p><blockquote><p>uwsgi –ini myconf.ini</p></blockquote><p><img src="http://www.haldir66.ga/static/imgs/food-salad-instagram-hunger-city-life.jpg" alt=""></p><p>还有，多数时候会热更新，但比如我更改了PaginationClass，还是得重新runserver才能获得理想的结果</p><p><a href="https://stackoverflow.com/questions/23153040/django-rest-framework-create-objects-passed-as-a-list-attribute-of-nested-obje">目前DRF不支持通过一个Post请求创建一个list of nested objects</a></p><p>自定义接口返回格式<br>ListCreateAPIView中override create方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> serializer.is_valid(raise_exception=<span class="keyword">False</span>):</span><br><span class="line">            <span class="keyword">return</span> Response(&#123;<span class="string">"Fail"</span>: <span class="string">"blablal"</span>, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">        self.perform_create(serializer)</span><br><span class="line">        headers = self.get_success_headers(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">"Success"</span>: <span class="string">"msb blablabla"</span>&#125;, status=status.HTTP_201_CREATED, headers=headers)</span><br></pre></td></tr></table></figure></p><p>post和get请求都变得非常轻松<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountryView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        snippets = County.objects.all()</span><br><span class="line">        serializer = CountySimpleSerilizer(snippets, many=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        serializer = CountySimpleSerilizer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> responses.JsonResponse(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> responses.JsonResponse(data=&#123;<span class="string">"name"</span>,<span class="string">"bad post request"</span>&#125;, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure></p><blockquote><p>python manage.py dbshell ##用于在命令行中直接查看数据库<br>.help 查看在这个shell中可以用的一些操作<br>.tables  查看当前创建的所有的表 这个不要加分号<br>DROP TABLE appname_model; 删表 这个要加分号</p></blockquote><p>注意，删了表之后，还得把对应的migrations中的文件删掉，否则migrate无效</p><p>pk其实就是primary_key的意思<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object.objects.get(id=<span class="number">1</span>)</span><br><span class="line">Object.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 看清楚了，是两个下划线</span></span><br><span class="line">User.objects.filter(pk__in=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">User.objects.filter(pk__gt=<span class="number">10</span>)  </span><br><span class="line">User.objects.filter(pk__lt=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p><p><a href="http://www.django-rest-framework.org/api-guide/relations/">nested relations</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;detail&quot;: &quot;Method \&quot;GET\&quot; not allowed.&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随便继承一个APIView，只写了post方法，使用GET方法就会得到这个response</p><p>urlPatterns的一些东西<br><a href="https://stackoverflow.com/questions/3675368/django-url-pattern-for-20">如果url中有空格的话就直接换成%20</a><br>urls.py里面写的主要是一堆正则表达式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^profiles/(?P&lt;username&gt;[\w\ ]+)/?$'</span>, ProfileRetrieveAPIView.as_view()),</span><br><span class="line">    url(<span class="string">r'^profiles/(?P&lt;username&gt;\w+)/follow/?$'</span>, </span><br><span class="line">        ProfileFollowAPIView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>第一行的意思是访问 /profiles/你想要查找的userName 这个链接就会交给后面这个View</p><p>lookup_field和lookup_url_kwarg都是定义在GenericApiView这个Class上的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericAPIView</span><span class="params">(views.APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Base class for all other generic views.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = <span class="keyword">None</span></span><br><span class="line">    serializer_class = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># If you want to use object lookups other than pk, set 'lookup_field'.</span></span><br><span class="line">    <span class="comment"># For more complex lookup requirements override `get_object()`.</span></span><br><span class="line">    lookup_field = <span class="string">'pk'</span></span><br><span class="line">    lookup_url_kwarg = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The filter backend classes to use for queryset filtering</span></span><br><span class="line">    filter_backends = api_settings.DEFAULT_FILTER_BACKENDS</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The style to use for queryset pagination.</span></span><br><span class="line">    pagination_class = api_settings.DEFAULT_PAGINATION_CLASS</span><br></pre></td></tr></table></figure></p><p>rest-framework的文档是这么说的</p><blockquote><p>lookup_field - The model field that should be used to for performing object lookup of individual model instances. Defaults to ‘pk’. Note that when using hyperlinked APIs you’ll need to ensure that both the API views and the serializer classes set the lookup fields if you need to use a custom value.<br>lookup_url_kwarg - The URL keyword argument that should be used for object lookup. The URL conf should include a keyword argument corresponding to this value. If unset this defaults to using the same value as lookup_field</p></blockquote><p>简言之，就是lookup_field就是把url里面传进来的参数当做model的什么field来查，比如model是Customer，primarykey是customername，默认的lookup_field就是这个主键。客户端的url需要传上来一个customername，然后就会根据这个customername去Customer.objects.filter(customername=”xxx”)去找。如果定义lookup_field为customer_age，就会把客户端传上来的参数当做一个customer_age去查找,Customer.objects.filter(customer_age=”xxx”)</p><p>关于这个继承关系，CreateAPIView，ListAPIView，RetrieveAPIView，DestroyAPIView这些全都是继承了GenericAPIView，并各自继承了mixin，扩展出post,get,post,delete等方法。</p><p>mixins.ListModelMixin，定义了一个list方法，返回一个queryset列表，对应GET方法<br>mixins.CreateModelMixin，定义了一个create方法，创建一个实例，对应POST请求<br>mixins.RetrieveModelMixin，定义了一个retrieve方法，对应GET请求<br>mixins.UpdateModelMixin，定义一个update方法，对应PUT/PATCH请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##在models的Filed中定义一个</span></span><br><span class="line">createdAt = serializers.SerializerMethodField(method_name=<span class="string">'get_created_at'</span>) <span class="comment">##意味着这个field要调用一个自定义的方法去获取</span></span><br><span class="line">updatedAt = serializers.SerializerMethodField(method_name=<span class="string">'get_updated_at'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##filed还有一个source的概念: The name of the attribute that will be used to populate the field.  默认是这个field的name，比如可以定义为model的一个方法，也可以定义为一个model的field</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##serializer里面可以自定义model中不存在的field</span></span><br><span class="line">customField = RelatedField(many=<span class="keyword">True</span>, required=<span class="keyword">False</span>, source=<span class="string">'tags'</span>) <span class="comment">## 这个tags是存在的，customField是不存在这个model中的</span></span><br><span class="line"><span class="comment">##这样做就很有意思了，因为从数据库里查出来的object可能就那么点信息，客户端希望后台在response中添加一些原本不存在于数据库model中的信息。就可以在某个已有变量的基础上扩展新的response 数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 这里的insatnce是Serializer的model的实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_created_at</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> instance.created_at.isoformat()</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/13471083/how-to-extend-model-on-serializer-level-with-django-rest-framework">在serializer层面为model添加field</a>。这里面要注意field还有read-only和write-only等区别<br>关于slugFiled</p><blockquote><p>from django.utils.text import<br>Well, if we give a string like ‘The new article title’ to slugify(), it returns ‘the-new-article-title’. Simple.</p></blockquote><p>slugField主要是为了让url好看点</p><blockquote><p>Slugs are created mostly for the purpose of creating a nice, clean URL.<br>Say for example, you have a site of user-generated posts, such as stackoverflow or quora.<br>A user starts a post that has a title.<br>Each post creates a separate web page based on the title.<br>Now if a user asks the question, “How do you slugify text in Python”<br>If a URL is created for this question, as is, with the spaces in them, the browser will insert %20 in place of each space. Therefore, the URL will be, How%20do%20you%20slugify%20text%20in%20Python<br>This will work, but it looks extremely ugly and isn’t very human readable.<br>So instead of having spaces in a URL, a slugified text is created that contains no spaces. Instead of spaces there are “-“ instead. Therefore, the URL will be, How-do-you-slugify-text-in-Python<br>This looks much cleaner and is much more human readable.</p></blockquote><p>drf 的authorization默认需要是这样的:</p><blockquote><p>Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b<br>Note: If you want to use a different keyword in the header, such as Bearer, simply subclass TokenAuthentication and set the keyword class variable.<br>If successfully authenticated, TokenAuthentication provides the following credentials.<br>request.user will be a Django User instance.<br>request.auth will be a rest_framework.authtoken.models.Token instance.</p></blockquote><p>jwt的logout或者踢人怎么做<br><a href="https://stackoverflow.com/questions/40604877/how-to-delete-a-django-jwt-token">首先Token是放在内存里而不是db里的，另外要踢人的话，手动给这个user生成一个新的token</a><br>搞清楚，踢人是服务器这边做(创建个新的Token或者让原有Token无效)，logout是客户端那边做(删除客户端本地存储的Token)。<br>在html里面删掉Token可以这么干<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.cookie = <span class="string">"token=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/"</span>;</span></span><br><span class="line"><span class="javascript">location.href=<span class="string">"/accounts/auth/"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>对，就是简单的把token置空就行了</p><p>代码里认证的地方取的Header是WWW-Authenticate XXX，但客户端传的是Authorization。估计这是wsgi协议<a href="http://wsgi.readthedocs.io/en/latest/specifications/simple_authentication.html">文档在这里</a>相关的，记得Nginx好像也有这样的设定。<br>WWW-Authenticate: Token</p><p>从<a href="https://docs.djangoproject.com/en/2.0/topics/http/urls/">django urlconf中抄来这些代码</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/'</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/'</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">'articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/'</span>, views.article_detail),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">##底下这个和上面的差不多，底下用的是re_path，使用正则，年份只能四位，传给view的参数类型始终是str。还是有点小区别</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'articles/2003/'</span>, views.special_case_2003),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.year_archive),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$'</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">r'^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[\w-]+)/$'</span>, views.article_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>关于performance的issue，参考<a href="http://ses4j.github.io/2015/11/23/optimizing-slow-django-rest-framework-performance/">这里</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="comment"># This can kill performance!</span></span><br><span class="line">    order_descriptions = serializers.StringRelatedField(many=<span class="keyword">True</span>) </span><br><span class="line">    <span class="comment"># So can this, same exact problem...</span></span><br><span class="line">    orders = OrderSerializer(many=<span class="keyword">True</span>, read_only=<span class="keyword">True</span>) <span class="comment"># This can kill performance!</span></span><br></pre></td></tr></table></figure></p><blockquote><p>The code inside DRF that populates either CustomerSerializer does this:<br>Fetch all customers. (Requires a round-trip to the database.)<br>For the first returned customer, fetch their orders. (Requires another round-trip to the database.)<br>For the second returned customer, fetch its orders. (Requires another round-trip to the database.)<br>For the third returned customer, fetch its orders. (Requires another round-trip to the database.)<br>For the fourth returned customer, fetch its orders. (Requires another round-trip to the database.)<br>For the fifth returned customer, fetch its orders. (Requires another round-trip to the database.)<br>For the sixth returned customer, fetch its orders. (Requires another round-trip to the database.)<br>… you get the idea. Lets hope you don’t have too many customers!</p></blockquote><p>所以要是有50个customer，就要执行50次查询，加上第一次获取所有Customer的数据库query。</p><p>优化后的代码只需要走2次数据库<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queryset = queryset.prefetch_related(<span class="string">'orders'</span>) <span class="comment">##干两件事，一个是获取所有user，一个是获取这些user的orer集合，一共就两次sql执行</span></span><br></pre></td></tr></table></figure></p><p>其实这些东西在<a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.query.QuerySet.select_related">Django official document</a>里面都提到过。</p><p>另外的优化就是用redis了,比如说<a href="https://realpython.com/caching-in-django-with-redis/">Caching in Django With Redis</a></p><blockquote><p>pip install django-redis </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django_redis.cache.RedisCache'</span>,</span><br><span class="line">        <span class="string">'LOCATION'</span>: <span class="string">'127.0.0.1:6379'</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## python manage.py shell 开一个shell，记得先把redis的server跑起来</span></span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache <span class="comment">#引入缓存模块</span></span><br><span class="line">cache.set(<span class="string">'k'</span>, <span class="string">'12314'</span>, <span class="number">30</span>*<span class="number">60</span>)      <span class="comment">#写入key为k，值为12314的缓存，有效期30分钟</span></span><br><span class="line">cache.has_key(<span class="string">'k'</span>) <span class="comment">#判断key为k是否存在</span></span><br><span class="line">cache.get(<span class="string">'k'</span>)     <span class="comment">#获取key为k的缓存</span></span><br></pre></td></tr></table></figure><p>一切OK的话说明可以用了</p><p>view.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> .serializers <span class="keyword">import</span> CourseSerializer</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Course</span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data_from_db</span><span class="params">(criteria_name)</span>:</span></span><br><span class="line">    course = Course.objects.get(criteria=criteria_name)</span><br><span class="line">    <span class="keyword">return</span> course</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_readed_cache</span><span class="params">(criteria_name)</span>:</span></span><br><span class="line">    <span class="comment">#判断键是否存在</span></span><br><span class="line">    key = <span class="string">'_key_course_query_criteria_'</span>+criteria_name</span><br><span class="line">    <span class="keyword">if</span> cache.has_key(key):</span><br><span class="line">        data = cache.get(key)</span><br><span class="line">        print(<span class="string">'cache hit'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#不存在，则获取数据，并写入缓存</span></span><br><span class="line">        data = get_data_from_db(criteria_name)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">#写入缓存</span></span><br><span class="line">        cache.set(key, data, <span class="number">3600</span>-int(time.time() % <span class="number">3600</span>))</span><br><span class="line">        print(<span class="string">'sorry , no cache'</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseApiView</span><span class="params">(APIView)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request,format=None)</span>:</span></span><br><span class="line">        serializer = CourseSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data,status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(data=&#123;<span class="string">"msg"</span>:<span class="string">"invalid data"</span>&#125;,status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        critia = request.query_params.get(<span class="string">'criteria'</span>,<span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> critia:</span><br><span class="line">            cached_data = get_readed_cache(critia)</span><br><span class="line">            course = cached_data</span><br><span class="line">            <span class="keyword">if</span> course:</span><br><span class="line">                serializer = CourseSerializer(course)</span><br><span class="line">                <span class="keyword">return</span> Response(serializer.data,status=status.HTTP_200_OK)    </span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">"not found"</span>,status=status.HTTP_404_NOT_FOUND)</span><br></pre></td></tr></table></figure></p><p><a href="https://books.agiliq.com/projects/django-admin-cookbook/en/latest/change_text.html">drf默认的admin pannel可以自定义样式和功能</a><br><a href="https://simpleisbetterthancomplex.com/tutorial/2016/08/01/how-to-upload-files-with-django.html">这人的博客不错</a></p><p><a href="https://stackoverflow.com/questions/42080864/set-in-django-for-a-queryset">querySet里面有一个_set</a><br>在moderl中没有声明related_name的情况下，需要通过_set来反向查找model</p><blockquote><p>For example, if Product had a many-to-many relationship with User, named purchase, you might want to write a view like this:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PurchasedProductsList</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Return a list of all the products that the authenticated</span></span><br><span class="line"><span class="string">    user has ever purchased, with optional filtering.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    model = Product</span><br><span class="line">    serializer_class = ProductSerializer</span><br><span class="line">    filter_class = ProductFilter</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        user = self.request.user</span><br><span class="line">        <span class="keyword">return</span> user.purchase_set.all()</span><br></pre></td></tr></table></figure><p>filter_backend是定义在GenericAPIView中的，所以要使用这个属性得用GenericAPIView</p><p><a href="http://www.django-rest-framework.org/api-guide/relations/">nested relations</a></p><p>json web token authentication</p><blockquote><p>pip install djangorestframework-jwt</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##settings.py</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="comment"># 'rest_framework.authentication.TokenAuthentication',</span></span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,  <span class="comment"># 加入此行</span></span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## urls.py</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">true...</span><br><span class="line">    <span class="comment"># url(r'api-auth-token/', authtoken_views.obtain_auth_token),  # drf自带的token认证</span></span><br><span class="line">    url(<span class="string">r'login/'</span>, jwt_authtoken_views.obtain_jwt_token),       <span class="comment"># 加此行，jwt认证</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后通过post请求127.0.0.1/login/,body中添加username和password<br>得到这样的response<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"token"</span>: <span class="string">"someweirdwords---------"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下次请求的时候带上这个Header就好了<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"Authorization": "JWT someweirdwords---------"</span><br></pre></td></tr></table></figure></p><p>通过manage.py创建user的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user@host&gt; manage.py shell</span><br><span class="line">&gt;&gt;&gt; from django.contrib.auth.models import User</span><br><span class="line">&gt;&gt;&gt; user=User.objects.create_user(&apos;John&apos;, password=&apos;password123&apos;)</span><br><span class="line">&gt;&gt;&gt; user.is_superuser=False</span><br><span class="line">&gt;&gt;&gt; user.is_staff=False</span><br><span class="line">&gt;&gt;&gt; user.save()</span><br></pre></td></tr></table></figure></p><p>用jwt去请求需要authentication的接口时，header里面得带上一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Token 登录.接口.返回的token</span><br></pre></td></tr></table></figure></p><p>注意Token这个单词后面有一个空格</p><p><a href="https://realpython.com/caching-in-django-with-redis/">caching django with redis</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/djangopony-slide.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
      <category term="django" scheme="https://haldir65.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>网络通信手册-2</title>
    <link href="https://haldir65.github.io/2018/04/26/2018-04-26-network-manual-2/"/>
    <id>https://haldir65.github.io/2018/04/26/2018-04-26-network-manual-2/</id>
    <published>2018-04-26T13:00:02.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p>OkHttp通过ConnectionPool做到tcp连接复用（在Timeout内）,所以并不是每个http都去建立一个tcp连接<br>自定义通讯协议，使用java socket实现客户端和服务端。需要注意的是分包问题和黏包问题<br><img src="http://www.haldir66.ga/static/imgs/jpglight-and-shadow-2411321_960_720.jpg" alt=""><br><a id="more"></a></p><h2 id="1-http请求中tcp连接的复用-深入okHttp-3-9-1的connectionPool以及引用计数"><a href="#1-http请求中tcp连接的复用-深入okHttp-3-9-1的connectionPool以及引用计数" class="headerlink" title="1. http请求中tcp连接的复用(深入okHttp 3.9.1的connectionPool以及引用计数)"></a>1. http请求中tcp连接的复用(深入okHttp 3.9.1的connectionPool以及引用计数)</h2><p>在高并发的请求连接情况下或者同个客户端多次频繁的请求操作，无限制的创建连接会导致性能低下。所以OkHttp做到了对socket的复用和及时清理。<br>从第四个intercepter开始<br>ConnectInterceptor.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">  Request request = realChain.request();</span><br><span class="line">  <span class="comment">// 第一步，获取streamAllocation</span></span><br><span class="line">  StreamAllocation streamAllocation = realChain.streamAllocation();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We need the network to satisfy this request. Possibly for validating a conditional GET.</span></span><br><span class="line">  <span class="keyword">boolean</span> doExtensiveHealthChecks = !request.method().equals(<span class="string">"GET"</span>);</span><br><span class="line">  <span class="comment">// 第二步，使用streamAllocation创建(或者复用)一个httpCodec模型（即处理header和body的读写策略，具体实现包括Http1Codec和Http2Codec）</span></span><br><span class="line">  HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);</span><br><span class="line">  <span class="comment">// 第三部，挑选出RealConnection,streamAllocation对象中的mConnection变量是在第二步里面赋值的</span></span><br><span class="line">  RealConnection connection = streamAllocation.connection();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> realChain.proceed(request, streamAllocation, httpCodec, connection);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以socket连接复用就在这句话里面了</p><blockquote><p>HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);</p></blockquote><p>StreamAllocation.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> HttpCodec <span class="title">newStream</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    OkHttpClient client, Interceptor.Chain chain, <span class="keyword">boolean</span> doExtensiveHealthChecks)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 省略部分，主要是这两句话</span></span><br><span class="line">      RealConnection resultConnection = findHealthyConnection(connectTimeout, readTimeout,</span><br><span class="line">               writeTimeout, connectionRetryEnabled, doExtensiveHealthChecks);</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      HttpCodec resultCodec = resultConnection.newCodec(client, chain, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>findHealthyConnection最终走到这里<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Attempt to get a connection from the pool.</span></span><br><span class="line"><span class="keyword">for</span> (RealConnection connection : connections) &#123;</span><br><span class="line">    <span class="keyword">if</span> (connection.isEligible(address, route)) &#123;</span><br><span class="line">      streamAllocation.acquire(connection, <span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否isEligible的方法在RealConnection里面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// If the non-host fields of the address don't overlap, we're done.</span></span><br><span class="line"> <span class="keyword">if</span> (!Internal.instance.equalsNonHost(<span class="keyword">this</span>.route.address(), address)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 只要DNS,port,protocols等host无关的参数中有一个不同就不能复用</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// If the host exactly matches, we're done: this connection can carry the address.</span></span><br><span class="line"> <span class="keyword">if</span> (address.url().host().equals(<span class="keyword">this</span>.route().address().url().host())) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// This connection is a perfect match.</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 这里说明host是相同的，上面的DNS什么的都是一样的，只有后面的path,query或者RequestBody不同，那么直接复用</span></span><br></pre></td></tr></table></figure></p><p>所以这里socket复用的方式是直接使用RealConnection持有Socket对象的引用，每一次在RealConnection的connect成功后，都会讲这个socket包装成一个BufferedSource(读取Response)和BufferedSink(往外写Request)，在timeout时长内，socket不会被关闭。既然缓存就一定会有清理</p><p>在上面的findHealthyConnection中有一段</p><blockquote><p>streamAllocation.acquire(connection, true);</p></blockquote><p>这里面的作用就是将这条请求（Stream）添加到当前连接承载的一个List&lt;Reference<StreamAllocation>&gt;中，也就是所谓的引用计数。提到这一点是要谈到清理的实现：<br>ConnectionPool中有一个Executor，目的就是执行一个cleanupRunnable的Runnable，这里面的清理操作大致如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">cleanup</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// Find either a connection to evict, or the time that the next eviction is due.</span></span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">     <span class="keyword">for</span> (Iterator&lt;RealConnection&gt; i = connections.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">       RealConnection connection = i.next();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// If the connection is in use, keep searching.</span></span><br><span class="line">       <span class="keyword">if</span> (pruneAndGetAllocationCount(connection, now) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         inUseConnectionCount++; <span class="comment">//这条连接还在用</span></span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       idleConnectionCount++; <span class="comment">//这条连接现在空闲下来了</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// If the connection is ready to be evicted, we're done.</span></span><br><span class="line">       <span class="keyword">long</span> idleDurationNs = now - connection.idleAtNanos;<span class="comment">// 这条连接已经多久没用到了，假如超过了闲置时间(默认5纳秒)，就准备干掉这个socket</span></span><br><span class="line">       <span class="keyword">if</span> (idleDurationNs &gt; longestIdleDurationNs) &#123;</span><br><span class="line">         longestIdleDurationNs = idleDurationNs;</span><br><span class="line">         longestIdleConnection = connection;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">       <span class="comment">// We've found a connection to evict. Remove it from the list, then close it below (outside</span></span><br><span class="line">       <span class="comment">// of the synchronized block).</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// A connection will be ready to evict soon.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// All connections are in use. It'll be at least the keep alive duration 'til we run again.</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// No connections, idle or in use.</span></span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 在这前面如果找不到一条该被干掉的连接，直接return</span></span><br><span class="line">   closeQuietly(longestIdleConnection.socket());<span class="comment">// 这里面就是socket.close了</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Cleanup again immediately.</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>观察一下ConnectionPool的构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Create a new connection pool with tuning parameters appropriate for a single-user application.</span></span><br><span class="line"><span class="comment">  * The tuning parameters in this pool are subject to change in future OkHttp releases. Currently</span></span><br><span class="line"><span class="comment">  * this pool holds up to 5 idle connections which will be evicted after 5 minutes of inactivity.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">// 最多保留5条闲置RealConnection(也就是底层5个Socket),每个连接(Socket)如果超过5分钟没有接客，直接干掉</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(<span class="number">5</span>, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>所以，在创建Client的时候，可以把socket的缓存数量写大一点，也可以自定义一个ConnectionPool，只要实现了put,get,remove等标准的CRD操作就行了。简单来说就是自己设计一个Cache，我觉得可以根据实际的endpoint数量来设定缓存的socket的数量。</p><h2 id="2-自定义通讯协议"><a href="#2-自定义通讯协议" class="headerlink" title="2. 自定义通讯协议"></a>2. 自定义通讯协议</h2><p>http这种属于应用层的协议定义了每个数据包的结构是怎样的。在一些场合下，比如追求通讯速度，自定义加密手段，可能需要自定义结构体。<br>自己用Socket实现一套server-clinent通讯模型其实不难。<br>server这边，先确定自己对外公布的ip,port。然后起一个serverSocket，死循环去accept，每次accept到一个就添加到一个列表中，同时用线程池去执行一个死跑从socket中read的runnable。<br>client这边，根据server的ip和port去连接上，client主动发消息(byte，int,String类型都行)，server这边读到信息，给出response，clinent再读取server的回话，就跟两个人之间你一句我一句说话一样。整个过程中 <strong>保持了长连接</strong>,只要任何一方没有手动设置socket.setSoTimeout的话，放一晚上都不会断开。</p><p>一个重点是双方发送的消息格式，即两个人交流的语言，如果全部是String的话，那就跟http很像了，当然任何数据格式从socket发出去最终都是以byte的形式发出去的(比如string会用utf-8或者gbk编码成byte数组)。<br>google的protoBuffer最重要的两个方法writeTo(object转成byte数组)和parseFrom(byte数组转成object)。</p><p><a href="https://blog.csdn.net/u010818425/article/details/53448817">基于Java Socket的自定义协议，实现Android与服务器的长连接（二）</a>，基于这篇文章，可以将数据类型定义为统一的protocol，protocol的要素包括:</p><blockquote><p>协议版本<br>数据类型（数据类协议，数据ack类协议，心跳类协议，心跳ack类协议）<br>数据长度(这很重要)<br>消息id<br>扩展字段</p></blockquote><p>协议版本要做到向后兼容，基本上只添加数据实体不删除数据实体就可以了<br>数据类型必需的三个要素是：<br><strong>长度，版本号，数据类型</strong> (比方说0表示业务数据，1表示数据ack,2表示心跳，3表示心跳ack)。<br>扩展字段类似于extra，可以用json或者别的什么去实现。</p><h2 id="3-tcp的分包和粘包问题"><a href="#3-tcp的分包和粘包问题" class="headerlink" title="3. tcp的分包和粘包问题"></a>3. tcp的分包和粘包问题</h2><p>tcp发包的时候，如果一个包过大，会拆成两个包发(分包)。如果太小，发送方会攒着和下一个包一起发（粘包）。作为接收方并不知道收到的包是一个完整的包还是被拆分的还是由两个包合并而来。</p><p>可能发生分包和粘包的原因包括：<br>1、要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包。</p><p>2、待发送数据大于MSS（最大报文长度），TCP在传输前将进行拆包。</p><p>3、要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包。</p><p>4、接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</p><p>我们都知道TCP属于传输层的协议，传输层除了有TCP协议外还有UDP协议。那么UDP是否会发生粘包或拆包的现象呢？答案是不会。UDP是基于报文发送的，从UDP的帧结构可以看出，在UDP首部采用了16bit来指示UDP数据报文的长度，因此在应用层能很好的将不同的数据报文区分开，从而避免粘包和拆包的问题。而TCP是基于字节流的，虽然应用层和TCP传输层之间的数据交互是大小不等的数据块，但是TCP把这些数据块仅仅看成一连串无结构的字节流，没有边界；另外从TCP的帧结构也可以看出，在TCP的首部没有表示数据长度的字段，基于上面两点，在使用TCP传输数据时，才有粘包或者拆包现象发生的可能。</p><p>虽然有分包和粘包问题，但是作为传输层的tcp能够保证发送出去的顺序和接收到的顺序是一致的。<br>那么基本的解决方法也很成熟了：</p><blockquote><p>1、发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。<br>2、发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。<br>3、可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。</p></blockquote><p>另外，http协议是通过添加换行符“ /r/n”这种形式来解决上述问题的<br>参考<a href="https://blog.csdn.net/Scythe666/article/details/51996268">TCP粘包，拆包及解决方法</a></p><h2 id="4-java这边socket的inputStream的read方法是会堵塞的"><a href="#4-java这边socket的inputStream的read方法是会堵塞的" class="headerlink" title="4. java这边socket的inputStream的read方法是会堵塞的"></a>4. java这边socket的inputStream的read方法是会堵塞的</h2><p><a href="https://blog.csdn.net/cauchyweierstrass/article/details/49552053">就是read方法一直不返回</a>，Socket只是一座桥梁，并不像本地文件一样，所以无法知道对方是否把话说完了。只有一方调用socket的close方法时才会发送EOF结束符，另一方的read = -1 才能成立，否则read方法就堵塞在那里。<br>InputStream有一个available()方法：<br>an estimate of the number of bytes that can be read (or skipped<br>over) from this input stream without blocking or  0 when it reaches the end of the input stream.<br>oves) 。不要把这个方法中的返回值当做这个流中所有可能数据的总和(多数情况下这种猜测是错误的)。</p><p>tcp的backlog变量</p><p>建立TCP连接时需要发送同步SYN报文，然后等待确认报文SYN+ACK，最后再发送确认报文ACK。</p><p><strong>如果应用层不能及时接受已被TCP接受的连接，这些连接可能占满整个连接队列，新的连接请求可能不被响应而会超时。如果一个连接请求SYN发送后，一段时间后没有收到确认SYN+ACK，TCP会重传这个连接请求SYN两次，每次重传的时间间隔加倍，在规定的时间内仍没有收到SYN+ACK，TCP将放弃这个连接请求，连接建立就超时了。</strong></p><p><a href="https://blog.csdn.net/sureyonder/article/details/5633647">JAVA Socket超时浅析</a></p><p>BufferedWriter的主要原理是内部保留了一个char[]的数组，每次外部调用write的时候，不是直接写到underlying 的output中，而是system.arrayCopy到自己的char[]数组中，等发现char[]数组填满了，才去flushBuffer，就是把所有缓存的内容一次性写到底层的outputStream中。因为outputStream是一个字节一个字节去写的，每次写都要调用io操作，而io操作是很耗费资源的。所以bufferedWriter一次性写大量的数据，能够有效减少io次数，提高性能。</p><p><a href="https://zhuanlan.zhihu.com/p/36414915">以TCP/IP协议为例，如何通过wireshark抓包分析？</a></p><p><a href="http://chown-jane-y.coding.me/2017/07/21/%E4%BD%BF%E7%94%A8Nginx%E4%BB%A3%E7%90%86ws%E4%B8%BAwss%E5%8D%8F%E8%AE%AE/">使用Nginx代理ws为wss协议</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0">CRSF</a></p><p><a href="http://www.ruanyifeng.com/blog/2016/09/csp.html">Content Security Policy 入门教程</a><br>两种方式设置csp白名单，一种是服务器在response的header中添加’Content-Security-Policy’这个header，另一种是在html中写meta标签<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"script-src 'self'; object-src 'none'; style-src cdn.example.org third-party.org; child-src https:"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/19562501/ajax-what-is-the-default-character-encoding-for-http-header-values">http请求是一行一行的文字，contentType only affects the body/document.you can use any ISO-8859-1 characters in the header.</a>。ISO-8859-1不支持中文，所以header里面的东西不能写中文。<br>body和path里面随意了</p><p>//网页上传excel表格的header<br>Content-Disposition: form-data; name=”files[]” filename=”sample.xls”<br>Content-Type: application/vnd.ms-excel</p><p>html里面上传文件一般是ajax对象send一个FormData出去，<br>也有Base64编码一遍然后在<a href="http://www.nickdesteffen.com/blog/file-uploading-over-ajax-using-html5">服务端base64解码的</a>。主要是html5标准中添加了新的FileReader接口，可以读取客户端文件内容，所以很多开发就调用FileReader的readAsDataURL方法去将文件的内容变成<a href="https://en.wikipedia.org/wiki/Data_URI_scheme">DATA URL形式的字符串</a><br>不过这么干还是有缺点的</p><blockquote><ol><li>Data URL形式的图片不会被浏览器缓存，这意味着每次访问这样页面时都被下载一次，<br>但可通过在css文件的background-image样式规则使用Data URI Scheme，使其随css文件一同被浏览器缓存起来）。</li><li>Base64编码的数据体积通常是原数据的体积4/3，<br>也就是Data URL形式的图片会比二进制格式的图片体积大1/3。</li><li>移动端性能比较低。</li></ol></blockquote><p><a href="http://luodw.cc/2015/12/27/dns03/">域名解析之dig,host,nslookup命令</a></p><p><a href="http://www.runoob.com/http/http-content-type.html">详细的http-content-type表格</a><br>关于content-type,找到一篇<a href="http://homeway.me/2015/07/19/understand-http-about-content-type/">介绍</a><br>关于Http header常用字段<a href="http://zq210wl.github.io/2014/12/30/html-http-header-analysis/">理解Http Header</a><br>Http底层TCP ,ACK 等等需要tcpcump结合wireShark抓包</p><blockquote><p>下面是几个常见的Content-Type:<br>1.text/html<br>2.text/plain<br>3.text/css<br>4.text/javascript<br>5.application/x-www-form-urlencoded<br>6.multipart/form-data<br>7.application/json<br>8.application/xml<br>…<br>前面几个都很好理解，都是html，css，javascript的文件类型，后面四个是POST的发包方式。</p></blockquote><p><a href="https://www.sitepoint.com/mime-types-complete-list/">非官方的mime-type大全</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types">MDN上收录的mime-type</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Optionshttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options">X-Content-Type-Options:nosniff</a>.就是说服务器返回的Response中如果包含这个header的话，script和styleSheet元素会拒绝错误的MIME类型的响应。主要是为了防止给予MIME类型的混淆攻击</p><p>Referrer Policy: unsafe-url<br><a href="https://imququ.com/post/referrer-policy.html">unsafe-url</a><br>后台在response中返回一个302，并在response header中添加header:location。直接把前端网页重定向到新的位置</p><h2 id="服务器压测工具"><a href="#服务器压测工具" class="headerlink" title="服务器压测工具"></a>服务器压测工具</h2><p>参考<a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-load-testing">DigitalOcean的文章]</a></p><blockquote><p>npm install -g loadtest ##一个node的压力测试的web client<br>loadtest -n 100 -k  <a href="http://localhost:8000/api/somebackend">http://localhost:8000/api/somebackend</a> # -n表示发送100次 -k 表示keep-alive<br>loadtest -c 10 –rps 200 <a href="http://mysite.com/">http://mysite.com/</a>  # -c表示client，创建10个client ， –rsp表示每秒的请求数量<br>loadtest -k -H ‘Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8’ -H “User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36”  –rps 1 <a href="https://www.baidu.com/">https://www.baidu.com/</a><br>注意： 这种短期创建大量外网连接的行为会对路由器造成一定压力。。。。</p></blockquote><p>ab(ApacheBench) - a simple ,single-threaded command line tool for benchemarking an HTTP server.<br>因为是单线程的，所以并不能利用多核cpu的优势对server施加充分的负载。一般这么用</p><blockquote><p>ab -n 1000 -c 100 <a href="http://example.com/">http://example.com/</a><br>ab -n <num_requests> -c <concurrency> <addr>:<port><path></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OkHttp通过ConnectionPool做到tcp连接复用（在Timeout内）,所以并不是每个http都去建立一个tcp连接&lt;br&gt;自定义通讯协议，使用java socket实现客户端和服务端。需要注意的是分包问题和黏包问题&lt;br&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/jpglight-and-shadow-2411321_960_720.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Android手册-4</title>
    <link href="https://haldir65.github.io/2018/04/13/2018-04-13-android-cheat-sheet-four/"/>
    <id>https://haldir65.github.io/2018/04/13/2018-04-13-android-cheat-sheet-four/</id>
    <published>2018-04-13T13:53:52.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.haldir66.ga/static/imgs/street%20lights%20dark%20night%20car%20city%20bw.jpg" alt=""></p><a id="more"></a><h2 id="1-在子线程中显示一个Toast是亲测可行的"><a href="#1-在子线程中显示一个Toast是亲测可行的" class="headerlink" title="1. 在子线程中显示一个Toast是亲测可行的"></a>1. 在子线程中显示一个Toast是亲测可行的</h2><p>不是那种post到主线程的方案<br><a href="https://www.zhihu.com/question/51099935">其实知乎上已经有了讨论</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     Context mContext;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ToastThread</span><span class="params">(Context mContext)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.mContext = mContext;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         Looper.prepare();</span><br><span class="line">         String threadId = String.valueOf(Thread.currentThread().getId());</span><br><span class="line">         Toast.makeText(mContext,threadId,Toast.LENGTH_SHORT).show();</span><br><span class="line">         Looper.loop();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://www.haldir66.ga/static/imgs/toast_transact.jpg" alt=""><br>其实Toast的原理就是通过IPC向NotificationManager请求加入队列，后者会检测权限xxxx。然后通过上面的ipc回调到客户端的onTransact中，这里也就是走到了Toast.TN这个static inner class的handler中，发送一个Message，handlerMessage中完成了WindowManager.addView的操作<br>需要注意的是，这里还是子线程，所以确实可能存在多条线程同时操作UI的现象。从形式上看，主线程和子线程中的Toast对象各自通过自己的Looper维护了一个消息循环队列，这其中的消息类型包括show,hide和cancel。所以可能存在多条线程同时调用WindowManager的方法，View也是每条线程各自独有的，最坏的场景莫过于两条线程同时各自添加了一个View到window上。另外，子线程中引入looper的形式也造成了子线程实质上的阻塞，当然可以直接当成一个handlerThread来用。<br>所以不是很推荐这么干，只是说可以做。<br><strong>Toast.TN.handleShow</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      mWM.addView(mView, mParams);</span><br><span class="line">      trySendAccessibilityEvent();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (WindowManager.BadTokenException e) &#123;</span><br><span class="line">      <span class="comment">/* ignore */</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-ContentProvider的onCreate要早于Application的onCreate发生"><a href="#2-ContentProvider的onCreate要早于Application的onCreate发生" class="headerlink" title="2.ContentProvider的onCreate要早于Application的onCreate发生"></a>2.ContentProvider的onCreate要早于Application的onCreate发生</h2><p>比如ArchitectureComponent中的lifeCycle就是这么干的，写了个dummpy的contentProvider，在provider的onCreate中去loadLibrary.</p><h2 id="3-看到一个关于apk反编译和重新打包的帖子，非常好用"><a href="#3-看到一个关于apk反编译和重新打包的帖子，非常好用" class="headerlink" title="3. 看到一个关于apk反编译和重新打包的帖子，非常好用"></a>3. 看到一个关于apk反编译和重新打包的帖子，非常好用</h2><p><a href="https://www.jianshu.com/p/792a08d5452c">Android apk反编译及重新打包流程</a>，关键词apktool。<br>但是，360加固之后的apk是不能用dex2jar查看java代码的。</p><h3 id="4-从base-apk谈到apk安装的过程"><a href="#4-从base-apk谈到apk安装的过程" class="headerlink" title="4.从base.apk谈到apk安装的过程"></a>4.从base.apk谈到apk安装的过程</h3><p><a href="https://www.jianshu.com/p/ae45af3c3098">APK安装过程</a>。<br>之前无意间在FileExplorer中看到了base.apk这个文件，由此展开apk安装过程的研究。</p><h2 id="5-关于模块化和项目重构"><a href="#5-关于模块化和项目重构" class="headerlink" title="5.关于模块化和项目重构"></a>5.关于模块化和项目重构</h2><p>很多关于Android甚至java项目的重构的文章都会最终提到两条：<br>面向接口编程 -&gt; 依赖注入(IOC)<br>然后跟上一大堆专业分析和没什么用的废话。<br>这俩在java的领域翻译过来就是：<br>在A模块中用Dagger2生成B模块中定义的interface的impl实例。<br><del>其实不用Dagger2也行，就是每次在B模块的生命周期开始时准备一个HashMap<interfaceClass,ImplClass>这样的一大堆键值对，然后在A模块中根据想要的interface class去找impl class，用反射去创建，生产环境肯定不能这么干。</del><br>在Dagger2中大致是这么干的：</p><p>先声明好B模块对外提供的接口，以下这俩都在另一个module中，A module通过gradle引用了B模块<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">sell</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreImpl</span> <span class="keyword">implements</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dummy products"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>B模块中再提供Component和provide的module<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(modules = StoreModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StoreComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">Store <span class="title">eject</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreModule</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">Store <span class="title">provideStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StoreImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>A模块中最终使用的方式应该是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Store store = DaggerStoreComponent.builder().build().eject();</span><br></pre></td></tr></table></figure></p><h2 id="6-写sqlite语句的时候总是容易出小错误"><a href="#6-写sqlite语句的时候总是容易出小错误" class="headerlink" title="6.写sqlite语句的时候总是容易出小错误"></a>6.写sqlite语句的时候总是容易出小错误</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//错误写法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table_one ( _id <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT, studentName <span class="built_in">TEXT</span>,studentNick <span class="built_in">TEXT</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> table_one (studentName,studentNick) <span class="keyword">VALUES</span> ( name1,nick1)</span><br><span class="line">//  SQLiteException: <span class="keyword">no</span> such <span class="keyword">column</span>: name1 (code <span class="number">1</span>) 报错</span><br><span class="line"></span><br><span class="line">//正确写法</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table_one ( _id <span class="built_in">INTEGER</span> PRIMARY <span class="keyword">KEY</span> AUTOINCREMENT, studentName <span class="built_in">TEXT</span>,studentNick <span class="built_in">TEXT</span>)</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">OR</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> table_one (studentName,studentNick) <span class="keyword">VALUES</span> ( <span class="string">'name1'</span>,<span class="string">'nick1'</span>)</span><br></pre></td></tr></table></figure><p>唯一的区别就在于name1和nick1这俩用 <strong>单引号单引号单引号</strong> 包起来了。</p><h2 id="7-Webview的坑的总结"><a href="#7-Webview的坑的总结" class="headerlink" title="7. Webview的坑的总结"></a>7. Webview的坑的总结</h2><p><a href="http://iluhcm.com/2017/12/10/design-an-elegant-and-powerful-android-webview-part-one/">WebView的那些坑</a></p><h2 id="8-BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException"><a href="#8-BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException" class="headerlink" title="8.BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException"></a>8.BitmapRegionDecoder不要随便用，到处是坑，主要问题和jpg图片的colorSpace有关，动不动就爆出IOException</h2><blockquote><p>The Skia library on which BitmapRegionDecoder is based had some bugs that will not be fixed in versions of Android prior to Nougat or Oreo. It will still display the vast majority of images properly, but you may see problems displaying CMYK JPGs, and grayscale PNGs, especially on older devices. To reduce the frequency of these problems, the view automatically falls back to BitmapFactory when the image does not need to be subsampled.<br><a href="https://github.com/davemorrissey/subsampling-scale-image-view/wiki/02.-Displaying-images">subsampling-scale-image-view这个库</a></p></blockquote><h2 id="9-Bitmap对象的recycle问题还是要调用"><a href="#9-Bitmap对象的recycle问题还是要调用" class="headerlink" title="9.Bitmap对象的recycle问题还是要调用"></a>9.Bitmap对象的recycle问题还是要调用</h2><p>Bitmap类有一个方法recycle()，从方法名可以看出意思是回收。这里就有疑问了，Android系统有自己的垃圾回收机制，可以不定期的回收掉不使用的内存空间，当然也包括Bitmap的空间。那为什么还需要这个方法呢？<br>Bitmap类的构造方法都是私有的，所以开发者不能直接new出一个Bitmap对象，只能通过BitmapFactory类的各种静态方法来实例化一个Bitmap。仔细查看BitmapFactory的源代码可以看到，生成Bitmap对象最终都是通过JNI调用方式实现的。所以，加载Bitmap到内存里以后，是包含两部分内存区域的。简单的说，一部分是Java部分的，一部分是C部分的。这个Bitmap对象是由Java部分分配的，不用的时候系统就会自动回收了，但是那个对应的C可用的内存区域，虚拟机是不能直接回收的，这个只能调用底层的功能释放。所以需要调用recycle()方法来释放C部分的内存。从Bitmap类的源代码也可以看到，recycle()方法里也的确是调用了JNI方法了的。<br>那如果不调用recycle()，是否就一定存在内存泄露呢？也不是的。Android的每个应用都运行在独立的进程里，有着独立的内存，如果整个进程被应用本身或者系统杀死了，内存也就都被释放掉了，当然也包括C部分的内存。<br>Android对于进程的管理是非常复杂的。简单的说，Android系统的进程分为几个级别，系统会在内存不足的情况下杀死一些低优先级的进程，以提供给其它进程充足的内存空间。在实际项目开发过程中，有的开发者会在退出程序的时候使用Process.killProcess(Process.myPid())的方式将自己的进程杀死，但是有的应用仅仅会使用调用Activity.finish()方法的方式关闭掉所有的Activity。</p><h2 id="10-原来layer-list还可以这么用啊"><a href="#10-原来layer-list还可以这么用啊" class="headerlink" title="10. 原来layer_list还可以这么用啊"></a>10. 原来layer_list还可以这么用啊</h2><p>给一个View加边框，只在左边，上面和下面三条边上加边框，用layer_list就可以了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 连框颜色值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"@color/md_blue_700"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主体背景颜色值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处定义只有上下两边有边框 高度为1像素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:bottom</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:left</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:top</span>=<span class="string">"10dp"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--边框里面背景颜色 白色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">shape</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#ffffff"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">shape</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="11-proguard可以把log干掉"><a href="#11-proguard可以把log干掉" class="headerlink" title="11.proguard可以把log干掉"></a>11.proguard可以把log干掉</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-assumenosideeffects class android.util.Log &#123;</span><br><span class="line">    public static boolean isLoggable(java.lang.String, int);</span><br><span class="line">    public static int v(...);</span><br><span class="line">    public static int i(...);</span><br><span class="line">    public static int w(...);</span><br><span class="line">    public static int d(...);</span><br><span class="line">    public static int e(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12-国产Rom的权限问题是在是头疼"><a href="#12-国产Rom的权限问题是在是头疼" class="headerlink" title="12.国产Rom的权限问题是在是头疼"></a>12.国产Rom的权限问题是在是头疼</h3><p>以5.1的rom为例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(ContextCompat.checkSelfPermission(activity,Manifest.permission.Camera)== PackageManager.PERMISSION_GRANTED):</span><br><span class="line">    Camera c = Camera.open();<span class="comment">// 还是null</span></span><br></pre></td></tr></table></figure></p><p>类似的问题衍生出了<a href="https://github.com/jokermonn/permissions4m">国产手机5.0,6.0权限适配框架</a><br>找到了启动魅族权限管理的Activity的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String N_MANAGER_OUT_CLS = <span class="string">"com.meizu.safe.permission.PermissionMainActivity"</span>; </span><br><span class="line"><span class="keyword">final</span> String L_MANAGER_OUT_CLS = <span class="string">"com.meizu.safe.SecurityMainActivity"</span>; <span class="comment">// 5.1上叫做这个名字</span></span><br><span class="line"><span class="keyword">final</span> String PKG = <span class="string">"com.meizu.safe"</span>;</span><br><span class="line">Activity activity = (Activity) context;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">intent.putExtra(<span class="string">"package"</span>, activity.getPackageName());</span><br><span class="line">ComponentName comp = <span class="keyword">new</span> ComponentName(PKG, L_MANAGER_OUT_CLS);</span><br><span class="line">intent.setComponent(comp);</span><br><span class="line">activity.startActivity(intent);</span><br></pre></td></tr></table></figure></p><h3 id="13-Canvas-clipPath会出现锯齿的问题以及可能的解决方案"><a href="#13-Canvas-clipPath会出现锯齿的问题以及可能的解决方案" class="headerlink" title="13. Canvas.clipPath会出现锯齿的问题以及可能的解决方案"></a>13. Canvas.clipPath会出现锯齿的问题以及可能的解决方案</h3><p>a Navive implementation of CircleImageView would look something like this:<br>xml里面宽高都写成200dp，方便一点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Path;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.AppCompatImageView;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundCornerImageView1</span> <span class="keyword">extends</span> <span class="title">AppCompatImageView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span>[] radiusArray = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView1</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView1</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView1</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setScaleType(ScaleType.CENTER_CROP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">float</span> leftTop, <span class="keyword">float</span> rightTop, <span class="keyword">float</span> rightBottom, <span class="keyword">float</span> leftBottom)</span> </span>&#123;</span><br><span class="line">        radiusArray[<span class="number">0</span>] = leftTop;</span><br><span class="line">        radiusArray[<span class="number">1</span>] = leftTop;</span><br><span class="line">        radiusArray[<span class="number">2</span>] = rightTop;</span><br><span class="line">        radiusArray[<span class="number">3</span>] = rightTop;</span><br><span class="line">        radiusArray[<span class="number">4</span>] = rightBottom;</span><br><span class="line">        radiusArray[<span class="number">5</span>] = rightBottom;</span><br><span class="line">        radiusArray[<span class="number">6</span>] = leftBottom;</span><br><span class="line">        radiusArray[<span class="number">7</span>] = leftBottom;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        Path path = <span class="keyword">new</span> Path();</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = getHeight();</span><br><span class="line">        setRadius(width/<span class="number">2</span>,width/<span class="number">2</span>,height/<span class="number">2</span>,height/<span class="number">2</span>);</span><br><span class="line">        path.addRoundRect(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, width,height), radiusArray, Path.Direction.CW);</span><br><span class="line">        canvas.clipPath(path);</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不出意外的话，在真机上运行会出现圆形边角有锯齿的问题。google一下clipPath锯齿就会发现类似的<a href="https://www.cnblogs.com/everhad/p/6161083.html">issue</a>，framework只是对skia library的一层很薄的包装。</p><p><a href="https://github.com/hehonghui/android-tech-frontier/blob/aa6f125b1a3801820e697f5ac6246b4827acd5a5/issue-45/Android%E5%9C%86%E5%BC%A7%E6%95%B4%E5%AE%B9%E4%B9%8B%E8%B0%9C.md">早先版本的系统画圆弧似乎不是特别准</a></p><p>多数时候对这种问题的解决方式是使用PorterDuff.SRCIN的方式，用canvas saveLayer(貌似layer是一种栈的结构)的方式在其他的layer中去画bitmap。最后顶层的layer全部pop掉之后会合并到initial的layer上，类似于在顶层的layer中合成这张bitmap。<br>canvas.saveLayer(0, 0, w, h, null, Canvas.ALL_SAVE_FLAG); // 大致就在这里,layer似乎可以理解成photoShop里面的图层的概念<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundCornerImageView2</span> <span class="keyword">extends</span> <span class="title">AppCompatImageView</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 四个角的x,y半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span>[] radiusArray = &#123; <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span> &#125;;</span><br><span class="line">    <span class="keyword">private</span> Paint bitmapPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Bitmap <span class="title">makeRoundRectFrame</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        Bitmap bm = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas c = <span class="keyword">new</span> Canvas(bm);</span><br><span class="line">        Path path = <span class="keyword">new</span> Path();</span><br><span class="line">        setRadius(w/<span class="number">2</span>,w/<span class="number">2</span>,h/<span class="number">2</span>,h/<span class="number">2</span>);</span><br><span class="line">        path.addRoundRect(<span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, w, h), radiusArray, Path.Direction.CW);</span><br><span class="line">        Paint bitmapPaint = <span class="keyword">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        bitmapPaint.setColor(Color.GREEN); <span class="comment">// 颜色随意，不要有透明度。</span></span><br><span class="line">        c.drawPath(path, bitmapPaint);</span><br><span class="line">        <span class="keyword">return</span> bm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView2</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView2</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundCornerImageView2</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        setLayerType(LAYER_TYPE_SOFTWARE, null); // Xfermode 需要禁用硬件加速</span></span><br><span class="line">        setScaleType(ScaleType.CENTER_CROP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">float</span> leftTop, <span class="keyword">float</span> rightTop, <span class="keyword">float</span> rightBottom, <span class="keyword">float</span> leftBottom)</span> </span>&#123;</span><br><span class="line">        radiusArray[<span class="number">0</span>] = leftTop;</span><br><span class="line">        radiusArray[<span class="number">1</span>] = leftTop;</span><br><span class="line">        radiusArray[<span class="number">2</span>] = rightTop;</span><br><span class="line">        radiusArray[<span class="number">3</span>] = rightTop;</span><br><span class="line">        radiusArray[<span class="number">4</span>] = rightBottom;</span><br><span class="line">        radiusArray[<span class="number">5</span>] = rightBottom;</span><br><span class="line">        radiusArray[<span class="number">6</span>] = leftBottom;</span><br><span class="line">        radiusArray[<span class="number">7</span>] = leftBottom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> w = getWidth();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> h = getHeight();</span><br><span class="line">        Bitmap bitmapOriginal = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);</span><br><span class="line">        Canvas c = <span class="keyword">new</span> Canvas(bitmapOriginal);</span><br><span class="line">        <span class="keyword">super</span>.onDraw(c);</span><br><span class="line"></span><br><span class="line">        Bitmap bitmapFrame = makeRoundRectFrame(w, h);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sc = canvas.saveLayer(<span class="number">0</span>, <span class="number">0</span>, w, h, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        canvas.drawBitmap(bitmapFrame, <span class="number">0</span>, <span class="number">0</span>, bitmapPaint); <span class="comment">//先画一个圆形的框框条条出来</span></span><br><span class="line"><span class="comment">// 利用Xfermode取交集（利用bitmapFrame作为画框来裁剪bitmapOriginal）</span></span><br><span class="line">        bitmapPaint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN)); <span class="comment">//后续的画图操作，只有交集的部分才会显示在最终的canvas上</span></span><br><span class="line">        canvas.drawBitmap(bitmapOriginal, <span class="number">0</span>, <span class="number">0</span>, bitmapPaint);</span><br><span class="line"></span><br><span class="line">        bitmapPaint.setXfermode(<span class="keyword">null</span>);</span><br><span class="line">        canvas.restoreToCount(sc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方式一般称为离屏缓冲</p><h3 id="14-jni使用"><a href="#14-jni使用" class="headerlink" title="14. jni使用"></a>14. jni使用</h3><p><a href="https://blog.csdn.net/baidu_34045013/article/details/78994516">一般使用javah生成header文件</a></p><p>多数教程都是写一个<br>gradle.properties添加一句android.useDeprecatedNdk=true<br>随着studio版本升级，还是不得不升级到使用cmake的方式。</p><p>Android Studio中集成c或者cpp代码照着这个官方的<a href="https://developer.android.com/studio/projects/add-native-code">教程</a>抄就行了。其实也就是写一个CMakeLists.txt，然后在studio里面右键app模块, Link C++ Project with Gradle。照着来就是了。</p><p>先写好java的native方法，然后cd到src/main/java路径<br>javah -d jni com.your.package.name.classyoujustWroteWithnativeMethod</p><p>把生成的header文件剪切到和main/Java文件夹平级的jni文件夹中，再去写c的实现。</p><p>移植mp3lame到Android平台照着<a href="https://www.jianshu.com/p/065bfe6d3ec2">这里</a>操作就行了。<br>这篇博客使用的是lame-3.99.5，注意下载对应的版本。<br><a href="http://cfanr.cn/2017/08/26/Android-NDK-dev-CMake-s-usage/">cmake的一些知识点</a><br>cmake生成的.so文件在”\app\build\intermediates\cmake\debug\obj\arm64-v8a”这个路径下</p><ol><li>关于Spannable String的问题<br>Medium上有关于使用span的文章 <a href="https://medium.com/google-developers/spantastic-text-styling-with-spans-17b0c16b4568">Spantastic text styling with Spans</a> 其实有SpannableString(mutable),SpannableStringBuilder还有SpannedString(immutable)。<br>Just reading and not setting the text nor the spans? -&gt; SpannedString(文字和style都改不了)<br>Setting the text and the spans? -&gt; SpannableStringBuilder(文字和Style都能改)<br>Setting a small number of spans (&lt;~10)? -&gt; SpannableString(文字不能改，Style能改)<br>Setting a larger number of spans (&gt;~10) -&gt; SpannableStringBuilder</li></ol><p><a href="https://stackoverflow.com/questions/17546955/android-spanned-spannedstring-spannable-spannablestring-and-charsequence">stackoverflow上甚至有Glide作者的讨论</a><br>从源码来看,SpannedString和SpannableString几乎是一样的，后者继承了一个Spannable的接口，由此对外暴露了父类(SpannableStringInternal)的setSpan和removeSpan方法。</p><blockquote><p>Use a SpannedString when your text has style but you don’t need to change either the text or the style after it is created. (似乎平时也应该这样使用，但从源码来看，两者几乎没有性能上的区别。真正的性能差异要取决于实际的use case)<br>Use a SpannableString when your text doesn’t need to be changed but the styling does.<br>Use a SpannableStringBuilder when you will need to update the text and its style.</p></blockquote><p>SPAN_EXCLUSIVE_EXCLUSIVE，SPAN_EXCLUSIVE_INCLUSIVE这些东西的意思是针对新的文字插入之后的行为来说的。<br>SPAN_EXCLUSIVE_INCLUSIVE就是说新的文字插入之后，之前设置的span将自动扩增并应用到这段新的文字上。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spannable.setSpan(</span><br><span class="line">     ForegroundColorSpan(Color.RED), </span><br><span class="line">     <span class="comment">/* start index */</span> <span class="number">8</span>, <span class="comment">/* end index */</span> <span class="number">12</span>, </span><br><span class="line">     Spannable.SPAN_EXCLUSIVE_INCLUSIVE)</span><br><span class="line">spannable.insert(<span class="number">12</span>, “(&amp; fon)”) <span class="comment">//注意SpannableStringBuilder的这个insert方法是可以指定insert的位置的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">val spannable = SpannableString(“Text is spantastic!”)</span><br><span class="line">spannable.setSpan(</span><br><span class="line">     ForegroundColorSpan(Color.RED), </span><br><span class="line">     <span class="number">8</span>, <span class="number">12</span>, </span><br><span class="line">     Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)</span><br><span class="line">spannable.setSpan(</span><br><span class="line">     StyleSpan(BOLD), </span><br><span class="line">     <span class="number">8</span>, spannable.length, </span><br><span class="line">     Spannable.SPAN_EXCLUSIVE_EXCLUSIVE) <span class="comment">//一段文字可以同时应用多个Spannable样式</span></span><br></pre></td></tr></table></figure></p><p>Framework自带的spans可以分为两类：一种是改变文字外观的（Appearance affecting span），另一种是改变文字大小的(Metric affecting span)。</p><p>文章里还提到了可以使用TextView.setText(Spannable, BufferType.SPANNABLE)方法，如果后续需要修改文字的span样式的话，可以getText，获得的是之前设置的span，这时候再去对这个span进行操作（不要再setText回去了），这对提升性能有帮助（text的measure和layout都是耗性能的操作）。但注意，如果是使用了RelativeSizeSpan的话，因为更改了TextView的大小，这必然会触发重新measure和layout，上述的优化似乎也就没有必要了。</p><p>自定义Span的话：<br>Affecting text at the character level -&gt; CharacterStyle<br>Affecting text at the paragraph level -&gt; ParagraphStyle<br>Affecting text appearance -&gt; UpdateAppearance<br>Affecting text metrics -&gt; UpdateLayout</p><p>asset文件夹里面的东西是无法用File的形式去获取的<br>android.os.FileUriExposedException: file://assets/dist/index.js exposed beyond app through Intent.getData()<br>at android.os.StrictMode.onFileUriExposed(StrictMode.java:1816)</p><p><a href="https://gradle.com/build-scans">gradle build scan</a><br>[把一些本地libiary打包成aar能够显著加快编译]</p><p>TextView有时候会出现提前换行的问题</p><p>[Instagram是如何提升TextView渲染性能的(<a href="http://codethink.me/2015/04/23/improving-comment-rendering-on-android/),关键字TextLayoutCache">http://codethink.me/2015/04/23/improving-comment-rendering-on-android/),关键字TextLayoutCache</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/street%20lights%20dark%20night%20car%20city%20bw.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React语法及Redux实践笔记</title>
    <link href="https://haldir65.github.io/2018/03/17/2018-03-17-react-cheatSheet/"/>
    <id>https://haldir65.github.io/2018/03/17/2018-03-17-react-cheatSheet/</id>
    <published>2018-03-17T23:56:45.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.haldir66.ga/static/imgs/food-knife-green-kitchen-city-life.jpg" alt=""><br>介绍React语法及一些Redux的使用方法<br><a id="more"></a></p><p><strong><em>Take Away</em></strong><br>基本的流程就是创建一个继承React.Component的class，设定state，添加点击事件。<br>最重要的是在render()函数中返回一个element，比如说这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> myelement= <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>hello 这就是jsx语法 there<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">       <span class="keyword">return</span>(</span><br><span class="line">           <span class="comment">// &lt;div&gt;</span></span><br><span class="line">           <span class="comment">//     &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125;/&gt;</span></span><br><span class="line">           <span class="comment">//     &#123;button&#125;</span></span><br><span class="line">           <span class="comment">// &lt;/div&gt;</span></span><br><span class="line">           myelement <span class="comment">// 这里把html tag提取到外面也行，写在里面也行，混着写的话，&#123;myelement&#125;，加上大括号就是了</span></span><br><span class="line">           <span class="comment">// 官方guide上的原话是: You may embed any expressions in JSX by wrapping them in curly braces(大括号).</span></span><br><span class="line"></span><br><span class="line">       )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return里面只能返回一个tag</span></span><br></pre></td></tr></table></figure></p><p><strong><em>props是只读的</em></strong></p><p><strong><em>JSX allows embedding any expressions ,就是说jsx语句中，大括号包起来的地方，什么js都能写</em></strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>yarn global add create-react-app<br>create-react-app my-app<br>cd my-app<br>npm start</p></blockquote><h2 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h2><p>在html文件中添加这样一个tag<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在index.js中添加这样一段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure></p><p><strong>可以认为ReactDOM.render方法就是程序的入口</strong></p><h2 id="Element和Component的概念"><a href="#Element和Component的概念" class="headerlink" title="Element和Component的概念"></a>Element和Component的概念</h2><p>Element感觉上就像一个或者多个UI控件的集合<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>; <span class="comment">//这就算一个Element,用于描述将要展示在屏幕上的效果</span></span><br></pre></td></tr></table></figure></p><p>Component就像javaScript函数一样，它们接收任意输入，输出React element以显示在屏幕上。需要注意的是，Component的名字一定要 <strong>首字母大写</strong> ，因为React把小写字母开头的当做正常的html element来处理了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个返回Element的函数就算作是Component了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者用es6语法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有就是props是immutable的，想要改的话用State吧。也即Component应该表现为纯粹的function，不修改状态。</p><h2 id="State的更改"><a href="#State的更改" class="headerlink" title="State的更改"></a>State的更改</h2><p>State是在constructor里面初始化的，想要更改其中的值的话，不能直接赋值，需要使用setState方法</p><blockquote><p>this.setState({comment: ‘Hello’});</p></blockquote><p>但有时State的更新是异步的，所以要使用两个参数的setState方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h2 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;h1 className=<span class="string">"greeting"</span>&gt;</span><br><span class="line">    Hello, world!</span><br><span class="line">  &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 这俩其实是一样的</span></span><br><span class="line"><span class="regexp">const element = React.createElement(</span></span><br><span class="line"><span class="regexp">  'h1',</span></span><br><span class="line"><span class="regexp">  &#123;className: 'greeting'&#125;,</span></span><br><span class="line"><span class="regexp">  'Hello, world!'</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ jsx语句最终都是被用在component的return语句中的：</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function WarningBanner(props) &#123;</span></span><br><span class="line"><span class="regexp">  if (!props.warn) &#123;</span></span><br><span class="line"><span class="regexp">    return null;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;div className="warning"&gt;</span></span><br><span class="line"><span class="regexp">      Warning!</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="局部更新"><a href="#局部更新" class="headerlink" title="局部更新"></a>局部更新</h3><p>页面发生变化时，React只更新需要刷新的部分</p><h2 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount() &#123;</span><br><span class="line">  fetchPosts().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      posts: response.posts</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  fetchComments().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      comments: response.comments</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ActionLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'The link was clicked.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;a href=<span class="string">"#"</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">      Click me</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const element = &lt;h1&gt;Hello, world&lt;/</span>h1&gt;;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">ActionLink</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者是使用箭头函数 以及  Function.prototype.bind</span></span><br><span class="line">&lt;button onClick=&#123;(e) =&gt; <span class="keyword">this</span>.deleteRow(id, e)&#125;&gt;Delete Row&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在一个Component中，时间监听最后要加上bind(this)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">temperature</span>: <span class="string">''</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleChange(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">temperature</span>: e.target.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> temperature = <span class="keyword">this</span>.state.temperature;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;fieldset&gt;</span><br><span class="line">        &lt;legend&gt;Enter temperature <span class="keyword">in</span> Celsius:<span class="xml"><span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span></span><br><span class="line">        &lt;input</span><br><span class="line">          value=&#123;temperature&#125;</span><br><span class="line">          onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;BoilingVerdict</span><br><span class="line">          celsius=&#123;<span class="built_in">parseFloat</span>(temperature)&#125; /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;<span class="regexp">/fieldset&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="组件之间通信"><a href="#组件之间通信" class="headerlink" title="组件之间通信"></a>组件之间通信</h2><p>In React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. 也就是说，要把state提取到最近的公用父组件中。事件发生时，子组件调用this.props.onXXX(由父组件提供)通知父组件，子组件不再维护自身state，父组件的state成为两个子组件唯一的共有的single source of truth</p><p>渲染list的时候记得要加上一个key，这是规定<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误</span></span><br><span class="line"><span class="keyword">const</span> listItems = numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">  &lt;li&gt;&#123;number&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/正确</span></span><br><span class="line"><span class="regexp">const listItems = numbers.map((number) =&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li key=&#123;number.toString()&#125;&gt;&#123;number&#125;&lt;/</span>li&gt;</span><br><span class="line">);</span><br><span class="line"><span class="comment">//一个List element中的list元素应当具有独一无二的key，但不同List element实例之间，元素的key没必要遵守这一规则</span></span><br></pre></td></tr></table></figure></p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><blockquote><p>Super expression must either be null or a function, not undefined<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 应该是</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginControl</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/food-knife-green-kitchen-city-life.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;介绍React语法及一些Redux的使用方法&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>mysql填坑记录</title>
    <link href="https://haldir65.github.io/2018/02/04/2018-02-04-mysql-metup/"/>
    <id>https://haldir65.github.io/2018/02/04/2018-02-04-mysql-metup/</id>
    <published>2018-02-04T21:37:37.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.haldir66.ga/static/imgs/fuchsia-973x547.jpg" alt=""><br><a id="more"></a><br>关系型数据库很多如，MS Access, SQL Server, MySQL<br>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”，NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。典型的代表如MongoDb.</p><p>读音：<br>MySQL is pronounced as “my ess-que-ell,” in contrast with SQL, pronounced “sequel.”</p><p>RDBMS(关系型数据库)<br>RDBMS stands for Relational Database Management System. RDBMS is the basis for SQL, and for all modern database systems like MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.</p><p><a href="https://www.tutorialspoint.com/sql/sql-select-query.htm">sql tutorials</a></p><p> mySql相关</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial">How to Install MySQL on Ubuntu</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql">how-to-create-a-new-user-and-grant-permissions-in-mysql</a><br><a href="https://www.digitalocean.com/community/tutorials/a-basic-mysql-tutorial">a-basic-mysql-tutorial</a></p><blockquote><p>mysql -u root -p ## 以root身份登录</p></blockquote><p><a href="https://stackoverflow.com/questions/4932503/how-to-kill-mysql-connections">Too many connections</a><br>mysql连接多了容易爆内存，关掉的<a href="https://stackoverflow.com/questions/11091414/how-to-stop-mysqld">方法</a></p><blockquote><p>mysqladmin -u root -p shutdown ## 关闭<br>sudo /etc/init.d/mysql restart ## 重启<br>sudo systemctl disable mysql ##禁止开机启动<br><a href="https://stackoverflow.com/questions/1559955/host-xxx-xx-xxx-xxx-is-not-allowed-to-connect-to-this-mysql-server">host-xxx-xx-xxx-xxx-is-not-allowed-to-connect-to-this-mysql-server</a><br>1。 改表法。<br>可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称”%”</p></blockquote><p><a href="https://stackoverflow.com/questions/119008/cant-connect-to-mysql-server-on-localhost-10061">windows登录出错报10061的解决方式</a><br>services.msc =&gt; 找到MySQL57 =&gt; 右键（启动）</p><p>配置文件的位置:</p><blockquote><p>nano /etc/mysql/mysql.conf.d/mysqld.conf</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host = <span class="string">'%'</span> <span class="keyword">where</span> <span class="keyword">user</span> = <span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">select</span> host, <span class="keyword">user</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><ol><li>授权法。</li></ol><p>例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'myuser'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mypassword'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="keyword">FLUSH</span>   <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p><p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器，并使用mypassword作为密码<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'myuser'</span>@<span class="string">'192.168.1.3'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mypassword'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">FLUSH</span>   <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p><p>如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器的dk数据库，并使用mypassword作为密码<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> dk.* <span class="keyword">TO</span> <span class="string">'myuser'</span>@<span class="string">'192.168.1.3'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'mypassword'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">FLUSH</span>   <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></p><h2 id="HeidiSQL-中创建database记得选择character-set-‘utf-8’"><a href="#HeidiSQL-中创建database记得选择character-set-‘utf-8’" class="headerlink" title="HeidiSQL 中创建database记得选择character set ‘utf-8’"></a>HeidiSQL 中创建database记得选择character set ‘utf-8’</h2><p>Collation: ‘utf_8_general_cli’;</p><h2 id="CURD-COMMANDS"><a href="#CURD-COMMANDS" class="headerlink" title="CURD COMMANDS"></a>CURD COMMANDS</h2><p>首先要注意的是所有sql语句最后面都要跟一个分号<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> dbname;</span><br><span class="line"><span class="keyword">USE</span> dbname;</span><br><span class="line"></span><br><span class="line">## show how many tables are there in this table</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line"></span><br><span class="line">## create table</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> potluck (<span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,<span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),food <span class="built_in">VARCHAR</span>(<span class="number">30</span>),confirmed <span class="built_in">CHAR</span>(<span class="number">1</span>),signup_date <span class="built_in">DATE</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## show everyting</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> potluck;</span><br><span class="line"><span class="keyword">SELECT</span> user_id <span class="keyword">FROM</span> potluck;</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">FROM</span> potluck; // 这么写sql 语法有误，必须声明想要选出那些column</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## how does potluck look like?</span><br><span class="line"><span class="keyword">DESCRIBE</span> potluck;</span><br><span class="line"></span><br><span class="line">##我想看看当初这表的建表语句长什么样？</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> potluck;</span><br><span class="line"></span><br><span class="line">## ADD STUFF</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`potluck`</span> (<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`food`</span>,<span class="string">`confirmed`</span>,<span class="string">`signup_date`</span>) <span class="keyword">VALUES</span> (<span class="literal">NULL</span>, <span class="string">"John"</span>, <span class="string">"Casserole"</span>,<span class="string">"Y"</span>, <span class="string">'2012-04-11'</span>);</span><br><span class="line">### 亲测，在heidisql中这么输入也能insert一行,所以这些冒号也不是必须的。注意这里不是"单引号'"号而是"`"（tab键上面那个）</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (user_id,login,<span class="keyword">password</span>,email,date_added,date_modified) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">"firstlogin"</span>,<span class="string">"dumbpasws"</span>,<span class="string">"sample@email.com"</span>,<span class="string">'2012-03-09'</span>,<span class="string">'2018-01-09'</span>);</span><br><span class="line"></span><br><span class="line">## update stuff</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">`potluck`</span> <span class="keyword">SET</span> <span class="string">`confirmed`</span> = <span class="string">'Y'</span> <span class="keyword">WHERE</span> <span class="string">`potluck`</span>.<span class="string">`name`</span> =<span class="string">'Sandy'</span>;</span><br><span class="line">UPDATE user SET user_id = 11 WHERE user_id =10;## 亲测这么干也没问题</span><br><span class="line">SELECT user_id FROM user WHERE user_nick = 'john' OR user_id &gt; 10; ## 精确匹配字符串用等号</span><br><span class="line"></span><br><span class="line">UPDATE user SET salary= 10000 WHERE salary is NULL;## 更新的时候用=号，判断为空用IS NULL ，对应的也有IS NOT NULL.</span><br><span class="line">UPDATE user SET salary= 22000 WHERE salary &lt; 20000; ## 亲测这么干也行</span><br><span class="line"></span><br><span class="line">## 这样的条件语句还有很多，这个应该叫做Operator(操作符)</span><br><span class="line">操作符主要分为四类</span><br><span class="line">Arithmetic operators  （数学加减乘除）</span><br><span class="line">Comparison operators（比较大小的）</span><br><span class="line">Logical operators （逻辑运算符） AND， ANY, BETWEEN,EXISTS,LIKE,OR ,IS NULL ,IS NOT NULL, UNIQUE</span><br><span class="line">Operators used to negate conditions</span><br><span class="line"></span><br><span class="line">挑几个不容易理解的，下面这个叫做子查询</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> todo <span class="keyword">WHERE</span> user_id = <span class="number">1</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## UNIQUE是用在创建表或者改表结构的:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">Id_P <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">LastName <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">FirstName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="keyword">UNIQUE</span> (Id_P)</span><br><span class="line">)</span><br><span class="line">// <span class="keyword">unique</span>的意思很明显，不能允许出现同样的<span class="keyword">row</span></span><br><span class="line"></span><br><span class="line">如果在<span class="keyword">SELECT</span>的时候想要去重，用<span class="keyword">DISTINCT</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">content</span> <span class="keyword">FROM</span> todo;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span>  todo; // 看下当前数据库有多少行了</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> <span class="keyword">content</span>) <span class="keyword">FROM</span>  todo; // 去重后看下有多少行</span><br><span class="line"></span><br><span class="line">### 模糊查询</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">user</span>] <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">'%三%'</span>; //将会把u_name为“张三”，“张猫三”、“三脚猫”，“唐三藏”等等有“三”的记录全找出来。</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">user</span>] <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">'_三_'</span>;  //只找出“唐三藏”这样u_name为三个字且中间一个字是“三”的；_ ： 表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字</span><br><span class="line">符长度语句：</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">user</span>] <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">'[张李王]三'</span> ; 将找出“张三”、“李三”、“王三”（而不是“张李王三”）；</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> [<span class="keyword">user</span>] <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">'[^张李王]三'</span>; 将找出不姓“张”、“李”、“王”的“赵三”、“孙三”等；</span><br><span class="line"></span><br><span class="line">## orderBy</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> CUSTOMERS <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">NAME</span> <span class="keyword">DESC</span>; //就是把查出来的结果排序，按照名称的ASIC顺序倒序排列</span><br><span class="line"></span><br><span class="line">## groupBy</span><br><span class="line">GROUP BY的顺序在orderBy前面(groupby要写在orderby前面)，意思就是把相同结果的整合成一行</span><br><span class="line">基本的语法是</span><br><span class="line"><span class="keyword">SELECT</span> column_one <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span></span><br><span class="line">  column_two = <span class="string">""</span> <span class="keyword">AND</span> ...</span><br><span class="line">  <span class="keyword">GROUP</span> <span class="keyword">BY</span> column_one</span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> column_two;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>, <span class="keyword">SUM</span>(SALARY) <span class="keyword">FROM</span> CUSTOMERS</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">NAME</span>; // 这里还用了sum函数，计算CUSTOMER表中各个用户的salary总和，name相同的算作一个合并起来。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## we want to add a column to table</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> potluck <span class="keyword">ADD</span> email <span class="built_in">VARCHAR</span>(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">## this way we add to a specific position</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> potluck <span class="keyword">ADD</span> email <span class="built_in">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">AFTER</span> <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line">## drop this column</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> potluck <span class="keyword">DROP</span> email;</span><br><span class="line"></span><br><span class="line">## how about delete this row</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> potluck  <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'Sandy'</span>;</span><br><span class="line"></span><br><span class="line">## 从删库到跑路</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span>  table_name; //将这张表的内容全部抹掉</span><br><span class="line">##  error: Cannot truncate a table referenced in a foreign key constraint(有时候会碰到这种错误，这也是约束的一种体现)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name; //删除这个数据库</span><br></pre></td></tr></table></figure></p><p>一些实用的例子：</p><h2 id="单列数据分组统计"><a href="#单列数据分组统计" class="headerlink" title="单列数据分组统计"></a>单列数据分组统计</h2><p>SELECT id,name,SUM(price) AS title,date FROM tb_price GROUP BY pid ORDER BY title DESC;</p><h2 id="多列数据分组统计"><a href="#多列数据分组统计" class="headerlink" title="多列数据分组统计"></a>多列数据分组统计</h2><p>SELECT id,name,SUM(price*num) AS sumprice  FROM tb_price GROUP BY pid ORDER BY sumprice DESC;</p><h2 id="多表分组统计"><a href="#多表分组统计" class="headerlink" title="多表分组统计"></a>多表分组统计</h2><p>SELECT a.name,AVG(a.price),b.name,AVG(b.price) FROM tb_demo058 AS a,tb_demo058_1 AS b WHERE a.id=b.id GROUP BY b.type;</p><h2 id="跨表查询"><a href="#跨表查询" class="headerlink" title="跨表查询"></a>跨表查询</h2><p>现实生活中经常要从多个数据表中读取数据，关键字JOIN<br>根据ForeignKey去查询：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">## 主表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department(</span><br><span class="line">            <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">            <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">            description <span class="built_in">varchar</span>(<span class="number">100</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">## 从表，外键是在从表中创建，从而找到与主表之间的联系</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee(</span><br><span class="line">            <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,</span><br><span class="line">            <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">            gender <span class="built_in">varchar</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">            salary <span class="built_in">float</span>(<span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">            age <span class="built_in">int</span>(<span class="number">2</span>),</span><br><span class="line">            gmr <span class="built_in">int</span>,</span><br><span class="line">            dept_id <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">## 外键可以在建表的时候加，也可以在建表完成之后加</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employee <span class="keyword">ADD</span> FOREIGN <span class="keyword">KEY</span>(dept_id) <span class="keyword">REFERENCES</span> department(<span class="keyword">id</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[ON <span class="keyword">DELETE</span> &#123;RESTRICT | <span class="keyword">CASCADE</span> | <span class="keyword">SET</span> <span class="literal">NULL</span> | <span class="keyword">NO</span> <span class="keyword">ACTION</span>&#125;]</span><br><span class="line"></span><br><span class="line">[<span class="keyword">ON</span> <span class="keyword">UPDATE</span> &#123;RESTRICT | <span class="keyword">CASCADE</span> | <span class="keyword">SET</span> <span class="literal">NULL</span> | <span class="keyword">NO</span> <span class="keyword">ACTION</span>&#125; </span><br><span class="line"></span><br><span class="line">## 写django的时候就会注意到<span class="keyword">CASCADE</span>（级联）这个单词，如果主表的记录删掉，则从表中相关联的记录都将被删掉。</span><br><span class="line">RESTRICT(限制)：如果你想删除的那个主表，它的下面有对应从表的记录，此主表将无法删除。（这个好像是默认规则）</span><br><span class="line"><span class="keyword">SET</span> <span class="literal">NULL</span>：将外键设置为空。</span><br><span class="line"><span class="keyword">NO</span> <span class="keyword">ACTION</span>：什么都不做。</span><br></pre></td></tr></table></figure></p><p>以上，每个员工有一个dep_id的Foreign_key，对应department表中的id.<br>删除外键</p><blockquote><p>alter table emp drop foreign key 外键名;</p></blockquote><p>开始联表查询，区分inner join ,left join, right join<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">##下面这俩一样的</span><br><span class="line">##inner join，只列出匹配的记录</span><br><span class="line">select e.name,d.name from employee e inner join department d on e.dept_id=d.id; ##inner可以不写，默认是inner</span><br><span class="line"><span class="keyword">select</span> e.name,d.name <span class="keyword">from</span> employee e,department d <span class="keyword">where</span> e.dept_id=d.id; </span><br><span class="line"></span><br><span class="line">## left join 左连接即以左表为基准，显示坐标所有的行，右表与左表关联的数据会显示，不关联的则不显示。</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">table</span> a <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">table</span> b <span class="keyword">on</span> a.id = b.ta_id;</span><br><span class="line"></span><br><span class="line">## right join 右表列出全部，左表只列出匹配的记录。</span><br><span class="line"></span><br><span class="line">## 自连接(据说非常重要)，下面这句查询出员工姓名及其leader的姓名，是的，sql语句里面赋值都是行的。这种带点号的还真像object oriented promramming</span><br><span class="line"><span class="keyword">select</span> e1.name 员工, e2.name 领导 <span class="keyword">from</span> employee e1 <span class="keyword">left</span> <span class="keyword">join</span> employee e2 <span class="keyword">on</span> e1.leader=e2.id;</span><br><span class="line">## 等于说根据表名虚拟出两张表</span><br><span class="line">## 查询所有leader的姓名</span><br><span class="line"><span class="keyword">select</span> e2.name 领导 <span class="keyword">from</span> employee e1 <span class="keyword">left</span> <span class="keyword">join</span> employee e2 <span class="keyword">on</span> e1.leader=e2.id;</span><br></pre></td></tr></table></figure></p><p>以上还只是两张表连在一起查，现实中还有n张表连在一起查，下面这个是三张表一起查</p><blockquote><p>select table a left join table b(left join table c on b.id = c.tb_id) on a.id = b_ta.id</p></blockquote><p>再加的话就是多张表在一起查，其实就是一层层的sql嵌套，写的时候从外层往里面写，一层层left join。</p><h2 id="这个子查询是查找月薪最高的员工的名字"><a href="#这个子查询是查找月薪最高的员工的名字" class="headerlink" title="这个子查询是查找月薪最高的员工的名字"></a>这个子查询是查找月薪最高的员工的名字</h2><p>SELECT name,salary from employee where salary=(select max(salary) from employee);</p><h2 id="查询每个部门的平均月薪"><a href="#查询每个部门的平均月薪" class="headerlink" title="查询每个部门的平均月薪"></a>查询每个部门的平均月薪</h2><p>select avg(salary),dept_id from employee where dept_id is not null group by depy_id;</p><h2 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h2><p>在sqlite3中是<a href="https://stackoverflow.com/questions/26652393/how-to-correctly-set-auto-increment-fo-a-column-in-sqlite-using-python">这么</a>干的<br>下面的python sqlalchemy语句是亲测通过的<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line">db_uri = <span class="string">"sqlite:///db.sqlite"</span></span><br><span class="line">engine = create_engine(db_uri)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DBAPI - PEP249</span></span><br><span class="line"><span class="comment"># create table</span></span><br><span class="line">engine.execute(<span class="string">'CREATE TABLE IF NOT EXISTS "EX1" ('</span></span><br><span class="line">               <span class="string">'id INTEGER PRIMARY KEY AUTOINCREMENT,'</span></span><br><span class="line">               <span class="string">'name VARCHAR);'</span>)</span><br><span class="line"><span class="comment"># insert a raw</span></span><br><span class="line">engine.execute(<span class="string">'INSERT INTO "EX1" '</span></span><br><span class="line">               <span class="string">'( name) '</span></span><br><span class="line">               <span class="string">'VALUES ("raw1")'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># select *</span></span><br><span class="line">result = engine.execute(<span class="string">'SELECT * FROM '</span></span><br><span class="line">                        <span class="string">'"EX1"'</span>)</span><br><span class="line"><span class="keyword">for</span> _r <span class="keyword">in</span> result:</span><br><span class="line">   print(_r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># delete *</span></span><br><span class="line"><span class="comment"># engine.execute('DELETE from "EX1" where id=1;')</span></span><br><span class="line">result = engine.execute(<span class="string">'SELECT * FROM "EX1"'</span>)</span><br><span class="line">print(result.fetchall())</span><br></pre></td></tr></table></figure></p><p>auto increment只要在insert的时候直接忽略掉自增的字段就好了，否则会报unique constraint failed</p><h3 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h3><p>signed or unsigned.(有符号或者无符号的)</p><ul><li>Numeric<br>INT (signed : -2147483648 to 2147483647  or unsigned: 0 to 4294967295.)，2的32次方(4 byte)<br>TINYINT(signed : -128 to 127, or unsigned: from 0 to 255)，2的八次方(1 byte)<br>BIGINT( signed :-32768 to 32767, or unsigned: from 0 to 65535.)，2的四次方(2 byte)<br>FLOAT(只能是signed)，<br>DOUBLE，<br>DECIMAL</li><li>Date and Time<br>DATE (1973-12-30), DATETIME (1973-12-30 15:30:00),TIMESTAMP (19731230153000),TIME (HH:MM:SS),</li><li>String Types.<br>CHAR(fixed-length，长度固定，不强制要求设置长度，默认1) ,<br>VARCHAR(ariable-length string between 1 and 255，长度可变， ),<br>BLOB or TEXT(BLOBs case sensitive，TEXT not case sensitive,这俩不需要设定长度，最大长度65535 )<br>ENUM (置顶的枚举类型中之一，可以为NULL)<br><del>BOOLEAN类型是不存在的</del>用TINYINT就好了，0表示false，1表示true;</li></ul><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>constraint的一个例子，A表的一个column引用了B表的一个id键作为foreign key.这时候如果想往A表里添加数据，假如尝试添加的这个外键在B表中不存在，会无法执行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> todo (todo_id,user_id,<span class="keyword">content</span>,completed,date_added,date_modified) <span class="keyword">VALUES</span> (<span class="number">102</span>,<span class="number">11</span>,<span class="string">"random stufffssss"</span>,<span class="number">0</span>,<span class="string">"2012-02-09"</span>,<span class="string">"2016-03-27"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="Joins-clause-从多个表中进行查询，对共有的属性进行操作"><a href="#Joins-clause-从多个表中进行查询，对共有的属性进行操作" class="headerlink" title="Joins clause 从多个表中进行查询，对共有的属性进行操作"></a>Joins clause 从多个表中进行查询，对共有的属性进行操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">NAME</span>, AGE, AMOUNT <span class="keyword">FROM</span> CUSTOMERS, ORDERS <span class="keyword">WHERE</span>  CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br><span class="line"></span><br><span class="line">inner join(查的是customer表，但查出来的结果里有来自ORDERS的column)</span><br><span class="line">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class="line">   FROM CUSTOMERS</span><br><span class="line">   INNER JOIN ORDERS</span><br><span class="line">   ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><p>这一部分应该属于sql的函数了<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>();  // YYYY-MM-DD格式 2018-02-10</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>(); // 2018-02-10 15:49:10</span><br><span class="line">想要时间戳的话可以这么干</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">unix_timestamp</span>(); // 1518249025</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">unix_timestamp</span>(<span class="string">'2008-08-08'</span>);  // 1218124800</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">unix_timestamp</span>(<span class="keyword">CURDATE</span>());   //1518192000</span><br><span class="line"></span><br><span class="line">// <span class="keyword">insert</span>一行的时候自动设置插入的时间戳，当然简单了.</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> Student</span><br><span class="line">(</span><br><span class="line">  <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  DateOfAddmission datetime <span class="keyword">default</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*下面这个也是行的，CURRENT_TIMESTAMP是一个关键字*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> foo (</span><br><span class="line">    creation_time      DATETIME <span class="keyword">DEFAULT</span>   <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    modification_time  DATETIME <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">modification_time DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br></pre></td></tr></table></figure></p><h3 id="建索引-Advanced-sql"><a href="#建索引-Advanced-sql" class="headerlink" title="建索引(Advanced sql)"></a>建索引(Advanced sql)</h3><p>常常听后台的人说，这个sql查询太慢了，要建索引哈。<br>但是索引对于提高查询性能也不是万能的，也不是建立越多的索引就越好。索引建少了，用 WHERE 子句找数据效率低，不利于查找数据。索引建多了，不利于新增、修改和删除等操作，因为做这些操作时，SQL SERVER 除了要更新数据表本身，还要连带立即更新所有的相关索引，而且过多的索引也会浪费硬盘空间。</p><p>查了下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PersonIndex</span><br><span class="line"><span class="keyword">ON</span> Person (LastName) ; //名为 "PersonIndex"，在 Person 表的 LastName 列：</span><br></pre></td></tr></table></figure></p><p>sql建索引主要是为了查找的时候能够跟翻字典一样快。一般来说，主键，外键应该建索引，频繁更新的列就不要更新索引了<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> salary_index <span class="keyword">ON</span> COMPANY(salary); // 创建索引</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> COMPANY INDEXED <span class="keyword">BY</span> salary_index <span class="keyword">WHERE</span> salary &gt; <span class="number">5000</span>; //创建好了之后就要根据index来查了</span><br><span class="line"></span><br><span class="line">适合建索引的列是出现在WHERE子句中的列，或者join子句(on语句)中指定的列，就是说那些被当做条件的东西应该作为索引。</span><br><span class="line">索引不要搞得太多，建立索引和维护索引都比较耗时。<span class="keyword">update</span>,<span class="keyword">delete</span>,<span class="keyword">insert</span>都要维护索引</span><br></pre></td></tr></table></figure></p><h3 id="Transaction-事务"><a href="#Transaction-事务" class="headerlink" title="Transaction 事务"></a>Transaction 事务</h3><ul><li><p>Atomicity − ensures that all operations within the work unit are completed successfully. Otherwise, the transaction is aborted at the point of failure and all the previous operations are rolled back to their former state.</p></li><li><p>Consistency − ensures that the database properly changes states upon a successfully committed transaction.</p></li><li><p>Isolation − enables transactions to operate independently of and transparent to each other.</p></li><li><p>Durability − ensures that the result or effect of a committed transaction persists in case of a system failure.</p></li></ul><p>论ACID是什么<br>事务的写法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> CUSTOMERS</span><br><span class="line">   <span class="keyword">WHERE</span> AGE = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span>; //回滚</span><br><span class="line"><span class="keyword">COMMIT</span>; //提交更改</span><br><span class="line"><span class="keyword">SAVEPOINT</span> SAVEPOINT_NAME;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> SAVEPOINT_NAME;</span><br></pre></td></tr></table></figure></p><h2 id="language-support"><a href="#language-support" class="headerlink" title="language support"></a>language support</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>java的版本<a href="https://spring.io/guides/gs/accessing-data-mysql/">accessing-data-mysql</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vae.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCtest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数据库连接地址</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String URL = <span class="string">"jdbc:mysql://localhost:3306/JDBCdb"</span>;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String USERNAME = <span class="string">"root"</span>;</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String PASSWORD = <span class="string">"smyh"</span>;</span><br><span class="line">    <span class="comment">//驱动类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String DRIVER = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//insert(p);</span></span><br><span class="line">        <span class="comment">//update(p);</span></span><br><span class="line">        <span class="comment">//delete(3);</span></span><br><span class="line">        insertAndQuery();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法：使用PreparedStatement插入数据、更新数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertAndQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Connection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVER);</span><br><span class="line">            conn = DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line">            String sql1 = <span class="string">"insert into user(name,pwd)values(?,?)"</span>;</span><br><span class="line">            String sql2 = <span class="string">"update user set pwd=? where name=?"</span>;</span><br><span class="line">            PreparedStatement ps = conn.prepareStatement(sql1); <span class="comment">// 这行其实比较费性能</span></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"smyhvae"</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>, <span class="string">"007"</span>);            </span><br><span class="line">            ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">            ps = conn.prepareStatement(sql2);</span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"008"</span>);</span><br><span class="line">            ps.setString(<span class="number">2</span>, <span class="string">"smyh"</span>);            </span><br><span class="line">            ps.executeUpdate();            </span><br><span class="line"></span><br><span class="line">            ps.close();</span><br><span class="line">            conn.close();            </span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://spring.io/guides/gs/accessing-data-jpa/">Spring里面用的是jpa</a></p><p>python的版本<a href="http://www.runoob.com/python/python-mysql.html">python-mysql</a></p><blockquote><p>python3不再支持mysqldb 请用pymysql和mysql.connector</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql </span><br><span class="line">conn = pymysql.connect(host=’<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>’, port=<span class="number">3306</span>, user=’root’, passwd=’test’, </span><br><span class="line">db=’mysql’) </span><br><span class="line">cur = conn.cursor() </span><br><span class="line">cur.execute(“SELECT * FROM user”) </span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> cur.fetchall(): </span><br><span class="line">    print(r) </span><br><span class="line"><span class="comment">#cur.close() </span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p>实际开发中都用的orm框架,sqlAlchemy</p><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p><a href="https://github.com/mysqljs/mysql">using mysql in node js</a></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>SQLite支持事务，这就以外这需要在并发环境下，保持事务的ACID特性。Sqlite的锁实现基于文件锁，对于Linux系统，文件锁主要包含协同锁和强制锁。</p><p><a href="https://stackoverflow.com/questions/8442147/how-to-delete-or-add-column-in-sqlite">sqlite不支持删除column,确定无疑</a><br>SQLite supports a limited subset of ALTER TABLE. The ALTER TABLE command in SQLite allows the user to rename a table or to add a new column to an existing table. It is not possible to rename a column, remove a column, or add or remove constraints from a table.<br>It is not possible to rename a column, remove a column, or add or remove constraints from a table。//更改约束也不行</p><p>alter table record drop column name;  //报错</p><p>//一种周转的方法<br>create table temp as select recordId, customer, place, time from record where 1 = 2;  //复制record的表结构，不包含内容<br>drop table record;<br>alter table temp rename to record;  </p><p>// Sqlite的优化手段</p><ol><li>beginTransaction</li><li>DB.compileStatement(“DELETE FROM users WHERE first_name = ?”)//节省了每次parse sql语句的开销</li><li><a href="https://www.jianshu.com/p/faa5e852b76b">sqlite一次插入多条记录的优化方法</a>，使用union</li></ol><p>观察到一个现象，在编辑数据库，数据库打开的情况下，test.db所在的文件夹下面同时生成了一个test.db.journal文件，一旦关闭数据库连接，这个文件就没了。</p><p>你的数据库用什么存储引擎？区别是？<br>答案：常见的有MyISAM和InnoDB。<br>MyISAM：不支持外键约束。不支持事务。对数据大批量导入时，它会边插入数据边建索引，所以为了提高执行效率，应该先禁用索引，在完全导入后再开启索引。<br>InnoDB：支持外键约束，支持事务。对索引都是单独处理的，无需引用索引。</p><p><a href="https://www.thatyou.cn/flask%E4%BD%BF%E7%94%A8flask-sqlalchemy%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E4%B8%89%EF%BC%89-%E8%81%94%E8%A1%A8%E4%B8%80%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/">联表一对多查询</a><br><a href="https://www.thatyou.cn/flask%E4%BD%BF%E7%94%A8flask-sqlalchemy%E6%93%8D%E4%BD%9Cmysql%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E5%9B%9B%EF%BC%89-%E8%81%94%E8%A1%A8%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%9F%A5%E8%AF%A2/">联表多对多查询</a></p><h3 id="Another-choice"><a href="#Another-choice" class="headerlink" title="Another choice"></a>Another choice</h3><p><a href="https://mariadb.org/">mariadb</a> MariaDb是在oracle收购mysql之后，社区fork的一个mysql版本，除了packagename不一样以外，操作都差不多。<br>PostgreSQL</p><p>建表语句:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`user_password`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`user_nickname`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`user_email`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`user_id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`user_name`</span> (<span class="string">`user_name`</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`news`</span> (<span class="string">`news_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,<span class="string">`news_author`</span> <span class="built_in">int</span>(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,<span class="string">`news_date`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,<span class="string">`news_content`</span> longtext <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="string">`news_title`</span> <span class="built_in">text</span> <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="string">`news_excerpt`</span> <span class="built_in">text</span> <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,<span class="string">`news_status`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'publish'</span>,<span class="string">`news_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,<span class="string">`news_category`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,PRIMARY <span class="keyword">KEY</span> (<span class="string">`news_id`</span>), <span class="keyword">KEY</span> <span class="string">`type_status_date`</span> (<span class="string">`news_status`</span>,<span class="string">`news_date`</span>,<span class="string">`news_id`</span>),<span class="keyword">KEY</span> <span class="string">`post_author`</span> (<span class="string">`news_author`</span>)) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">15</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure></p><p>mysql&gt; describe user;<br>+—————+———————+——+—–+———+—————-+<br>| Field         | Type                | Null | Key | Default | Extra          |<br>+—————+———————+——+—–+———+—————-+<br>| user_id       | bigint(20) unsigned | NO   | PRI | NULL    | auto_increment |<br>| user_name     | varchar(60)         | NO   | MUL |         |                |<br>| user_password | varchar(30)         | NO   |     |         |                |<br>| user_nickname | varchar(50)         | YES  |     |         |                |<br>| user_email    | varchar(100)        | NO   | MUL |         |                |<br>+—————+———————+——+—–+———+—————-+<br>5 rows in set (0.00 sec)</p><p>mysql&gt; describe news;<br>+—————+———————+——+—–+——————-+—————-+<br>| Field         | Type                | Null | Key | Default           | Extra          |<br>+—————+———————+——+—–+——————-+—————-+<br>| news_id       | bigint(20) unsigned | NO   | PRI | NULL              | auto_increment |<br>| news_author   | int(6)              | NO   | MUL | 0                 |                |<br>| news_date     | datetime            | NO   |     | CURRENT_TIMESTAMP |                |<br>| news_content  | longtext            | NO   |     | NULL              |                |<br>| news_title    | text                | NO   |     | NULL              |                |<br>| news_excerpt  | text                | NO   |     | NULL              |                |<br>| news_status   | varchar(20)         | NO   | MUL | publish           |                |<br>| news_modified | datetime            | NO   |     | CURRENT_TIMESTAMP |                |<br>| news_category | int(4)              | NO   |     | NULL              |                |<br>+—————+———————+——+—–+——————-+—————-+<br>9 rows in set (0.00 sec)</p><p><a href="https://spring.io/guides/gs/accessing-data-mysql/">spring官方给的手把手教程很详细</a><br>乐观锁(需要自己实现或者使用orm框架)和悲观锁(数据库自带).<br>悲观锁包括共享锁和排他锁:<br>共享锁: 在执行sql语句屁股后面加上lock in share mode<br>排他锁：在执行sql语句屁股后面加上for update</p><p>举个例子：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">begin; ##开启一个实务，不commit</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> city <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">"1"</span>  <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"></span><br><span class="line">update  city set name="666" where id ="1"; ##会error的</span><br></pre></td></tr></table></figure></p><p>另外还有行锁，表锁<br>行锁： SELECT * from city where id = “1”  lock in share mode;<br>AUTO_INCREMENT有时候不会从1开始</p><p>mysql查看连接数<br>生产环境Mysql吃内存特别厉害的解决途径<br><a href="http://www.runoob.com/sql/sql-groupby.html">todo 建表，实查</a></p><p>mysql存储中文数据有什么要注意的嘛</p><p>primary key是两个key的组合也是可以的<br>mysql&gt; CREATE TABLE score( student_id INT UNSIGNED NOT NULL, event_id INT UNSIGNED NOT NULL, score INT NOT NULL, PRIMARY KEY(event_id, student_id));</p><p><a href="http://www.newthinktank.com/2014/08/mysql-video-tutorial/">pragmatic copy paste cheet sheet</a></p><blockquote><p>SELECT last_name,first_name,state FROM students WHERE first_name LIKE ‘D%’ OR last_name LIKE ‘%n’ GROUP BY state;<br>ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column ‘Banana.students.last_name’ which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by<br>改成<br> SELECT last_name,first_name,state FROM students WHERE first_name LIKE ‘D%’ OR last_name LIKE ‘%n’ GROUP BY last_name,first_name,state;</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/fuchsia-973x547.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gradle command记事本</title>
    <link href="https://haldir65.github.io/2018/02/03/2018-02-03-gradle-command-explained/"/>
    <id>https://haldir65.github.io/2018/02/03/2018-02-03-gradle-command-explained/</id>
    <published>2018-02-03T14:46:09.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.haldir66.ga/static/imgs/street lights dark night car city.jpg" alt=""><br><a id="more"></a></p><p><a href="https://gradle.org/">Gradle</a>插件开发，官方推荐的具备first class supprot 的IDE包括Android Studio和Intelij Idea等。<br>Gradle的编译流程分为三步<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html">build_lifecycle</a><br>Initialization -&gt; Configuration -&gt; Execution<br>执行的单位叫做<a href="https://docs.gradle.org/current/userguide/more_about_tasks.html">Task</a><br><a href="https://docs.gradle.org/current/userguide/build_environment.html">Gradle作为一个program，可以为编译环境设置的参数很多</a></p><blockquote><p>Android dependency ‘com.android.support:support-v4’ has different version for the compile (21.0.3) and runtime (26.1.0) classpath. You should manually set the same version via DependencyResolution</p></blockquote><p>一些常用的gralde的command 如下</p><blockquote><p>gradlew :app:dependencies –configuration releaseCompileClasspath<br>//前面这个:app只是代表app这个project的<br>gradle tasks –all ## 查看当前project的所有tasks<br>gradle taskA taskB ##多个task是可以同时执行的<br>gradle –status  ## 查看当前操作系统中还有那些Daemon可以用</p></blockquote><p>afterEvaluate是属于project的属性(也可以在allProject中加)</p><p>I forced the version of support-v4 using this block in root build.gradle:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    project.configurations.all &#123;</span><br><span class="line">        resolutionStrategy.eachDependency &#123; details -&gt;</span><br><span class="line">            <span class="keyword">if</span> (details.requested.group == <span class="string">'com.android.support'</span></span><br><span class="line">                    &amp;&amp; !details.requested.name.contains(<span class="string">'multidex'</span>) ) &#123;</span><br><span class="line">                details.useVersion <span class="string">"$supportlib_version"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/42374151/all-com-android-support-libraries-must-use-the-exact-same-version-specification">All com.android.support libraries must use the exact same version [duplicate]</a></p><p>关于gradlew只是一层gradle的wrapper，找到这么一段话:<br><strong>The Gradle Wrapper is the preferred way of starting a Gradle build. It consists of a batch script for Windows and a shell script for OS X and Linux. These scripts allow you to run a Gradle build without requiring that Gradle be installed on your system. This used to be something added to your build file, but it’s been folded into Gradle, so there is no longer any need. Instead, you simply use the following command.</strong></p><blockquote><p>$ gradle wrapper –gradle-version 2.13</p><p>./gradlew -v 版本号<br>./gradlew clean 清除app目录下的build文件夹<br>./gradlew build 检查依赖并编译打包<br>./gradlew assembleDebug 编译并打Debug包<br>./gradlew assembleRelease 编译并打Release的包<br>或者<br>./gradlew aR<br>./gradlew installRelease Release模式打包并安装<br>或者<br>./gradlew iR<br>./gradlew uninstallRelease 卸载Release模式包</p></blockquote><p>Android项目迁移到gradle 3.0需要注意的一些事</p><ul><li>implementation和api的区别：<blockquote><p>When your module configures an implementation dependency, it’s letting Gradle know that the module does not want to leak the dependency to other modules at compile time. That is, the dependency is available to other modules only at runtime.<br>Using this dependency configuration instead of api or compile can result in significant build time improvements because it reduces the amount of projects that the build system needs to recompile. For example, if an implementation dependency changes its API, Gradle recompiles only that dependency and the modules that directly depend on it. Most app and test modules should use this configuration.<br>// a module 使用implementation引入了某个dependency，这个依赖就不会暴露给依赖于a的mudule。</p></blockquote></li></ul><blockquote><p>When a module includes an api dependency, it’s letting Gradle know that the module wants to transitively export that dependency to other modules, so that it’s available to them at both runtime and compile time. This configuration behaves just like compile (which is now deprecated), and you should typically use this only in library modules. That’s because, if an api dependency changes its external API, Gradle recompiles all modules that have access to that dependency at compile time. So, having a large number of api dependencies can significantly increase build times. Unless you want to expose a dependency’s API to a separate test module, app modules should instead use implementation dependencies.<br>//所以如果想要把自己的某项依赖暴露出去，让依赖自己的mudule也能用到这项依赖，就要用api了<br>但是api和之前的compile是一样的，所以编译速度比implementation慢很多。</p></blockquote><p>看到一份关于android build tasks解释的<a href="https://www.diycode.cc/topics/683">非常好的文章</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mergeDebugResources任务的作用是解压所有的aar包输出到app/build/intermediates/exploded-aar，并且把所有的资源文件合并到app/build/intermediates/res/merged/debug目录里</span><br><span class="line"></span><br><span class="line">processDebugManifest任务是把所有aar包里的AndroidManifest.xml中的节点，合并到项目的AndroidManifest.xml中，并根据app/build.gradle中当前buildType的manifestPlaceholders配置内容替换manifest文件中的占位符，最后输出到app/build/intermediates/manifests/full/debug/AndroidManifest.xml</span><br><span class="line"></span><br><span class="line">processDebugResources的作用</span><br><span class="line">1、调用aapt生成项目和所有aar依赖的R.java,输出到app/build/generated/source/r/debug目录</span><br><span class="line">3、生成资源索引文件app/build/intermediates/res/resources-debug.ap_</span><br><span class="line">2、把符号表输出到app/build/intermediates/symbols/debug/R.txt</span><br><span class="line"></span><br><span class="line">compileDebugJavaWithJavac这个任务是用来把java文件编译成class文件，输出的路径是app/build/intermediates/classes/debug</span><br><span class="line">编译的输入目录有</span><br><span class="line">- 1、项目源码目录，默认路径是app/src/main/java，可以通过sourceSets的dsl配置，允许有多个（打印project.android.sourceSets.main.java.srcDirs可以查看当前所有的源码路径,具体配置可以参考android-doc</span><br><span class="line">- 2、app/build/generated/source/aidl</span><br><span class="line">- 3、app/build/generated/source/buildConfig</span><br><span class="line">- 4、app/build/generated/source/apt(继承javax.annotation.processing.AbstractProcessor做动态代码生成的一些库，输出在这个目录，具体可以参考Butterknife 和 Tinker)的代码</span><br><span class="line"></span><br><span class="line">transformClassesWithJarMergingForDebug的作用是把compileDebugJavaWithJavac任务的输出app/build/intermediates/classes/debug，和app/build/intermediates/exploded-aar中所有的classes.jar和libs里的jar包作为输入，合并起来输出到app/build/intermediates/transforms/jarMerging/debug/jars/1/1f/combined.jar，我们在开发中依赖第三方库的时候有时候报duplicate entry:xxx 的错误，就是因为在合并的过程中在不同jar包里发现了相同路径的类</span><br><span class="line"></span><br><span class="line">transformClassesWithMultidexlistForDebug这个任务花费的时间也很长将近8秒，它有两个作用</span><br><span class="line">- 1、扫描项目的AndroidManifest.xml文件和分析类之间的依赖关系，计算出那些类必须放在第一个dex里面,最后把分析的结果写到app/build/intermediates/multi-dex/debug/maindexlist.txt文件里面</span><br><span class="line">- 2、生成混淆配置项输出到app/build/intermediates/multi-dex/debug/manifest_keep.txt文件里</span><br><span class="line"></span><br><span class="line">项目里的代码入口是manifest中application节点的属性android.name配置的继承自Application的类，在android5.0以前的版本系统只会加载一个dex(classes.dex)，classes2.dex .......classesN.dex 一般是使用android.support.multidex.MultiDex加载的，所以如果入口的Application类不在classes.dex里5.0以下肯定会挂掉，另外当入口Application依赖的类不在classes.dex时初始化的时候也会因为类找不到而挂掉，还有如果混淆的时候类名变掉了也会因为对应不了而挂掉,综上所述就是这个任务的作用</span><br><span class="line"></span><br><span class="line">transformClassesWithDexForDebug这个任务的作用是把包含所有class文件的jar包转换为dex，class文件越多转换的越慢</span><br><span class="line">输入的jar包路径是app/build/intermediates/transforms/jarMerging/debug/jars/1/1f/combined.jar</span><br><span class="line">输出dex的目录是build/intermediates/transforms/dex/debug/folders/1000/1f/main</span><br></pre></td></tr></table></figure></p><p>app/build/intermediates/symbols/debug/R.txt这个文件长这样</p><blockquote><p>int anim abc_fade_in 0x7f010000<br>int anim abc_fade_out 0x7f010001<br>int anim abc_grow_fade_in_from_bottom 0x7f010002<br>int anim abc_popup_enter 0x7f010003<br>int anim abc_popup_exit 0x7f010004<br>int anim abc_shrink_fade_out_from_bottom 0x7f010005<br>int anim abc_slide_in_bottom 0x7f010006<br>int anim abc_slide_in_top 0x7f010007<br>int anim abc_slide_out_bottom 0x7f010008<br>int anim abc_slide_out_top 0x7f010009<br>int anim design_bottom_sheet_slide_in 0x7f01000a<br>int anim design_bottom_sheet_slide_out 0x7f01000b<br>int anim design_snackbar_in 0x7f01000c<br>int anim design_snackbar_out 0x7f01000d<br>int anim tooltip_enter 0x7f01000e<br>int anim tooltip_exit 0x7f01000f<br>int animator design_appbar_state_list_animator 0x7f020000<br>int attr actionBarDivider 0x7f030000<br>int attr actionBarItemBackground 0x7f030001<br>int attr actionBarPopupTheme 0x7f030002<br>int attr actionBarSize 0x7f030003<br>…<br>按照字母从a-z开始，hex value自增(0x7f开头)</p></blockquote><p>Android Studio中点击run之后，执行了这些tasks</p><blockquote><p>Task spend time:<br>      2ms  :app:preBuild<br>     64ms  :app:preDebugBuild<br>      9ms  :app:compileDebugAidl<br>      4ms  :app:compileDebugRenderscript<br>      1ms  :app:checkDebugManifest<br>      2ms  :app:generateDebugBuildConfig<br>      1ms  :app:prepareLintJar<br>      1ms  :app:generateDebugResValues<br>      0ms  :app:generateDebugResources<br>     57ms  :app:mergeDebugResources<br>      1ms  :app:createDebugCompatibleScreenManifests<br>      4ms  :app:processDebugManifest<br>      1ms  :app:splitsDiscoveryTaskDebug<br>     18ms  :app:processDebugResources<br>      1ms  :app:generateDebugSources<br>     11ms  :app:javaPreCompileDebug<br>     10ms  :app:compileDebugJavaWithJavac<br>      1ms  :app:compileDebugNdk<br>      0ms  :app:compileDebugSources<br>      4ms  :app:mergeDebugShaders<br>      1ms  :app:compileDebugShaders<br>      0ms  :app:generateDebugAssets<br>      8ms  :app:mergeDebugAssets<br>     19ms  :app:transformClassesWithDexBuilderForDebug<br>      6ms  :app:transformDexArchiveWithExternalLibsDexMergerForDebug<br>      7ms  :app:transformDexArchiveWithDexMergerForDebug<br>      1ms  :app:mergeDebugJniLibFolders<br>     12ms  :app:transformNativeLibsWithMergeJniLibsForDebug<br>     10ms  :app:transformNativeLibsWithStripDebugSymbolForDebug<br>      0ms  :app:processDebugJavaRes<br>     24ms  :app:transformResourcesWithMergeJavaResForDebug<br>      2ms  :app:validateSigningDebug<br>      7ms  :app:packageDebug<br>      0ms  :app:assembleDebug</p></blockquote><p>可以分成这5类吧</p><ul><li>Preparation of dependencies. During this phase Gradle check that all libraries this module depends on are ready. If this module depends on another one, that module would be built as well.</li><li>Merging resources and processing Manifest. After this phase resources and Manifest are ready to be packaged in the result file.</li><li>Compiling. This phase started with Annotation Processors, in case you use them. Then source code is compiled into byte code. If you are using AspectJ, weaving also happens here.</li><li>Postprocessing. All Gradle tasks with a “transform” prefix are part of this phase. Most important ones are: transformClassesWithMultidexlist and transformClassesWithDex. They produce .DEX files.</li><li>Packaging and publishing. For libraries this stage means creating an .AAR file in the end, for applications — .APK.</li></ul><p><a href="https://www.jianshu.com/p/cc88488e5163">简书上有人总结了</a></p><p>Gradle的Flavor能否配置sourceset?<br>在sourceSets中可以设置不同flavor各自的java.srcDirs和res.srcDirs</p><p>Product flavors<br>一个product flavor定义了从项目中构建了一个应用的自定义版本。一个单一的项目可以同时定义多个不同的flavor来改变应用的输出。<br>Build Type  + Product Flavor = Build Variant（构建类型+定制产品=构建变种版本）<br>这句话的意思就是，BuildTypes有n种，product flavor有m种，最终可能的组合有m*n种<br><a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants">Gradle Plugin User Guide</a></p><p><a href="https://tech.meituan.com/meituan_food_delivery_android_architecture_evolution.html">美团外卖Android平台化架构演进实践</a></p><p><a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx/pull/75/files#diff-a5277607f48bf80ac7edd5dbafa307ae">gradle 4.4之后Clock 被Deprecated的方案是自己创建一个groovy文件</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.gradle.util.Clock() <span class="comment">// 被Deprecated之后的解决方案</span></span><br></pre></td></tr></table></figure></p><p><a href="https://guides.gradle.org/building-android-apps/">building-android-apps</a></p><h2 id="2-创建java-Library并提交到jcenter的方法"><a href="#2-创建java-Library并提交到jcenter的方法" class="headerlink" title="2. 创建java Library并提交到jcenter的方法"></a>2. 创建java Library并提交到jcenter的方法</h2><p>JFrog 是软件管理和分发的领先通用解决方案JFrog 是软件管理和分发的领先通用解决方案，JFrog Bintray（通用分发平台）只是他家的众多服务之一。这个通用分发平台，就当CDN用好了。<br><a href="https://bintray.com/signup/oss">bintray的注册地址</a>。注册好了之后登录bintray，创建一个仓库，随便起名字，比如叫maven。在build.gradle中就可以引入</p><blockquote><p>maven { url ‘<a href="https://dl.bintray.com/yourusername/maven">https://dl.bintray.com/yourusername/maven</a>‘ }<br>compile ‘com.yourusername:librayName:1.0.0’</p></blockquote><p>到这里，就可以自己直接使用了。要想提交到jcenter(就是说不用添加一个maven {url }这样的源)，jcenter(托管在Bintray网站上的官方库，官方和普通的区别就是提交上去要审核)和mavenCentral也是仓库。只不过是有官方维护的了。因为maven的标准写法是</p><blockquote><p> maven { url “<a href="https://someurl">https://someurl</a>“ }   //<br> maven { url “<a href="https://jitpack.io">https://jitpack.io</a>“ }   // 比如说jitpack仓库</p></blockquote><p>正儿八经的上传到jcenter的方式：<br>一.在最外层build.gradle中添加</p><blockquote><p>classpath ‘com.github.dcendents:android-maven-gradle-plugin:1.3’   //<br>  classpath ‘com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6’</p></blockquote><p>配好了大概长这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:3.0.1&apos;</span><br><span class="line"></span><br><span class="line">        classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.4.1&apos;</span><br><span class="line">        classpath &apos;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6&apos;</span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        google()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>android-maven-gradle-plugin插件是用来打包Maven所需文件的。<br>gradle-bintray-plugin插件是用来将生成的Maven所需文件上传到Bintray的。</p><p>二.在library module的build.gradle中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.github.dcendents.android-maven&apos;</span><br><span class="line">apply plugin: &apos;com.jfrog.bintray&apos;</span><br><span class="line">// This is the library version used when deploying the artifact</span><br><span class="line">version = &quot;1.0.0&quot;</span><br><span class="line"></span><br><span class="line">def siteUrl = &apos;https://github.com/Haldir65/androidMedia&apos;      // 项目的主页</span><br><span class="line">def gitUrl = &apos;https://github.com/Haldir65/androidMedia.git&apos;   // Git仓库的url</span><br><span class="line">group = &quot;com.github.haldir65.starry&quot;                                        // Maven Group ID for the artifact，一般填你唯一的包名</span><br><span class="line">install &#123;</span><br><span class="line">    repositories.mavenInstaller &#123;</span><br><span class="line">        // This generates POM.xml with proper parameters</span><br><span class="line">        pom &#123;</span><br><span class="line">            project &#123;</span><br><span class="line">                packaging &apos;aar&apos;</span><br><span class="line">                // Add your description here</span><br><span class="line">                name &apos;Starry\n&apos; +</span><br><span class="line">                        &apos;Starry night\n&apos; +</span><br><span class="line">                        &apos;Paint your palette blue and grey&apos;</span><br><span class="line">                url siteUrl</span><br><span class="line">                // Set your license</span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name &apos;The Apache Software License, Version 2.0&apos;</span><br><span class="line">                        url &apos;http://www.apache.org/licenses/LICENSE-2.0.txt&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id &apos;haldir&apos;        //填写的一些基本信息</span><br><span class="line">                        name &apos;johnDoe&apos;</span><br><span class="line">                        email &apos;mjw090608@gmail.com&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection gitUrl</span><br><span class="line">                    developerConnection gitUrl</span><br><span class="line">                    url siteUrl</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task sourcesJar(type: Jar) &#123;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">    classifier = &apos;sources&apos;</span><br><span class="line">&#125;</span><br><span class="line">task javadoc(type: Javadoc) &#123;</span><br><span class="line">    source = android.sourceSets.main.java.srcDirs</span><br><span class="line">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class="line">&#125;</span><br><span class="line">task javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class="line">    classifier = &apos;javadoc&apos;</span><br><span class="line">    from javadoc.destinationDir</span><br><span class="line">&#125;</span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives javadocJar</span><br><span class="line">    archives sourcesJar</span><br><span class="line">&#125;</span><br><span class="line">Properties properties = new Properties()</span><br><span class="line">properties.load(project.rootProject.file(&apos;local.properties&apos;).newDataInputStream())</span><br><span class="line">bintray &#123;</span><br><span class="line">    user = properties.getProperty(&quot;bintray.user&quot;)</span><br><span class="line">    key = properties.getProperty(&quot;bintray.apikey&quot;)</span><br><span class="line">    configurations = [&apos;archives&apos;]</span><br><span class="line">    pkg &#123;</span><br><span class="line">        repo = &quot;maven&quot;</span><br><span class="line">        name = &quot;Starry&quot;    //发布到JCenter上的项目名字</span><br><span class="line">        websiteUrl = siteUrl</span><br><span class="line">        vcsUrl = gitUrl</span><br><span class="line">        licenses = [&quot;Apache-2.0&quot;]</span><br><span class="line">        publish = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">javadoc &#123; //jav doc采用utf-8编码否则会报“GBK的不可映射字符”错误</span><br><span class="line">    options&#123;</span><br><span class="line">        encoding &quot;UTF-8&quot;</span><br><span class="line">        charSet &apos;UTF-8&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三.在local.properities中添加</p><blockquote><p>bintray.user=your bintray username<br>bintray.apikey=your apikey</p></blockquote><p>记得把local.properties加到gitignore里面，搞定</p><p>在需要使用的module的build.gradle中引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url &apos;https://dl.bintray.com/haldir65/maven&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &apos;com.github.haldir65.starry:starry:1.0.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-Building-LifeCycle"><a href="#3-Building-LifeCycle" class="headerlink" title="3. Building LifeCycle"></a>3. Building LifeCycle</h2><p><a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases">编译的各个阶段的hook</a><br>正如gradle官网所介绍的，Build流程分为三个阶段(Initialization -&gt; Configuration -&gt; Execution) .</p><p>The settings file is executed during the initialization phase. 即settings.gradle中的语句是最早被执行的</p><h3 id="setting-gradle"><a href="#setting-gradle" class="headerlink" title="setting.gradle"></a>setting.gradle</h3><blockquote><p>println ‘This is executed during the initialization phase.’</p></blockquote><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">println <span class="string">'This is executed during the configuration phase.'</span></span><br><span class="line"></span><br><span class="line">task configured &#123;</span><br><span class="line">    println <span class="string">'This is also executed during the configuration phase.'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task test &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">'This is executed during the execution phase.'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task testBoth &#123;</span><br><span class="line">    doFirst &#123;</span><br><span class="line">      println <span class="string">'This is executed first during the execution phase.'</span></span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;</span><br><span class="line">      println <span class="string">'This is executed last during the execution phase.'</span></span><br><span class="line">    &#125;</span><br><span class="line">    println <span class="string">'This is executed during the configuration phase as well.'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><blockquote><p> gradle test testBoth<br>This is executed during the initialization phase.<br>This is executed during the configuration phase.<br>This is also executed during the configuration phase.<br>This is executed during the configuration phase as well.<br>:test<br>This is executed during the execution phase.<br>:testBoth<br>This is executed first during the execution phase.<br>This is executed last during the execution phase.<br>BUILD SUCCESSFUL in 0s<br>2 actionable tasks: 2 executed</p></blockquote><p>经常会在build.gradle中看到这样一段<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">afterEvaluate &#123; project -&gt;</span><br><span class="line">    logger.info(<span class="string">"=========afterEvaluate=============="</span>)</span><br><span class="line">    project.tasks.each &#123; task -&gt;</span><br><span class="line">        <span class="keyword">if</span> (task.name == <span class="string">"test"</span>||task.name.contains(<span class="string">"lint"</span>))&#123;</span><br><span class="line">            task.enabled = <span class="keyword">false</span> <span class="comment">// 有些不必要的确实可以剔除掉</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        task.enabled = false 这么干的话全部任务都不会执行</span></span><br><span class="line">       println(<span class="string">"-------------$&#123;task.name&#125;----"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>closure就是一对花括号包着的东西<br>afterEvaluate发生在Configuration之后，实际上也就是在project配置完成后，开始执行所有task前，对外提供一个closure，其实beforeEvaluate也有。</p><p><strong>immediately invoked after a task is added to a project</strong> 在Task被添加到project的时候执行closure<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tasks.whenTaskAdded &#123; task -&gt;</span><br><span class="line">    task.ext.srcDir = <span class="string">'src/main/java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task a</span><br><span class="line"></span><br><span class="line">println <span class="string">"source dir is $&#123;a.srcDir&#125;"</span></span><br></pre></td></tr></table></figure></p><p>project evaluate有可能成功，也会失败。但无论成功还是失败，下面的notification都会触发<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gradle.afterProject &#123;project, projectState -&gt;</span><br><span class="line">    <span class="keyword">if</span> (projectState.failure) &#123;</span><br><span class="line">        println <span class="string">"Evaluation of $project FAILED"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        println <span class="string">"Evaluation of $project succeeded"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在gradle的plugin中实现也有类似的<br>PluginImpl.groovy<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PluginImpl</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(Project project)</span> </span>&#123;</span><br><span class="line">     project.gradle.addProjectEvaluationListener() <span class="comment">// 和在build.gradle中afterEvaluate差不多</span></span><br><span class="line">     project.getGradle().taskGraph.addTaskExecutionGraphListener() <span class="comment">//在执行前</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Task execution graph ready(    graphPopulated,This method is called when the TaskExecutionGraph has been populated, and before any tasks are executed.)在任何task执行前被执行</p><p>Task execution(You can receive a notification immediately before and after any task is executed.)<br>(TaskExecutionListener,在task执行前和执行后)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">project.gradle.addListener(<span class="keyword">new</span> TaskExecutionListener() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">void</span> <span class="title">beforeExecute</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">void</span> <span class="title">afterExecute</span><span class="params">(Task task, TaskState taskState)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></p><p>而在build.gradle中是这样的写法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">task ok</span><br><span class="line"></span><br><span class="line"><span class="function">task <span class="title">broken</span><span class="params">(dependsOn: ok)</span> </span>&#123;</span><br><span class="line">    group <span class="string">'Welcome'</span> <span class="comment">// 这个是task的一个属性</span></span><br><span class="line">    description <span class="string">'Produces a greeting'</span> <span class="comment">// 这个是在project中输入gradle tasks之后输出的任务列表中每一项后面的描述信息</span></span><br><span class="line"></span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">'broken'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gradle.taskGraph.beforeTask &#123; Task task -&gt;</span><br><span class="line">    println <span class="string">"executing $task ..."</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gradle.taskGraph.afterTask &#123; Task task, TaskState state -&gt;</span><br><span class="line">    <span class="keyword">if</span> (state.failure) &#123;</span><br><span class="line">        println <span class="string">"FAILED"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        println <span class="string">"done"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-How-to-create-gradle-Plugin"><a href="#4-How-to-create-gradle-Plugin" class="headerlink" title="4. How to create gradle Plugin"></a>4. How to create gradle Plugin</h2><p><a href="https://github.com/helen-x/gradle-plugin-demo">整体的过程和这里面说的差不多</a></p><ol><li>add to your buidl script // 不可复用</li><li>创建BuildSrc文件夹 //依旧不可复用</li><li>创建一个Standalone Project //可复用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Project project)</span> </span>&#123;</span><br><span class="line">        project.task(<span class="string">"hello"</span>)</span><br><span class="line">          .doLast(task -&gt; System.out.println(<span class="string">"Hello Gradle!"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.jianshu.com/p/f43d48abfbf3">使用Transform Api在class变成dex之前对class进行字节码修改</a><br>本质上是在merge{ProductFlavor}{BuildType}Assets Task之后，transformClassesWithDexFor{ProductFlavor}{BuildType} Transform 之前,插入一个transformClassesWith{YourTransformName}For{ProductFlavor}{BuildType} Transform</p><h2 id="5-update"><a href="#5-update" class="headerlink" title="5. update"></a>5. update</h2><p><a href="https://github.com/myjoybar/Android-Router/blob/master/route.sh">待查看</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">preBuild &lt;&lt; &#123;</span><br><span class="line">    <span class="built_in">String</span> cmd = <span class="string">"sh inrouter/maker/route.sh "</span> + project.getName()</span><br><span class="line">    def cmdResult = cmd.execute().text.trim()</span><br><span class="line">    println cmdResult</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>echo "Start make"</span><br><span class="line"><span class="meta">#</span>javac -encoding utf-8 ./inrouter/maker/java/com/me/obo/maker/utils/*.java ./inrouter/maker/java/com/me/obo/maker/*.java -d inrouter/maker/class/  -cp inrouter/maker/libs/javapoet-1.9.0.jar</span><br><span class="line"><span class="meta">#</span>java -Djava.ext.dirs=inrouter/maker/libs -classpath inrouter/maker/class com.me.obo.maker.CodeMaker $1 $2</span><br><span class="line"><span class="meta">#</span>echo "End make"</span><br></pre></td></tr></table></figure><p><a href="https://github.com/Tencent/tinker/blob/master/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy">Tinker的gradle plugin实现，非常有参考意义</a><br>和java libraray提交到jcenter不同，gradle需要提交到<a href="https://guides.gradle.org/publishing-plugins-to-gradle-plugin-portal/">Gradle Plugin Portal</a>。没错，一个完全不一样的网站</p><p><a href="https://stackoverflow.com/questions/47300679/configuration-compile-in-is-deprecated-but-all-configurations-are-implementa">明明已经把所有的包都改成implementation了，编译器还是报error</a></p><blockquote><p>./gradlew :app:dependencies –configuration compile ##这条命令可以查询当前app中还有哪条依赖在用compile</p></blockquote><p>在setting.gradle中这么写也是可以的</p><blockquote><p>include ‘:library1’<br>project(‘:library1’).projectDir = new File(‘../StickyListHeader/library1’)</p></blockquote><p>buildScript中gradle library的搜索顺序。比如自己添加了一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">maven &#123;</span><br><span class="line">            url &apos;https://maven.google.com/&apos;</span><br><span class="line">            name &apos;Google&apos;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>像这样的repository</p><p><a href="https://github.com/adwiv/android-fat-aar">比较复杂的gradle knowledge</a><br><a href="https://guides.gradle.org/creating-new-gradle-builds/">official gradle docs 是最好的学习资料</a><br><a href="https://docs.gradle.org/current/userguide/custom_plugins.html">custom_plugins</a><br><a href="https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#configure-by-dag">Build Script Basics</a><br><a href="https://juejin.im/post/5a756f11f265da4e7c185bc5">关于Android Gradle你需要知道这些（4）</a><br><a href="https://juejin.im/post/5a767c7cf265da4e9c6300a1#heading-5">Gradle插件学习笔记（四)</a><br><a href="https://android.googlesource.com/platform/tools/build/+/tools_r22/gradle/src/main/groovy/com/android/build/gradle/BasePlugin.groovy">Android Gradle Plugin  source Code</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/street lights dark night car city.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DOM操作手册</title>
    <link href="https://haldir65.github.io/2018/02/02/2018-02-02-html-dom-manipulation/"/>
    <id>https://haldir65.github.io/2018/02/02/2018-02-02-html-dom-manipulation/</id>
    <published>2018-02-02T23:30:25.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p>HTML Document操作手册<br><img src="http://www.haldir66.ga/static/imgs/2138000245bee1e3cc14.jpg" alt=""></p><a id="more"></a><p>使用javaScript操作dom的记录</p><h2 id="拦截form的submit"><a href="#拦截form的submit" class="headerlink" title="拦截form的submit"></a>拦截form的submit</h2><p><a href="https://stackoverflow.com/questions/3350247/how-to-prevent-form-from-being-submitted">how-to-prevent-form-from-being-submitted</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">"return mySubmitFunction()"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"this is the text before the value"</span><span class="attr">type</span>=<span class="string">'text'</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">type</span>=<span class="string">'text'</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在mySubmitFunction()中return false并不能阻止表单被提交。<br>正确的做法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.querySelector(<span class="string">'form'</span>);</span><br><span class="line">element.addEventListener(<span class="string">'submit'</span>, event =&gt; &#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  <span class="comment">// actual logic, e.g. validate the form</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Form submission cancelled.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="a标签的事件绑定"><a href="#a标签的事件绑定" class="headerlink" title="a标签的事件绑定"></a>a标签的事件绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="input-file选出来的图片路径"><a href="#input-file选出来的图片路径" class="headerlink" title="input file选出来的图片路径"></a>input file选出来的图片路径</h2><p><a href="https://stackoverflow.com/questions/4851595/how-to-resolve-the-c-fakepath">c-fakepath</a>.浏览器并不会将底层的文件实际路径暴露给开发者，这是出于安全考虑。所以使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>)[<span class="number">3</span>].value</span><br><span class="line"><span class="string">"C:\fakepath\image_7.jpg"</span> <span class="comment">//所以一般要用string.split('\\')处理一下</span></span><br></pre></td></tr></table></figure></p><h3 id="被document-getElementById坑了"><a href="#被document-getElementById坑了" class="headerlink" title="被document.getElementById坑了"></a>被document.getElementById坑了</h3><p>一个html页面只能有一个id的规则都知道，可是偏偏一个页面写了两个id一样的tag，网页照样跑，console没有任何报错。但是使用document.getElementById的时候，拿到的就是第一个。浏览器还真是能容错啊。<br>顺便记录下vanilla js和jQuery detect 一个file input的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input2 = <span class="built_in">document</span>.getElementById(<span class="string">'file_2'</span>);</span><br><span class="line">input2.addEventListener(<span class="string">'change'</span>, () =&gt; &#123;</span><br><span class="line">  showPreview2(<span class="keyword">this</span>.id,<span class="string">'portrait2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#file_2'</span>).on(<span class="string">'change'</span>, () =&gt; &#123;</span><br><span class="line">  showPreview2(<span class="string">'file_2'</span>,<span class="string">'portrait2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(<span class="string">'#file_2'</span>).change( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  showPreview2(<span class="keyword">this</span>.id,<span class="string">'portrait2'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="为毛浏览器内嵌视频要用iframe"><a href="#为毛浏览器内嵌视频要用iframe" class="headerlink" title="为毛浏览器内嵌视频要用iframe"></a>为毛浏览器内嵌视频要用iframe</h3><p>因为video source是host在其他的sites的啊，因为跨域的问题，不得不使用iframe。因为就算用iframe，里面其实还是一个vide的tg。</p><h3 id="html-js是不能写文件的"><a href="#html-js是不能写文件的" class="headerlink" title="html js是不能写文件的"></a>html js是不能写文件的</h3><p>node js提供了fs api来进行文件读写，浏览器中js不能读写本地文件。(html5提供了localStorage api，但最大容量好像是5MB，通过浏览器读文件也必须用户手动触发选择)</p><h3 id="头一次听说noscript这种东西"><a href="#头一次听说noscript这种东西" class="headerlink" title="头一次听说noscript这种东西"></a>头一次听说noscript这种东西</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">         &lt;!--</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">"Hello World!"</span>)</span></span><br><span class="line"><span class="javascript">         <span class="comment">//--&gt;</span></span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">         Sorry...JavaScript is needed to go ahead.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果浏览器不支持javascript的话，noScript中的内容就会显示出来</p><h3 id="document对象的所有方法在mdn上都有"><a href="#document对象的所有方法在mdn上都有" class="headerlink" title="document对象的所有方法在mdn上都有"></a>document对象的所有方法在<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createTextNode">mdn</a>上都有</h3><h3 id="js操作cookie的方式"><a href="#js操作cookie的方式" class="headerlink" title="js操作cookie的方式"></a>js操作cookie的方式</h3><p>随便开一个网页，在console中输入document.cookie就可以看到设置的cookie<br>或者在chrome的resource tab中也能看到<br>js能够操作cookie的前提是cookie中没有HttpOnly=true 字段<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"key1=value1;key2=value2;expires=date"</span>;</span><br></pre></td></tr></table></figure></p><h3 id="浏览器信息一般在Navigator对象里面拿"><a href="#浏览器信息一般在Navigator对象里面拿" class="headerlink" title="浏览器信息一般在Navigator对象里面拿"></a>浏览器信息一般在Navigator对象里面拿</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> browsername=navigator.appName;</span><br><span class="line"><span class="keyword">if</span>( browsername == <span class="string">"Netscape"</span> )</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">window</span>.location=<span class="string">"http://www.location.com/ns.htm"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( browsername ==<span class="string">"Microsoft Internet Explorer"</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">window</span>.location=<span class="string">"http://www.location.com/ie.htm"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">window</span>.location=<span class="string">"http://www.location.com/other.htm"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>navigator里面常用的还有platform,userAgent等<br>随便在chrome里面试了下<br>navigator.appName ==&gt; Netscape<br>navigator.platform ==&gt; win32</p><p><a href="https://github.com/js-cookie/js-cookie">在浏览器里操作cookie可以用原生api自己去操作string，但推荐使用成熟的库</a></p><p>文件上传一般使用file tag就可以了<br>这种是单文件的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">enctype</span>=<span class="string">multipart/form-data</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">name</span>=<span class="string">file</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">Upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">选择图片：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请尝试在浏览文件时选取一个以上的文件。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html中有data标签<a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes">文档</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">"electriccars"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-columns</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-index-number</span>=<span class="string">"12314"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-parent</span>=<span class="string">"cars"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>js里面可以这样去获取对应的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> article = <span class="built_in">document</span>.getElementById(<span class="string">'electriccars'</span>);</span><br><span class="line"> </span><br><span class="line">article.dataset.columns <span class="comment">// "3"</span></span><br><span class="line">article.dataset.indexNumber <span class="comment">// "12314" 注意dash被替换成了CamelCase</span></span><br><span class="line">article.dataset.parent <span class="comment">// "cars"</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML Document操作手册&lt;br&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/2138000245bee1e3cc14.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg知识手册</title>
    <link href="https://haldir65.github.io/2018/01/24/2018-01-24-ffmpeg-basics-and-rtmp-related/"/>
    <id>https://haldir65.github.io/2018/01/24/2018-01-24-ffmpeg-basics-and-rtmp-related/</id>
    <published>2018-01-24T13:44:33.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p>ffmpeg安装手记<br><img src="http://www.haldir66.ga/static/imgs/water foot cold dark river.jpg" alt=""><br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://adaptivesamples.com/how-to-install-ffmpeg-on-windows/">how-to-install-ffmpeg-on-windows</a><br><a href="https://ffmpeg.zeranoe.com/builds/">下载</a></p><p>检查下是否安装完成:</p><blockquote><p>ffmpeg -codecs</p></blockquote><h2 id="Basic-commands"><a href="#Basic-commands" class="headerlink" title="Basic commands"></a>Basic commands</h2><blockquote><p>ffmpeg -i video.mp4 ## 从视频中提取出信息<br> ffmpeg -i video.mp4 video.avi ## 格式转换<br>ffmpeg -i input.mp4 -vn -ab 320 output.mp3 ##提取视频中的音频，转成mp3<br>ffmpeg -i input.mp4  -t 50 output.avi  ## 提取视频前50s<br>ffmpeg -i input.mp4 -aspect 16:9 output.mp4 ## 更改长宽比</p></blockquote><p>参考<a href="https://www.ostechnix.com/20-ffmpeg-commands-beginners/">20-ffmpeg-commands-beginners</a></p><p>需要知道的是，<strong><em>视频转码是很费性能的</em></strong>，消耗的时间也比较长。</p><p><a href="https://github.com/mpenkov/ffmpeg-tutorial">ffmpeg c语言写一个video player</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/fc64102d6162">nginx搭建rtmp推流服务</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ffmpeg安装手记&lt;br&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/water foot cold dark river.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>redis-cook-book</title>
    <link href="https://haldir65.github.io/2018/01/20/2018-01-20-redis-cook-book/"/>
    <id>https://haldir65.github.io/2018/01/20/2018-01-20-redis-cook-book/</id>
    <published>2018-01-20T08:19:20.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.haldir66.ga/static/imgs/apple logo dark bw life night.jpg" alt=""><br><a id="more"></a></p><p>redis速度相当快</p><p>在ubuntu上安装，偷懒就直接用这种方式吧，比自己下载源码编译快，还连systemd脚本都写好了。当然缺点就是/etc/apt/source.list文件里面的源太老的缘故。<a href="https://medium.com/@jonbaldie/how-to-install-redis-4-x-manually-on-an-older-linux-kernel-b18133df0fd3">据说apt-get最多就能装上3.2的redis了，ubuntu更新最新软件最新版本也不会那么快</a></p><blockquote><p>sudo add-apt-repository ppa:chris-lea/redis-server<br>sudo apt-get update<br>sudo apt-get install redis-server</p><p>sudo apt-get install redis-server</p></blockquote><p><a href="https://askubuntu.com/questions/868848/how-to-install-redis-on-ubuntu-16-04">how-to-install-redis-on-ubuntu-16-04</a></p><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-redis-on-ubuntu-16-04">也有自己下源码编译的</a><br>mac上就是下载一个tar.gz，然后自己make，网上教程都很多的</p><p><a href="https://github.com/MicrosoftArchive/redis">The Redis project does not officially support Windows. However, the Microsoft Open Tech group develops and maintains this Windows port targeting Win64. </a><br>直接从release page下载msi文件，安装下去很方便的。默认的端口是6379。</p><h3 id="start-server-and-client-windows下cd-到redis安装的位置，默认在C：Porgram-Files-Redis里面"><a href="#start-server-and-client-windows下cd-到redis安装的位置，默认在C：Porgram-Files-Redis里面" class="headerlink" title="start server and client(windows下cd 到redis安装的位置，默认在C：Porgram Files/Redis里面)"></a>start server and client(windows下cd 到redis安装的位置，默认在C：Porgram Files/Redis里面)</h3><blockquote><p>redis-server  redis.windows.conf<br>双击打开 redis-cli.exe ## start client</p></blockquote><p>在mac下运行server:</p><blockquote><p>redis-server ## 起服务端<br>redis-cli ## 起客户端<br>redis-cli ping ## 看下服务端有没有起来<br>redis-cli shutdown ## 关闭客户端</p></blockquote><p>开了要会关闭<br><!-- redis-cli127.0.0.1:6379> shutdown(error) ERR Errors trying to SHUTDOWN. Check logs.127.0.0.1:6379> shutdown NOSAVEnot connected> --></p><p>禁止任何remote访问 </p><blockquote><h1 id="To-make-it-automatically-start-with-Linux"><a href="#To-make-it-automatically-start-with-Linux" class="headerlink" title="To make it automatically start with Linux"></a>To make it automatically start with Linux</h1><p>sudo systemctl enable redis_6379</p><h1 id="To-block-all-remote-traffic-to-Redis-except-for-local-and-one-IP-address-e-g-your-web-server"><a href="#To-block-all-remote-traffic-to-Redis-except-for-local-and-one-IP-address-e-g-your-web-server" class="headerlink" title="To block all remote traffic to Redis except for local and one IP address (e.g. your web server)"></a>To block all remote traffic to Redis except for local and one IP address (e.g. your web server)</h1><p>iptables -A INPUT -p tcp –dport 6379 -s 127.0.0.1 -j ACCEPT<br>iptables -A INPUT -p tcp –dport 6379 -s X.X.X.X -j ACCEPT<br>iptables -A INPUT -p tcp –dport 6379 -j DROP</p></blockquote><p> 和数据库类似，不同业务的数据需要存贮在不同的数据库中，redis提供了client端的切换数据库的语法</p><blockquote><p>select 1 ## 每个数据库之间的key不冲突</p></blockquote><h3 id="Configurations"><a href="#Configurations" class="headerlink" title="Configurations"></a>Configurations</h3><blockquote><p>sudo find / -name “redis.conf” ##  linux下应该是装到了/etc/redis/这个目录下，不确定的话find一下</p></blockquote><p>常见的配置包括：</p><blockquote><p>port 6379 ## redis-server监听端口（默认6379）<br>requirepass ## 指定客户端操作需要的密码<br>databases 16 ## 这里面对于可供选择的数据库总数</p></blockquote><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>当内存达到最大值的时候Redis会选择删除哪些数据？有五种方式可供选择</p><blockquote><p>volatile-lru -&gt; 利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used )<br>allkeys-lru -&gt; 利用LRU算法移除任何key<br>volatile-random -&gt; 移除设置过过期时间的随机key<br>allkeys-&gt;random -&gt; remove a random key, any key<br>volatile-ttl -&gt; 移除即将过期的key(minor TTL)<br>noeviction -&gt; 不移除任何可以，只是返回一个写错误</p></blockquote><h3 id="支持的存储类型"><a href="#支持的存储类型" class="headerlink" title="支持的存储类型"></a>支持的存储类型</h3><ul><li>Strings</li><li>Hashes</li><li>Lists</li><li>Sets</li><li>Sorted Sets</li></ul><h2 id="针对各种数据进行CURD操作"><a href="#针对各种数据进行CURD操作" class="headerlink" title="针对各种数据进行CURD操作"></a>针对各种数据进行CURD操作</h2><p>最简单的SET和GET举个例子<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span>&gt;SET realname "John Smith" ##亲测，这个realname的key加不加引号没啥关系，value也是加不加引号没关系.SET命令直接无视双引号</span><br><span class="line"><span class="meta">&gt;</span>&gt;OK</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span>&gt; GET realname</span><br><span class="line">"John Smith"</span><br></pre></td></tr></table></figure></p><p><strong>String</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set(key, value)：给数据库中名称为key的string赋予值value</span><br><span class="line">get(key)：返回数据库中名称为key的string的value</span><br><span class="line">getset(key, value)：给名称为key的string赋予上一次的value</span><br><span class="line">mget(key1, key2,…, key N)：返回库中多个string的value</span><br><span class="line">setnx(key, value)：添加string，名称为key，值为value</span><br><span class="line">setex(key, time, value)：向库中添加string，设定过期时间time</span><br><span class="line">mset(key N, value N)：批量设置多个string的值</span><br><span class="line">msetnx(key N, value N)：如果所有名称为key i的string都不存在</span><br><span class="line">incr(key)：名称为key的string增1操作</span><br><span class="line">incrby(key, integer)：名称为key的string增加integer</span><br><span class="line">decr(key)：名称为key的string减1操作</span><br><span class="line">decrby(key, integer)：名称为key的string减少integer</span><br><span class="line">append(key, value)：名称为key的string的值附加value</span><br><span class="line">substr(key, start, end)：返回名称为key的string的value的子串</span><br></pre></td></tr></table></figure></p><p><strong>Hashes</strong><br>A Redis hash is a collection of key value pairs. Redis Hashes are maps between string fields and string values. Hence, they are used to represent objects.</p><p>Hashes用于代表object</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span># 添加操作</span><br><span class="line"><span class="meta">#</span># set</span><br><span class="line"><span class="meta">redis&gt;</span> HMSET myhash field1 "Hello" field2 "World"</span><br><span class="line">"OK"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 只在field不存在的时候添加，可以理解为putIfAbsent</span><br><span class="line">HSETNX myhash field "Hello"</span><br><span class="line"><span class="meta">#</span>#返回1表明设置成功，返回0说明不成功</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 查询操作</span><br><span class="line"><span class="meta">#</span># get</span><br><span class="line"><span class="meta">redis&gt;</span> HGET myhash field1</span><br><span class="line">"Hello"</span><br><span class="line"><span class="meta">redis&gt;</span> HGET myhash field2</span><br><span class="line">"World"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>## delete a specified field from an object</span><br><span class="line"><span class="meta">#</span># 删除操作</span><br><span class="line"><span class="meta">redis&gt;</span> HSET myhash field1 "foo"</span><br><span class="line"><span class="meta">redis&gt;</span> HDEL myhash field1</span><br><span class="line"><span class="meta">#</span># 返回0表示不存在该key，返回1表示删除成功</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#检查是否存在某个field</span><br><span class="line">HEXISTS myhash field1</span><br><span class="line">(integer) 1  </span><br><span class="line"><span class="meta">#</span>#1表示存在，0表示不存在</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 把某个变量的值增加</span><br><span class="line">HINCRBY myhash field 1</span><br><span class="line"><span class="meta">#</span># 返回操作成功后field 的当前value</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#查看当前object有哪些field,类似于javaScript的iterating  protoType</span><br><span class="line">HKEYS myhash</span><br></pre></td></tr></table></figure><p><strong>Lists</strong><br>Redis Lists are simply lists of strings, sorted by insertion order. You can add elements to a Redis List on the head or on the tail.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; lpush tutoriallist redis</span><br><span class="line">(integer) 1</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush tutoriallist mongodb</span><br><span class="line">(integer) 2</span><br><span class="line">redis 127.0.0.1:6379&gt; lpush tutoriallist rabitmq</span><br><span class="line">(integer) 3</span><br><span class="line">redis 127.0.0.1:6379&gt; lrange tutoriallist 0 10  </span><br><span class="line"></span><br><span class="line">1) "rabitmq"</span><br><span class="line">2) "mongodb"</span><br><span class="line">3) "redis"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rpush(key, value)：在名称为key的list尾添加一个值为value的元素</span><br><span class="line">lpush(key, value)：在名称为key的list头添加一个值为value的 元素</span><br><span class="line">llen(key)：返回名称为key的list的长度</span><br><span class="line">lrange(key, start, end)：返回名称为key的list中start至end之间的元素</span><br><span class="line">ltrim(key, start, end)：截取名称为key的list</span><br><span class="line">lindex(key, index)：返回名称为key的list中index位置的元素</span><br><span class="line">lset(key, index, value)：给名称为key的list中index位置的元素赋值</span><br><span class="line">lrem(key, count, value)：删除count个key的list中值为value的元素</span><br><span class="line">lpop(key)：返回并删除名称为key的list中的首元素</span><br><span class="line">rpop(key)：返回并删除名称为key的list中的尾元素</span><br><span class="line">blpop(key1, key2,… key N, timeout)：lpop命令的block版本。</span><br><span class="line">brpop(key1, key2,… key N, timeout)：rpop的block版本。</span><br><span class="line">rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部</span><br></pre></td></tr></table></figure><p><strong>SET</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sadd(key, member)：向名称为key的set中添加元素member</span><br><span class="line">srem(key, member) ：删除名称为key的set中的元素member</span><br><span class="line">spop(key) ：随机返回并删除名称为key的set中一个元素</span><br><span class="line">smove(srckey, dstkey, member) ：移到集合元素</span><br><span class="line">scard(key) ：返回名称为key的set的基数</span><br><span class="line">sismember(key, member) ：member是否是名称为key的set的元素</span><br><span class="line">sinter(key1, key2,…key N) ：求交集</span><br><span class="line">sinterstore(dstkey, (keys)) ：求交集并将交集保存到dstkey的集合</span><br><span class="line">sunion(key1, (keys)) ：求并集</span><br><span class="line">sunionstore(dstkey, (keys)) ：求并集并将并集保存到dstkey的集合</span><br><span class="line">sdiff(key1, (keys)) ：求差集</span><br><span class="line">sdiffstore(dstkey, (keys)) ：求差集并将差集保存到dstkey的集合</span><br><span class="line">smembers(key) ：返回名称为key的set的所有元素</span><br><span class="line">srandmember(key) ：随机返回名称为key的set的一个元素</span><br></pre></td></tr></table></figure><h2 id="一些特性的指令"><a href="#一些特性的指令" class="headerlink" title="一些特性的指令"></a>一些特性的指令</h2><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">save：将数据同步保存到磁盘</span><br><span class="line">bgsave：将数据异步保存到磁盘</span><br><span class="line">lastsave：返回上次成功将数据保存到磁盘的Unix时戳</span><br><span class="line">shundown：将数据同步保存到磁盘，然后关闭服务</span><br></pre></td></tr></table></figure><h3 id="设定有效时间"><a href="#设定有效时间" class="headerlink" title="设定有效时间"></a>设定有效时间</h3><p>expireat</p><h3 id="对Value的操作"><a href="#对Value的操作" class="headerlink" title="对Value的操作"></a>对Value的操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">KEYS * 列出所有的key</span><br><span class="line">exists(key)：确认一个key是否存在</span><br><span class="line">del(key)：删除一个key</span><br><span class="line">type(key)：返回值的类型</span><br><span class="line">keys(pattern)：返回满足给定pattern的所有key</span><br><span class="line">randomkey：随机返回key空间的一个</span><br><span class="line">keyrename(oldname, newname)：重命名key</span><br><span class="line">dbsize：返回当前数据库中key的数目</span><br><span class="line">expire：设定一个key的活动时间（s）</span><br><span class="line">ttl：获得一个key的活动时间</span><br><span class="line">select(index)：按索引查询</span><br><span class="line">move(key, dbindex)：移动当前数据库中的key到dbindex数据库</span><br><span class="line">flushdb：删除当前选择数据库中的所有key</span><br><span class="line">flushall：删除所有数据库中的所有key</span><br></pre></td></tr></table></figure><h3 id="SubScribe和Publish"><a href="#SubScribe和Publish" class="headerlink" title="SubScribe和Publish"></a>SubScribe和Publish</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SUBSCRIBE redisChat  </span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) "subscribe"</span><br><span class="line">2) "redisChat"</span><br><span class="line">3) (integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 另起一个screen</span><br><span class="line">PUBLISH redisChat "Redis is a great caching technique"  </span><br><span class="line"><span class="meta">#</span># 回到刚才的screen : ctrl +a +d screen -r</span><br></pre></td></tr></table></figure><p>两个client同时subscribe了redisChat这个话题，表现上就和局域网聊天一样。也就有了很多用js+webSocket写的简易聊天室</p><h3 id="pipelining"><a href="#pipelining" class="headerlink" title="pipelining"></a>pipelining</h3><p>一次请求/响应服务器能实现处理新的请求即使旧的请求还未被响应。这样就可以将多个命令发送到服务器，而不用等待回复，最后在一个步骤中读取该答复。<br>省去了RTT(Round Trip deplay time)的时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">非pipleline模式：</span><br><span class="line"></span><br><span class="line">Request----&gt;执行</span><br><span class="line"></span><br><span class="line">----&gt;Response</span><br><span class="line"></span><br><span class="line">Request----&gt;执行</span><br><span class="line"></span><br><span class="line">----&gt;Response</span><br><span class="line">Pipeline模式下：</span><br><span class="line"></span><br><span class="line">Request----&gt;执行，Server将响应结果队列化</span><br><span class="line"></span><br><span class="line">Request----&gt;执行，Server将响应结果队列化</span><br><span class="line"></span><br><span class="line">----&gt;Response</span><br><span class="line"></span><br><span class="line">----&gt;Response</span><br></pre></td></tr></table></figure></p><h3 id="和其他语言的整合"><a href="#和其他语言的整合" class="headerlink" title="和其他语言的整合"></a>和其他语言的整合</h3><p><a href="https://redis.io/clients">支持的lanaguage client</a></p><p><strong>javaScript</strong><br><a href="https://github.com/NodeRedis/node_redis">npm install redis</a><br><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-nodejs-redis/index.html">在 Node.js 应用中集成 Redis</a></p><p><a href="https://github.com/xetorthio/jedis">jedis</a><br><strong>java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pipeline</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        String key = <span class="string">"pipeline-test"</span>;  </span><br><span class="line">        String old = jedis.get(key);  </span><br><span class="line">        <span class="keyword">if</span>(old != <span class="keyword">null</span>)&#123;  </span><br><span class="line">            System.out.println(<span class="string">"Key:"</span> + key + <span class="string">",old value:"</span> + old);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//代码模式1,这种模式是最常见的方式  </span></span><br><span class="line">        Pipeline p1 = jedis.pipelined();  </span><br><span class="line">        p1.incr(key);  </span><br><span class="line">        System.out.println(<span class="string">"Request incr"</span>);  </span><br><span class="line">        p1.incr(key);  </span><br><span class="line">        System.out.println(<span class="string">"Request incr"</span>);  </span><br><span class="line">        <span class="comment">//结束pipeline，并开始从相应中获得数据  </span></span><br><span class="line">        List&lt;Object&gt; responses = p1.syncAndReturnAll();  </span><br><span class="line">        <span class="keyword">if</span>(responses == <span class="keyword">null</span> || responses.isEmpty())&#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Pipeline error: no response..."</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span>(Object resp : responses)&#123;  </span><br><span class="line">            System.out.println(<span class="string">"Response:"</span> + resp.toString());<span class="comment">//注意，此处resp的类型为Long  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//代码模式2  </span></span><br><span class="line">        Pipeline p2 = jedis.pipelined();  </span><br><span class="line">        Response&lt;Long&gt; r1 = p2.incr(key);  </span><br><span class="line">        <span class="keyword">try</span>&#123;  </span><br><span class="line">            r1.get();  </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;  </span><br><span class="line">            System.out.println(<span class="string">"Error,you cant get() before sync,because IO of response hasn't begin.."</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Response&lt;Long&gt; r2 = p2.incr(key);  </span><br><span class="line">        p2.sync();  </span><br><span class="line">        System.out.println(<span class="string">"Pipeline,mode 2,---&gt;"</span> + r1.get());  </span><br><span class="line">        System.out.println(<span class="string">"Pipeline,mode 2,---&gt;"</span> + r2.get());  </span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><strong>python</strong><br><a href="https://github.com/andymccurdy/redis-py">redis-py</a><br><a href="http://debugo.com/python-redis/">使用Python操作Redis</a></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote><p>《Redis Cookbook》对这个经典场景进行详细描述。假定我们对一系列页面需要记录点击次数。例如论坛的每个帖子都要记录点击次数，而点击次数比回帖的次数的多得多。如果使用关系数据库来存储点击，可能存在大量的行级锁争用。所以，点击数的增加使用redis的INCR命令最好不过了。</p></blockquote><h3 id="存储多层次级别的object"><a href="#存储多层次级别的object" class="headerlink" title="存储多层次级别的object"></a>存储多层次级别的object</h3><p><a href="https://stackoverflow.com/questions/16375188/redis-strings-vs-redis-hashes-to-represent-json-efficiency">Redis strings vs Redis hashes to represent JSON: efficiency?</a><br>由于redis各种commands本质上只能存储key-value形式的object，对于多层级的object，需要将key扁平化<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> house = &#123;</span><br><span class="line">  roof: &#123;</span><br><span class="line">    color: <span class="string">'black'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  street: <span class="string">'Market'</span>,</span><br><span class="line">  buildYear: <span class="string">'1996'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>HMSET house:1 roof “house:1:roof” street “Market” buildYear “1996”</p></blockquote><p><a href="https://alexandergugel.svbtle.com/storing-relational-data-in-redis">在redis中存储关系型数据</a></p><p><a href="http://wiki.jikexueyuan.com/project/node-lessons/cookie-session.html">在redis中缓存session</a></p><blockquote><p>session 可以存放在 1）内存、2）cookie本身、3）redis 或 memcached 等缓存中，或者4）数据库中。线上来说，缓存的方案比较常见，存数据库的话，查询效率相比前三者都太低，不推荐</p></blockquote><p>=================================================================================</p><h3 id="Redis-Cluster-集群"><a href="#Redis-Cluster-集群" class="headerlink" title="Redis Cluster(集群)"></a>Redis Cluster(集群)</h3><p><a href="http://www.cnblogs.com/mafly/p/redis_cluster.html">Redis集群需要版本3.0以上，另外起多个实例就是复制/usr/local/redis-server等文件多遍</a><br>因为特别吃内存，小内存vps上不要乱搞</p><p><a href="https://www.zhihu.com/question/19645807">论述Redis和Memcached的差异-博客-云栖社区-阿里云</a></p><p>redis-server.service: Failed to run ‘start-pre’ task: No such file or directory</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://redis.io/commands/hlen">redis official docs</a><br>[Redis supports 5 types of data types] (<a href="https://www.tutorialspoint.com/redis/redis_data_types.htm">https://www.tutorialspoint.com/redis/redis_data_types.htm</a>)<br><a href="http://www.ttlsa.com/redis/redis-advanced-features-and-performance-tuning/">Redis 高级特性与性能调优</a><br><a href="http://www.dnsdizhi.com/post-219.html">大部分语句转载自</a><br><a href="http://shift-alt-ctrl.iteye.com/blog/1863790">关于pipelining的解释</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/apple logo dark bw life night.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-native-cookbook</title>
    <link href="https://haldir65.github.io/2018/01/19/2018-01-19-react-native-cookbook/"/>
    <id>https://haldir65.github.io/2018/01/19/2018-01-19-react-native-cookbook/</id>
    <published>2018-01-19T22:28:34.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.haldir66.ga/static/imgs/iu%20kpop%20star%20music%20sony.jpg" alt=""></p><a id="more"></a><p>install cli</p><blockquote><p>npm install -g react-native-cli<br>react-native init myproject ## 最好全部小写字母<br>cd myproject<br>react-native run-android<br>注意，可能会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line">* What went wrong:</span><br><span class="line">A problem occurred configuring project &apos;:app&apos;.</span><br><span class="line">&gt; SDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable.</span><br></pre></td></tr></table></figure></p></blockquote><p>新建一个local.properities文件，放到android 文件夹下面就好了</p><p><a href="https://stackoverflow.com/questions/44446523/unable-to-load-script-from-assets-index-android-bundle-on-windows">unable-to-load-script-from-assets-index-android-bundle-on-windows</a></p><p>在android手机上打开显示布局边界，发现react-native app并不是一个webview，而是一个个实在的buttom,text。</p><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>目前暂不支持java 9<br>Double tap R on your keyboard to reload其实并不是按电脑键盘上的R，而是模拟器上的，所以需要鼠标上去，ctrl+m即可<br>如果是一台真实手机的话，需要摇一摇手机，就能显示菜单。但是每次都要摇一摇实在是太麻烦，所以点一下那个Enable LiveReload就能在每次保存文件后Reload。<br>注意，如果更改了state，那么hotReload没用，需要手动Reload</p><p>npm run start是用来起dev server的。<br>react-native run-android是用来向client端推更新的。</p><p>could not connect to development server…的原因就是没有运行npm start。</p><p>所以，正常的流程应该是npm start &amp;&amp; react-native run-android</p><p>debug:<br>react-native run-android是把这个App安装到手机上，然后terminal就返回了，需要查看后续日志输出的话<br>react-native log-android // 这个是帮助在console中输出log</p><p>jsx文件开头的import要注意<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是错误的</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; AppRegistry,  Component,StyleSheet,Text,View&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="comment">//这才是正确的</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRegistry,  Component,StyleSheet,Text,View&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="route"><a href="#route" class="headerlink" title="route"></a>route</h2><p>Navigator is deprecated,use <a href="https://reactnavigation.org/">stack navigator</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; StackNavigator &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span>; <span class="comment">// 1.0.0-beta.27</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">alignItems</span>: <span class="string">'center'</span>, <span class="attr">justifyContent</span>: <span class="string">'center'</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;Text&gt;Home Screen&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailsScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">alignItems</span>: <span class="string">'center'</span>, <span class="attr">justifyContent</span>: <span class="string">'center'</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;Text&gt;Details Screen&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RootStack = StackNavigator(</span><br><span class="line">  &#123;</span><br><span class="line">    Home: &#123;</span><br><span class="line">      screen: HomeScreen,</span><br><span class="line">    &#125;,</span><br><span class="line">    Details: &#123;</span><br><span class="line">      screen: DetailsScreen,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    initialRouteName: <span class="string">'Home'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">RootStack</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="既然有路由就不免谈到各个组件之间的写法"><a href="#既然有路由就不免谈到各个组件之间的写法" class="headerlink" title="既然有路由就不免谈到各个组件之间的写法"></a>既然有路由就不免谈到各个组件之间的写法</h2><p>显然，你可以将LogoTitle写到另一个文件中去，然后export default，再import出来。<br>下面这种只是为了说明你能这样写，一个很简单的小功能可以放在内部作为一个class自己使用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogoTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Image</span><br><span class="line">        source=&#123;<span class="built_in">require</span>(<span class="string">'./spiro.png'</span>)&#125;</span><br><span class="line">        style=&#123;&#123; <span class="attr">width</span>: <span class="number">30</span>, <span class="attr">height</span>: <span class="number">30</span> &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    <span class="comment">// headerTitle instead of title</span></span><br><span class="line">    headerTitle: <span class="xml"><span class="tag">&lt;<span class="name">LogoTitle</span> /&gt;</span>,</span></span><br><span class="line"><span class="xml">  &#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  /* render function, etc */</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="styling"><a href="#styling" class="headerlink" title="styling"></a>styling</h2><p>inline styling在每一个tag的后面跟上两个大括号，<br>styling as seprate file在后面跟一个大括号，引用style对象的properity<br><a href="https://stackoverflow.com/questions/43585297/react-native-button-style-not-work">Button组件的styling仅限于几个属性，可以用TouchableXXX来代替</a></p><h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><h3 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a>ScrollView</h3><h1 id="Android平台一个ScrollView只能有一个ChildView-Node-，在react-native上似乎没有这样的限制"><a href="#Android平台一个ScrollView只能有一个ChildView-Node-，在react-native上似乎没有这样的限制" class="headerlink" title="Android平台一个ScrollView只能有一个ChildView(Node)，在react-native上似乎没有这样的限制"></a>Android平台一个ScrollView只能有一个ChildView(Node)，在react-native上似乎没有这样的限制</h1><p>async storage</p><p>camera Roll<br><a href="https://github.com/yuanguozheng/JdApp">基于React Native构建的仿京东客户端</a></p><!-- <audio src="http://m10.music.126.net/20180121230941/8d878803b3b0542d9c5482ccf613a86b/ymusic/d95e/bab6/a7f5/864661168da79b309c3d2fac971d1698.mp3" autoplay="autoplay">您的浏览器不支持 audio 标签。</audio> -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/iu%20kpop%20star%20music%20sony.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Webpack资源汇总</title>
    <link href="https://haldir65.github.io/2018/01/14/2018-01-14-webpack-instructions/"/>
    <id>https://haldir65.github.io/2018/01/14/2018-01-14-webpack-instructions/</id>
    <published>2018-01-14T22:56:46.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.haldir66.ga/static/imgs/hot%20coffee%20city%20life%20winter.jpg" alt=""><br><a id="more"></a></p><p>使用webpack的一个好处是，浏览器的并发请求资源数是有一个上限的，把所有资源打成一个包，能够减少请求数量。</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><blockquote><p>yarn add webpack</p></blockquote><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h2><blockquote><p>webpack is basically pulling  all external js files into on build.js file that we can bundle into our html.<br>这样做的好处很多，能够有效减少浏览器发出的请求数量。</p></blockquote><p>minify js(删掉所有的空行) webpack -p即可</p><h2 id="3-webpack-config-js"><a href="#3-webpack-config-js" class="headerlink" title="3. webpack.config.js"></a>3. webpack.config.js</h2><p>一个基本的config长这样<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">var</span> BrowserSyncPlugin = <span class="built_in">require</span>(<span class="string">"browser-sync-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./app.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"bundle.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: <span class="literal">true</span>,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">"babel-preset-env"</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span> <span class="comment">/*end with .css*/</span>,</span><br><span class="line">        use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"style-loader"</span> <span class="comment">// creates style nodes from JS strings</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"css-loader"</span> <span class="comment">// translates CSS into CommonJS</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"less-loader"</span> <span class="comment">// compiles Less to CSS</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: __dirname,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    inline: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">"source-map"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>webpack devServer(内置一个express，在本地起一个local server)</p><blockquote><p>yarn add webpack-dev-server</p></blockquote><p>但是devServer 的hot reload 只能监视js文件的变化，并不能监视html或者server content的变化。这需要<a href="https://browsersync.io/">browserSync</a>以及BrowserSync plugin for Webpack.</p><blockquote><p>yarn add browsersync browser-sync-webpack-plugin</p></blockquote><h2 id="4-babel"><a href="#4-babel" class="headerlink" title="4. babel"></a>4. babel</h2><p>首先需要知道的是mudule.exports那一套在浏览器里是不支持的。会出现”require is undefined…”。解决办法也有，安装babel就行了。<br>babel的作用是把es2015的代码编译成es5的代码, 安装方式</p><blockquote><p>yarn add babel-cli babel-preset-env</p></blockquote><p>然后创建一个.babelrc文件<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"env"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>package.json中添加script:<br>babel : “babel”<br>命令行 ： npm run babel – index.js -o bundle.js -w</p><h2 id="5-loaders"><a href="#5-loaders" class="headerlink" title="5. loaders"></a>5. loaders</h2><h2 id="6-babel-css-precomiler"><a href="#6-babel-css-precomiler" class="headerlink" title="6. babel, css precomiler"></a>6. babel, css precomiler</h2><h2 id="7-react-cli"><a href="#7-react-cli" class="headerlink" title="7. react cli"></a>7. react cli</h2><p>=======================================================================================================<br>todo : webpack boilerplate</p><p><a href="http://web.jobbole.com/94944/">请手写一个webpack4.0配置</a><br>underscore javaScript library</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/hot%20coffee%20city%20life%20winter.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>css预处理语言</title>
    <link href="https://haldir65.github.io/2017/12/26/2017-12-26-less-is-more/"/>
    <id>https://haldir65.github.io/2017/12/26/2017-12-26-less-is-more/</id>
    <published>2017-12-26T22:36:49.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p>css预处理语言简介<br><img src="http://www.haldir66.ga/static/imgs/bokeh%20street%20lights%20city%20art%20blue.jpg" alt=""><br><a id="more"></a></p><p>css预处理语言允许我们以更简单的方式编写样式，通过编译生成浏览器能够使用的css文件。</p><ol><li><a href="http://sass-lang.com/">Sass</a> 诞生于 2007 年，Ruby 编写，其语法功能都十分全面，可以说 它完全把 CSS 变成了一门编程语言。另外 在国内外都很受欢迎，并且它的项目团队很是强大 ，是一款十分优秀的预处理语言。</li><li><a href="http://stylus-lang.com/">Stylus</a> 诞生于 2010 年，来自 Node.js 社区，语法功能也和 Sass 不相伯仲，是一门十分独特的创新型语言。</li><li><a href="http://lesscss.org/">Less</a> 诞生于 2009 年，受Sass的影响创建的一个开源项目。 它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充（引用于官网）。</li></ol><p><a href="http://www.oschina.net/question/12_44255">比较这三种预处理语言</a></p><h2 id="1-Less"><a href="#1-Less" class="headerlink" title="1. Less"></a>1. Less</h2><blockquote><p>安装<br>yarn add less<br>/ or install globally  /<br>yarn global add less<br>// Dead Simple LESS CSS Watch Compiler，实时监控less文件变化，更新到css<br>yarn add less-watch-compiler</p><p>使用<br>lessc styles.less // 并不会生成任何css文件<br>lessc styles.less styles.css //生成一个styles.css文件<br>新建一个style.less文件</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@background-color:</span> <span class="number">#f4f4f4</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@background-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的css文件长这样：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有变量，可以进行数学运算</span></span><br><span class="line"><span class="variable">@line-height:</span> <span class="number">1em</span>+<span class="number">1em</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以嵌套</span></span><br><span class="line"><span class="variable">@secondary-color:</span> <span class="number">#20B2AA</span>;</span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">@background-color</span>;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@secondary-color</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="variable">@line-height</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有继承</span></span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="selector-class">.border-radius</span>(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.primary-btn</span><span class="selector-pseudo">:extend(.btn)</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">@primary-color</span>;</span><br><span class="line">    <span class="selector-class">.text-color</span>(<span class="variable">@primary-color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 有函数（mixin），有没有入参都行</span></span><br><span class="line"><span class="selector-class">.bordered</span>&#123;</span><br><span class="line">    <span class="attribute">border-top</span>: dotted <span class="number">1px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: solid2px <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-radius</span>(<span class="variable">@radius</span>) &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还有if statement</span></span><br><span class="line"><span class="selector-class">.text-color</span>(<span class="variable">@a</span>) <span class="keyword">when</span> (lightness(<span class="variable">@a</span>) &gt; = <span class="number">50%</span> )&#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-color</span>(<span class="variable">@a</span>) <span class="keyword">when</span> (lightness(<span class="variable">@a</span>) &lt; <span class="number">50%</span> )&#123;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>filepath</strong><br>比如经常把一些文件挪到其他位置了，这下在css中引用的位置全部都要换，<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@images:</span> <span class="string">"images/"</span></span><br><span class="line"><span class="variable">@homepage-images</span>: <span class="string">"images/homepage/"</span></span><br><span class="line"></span><br><span class="line">img &#123;</span><br><span class="line">  <span class="attribute">background</span>: url(<span class="string">"@&#123;images&#125;fruit.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>import功能</strong><br>在main.less文件中</p><blockquote><p>@import header.less<br>@import menu.less<br>直接用</p></blockquote><p>更多的使用直接去<a href="http://lesscss.org/">Less</a>查找就好了</p><h3 id="less搭配webpack-webpack-dev-server使用-使用方式"><a href="#less搭配webpack-webpack-dev-server使用-使用方式" class="headerlink" title="less搭配webpack(webpack-dev-server使用)使用方式"></a>less搭配webpack(webpack-dev-server使用)使用方式</h3><p>deadsimple-less-watch-compiler —  watch less<br>webpack-dev-server –  watch js file changes<br>webpack-less-loader</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">'css-loader'</span>, <span class="attr">options</span>: &#123; <span class="attr">importLoaders</span>: <span class="number">1</span> &#125; &#125;,</span><br><span class="line">          <span class="string">'less-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在index.js中:</p><blockquote><p>import css from ‘styles.less’;</p></blockquote><p>找了好久没有找到关于less-loader hot reload的设置，只好在package.json中设置</p><blockquote><p>“dev”: “less-watch-compiler”,<br>“start”:”webpack-dev-server –progress –hot –inline –config webpack.config.js &amp;&amp; yarn dev”</p></blockquote><p>把两个command chain起来就是了</p><h2 id="2-Stylus"><a href="#2-Stylus" class="headerlink" title="2.Stylus"></a>2.Stylus</h2><blockquote><p>安装<br>yarn add stylus<br>yarn add stylus-loader</p><p>使用<br>stylus -w style.styl -o style.css //w表示watch</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">line-height</span> = <span class="number">10px</span></span><br><span class="line">body</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">    h1</span><br><span class="line">     <span class="attribute">color</span>: <span class="number">#5e5e5e</span></span><br><span class="line">     <span class="attribute">line-height</span>: line-height</span><br></pre></td></tr></table></figure><p>生成的css文件长这样<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5e5e5e</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixin也有</span></span><br><span class="line"><span class="function"><span class="title">border-radius</span><span class="params">(n)</span></span></span><br><span class="line">  -webkit-<span class="attribute">border-radius</span> n</span><br><span class="line">  -moz-<span class="attribute">border-radius</span> n</span><br><span class="line">  <span class="attribute">border-radius</span> n</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">form</span> <span class="selector-tag">input</span>[type=button]</span><br><span class="line">  <span class="attribute">border-radius</span>(<span class="number">5px</span>)</span><br></pre></td></tr></table></figure><p><a href="http://stylus-lang.com/">官网</a></p><p>当然日常开发中不可能一直手敲 stylus xxx xxx或者 lessc xxx xxx，因为有webpack-loader。</p><h2 id="3-Sass"><a href="#3-Sass" class="headerlink" title="3. Sass"></a>3. Sass</h2><h1 id="Sass需要安装Ruby。"><a href="#Sass需要安装Ruby。" class="headerlink" title="Sass需要安装Ruby。"></a>Sass需要安装Ruby。</h1><p>SCSS 是 Sass 3 引入新的语法，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。也就是说，任何标准的 CSS3 样式表都是具有相同语义的有效的 SCSS 文件。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> rounded($amount) &#123;</span><br><span class="line">  -moz-border-radius: $amount;</span><br><span class="line">  -webkit-border-radius: $amount;</span><br><span class="line">  border-radius: $amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Sass本身不带花括号，加上花括号和分号就成了SCSS了.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css预处理语言简介&lt;br&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/bokeh%20street%20lights%20city%20art%20blue.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="https://haldir65.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot入门记录</title>
    <link href="https://haldir65.github.io/2017/12/13/2017-12-13-spring-boot-elementart-guide/"/>
    <id>https://haldir65.github.io/2017/12/13/2017-12-13-spring-boot-elementart-guide/</id>
    <published>2017-12-13T23:19:33.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p>关于Spring Boot的基本知识要点<br><img src="http://www.haldir66.ga/static/imgs/scenery1511100670897.jpg" alt=""><br><a id="more"></a></p><h2 id="1-创建一个Spring-Boot-app-非常简单"><a href="#1-创建一个Spring-Boot-app-非常简单" class="headerlink" title="1. 创建一个Spring Boot app 非常简单"></a>1. 创建一个Spring Boot app 非常简单</h2><p><a href="https://medium.com/@ahmetkapusuz/spring-boot-hello-world-application-with-intellij-idea-1524c68ddaae">Creating a Spring Application in Intelij is darn Simple</a></p><h2 id="2-组件及用法"><a href="#2-组件及用法" class="headerlink" title="2. 组件及用法"></a>2. 组件及用法</h2><h3 id="2-1-Service"><a href="#2-1-Service" class="headerlink" title="2.1 Service"></a>2.1 Service</h3><h3 id="2-2-Dao"><a href="#2-2-Dao" class="headerlink" title="2.2 Dao"></a>2.2 Dao</h3><h3 id="2-3-Entity"><a href="#2-3-Entity" class="headerlink" title="2.3 Entity"></a>2.3 Entity</h3><h3 id="2-4-Controller"><a href="#2-4-Controller" class="headerlink" title="2.4 Controller"></a>2.4 Controller</h3><h2 id="3-一些配置"><a href="#3-一些配置" class="headerlink" title="3. 一些配置"></a>3. 一些配置</h2><p>Spring Boot修改内置Tomcat端口号：<br>EmbeddedServletContainerCustomizer</p><blockquote><p>或者在<br>src/main/resources/application.yml文件中添加<br>server<br>  port: 8081</p></blockquote><p>=================================================================<br>在windows里面查看内网ip，从控制面板进去看是不准的，DHCP有效期过了自动换掉，得自己敲ipconfig，这样才是最及时的。</p><p>以Okio为例，maven的搜索网站是<p><a href="https://search.maven.org/remote_content?g=com.squareup.okio&amp;a=okio&amp;v=LATEST">https://search.maven.org/remote_content?g=com.squareup.okio&amp;a=okio&amp;v=LATEST</a></p>，实际下发的域名是<p><a href="https://repo1.maven.org/maven2/com/squareup/okio/okio/1.14.0/okio-1.14.0.jar">https://repo1.maven.org/maven2/com/squareup/okio/okio/1.14.0/okio-1.14.0.jar</a></p>。用wget看，是302重定向了。</p><p><a href="https://www.linode.com/docs/development/java/how-to-deploy-spring-boot-applications-nginx-ubuntu-16-04/">在ubuntu下使用nginx部署Spring boot application</a></p><p><a href="https://github.com/gothinkster/spring-boot-realworld-example-app">example app</a></p><p>补充一些tomcat和servlet的知识<br>tomcat是web container,servlet是处理业务逻辑的。<br>servlet继承自HttpServlet,里面有doGet和doPost方法。<br>servlet和请求的url的对应关系写在web.xml中。</p><p><a href="https://medium.com/nycdev/java-get-started-with-apache-maven-a71f4f907cb3">下面是从一片关于如何使用命令行生成并运行jar的文章中摘抄的</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|____src</span><br><span class="line">| |____main</span><br><span class="line">| | |____java</span><br><span class="line">| | | |____com</span><br><span class="line">| | | | |____remkohde</span><br><span class="line">| | |____resources</span><br><span class="line">| |____test</span><br><span class="line">|____target</span><br></pre></td></tr></table></figure></p><blockquote><p>Above you created the recommended directory structure for a Java application. Java source files are saved in the ‘./src/main/java’ folder, the folder ‘./src/main/resources’ is added to the class-path to include resources like properties files to your Java application, test files are saved in ‘./src/test’, compiled class files are saved to ‘./target/classes’, and jar archives are saved to the ‘./target’ folder.</p></blockquote><p>如上就是一般推荐的java application的目录结构。<br>./src/main/java’ folder放的是java代码，<br>‘./src/main/resources’是用来存放属性之类的文件的（被添加到classpath），<br>test文件存放在‘./src/test’文件夹中，生成的class文件放在‘./target/classes’文件夹中，<br>‘./target’文件夹中放的是jar文件</p><p><a href="https://docs.oracle.com/javase/tutorial/deployment/jar/build.html">oracle文档中指出manifest文件最后一行要加上一个换行</a>The manifest must end with a new line or carriage return. The last line will not be parsed properly if it does not end with a new line or carriage return.</p><p><a href="https://spring.io/guides/gs/accessing-data-mysql/">accessing-data-mysql</a><br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html">在application.properties文件中可以写的一些配置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于Spring Boot的基本知识要点&lt;br&gt;&lt;img src=&quot;http://www.haldir66.ga/static/imgs/scenery1511100670897.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>VPS维护的日常</title>
    <link href="https://haldir65.github.io/2017/12/11/2017-12-11-vps-maintenance/"/>
    <id>https://haldir65.github.io/2017/12/11/2017-12-11-vps-maintenance/</id>
    <published>2017-12-11T16:20:16.000Z</published>
    <updated>2018-08-06T06:19:32.552Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://haldir66.ga/static/imgs/scenery1511100756208.jpg" alt=""></p><a id="more"></a><p>以下在 ubuntu 16.04.3 LTS 上通过</p><h2 id="1-小硬盘清理垃圾"><a href="#1-小硬盘清理垃圾" class="headerlink" title="1. 小硬盘清理垃圾"></a>1. 小硬盘清理垃圾</h2><blockquote><p>sudo apt-get autoclean 清理旧版本的软件缓存<br>sudo apt-get clean 清理所有软件缓存<br>sudo apt-get autoremove 删除系统不再使用的孤立软件<br> sudo rm -rf /var/tmp ## 一般来说/tmp和/var/tmp/文件夹里面的东西可以随便删除，稳妥起见还是先看下这个目录下有没有什么文件被正在跑的程序使用：<br>sudo lsof +D /var ## 我看到一大堆mysql的东西 ，另外说一下，为什么/tmp文件夹这么小，因为ubuntu系统每次重启都会把这里面清一下</p></blockquote><h2 id="2-必要软件"><a href="#2-必要软件" class="headerlink" title="2.必要软件"></a>2.必要软件</h2><p>刚装好的 ubuntu 需要执行以下步骤,都是些常用的软件</p><blockquote><p>安装 git &gt; apt-get install git<br>安装 python &gt; apt-get install python-2.7<br>安装 python-setuptools &gt; apt-get install python-setuptools<br>检查是否安装好： python –version</p></blockquote><p>还有一些，比如 htop<br>htop中各个process的state<a href="https://stackoverflow.com/questions/18470215/what-does-a-c-process-status-mean-in-htop">参考</a></p><blockquote><p>D uninterruptible sleep (usually IO)<br>R running or runnable (on run queue)<br>S interruptible sleep (waiting for an event to complete)<br>T stopped, either by a job control signal or because it is being traced.<br>W paging (not valid since the 2.6.xx kernel)<br>X dead (should never be seen)<br>Z defunct (“zombie”) process, terminated but not reaped by its parent.</p></blockquote><p>只安装security update</p><blockquote><p>sudo unattended-upgrades -d ## 加上-d和verbose的意思差不多</p></blockquote><p>有些软件不是经常用就禁止开机启动吧</p><blockquote><p>sudo systemctl disable mysql ##因为这事redis老是装不上</p></blockquote><h3 id="2-1-装-ss"><a href="#2-1-装-ss" class="headerlink" title="2.1 装 ss"></a>2.1 装 ss</h3><blockquote><p>下载 shadowsocks 源码编译<br>git clone <a href="https://github.com/shadowsocks/shadowsocks">https://github.com/shadowsocks/shadowsocks</a></p></blockquote><h1 id="记得切换到-master-分支"><a href="#记得切换到-master-分支" class="headerlink" title="记得切换到 master 分支"></a>记得切换到 master 分支</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p>检查下版本</p><blockquote><p>ssserver –version</p></blockquote><p>编辑配置文件</p><blockquote><p>vim config.json</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>: <span class="string">"my_server_ip"</span>,  </span><br><span class="line">  <span class="attr">"server_port"</span>: <span class="number">8388</span>,</span><br><span class="line">  <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="attr">"local_port"</span>: <span class="number">1080</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"mypassword"</span>,</span><br><span class="line">  <span class="attr">"timeout"</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">  <span class="attr">"fast_open"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用ipv6的话(把”my_server_ip”改成”::”),这样访问通过ss访问ipv6.google.com就ok了(当然这要在确认host已有ipv6的前提下)<br>这跟nginx ipv6 server block很像：</p><blockquote><p>listen 80 default_server;<br>listen [::]:80 default_server ipv6only=on;</p></blockquote><p>如果你的服务器Linux 内核在3.7+，可以开启fast_open 以降低延迟。<br>linux 内核版本查看：</p><blockquote><p>cat /proc/version</p><p>ssserver -c config.json -d start #启动完成</p></blockquote><p>检查下是否启动了</p><blockquote><p>ps -ef | grep sss</p></blockquote><p>ss 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks/config.json # 前台运行</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>## 后台运行和停止</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>##  加入开机启动</span><br><span class="line"><span class="meta">#</span>## 在/etc/rc.local中加入</span><br><span class="line">sudo ssserver -c /etc/shadowsocks.json --user username -d start - 不要总是用root用户做事，adduser来做，给sudo权限即可</span><br></pre></td></tr></table></figure><p>nohup /net-speeder/net-speeder/net_speeder eth0 “tcp src port 12345” &gt; /dev/null 2&gt;&amp;1 &amp;</p><h3 id="2-2-SSR-以及一些衍生的软件"><a href="#2-2-SSR-以及一些衍生的软件" class="headerlink" title="2.2 SSR 以及一些衍生的软件"></a>2.2 SSR 以及一些衍生的软件</h3><p><a href="https://github.com/breakwa11/shadowsocks-rss/wiki">ShadowsocksR</a>启动后台运行命令</p><blockquote><p>python server.py -p 443 -k password -m aes-256-cfb -O auth_sha1_v4 -o http_simple -d start</p></blockquote><p><a href="https://zhgcao.github.io/2016/05/26/ubuntu-install-net-speeder/">net-speeder</a></p><blockquote><p>apt-get install libnet1-dev<br>apt-get install libpcap0.8-dev</p><p>venetX，OpenVZ 架构</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cd net-speeder-master/</span><br><span class="line">sh build.sh -DCOOKED</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>##Xen，KVM，物理机</span><br><span class="line">cd net-speeder-master/</span><br><span class="line">sh build.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>## 加速所有ip协议数据</span><br><span class="line"></span><br><span class="line">./net_speeder venet0 "ip"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>##只加速指定端口，例如只加速TCP协议的 8989端口, 切换到net-speeder的目录下</span><br><span class="line">./net_speeder venet0:0 "tcp src port 8989"</span><br><span class="line"></span><br><span class="line">./net_speeder venet0 "ip"</span><br></pre></td></tr></table></figure><p><a href="https://blog.kuoruan.com/48.html">net-speeder写入开机脚本</a></p><h3 id="2-3-升级内核开启-BBR"><a href="#2-3-升级内核开启-BBR" class="headerlink" title="2.3 升级内核开启 BBR"></a>2.3 升级内核开启 BBR</h3><p><a href="https://qiujunya.com/linodebbr.html">KVM 架构升级内核开启 BBR</a></p><p><a href="http://www.itfanr.cc/2016/10/02/use-shadowsocks-to-have-better-internet-experience/">ubuntu 16.4 安装 shadowsocks-libev</a></p><p>参考 github<a href="https://github.com/shadowsocks/shadowsocks-libev">官方教程</a>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software-properties-common -y</span><br><span class="line">sudo add-apt-repository ppa:max-c-lv/shadowsocks-libev -y</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install shadowsocks-libev</span><br><span class="line"></span><br><span class="line">apt-get install --only-upgrade &lt;packagename&gt; ## 只更新这一个程序</span><br><span class="line">apt list --upgradable ## 看一下哪些程序可以更新</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Edit the configuration file</span><br><span class="line">sudo vi /etc/shadowsocks-libev/config.json ## 这里记得把server address改成实际的ip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Edit the default configuration for debian</span><br><span class="line">sudo vi /etc/default/shadowsocks-libev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Start the service</span><br><span class="line">sudo /etc/init.d/shadowsocks-libev start    # for sysvinit, or</span><br><span class="line">sudo systemctl start shadowsocks-libev      # for systemd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>#加入开机启动</span><br><span class="line"><span class="meta">#</span>#在/etc/rc.local中加入</span><br><span class="line">sudo /etc/init.d/shadowsocks-libev start</span><br><span class="line">sudo ss-server -c /etc/shadowsocks-libev/config.json -u ## 开启udp转发  netstat -lnp确认ss-server确实监听了udp端口</span><br></pre></td></tr></table></figure><p>其实跟安装 ss 很像的</p><h2 id="2-4-安装libsodium"><a href="#2-4-安装libsodium" class="headerlink" title="2.4 安装libsodium"></a>2.4 安装libsodium</h2><p>转自<a href="https://doub.io/ss-jc51/">逗比</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span># debian系列</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span># 安装 编译所需组件包：</span><br><span class="line">apt-get install -y build-essential</span><br><span class="line"><span class="meta">#</span>## 获取 libsodium最新版本：</span><br><span class="line">Libsodiumr_ver=$(wget -qO- "https://github.com/jedisct1/libsodium/tags"|grep "/jedisct1/libsodium/releases/tag/"|head -1|sed -r 's/.*tag\/(.+)\"&gt;.*/\1/') &amp;&amp; echo "$&#123;Libsodiumr_ver&#125;"</span><br><span class="line"><span class="meta">#</span># 下载最新 libsodium版本编译文件：</span><br><span class="line">wget --no-check-certificate -N "https://github.com/jedisct1/libsodium/releases/download/$&#123;Libsodiumr_ver&#125;/libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz"</span><br><span class="line">tar -xzf libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz &amp;&amp; cd libsodium-$&#123;Libsodiumr_ver&#125;</span><br><span class="line">./configure --disable-maintainer-mode &amp;&amp; make -j2 &amp;&amp; make install ## 这段最好sudo 去做</span><br><span class="line">ldconfig</span><br><span class="line"><span class="meta">#</span># 删掉之前下载的文件</span><br><span class="line">cd .. &amp;&amp; rm -rf libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz &amp;&amp; rm -rf libsodium-$&#123;Libsodiumr_ver&#125;</span><br></pre></td></tr></table></figure></p><p>现在就可以去config.json文件中将加密方式改成: chacha20 了，重启下ss即可</p><h3 id="2-5-查看日志"><a href="#2-5-查看日志" class="headerlink" title="2.5 查看日志"></a>2.5 查看日志</h3><p>日志文件的位置在/var/log/shadowsocks.log<br>下面这条命令用于查看访问了哪些网站<br>cat  shadowsocks.log | awk ‘{ print $5}’ |grep -o ‘^[^:]*’ | sort | uniq -c | sort -n</p><p>查看尝试连接本服务器的客户端<br>cat shadowsocks.log | awk ‘{ print $NF }’| grep -o ‘^[^:]*’ | sort | uniq -c | sort -n</p><h2 id="3-ubuntu自带的防火墙叫做ufw，用起来也很简单"><a href="#3-ubuntu自带的防火墙叫做ufw，用起来也很简单" class="headerlink" title="3. ubuntu自带的防火墙叫做ufw，用起来也很简单"></a>3. ubuntu自带的防火墙叫做ufw，用起来也很简单</h2><p><a href="https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands">digital ocean的ufw教程</a></p><h2 id="4-跑分"><a href="#4-跑分" class="headerlink" title="4.跑分"></a>4.跑分</h2><p><a href="https://github.com/Teddysun/across">VPS 跑分软件</a><br>git clone 下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd across</span><br><span class="line">wget -qO- bench.sh | bash ###（亲测可用，也可以自己看Readme）</span><br><span class="line"><span class="meta">#</span>## 或者</span><br><span class="line">curl -Lso- bench.sh | bash</span><br></pre></td></tr></table></figure><p>下面是一些自己试过的</p><h3 id="BandWagon"><a href="#BandWagon" class="headerlink" title="BandWagon"></a>BandWagon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------</span><br><span class="line">CPU model            : Intel(R) Xeon(R) CPU E3-1275 v5 @ 3.60GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 3600.041 MHz</span><br><span class="line">Total size of Disk   : 12.0 GB (10.0 GB Used)</span><br><span class="line">Total amount of Mem  : 256 MB (217 MB Used)</span><br><span class="line">Total amount of Swap : 128 MB (122 MB Used)</span><br><span class="line">System uptime        : 2 days, 4 hour 20 min</span><br><span class="line">Load average         : 0.06, 0.05, 0.01</span><br><span class="line">OS                   : Ubuntu 14.04.1 LTS</span><br><span class="line">Arch                 : i686 (32 Bit)</span><br><span class="line">Kernel               : 2.6.32-042stab123.3</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 855 MB/s</span><br><span class="line">I/O speed(2nd run)   : 1.0 GB/s</span><br><span class="line">I/O speed(3rd run)   : 1.0 GB/s</span><br><span class="line">Average I/O speed    : 967.7 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         76.5MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          17.6MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            8.18MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           8.67MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           12.8MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             9.40MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           62.3MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          66.0MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            12.2MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           11.8MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          13.2MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="BuyVm"><a href="#BuyVm" class="headerlink" title="BuyVm"></a>BuyVm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">CPU model            : Intel(R) Xeon(R) CPU           L5639  @ 2.13GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 2000.070 MHz</span><br><span class="line">Total size of Disk   : 15.0 GB (1.3 GB Used)</span><br><span class="line">Total amount of Mem  : 128 MB (80 MB Used)</span><br><span class="line">Total amount of Swap : 128 MB (32 MB Used)</span><br><span class="line">System uptime        : 0 days, 22 hour 28 min</span><br><span class="line">Load average         : 0.10, 0.04, 0.05</span><br><span class="line">OS                   : Ubuntu 14.04.2 LTS</span><br><span class="line">Arch                 : i686 (32 Bit)</span><br><span class="line">Kernel               : 2.6.32-openvz-042stab116.2-amd64</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 102 MB/s</span><br><span class="line">I/O speed(2nd run)   : 97.1 MB/s</span><br><span class="line">I/O speed(3rd run)   : 147 MB/s</span><br><span class="line">Average I/O speed    : 115.4 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         14.7MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          6.15MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            2.54MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           2.99MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           2.96MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             4.27MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           11.7MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          13.0MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            1.89MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           3.26MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          3.72MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="DigitalOcean-Los-Angeles"><a href="#DigitalOcean-Los-Angeles" class="headerlink" title="DigitalOcean Los Angeles"></a>DigitalOcean Los Angeles</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------</span><br><span class="line">CPU model            : Intel(R) Xeon(R) CPU E5-2650L v3 @ 1.80GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 1799.998 MHz</span><br><span class="line">Total size of Disk   : 20.2 GB (1.0 GB Used)</span><br><span class="line">Total amount of Mem  : 488 MB (33 MB Used)</span><br><span class="line">Total amount of Swap : 0 MB (0 MB Used)</span><br><span class="line">System uptime        : 0 days, 0 hour 3 min</span><br><span class="line">Load average         : 0.16, 0.10, 0.03</span><br><span class="line">OS                   : Ubuntu 16.04.2 LTS</span><br><span class="line">Arch                 : x86_64 (64 Bit)</span><br><span class="line">Kernel               : 4.4.0-78-generic</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 581 MB/s</span><br><span class="line">I/O speed(2nd run)   : 711 MB/s</span><br><span class="line">I/O speed(3rd run)   : 777 MB/s</span><br><span class="line">Average I/O speed    : 689.7 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         161MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          15.7MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            5.96MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           5.71MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           6.45MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             30.4MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           29.9MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          57.7MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            3.64MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           7.59MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          8.84MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="DigitalOcean-Sinapore-ip-address-lokks-like-Russian"><a href="#DigitalOcean-Sinapore-ip-address-lokks-like-Russian" class="headerlink" title="DigitalOcean Sinapore (ip address lokks like Russian)"></a>DigitalOcean Sinapore (ip address lokks like Russian)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------------------</span><br><span class="line">CPU model            : Intel(R) Xeon(R) CPU E5-2630L 0 @ 2.00GHz</span><br><span class="line">Number of cores      : 1</span><br><span class="line">CPU frequency        : 1999.999 MHz</span><br><span class="line">Total size of Disk   : 20.2 GB (1.0 GB Used)</span><br><span class="line">Total amount of Mem  : 488 MB (36 MB Used)</span><br><span class="line">Total amount of Swap : 0 MB (0 MB Used)</span><br><span class="line">System uptime        : 0 days, 0 hour 2 min</span><br><span class="line">Load average         : 0.17, 0.20, 0.09</span><br><span class="line">OS                   : Ubuntu 16.04.2 LTS</span><br><span class="line">Arch                 : x86_64 (64 Bit)</span><br><span class="line">Kernel               : 4.4.0-78-generic</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   : 662 MB/s</span><br><span class="line">I/O speed(2nd run)   : 741 MB/s</span><br><span class="line">I/O speed(3rd run)   : 728 MB/s</span><br><span class="line">Average I/O speed    : 710.3 MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Node Name                       IPv4 address            Download Speed</span><br><span class="line">CacheFly                        205.234.175.175         20.8MB/s</span><br><span class="line">Linode, Tokyo, JP               106.187.96.148          18.6MB/s</span><br><span class="line">Linode, Singapore, SG           139.162.23.4            83.8MB/s</span><br><span class="line">Linode, London, UK              176.58.107.39           5.71MB/s</span><br><span class="line">Linode, Frankfurt, DE           139.162.130.8           8.13MB/s</span><br><span class="line">Linode, Fremont, CA             50.116.14.9             2.82MB/s</span><br><span class="line">Softlayer, Dallas, TX           173.192.68.18           6.18MB/s</span><br><span class="line">Softlayer, Seattle, WA          67.228.112.250          8.47MB/s</span><br><span class="line">Softlayer, Frankfurt, DE        159.122.69.4            6.77MB/s</span><br><span class="line">Softlayer, Singapore, SG        119.81.28.170           97.9MB/s</span><br><span class="line">Softlayer, HongKong, CN         119.81.130.170          35.2MB/s</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><img src="http://www.haldir66.ga/static/imgs/scenery1511100809920.jpg" alt=""></p><h3 id="跑java？"><a href="#跑java？" class="headerlink" title="跑java？"></a>跑java？</h3><p>算了吧，简单读个文本文件print出来cpu就飙到50%。</p><h3 id="5-关于-docker"><a href="#5-关于-docker" class="headerlink" title="5. 关于 docker"></a>5. 关于 docker</h3><p>youtube 上有人在 Digital Ocean 的 vps 上安装 docker，主要作用就是将一个复杂的操作系统打包成一个下载即用的容器。进入容器中，可以像在实际的操作系统中一样运行指令。所以虚拟化的机器随时可以使用其他操作系统。<a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04">how-to-install-and-use-docker-on-ubuntu-16-04</a><br><a href="https://nodejs.org/en/docs/guides/nodejs-docker-webapp/">用docker host一个node js app</a>。实测下来image大小在600MB左右，内存占用200MB左右。</p><p>docker常用的命令有那么几条</p><blockquote><p>docker run hello-world<br>docker search ubuntu<br>docker pull ubuntu<br>docker run ubuntu ## 进入ubuntu这个container<br>docker images<br>docker run -it ubuntu<br>exit</p></blockquote><p>##这两条命令用于自己在本地打一个docker image<br>docker build -t <your username>/node-web-app .<br>docker build -t packsdkandroiddocker.image -f ./scripts/PackSdkDockerfile .</p><p>docker会在/var/lib/docker文件夹里吃掉大量空间，释放空间的话</p><blockquote><p>docker system prune -a</p></blockquote><p>关于ubuntu添加ppa<br><a href="https://www.digitalocean.com/community/tutorials/ubuntu-and-debian-package-management-essentials">debian系的package management方式</a>.<br>ppa(personal package archives)<br>添加ppa的方式</p><blockquote><p>sudo add-apt-repository ppa:owner_name/ppa_name</p></blockquote><h3 id="Dnsmasq-vps自建DNS服务器"><a href="#Dnsmasq-vps自建DNS服务器" class="headerlink" title="Dnsmasq vps自建DNS服务器"></a>Dnsmasq vps自建DNS服务器</h3><p><a href="https://www.digitalocean.com/community/tags/server-optimization?type=tutorials">tips onserver optimization</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.vpser.net/opt/vps-add-swap.html">vps 优化</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://haldir66.ga/static/imgs/scenery1511100756208.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
      <category term="tools" scheme="https://haldir65.github.io/tags/tools/"/>
    
  </entry>
  
</feed>
