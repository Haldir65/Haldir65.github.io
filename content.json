[{"title":"Hexo部署个人博客记录","date":"2217-01-08T18:01:01.000Z","path":"2217/01/08/2017-01-08-trouble-shooting-with-my-blog/","text":"使用 hexo 写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的 blog 一个值得置顶的文章的话，我觉得一篇记录使用 hexo 过程中的一些解决问题的方法的文章是再合适不过的了。 1. 经常更新 yilia 的 themeyilia主题经常会更新，及时更新 theme 会发现很多新的特性及 bug fix 2. 部署相关 部署到 github 123hexo clean //清除缓存hexo g -d //一步到位 = hexo g + hexo dhexo s //localost:4000本地预览 部署过程中出现的一些错误 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253$ hexo g -dINFO Start processingERROR Process failed: _posts/2016-12-10-adb-command.mdYAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 3, column 11: categories: [技术] ^ at generateError (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:162:10) at throwError (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:168:9) at readBlockMapping (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1040:9) at composeNode (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1326:12) at readDocument (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1488:3) at loadDocuments (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1544:5) at Object.load (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1561:19) at parseYAML (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:80:21) at parse (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:56:12) at D:\\Blog\\github\\node_modules\\hexo\\lib\\plugins\\processor\\post.js:52:18 at tryCatcher (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23) at Promise._settlePromiseFromHandler (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:507:35) at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18) at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10) at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18) at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18) at PromiseArray._resolve (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:125:19) at PromiseArray._promiseFulfilled (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:143:14) at PromiseArray._iterate (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:113:31) at PromiseArray.init [as _init] (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:77:10) at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:564:21) at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10) at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18) at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18) at PromiseArray._resolve (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:125:19) at PromiseArray._promiseFulfilled (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:143:14) at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:572:26) at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10) at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18) at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18) at Promise._resolveCallback (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:431:57) at Promise._settlePromiseFromHandler (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:522:17) at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18) at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10) at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18) at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18) at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21 at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-fs\\node_modules\\graceful-fs\\graceful-fs.js:78:16 at tryToString (fs.js:455:3) at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:442:12)INFO Files loaded in 1.48 sINFO Generated: sitemap.xmlINFO Generated: atom.xmlINFO Generated: 2017/01/08/2017-01-08-trouble-shooting-with-my-blog/index.htmlINFO Generated: index.htmlINFO 4 files generated in 2.26 sINFO Deploying: git 找了好久，有说”_config.xml” 文件 有空格的，有说 title 被乱改的，试了好长时间，改成这样就不再报错了。所以，冒号后面一定要加空格，英文半角的 1234567---title: adb常用命令手册date: 2016-12-10 21:14:14tags: - android - adb--- tags 有两种写法，一种是上面这样前面加横杠另一种长这样，写成数组形式 123456---title: my awesometitledate: 2017-05-07 16:48:01categories: blogtags: [linux,python]--- 3. 一些功能的实现 置顶功能将 node_modules/hexo-generator-index/lib/generator.js 的文件内容替换成以下内容 12345678910111213141516171819202122232425262728\"use strict\";var pagination = require(\"hexo-pagination\");module.exports = function(locals) &#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if (a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if (a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if (a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if (!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || \"page\"; return pagination(\"\", posts, &#123; perPage: config.index_generator.per_page, layout: [\"index\", \"archive\"], format: paginationDir + \"/%d/\", data: &#123; __index: true &#125; &#125;);&#125;; 同时在文章开头添加 top : 1 即可 ，实际排序按照这个数字从大到小排序 另一种做法是手动将date改大，日期越靠后的越在前面。 12345 title: Hexo置顶文章date: 2016-11-11 23:26:22tags:[置顶]categories: Hexotop: 0 # 0或者1 个人建议：置顶不要太多 4. SublimeText 的一些快捷键由于文章大部分都是使用 SublimeText 写的，Typroa 这种所见即所得的编辑器也不错，但对于掌握 MardkDown 语法没有帮助。这里摘录一些 SubLimeText 的快捷键。 Ctrl+Shift+P：打开命令面板Ctrl+P：搜索项目中的文件Ctrl+G：跳转到第几行Ctrl+W：关闭当前打开文件 CTRL+F4 也可以Ctrl+Shift+W：关闭所有打开文件Ctrl+Shift+V：粘贴并格式化Ctrl+D：选择单词，重复可增加选择下一个相同的单词Ctrl+L：选择行，重复可依次增加选择下一行Alt+Shift+数字：分屏显示Ctrl+Shift+L：选择多行Ctrl+Shift+D：复制粘贴当前行Ctrl+X：删除当前行Ctrl+Shift+左箭头 往左边选择内容Shift+向左箭头 向左选择文本Ctrl+B 编译，markDown 生成 html 文件Alt+2 切换到第二个 Tab（打开的文件，记得 chrome 是 ctrl+2）Ctrl+R：前往 对应的方法的实现*快速加上[] 选中单词按 [ 即可批量更改当前页面相同的单词 alt+F3 Ctrl+Enter 在下一行插入新的一行Ctrl+Shift+Enter 在上一行插入新的一行Shift+ 向上箭头 向上选中多行 Ctrl+Shift+D：复制粘贴当前行 Ctrl+Shift+Enter：在当前行前插入新行Ctrl+M：跳转到对应括号Ctrl+U：软撤销，撤销光标位置Ctrl+J：选择标签内容Ctrl+F：查找内容Ctrl+Shift+F：查找并替换Ctrl+H：替换Ctrl+N：新建窗口Ctrl+K+B：开关侧栏Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身Ctrl+F2：设置/删除标记Ctrl+/：注释当前行Ctrl+Shift+/：当前位置插入注释Ctrl+Alt+/：块注释，并 Focus 到首行，写注释说明用的Ctrl+Shift+A：选择当前标签前后，修改标签用的F11：全屏Shift+F11：全屏免打扰模式，只编辑当前文件Alt+F3：选择所有相同的词Alt+.：闭合标签Shift+右键拖动：光标多不，用来更改或插入列内容Alt+数字：切换打开第 N 个文件鼠标的前进后退键可切换 Tab 文件按 Ctrl，依次点击或选取，可需要编辑的多个位置按 Ctrl+Shift+上下键，可替换行 5. title 不能以[]开头前面加上###确实能够让字号变大，但不要写 4 个#，后面的字母会大小写不分的 6. markdown 语法MarkDown 页面内部跳转MarkDown 技巧：两种方式实现页内跳转 一个星星包起来是斜体字两个星星包起来是粗体字那么三个星星呢 7.github 提交 commit 的时候显示 Emoji链接在此 8.换电脑了怎么办亲测，把整个目录下所有文件全部复制粘贴到新电脑上，装上 node，然后装上 hexo，记得勾选添加到 PATH,然后就可以了。需要注意的是小文件比较多，所以复制粘贴可能要十几分钟。 9. 有时候写的代码会给你在每一行前面加上 true比如写一段 css 的代码时候，很多时候预览会给每一行前面加上一个 true，解决办法：用 TAB 键缩进即可 10. markdown-live 是一个非常好用的 node module项目地址前提是安装了 node npm install -g markdown-live md-live 编辑md文件的同时，保存就会同步刷新网页预览，非常好用 11. 如果运行 hexo g 生成的 index.html 是空的输出 WARN No layout: tags/service/index.html原因是 themes/文件夹下没有 clone 对应的主题 换成travis之后，在travis.yml文件中，添加了12345cache: yarn: true directories: - node_modules - themes cahe也就意味着后续，所有对于themes文件夹中的_config.yml文件的修改都不会生效。这也就是我一遍遍尝试更改theme文件夹中_config文件不生效的原因。所以要么去掉cache ，要么自己写bash script一行行的改。 参考 Hexo 博文置顶技巧 SublimeText 快捷键 MarkDown 语法学起来很快的 travis 自动部署","tags":[{"name":"置顶","slug":"置顶","permalink":"https://haldir65.github.io/tags/置顶/"},{"name":"hexo","slug":"hexo","permalink":"https://haldir65.github.io/tags/hexo/"}]},{"title":"即刻备忘录","date":"2046-12-18T22:58:14.000Z","path":"2046/12/18/2017-12-18-random-new-thoughts/","text":"一个待办事项的仓库 个人分享–web 前端学习资源分享 WPA 所代表的 Web 开发应是未来 js 循环闭包的解决方法 动态类型一时爽，代码重构火葬场 Promise 链式调用与终止，异常处理 iview，elementUi embeed video with iframeAC2016腾讯前端技术大会 1 1 1 H5直播那些事 [ ] flex,grid scheme 这东西算跨客户端平台的，比如在 App 中调起支付宝(用的是 alipayqr://)。其实就是一个系统内跨应用调用。用法 [ ] websocket nodejs [ ] Paul Irish from google [ ] form表单可以跨域一个是历史原因要保持兼容性 [ ] 通过file input上传图片，原生ajax以及Ajax，自己搭建上传服务器大概能猜到暴风影音的局域网传输实现了 [ ] lightbox一个很好看的js图片查看库 [ ] nio stuff [ ] 仿门户网站js相册， js相册2 [ ] 八大排序算法的python实现 [ ] 如何编写 jQuery 插件 [ ] 用正则检测或者解析json(jQuery源码里有) [ ]javascript中new FileReader()，以及canvas api,以及js进行图片缩放和裁剪 [ ] Django部署个人网站(Gunicorn，Nginx) [ ] Redux和Flux很像 [ ] URL Encoding,就是那个在网址里把字符转成百分号加上UTF-8的找到了阮一峰老师的解释 已完成 用 express 转接一个知乎 Api，添加 Access-control-allow-origin,或许还可以用 redis 缓存数据结果（一个就好）由此想到一篇文章”How to use Pythonto build a restful Web Service”.只不过用的是 Tornado git hook (github travis 持续集成，git push 会触发服务器的一系列操作) 基于前后端分离的理念，后台只负责提供数据，render page 的任务应该交给前端。（所以用 express-handlebars 写页面的方式写着很累） 集成 travis-ci，记得 after-success script 的结果并不会影响 build 的结果（即，after-success 执行脚本发生了错误，在日志里有输出 error，但实际显示的 build result 仍为 success），还有 travis 的输出 log 需要默认是折叠的，要展开才能看清楚，但在 afterSuccess 里面的指令的输出一定是有的。 随便放一个文件到/usr/bin/就可以直接调用这个文件名来起这个命令了吗？（实际操作只需要建立一个symbolic link就好了） 单个网卡最多65535个端口，c10K oAuth2原理，其实流程上和很多客户端的微信登陆，新浪微博登陆很像的 在Android手机上尝试用一个unix domain socket用于localhost进程间ipc(其实就是保证端口号一致，给网络权限就好了) 写 groovy 用intelij全家桶就可以了，groovy的语法其实没什么，主要是了解编译的流程和基本原理，这个需要看official doc 开发gradle plugin优化MultiDex。长远来看，5.0以后的手机越来越多，MultiDex也不值得过于关注。 intelij 点击run 实际调用的command line是两个，一个是javac，编译出来的class文件放到了target文件夹，紧接着用java命令带上一大串classpath去调用主函数 Android Studio 编译过程，其实就是gradle assembleXXX 好了之后adb push到手机上，再安装，最后起主界面 Android 编译及 Dex 过程源码分析 如何调试 Android 打包流程？，一个remote的事 一个用于优化 png 图片的 gradle 插件，用来看 groovy 语法挺好的。以及 How to write gradle plugin XSS 攻击,DOM based和Stored XSS,基本上就是不要相信用户的输入，除了合法输入以外一律过滤掉* Good For Nothing [ ] 用GDB调试程序 [ ] npm install graphql(mostly a server side javascript stuff) 使用 express 模拟网络延迟 基于 Docker 打造前端持续集成开发环境 vS Code Vender Prefix plugin =&gt; auto prefix loader 前后端分离 sql漏洞 深入浅出腾讯云 CDN：缓存篇不管SSD盘或者SATA盘都有最小的操作单位，可能是512B，4KB，8KB。如果读写过程中不进行对齐，底层的硬件或者驱动就需要替应用层来做对齐操作，并将一次读写操作分裂为多次读写操作。 curl的几种常见用法 Android进程的加载流程 前后端同构 install nginx , jenkin ci, deploying nginx in docker(Http Load Balaning with Docker and nginx)(https://www.digitalocean.com/community/tutorials/how-to-configure-nginx-with-ssl-as-a-reverse-proxy-for-jenkins)","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"}]},{"title":"React语法及Redux实践笔记","date":"2018-03-17T23:56:45.000Z","path":"2018/03/17/2018-03-17-react-cheatSheet/","text":"介绍React语法及一些Redux的使用方法 Take Away基本的流程就是创建一个继承React.Component的class，设定state，添加点击事件。最重要的是在render()函数中返回一个element，比如说这样1234567891011121314151617class LoginControl extends React.Component&#123; constructor(props)&#123; super(props); &#125; const myelement= &lt;button&gt;hello 这就是jsx语法 there&lt;/button&gt; return( // &lt;div&gt; // &lt;Greeting isLoggedIn=&#123;isLoggedIn&#125;/&gt; // &#123;button&#125; // &lt;/div&gt; myelement // 这里把html tag提取到外面也行，写在里面也行，混着写的话，&#123;myelement&#125;，加上大括号就是了 // 官方guide上的原话是: You may embed any expressions in JSX by wrapping them in curly braces(大括号). )&#125;// return里面只能返回一个tag props是只读的 JSX allows embedding any expressions ,就是说jsx语句中，大括号包起来的地方，什么js都能写 安装 yarn global add create-react-appcreate-react-app my-appcd my-appnpm start 程序入口在html文件中添加这样一个tag1&lt;div id=\"root\"&gt;&lt;/div&gt; 在index.js中添加这样一段12const element = &lt;h1&gt;Hello, world&lt;/h1&gt;;ReactDOM.render(element, document.getElementById('root')); 可以认为ReactDOM.render方法就是程序的入口 Element和Component的概念Element感觉上就像一个或者多个UI控件的集合1const element = &lt;h1&gt;Hello, world&lt;/h1&gt;; //这就算一个Element,用于描述将要展示在屏幕上的效果 Component就像javaScript函数一样，它们接收任意输入，输出React element以显示在屏幕上。需要注意的是，Component的名字一定要 首字母大写 ，因为React把小写字母开头的当做正常的html element来处理了。1234567891011//一个返回Element的函数就算作是Component了function Welcome(props) &#123; return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;&#125;// 或者用es6语法class Welcome extends React.Component &#123; render() &#123; return &lt;h1&gt;Hello, &#123;this.props.name&#125;&lt;/h1&gt;; &#125;&#125; 还有就是props是immutable的，想要改的话用State吧。也即Component应该表现为纯粹的function，不修改状态。 State的更改State是在constructor里面初始化的，想要更改其中的值的话，不能直接赋值，需要使用setState方法 this.setState({comment: ‘Hello’}); 但有时State的更新是异步的，所以要使用两个参数的setState方法123this.setState((prevState, props) =&gt; (&#123; counter: prevState.counter + props.increment&#125;)); JSX语法12345678910111213141516171819202122232425const element = ( &lt;h1 className=\"greeting\"&gt; Hello, world! &lt;/h1&gt;);// 这俩其实是一样的const element = React.createElement( 'h1', &#123;className: 'greeting'&#125;, 'Hello, world!');// jsx语句最终都是被用在component的return语句中的：function WarningBanner(props) &#123; if (!props.warn) &#123; return null; &#125; return ( &lt;div className=\"warning\"&gt; Warning! &lt;/div&gt; );&#125; 局部更新页面发生变化时，React只更新需要刷新的部分 生命周期钩子函数12345678910111213componentDidMount() &#123; fetchPosts().then(response =&gt; &#123; this.setState(&#123; posts: response.posts &#125;); &#125;); fetchComments().then(response =&gt; &#123; this.setState(&#123; comments: response.comments &#125;); &#125;);&#125; 事件处理123456789101112131415161718192021222324252627282930313233343536373839404142434445464748function ActionLink() &#123; function handleClick(e) &#123; e.preventDefault(); console.log('The link was clicked.'); &#125; return ( &lt;a href=\"#\" onClick=&#123;handleClick&#125;&gt; Click me &lt;/a&gt; );&#125;const element = &lt;h1&gt;Hello, world&lt;/h1&gt;;ReactDOM.render(&lt;ActionLink/&gt;, document.getElementById('root'));// 或者是使用箭头函数 以及 Function.prototype.bind&lt;button onClick=&#123;(e) =&gt; this.deleteRow(id, e)&#125;&gt;Delete Row&lt;/button&gt;&lt;button onClick=&#123;this.deleteRow.bind(this, id)&#125;&gt;Delete Row&lt;/button&gt;//在一个Component中，时间监听最后要加上bind(this)class Calculator extends React.Component &#123; constructor(props) &#123; super(props); this.handleChange = this.handleChange.bind(this); this.state = &#123;temperature: ''&#125;; &#125; handleChange(e) &#123; this.setState(&#123;temperature: e.target.value&#125;); &#125; render() &#123; const temperature = this.state.temperature; return ( &lt;fieldset&gt; &lt;legend&gt;Enter temperature in Celsius:&lt;/legend&gt; &lt;input value=&#123;temperature&#125; onChange=&#123;this.handleChange&#125; /&gt; &lt;BoilingVerdict celsius=&#123;parseFloat(temperature)&#125; /&gt; &lt;/fieldset&gt; ); &#125;&#125; 组件之间通信In React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. 也就是说，要把state提取到最近的公用父组件中。事件发生时，子组件调用this.props.onXXX(由父组件提供)通知父组件，子组件不再维护自身state，父组件的state成为两个子组件唯一的共有的single source of truth 渲染list的时候记得要加上一个key，这是规定12345678910//错误const listItems = numbers.map((number) =&gt; &lt;li&gt;&#123;number&#125;&lt;/li&gt;);//正确const listItems = numbers.map((number) =&gt; &lt;li key=&#123;number.toString()&#125;&gt;&#123;number&#125;&lt;/li&gt;);//一个List element中的list元素应当具有独一无二的key，但不同List element实例之间，元素的key没必要遵守这一规则 常见错误 Super expression must either be null or a function, not undefined1234567class LoginControl extends component&#123;&#125;// 应该是class LoginControl extends React.Component&#123;&#125;","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"}]},{"title":"mysql填坑记录","date":"2018-02-04T21:37:37.000Z","path":"2018/02/04/2018-02-04-mysql-metup/","text":"关系型数据库很多如，MS Access, SQL Server, MySQLNoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”，NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。典型的代表如MongoDb. 读音：MySQL is pronounced as “my ess-que-ell,” in contrast with SQL, pronounced “sequel.” RDBMS(关系型数据库)RDBMS stands for Relational Database Management System. RDBMS is the basis for SQL, and for all modern database systems like MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access. sql tutorials mySql相关 安装How to Install MySQL on Ubuntuhow-to-create-a-new-user-and-grant-permissions-in-mysqla-basic-mysql-tutorial mysql -u root -p ## 以root身份登录 Too many connectionsmysql连接多了容易爆内存，关掉的方法 mysqladmin -u root -p shutdown ## 关闭sudo /etc/init.d/mysql restart ## 重启 host-xxx-xx-xxx-xxx-is-not-allowed-to-connect-to-this-mysql-server 1。 改表法。可能是你的帐号不允许从远程登陆，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，从”localhost”改称”%” windows登录出错报10061的解决方式services.msc =&gt; 找到MySQL57 =&gt; 右键（启动） 配置文件的位置: nano /etc/mysql/mysql.conf.d/mysqld.conf 1234mysql -u root -puse mysql;update user set host = '%' where user = 'root';select host, user from user; 授权法。 例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。12GRANT ALL PRIVILEGES ON *.* TO 'myuser'@'%' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;FLUSH PRIVILEGES; 如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器，并使用mypassword作为密码123GRANT ALL PRIVILEGES ON *.* TO 'myuser'@'192.168.1.3' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;FLUSH PRIVILEGES; 如果你想允许用户myuser从ip为192.168.1.6的主机连接到mysql服务器的dk数据库，并使用mypassword作为密码123GRANT ALL PRIVILEGES ON dk.* TO 'myuser'@'192.168.1.3' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;FLUSH PRIVILEGES; HeidiSQL 中创建database记得选择character set ‘utf-8’Collation: ‘utf_8_general_cli’; CURD COMMANDS首先要注意的是所有sql语句最后面都要跟一个分号123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596SHOW DATABASES;CREATE DATABASE dbname;USE dbname;## show how many tables are there in this tableSHOW TABLES;## create tableCREATE TABLE potluck (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,name VARCHAR(20),food VARCHAR(30),confirmed CHAR(1),signup_date DATE);## show everytingSELECT * FROM potluck;SELECT user_id FROM potluck;SELECT FROM potluck; // 这么写sql 语法有误，必须声明想要选出那些column## how does potluck look like?DESCRIBE potluck;## ADD STUFFINSERT INTO `potluck` (`id`,`name`,`food`,`confirmed`,`signup_date`) VALUES (NULL, \"John\", \"Casserole\",\"Y\", '2012-04-11');### 亲测，在heidisql中这么输入也能insert一行,所以这些冒号也不是必须的INSERT INTO user (user_id,login,password,email,date_added,date_modified) VALUES (1,\"firstlogin\",\"dumbpasws\",\"sample@email.com\",'2012-03-09','2018-01-09');## update stuffUPDATE `potluck` SET `confirmed` = 'Y' WHERE `potluck`.`name` ='Sandy';UPDATE user SET user_id = 11 WHERE user_id =10;## 亲测这么干也没问题SELECT user_id FROM user WHERE user_nick = 'john' OR user_id &gt; 10; ## 精确匹配字符串用等号UPDATE user SET salary= 10000 WHERE salary is NULL;## 更新的时候用=号，判断为空用IS NULL ，对应的也有IS NOT NULL.UPDATE user SET salary= 22000 WHERE salary &lt; 20000; ## 亲测这么干也行## 这样的条件语句还有很多，这个应该叫做Operator(操作符)操作符主要分为四类Arithmetic operators （数学加减乘除）Comparison operators（比较大小的）Logical operators （逻辑运算符） AND， ANY, BETWEEN,EXISTS,LIKE,OR ,IS NULL ,IS NOT NULL, UNIQUEOperators used to negate conditions挑几个不容易理解的SELECT * FROM user WHERE EXISTS (SELECT * FROM todo WHERE user_id = 1) ;## UNIQUE是用在创建表或者改表结构的:CREATE TABLE Persons(Id_P int NOT NULL,LastName varchar(255) NOT NULL,FirstName varchar(255),Address varchar(255),City varchar(255),UNIQUE (Id_P))// unique的意思很明显，不能允许出现同样的row如果在SELECT的时候想要去重，用DISTINCTSELECT DISTINCT content FROM todo;SELECT COUNT(*) FROM todo; // 看下当前数据库有多少行了SELECT COUNT(DISTINCT content) FROM todo; // 去重后看下有多少行### 模糊查询SELECT * FROM [user] WHERE u_name LIKE '%三%'; //将会把u_name为“张三”，“张猫三”、“三脚猫”，“唐三藏”等等有“三”的记录全找出来。SELECT * FROM [user] WHERE u_name LIKE '_三_'; //只找出“唐三藏”这样u_name为三个字且中间一个字是“三”的；_ ： 表示任意单个字符。匹配单个任意字符，它常用来限制表达式的字符长度语句：SELECT * FROM [user] WHERE u_name LIKE '[张李王]三' ; 将找出“张三”、“李三”、“王三”（而不是“张李王三”）；SELECT * FROM [user] WHERE u_name LIKE '[^张李王]三'; 将找出不姓“张”、“李”、“王”的“赵三”、“孙三”等；## orderBySELECT * FROM CUSTOMERS ORDER BY NAME DESC; //就是把查出来的结果排序，按照名称的ASIC顺序倒序排列## groupByGROUP BY的顺序在orderBy前面，意思就是把相同结果的整合成一行基本的语法是SELECT column_one FROM table_name WHERE column_two = \"\" AND ... GROUP BY column_one ORDER BY column_two;SELECT NAME, SUM(SALARY) FROM CUSTOMERS GROUP BY NAME; // 这里还用了sum函数，计算CUSTOMER表中各个用户的salary总和，name相同的算作一个合并起来。## we want to add a column to tableALTER TABLE potluck ADD email VARCHAR(40);## this way we add to a specific positionALTER TABLE potluck ADD email VARCHAR(40) AFTER name;## drop this columnALTER TABLE potluck DROP email;## how about delete this rowDELETE from potluck where name='Sandy';## 从删库到跑路TRUNCATE TABLE table_name; //将这张表的内容全部抹掉DROP TABLE table_name; //删除这个数据库 支持的数据类型signed or unsigned.(有符号或者无符号的) NumericINT (signed : -2147483648 to 2147483647 or unsigned: 0 to 4294967295.)，2的32次方(4 byte)TINYINT(signed : -128 to 127, or unsigned: from 0 to 255)，2的八次方(1 byte)BIGINT( signed :-32768 to 32767, or unsigned: from 0 to 65535.)，2的四次方(2 byte)FLOAT(只能是signed)，DOUBLE，DECIMAL Date and TimeDATE (1973-12-30), DATETIME (1973-12-30 15:30:00),TIMESTAMP (19731230153000),TIME (HH:MM:SS), String Types.CHAR(fixed-length，长度固定，不强制要求设置长度，默认1) ,VARCHAR(ariable-length string between 1 and 255，长度可变， ),BLOB or TEXT(BLOBs case sensitive，TEXT not case sensitive,这俩不需要设定长度，最大长度65535 )ENUM (置顶的枚举类型中之一，可以为NULL)BOOLEAN类型是不存在的用TINYINT就好了，0表示false，1表示true; 约束constraint的一个例子，A表的一个column引用了B表的一个id键作为foreign key.这时候如果想往A表里添加数据，假如尝试添加的这个外键在B表中不存在，会无法执行。1INSERT INTO todo (todo_id,user_id,content,completed,date_added,date_modified) VALUES (102,11,\"random stufffssss\",0,\"2012-02-09\",\"2016-03-27\"); Joins clause 从多个表中进行查询，对共有的属性进行操作1234567SELECT ID, NAME, AGE, AMOUNT FROM CUSTOMERS, ORDERS WHERE CUSTOMERS.ID = ORDERS.CUSTOMER_ID;inner join(查的是customer表，但查出来的结果里有来自ORDERS的column)SQL&gt; SELECT ID, NAME, AMOUNT, DATE FROM CUSTOMERS INNER JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID; 时间戳这一部分应该属于sql的函数了12345678910111213SELECT CURDATE(); // YYYY-MM-DD格式 2018-02-10select now(); // 2018-02-10 15:49:10想要时间戳的话可以这么干SELECT unix_timestamp(); // 1518249025select unix_timestamp('2008-08-08'); // 1218124800select unix_timestamp(CURDATE()); //1518192000// insert一行的时候自动设置插入的时间戳，当然简单了Create Table Student( Name varchar(50), DateOfAddmission datetime default CURRENT_TIMESTAMP); 建索引(Advanced sql)常常听后台的人说，这个sql查询太慢了，要建索引哈。但是索引对于提高查询性能也不是万能的，也不是建立越多的索引就越好。索引建少了，用 WHERE 子句找数据效率低，不利于查找数据。索引建多了，不利于新增、修改和删除等操作，因为做这些操作时，SQL SERVER 除了要更新数据表本身，还要连带立即更新所有的相关索引，而且过多的索引也会浪费硬盘空间。 查了下12CREATE INDEX PersonIndexON Person (LastName) ; //名为 \"PersonIndex\"，在 Person 表的 LastName 列： sql建索引主要是为了查找的时候能够跟翻字典一样快。一般来说，主键，外键应该建索引，频繁更新的列就不要更新索引了12CREATE INDEX salary_index ON COMPANY(salary); // 创建索引SELECT * FROM COMPANY INDEXED BY salary_index WHERE salary &gt; 5000; //创建好了之后就要根据index来查了 Transaction 事务 Atomicity − ensures that all operations within the work unit are completed successfully. Otherwise, the transaction is aborted at the point of failure and all the previous operations are rolled back to their former state. Consistency − ensures that the database properly changes states upon a successfully committed transaction. Isolation − enables transactions to operate independently of and transparent to each other. Durability − ensures that the result or effect of a committed transaction persists in case of a system failure. 论ACID是什么事务的写法1234567BEGIN;DELETE FROM CUSTOMERS WHERE AGE = 25;ROLLBACK; //回滚COMMIT; //提交更改SAVEPOINT SAVEPOINT_NAME;ROLLBACK TO SAVEPOINT_NAME; language supportusing mysql in node jsjava的版本accessing-data-mysql1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859package com.vae.jdbc;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class JDBCtest &#123; //数据库连接地址 public final static String URL = \"jdbc:mysql://localhost:3306/JDBCdb\"; //用户名 public final static String USERNAME = \"root\"; //密码 public final static String PASSWORD = \"smyh\"; //驱动类 public final static String DRIVER = \"com.mysql.jdbc.Driver\"; public static void main(String[] args) &#123; // TODO Auto-generated method stub //insert(p); //update(p); //delete(3); insertAndQuery(); &#125; //方法：使用PreparedStatement插入数据、更新数据 public static void insertAndQuery()&#123; Connection conn = null; try &#123; Class.forName(DRIVER); conn = DriverManager.getConnection(URL, USERNAME, PASSWORD); String sql1 = \"insert into user(name,pwd)values(?,?)\"; String sql2 = \"update user set pwd=? where name=?\"; PreparedStatement ps = conn.prepareStatement(sql1); // 这行其实比较费性能 ps.setString(1, \"smyhvae\"); ps.setString(2, \"007\"); ps.executeUpdate(); ps = conn.prepareStatement(sql2); ps.setString(1, \"008\"); ps.setString(2, \"smyh\"); ps.executeUpdate(); ps.close(); conn.close(); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125;&#125; python的版本python-mysql Another choicemariadb","tags":[]},{"title":"gradle command记事本","date":"2018-02-03T14:46:09.000Z","path":"2018/02/03/2018-02-03-gradle-command-explained/","text":"Gradle插件开发，官方推荐的具备first class supprot 的IDE包括Android Studio和Intelij Idea等。Gradle的编译流程分为三步build_lifecycleInitialization -&gt; Configuration -&gt; Execution执行的单位叫做TaskGradle作为一个program，可以为编译环境设置的参数很多 Android dependency ‘com.android.support:support-v4’ has different version for the compile (21.0.3) and runtime (26.1.0) classpath. You should manually set the same version via DependencyResolution 一些常用的gralde的command 如下 gradlew :app:dependencies –configuration releaseCompileClasspath//前面这个:app只是代表app这个project的gradle tasks –all ## 查看当前project的所有tasksgradle taskA taskB ##多个task是可以同时执行的gradle –status ## 查看当前操作系统中还有那些Daemon可以用 afterEvaluate是属于project的属性(也可以在allProject中加) I forced the version of support-v4 using this block in root build.gradle:12345678910subprojects &#123; project.configurations.all &#123; resolutionStrategy.eachDependency &#123; details -&gt; if (details.requested.group == 'com.android.support' &amp;&amp; !details.requested.name.contains('multidex') ) &#123; details.useVersion \"$supportlib_version\" &#125; &#125; &#125;&#125; All com.android.support libraries must use the exact same version [duplicate] 关于gradlew只是一层gradle的wrapper，找到这么一段话:The Gradle Wrapper is the preferred way of starting a Gradle build. It consists of a batch script for Windows and a shell script for OS X and Linux. These scripts allow you to run a Gradle build without requiring that Gradle be installed on your system. This used to be something added to your build file, but it’s been folded into Gradle, so there is no longer any need. Instead, you simply use the following command. $ gradle wrapper –gradle-version 2.13 ./gradlew -v 版本号./gradlew clean 清除app目录下的build文件夹./gradlew build 检查依赖并编译打包./gradlew assembleDebug 编译并打Debug包./gradlew assembleRelease 编译并打Release的包或者./gradlew aR./gradlew installRelease Release模式打包并安装或者./gradlew iR./gradlew uninstallRelease 卸载Release模式包 Android项目迁移到gradle 3.0需要注意的一些事 implementation和api的区别： When your module configures an implementation dependency, it’s letting Gradle know that the module does not want to leak the dependency to other modules at compile time. That is, the dependency is available to other modules only at runtime.Using this dependency configuration instead of api or compile can result in significant build time improvements because it reduces the amount of projects that the build system needs to recompile. For example, if an implementation dependency changes its API, Gradle recompiles only that dependency and the modules that directly depend on it. Most app and test modules should use this configuration.// a module 使用implementation引入了某个dependency，这个依赖就不会暴露给依赖于a的mudule。 When a module includes an api dependency, it’s letting Gradle know that the module wants to transitively export that dependency to other modules, so that it’s available to them at both runtime and compile time. This configuration behaves just like compile (which is now deprecated), and you should typically use this only in library modules. That’s because, if an api dependency changes its external API, Gradle recompiles all modules that have access to that dependency at compile time. So, having a large number of api dependencies can significantly increase build times. Unless you want to expose a dependency’s API to a separate test module, app modules should instead use implementation dependencies.//所以如果想要把自己的某项依赖暴露出去，让依赖自己的mudule也能用到这项依赖，就要用api了但是api和之前的compile是一样的，所以编译速度比implementation慢很多。 看到一份关于android build tasks解释的非常好的文章123456789101112131415161718192021222324252627mergeDebugResources任务的作用是解压所有的aar包输出到app/build/intermediates/exploded-aar，并且把所有的资源文件合并到app/build/intermediates/res/merged/debug目录里processDebugManifest任务是把所有aar包里的AndroidManifest.xml中的节点，合并到项目的AndroidManifest.xml中，并根据app/build.gradle中当前buildType的manifestPlaceholders配置内容替换manifest文件中的占位符，最后输出到app/build/intermediates/manifests/full/debug/AndroidManifest.xmlprocessDebugResources的作用1、调用aapt生成项目和所有aar依赖的R.java,输出到app/build/generated/source/r/debug目录3、生成资源索引文件app/build/intermediates/res/resources-debug.ap_2、把符号表输出到app/build/intermediates/symbols/debug/R.txtcompileDebugJavaWithJavac这个任务是用来把java文件编译成class文件，输出的路径是app/build/intermediates/classes/debug编译的输入目录有- 1、项目源码目录，默认路径是app/src/main/java，可以通过sourceSets的dsl配置，允许有多个（打印project.android.sourceSets.main.java.srcDirs可以查看当前所有的源码路径,具体配置可以参考android-doc- 2、app/build/generated/source/aidl- 3、app/build/generated/source/buildConfig- 4、app/build/generated/source/apt(继承javax.annotation.processing.AbstractProcessor做动态代码生成的一些库，输出在这个目录，具体可以参考Butterknife 和 Tinker)的代码transformClassesWithJarMergingForDebug的作用是把compileDebugJavaWithJavac任务的输出app/build/intermediates/classes/debug，和app/build/intermediates/exploded-aar中所有的classes.jar和libs里的jar包作为输入，合并起来输出到app/build/intermediates/transforms/jarMerging/debug/jars/1/1f/combined.jar，我们在开发中依赖第三方库的时候有时候报duplicate entry:xxx 的错误，就是因为在合并的过程中在不同jar包里发现了相同路径的类transformClassesWithMultidexlistForDebug这个任务花费的时间也很长将近8秒，它有两个作用- 1、扫描项目的AndroidManifest.xml文件和分析类之间的依赖关系，计算出那些类必须放在第一个dex里面,最后把分析的结果写到app/build/intermediates/multi-dex/debug/maindexlist.txt文件里面- 2、生成混淆配置项输出到app/build/intermediates/multi-dex/debug/manifest_keep.txt文件里项目里的代码入口是manifest中application节点的属性android.name配置的继承自Application的类，在android5.0以前的版本系统只会加载一个dex(classes.dex)，classes2.dex .......classesN.dex 一般是使用android.support.multidex.MultiDex加载的，所以如果入口的Application类不在classes.dex里5.0以下肯定会挂掉，另外当入口Application依赖的类不在classes.dex时初始化的时候也会因为类找不到而挂掉，还有如果混淆的时候类名变掉了也会因为对应不了而挂掉,综上所述就是这个任务的作用transformClassesWithDexForDebug这个任务的作用是把包含所有class文件的jar包转换为dex，class文件越多转换的越慢输入的jar包路径是app/build/intermediates/transforms/jarMerging/debug/jars/1/1f/combined.jar输出dex的目录是build/intermediates/transforms/dex/debug/folders/1000/1f/main app/build/intermediates/symbols/debug/R.txt这个文件长这样 int anim abc_fade_in 0x7f010000int anim abc_fade_out 0x7f010001int anim abc_grow_fade_in_from_bottom 0x7f010002int anim abc_popup_enter 0x7f010003int anim abc_popup_exit 0x7f010004int anim abc_shrink_fade_out_from_bottom 0x7f010005int anim abc_slide_in_bottom 0x7f010006int anim abc_slide_in_top 0x7f010007int anim abc_slide_out_bottom 0x7f010008int anim abc_slide_out_top 0x7f010009int anim design_bottom_sheet_slide_in 0x7f01000aint anim design_bottom_sheet_slide_out 0x7f01000bint anim design_snackbar_in 0x7f01000cint anim design_snackbar_out 0x7f01000dint anim tooltip_enter 0x7f01000eint anim tooltip_exit 0x7f01000fint animator design_appbar_state_list_animator 0x7f020000int attr actionBarDivider 0x7f030000int attr actionBarItemBackground 0x7f030001int attr actionBarPopupTheme 0x7f030002int attr actionBarSize 0x7f030003…按照字母从a-z开始，hex value自增(0x7f开头) Android Studio中点击run之后，执行了这些tasks Task spend time: 2ms :app:preBuild 64ms :app:preDebugBuild 9ms :app:compileDebugAidl 4ms :app:compileDebugRenderscript 1ms :app:checkDebugManifest 2ms :app:generateDebugBuildConfig 1ms :app:prepareLintJar 1ms :app:generateDebugResValues 0ms :app:generateDebugResources 57ms :app:mergeDebugResources 1ms :app:createDebugCompatibleScreenManifests 4ms :app:processDebugManifest 1ms :app:splitsDiscoveryTaskDebug 18ms :app:processDebugResources 1ms :app:generateDebugSources 11ms :app:javaPreCompileDebug 10ms :app:compileDebugJavaWithJavac 1ms :app:compileDebugNdk 0ms :app:compileDebugSources 4ms :app:mergeDebugShaders 1ms :app:compileDebugShaders 0ms :app:generateDebugAssets 8ms :app:mergeDebugAssets 19ms :app:transformClassesWithDexBuilderForDebug 6ms :app:transformDexArchiveWithExternalLibsDexMergerForDebug 7ms :app:transformDexArchiveWithDexMergerForDebug 1ms :app:mergeDebugJniLibFolders 12ms :app:transformNativeLibsWithMergeJniLibsForDebug 10ms :app:transformNativeLibsWithStripDebugSymbolForDebug 0ms :app:processDebugJavaRes 24ms :app:transformResourcesWithMergeJavaResForDebug 2ms :app:validateSigningDebug 7ms :app:packageDebug 0ms :app:assembleDebug 可以分成这5类吧 Preparation of dependencies. During this phase Gradle check that all libraries this module depends on are ready. If this module depends on another one, that module would be built as well. Merging resources and processing Manifest. After this phase resources and Manifest are ready to be packaged in the result file. Compiling. This phase started with Annotation Processors, in case you use them. Then source code is compiled into byte code. If you are using AspectJ, weaving also happens here. Postprocessing. All Gradle tasks with a “transform” prefix are part of this phase. Most important ones are: transformClassesWithMultidexlist and transformClassesWithDex. They produce .DEX files. Packaging and publishing. For libraries this stage means creating an .AAR file in the end, for applications — .APK. 简书上有人总结了 gradle 4.4之后Clock 被Deprecated的方案是自己创建一个groovy文件1org.gradle.util.Clock() // 被Deprecated之后的解决方案 building-android-apps 2. 创建java Library并提交到jcenter的方法JFrog 是软件管理和分发的领先通用解决方案JFrog 是软件管理和分发的领先通用解决方案，JFrog Bintray（通用分发平台）只是他家的众多服务之一。这个通用分发平台，就当CDN用好了。bintray的注册地址。注册好了之后登录bintray，创建一个仓库，随便起名字，比如叫maven。在build.gradle中就可以引入 maven { url ‘https://dl.bintray.com/yourusername/maven‘ }compile ‘com.yourusername:librayName:1.0.0’ 到这里，就可以自己直接使用了。要想提交到jcenter(就是说不用添加一个maven {url }这样的源)，jcenter(托管在Bintray网站上的官方库，官方和普通的区别就是提交上去要审核)和mavenCentral也是仓库。只不过是有官方维护的了。因为maven的标准写法是 maven { url “https://someurl“ } // maven { url “https://jitpack.io“ } // 比如说jitpack仓库 正儿八经的上传到jcenter的方式：一.在最外层build.gradle中添加 classpath ‘com.github.dcendents:android-maven-gradle-plugin:1.3’ // classpath ‘com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6’ 配好了大概长这样1234567891011121314151617181920212223// Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript &#123; repositories &#123; jcenter() google() &#125; dependencies &#123; classpath &apos;com.android.tools.build:gradle:3.0.1&apos; classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.4.1&apos; classpath &apos;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6&apos; // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;allprojects &#123; repositories &#123; jcenter() google() &#125;&#125; android-maven-gradle-plugin插件是用来打包Maven所需文件的。gradle-bintray-plugin插件是用来将生成的Maven所需文件上传到Bintray的。 二.在library module的build.gradle中添加12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879apply plugin: &apos;com.github.dcendents.android-maven&apos;apply plugin: &apos;com.jfrog.bintray&apos;// This is the library version used when deploying the artifactversion = &quot;1.0.0&quot;def siteUrl = &apos;https://github.com/Haldir65/androidMedia&apos; // 项目的主页def gitUrl = &apos;https://github.com/Haldir65/androidMedia.git&apos; // Git仓库的urlgroup = &quot;com.github.haldir65.starry&quot; // Maven Group ID for the artifact，一般填你唯一的包名install &#123; repositories.mavenInstaller &#123; // This generates POM.xml with proper parameters pom &#123; project &#123; packaging &apos;aar&apos; // Add your description here name &apos;Starry\\n&apos; + &apos;Starry night\\n&apos; + &apos;Paint your palette blue and grey&apos; url siteUrl // Set your license licenses &#123; license &#123; name &apos;The Apache Software License, Version 2.0&apos; url &apos;http://www.apache.org/licenses/LICENSE-2.0.txt&apos; &#125; &#125; developers &#123; developer &#123; id &apos;haldir&apos; //填写的一些基本信息 name &apos;johnDoe&apos; email &apos;mjw090608@gmail.com&apos; &#125; &#125; scm &#123; connection gitUrl developerConnection gitUrl url siteUrl &#125; &#125; &#125; &#125;&#125;task sourcesJar(type: Jar) &#123; from android.sourceSets.main.java.srcDirs classifier = &apos;sources&apos;&#125;task javadoc(type: Javadoc) &#123; source = android.sourceSets.main.java.srcDirs classpath += project.files(android.getBootClasspath().join(File.pathSeparator))&#125;task javadocJar(type: Jar, dependsOn: javadoc) &#123; classifier = &apos;javadoc&apos; from javadoc.destinationDir&#125;artifacts &#123; archives javadocJar archives sourcesJar&#125;Properties properties = new Properties()properties.load(project.rootProject.file(&apos;local.properties&apos;).newDataInputStream())bintray &#123; user = properties.getProperty(&quot;bintray.user&quot;) key = properties.getProperty(&quot;bintray.apikey&quot;) configurations = [&apos;archives&apos;] pkg &#123; repo = &quot;maven&quot; name = &quot;Starry&quot; //发布到JCenter上的项目名字 websiteUrl = siteUrl vcsUrl = gitUrl licenses = [&quot;Apache-2.0&quot;] publish = true &#125;&#125;javadoc &#123; //jav doc采用utf-8编码否则会报“GBK的不可映射字符”错误 options&#123; encoding &quot;UTF-8&quot; charSet &apos;UTF-8&apos; &#125;&#125; 三.在local.properities中添加 bintray.user=your bintray usernamebintray.apikey=your apikey 记得把local.properties加到gitignore里面，搞定 在需要使用的module的build.gradle中引入1234567891011buildscript &#123; repositories &#123; maven &#123; url &apos;https://dl.bintray.com/haldir65/maven&apos; &#125; &#125;&#125;dependencies &#123; implementation &apos;com.github.haldir65.starry:starry:1.0.0&apos;&#125; 3. Building LifeCycle编译的各个阶段的hook正如gradle官网所介绍的，Build流程分为三个阶段(Initialization -&gt; Configuration -&gt; Execution) . The settings file is executed during the initialization phase. 即settings.gradle中的语句是最早被执行的 setting.gradle println ‘This is executed during the initialization phase.’ build.gradle123456789101112131415161718192021println 'This is executed during the configuration phase.'task configured &#123; println 'This is also executed during the configuration phase.'&#125;task test &#123; doLast &#123; println 'This is executed during the execution phase.' &#125;&#125;task testBoth &#123; doFirst &#123; println 'This is executed first during the execution phase.' &#125; doLast &#123; println 'This is executed last during the execution phase.' &#125; println 'This is executed during the configuration phase as well.'&#125; 输出 gradle test testBothThis is executed during the initialization phase.This is executed during the configuration phase.This is also executed during the configuration phase.This is executed during the configuration phase as well.:testThis is executed during the execution phase.:testBothThis is executed first during the execution phase.This is executed last during the execution phase.BUILD SUCCESSFUL in 0s2 actionable tasks: 2 executed 经常会在build.gradle中看到这样一段12345678910afterEvaluate &#123; project -&gt; logger.info(\"=========afterEvaluate==============\") project.tasks.each &#123; task -&gt; if (task.name == \"test\"||task.name.contains(\"lint\"))&#123; task.enabled = false // 有些不必要的确实可以剔除掉 &#125;// task.enabled = false 这么干的话全部任务都不会执行 println(\"-------------$&#123;task.name&#125;----\") &#125;&#125; afterEvaluate发生在Configuration之后，实际上也就是在project配置完成后，开始执行所有task前，对外提供一个closure，其实beforeEvaluate也有。 immediately invoked after a task is added to a project 在Task被添加到project的时候执行closure1234567tasks.whenTaskAdded &#123; task -&gt; task.ext.srcDir = 'src/main/java'&#125;task aprintln \"source dir is $&#123;a.srcDir&#125;\" project evaluate有可能成功，也会失败。但无论成功还是失败，下面的notification都会触发1234567gradle.afterProject &#123;project, projectState -&gt; if (projectState.failure) &#123; println \"Evaluation of $project FAILED\" &#125; else &#123; println \"Evaluation of $project succeeded\" &#125;&#125; 在gradle的plugin中实现也有类似的PluginImpl.groovy1234567public class PluginImpl implements Plugin&lt;Project&gt; &#123; void apply(Project project) &#123; project.gradle.addProjectEvaluationListener() // 和在build.gradle中afterEvaluate差不多 project.getGradle().taskGraph.addTaskExecutionGraphListener() //在执行前 &#125;&#125; Task execution graph ready( graphPopulated,This method is called when the TaskExecutionGraph has been populated, and before any tasks are executed.)在任何task执行前被执行 Task execution(You can receive a notification immediately before and after any task is executed.)(TaskExecutionListener,在task执行前和执行后)1234567891011project.gradle.addListener(new TaskExecutionListener() &#123; @Override void beforeExecute(Task task) &#123; &#125; @Override void afterExecute(Task task, TaskState taskState) &#123; &#125; &#125;) 而在build.gradle中是这样的写法1234567891011121314151617181920212223task oktask broken(dependsOn: ok) &#123; group 'Welcome' // 这个是task的一个属性 description 'Produces a greeting' // 这个是在project中输入gradle tasks之后输出的任务列表中每一项后面的描述信息 doLast &#123; throw new RuntimeException('broken') &#125;&#125;gradle.taskGraph.beforeTask &#123; Task task -&gt; println \"executing $task ...\"&#125;gradle.taskGraph.afterTask &#123; Task task, TaskState state -&gt; if (state.failure) &#123; println \"FAILED\" &#125; else &#123; println \"done\" &#125;&#125; 4. How to create gradle Plugin整体的过程和这里面说的差不多 add to your buidl script // 不可复用 创建BuildSrc文件夹 //依旧不可复用 创建一个Standalone Project //可复用 1234567public class GreetingPlugin implements Plugin&lt;Project&gt; &#123; @Override public void apply(Project project) &#123; project.task(\"hello\") .doLast(task -&gt; System.out.println(\"Hello Gradle!\")); &#125;&#125; Tinker的gradle plugin实现，非常有参考意义和java libraray提交到jcenter不同，gradle需要提交到Gradle Plugin Portal。没错，一个完全不一样的网站 比较复杂的gradle knowledgeofficial gradle docs 是最好的学习资料custom_pluginsBuild Script Basics关于Android Gradle你需要知道这些（4）Gradle插件学习笔记（四)","tags":[]},{"title":"DOM操作手册","date":"2018-02-02T23:30:25.000Z","path":"2018/02/02/2018-02-02-html-dom-manipulation/","text":"HTML Document操作手册 使用javaScript操作dom的记录 拦截form的submithow-to-prevent-form-from-being-submitted1234&lt;form onsubmit=\"return mySubmitFunction()\"&gt; &lt;label for=\"this is the text before the value\"type='text'&gt;&lt;/label&gt; &lt;label type='text'&gt;&lt;/label&gt;&lt;/form&gt; 在mySubmitFunction()中return false并不能阻止表单被提交。正确的做法123456const element = document.querySelector('form');element.addEventListener('submit', event =&gt; &#123; event.preventDefault(); // actual logic, e.g. validate the form console.log('Form submission cancelled.');&#125;); a标签的事件绑定12&lt;a href=\"javascript:;\"&gt;&lt;/a&gt;&lt;a href=\"javascript:void(0)\"&gt;&lt;/a&gt; input file选出来的图片路径c-fakepath.浏览器并不会将底层的文件实际路径暴露给开发者，这是出于安全考虑。所以使用12document.querySelectorAll('input')[3].value\"C:\\fakepath\\image_7.jpg\" //所以一般要用string.split('\\\\')处理一下 被document.getElementById坑了一个html页面只能有一个id的规则都知道，可是偏偏一个页面写了两个id一样的tag，网页照样跑，console没有任何报错。但是使用document.getElementById的时候，拿到的就是第一个。浏览器还真是能容错啊。顺便记录下vanilla js和jQuery detect 一个file input的方法123456789101112const input2 = document.getElementById('file_2');input2.addEventListener('change', () =&gt; &#123; showPreview2(this.id,'portrait2');&#125;)$('#file_2').on('change', () =&gt; &#123; showPreview2('file_2','portrait2');&#125;)$('#file_2').change( () =&gt; &#123; showPreview2(this.id,'portrait2');&#125;) 为毛浏览器内嵌视频要用iframe因为video source是host在其他的sites的啊，因为跨域的问题，不得不使用iframe。因为就算用iframe，里面其实还是一个vide的tg。 html js是不能写文件的node js提供了fs api来进行文件读写，浏览器中js不能读写本地文件。(html5提供了localStorage api，但最大容量好像是5MB，通过浏览器读文件也必须用户手动触发选择) 头一次听说noscript这种东西123456789101112131415&lt;html&gt; &lt;body&gt; &lt;script language=\"javascript\" type=\"text/javascript\"&gt; &lt;!-- document.write(\"Hello World!\") //--&gt; &lt;/script&gt; &lt;noscript&gt; Sorry...JavaScript is needed to go ahead. &lt;/noscript&gt; &lt;/body&gt;&lt;/html&gt; 如果浏览器不支持javascript的话，noScript中的内容就会显示出来 document对象的所有方法在mdn上都有js操作cookie的方式随便开一个网页，在console中输入document.cookie就可以看到设置的cookie或者在chrome的resource tab中也能看到js能够操作cookie的前提是cookie中没有HttpOnly=true 字段1document.cookie = \"key1=value1;key2=value2;expires=date\"; 浏览器信息一般在Navigator对象里面拿12345678910111213var browsername=navigator.appName;if( browsername == \"Netscape\" )&#123; window.location=\"http://www.location.com/ns.htm\";&#125;else if ( browsername ==\"Microsoft Internet Explorer\")&#123; window.location=\"http://www.location.com/ie.htm\";&#125;else&#123; window.location=\"http://www.location.com/other.htm\";&#125; navigator里面常用的还有platform,userAgent等随便在chrome里面试了下navigator.appName ==&gt; Netscapenavigator.platform ==&gt; win32","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"}]},{"title":"ffmpeg知识手册","date":"2018-01-24T13:44:33.000Z","path":"2018/01/24/2018-01-24-ffmpeg-basics-and-rtmp-related/","text":"ffmpeg安装手记 安装how-to-install-ffmpeg-on-windows下载 检查下是否安装完成: ffmpeg -codecs Basic commands ffmpeg -i video.mp4 ## 从视频中提取出信息 ffmpeg -i video.mp4 video.avi ## 格式转换ffmpeg -i input.mp4 -vn -ab 320 output.mp3 ##提取视频中的音频，转成mp3ffmpeg -i input.mp4 -t 50 output.avi ## 提取视频前50sffmpeg -i input.mp4 -aspect 16:9 output.mp4 ## 更改长宽比 参考20-ffmpeg-commands-beginners 需要知道的是，视频转码是很费性能的，消耗的时间也比较长。 参考nginx搭建rtmp推流服务","tags":[]},{"title":"redis-cook-book","date":"2018-01-20T08:19:20.000Z","path":"2018/01/20/2018-01-20-redis-cook-book/","text":"redis速度相当快The Redis project does not officially support Windows. However, the Microsoft Open Tech group develops and maintains this Windows port targeting Win64. 直接从release page下载msi文件，安装下去很方便的 start server and client redis-server redis.windows.conf双击打开 redis-cli.exe ## start client 和数据库类似，不同业务的数据需要存贮在不同的数据库中，redis提供了client端的切换数据库的语法 select 1 ## 每个数据库之间的key不冲突 Configurations sudo find / -name “redis.conf” ## linux下应该是装到了/etc/redis/这个目录下，不确定的话find一下 常见的配置包括： port 6379 ## redis-server监听端口（默认6379）requirepass ## 指定客户端操作需要的密码databases 16 ## 这里面对于可供选择的数据库总数 错误处理当内存达到最大值的时候Redis会选择删除哪些数据？有五种方式可供选择 volatile-lru -&gt; 利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used )allkeys-lru -&gt; 利用LRU算法移除任何keyvolatile-random -&gt; 移除设置过过期时间的随机keyallkeys-&gt;random -&gt; remove a random key, any keyvolatile-ttl -&gt; 移除即将过期的key(minor TTL)noeviction -&gt; 不移除任何可以，只是返回一个写错误 支持的存储类型 Strings Hashes Lists Sets Sorted Sets 针对各种数据进行CURD操作String1234567891011121314set(key, value)：给数据库中名称为key的string赋予值valueget(key)：返回数据库中名称为key的string的valuegetset(key, value)：给名称为key的string赋予上一次的valuemget(key1, key2,…, key N)：返回库中多个string的valuesetnx(key, value)：添加string，名称为key，值为valuesetex(key, time, value)：向库中添加string，设定过期时间timemset(key N, value N)：批量设置多个string的值msetnx(key N, value N)：如果所有名称为key i的string都不存在incr(key)：名称为key的string增1操作incrby(key, integer)：名称为key的string增加integerdecr(key)：名称为key的string减1操作decrby(key, integer)：名称为key的string减少integerappend(key, value)：名称为key的string的值附加valuesubstr(key, start, end)：返回名称为key的string的value的子串 HashesA Redis hash is a collection of key value pairs. Redis Hashes are maps between string fields and string values. Hence, they are used to represent objects. Hashes用于代表object 123456789101112131415161718192021222324252627282930313233## 添加操作## setredis&gt; HMSET myhash field1 \"Hello\" field2 \"World\"\"OK\"## 只在field不存在的时候添加，可以理解为putIfAbsentHSETNX myhash field \"Hello\"##返回1表明设置成功，返回0说明不成功## 查询操作## getredis&gt; HGET myhash field1\"Hello\"redis&gt; HGET myhash field2\"World\"### delete a specified field from an object## 删除操作redis&gt; HSET myhash field1 \"foo\"redis&gt; HDEL myhash field1## 返回0表示不存在该key，返回1表示删除成功##检查是否存在某个fieldHEXISTS myhash field1(integer) 1 ##1表示存在，0表示不存在## 把某个变量的值增加HINCRBY myhash field 1## 返回操作成功后field 的当前value##查看当前object有哪些field,类似于javaScript的iterating protoTypeHKEYS myhash ListsRedis Lists are simply lists of strings, sorted by insertion order. You can add elements to a Redis List on the head or on the tail. 123456789101112131415161718192021222324252627redis 127.0.0.1:6379&gt; lpush tutoriallist redis(integer) 1redis 127.0.0.1:6379&gt; lpush tutoriallist mongodb(integer) 2redis 127.0.0.1:6379&gt; lpush tutoriallist rabitmq(integer) 3redis 127.0.0.1:6379&gt; lrange tutoriallist 0 10 1) \"rabitmq\"2) \"mongodb\"3) \"redis\"rpush(key, value)：在名称为key的list尾添加一个值为value的元素lpush(key, value)：在名称为key的list头添加一个值为value的 元素llen(key)：返回名称为key的list的长度lrange(key, start, end)：返回名称为key的list中start至end之间的元素ltrim(key, start, end)：截取名称为key的listlindex(key, index)：返回名称为key的list中index位置的元素lset(key, index, value)：给名称为key的list中index位置的元素赋值lrem(key, count, value)：删除count个key的list中值为value的元素lpop(key)：返回并删除名称为key的list中的首元素rpop(key)：返回并删除名称为key的list中的尾元素blpop(key1, key2,… key N, timeout)：lpop命令的block版本。brpop(key1, key2,… key N, timeout)：rpop的block版本。rpoplpush(srckey, dstkey)：返回并删除名称为srckey的list的尾元素，并将该元素添加到名称为dstkey的list的头部 SET 1234567891011121314sadd(key, member)：向名称为key的set中添加元素membersrem(key, member) ：删除名称为key的set中的元素memberspop(key) ：随机返回并删除名称为key的set中一个元素smove(srckey, dstkey, member) ：移到集合元素scard(key) ：返回名称为key的set的基数sismember(key, member) ：member是否是名称为key的set的元素sinter(key1, key2,…key N) ：求交集sinterstore(dstkey, (keys)) ：求交集并将交集保存到dstkey的集合sunion(key1, (keys)) ：求并集sunionstore(dstkey, (keys)) ：求并集并将并集保存到dstkey的集合sdiff(key1, (keys)) ：求差集sdiffstore(dstkey, (keys)) ：求差集并将差集保存到dstkey的集合smembers(key) ：返回名称为key的set的所有元素srandmember(key) ：随机返回名称为key的set的一个元素 一些特性的指令持久化1234save：将数据同步保存到磁盘bgsave：将数据异步保存到磁盘lastsave：返回上次成功将数据保存到磁盘的Unix时戳shundown：将数据同步保存到磁盘，然后关闭服务 设定有效时间expireat 对Value的操作1234567891011121314KEYS * 列出所有的keyexists(key)：确认一个key是否存在del(key)：删除一个keytype(key)：返回值的类型keys(pattern)：返回满足给定pattern的所有keyrandomkey：随机返回key空间的一个keyrename(oldname, newname)：重命名keydbsize：返回当前数据库中key的数目expire：设定一个key的活动时间（s）ttl：获得一个key的活动时间select(index)：按索引查询move(key, dbindex)：移动当前数据库中的key到dbindex数据库flushdb：删除当前选择数据库中的所有keyflushall：删除所有数据库中的所有key SubScribe和Publish123456789redis 127.0.0.1:6379&gt; SUBSCRIBE redisChat Reading messages... (press Ctrl-C to quit)1) \"subscribe\"2) \"redisChat\"3) (integer) 1## 另起一个screenPUBLISH redisChat \"Redis is a great caching technique\" ## 回到刚才的screen : ctrl +a +d screen -r 两个client同时subscribe了redisChat这个话题，表现上就和局域网聊天一样。也就有了很多用js+webSocket写的简易聊天室 pipelining一次请求/响应服务器能实现处理新的请求即使旧的请求还未被响应。这样就可以将多个命令发送到服务器，而不用等待回复，最后在一个步骤中读取该答复。省去了RTT(Round Trip deplay time)的时间。123456789101112131415161718非pipleline模式：Request----&gt;执行----&gt;ResponseRequest----&gt;执行----&gt;ResponsePipeline模式下：Request----&gt;执行，Server将响应结果队列化Request----&gt;执行，Server将响应结果队列化----&gt;Response----&gt;Response 和其他语言的整合支持的lanaguage client javaScriptnpm install redis在 Node.js 应用中集成 Redis jedisjava12345678910111213141516171819202122232425262728293031323334public void pipeline()&#123; String key = \"pipeline-test\"; String old = jedis.get(key); if(old != null)&#123; System.out.println(\"Key:\" + key + \",old value:\" + old); &#125; //代码模式1,这种模式是最常见的方式 Pipeline p1 = jedis.pipelined(); p1.incr(key); System.out.println(\"Request incr\"); p1.incr(key); System.out.println(\"Request incr\"); //结束pipeline，并开始从相应中获得数据 List&lt;Object&gt; responses = p1.syncAndReturnAll(); if(responses == null || responses.isEmpty())&#123; throw new RuntimeException(\"Pipeline error: no response...\"); &#125; for(Object resp : responses)&#123; System.out.println(\"Response:\" + resp.toString());//注意，此处resp的类型为Long &#125; //代码模式2 Pipeline p2 = jedis.pipelined(); Response&lt;Long&gt; r1 = p2.incr(key); try&#123; r1.get(); &#125;catch(Exception e)&#123; System.out.println(\"Error,you cant get() before sync,because IO of response hasn't begin..\"); &#125; Response&lt;Long&gt; r2 = p2.incr(key); p2.sync(); System.out.println(\"Pipeline,mode 2,---&gt;\" + r1.get()); System.out.println(\"Pipeline,mode 2,---&gt;\" + r2.get()); &#125; pythonredis-py使用Python操作Redis 应用场景 《Redis Cookbook》对这个经典场景进行详细描述。假定我们对一系列页面需要记录点击次数。例如论坛的每个帖子都要记录点击次数，而点击次数比回帖的次数的多得多。如果使用关系数据库来存储点击，可能存在大量的行级锁争用。所以，点击数的增加使用redis的INCR命令最好不过了。 存储多层次级别的objectRedis strings vs Redis hashes to represent JSON: efficiency? 由于redis各种commands本质上只能存储key-value形式的object，对于多层级的object，需要将key扁平化1234567var house = &#123; roof: &#123; color: 'black' &#125;, street: 'Market', buildYear: '1996'&#125;; HMSET house:1 roof “house:1:roof” street “Market” buildYear “1996” 在redis中存储关系型数据 在redis中缓存session session 可以存放在 1）内存、2）cookie本身、3）redis 或 memcached 等缓存中，或者4）数据库中。线上来说，缓存的方案比较常见，存数据库的话，查询效率相比前三者都太低，不推荐 ================================================================================= Redis Cluster(集群)参考redis official docs[Redis supports 5 types of data types] (https://www.tutorialspoint.com/redis/redis_data_types.htm)Redis 高级特性与性能调优大部分语句转载自关于pipelining的解释","tags":[]},{"title":"react-native-cookbook","date":"2018-01-19T22:28:34.000Z","path":"2018/01/19/2018-01-19-react-native-cookbook/","text":"install cli npm install -g react-native-clireact-native init myproject ## 最好全部小写字母cd myprojectreact-native run-android注意，可能会报错1234FAILURE: Build failed with an exception.* What went wrong:A problem occurred configuring project &apos;:app&apos;.&gt; SDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable. 新建一个local.properities文件，放到android 文件夹下面就好了 unable-to-load-script-from-assets-index-android-bundle-on-windows 在android手机上打开显示布局边界，发现react-native app并不是一个webview，而是一个个实在的buttom,text。 tips目前暂不支持java 9Double tap R on your keyboard to reload其实并不是按电脑键盘上的R，而是模拟器上的，所以需要鼠标上去，ctrl+m即可如果是一台真实手机的话，需要摇一摇手机，就能显示菜单。但是每次都要摇一摇实在是太麻烦，所以点一下那个Enable LiveReload就能在每次保存文件后Reload。注意，如果更改了state，那么hotReload没用，需要手动Reload npm run start是用来起dev server的。react-native run-android是用来向client端推更新的。 could not connect to development server…的原因就是没有运行npm start。 所以，正常的流程应该是npm start &amp;&amp; react-native run-android debug:react-native run-android是把这个App安装到手机上，然后terminal就返回了，需要查看后续日志输出的话react-native log-android // 这个是帮助在console中输出log jsx文件开头的import要注意12345// 这是错误的import React, &#123; AppRegistry, Component,StyleSheet,Text,View&#125; from 'react-native';//这才是正确的import React from \"react\";import &#123; AppRegistry, Component,StyleSheet,Text,View&#125; from 'react-native'; routeNavigator is deprecated,use stack navigator12345678910111213141516171819202122232425262728293031323334353637383940414243import React from 'react';import &#123; View, Text &#125; from 'react-native';import &#123; StackNavigator &#125; from 'react-navigation'; // 1.0.0-beta.27class HomeScreen extends React.Component &#123; render() &#123; return ( &lt;View style=&#123;&#123; flex: 1, alignItems: 'center', justifyContent: 'center' &#125;&#125;&gt; &lt;Text&gt;Home Screen&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;class DetailsScreen extends React.Component &#123; render() &#123; return ( &lt;View style=&#123;&#123; flex: 1, alignItems: 'center', justifyContent: 'center' &#125;&#125;&gt; &lt;Text&gt;Details Screen&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;const RootStack = StackNavigator( &#123; Home: &#123; screen: HomeScreen, &#125;, Details: &#123; screen: DetailsScreen, &#125;, &#125;, &#123; initialRouteName: 'Home', &#125;);export default class App extends React.Component &#123; render() &#123; return &lt;RootStack /&gt;; &#125;&#125; 既然有路由就不免谈到各个组件之间的写法显然，你可以将LogoTitle写到另一个文件中去，然后export default，再import出来。下面这种只是为了说明你能这样写，一个很简单的小功能可以放在内部作为一个class自己使用。12345678910111213141516171819class LogoTitle extends React.Component &#123; render() &#123; return ( &lt;Image source=&#123;require('./spiro.png')&#125; style=&#123;&#123; width: 30, height: 30 &#125;&#125; /&gt; ); &#125;&#125;class HomeScreen extends React.Component &#123; static navigationOptions = &#123; // headerTitle instead of title headerTitle: &lt;LogoTitle /&gt;, &#125;; /* render function, etc */&#125; stylinginline styling在每一个tag的后面跟上两个大括号，styling as seprate file在后面跟一个大括号，引用style对象的properityButton组件的styling仅限于几个属性，可以用TouchableXXX来代替 ComponentsScrollViewAndroid平台一个ScrollView只能有一个ChildView(Node)，在react-native上似乎没有这样的限制async storage camera Roll基于React Native构建的仿京东客户端","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"}]},{"title":"Webpack资源汇总","date":"2018-01-14T22:56:46.000Z","path":"2018/01/14/2018-01-14-webpack-instructions/","text":"使用webpack的一个好处是，浏览器的并发请求资源数是有一个上限的，把所有资源打成一个包，能够减少请求数量。 1.安装 yarn add webpack 2.使用 webpack is basically pulling all external js files into on build.js file that we can bundle into our html.这样做的好处很多，能够有效减少浏览器发出的请求数量。 minify js(删掉所有的空行) webpack -p即可 3. webpack.config.js一个基本的config长这样123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051var path = require(\"path\");var BrowserSyncPlugin = require(\"browser-sync-webpack-plugin\");module.exports = &#123; entry: \"./app.js\", output: &#123; path: path.resolve(__dirname, \"dist\"), filename: \"bundle.js\" &#125;, watch: true, module: &#123; rules: [ &#123; test: /\\.js$/, exclude: /(node_modules|bower_components)/, use: &#123; loader: \"babel-loader\", options: &#123; presets: [\"babel-preset-env\"] &#125; &#125; &#125;, &#123; test: /\\.css$/ /*end with .css*/, use: [\"style-loader\", \"css-loader\"] &#125;, &#123; test: /\\.less$/, use: [ &#123; loader: \"style-loader\" // creates style nodes from JS strings &#125;, &#123; loader: \"css-loader\" // translates CSS into CommonJS &#125;, &#123; loader: \"less-loader\" // compiles Less to CSS &#125; ] &#125; ] &#125;, devServer: &#123; contentBase: __dirname, compress: true, port: 8080, hot: true, inline: true &#125;, devtool: \"source-map\"&#125;; webpack devServer(内置一个express，在本地起一个local server) yarn add webpack-dev-server 但是devServer 的hot reload 只能监视js文件的变化，并不能监视html或者server content的变化。这需要browserSync以及BrowserSync plugin for Webpack. yarn add browsersync browser-sync-webpack-plugin 4. babel首先需要知道的是mudule.exports那一套在浏览器里是不支持的。会出现”require is undefined…”。解决办法也有，安装babel就行了。babel的作用是把es2015的代码编译成es5的代码, 安装方式 yarn add babel-cli babel-preset-env 然后创建一个.babelrc文件123&#123; \"presets\": [\"env\"]&#125; package.json中添加script:babel : “babel”命令行 ： npm run babel – index.js -o bundle.js -w 5. loaders6. babel, css precomiler7. react cli=======================================================================================================todo : webpack boilerplateunderscore javaScript library","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"}]},{"title":"css预处理语言","date":"2017-12-26T22:36:49.000Z","path":"2017/12/26/2017-12-26-less-is-more/","text":"css预处理语言简介 css预处理语言允许我们以更简单的方式编写样式，通过编译生成浏览器能够使用的css文件。 Sass 诞生于 2007 年，Ruby 编写，其语法功能都十分全面，可以说 它完全把 CSS 变成了一门编程语言。另外 在国内外都很受欢迎，并且它的项目团队很是强大 ，是一款十分优秀的预处理语言。 Stylus 诞生于 2010 年，来自 Node.js 社区，语法功能也和 Sass 不相伯仲，是一门十分独特的创新型语言。 Less 诞生于 2009 年，受Sass的影响创建的一个开源项目。 它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充（引用于官网）。 比较这三种预处理语言 1. Less 安装yarn add less/ or install globally /yarn global add less// Dead Simple LESS CSS Watch Compiler，实时监控less文件变化，更新到cssyarn add less-watch-compiler 使用lessc styles.less // 并不会生成任何css文件lessc styles.less styles.css //生成一个styles.css文件新建一个style.less文件 1234@background-color: #f4f4f4;body &#123; background-color: @background-color;&#125; 生成的css文件长这样：123body &#123; background-color: #f4f4f4;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647//有变量，可以进行数学运算@line-height: 1em+1em;//可以嵌套@secondary-color: #20B2AA;ul &#123; background-color: @background-color; li &#123; color: @secondary-color; a &#123; line-height: @line-height; &#125; &#125;&#125;// 有继承.btn &#123; padding: 10px 15px; border: 0; .border-radius(10px);&#125;.primary-btn:extend(.btn)&#123; background: @primary-color; .text-color(@primary-color);&#125;// 有函数（mixin），有没有入参都行.bordered&#123; border-top: dotted 1px #000; border-bottom: solid2px #000;&#125;.border-radius(@radius) &#123; border-radius: @radius;&#125;//还有if statement.text-color(@a) when (lightness(@a) &gt; = 50% )&#123; color: black;&#125;.text-color(@a) when (lightness(@a) &lt; 50% )&#123; color: white;&#125; filepath比如经常把一些文件挪到其他位置了，这下在css中引用的位置全部都要换，123456@images: \"images/\"@homepage-images: \"images/homepage/\"img &#123; background: url(\"@&#123;images&#125;fruit.png\");&#125; import功能在main.less文件中 @import header.less@import menu.less直接用 更多的使用直接去Less查找就好了 less搭配webpack(webpack-dev-server使用)使用方式deadsimple-less-watch-compiler — watch lesswebpack-dev-server – watch js file changeswebpack-less-loader webpack.config.js1234567891011121314module.exports = &#123; module: &#123; rules: [ &#123; test: /\\.less$/, use: [ 'style-loader', &#123; loader: 'css-loader', options: &#123; importLoaders: 1 &#125; &#125;, 'less-loader' ] &#125; ] &#125;&#125; 在index.js中: import css from ‘styles.less’; 找了好久没有找到关于less-loader hot reload的设置，只好在package.json中设置 “dev”: “less-watch-compiler”,“start”:”webpack-dev-server –progress –hot –inline –config webpack.config.js &amp;&amp; yarn dev” 把两个command chain起来就是了 2.Stylus 安装yarn add stylusyarn add stylus-loader 使用stylus -w style.styl -o style.css //w表示watch 1234567line-height = 10pxbody margin: 0 padding: 0 h1 color: #5e5e5e line-height: line-height 生成的css文件长这样12345678body &#123; margin: 0; padding: 0;&#125;body h1 &#123; color: #5e5e5e; line-height: 10px;&#125; 12345678// mixin也有border-radius(n) -webkit-border-radius n -moz-border-radius n border-radius nform input[type=button] border-radius(5px) 官网 当然日常开发中不可能一直手敲 stylus xxx xxx或者 lessc xxx xxx，因为有webpack-loader。 3. SassSass需要安装Ruby。SCSS 是 Sass 3 引入新的语法，其语法完全兼容 CSS3，并且继承了 Sass 的强大功能。也就是说，任何标准的 CSS3 样式表都是具有相同语义的有效的 SCSS 文件。12345@mixin rounded($amount) &#123; -moz-border-radius: $amount; -webkit-border-radius: $amount; border-radius: $amount;&#125; Sass本身不带花括号，加上花括号和分号就成了SCSS了.","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"}]},{"title":"Spring Boot入门记录","date":"2017-12-13T23:19:33.000Z","path":"2017/12/13/2017-12-13-spring-boot-elementart-guide/","text":"关于Spring Boot的基本知识要点 1. 创建一个Spring Boot app 非常简单Creating a Spring Application in Intelij is darn Simple 2. 组件及用法2.1 Service2.2 Dao2.3 Entity2.4 Controller3. 一些配置Spring Boot修改内置Tomcat端口号：EmbeddedServletContainerCustomizer 或者在src/main/resources/application.yml文件中添加server port: 8081 =================================================================在windows里面查看内网ip，从控制面板进去看是不准的，DHCP有效期过了自动换掉，得自己敲ipconfig，这样才是最及时的。 以Okio为例，maven的搜索网站是https://search.maven.org/remote_content?g=com.squareup.okio&amp;a=okio&amp;v=LATEST，实际下发的域名是https://repo1.maven.org/maven2/com/squareup/okio/okio/1.14.0/okio-1.14.0.jar。用wget看，是302重定向了。 2小时学会SpringBootaccessing-data-mysql","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"}]},{"title":"VPS维护的日常","date":"2017-12-11T16:20:16.000Z","path":"2017/12/11/2017-12-11-vps-maintenance/","text":"以下在 ubuntu 16.04.3 LTS 上通过 1. 小硬盘清理垃圾 sudo apt-get autoclean 清理旧版本的软件缓存sudo apt-get clean 清理所有软件缓存sudo apt-get autoremove 删除系统不再使用的孤立软件 sudo rm -rf /var/tmp ## 一般来说/tmp和/var/tmp/文件夹里面的东西可以随便删除，稳妥起见还是先看下这个目录下有没有什么文件被正在跑的程序使用：sudo lsof +D /var ## 我看到一大堆mysql的东西 ，另外说一下，为什么/tmp文件夹这么小，因为ubuntu系统每次重启都会把这里面清一下 2.必要软件刚装好的 ubuntu 需要执行以下步骤,都是些常用的软件 安装 git &gt; apt-get install git安装 python &gt; apt-get install python-2.7安装 python-setuptools &gt; apt-get install python-setuptools检查是否安装好： python –version 还有一些，比如 htophtop中各个process的state参考 D uninterruptible sleep (usually IO)R running or runnable (on run queue)S interruptible sleep (waiting for an event to complete)T stopped, either by a job control signal or because it is being traced.W paging (not valid since the 2.6.xx kernel)X dead (should never be seen)Z defunct (“zombie”) process, terminated but not reaped by its parent. 只安装security update sudo unattended-upgrades -d ## 加上-d和verbose的意思差不多 2.1 装 ss 下载 shadowsocks 源码编译git clone https://github.com/shadowsocks/shadowsocks 记得切换到 master 分支12python setup.py buildpython setup.py install 检查下版本 ssserver –version 编辑配置文件 vim config.json 12345678910&#123; \"server\": \"my_server_ip\", \"server_port\": 8388, \"local_address\": \"127.0.0.1\", \"local_port\": 1080, \"password\": \"mypassword\", \"timeout\": 300, \"method\": \"aes-256-cfb\", \"fast_open\": true&#125; 使用ipv6的话(把”my_server_ip”改成”::”),这样访问通过ss访问ipv6.google.com就ok了(当然这要在确认host已有ipv6的前提下)这跟nginx ipv6 server block很像： listen 80 default_server;listen [::]:80 default_server ipv6only=on; 如果你的服务器Linux 内核在3.7+，可以开启fast_open 以降低延迟。linux 内核版本查看： cat /proc/version ssserver -c config.json -d start #启动完成 检查下是否启动了 ps -ef | grep sss ss 命令 123456789ssserver -c /etc/shadowsocks/config.json # 前台运行### 后台运行和停止ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop### 加入开机启动### 在/etc/rc.local中加入sudo ssserver -c /etc/shadowsocks.json --user username -d start - 不要总是用root用户做事，adduser来做，给sudo权限即可 2.2 SSR 以及一些衍生的软件ShadowsocksR启动后台运行命令 python server.py -p 443 -k password -m aes-256-cfb -O auth_sha1_v4 -o http_simple -d start net-speeder apt-get install libnet1-devapt-get install libpcap0.8-dev venetX，OpenVZ 架构 1234567891011121314151617cd net-speeder-master/sh build.sh -DCOOKED###Xen，KVM，物理机cd net-speeder-master/sh build.sh### 加速所有ip协议数据./net_speeder venet0 \"ip\"###只加速指定端口，例如只加速TCP协议的 8989端口, 切换到net-speeder的目录下./net_speeder venet0:0 \"tcp src port 8989\"./net_speeder venet0 \"ip\" net-speeder写入开机脚本 2.3 升级内核开启 BBRKVM 架构升级内核开启 BBR ubuntu 16.4 安装 shadowsocks-libev 参考 github官方教程安装 12345678910111213141516171819sudo apt-get install software-properties-common -ysudo add-apt-repository ppa:max-c-lv/shadowsocks-libev -ysudo apt-get updatesudo apt install shadowsocks-libev# Edit the configuration filesudo vi /etc/shadowsocks-libev/config.json ## 这里记得把server address改成实际的ip# Edit the default configuration for debiansudo vi /etc/default/shadowsocks-libev# Start the servicesudo /etc/init.d/shadowsocks-libev start # for sysvinit, orsudo systemctl start shadowsocks-libev # for systemd##加入开机启动##在/etc/rc.local中加入sudo /etc/init.d/shadowsocks-libev startsudo ss-server -c /etc/shadowsocks-libev/config.json -u ## 开启udp转发 netstat -lnp确认ss-server确实监听了udp端口 其实跟安装 ss 很像的 2.4 安装libsodium转自逗比12345678910111213## debian系列apt-get update## 安装 编译所需组件包：apt-get install -y build-essential### 获取 libsodium最新版本：Libsodiumr_ver=$(wget -qO- \"https://github.com/jedisct1/libsodium/tags\"|grep \"/jedisct1/libsodium/releases/tag/\"|head -1|sed -r 's/.*tag\\/(.+)\\\"&gt;.*/\\1/') &amp;&amp; echo \"$&#123;Libsodiumr_ver&#125;\"## 下载最新 libsodium版本编译文件：wget --no-check-certificate -N \"https://github.com/jedisct1/libsodium/releases/download/$&#123;Libsodiumr_ver&#125;/libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz\"tar -xzf libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz &amp;&amp; cd libsodium-$&#123;Libsodiumr_ver&#125;./configure --disable-maintainer-mode &amp;&amp; make -j2 &amp;&amp; make install ## 这段最好sudo 去做ldconfig## 删掉之前下载的文件cd .. &amp;&amp; rm -rf libsodium-$&#123;Libsodiumr_ver&#125;.tar.gz &amp;&amp; rm -rf libsodium-$&#123;Libsodiumr_ver&#125; 现在就可以去config.json文件中将加密方式改成: chacha20 了，重启下ss即可 3. ubuntu自带的防火墙叫做ufw，用起来也很简单4.跑分VPS 跑分软件git clone 下来 1234cd acrosswget -qO- bench.sh | bash ###（亲测可用，也可以自己看Readme）### 或者curl -Lso- bench.sh | bash 下面是一些自己试过的 BandWagon12345678910111213141516171819202122232425262728293031----------------------------------------------------------------------CPU model : Intel(R) Xeon(R) CPU E3-1275 v5 @ 3.60GHzNumber of cores : 1CPU frequency : 3600.041 MHzTotal size of Disk : 12.0 GB (10.0 GB Used)Total amount of Mem : 256 MB (217 MB Used)Total amount of Swap : 128 MB (122 MB Used)System uptime : 2 days, 4 hour 20 minLoad average : 0.06, 0.05, 0.01OS : Ubuntu 14.04.1 LTSArch : i686 (32 Bit)Kernel : 2.6.32-042stab123.3----------------------------------------------------------------------I/O speed(1st run) : 855 MB/sI/O speed(2nd run) : 1.0 GB/sI/O speed(3rd run) : 1.0 GB/sAverage I/O speed : 967.7 MB/s----------------------------------------------------------------------Node Name IPv4 address Download SpeedCacheFly 205.234.175.175 76.5MB/sLinode, Tokyo, JP 106.187.96.148 17.6MB/sLinode, Singapore, SG 139.162.23.4 8.18MB/sLinode, London, UK 176.58.107.39 8.67MB/sLinode, Frankfurt, DE 139.162.130.8 12.8MB/sLinode, Fremont, CA 50.116.14.9 9.40MB/sSoftlayer, Dallas, TX 173.192.68.18 62.3MB/sSoftlayer, Seattle, WA 67.228.112.250 66.0MB/sSoftlayer, Frankfurt, DE 159.122.69.4 12.2MB/sSoftlayer, Singapore, SG 119.81.28.170 11.8MB/sSoftlayer, HongKong, CN 119.81.130.170 13.2MB/s---------------------------------------------------------------------- BuyVm123456789101112131415161718192021222324252627282930CPU model : Intel(R) Xeon(R) CPU L5639 @ 2.13GHzNumber of cores : 1CPU frequency : 2000.070 MHzTotal size of Disk : 15.0 GB (1.3 GB Used)Total amount of Mem : 128 MB (80 MB Used)Total amount of Swap : 128 MB (32 MB Used)System uptime : 0 days, 22 hour 28 minLoad average : 0.10, 0.04, 0.05OS : Ubuntu 14.04.2 LTSArch : i686 (32 Bit)Kernel : 2.6.32-openvz-042stab116.2-amd64----------------------------------------------------------------------I/O speed(1st run) : 102 MB/sI/O speed(2nd run) : 97.1 MB/sI/O speed(3rd run) : 147 MB/sAverage I/O speed : 115.4 MB/s----------------------------------------------------------------------Node Name IPv4 address Download SpeedCacheFly 205.234.175.175 14.7MB/sLinode, Tokyo, JP 106.187.96.148 6.15MB/sLinode, Singapore, SG 139.162.23.4 2.54MB/sLinode, London, UK 176.58.107.39 2.99MB/sLinode, Frankfurt, DE 139.162.130.8 2.96MB/sLinode, Fremont, CA 50.116.14.9 4.27MB/sSoftlayer, Dallas, TX 173.192.68.18 11.7MB/sSoftlayer, Seattle, WA 67.228.112.250 13.0MB/sSoftlayer, Frankfurt, DE 159.122.69.4 1.89MB/sSoftlayer, Singapore, SG 119.81.28.170 3.26MB/sSoftlayer, HongKong, CN 119.81.130.170 3.72MB/s---------------------------------------------------------------------- DigitalOcean Los Angeles12345678910111213141516171819202122232425262728293031----------------------------------------------------------------------CPU model : Intel(R) Xeon(R) CPU E5-2650L v3 @ 1.80GHzNumber of cores : 1CPU frequency : 1799.998 MHzTotal size of Disk : 20.2 GB (1.0 GB Used)Total amount of Mem : 488 MB (33 MB Used)Total amount of Swap : 0 MB (0 MB Used)System uptime : 0 days, 0 hour 3 minLoad average : 0.16, 0.10, 0.03OS : Ubuntu 16.04.2 LTSArch : x86_64 (64 Bit)Kernel : 4.4.0-78-generic----------------------------------------------------------------------I/O speed(1st run) : 581 MB/sI/O speed(2nd run) : 711 MB/sI/O speed(3rd run) : 777 MB/sAverage I/O speed : 689.7 MB/s----------------------------------------------------------------------Node Name IPv4 address Download SpeedCacheFly 205.234.175.175 161MB/sLinode, Tokyo, JP 106.187.96.148 15.7MB/sLinode, Singapore, SG 139.162.23.4 5.96MB/sLinode, London, UK 176.58.107.39 5.71MB/sLinode, Frankfurt, DE 139.162.130.8 6.45MB/sLinode, Fremont, CA 50.116.14.9 30.4MB/sSoftlayer, Dallas, TX 173.192.68.18 29.9MB/sSoftlayer, Seattle, WA 67.228.112.250 57.7MB/sSoftlayer, Frankfurt, DE 159.122.69.4 3.64MB/sSoftlayer, Singapore, SG 119.81.28.170 7.59MB/sSoftlayer, HongKong, CN 119.81.130.170 8.84MB/s---------------------------------------------------------------------- DigitalOcean Sinapore (ip adress lokks like Russian)12345678910111213141516171819202122232425262728293031----------------------------------------------------------------------CPU model : Intel(R) Xeon(R) CPU E5-2630L 0 @ 2.00GHzNumber of cores : 1CPU frequency : 1999.999 MHzTotal size of Disk : 20.2 GB (1.0 GB Used)Total amount of Mem : 488 MB (36 MB Used)Total amount of Swap : 0 MB (0 MB Used)System uptime : 0 days, 0 hour 2 minLoad average : 0.17, 0.20, 0.09OS : Ubuntu 16.04.2 LTSArch : x86_64 (64 Bit)Kernel : 4.4.0-78-generic----------------------------------------------------------------------I/O speed(1st run) : 662 MB/sI/O speed(2nd run) : 741 MB/sI/O speed(3rd run) : 728 MB/sAverage I/O speed : 710.3 MB/s----------------------------------------------------------------------Node Name IPv4 address Download SpeedCacheFly 205.234.175.175 20.8MB/sLinode, Tokyo, JP 106.187.96.148 18.6MB/sLinode, Singapore, SG 139.162.23.4 83.8MB/sLinode, London, UK 176.58.107.39 5.71MB/sLinode, Frankfurt, DE 139.162.130.8 8.13MB/sLinode, Fremont, CA 50.116.14.9 2.82MB/sSoftlayer, Dallas, TX 173.192.68.18 6.18MB/sSoftlayer, Seattle, WA 67.228.112.250 8.47MB/sSoftlayer, Frankfurt, DE 159.122.69.4 6.77MB/sSoftlayer, Singapore, SG 119.81.28.170 97.9MB/sSoftlayer, HongKong, CN 119.81.130.170 35.2MB/s---------------------------------------------------------------------- 5. 跑java？算了吧，简单读个文本文件print出来cpu就飙到50%。 =================================================================================================== Dnsmasq vps自建DNS服务器5. 关于 dockeryoutube 上有人在 Digital Ocean 的 vps 上安装 docker，主要作用就是将一个复杂的操作系统打包成一个下载即用的容器。进入容器中，可以像在实际的操作系统中一样运行指令。所以虚拟化的机器随时可以使用其他操作系统。 参考vps 优化","tags":[{"name":"linux","slug":"linux","permalink":"https://haldir65.github.io/tags/linux/"},{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"}]},{"title":"使用Node和express开发Restful API","date":"2017-12-10T16:20:16.000Z","path":"2017/12/10/2017-12-10-Restful-API-Prescription-with-node-express/","text":"1. 安装 yarn add express mongoose安装 2. 配置MiddleWare(中间件)的概念：从Request到response之间的流程中，任何组件都可以对这个过程中的数据进行修改，所以router其实也是中间件。中间件需要注意的就是顺序很重要。 调试使用postMan Requestget请求的参数怎么拿get的参数本身都是写在url里面的 比如1234GET /student/getById/27app.get('/getById/:age',functin(req,res)&#123; res.send(req.prarms.age);&#125;) 在postMan发起post请求1234567POST /api/personal?age=10 HTTP/1.1Host: localhost:8080Content-Type: application/x-www-form-urlencodedCache-Control: no-cachePostman-Token: 79c6d9a1-de8d-3b0b-8d3d-0ed6e1910f69name=Josn&amp;age=12 123req.params // Object ，Json.String = &#123;&#125;req.body // &#123;name:'Josn',age:'12'&#125; //这个是post里面发送的body数据req.query // &#123;\"age\",\"10\"&#125; // 显然这是url里面的query 3. Serving static files照说serving static file这种事应该交给nginx来做，express只是提供了一种选择。1app.use(express.static(path.join(__dirname,'public'))) 然后在当前目录新建一个public文件夹，添加img文件夹，里面放一张porn.jpg。浏览器访问： localhost:port/img/porn.jpg 。 就能看到放进去的的那张图片了。 1app.use('/jquery', express.static(__dirname + '/node_modules/jquery/dist/')); 这意思就是请求/jquery这个目录下的资源就等于访问/node_modules/jquery/dist/目录下同名的资源 4. responseresponse.redirect(‘/all’); //在浏览器里面看，response的header是这样的 HTTP/1.1 302 FoundX-Powered-By: ExpressLocation: /allVary: AcceptContent-Type: text/html; charset=utf-8Content-Length: 68Date: Sun, 14 Jan 2018 10:08:50 GMTConnection: keep-alive response.direction();和window.location.href差不多 12345678910111213141516/* GET /api/user */ much extra information you can set on its headerapp.get(\"/user\",function (req,res) &#123; res.set(&#123; 'Content-Type': 'application/json', 'Content-Length': '123', 'ETag': '12345', 'Cache-Control': 'max-age=5', \"Access-Control-Allow-Origin\": 'http://127.0.0.1:8080' &#125;); res.cookie('name', 'tobi', &#123; domain: '.example.com', path: '/admin', secure: true &#125;); console.log('response send'); res.json(&#123; \"name\":\"John\", \"age\":10 &#125;);&#125;); 简单的session处理: yarn add express cookie-parser express-session1234567891011121314151617181920router.get(\"/\", function(req, res, next) &#123; if (req.session.user) &#123; var user = req.session.user; var name = user.name; res.send(\"你好\" + name + \"，欢迎来到我的家园。\"); &#125; else &#123; let user = &#123; name: \"Chen-xy\", age: \"22\", address: \"bj\" &#125;; req.session.user = user; res.send(\"你还没有登录，先登录下再试试！\"); &#125; // res.render(\"index\", &#123; // title: \"the test for nodejs session\", // name: \"sessiontest\" // &#125;);&#125;); ======================================================how about error handling 123app.get(\"/user\",function (req,res,next) &#123;&#125;; 另一种选择，graphQl是和restful功能类似的模式 参考Nginx 是前端工程师的好帮手 Express Api book 在NodeJs中玩转protoBuffer 使用nodejs 和express搭建本地API服务器","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"}]},{"title":"MongoDB手册","date":"2017-12-10T16:13:54.000Z","path":"2017/12/10/2017-12-10-MongoDB-recepies/","text":"MongoDB可以作为Spring boot的数据库DAO，也可以和node平台的express module结合。作为后台开发的数据库，应用很广。 安装(windows平台下)MongoDB默认装到C盘的program files文件夹里面,需要一个data文件夹official on installation这个文件夹不一定要在c盘，可以放f盘，比如”f://mongndb//data”//这样启动server时记得把–dbpath传一下 establish connection12345// start db server\"C:\\Program Files\\MongoDB\\Server\\3.4\\bin\\mongod.exe\" --dbpath d:\\test\\mongodb\\data// open another shell window to connect to server\"C:\\Program Files\\MongoDB\\Server\\3.4\\bin\\mongo.exe\"// then you can start interact with mongo db server 速查手册Tutorial, not officialMongoose教程官方手册Mongoose CURD支持多种语言环境调用mongodb api 语法： 12345678910111213141516171819use mydb ## 创建一个名mydb的数据库db.createCollection(\"students\") ## 创建一个students的collections(类似于sql的table)show collections ## 显示当前数据库中的所有collectionsdb.students.insert(&#123;name: 'Json',age: 22,title:['teacher','professor','versatile']&#125;) ## 往数据库里添加一条数据db.students.find().pretty() // 显示students的collection中的所有元素，pretty只是好看点db.students.updateOne( &#123; \"name\": \"Bob\" &#125;, &#123; $set: &#123;\"age\" : 99&#125;&#125; ); // UPDATE语句 setdb.students.find( &#123; age : &#123; $gt:24, $lt: 28&#125; &#125; ) // QUERY 语句 greater than and less thandb.students.deleteOne( &#123; \"_id\" : ObjectId(\"5a584a109f157d455472ff11\") &#125; ); // DELETE 语句## batchInserttry &#123; db.products.insertMany( [ &#123; item: \"card\", qty: 15 &#125;, &#123; item: \"envelope\", qty: 20 &#125;, &#123; item: \"stamps\" , qty: 30 &#125; ] );&#125; catch (e) &#123; print (e);&#125; 在node环境下可以使用Mongoose // a wrapper around the mongo db interface schema definition123456789101112// correctvar studentSchema = mongoose.Schema(&#123; _id: String, name: String, age: Number&#125;);// wrongvar studentSchema = mongoose.Schema(&#123; name: String, age: Number&#125;); ===========================================================================// todo validate request data, error handling. Uploading Files to MongoDB With GridFS (Node.js App)","tags":[]},{"title":"nodejs学习记录","date":"2017-12-10T16:13:30.000Z","path":"2017/12/10/2017-12-10-node-js-cookbook/","text":"npm run start 安装windows上的安装十分方便，就跟安装普通软件一样，一路下一步点下去即可。 npm install -g grunt –save-dev # 安装，成为全局(-g)module，保存为dev-dependencies(–save-dev) 简写 -D 一个意思npm install -g grunt –save # 安装，保存为dependencies npm run dev # 打开发环境包npm run build # 打release包node is based on chrome v8 engine,it’s javaScript without the browser. npm的configuration非常方便设置,首先是设置proxy npm config set strict-ssl falsenpm config set registry “http://registry.npmjs.org/“npm config set proxy http://127.0.0.1:1080 ## 以上三句话设置代理npm config list ##列出当前所有的设置npm config get stuff ##比如说registry等等 也有用淘宝cnpm的做法: $ npm install -g cnpm –registry=https://registry.npm.taobao.org$ npm config set registry https://registry.npm.taobao.org$ cnpm install [name] ## 这样就能安装了 whats-the-difference-between-dependencies-devdependencies-and-peerdependenciesnpm有个dependencies的概念，此外还有dev-dependencies的概念，主要看package.json这个文件1234567891011121314151617181920212223&#123; \"name\": \"foo\", \"version\": \"0.0.0\", \"scripts\": &#123; \"dev\": \"node build/dev-server.js\", \"build\": \"node build/build.js\", \"test\": \"\", \"lint\": \"eslint --ext .js,.vue src test/unit/specs test/e2e/specs\" &#125;, \"dependencies\": &#123; \"axios\": \"^0.15.3\", \"jsonp\": \"^0.2.1\" &#125;, \"devDependencies\": &#123; \"webpack\": \"^2.6.1\", \"webpack-dev-middleware\": \"^1.10.0\", \"webpack-hot-middleware\": \"^2.18.0\", \"webpack-merge\": \"^4.1.0\" &#125;&#125;/*script的意思是输入npm run dev = node build/dev-server.js 类似于 linux下的alias*//*向上箭头的意思是安装的时候会自动去查找安装最新的minor version。关于版本号，第一位表示major version，may incur code imcompatibility,第二位表示minor version，代表new features,第三位表示bug fixes.所以向上箭头意味着安装时不会动第一位，只会升级为第二位最新的版本*/ stackoverflow上的解释 示例app.js1console.log('hello!'); node app.jshello! 创建node project npm init会提示一些信息，生成一个package.json文件 1234567891011&#123; \"name\": \"test\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": &#123; \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" &#125;, \"author\": \"\", \"license\": \"ISC\"&#125; main是指程序的运行入口script是指可以自己设置启动的命令，有点像alias比如 vue-cli的package.json里面就是这样的 “dev”: “node build/dev-server.js”,“build”: “node build/build.js” 所以用户只要输入 npm run dev就等同于node build/dev-server.js 12345678910111213141516const = require('http');// http is a core module ,so we do't need installconst hostname = '127.0.0.1';const port = 3000;cost server = http.createServer((req,res) =&gt; &#123;trueres.statusCode = 200;trueres.setHeader('Content-type','text/plain');trueres.end('Hello there!');&#125;);server.listen(port,hostname,() =&gt;&#123;trueconsole.log('Server started on port '+ port);&#125;) 此时去浏览器中打开’localhost:3000’，会返回’Hello there!’ 想要返回一个html并在浏览器中渲染，ctrl+c停止服务器，修改代码如下。 12345678910111213141516171819202122const http = require('http');const fs =require('fs');const hostname = '127.0.0.1';const port = 3000;fs.readFile('index.html',(err,html) =&gt; &#123;trueif (err) &#123;truetruethrow err;true&#125;trueconst server = http.createServer((req,res) =&gt; &#123;truetrueres.statusCode = 200;truetrueres.setHeader('Content-type','text/html');truetrueres.write(html);truetrueres.end();true&#125;);trueserver.listen(port,hostname,() =&gt;&#123;truetrueconsole.log('Server started on port '+ port);true&#125;)&#125;) 现在重新运行node index，打开浏览器，在3000端口就能看到html网页了。 1234567891011121314&#123; \"name\": \"api\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"app.js\", \"scripts\": &#123; \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\" &#125;, \"author\": \"\", \"license\": \"ISC\", \"dependencies\": &#123; \"body-parser\": \"^1.18.2\" &#125;&#125; dependencies里面向上箭头表示安装最新的minor version。而使用”*“号的话就表示想要使用latest version 一些node自带的module比如fs,path,http，这些东西都是不需要安装的,bundled with node installation。 12path.join(__dirname,'filename'); // ./filenamepath.join(__dirname,\"..\",filename); // ../filename ,go to parent directory Compile ES6 ES2017 Code to ES5 Code(这部分属于webpack的内容) npm install –save-dev webpack webpack-dev-server babel-core babel-loader babel-preset-envnpm install –save-dev babel-polyfill babel-preset-stage-0 ## 用async await的话需要安装polyfill package.json12345678910111213141516171819202122232425&#123; \"name\": \"bable-assemble\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"scripts\": &#123; \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\", \"build\": \"webpack\", \"start\": \"webpack-dev-server --output-public-path=/build/\" &#125;, \"author\": \"\", \"license\": \"ISC\", \"devDependencies\": &#123; \"babel-cli\": \"^6.26.0\", \"babel-core\": \"^6.26.0\", \"babel-loader\": \"^7.1.2\", \"babel-polyfill\": \"^6.26.0\", \"babel-preset-env\": \"^1.6.1\", \"babel-preset-es2015\": \"^6.24.1\", \"babel-preset-stage-0\": \"^6.24.1\", \"http-server\": \"^0.10.0\", \"webpack\": \"^3.10.0\", \"webpack-dev-server\": \"^2.9.7\" &#125;&#125; output的文件夹名有些人喜欢叫dist，有些人用build。都行，没有区别的。 如果手动敲webpack的话，会提示你找不到webpack，这是因为没有globally install webpack,webpack还只是个local file。 这也就是写在script里面的原因了: 让npm去node_modules里面找一个叫做webpack的依赖，然后运行webpack。 webpack.config.js12345678910111213141516171819202122const path = require('path');module.exports = &#123; entry:&#123; app:['babel-polyfill','./src/app.js'] &#125;, output:&#123; path:path.resolve(__dirname,\"build\"), filename:\"app.bundle.js\" &#125;, module:&#123; loaders:[ &#123; test:/\\.js?$/, exclude:/node_modules/, loader:\"babel-loader\", query:&#123; presets:['env'] &#125; &#125; ] &#125;&#125;; yarnyarn 是facebook设计的，yarn的速度要比npm快。在windows平台上推荐使用msi安装包安装。 npm install expressyarn add express 这俩是一样的,一些常用的command yarn inityarn global add nodemonyarn outdatedyarn cache cleanyarn run dev // yarn dev 其实run都可以省略yarn upgrade express eslint修改配置，让js文件每一行后面都得加冒号(allow semi colons)allow semi colons in javascript eslint在.eslintrc中，添加custom rules123\"rules\": &#123; \"semi\": [2, \"always\"] &#125; node js不支持es2015的import 和export语法，需要使用mudule的话，可使用commonJs，即:其实这事说来就是node对于绝大多数es2015的语法都支持了，偏偏import,export这一套就不支持。node社区最终决定使用mjs文件后缀123456789101112// library.jsmodule.export.awesome = function () &#123; consle.log('awesome');&#125;;// index.jsvar library = require('./library');library.awesome();// 需要注意两点，// 1. require()后面跟的路径是('./library')，是指在当前路径下，而不是在node_modules那个大的文件夹里面找// 2. require('./library') 和require('./library.js')没有区别 sourcemaps开发过程中使用的是ES2015代码，编译之后就成了非常长的es5代码，在浏览器里面几乎无法断点。使用sourcemap就能在浏览器中将es5代码“反编译”成ES2015代码，还可以打断点。 好用的modulepath(core module, 无需安装)http(core module, 无需安装)expressnodemon // 实时监控本地文件变化，重启服务，安装npm install nodemon -gbody-parserejspm2 //starting an node app as a bcakground servicemongoose Howto debugvscode debug node js的方式，打开调试窗口，点击那个小齿轮(打开launch.json)。直接在代码中断点即可。注意底下有一个debug console(调试控制台)，可以输入变量，查看当前值，和一些大型Ide很像。 在chrome里面debug的方式：node –inspect app.js ## 一闪而过了node –inspect-brk app.js ##在第一行就给我停下来 在chrome的地址栏输入 about:inspect , open dedicated DevTools for Node，点一下就会出现一个小窗口或者f12，会出现一个绿色的node的图标，点一下和上面那个open dedicated DevTools for Node是一样的Debugging in 2017 with Node.js process.env.NODE_ENV12345678910if (process.env.NODE_ENV === 'production' ) &#123; //&#125;else &#123; //&#125;// windows上可以这么设置set NODE_ENV=dev//直接写在js里面也行process.env.NODE_ENV = 'production'; 写在package.json的script里面也是可以的。123\"scripts\": &#123; \"start\": \"set NODE_ENV=dev &amp;&amp; node app.js\" &#125; =============================================================================开发环境用nodemon，生产环境用pm2(PM2的优胜之处在于当你要将app需要多核处理的时候，PM2内部集成的负载均衡可以让你很容易的去指定运行多少个实例。) node里面就不要用Ajax了，推荐axios，原生自带也有https。而node中的一些module也不能用于浏览器端，比如fs这种属于偏Low level的api","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"}]},{"title":"Nginx使用记录","date":"2017-12-10T16:12:43.000Z","path":"2017/12/10/2017-12-10-nginx-culinary-tips/","text":"linode的docs里面是这么介绍的 nginx is a lightweight, high performance web server designed to deliver large amounts of static content quickly with efficient use of system resources. nginx’s strong point is its ability to efficiently serve static content, like plain HTML and media files. Some consider it a less than ideal server for dynamic content. 1.安装Installing nginx on windows安装教程，google ‘installing nginx on ubuntu’基本上就是把DigitalOcean写的这些复制粘贴过来 123456sudo apt-get updatesudo apt-get install nginx## We can list the applications configurations that ufw knows how to work with by typing:sudo ufw app listsudo ufw allow 'Nginx HTTP'sudo ufw status 1.1 安装失败的解决方案 Job for nginx.service failed because the control process exited with error code. See “systemctl status nginx.service” and “journalctl -xe” for details.invoke-rc.d: initscript nginx, action “start” failed.● nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) 根据Nginx installation error in Ubuntu 16.04解决方案: Check your nginx error log:sudo cat /var/log/nginx/error.log|lessThen try again:sudo apt-get update;sudo apt-get upgrade 我看到的是: 2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use)2017/12/10 22:21:46 [emerg] 2485#2485: bind() to 0.0.0.0:80 failed (98: Address already in use) 就是80端口被占用了，看下谁在用: lsof -i:80 2. 常用command1234567891011121314## 查看当前statussystemctl status nginx## stopsudo systemctl stop nginx## startsudo systemctl start nginx##重启sudo systemctl restart nginx## 改了配置文件之后可以直接reload，而不会失去连接sudo systemctl reload nginx## nginx默认开机启动的,取消开机启动sudo systemctl disable nginx## 加入开机启动sudo systemctl enable nginx 3. 常用目录和文件(直接从DigitalOcean复制过来了) /var/www/html ## 就是放默认首页的地方（原因是 /etc/nginx/sites-enabled/default这里面设置的）&gt;/etc/nginx: The Nginx configuration directory. All of the Nginx configuration files reside here./etc/nginx/nginx.conf: The main Nginx configuration file. This can be modified to make changes to the Nginx global configuration./etc/nginx/sites-available/: The directory where per-site “server blocks” can be stored. Nginx will not use the configuration files found in this directory unless they are linked to the sites-enabled directory (see below). Typically, all server block configuration is done in this directory, and then enabled by linking to the other directory./etc/nginx/sites-enabled/: The directory where enabled per-site “server blocks” are stored. Typically, these are created by linking to configuration files found in the sites-available directory./etc/nginx/snippets: This directory contains configuration fragments that can be included elsewhere in the Nginx configuration. Potentially repeatable configuration segments are good candidates for refactoring into snippets. 访问日志都在这里&gt;/var/log/nginx/access.log: Every request to your web server is recorded in this log file unless Nginx is configured to do otherwise./var/log/nginx/error.log: Any Nginx errors will be recorded in this log. 4.配置文件4.1 不想用80端口怎么办(比如跟apache冲突了)修改 /etc/nginx/nginx.conf文件config文件的大致结构就是这样,来自stackoverflow123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566user www-data;worker_processes 1;error_log /var/log/nginx/error.log;pid /var/run/nginx.pid;events &#123; worker_connections 1024; # multi_accept on;&#125;http &#123; include /etc/nginx/mime.types; access_log /var/log/nginx/access.log; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; tcp_nodelay on; gzip on; gzip_disable \"MSIE [1-6]\\.(?!.*SV1)\"; include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; ## include F:/nginx/conf/sites-enabled/default; 必须是绝对路径，include不认相对路径 server &#123; listen 81; location / &#123; proxy_pass http://94.143.9.34:9500; proxy_set_header Host $host:81; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Via \"nginx\"; &#125; &#125;&#125; mail &#123; See sample authentication script at: http://wiki.nginx.org/NginxImapAuthenticateWithApachePhpScript auth_http localhost/auth.php; pop3_capabilities \"TOP\" \"USER\"; imap_capabilities \"IMAP4rev1\" \"UIDPLUS\"; server &#123; listen localhost:110; protocol pop3; proxy on; &#125; server &#123; listen localhost:143; protocol imap; proxy on; &#125; &#125; 比如想要通过81端口访问，加上这么一行server { listen 81; server_name example.org www.example.org; root /var/www/html/} Checking nginx config file syntax nginx -t -c conf/nginx.confnginx -s quit //gracefully stop on windowsnginx -s stop // force stop on windows 4.2 限制日志文件的大小根据上面的config文件，默认的访问日志是在/var/log/nginx/access.log这个文件里面。限制这个文件的大小的方法：serverfault12345678910111213/etc/logrotate.d/nginx/var/log/nginx/access_log &#123; rotate 7 size 5k dateext dateformat -%Y-%m-%d missingok compress sharedscripts postrotate test -r /var/run/nginx.pid &amp;&amp; kill -USR1 `cat /var/run/nginx.pid` endscript&#125; 需要注意的是，当网站访问量大后，日志数据就会很多，如果全部写到一个日志文件中去，文件会变得越来越大。文件大速度就会慢下来，比如一个文件几百兆。写入日志的时候，会影响操作速度。另外，如果我想看看访问日志，一个几百兆的文件，下载下来打开也很慢。为了方便对日志进行分析计算，需要对日志进行定时切割。定时切割的方式有按照月切割、按天切割，按小时切割等。最常用的是按天切割。脚本 4.3 分享特定目录(serve static files)How to serve a directory of static files at a certain location path with nginx?123456789server &#123; listen 80; server_name something.nateeagle.com; location /something &#123; alias /home/neagle/something; index index.html index.htm; &#125;&#125; 有的时候会看到两种写法1234567891011location /static/ &#123; root /var/www/app/static/; autoindex off;&#125;## 结果是/var/www/app/static/static目录location /static/ &#123; alias /var/www/app/static/; autoindex off;&#125;##这才是/var/www/app/static目录 location里面写root还是alias 那alias标签和root标签到底有哪些区别呢？1、alias后跟的指定目录是准确的,并且末尾必须加“/”，否则找不到文件 location /c/ { alias /a/}如果访问站点http://location/c访问的就是/a/目录下的站点信息。2、root后跟的指定目录是上级目录，并且该上级目录下要含有和location后指定名称的同名目录才行，末尾“/”加不加无所谓。 location /c/ { root /a/}如果访问站点http://location/c访问的就是/a/c目录下的站点信息。3、一般情况下，在location /中配置root，在location /other中配置alias是一个好习惯。 在windows平台下这么写1234location / &#123; root D:/VDownload; index index.html index.htm; &#125; nginx -s reload 然后重启nginx 4.4 Nginx软链接目测不能用软链接 ###4.5 Nginx通过CORS实现跨域在nginx.conf里找到server项,并在里面添加如下配置1234567location / &#123;add_header &apos;Access-Control-Allow-Origin&apos; &apos;http://example.com&apos;;add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;add_header &apos;Access-Control-Allow-Headers&apos; &apos;Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,X-Requested-With&apos;;add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET,POST,OPTIONS&apos;;...&#125; 但上述配置只能实现允许一个domain或者*实现跨域，Nginx允许多个域名跨域访问在location context的上层添加1234567891011121314151617map $http_origin $corsHost &#123; default 0; &quot;~http://www.example.com&quot; http://www.example.com; &quot;~http://m.example.com&quot; http://m.example.com; &quot;~http://wap.example.com&quot; http://wap.example.com;&#125;server&#123; listen 80; server_name www.example2.com; root /usr/share/nginx/html; location / &#123; add_header Access-Control-Allow-Origin $corsHost; &#125;&#125; 5. proxy_pass根据how-to-set-up-a-node-js-application-for-production-on-ubuntu-14-04 /etc/nginx/sites-available/default1234567891011121314151617181920212223server &#123; listen 80; server_name example.com; location / &#123; proxy_pass http://APP_PRIVATE_IP_ADDRESS:8080; // A应用跑在8080端口，外部访问http://example.com/即可访问应用服务 proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &apos;upgrade&apos;; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; &#125; location /app2 &#123; proxy_pass http://APP_PRIVATE_IP_ADDRESS:8081; // B应用跑在8081端口，外部访问http://example.com/app2即可访问应用服务 proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &apos;upgrade&apos;; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; &#125;&#125; 5.1 pratical take awaysnginx配置location总结及rewrite规则写法 ddos防御from mitigating-ddos-attacks-with-nginx-and-nginx-plus/ allow a single client IP address to attempt to login only every 2 seconds (equivalent to 30 requests per minute): Limiting the Rate of Requestseg: 单ip访问login接口频率不能超过2秒每次。 123456789limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m;server &#123; # ... location /login.html &#123; limit_req zone=one; # ... &#125;&#125; Limiting the Number of Connectionseg: 单ip访问/store/不能创建超过10条connections 123456789limit_conn_zone $binary_remote_addr zone=addr:10m;server &#123; # ... location /store/ &#123; limit_conn addr 10; # ... &#125;&#125; Closing Slow Connectionseg: 限定nginx一条connection写client header和写client body的时间间隔为5s，默认为60s 12345server &#123; client_body_timeout 5s; client_header_timeout 5s; # ...&#125; 黑名单 12345678910111213141516171819// 123.123.123.1 through 123.123.123.16 拉黑location / &#123; deny 123.123.123.0/28; # ...&#125;location / &#123; deny 123.123.123.3; deny 123.123.123.5; deny 123.123.123.7; # ...&#125;//只允许特定白名单location / &#123; allow 192.168.1.0/24; deny all; # ...&#125; ngx_http_proxy_module的configurationproxy_cache_use_stale当客户端请求一项过期的资源时，只发送一次请求，在backend server返回新的资源之前，不再发送新的请求，并只向客户端返回已有的过期资源。这有助于缓解backend server的压力。proxy_cache_key:包含内置三个key$scheme$proxy_host$request_uri。但不要添加$query_string，这会造成过多的caching. 几种情况是应该直接拉黑的 Requests to a specific URL that seems to be targetedRequests in which the User-Agent header is set to a value that does not correspond to normal client trafficRequests in which the Referer header is set to a value that can be associated with an attackRequests in which other headers have values that can be associated with an attack 12345678910111213141516171819location /foo.php &#123; deny all; //直接让这个接口不响应&#125;location / &#123; if ($http_user_agent ~* foo|bar) &#123; return 403; //User-Agent中有foo或者bar的时候直接forbidden &#125; # ...&#125;// NGINX Plus提供的// An NGINX or NGINX Plus instance can usually handle many more simultaneous connections than the backend servers it is load balancing.//作为代理，nginx能够接受的连接数要远超其代理的后台服务upstream website &#123; server 192.168.100.1:80 max_conns=200; server 192.168.100.2:80 max_conns=200; queue 10 timeout=30s;&#125; 5.2 Nginx模块http_image_filter_module（图片裁剪模块）首先查看是否已安装http_image_filter_module模块 nginx -V/etc/nginx/nginx.conf文件添加12345678910111213location /image &#123;truetrue alias &quot;/imgdirectory/&quot;; ## 这样直接输入 yourip/image/imgname.jpeg就能返回原始图片&#125;location ~* (.*\\.(jpg|jpeg|gif|png))!(.*)!(.*)$ &#123; ## 这个是匹配全站图片资源 set $width $3; set $height $4; rewrite &quot;(.*\\.(jpg|jpeg|gif|png))(.*)$&quot; $1; ## 这样输入 yourip/image/imgname.jpeg!200!200就能返回200*200的图片&#125; location ~* /imgs/.*\\.(jpg|jpeg|gif|png|jpeg)$ &#123; truetruetrueroot &quot;/var/www/&quot;; image_filter resize $width $height; &#125; 亲测上述可行，python也有类似库thumbor 关于正则匹配：12345678910111213## 比如匹配全站所有的结尾图片location ~* \\.(jpg|gif|png)$ &#123; image_filter resize 500 500; &#125;### 匹配某个目录所有图片 location ~* /image/.*\\.(jpg|gif|png)$ &#123; image_filter resize 500 500; &#125; 更多直接google吧。 添加黑名单12345678910111213##获取各个IP访问次数awk '&#123;print $1&#125;' nginx.access.log |sort |uniq -c|sort -n## 新建一个黑名单文件 blacklist.conf ,放在 nginx/conf下面。 ##添加一个IP ，deny 192.168.59.1;### 在http或者server模块引入 include blacklist.conf ;##需要重启服务器, nginx -s reload; 即可生效 防御DDOS是一个系统工程，这里只是一小点。 5.3 return rewrite and try_files12345678server &#123; listen 80; listen 443 ssl; server_name www.old-name.com; return 301 $scheme://www.new-name.com$request_uri;&#125;301 (Moved Permanently)//上面的scheme是http或者https，request_url就是请求的url。 rewrite就更加复杂一点，比如可以manipulate urlHere’s a sample NGINX rewrite rule that uses the rewrite directive. It matches URLs that begin with the string /download and then include the /media/ or /audio/ directory somewhere later in the path. It replaces those elements with /mp3/ and adds the appropriate file extension, .mp3 or .ra. The $1 and $2 variables capture the path elements that aren’t changing. As an example, /download/cdn-west/media/file1 becomes /download/cdn-west/mp3/file1.mp3. If there is an extension on the filename (such as .flv), the expression strips it off and replaces it with .mp3.1234567server &#123; # ... rewrite ^(/download/.*)/media/(\\w+)\\.?.*$ $1/mp3/$2.mp3 last; rewrite ^(/download/.*)/audio/(\\w+)\\.?.*$ $1/mp3/$2.ra last; return 403; # ...&#125; In the following example, NGINX serves a default GIF file if the file requested by the client doesn’t exist. When the client requests (for example) http://www.domain.com/images/image1.gif, NGINX first looks for image1.gif in the local directory specified by the root or alias directive that applies to the location (not shown in the snippet). If image1.gif doesn’t exist, NGINX looks for image1.gif/, and if that doesn’t exist, it redirects to /images/default.gif. That value exactly matches the second location directive, so processing stops and NGINX serves that file and marks it to be cached for 30 seconds.1234567location /images/ &#123; try_files $uri $uri/ /images/default.gif;&#125;location = /images/default.gif &#123; expires 30s;&#125; 5.4 NGINX LOAD BALANCING 负载均衡Load balancing across multiple application instances is a commonly used technique for optimizing resource utilization, maximizing throughput, reducing latency, and ensuring fault-tolerant configurations.12345678910111213http &#123; upstream backend &#123; server backend1.example.com weight=5; server backend2.example.com; server 192.0.0.1 backup; &#125; server &#123; location / &#123; proxy_pass http://backend; ## 所有的访问http://backend的流量都被导向上面的三个服务器 ## proxy_pass只是其中一种，还有fastcgi_pass, memcached_pass, uwsgi_pass, scgi_pass &#125; &#125;&#125; 导向策略有多种： Round-robin (默认) 1, 2 , 1, 2 ,1 ….如此反复 least_conn 连接数最少的优先（如果有weight，加权选择） 12345upstream backend &#123; least_conn; server backend1.example.com; server backend2.example.com;&#125; ip_hash (一个ip只会导向固定的一个server，这个适合做ab test)这些是主要的策略 6. 问题速查 nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled) Active: failed (Result: exit-code) since Fri 2017-12-29 20:12:50 EST; 3min 21s ago 启动失败，检查/var/log/nginx/error.log 或者/var/log/syslog。windows下应该在nginx/logs/error.log文件里面windows平台下查找当前正在跑的nginx进程： tasklist /fi “imagename eq nginx.exe” benchmark，压力测试Apache Benchmarking tool. ab -kc 1000 -n 10000 http://www.some-site.cc/tmp/index.html-n表示一共要请求多少次,-c表示每次请求模拟多少个并发 在http response中隐藏nginx版本：在server块添加 server_tokens off; 7. 整理一下linode的文章linoe关于nginx配置的文章写得特别好/etc/nginx/nginx.conf12345678910111213141516171819202122232425262728293031323334353637383940http &#123; ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; # server_tokens off; # server_names_hash_bucket_size 64; # server_name_in_redirect off; include /etc/nginx/mime.types; default_type application/octet-stream; ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ## # Gzip Settings ## gzip on; gzip_disable &quot;msie6&quot;; # gzip_vary on; # gzip_proxied any; # gzip_comp_level 6; // gzip基本上就是用cpu资源节省带宽，默认是1，最高是9，越大压缩效果越好，也越费cpu # gzip_buffers 16 8k; # gzip_http_version 1.1; include /etc/nginx/sites-enabled/*; //引入site-enabled中所有文件 include /etc/nginx/conf.d/*.conf; //或者引入config.d文件夹中所有.config文件 &#125; http这个directive下一层就是server了,一般来说，一个虚拟域名(virtual domain)就对应着一个server块。 接下来的东西就不要写在/etc/nginx/nginx.conf文件里了,这里应该是一个domian写一个.conf文件/etc/nginx/sites-available/default12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849server &#123; listen 80 default_server; // default_server means this virtual host will answer requests on port 80 that don’t specifically match another virtual host’s listen statement. listen [::]:80 default_server ipv6only=on; // 这个是给ipv6用的 listen 80; ## 80端口 listen *:80; ## 80端口，和上面一样 listen 8080; ## 8080端口 listen *:8080; ## 8080端口，和上面一样 root /usr/share/nginx/html; index index.html index.htm; # Make site accessible from http://localhost/ ## localhost其实就是127.0.0.1，这是写在/etc/hosts里面的 server_name localhost; ## 这可以使得一个ip地址支持多个domian( This allows multiple domains to be served from a single IP address.) ### 这时的文件名应该叫/etc/nginx/sites-available/example.com server_name example.com www.example.com; ## example.com www.example.com都支持,example.com就支持旗下所有子域名。www.example.com, foo.example.com，等等 ### 这时的文件名应该叫/etc/nginx/sites-available/example.com server_name example.*; ## example开头的都行 ## 下面这俩意思一样，这时的文件名应该叫/etc/nginx/sites-available/example.com server_name *.example.com; server_name .example.com; ### 这时的文件名应该叫/etc/nginx/sites-available/example server_name example.*; ## example.com, example.org, example.net, example.foo.com, etc. ### 文件名随意啦/etc/nginx/sites-available/multi-list server_name example.com linode.com icann.org whatever.you.wantwite.isok.org; ## 一个server_name后面跟任何域名都是没问题的 ## 比如说你在局域网有个linux机器挂着nginx，你可以创建这样一个文件，/etc/nginx/sites-available/local server_name localhost linode galloway; ### 这样局域网(LAN)内用户访问linode，galloway都能走到你这一块指定的走向（再具体一点，假如你是个前端开发，你跟测试说，手机连我代理，访问galloway就行了） ### /etc/nginx/sites-available/catchall server_name &quot;&quot;; ## nginx will process all requests that either do not have a hostname, or that have an unspecified hostname, such as requests for the IP address itself. ## 要么是没有hostname，要么是没有一个具体的hostname，说的就是直接浏览器输入ip地址的那帮人 location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ /index.html; ## 说的很清楚，先当做文件试试，再当做文件夹试试，再不行试试index.html # Uncomment to enable naxsi on this location # include /etc/nginx/naxsi.rules &#125;&#125; access_log是跟着server走的，毕竟你不希望两台不相干的服务器的访问日志搅和在一起/etc/nginx/sites-available/example.com文件中写入这么一行 access_log /srv/www/example.com/logs/access.log; 关闭日志也是可以的，不过请不要随便这么做/etc/nginx/nginx.confaccess_log off; 接下来是location/etc/nginx/sites-available/example.com12345678910111213141516171819202122232425262728location / &#123; &#125; location /images/ &#123; &#125;location /blog/ &#123; &#125;location /planet/ &#123; &#125;location /planet/blog/ &#123; &#125;/* 现在客户端访问http://example.com/，假如前面server_name配置了一个example.com.那个这次请求被location / 获取Nginx总是会使用匹配程度最高的：比如Request: http://example.com/planet/blog/ or http://example.com/planet/blog/about/这俩请求会走到location /planet/blog/ &#123; &#125;而不是location /planet/ &#123; &#125; */location ~ IndexPage\\.php$ &#123; &#125;location ~ ^/BlogPlanet(/|/index\\.php)$ &#123; &#125; ## 美元符号代表以此结束，反斜杠代表转义字符前面这个~符号代表后面跟着的是一个正则表达式（nginx uses Perl Compatible Regular Expressions (PCRE).）但这里还是大小写敏感的正则表达式location ~* \\.(pl|cgi|perl|prl)$ &#123; &#125;location ~* \\.(md|mdwn|txt|mkdn)$ &#123; &#125;// 想要大小写不敏感~*即可## 这回.pl, .PL, .cgi, .CGI, .perl, .Perl, .prl结尾的都能匹配了location ^~ /images/IndexPage/ &#123; &#125;location ^~ /blog/BlogPlanet/ &#123; &#125;这个^~符号表示告诉nginx，如果找到了匹配，就用这了。意思就是说 /images/IndexPage/info 也会直接用这个了，就算后面有更佳匹配location /images/IndexPage/info &#123; &#125;也不管location = / &#123; &#125;注意这个中间的等号，意思是访问只有url是http://example.com/的时候才匹配 ，而 http://example.com/index.html 就不会匹配用=有一个好处就是匹配会稍微快一点，常用于匹配一些特别热门的url Directives are processed in the following order:（搜索url匹配的顺序如下）1： Exact string matches are processed first.（就是url字符一模一样的最先匹配上并停止后续搜索）2： Remaining literal string directives are processed next. 如果碰到了^~修饰的匹配的字符，停止搜索3： All location directives with regular expressions (~ and ~* ) are processed.正则表达式搜索开始4： 如果上述都没找到，If no regular expressions match, the most specific literal string match is used. Make sure each file and folder under a domain will match at least one location directive.写配置的时候请确保某个domian下的所有文件都能至少被一条规则匹配上 While nginx’s configuration parser is technically capable of reading nested location blocks, this is neither recommended nor supported. ## 不建议写这种location一层套一层的 ========================================================================================================================== add_header not working on ubuntu server? 防盗链之间做爬虫的时候，request的header中不添加refer就会返回一张 固定的图片。这个功能nginx也行123456location ~* \\.(gif|jpg|swf)$ &#123; valid_referers none blocked start.igrow.cn sta.igrow.cn; if ($invalid_referer) &#123; rewrite ^/ http://$host/logo.png; &#125;&#125; 参考 nginx Configurations How To Install Nginx on Ubuntu 16.04 understanding-the-nginx-configuration-file if is evil, 可以,但不要在config文件里面写if nginx的一些优化策略 rewrite rules怎么写 NGINX LOAD BALANCING – HTTP LOAD BALANCER How to Use NGINX as a Reverse Proxy，不仅是http(s)层的代理，还有其他的protocol也支持 use-nginx-as-a-front-end-proxy-and-software-load-balancer","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"},{"name":"nginx","slug":"nginx","permalink":"https://haldir65.github.io/tags/nginx/"}]},{"title":"css3速查手册","date":"2017-12-09T17:56:06.000Z","path":"2017/12/09/2017-12-09-css3-explained/","text":"一份css3知识汇总 Animation12345678910111213141516171819202122.box&#123; background: white; width: 200px; height: 200px; position: relative; animation-name: mayanimation; animation-duration: 4s; animation-iteration-count: 1; animation-fill-mode: forwards; /* forwards表示动画完成后，stay as the end of animation */ animation-delay: 2s; animation-direction: alternate; animation-timing-function: ease-out;&#125;@keyframes myanimation &#123; 0% &#123;background-color: white;left:0px;top:0px;border-radius: 0 0 0 0 ;&#125; 25%&#123;background-color: red;left: 300px;top: 0px;border-radius: 50% 0 0 0 &#125; 50%&#123;background-color: green;left: 300px;top: 300px;border-radius: 50% 50% 0 0 &#125; 75%&#123;background-color: blue;left: 0px;top: 300px;border-radius: 50% 50% 50% 0&#125; 100% &#123;background-color: white;left: 0px;top: 0px;border-radius: 50% 50% 50% 50%&#125;&#125; 需要注意的是，如果animation的duration不写的话，是不会生效的 Transition基本就是pseudo selector之间相互变化的时候，在新的状态和原本的状态之间属性变化切换的动画。Transition这个词应该是卡通中使用的，用于显示from state到to state之间的过渡。 12345678910111213141516171819.box&#123; background: white; width: 300px; height: 300px; position: relative; margin: auto; top: 200px; text-align: center; vertical-align: middle; transition-property: all; transition-duration: 1s; transition-timing-function: linear;&#125;.box:hover&#123; background: red; border-radius: 50%; transform: rotateY(180deg);&#125; 和animation一样，如果transition的duration不写的话，是不会起效的 css-flex-box-guide","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"}]},{"title":"Android知识集合[三]","date":"2017-12-08T22:33:26.000Z","path":"2017/12/08/2017-12-08-clutter-repo-for-android/","text":"之前的文章快装不下了，所以另外开一篇文章专门放Android相关的杂乱的知识点。 Android Source code，能够实时看到提交信息androidxref，一个比较好的查看源码的网站From View to Pixel讲了ViewRootImpl,SurfaceFlinger这些东西一个很长的关于显示原理的文章，基本上什么都讲了 1.基本上所有的Android System Event都是从ActivityThread中发起的onDetachedFromWindow是从ActivityThread的handleDestoryActivity传下来的，走到windowManager.removeViewImediate,然后ViewRootImpl.doDie,然后ViewRootImpl.dispatchDetachedFromWindow，然后DecoreView.dispatchDetachedFromWindow，然后一个个child传下去。所有的View走完了之后，DecorView在onDetachedFromWindow中以Window.Callback的方式顺手通知了Activity的onDetachedFromWindow。其实打个断点看的话就快一点。 2. onSaveInstance对于有id的View，系统会自动帮忙存一点东西当然onSaveInstance也是从ActivityThread里面传递下来的。还有就是onCreate(Bundle)和onRestroreSaveInstanceState(Bundle)里面的bundle是同一个object。romain Guy说最初onSaveInstance和onRestroreSaveInstanceState本来叫onIcy(冻结)和onThaw（解冻），确实很形象。其实这个到现在还有一些痕迹:ViewGroup.java1234567protected void dispatchFreezeSelfOnly(SparseArray&lt;Parcelable&gt; container) &#123; super.dispatchSaveInstanceState(container); &#125; protected void dispatchThawSelfOnly(SparseArray&lt;Parcelable&gt; container) &#123; super.dispatchRestoreInstanceState(container); &#125; 3.android asset atlas就是为了节省asset耗费的内存，将一些系统公用的资源作为一个服务先跑起来，所有app的process共用这部分资源。 4. ZygoteInit5. Michael Bailey每年的演讲都很精彩Droidcon NYC 2015 - How the Main Thread worksDroidcon NYC 2016 - How LayoutInflater worksdroidcon NYC 2017 - How Espresso Works 2016年的演讲中提到了LayoutInflater中的好玩的注释LayoutInflater.java1234if (name.equals(TAG_1995)) &#123; // Let's party like it's 1995! return new BlinkLayout(context, attrs); &#125; 6. Chris Banes在2017年给出了关于状态栏的解释droidcon NYC 2017 - Becoming a master window fitter 7. Android默认的launcher的repo在Launcher3,应该是属于System UI Team在维护。todo 那个点击了icon进应用的点击事件在哪里。大致是在Launcher.java这个文件的startActivitySafely里面 8. 在string.xml里面放一些format的字符1234567public static void main(String[] args) &#123; String s1 = \"这里面可以放多个字符串%1$s,%2$s前面加上一个百分号和数字，代表顺序\"; String s2 = \"百分号的d和百分号的s可以混着%1$s用的，比如这个%2$d数字什么的，第三个是带百分号的数字%3$d%%这个由于需要显示百分号，所以加上两个百分号\"; System.out.println(String.format(s1,\"XXXX\",\"XXX\")); System.out.println(String.format(s2,\"XXX\", 100, 100));&#125; 实际输出 这里面可以放多个字符串XXXX,XXX前面加上一个百分号和数字，代表顺序百分号的d和百分号的s可以混着XXX用的，比如这个100数字什么的，第三个是带百分号的数字100%这个由于需要显示百分号，所以加上两个百分号 %d represents an integer; you want to use %f for a double. 据猜测d代表decimal而不是double 9.我记得Chet Haase说过Lollipop及以上的Button默认是有一个elevation的记得Chet在一次演讲中说到Appcompat在5.0以上默认使用material Theme, Button的默认elevation好像是3dp。日常开发中也经常会看见button和设置elevation=0的button相比确实有些阴影。在Button的构造函数里面打了断点，在setElevation也打了断点，最后发现是在View创建之后Choregrapher在doFrame的时候run了一个Animation，在这个animation中设置了一个6px的elevation(2dp，原来Chet记错了)。至于这个2dp是那来的呢：123456789&lt;Button ... android:stateListAnimator=\"@null\" /&gt; &lt;Button ... android:stateListAnimator=\"@anim/my_animator\" /&gt; 最终在网上找到了core/res/res/anim/button_state_list_anim_material.xml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;!-- Copyright (C) 2014 The Android Open Source Project Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.--&gt;&lt;selector xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item android:state_pressed=\"true\" android:state_enabled=\"true\"&gt; &lt;set&gt; &lt;objectAnimator android:propertyName=\"translationZ\" android:duration=\"@integer/button_pressed_animation_duration\" 100ms android:valueTo=\"@dimen/button_pressed_z_material\" ## 4dp 其实稍微注意下，手指按住一个Button的时候，Button底部的阴影会扩大，就是这个4dp的属性动画在跑 android:valueType=\"floatType\"/&gt; &lt;objectAnimator android:propertyName=\"elevation\" android:duration=\"0\" android:valueTo=\"@dimen/button_elevation_material\" ## 2dp android:valueType=\"floatType\"/&gt; &lt;/set&gt; &lt;/item&gt; &lt;!-- base state --&gt; &lt;item android:state_enabled=\"true\"&gt; &lt;set&gt; &lt;objectAnimator android:propertyName=\"translationZ\" android:duration=\"@integer/button_pressed_animation_duration\" ##100ms android:valueTo=\"0\" android:startDelay=\"@integer/button_pressed_animation_delay\" ## 100ms android:valueType=\"floatType\"/&gt; &lt;objectAnimator android:propertyName=\"elevation\" android:duration=\"0\" android:valueTo=\"@dimen/button_elevation_material\" ## 2dp android:valueType=\"floatType\" /&gt; &lt;/set&gt; &lt;/item&gt; &lt;item&gt; &lt;set&gt; &lt;objectAnimator android:propertyName=\"translationZ\" android:duration=\"0\" android:valueTo=\"0\" android:valueType=\"floatType\"/&gt; &lt;objectAnimator android:propertyName=\"elevation\" android:duration=\"0\" android:valueTo=\"0\" android:valueType=\"floatType\"/&gt; &lt;/set&gt; &lt;/item&gt;&lt;/selector&gt; 注意那个button_elevation_material：在aosp中1234&lt;!-- Elevation when button is pressed --&gt; &lt;dimen name=\"button_elevation_material\"&gt;2dp&lt;/dimen&gt; &lt;!-- Z translation to apply when button is pressed --&gt; &lt;dimen name=\"button_pressed_z_material\"&gt;4dp&lt;/dimen&gt; 所以Lollipop上使用Appcompat主题，什么都不改，button默认是会有2dp的elevation的至于这个elevation为什么不是在初始化的时候就设置的（打断点的时候走完构造函数,getElevation还是0），就在于这上面这个AnimationDelay(其实是100ms之后再去运行这个动画)，从堆栈来看，最终导致调用setElevation的地方是在drawableStateChange这个方法里面。 10. 内网传输功能的原理有些App提供局域网内无限传输文件的能力：本质上是用了TCP或者UDP。在java层的话，TCP用的是java.net.Socket，UDP用的是java.net.DatagramSocket。由于数据传输是双向的，客户端和Server端都需要创建这样的Object Instance。一个比较好的DemoUnix的输入输出(IO)系统遵循Open-Read-Write-Close这样的操作范本。 11.v7包里面的Toolbar只是一个自定义View随便举一个例子，右上角的optionMenu点击跳出的弹窗里面其实是一个ListView，具体的class是android.support.v7.view.menu.ListMenuItemView。都是很常规的自定义View的做法，这个ListView的Adapter叫做MenuAdapter，这个Adapter的itemLayout布局文件叫做abc_popup_menu_item_layout.xmlabc_popup_menu_item_layout.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;android.support.v7.internal.view.menu.ListMenuItemView xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"fill_parent\" android:layout_height=\"?attr/dropdownListPreferredItemHeight\" android:minWidth=\"196dip\" android:paddingRight=\"16dip\"&gt; &lt;!-- Icon will be inserted here. --&gt; &lt;!-- The title and summary have some gap between them, and this 'group' should be centered vertically. --&gt; &lt;RelativeLayout android:layout_width=\"0dip\" android:layout_weight=\"1\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center_vertical\" android:layout_marginLeft=\"16dip\" android:duplicateParentState=\"true\"&gt; &lt;TextView android:id=\"@+id/title\" android:layout_width=\"fill_parent\" android:layout_height=\"wrap_content\" android:layout_alignParentTop=\"true\" android:layout_alignParentLeft=\"true\" android:textAppearance=\"?attr/textAppearanceLargePopupMenu\" android:singleLine=\"true\" android:duplicateParentState=\"true\" android:ellipsize=\"marquee\" android:fadingEdge=\"horizontal\"/&gt; &lt;TextView android:id=\"@+id/shortcut\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_below=\"@id/title\" android:layout_alignParentLeft=\"true\" android:textAppearance=\"?attr/textAppearanceSmallPopupMenu\" android:singleLine=\"true\" android:duplicateParentState=\"true\"/&gt; &lt;/RelativeLayout&gt; &lt;!-- Checkbox, and/or radio button will be inserted here. --&gt;&lt;/android.support.v7.internal.view.menu.ListMenuItemView&gt; 一般来讲，MenuItem的字体大小，颜色都是需要在theme中写的。所以照说硬要用findViewById(ViewGroup的findViewTraversal)其实是能找到的。 12. Message.ontain以及相似的场景MotionEvent.ontain()，TouchTarget.ontain(),HoverTarget.ontain()….MotionEvent最多缓存10个，TouchTarget和HoverTarget这些都是在看ViewGroup源码的时候瞅到的，简单点。稍微看下就知道这种obtain,recycle写法的套路。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758private static final class TouchTarget &#123; private static final int MAX_RECYCLED = 32; private static final Object sRecycleLock = new Object[0]; private static TouchTarget sRecycleBin; private static int sRecycledCount; public static final int ALL_POINTER_IDS = -1; // all ones // The touched child view. public View child; // The combined bit mask of pointer ids for all pointers captured by the target. public int pointerIdBits; // The next target in the target list. public TouchTarget next; private TouchTarget() &#123; &#125; public static TouchTarget obtain(@NonNull View child, int pointerIdBits) &#123; if (child == null) &#123; throw new IllegalArgumentException(\"child must be non-null\"); &#125; final TouchTarget target; synchronized (sRecycleLock) &#123; if (sRecycleBin == null) &#123; target = new TouchTarget(); &#125; else &#123; target = sRecycleBin; sRecycleBin = target.next; sRecycledCount--; target.next = null; &#125; &#125; target.child = child; target.pointerIdBits = pointerIdBits; return target; &#125; public void recycle() &#123; if (child == null) &#123; throw new IllegalStateException(\"already recycled once\"); &#125; synchronized (sRecycleLock) &#123; if (sRecycledCount &lt; MAX_RECYCLED) &#123; next = sRecycleBin; sRecycleBin = this; sRecycledCount += 1; &#125; else &#123; next = null; &#125; child = null; &#125; &#125; &#125; 13. 从点击Launcher到应用启动的过程 借助binder驱动ActivityManagerService.startActivity-&gt; (AMS)…//一系类AMS的调用链和一些与Launcher通过Binder的互相调用过程，此时仍然未创建应用程序的进程。… AMS创建一个新的进程，用来启动一个ActivityThread实例， 即将要启动的Activity就是在这个ActivityThread实例中运行Process.start(“android.app.ActivityThread”,…)-&gt;// 通过zygote机制创建一个新的进程Process.startViaZygote-&gt;调用新进程的main()ActivityThread.main-&gt; Android 应用点击图标到Activity界面显示的过程分析 14. Context是什么ActivityThread.java1234createBaseContextForActivity&#123; ContextImpl appContext = ContextImpl.createActivityContext( this, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);&#125; ContextImpl包含资源信息、对Context的一些函数的实现等。每次创建Activity都会新建一个ContextImpl 15. Dex file explainedThe Dex File Format 16 .PackageParser和Android.manifest文件有关Android APK应用安装原理(1)-解析AndroidManifest原理-. 17. 在Dialog中getContext获取的是ContextThemeWrapperContextThemeWrapper是API 1就有了的，主要是包装一下context，将Context的外部调用添加一些包装。 18. 低版本的xml属性怎么写mylayout.xml12345&lt;Button android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:elevation=\"10dp\" /&gt; 这样写的话，Lint肯定会报warning。解决办法，alt+enter，Android studio自动生成一个/layout-v21/maylayout.xml。现在想起来很多项目里v-xx文件夹，其实是这个意思。还有一种写法 style=”?android:attr/borderlessButtonStyle”自己写style也是行的 19. LocalBroadCastManager好像确实是基于handler实现的App内部全局拥有一个LocalBroadCastManager实例，内部持有一个handler，对外暴露功能sendBroadcast。就是往handler里丢一个message MSG_EXEC_PENDING_BROADCASTS，处理这个message就是executePendingBroadcasts。所以默认是在下一个message中处理的。如果想在当前message中就处理掉，还有一个sendBroadcastSync方法，但这会把当前持有的所有待处理消息全部flush掉。sendBroadcast，unregisterReceiver，registerReceiver内部用了synchronize，所以是线程安全的。 20. ViewPager为什么没有那些attrs的可以写在xml里面的属性 Adam Powell在15年的Android Dev summit上说过：this is pre aar gradle age, if we were to do it today , we definitely would add。 看了下aosp的git日志，ViewPager是2011年就有了的。而aar是随着android studio的发布推出的。 jar和aar的区别: jar : JAR 文件就是 Java Archive File，顾名思意，它的应用是与 Java 息息相关的，是 Java 的一种文档格式。只包含了class文件与清单文件 ，不包含资源文件，如图片等所有res中的文件。 aar: aar，AAR（Android Archive）包是一个Android库项目的二进制归档文件,包含一些自己写的控件布局文件以及字体等资源文件(resources或者manifest文件)那么就只能使用*.aar文件。 21. 都知道RelativeLayout会measure两次child，LinearLayout在加weight的时候也会measure两次LinearLayout.javameasureVertical()12345678// We have no limit, so make all weighted views as tall as the largest child. // Children will have already been measured once. if (useLargestChild &amp;&amp; heightMode != MeasureSpec.EXACTLY) &#123; for (int i = 0; i &lt; count; i++) &#123; final View child = getVirtualChildAt(i); // ...... &#125; &#125; 22. gradlw文件的作用understanding-the-gradle-wrapper进一个新目录 gradle wrapper 命令会生成如下目录├─.gradle│ ├─4.4.1│ │ ├─fileChanges│ │ ├─fileHashes│ │ └─taskHistory│ └─buildOutputCleanup└─gradle └─wrapper这里提到了一些点：gradlew.bat是给windows平台用的，gradlew是给unix平台用的。gradle/wrapper/gradle-wrapper.jar 里面装的是Gradle Wrapper的代码gradlew就是一个调用gradle命令的脚本，内部会根据gradle-wrapper.properties里面的distributionUrl下载对应版本的gradle distribution zip文件并解压缩，并只会使用该版本的gralde进行编译 gradlew就是帮忙安装好gradle然后调用gradle 23. java平台下扫描本地samba服务器用的的一个library叫做import jcifs.smb.SmbFile找到一个实例代码 24.Android平台上js交互的速度也是从别处看到的，说是java调js的效率不高，大概200ms，js调java好一点，大概50ms左右，所以尽量用js调java。 25.在Android平台发起上传图片请求的重点在于掌握http协议（关键词Boundary）自己用express写了一个上传文件的后台，前端请求/post接口即可上传图片看了下chrome里面的network12345678910111213POST /upload/ HTTP/1.1Host: localhost:3000Connection: keep-aliveContent-Length: 9860Accept: */*Origin: http://localhost:3000X-Requested-With: XMLHttpRequestUser-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryw0ZREBdOiJbbwuAg // 注意这句DNT: 1Referer: http://localhost:3000/Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7 123456------WebKitFormBoundaryw0ZREBdOiJbbwuAgContent-Disposition: form-data; name=&quot;uploads[]&quot;; filename=&quot;278a516893f31a16feee.jpg&quot;Content-Type: image/jpeg------WebKitFormBoundaryw0ZREBdOiJbbwuAg-- 那个WebKitFormBoundary是浏览器自动加的，Content-Disposition也是浏览器加的 这里借用鸿洋的代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859private static final String BOUNDARY = \"----WebKitFormBoundaryT1HoybnYeFOGFlBR\"; public void uploadForm(Map&lt;String, String&gt; params, String fileFormName, File uploadFile, String newFileName, String urlStr) throws IOException &#123; if (newFileName == null || newFileName.trim().equals(\"\")) &#123; newFileName = uploadFile.getName(); &#125; StringBuilder sb = new StringBuilder(); /** * 普通的表单数据 */ for (String key : params.keySet()) &#123; sb.append(\"--\" + BOUNDARY + \"\\r\\n\"); sb.append(\"Content-Disposition: form-data; name=\\\"\" + key + \"\\\"\" + \"\\r\\n\"); sb.append(\"\\r\\n\"); sb.append(params.get(key) + \"\\r\\n\"); &#125; /** * 上传文件的头 */ sb.append(\"--\" + BOUNDARY + \"\\r\\n\"); sb.append(\"Content-Disposition: form-data; name=\\\"\" + fileFormName + \"\\\"; filename=\\\"\" + newFileName + \"\\\"\" + \"\\r\\n\"); sb.append(\"Content-Type: image/jpeg\" + \"\\r\\n\");// 如果服务器端有文件类型的校验，必须明确指定ContentType sb.append(\"\\r\\n\"); byte[] headerInfo = sb.toString().getBytes(\"UTF-8\"); byte[] endInfo = (\"\\r\\n--\" + BOUNDARY + \"--\\r\\n\").getBytes(\"UTF-8\"); System.out.println(sb.toString()); URL url = new URL(urlStr); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); conn.setRequestMethod(\"POST\"); conn.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + BOUNDARY); conn.setRequestProperty(\"Content-Length\", String .valueOf(headerInfo.length + uploadFile.length() + endInfo.length)); conn.setDoOutput(true); OutputStream out = conn.getOutputStream(); InputStream in = new FileInputStream(uploadFile); out.write(headerInfo); byte[] buf = new byte[1024]; int len; while ((len = in.read(buf)) != -1) out.write(buf, 0, len); out.write(endInfo); in.close(); out.close(); if (conn.getResponseCode() == 200) &#123; System.out.println(\"上传成功\"); &#125; &#125; 26.ScrollView，RecyclerView的截屏实现主要是用lru包装下，参考123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990public static Bitmap shotRecyclerView(RecyclerView view) &#123; RecyclerView.Adapter adapter = view.getAdapter(); Bitmap bigBitmap = null; if (adapter != null) &#123; int size = adapter.getItemCount(); int height = 0; Paint paint = new Paint(); int iHeight = 0; final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024); // Use 1/8th of the available memory for this memory cache. final int cacheSize = maxMemory / 8; LruCache&lt;String, Bitmap&gt; bitmaCache = new LruCache&lt;&gt;(cacheSize); for (int i = 0; i &lt; size; i++) &#123; RecyclerView.ViewHolder holder = adapter.createViewHolder(view, adapter.getItemViewType(i)); adapter.onBindViewHolder(holder, i); holder.itemView.measure( View.MeasureSpec.makeMeasureSpec(view.getWidth(), View.MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED)); holder.itemView.layout(0, 0, holder.itemView.getMeasuredWidth(), holder.itemView.getMeasuredHeight()); holder.itemView.setDrawingCacheEnabled(true); holder.itemView.buildDrawingCache(); Bitmap drawingCache = holder.itemView.getDrawingCache(); if (drawingCache != null) &#123; bitmaCache.put(String.valueOf(i), drawingCache); &#125; height += holder.itemView.getMeasuredHeight(); &#125; bigBitmap = Bitmap.createBitmap(view.getMeasuredWidth(), height, Bitmap.Config.ARGB_8888); Canvas bigCanvas = new Canvas(bigBitmap); Drawable lBackground = view.getBackground(); if (lBackground instanceof ColorDrawable) &#123; ColorDrawable lColorDrawable = (ColorDrawable) lBackground; int lColor = lColorDrawable.getColor(); bigCanvas.drawColor(lColor); &#125; for (int i = 0; i &lt; size; i++) &#123; Bitmap bitmap = bitmaCache.get(String.valueOf(i)); bigCanvas.drawBitmap(bitmap, 0f, iHeight, paint); iHeight += bitmap.getHeight(); bitmap.recycle(); &#125; &#125; return bigBitmap; &#125;// 截取listView也是差不多，主要是一个makeMeasureSpec View.MeasureSpec.UNSPECIFIED public static Bitmap shotListView(ListView listview) &#123; ListAdapter adapter = listview.getAdapter(); int itemscount = adapter.getCount(); int allitemsheight = 0; List&lt;Bitmap&gt; bmps = new ArrayList&lt;Bitmap&gt;(); for (int i = 0; i &lt; itemscount; i++) &#123; View childView = adapter.getView(i, null, listview); childView.measure( View.MeasureSpec.makeMeasureSpec(listview.getWidth(), View.MeasureSpec.EXACTLY), View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED)); childView.layout(0, 0, childView.getMeasuredWidth(), childView.getMeasuredHeight()); childView.setDrawingCacheEnabled(true); childView.buildDrawingCache(); bmps.add(childView.getDrawingCache()); allitemsheight += childView.getMeasuredHeight(); &#125; Bitmap bigbitmap = Bitmap.createBitmap(listview.getMeasuredWidth(), allitemsheight, Bitmap.Config.ARGB_8888); Canvas bigcanvas = new Canvas(bigbitmap); Paint paint = new Paint(); int iHeight = 0; for (int i = 0; i &lt; bmps.size(); i++) &#123; Bitmap bmp = bmps.get(i); bigcanvas.drawBitmap(bmp, 0, iHeight, paint); iHeight += bmp.getHeight(); bmp.recycle(); bmp = null; &#125; return bigbitmap; &#125; 都在这里了 27.正常使用Android WebView的方法大概这样1234mWebView = findViewById(R.id.my_webview)mWebView.getSettings().setJavaScriptEnabled(true) //这只是enable jsmWebView.setWebViewClient(WebViewClient()) //没有这句LayoutInflater调用newInstance的时候就崩了mWebView.loadUrl(\"https://www.baidu.com\") 然后是WebView的截屏12345678910111213141516171819202122232425262728293031323334353637private fun screenShot() &#123; //这种方式只能截出来当前屏幕上显示的内容，状态栏以下，手机屏幕底部以上的内容，仅此而已 val screenWidth :Float = Utils.getScreenWidth(this).toFloat() val screenHeight = Utils.getScreenHeight(this).toFloat() val shortImage = Bitmap.createBitmap(screenWidth.toInt(), screenHeight.toInt(), Bitmap.Config.RGB_565) val canvas = Canvas(shortImage) // 画布的宽高和屏幕的宽高保持一致 val paint = Paint() canvas.drawBitmap(shortImage, screenWidth, screenHeight, paint) mWebView.draw(canvas) savebitmap(\"1_awesome\",shortImage)&#125;// 然而下面这种方式截出来的长度是对了，但底部是空的，得到的是一张很长的，但除了顶部有当前屏幕显示内容以外底部空白的图片//就是只能截下来可视区域private fun screenShotLong()&#123; mWebView.measure(View.MeasureSpec.makeMeasureSpec(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED), View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED)) mWebView.layout(0,0,mWebView.measuredWidth,mWebView.measuredHeight) mWebView.isDrawingCacheEnabled = true mWebView.buildDrawingCache() //图片大的话，这段也卡很长时间 val longBitmap = Bitmap.createBitmap(mWebView.measuredWidth,mWebView.measuredHeight,Bitmap.Config.ARGB_8888) val canvas = Canvas(longBitmap) val paint = Paint() canvas.drawBitmap(longBitmap,0f,mWebView.measuredHeight.toFloat(),paint) mWebView.draw(canvas) savebitmap(\"longbitmap\",longBitmap) ToastUtil.showTextLong(this,\"All done!\") &#125;//然后找了下，只要在setContentView前，调用这个方法就ok了。但这个方法得在App中所有WebView创建前调用 if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123; WebView.enableSlowWholeDocumentDraw(); &#125; setContentView(R.layout.activity_webview); // 然而看到了这样的日志// View: WebView not displayed because it is too large to fit into a software layer (or drawing cache), needs 20710080 bytes, only 8294400 available//保存下来的png大小正好普遍在MB量级，另外，保存图片期间完全卡顿（把createBitmap和saveBitmap这段挪到子线程好点了，cpu占用25%以上持续10s，内存占用从32MB飙到400MB，一直不下来了） 还有,js调java的时候，走的是java的一个叫做JavaBridge的线程，操作UI的话post就好了。 28. 分析一点ViewPager的源码首先是快速滑动的时候为了性能只是挪了bitmap，这比调用layout要快得多。ViewPager.jav1234567891011121314151617181920212223242526private void setScrollingCacheEnabled(boolean enabled) &#123; if (mScrollingCacheEnabled != enabled) &#123; mScrollingCacheEnabled = enabled; if (USE_CACHE) &#123; //这个一直是false final int size = getChildCount(); for (int i = 0; i &lt; size; ++i) &#123; final View child = getChildAt(i); if (child.getVisibility() != GONE) &#123; child.setDrawingCacheEnabled(enabled); &#125; &#125; &#125; &#125; &#125;// 这里要说的是，PagerAdapter中可以复写的方法很多，比如一些状态的保存就可以写在adapter中 @Override public Parcelable onSaveInstanceState() &#123; Parcelable superState = super.onSaveInstanceState(); SavedState ss = new SavedState(superState); ss.position = mCurItem; if (mAdapter != null) &#123; ss.adapterState = mAdapter.saveState(); &#125; return ss; &#125; ViewPager的 onMeasure中有这么一段话,这也就解释了为什么viewPager宽高不能设置为wrap_content。123456789101112@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; // For simple implementation, our internal size is always 0. // We depend on the container to specify the layout size of // our view. We can't really know what it is since we will be // adding and removing different arbitrary views and do not // want the layout to change as this happens. setMeasuredDimension(getDefaultSize(0, widthMeasureSpec), getDefaultSize(0, heightMeasureSpec)); // ................................ &#125; ViewPager横向挪动child的方法是ViewPager.java1234567891011121314151617181920212223242526272829303132333435363738@Override public boolean onInterceptTouchEvent(MotionEvent ev) &#123; /* * This method JUST determines whether we want to intercept the motion. * If we return true, onMotionEvent will be called and we do the actual * scrolling there. */ // 这里只是做一个拦截，真正去挪动child的方法在onTouchEvent里面 &#125;// Not else! Note that mIsBeingDragged can be set above. if (mIsBeingDragged) &#123; // Scroll to follow the motion event final int activePointerIndex = ev.findPointerIndex(mActivePointerId); final float x = ev.getX(activePointerIndex); needsInvalidate |= performDrag(x); &#125; private boolean performDrag(float x) &#123; boolean needsInvalidate = false; scrollTo((int) scrollX, getScrollY()); //其实是ViewPager自己在滑动 pageScrolled((int) scrollX); //pageScrollView中并未涉及child的挪动 return needsInvalidate; &#125;// 因为在onLayout中是这么写的，所以后面的child其实已经被layout到屏幕右边排队了，手指往左滑动的时候带着ViewPager，相当于直接把右边的children拽出来了。child.layout(childLeft, childTop, childLeft + child.getMeasuredWidth(), childTop + child.getMeasuredHeight()); // offsetLeftAndRight底层的实现是修改displayList的数据，native方法mLeft += offset;mRight += offset;mRenderNode.offsetLeftAndRight(offset); 在smoothScrollTo中这个方法被调用，传了一个true。其实类似的scrollCache的讨论还很多。原理就是调用所有child的setDrawingCacheEnabled方法（不过目前看来这个因为USE_CACHE一直是false所以没用）看ViewPager的时候又想到一件事，最早的时候以为这种跟adapter打交道的View不应该用setData，应该用addData，并天真的以为内部实现就是直接从外部的list中取数据。在ViewPager源码中，有一个mItems的ArrayList,这么看来实际上外部的数据也只是被拿来填充到内部的一个新的List中。12345678910111213141516171819202122232425262728293031323334ItemInfo addNewItem(int position, int index) &#123; ItemInfo ii = new ItemInfo(); ii.position = position; ii.object = mAdapter.instantiateItem(this, position); ii.widthFactor = mAdapter.getPageWidth(position); if (index &lt; 0 || index &gt;= mItems.size()) &#123; mItems.add(ii); &#125; else &#123; mItems.add(index, ii); &#125; return ii; &#125;// notifyDataSetChange的不过是调用了这个方法 void dataSetChanged() &#123; // This method only gets called if our observer is attached, so mAdapter is non-null. final int adapterCount = mAdapter.getCount(); mExpectedAdapterCount = adapterCount; boolean needPopulate = mItems.size() &lt; mOffscreenPageLimit * 2 + 1 &amp;&amp; mItems.size() &lt; adapterCount; // mOffscreenPageLimit默认是1 // 比如原来的数量只有2，或者添加了新的数据，都需要重走一遍layout boolean isUpdating = false; for (int i = 0; i &lt; mItems.size(); i++) &#123; if (ii.position != newPos) &#123; needPopulate = true; //多数不会走到这里 &#125; &#125; if (needPopulate) &#123; requestLayout(); &#125; &#125; 最后是关于ViewPager的预加载问题123456789101112131415161718192021222324252627282930void populate(int newCurrentItem) &#123; if (curItem == null &amp;&amp; N &gt; 0) &#123; curItem = addNewItem(mCurItem, curIndex); //首先是加载当前的item &#125; // Fill 3x the available width or up to the number of offscreen // pages requested to either side, whichever is larger. // If we have no current item we have no work to do. // 左右两侧都放至少offscreenLimit*screenwidth的宽度，所以左右至少都加载一个 //实际加载的方法是在addNewItem里面， // Fill 3x the available width or up to the number of offscreen // pages requested to either side, whichever is larger. // If we have no current item we have no work to do. if (curItem != null) &#123; float extraWidthLeft = 0.f; if(....)&#123; addNewItem() &#125; // .... 先填充左边 float extraWidthRight = curItem.widthFactor; // ...然后是右边 if(....)&#123; addNewItem() &#125; calculatePageOffsets(curItem, curIndex, oldCurInfo); &#125;&#125; 在AbsListView中，setScrollingCacheEnabled这个方法也存在，同样是调用的child的drawingCacheEnabledRomain Guy的博客提到了ListView默认开启，但他忘记了GridView默认开启 29.关于65536问题Too many classes in –main-dex-list, main dex capacity exceeded | 主Dex引用太多怎么办？MultiDex对于minSdk&gt; =21 不会生效，如果最低版本是21上面所有的任务都不会执行，也不会有主Dex列表的计算。这是因为在应用安装期间所有的dex文件都会被ART转换为一个.oat文件。所以minSdk高的也不用开multiDex了。在使用ART虚拟机的设备上(部分4.4设备，5.0+以上都默认ART环境)，已经原生支持多Dex，因此就不需要手动支持了 Android 5.0 (API level 21) and higher uses a runtime called ART which natively supports loading multiple DEX files from APK files. ART performs pre-compilation at app install time which scans for classesN.dex files and compiles them into a single .oat file for execution by the Android device. Therefore, if your minSdkVersion is 21 or higher, you do not need the multidex support library. 看下MultiDex的源码，secondaryDex文件的路径是/date/date//code_cache/secondary-dexes/ 这是一个文件夹MultiDex的原理基本上在简书123456789101112131415161718private static final class V14 &#123; private static void install(final ClassLoader loader, final List&lt;File&gt; additionalClassPathEntries, final File optimizedDirectory) throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException, InvocationTargetException, NoSuchMethodException &#123; //通过反射获取loader的pathList字段，loader是由Application.getClassLoader()获取的，实际获取到的是PathClassLoader对象的pathList字段 final Field pathListField = findField(loader, \"pathList\"); final Object dexPathList = pathListField.get(loader); //dexPathList是PathClassLoader的私有字段，里面保存的是Main Dex中的class //dexElements是一个数组，里面的每一个item就是一个Dex文件 //makeDexElements()返回的是其他Dex文件中获取到的Elements[]对象，内部通过反射makeDexElements()获取 //expandFieldArray是为了把makeDexElements()返回的Elements[]对象添加到dexPathList字段的成员变量dexElements中 expandFieldArray(dexPathList, \"dexElements\", makeDexElements(dexPathList, new ArrayList&lt;File&gt;(additionalClassPathEntries), optimizedDirectory)); &#125; private static Object[] makeDexElements(final Object dexPathList, final ArrayList&lt;File&gt; files, final File optimizedDirectory) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException &#123; final Method makeDexElements = findMethod(dexPathList, \"makeDexElements\", (Class&lt;?&gt;[])new Class[] &#123; ArrayList.class, File.class &#125;); return (Object[])makeDexElements.invoke(dexPathList, files, optimizedDirectory); &#125; &#125; 这里面注意makeDexElements方法，是通过反射调用了Dalvik的DexPathList class的这个方法makeDexElements。说白了，整个过程就是在/data/data/(packagename)/code_cache/这个目录下面复制粘贴文件(class.dex文件也是文件)，复制粘贴文件带来的影响就是classLoader(Android上是BaseDexClassLoader)在findClass的时候调用的是DexPathList的findClass方法:123456789101112public Class findClass(String name) &#123; for (Element element : dexElements) &#123; DexFile dex = element.dexFile; if (dex != null) &#123; Class clazz = dex.loadClassBinaryName(name, definingContext); if (clazz != null) &#123; return clazz; &#125; &#125; &#125; return null; &#125; 当然，Tinker也是采用的极其相似的方法，完成了dex替换(谁在这个数组前面谁就先得到加载)凯子哥提到由于在App冷启动的时候由于反射外加io操作，可能会比较卡甚至ANR,把这部分操作弄到子线程也是行的，一种可能的方案是从Instrumentation下手。 30 . 从已安装的app中提取apk鸿洋的博客中提到过如何使用bsdiff比较旧的apk和新的apk的差异1234context = context.getApplicationContext();ApplicationInfo applicationInfo = context.getApplicationInfo();String apkPath = applicationInfo.sourceDir;return apkPath; 在Android Studio 3.0后，直接在Device Explorer中查看data/app/com.example.appname，发现里面有个base.apk文件。几乎就是把原有的apk文件复制了一份。 ============================================================================= 9. Facebook出品的BUCK能够用于编译Android 项目，速度比较快。一个具有网络传输的FileExplorerMultiDex原理偏向native层面的内存占用分析Android进程框架：进程的启动创建、启动与调度流程Android进程框架：进程的启动创建、启动与调度流程","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"}]},{"title":"前端速查手册","date":"2017-11-25T23:26:29.000Z","path":"2017/11/25/2017-11-25-front-end-cook-book/","text":"每一个领域都有些不知道该放哪的零碎的点，这里开辟一个新的地方，作为前端杂乱知识的汇总。 常用网站cssmatic,一个可以用拖拽的方式生成css代码的神奇的网站不仅仅是font,还有很好的icon [TBS]腾讯浏览服务(Tencent Browsing Service, TBS)。网上很多人喷的微信浏览器慢就是这个handlebars一个html里面有两个id一样的元素没问题awesome css UI Design,Video link here Index html Relatedhtml标签中可以添加data-XXX标签用于把数据和ui块绑定。 p tag 里面能够放一个小的Strong tag1&lt;p&gt;You Know &lt;strong&gt;No&lt;/strong&gt; Mystery&lt;/p&gt; 亲测，这些tag不分大小的，不是说div就一定是最外面的parent1234&lt;p&gt; new css PlayGround &lt;div&gt;哈哈&lt;/div&gt;&lt;/p&gt; 什么在阻塞DOM？ css RelatedVanilla javaScript RelatedAjax(Asynchronous javaScript &amp; xml)，从命名上来看就是异步的 json(JavaScript Object notation),摆明着就是给js用的 In JavaScript these two are equivalent: object.Propertyobject[“Property”]; 对于POST请求，如果Request中明确设置了:&gt;xhr.setRequestHeader(“Content-type”,”application/x-www-form-urlencoded”); 后台会认为这是一个提交表单的请求，body就应该设置为’’What is the difference between form data and request payload? 跨域是一个比较大的知识点1about:1 Failed to load http://api.douban.com/v2/movie/top250: Response to preflight request doesn&apos;t pass access control check: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:8080&apos; is therefore not allowed access. 查了好久，原因是CORS(Control of Shared Resources)，通过ajax发起另一个domian(port)资源的请求默认是不安全的。主要是在js里面代码请求另一个网站(只要不满足host和port完全相同就不是同一个网站)，默认是被禁止的。chrome里面查看network的话，发现这条request确实发出去了，request header里面多了一个 Origin:http://localhost:8080显然这不是axios设置的，在看到这条header后，如果’/movie/top250’这个资源文件没有设置’Access-Control-Allow-Origin: http://localhost:8080&#39;的话，浏览器就算拿到了服务器的回复也不会允许被开发者获取。这是CORS做出的策略，也是前端开发常提到的跨域问题。解决方法：1.和服务器商量好CORS2.使用jsonp(跨域请求并不限制带src属性的tag，比如script img这些) 使用iframe跨域 CORS还是比较重要的东西，详解，据说会发两次请求,且只支持GET请求。cors的概念 search “原生javaScript跨域”、’jsonp跨域请求豆瓣250’ jsonp跨域获取豆瓣250接口，豆瓣能支持jsonp是因为豆瓣服务器响应了 http://api.douban.com/v2/movie/top250?callback=anything这个query,这个anything是我们自己网页里面script里面定义的方法，豆瓣会返回一个: anything({json})的数据回来，直接调用anything方法json【JavaScript Object Notation】MDN上的corz 将网页设置为允许 XMLHttpRequest 跨域访问123&lt;meta http-equiv=\"Access-Control-Allow-Origin\" content=\"*\"&gt;&lt;meta http-equiv=\"Access-Control-Allow-Origin\" content=\"http://www.1688hot.com:80\"&gt; 跨域的方法有很多，iframe是一种，iframe是在一个网页中展示另一个url页面资源的方式1&lt;iframe id=\"video\" width=\"420\" height=\"315\" src=\"https://www.baidu.com\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt; 然后在localhost起一个服务器预览，就能在页面中正常展示百度首页。 jsonp的解释 亲测，Flask里面给response添加Header: response.headers[‘Access-Control-Allow-Origin’] = ‘http://localhost:8080‘ 在8080端口的web页面发起请求就能成功 2.2 ajax跨域操作XMLHttpRequest cannot load http://localhost:5000/hello.No ‘Access-Control-Allow-Origin’ header is present on the requested resource.用Flask做后台，大概的代码这样","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"}]},{"title":"从DroidPlugin谈插件化开发","date":"2017-11-22T22:33:44.000Z","path":"2017/11/22/2017-11-22-from-Droid-plugin-onto-more/","text":"关于360团队出开源的DroidPlugin的一些记录 过程中发现了关于插件化，Hook系统方法的操作，摘录下来。 1. 从Context的本质说起其实也简单，就是ContextImpl，一个各种资源的容器。123Activity extends ContextThemeWrapperContextThemeWrapper extends ContextWrapperContextWrapper extends Context Activity作为一个天然的交互核心，能够以一个容器的身份（继承而来）轻易获取这些外部资源，也使得基于UI页面的开发变得简单。如果对于ActivityThread有所了解的话，就知道Activity的生命周期都是在这个类中完成的简单来说在ContextImpl中createActivityContext方法中使用new的方式创建了一个ContextImpl，整个流程就是ActivityThread在创建一个Activity后，给它不断赋值的过程。ContextImpl只是一个各种资源的容器（比如Resource,Display,PackageInfo,构造函数里面塞了一些，创建出来之后还给一些变量赋了值）。 Hook(使用Invokcation handler，将一个接口的调用原本的实现包揽下来，把原来的结果占为己有，同时添加一些自己要做的事情)修改getSystemService，添加自定义功能Hook掉AMS,在startActivity里面添加一些私货。getSystemService最终会追溯到SystemServiceRegistry.java。这里面用static block的方式初始化了各种service的cache. 1.1 ActivityThread做了很多事onSaveInstance是从ActivityThread的callCallActivityOnSaveInstanceState方法dispatch下来的。 2. Hook作为插件化的切入点给了开发者篡改系统api实现的通道比如Hook掉剪切板SystemService,比如在ActivityManagerService调用IPC操作时添加私货 3. Android多渠道打包的实现3.1 历史上曾经有效的方式，原始方法关于gradlew打包release之前，先Build -&gt; Generate Singed apk 创建一个新的keystore , 密码记住，keystore文件保存好。关于打包: 根据Android 多渠道打包梳理Gradle UMeng 多渠道打包 Android.manifest文件添加 123&lt;meta-data android:name=\"UMENG_CHANNEL\" android:value=\"$&#123;UMENG_CHANNEL_VALUE&#125;\" /&gt; app的build.gradle中添加 1234567891011121314151617181920212223242526272829303132android &#123; ... productFlavors &#123; xiaomi &#123; manifestPlaceholders = [UMENG_CHANNEL_VALUE: \"xiaomi\"] &#125; _360 &#123; manifestPlaceholders = [UMENG_CHANNEL_VALUE: \"_360\"] &#125; baidu &#123; manifestPlaceholders = [UMENG_CHANNEL_VALUE: \"baidu\"] &#125; wandoujia &#123; manifestPlaceholders = [UMENG_CHANNEL_VALUE: \"wandoujia\"] &#125; ... &#125; ...&#125;android &#123; productFlavors &#123; xiaomi &#123;&#125; _360 &#123;&#125; baidu &#123;&#125; wandoujia &#123;&#125; &#125; productFlavors.all &#123; flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name] &#125;&#125; 打包除此之外 assemble 还能和 Product Flavor 结合创建新的任务（assemble + Build Variants），Build Variants = Build Type + Product Flavor ./gradlew assembleDebug # 会打包 Debug apk./gradlew assembleRelease # 打包 Release apk./gradlew assembleWandoujiaRelease # 打包 wandoujia Release 版本，大小写不敏感./gradlew assembleWandoujia # 此命令会生成wandoujia渠道的Release和Debug版本 但是，20个渠道就要编译20次，耗时冗长。 3.2 在META-INF目录内添加空文件，可以不用重新签名应用。已失效比较出名的有python版本的，就是写了个空文件12345678for line in channels: target_channel = line.strip() target_apk = output_dir + apk_names[0] + \"-\" + target_channel+\"-\"+apk_names[2] + src_apk_extension shutil.copy(src_apk, target_apk) zipped = zipfile.ZipFile(target_apk, 'a', zipfile.ZIP_DEFLATED) empty_channel_file = \"META-INF/uuchannel_&#123;channel&#125;\".format(channel = target_channel) //所以渠道号简单来说就是往META-INF里写了一个\"uuchannel_xiaomi\"之类的文件 zipped.write(src_empty_file, empty_channel_file) zipped.close() 亲测 关于多渠道打包，由于新的签名机制的引入，上面的这种方法是会报错的。 $ adb install app-release_channel_xiaomi.apkFailed to install app-release_channel_xiaomi.apk: Failure [INSTALL_PARSE_FAILED_NO_CERTIFICATES: Failed to collect certificates from /data/app/vmdl185799136.tmp/base.apk: META-INF/CERT.SF indicates /data/app/vmdl185799136.tmp/base.apk is signed using APK Signature Scheme v2, but no such signature was found. Signature stripped?] 美团的技术团队给出了科普， 新的签名方案会在ZIP文件格式的 Central Directory 区块所在文件位置的前面添加一个APK Signing Block区块，下面按照ZIP文件的格式来分析新应用签名方案签名后的APK包。整个APK（ZIP文件格式）会被分为以下四个区块：Contents of ZIP entries（from offset 0 until the start of APK Signing Block）APK Signing BlockZIP Central DirectoryZIP End of Central Directory新应用签名方案的签名信息会被保存在区块2（APK Signing Block）中， 而区块1（Contents of ZIP entries）、区块3（ZIP Central Directory）、区块4（ZIP End of Central Directory）是受保护的，在签名后任何对区块1、3、4的修改都逃不过新的应用签名方案的检查。 3.3 还有就是往apk(zip)文件尾部添加comment End of central directory recordOffset Bytes Description 译0 4 End of central directory signature = 0x06054b50 核心目录结束标记（0x06054b50）4 2 Number of this disk 当前磁盘编号6 2 Disk where central directory starts 核心目录开始位置的磁盘编号8 2 Number of central directory records on this disk 该磁盘上所记录的核心目录数量10 2 Total number of central directory records 该磁盘上所记录的核心目录数量12 4 Size of central directory (bytes) 核心目录的大小16 4 Offset of start of central directory, relative to start of archive 核心目录开始位置相对于archive开始的位移20 2 Comment length (n) 注释长度 (n)22 n Comment 注释内容 apk 默认情况下没有comment，所以 comment length的short 两个字节为 0，我们需要把这个值修改为我们的comment的长度，然后把comment追加到后边即可。Android N 中提到了 APK Signature Scheme v2，这种新引入的签名机制，会对整个文件的每个字节都会做校验，包括 comment 区域。所以到时候如果app使用新版本的签名工具的时候，如果启用 scheme v2，那么这个机制则不能工作。目前看代码，是可以disable v2 的。 虽然目前暂时还是可以disable APK Signature Scheme v2的。12345signingConfigs &#123; release &#123; v2SigningEnabled false &#125;&#125; 3.3 当前比较合适的方案是使用美团的walleSignature Scheme v2的出现让目前美团的walle成为公开已知的多渠道打包的最好选择还有一个开源的gradle plugin据说也支持V2签名模式 美团的walle接入指南,原理都在新一代开源Android渠道包生成工具Walle 有人给出了Android多渠道打包的进化史，很有意思 =-============================-============================-============================-========================= 为什么 Android 要采用 Binder 作为 IPC 机制？ 传统的进程间通信方式有管道，消息队列，共享内存等，其中管道，消息队列采用存储-转发方式，即数据先从发送方缓存区拷贝到内核开辟的缓存区中，然后再从内核缓存区拷贝到接收方缓存区，至少有两次拷贝过程。共享内存虽然无需拷贝，但控制复杂，难以使用。socket作为一款通用接口，其传输效率低，开销大，主要用在跨网络的进程间通信和本机上进程间的低速通信。Binder通过内存映射的方式，使数据只需要在内存进行一次读写过程。内存映射，简而言之就是将用户空间的一段内存区域映射到内核空间，映射成功后，用户对这段内存区域的修改可以直接反映到内核空间，相反，内核空间对这段区域的修改也直接反映用户空间。那么对于内核空间&lt;—-&gt;用户空间两者之间需要大量数据传输等操作的话效率是非常高的。 听说你Binder机制学的不错，来面试下这几个问题 Client发起IPC请求，是阻塞的吗？ adb getEvent sendEventinput tap x yinput touchescreeninput text helloworldinput keyevent Xposed的介绍与入门Xposed的原理与Multidex及动态加载问题 组件化、插件化组件化、插件化的前提就是解耦 在Android中执行shell指令滴滴的virtualApp。 目前看来就是用android.content.pm.PackageParse去解析一个apk文件，封装成一个LoadedPlugin对象（Cache下来），后续调用apk中描述的功能进行操作。所以应该还是在host的进程中跑的。由此联系到PackageInstaller 原理简述 多渠道的话这样的命令要跑多次使用walle就好了。 project 的 build.gradle 添加: 1234567891011121314151617181920212223242526272829303132333435363738dependencies &#123; classpath 'com.meituan.android.walle:plugin:1.0.3'&#125;app/build.gradle 添加：apply plugin: 'walle'dependencies &#123; ... compile 'com.meituan.android.walle:library:1.0.3'&#125;在工程目录下创建 channel 文件：meituan # 美团samsungapps #三星hiapkanzhixiaomi # 小米91comgfanappchinanduoa3gcnmumayi10086comwostore189storelenovommhicloudmeizuwandou# Google Play# googleplay# 百度baidu## 360360cn## 应用宝myapp 编译全部渠道 gradlew clean assembleReleaseChannelsgradlew clean assembleReleaseChannels -PchannelList=huawei // 只编译华为的gradlew clean assembleReleaseChannels -PchannelList=huawei,xiaomi // 小米跟华为的 以上亲测通过，原本装的jdk 9，一直报错。在java home里换成jdk 1.8后，就没什么问题了。有问题gradlew的时候后面跟上–stacktrace，出错了粘贴到google里就好了。 在java代码中获取渠道信息 String channel = WalleChannelReader.getChannel(this.getApplicationContext()); 关于美团的热修复方案，亲测可用，生成的patch.jar文件大小5.0kB(改了个方法)美团的热修复叫Robust 按照官方wiki在build.gradle中添加需要的依赖。还有一个robust.xml文件，把packageName和patchPackageName改成自己的，看下别的配置，注释都很清楚 先打release包，记得开progurad。gradlew clean assembleRelease –stacktrace 在activity里面放一个button,在onClick的时候loadPatch.记得PatchManipulateImpl里面写的setPatchesImfoImplClassFullName要和roubust.xml里面写的一样 在activity里面修改的代码添加@mofidy注解，@Add作为新加的方法的注解 开始打补丁包.在gradle中注释掉apply plugin: ‘robust’，开启apply plugin: ‘auto-patch-plugin’。把app/build/outputs/mappings/mapping.txt文件和app/build/outputs/robust/methodsMap.robust这两个文件粘贴到app/robust文件夹中。重新打release包：gradlew clean assembleRelease –stacktrace。报错是正常的。 在app/build/outputs/robust文件夹中找到patch.jar文件。 adb push app/build/outputs/robust/patch.jar /sdcard/robust/patch.jar 进Activity，点击那个loadPath的按钮，就是去刚才adb push的路径去加载这个patch（当然生产环境应该是搭建https服务了）。 参考分析DroidPlugin，深入理解插件化框架逆向大全Android Hook技术防范漫谈爱奇艺组件化探索之原理篇Atlas容器框架","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"插件化","slug":"插件化","permalink":"https://haldir65.github.io/tags/插件化/"}]},{"title":"集成Tinker的一些记录","date":"2017-11-18T17:25:29.000Z","path":"2017/11/18/2017-11-18-integrating-tinker/","text":"关于Android Application集成Tinker的一次记录。 1. 首先从官方Demo项目开始Tinker是2016年开源的，先直接clone下来。我的环境： Android Studio 3.0 稳定版gradle版本：distributionUrl=https\\://services.gradle.org/distributions/gradle-4.1-all.zipgradle插件版本: classpath ‘com.android.tools.build:gradle:3.0.0’TINKER_VERSION=1.9.1compileSdkVersion 26buildToolsVersion ‘26.0.2’ Android Studio 3.0 因为刚出来，所以遇到了一些问题，不过好在Google一下或者在issue里面查一下，都能找到合适的解答 官方Demo先把官方Demo按照普通App的流程安装上来。这时候在app/build/bakApk/目录下就会出现“app-debug-1118-15-50-07.apk”这样的文件，其实是复制了一份当前的apk 然后，在MainActivity代码中，把原本注释掉的一行Log取消注释，运行如下命令 gradlew tinkerPatchDebug或者在Andriod Studio的Gradle tab里面找到这个task，运行一下 打releasePatch其实也差不多 gradlew tinkerRelease 一切顺利的话，在app/build/outputs/apk/tinkerPatch/debug文件夹下就会看到一些新生成的文件，例如“app/build/outputs/apk/tinkerPatch/debug/patch_signed.apk”，“app/build/outputs/apk/tinkerPatch/debug/patch_signed_7zip.apk”等等，具体每个文件是干嘛的文档上都说了。这时候通过adb push命令把这个7zip文件上传到手机根目录下 adb push ./app/build/outputs/tinkerPatch/debug/patch_signed_7zip.apk /storage/sdcard0/patch_signed_7zip.apk或者在Android Studio 3.0右下角有一个Device File Explorer,把这个文件上传到手机里 上面那个路径不一定准，总之需要和这里面的路径一样，所以我在模拟器里面是sdcard/emulated/0这个目录下1TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), Environment.getExternalStorageDirectory().getAbsolutePath() + \"/patch_signed_7zip.apk\"); 上传完毕之后，在当前页面点击Button，点击事件调用到上面这一行代码.一切Ok的话（运气好的话），会出现Toast,其实这个Toast是在SampleResultService（一个IntentService）里面写的，也就是说Patch打上的话，开发者可以自定义一些UI事件。 这时候再Kill Porcess,据说锁屏也行？重新启动后，刚才取消注释的那一行代码就在logcat里面出现了。 到此，在没有重新打包的情况下，热修复完成。 2. 已有的项目改造照着改成这样在Gradle.properties里面添加 TINKER_VERSION = 1.9.1 //只是为了集中管理TINKER_ID = 1.0 //这个不添加会报错 project的build.gradle中添加 classpath “com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}” app的build.gradle中需要新增很多东西，建议直接复制过来。需要改的地方就是12345678910ext &#123; tinkerOldApkPath = &quot;$&#123;bakPath&#125;/app-debug-1118-15-50-07.apk&quot; // 找到当前app/build/bakApk/目录下的apk文件，把名字改成自己和当前的文件一样的&#125;ignoreWarning = true //默认是false，不改经常编译报错implementation(&quot;com.tencent.tinker:tinker-android-lib:$&#123;TINKER_VERSION&#125;&quot;) &#123; changing = true &#125;provided(&quot;com.tencent.tinker:tinker-android-anno:$&#123;TINKER_VERSION&#125;&quot;)annotationProcessor(&quot;com.tencent.tinker:tinker-android-anno:$&#123;TINKER_VERSION&#125;&quot;) 接下来是Application，如果自己继承了android.app.Application的话，得改一下12345678910111213141516171819202122232425262728293031323334353637383940414243444546//原来public MyApplication extends Application&#123;&#125;//现在@SuppressWarnings(\"unused\")@DefaultLifeCycle(application = \"com.包名.SomeName\", flags = ShareConstants.TINKER_ENABLE_ALL, loadVerifyFlag = false)public class AppLike extends DefaultApplicationLike &#123; static Context context; public AppLike(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag, long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent) &#123; super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent); &#125; /** * install multiDex before install tinker * so we don't need to put the tinker lib classes in the main dex * * @param base */ @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) @Override public void onBaseContextAttached(Context base) &#123; super.onBaseContextAttached(base); //you must install multiDex whatever tinker is installed! MultiDex.install(base); AppLike.context = getApplication(); //初始化Tinker TinkerInstaller.install(this); &#125; @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) public void registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks callback) &#123; getApplication().registerActivityLifecycleCallbacks(callback); &#125; public static Context getContext() &#123; return context; &#125;&#125;Mainfest里面要改成上面那个“com.包名.SomeName” 接下来按照之前的步骤就Ok了。 3. Configuration以上只是简单的把Demo跑通，接下里需要看下Tinker提供的定制项 ======================================================================= 4. 常见问题Q: 我只不过改了一个Toast的文案，为毛生成的patch_signed_7zip.apk文件这么大()？A: 看下tinkerPatch文件夹下面的log.txt文件（建议用Notepad打开），里面一大堆“Found add resource: res/drawable-hdpi-v4/abc_list_pressed_holo_light.9.png”这样的类似的出现，具体原因跟aapt有关，好像可以设置detect resource change （大概就这意思）为false，这样就不会那么大了。 Q: Tinker-Patch把补丁文件放在什么位置A: 因为接收补丁的代码就在TinkerInstaller.onReceiveUpgradePatch这一段了。在UpgradePatchRetry.java中，有这么一段：tempPatchFile = new File(SharePatchFileUtil.getPatchTempDirectory(context), TEMP_PATCH_NAME); （/data/data/com.example.myApp/data/tinker_temp/temp.apk）。当然还有其他的，总之就是放在当前应用data文件夹下面的tinker或者tinker_temp文件夹下。 Q: TinkerPatch和Tinker什么关系A：TinkerPatch的SDK里面包含了Tinker必要的功能，开发者只需要添加TinkerPatch这一条依赖，也不需要去继承ApplicationLike这些东西了，开发者不用自己开一个下载服务去下发patch_signed_7zip.apk这个文件了，onReceiveUpgradePatch这些事也做好了。确实是接入成本最低的方案，搭建后台假如交由自己公司的API团队处理，起码得好几天，还得耽误产品正常的开发节奏。而TinkerPatch给出的报价是399元/月。短期来看，显然前者的成本要高出不少，还得顾虑自家团队维护的代价。算一笔经济账的话，显然企业倾向于花钱买稳定服务。对于个人来讲，目前有免费版可以使用，估计也是为了给测试Demo使用的，想玩简单版的话可以试试。 Q: 如何更换Dex的A: 引用Android热补丁之Tinker原理解析中的话：“由于Tinker的方案是基于Multidex实现的修改dexElements的顺序实现的，所以最终还是要修改classLoder中dexPathList中dexElements的顺序。Android中有两种ClassLoader用于加载dex文件，BootClassLoader、PathClassLoader和DexClassLoader都是继承自BaseDexClassLoader。最终在DexPathList的findClass中遍历dexElements，谁在前面用谁。”。所以其实就是根据下发的补丁文件，把dex文件给修改了，这一点跟MultiDex很像。 Q: Dex文件格式A： The Dex File Format。值得一提的是，这篇文章提到了文件头，dex的头是 6465780A 30333800dex038 这个是hexoDecimal，十六进制2个数字（字母）代表一个byte(2*8bits = 2 bytes)，按照二进制0101的方式来看的话就是： 6465（0110 0100 0110 0101） 780A(0111 1000 0000 1010)。关于dex format的更多的分析 Q: broken.apk + patch_signed_7zip = fixed apk的过程A: 在UpgradePatch.tryPath -&gt; DexDiffPatchInternal.tryRecoverDexFiles -&gt; dexOptimizeDexFiles -&gt; TinkerDexOptimizer.optimizeAll -&gt;OptimizeWorker.run -&gt; DexFile.loadDex(DexFile是dalvik.system包下的)。 Q： 把Tinker导入Intelij中A： Intelij中open project -&gt; 选择 tinker-build/tinker-build.iml 即可。顺带着其他的mudule都能查看了。最好在tinker-sample-android/app/build.gradle文件中注释掉这两句话 // annotationProcessor(“com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}”) { changing = true }// compileOnly(“com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}”) { changing = true } Q: 关于BSDiffA：windows下可以直接下载对应的exe ,cmd中执行 bsdiff old.apk new.apk old-to-new.patchbspatch old.apk new2.apk old-to-new.patch Q: patch进程是如何和业务进程交互的A： tinker-android/tinker-android-lib/src/main/AndroidManifest.xml中明确指明了打补丁是在一个youpackagename:patch的进程中去操作的。这样做也是为了减少对于主业务的影响。跨进程交互并没有写aidl，其实只是起了一个IntentService通知主业务进程。 =======================================================================好的学习资料Tinker学习计划(2)-Tinker的原理一Android 基于gradle插件实现多渠道打包加快apk的构建速度，如何把编译时间从130秒降到17秒fastdexmultiple-apk-generator 5. 源码解析至少我现在看到7个包： com.tencent.tinker:aosp-dexutils:1.91.@jarcom.tencent.tinker:bsdiff-util:1.91.@jarcom.tencent.tinker:tinker-android-anno:1.91.@jarcom.tencent.tinker:tinker-android-lib:1.91.@jarcom.tencent.tinker:tinker-android-loader:1.91.@jarcom.tencent.tinker:tinker-commons:1.91.@jarcom.tencent.tinker:tinker-ziputils:1.91.@jar 分的这么散估计也是希望能够好扩展吧。换dex文件的关键方法在DexPathList.findClass这个方法里面。参考 网上关于源码解析的文章已经很多，有时间看看，应该不难。 看一下官方Tinker项目中的文件夹，有一个tinker-build，里面有两个python文件，这就很有意思了。再看看tinker-patch-gradle-plugin，里面一大堆groovy文件，所以看懂这个对于gradle插件开发是有好处的。 目前在1.9.1版本里面好像看到了一个tinkerFastCrashProtect，看来也是跟风天猫快速修复启动保护那一套。关于Tinker-Patch这个外包给第三方的服务，纯属好奇就去看了下url到底长什么样。在TinkerClientAPI里面有这么一段，其实跟Tinker本身庞大的架构比起来，已经算不上什么了。123456789Uri.Builder urlBuilder = Uri.parse(this.host).buildUpon(); // \"http://q.tinkerpatch.com\" if (clientAPI.debug) &#123; urlBuilder.appendPath(\"dev\"); &#125; final String url = urlBuilder.appendPath(this.appKey) .appendPath(this.appVersion) .appendQueryParameter(\"d\", versionUtils.id()) .appendQueryParameter(\"v\", String.valueOf(System.currentTimeMillis())) .build().toString(); 除此之外，为了能够在测试环境验证补丁，还提供了一个小工具 很感谢鹅厂能够将Tinker这样的工具开源出来造福广大开发者，抛开技术上的实力不说，能够一直积极维护也是一件了不起的事情。 参考 微信热修复tinker及tinker-server快速接入 TinkerPatch，其实就是帮你把下发“patch_signed_7zip.apk”这个文件的活干了，还给了非常直观的报表，收费也是合情合理。 Android热补丁之Tinker原理解析，这篇文章基本将整个流程都讲清楚了 热更新Tinker研究（三）：加载补丁 微信Tinker的一切都在这里，包括源码 Enabling Android Teams: Dex Ed by Jesse WilsonJesse Wilson谈Dex文件的结构，可惜视频清晰度垃圾","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"热修复","slug":"热修复","permalink":"https://haldir65.github.io/tags/热修复/"}]},{"title":"css操作手册","date":"2017-10-29T22:46:52.000Z","path":"2017/10/29/2017-10-29-pure-css/","text":"css使用记录及速查手册 1. 基本概念css基本语法12345SELECTOR DECLARATION#page-header &#123; font-szie : 10px;&#125;/*对了，我找了半天，发现这个page-header和大括号之间有没有空格无所谓的*/#page-header&#123; font-szie : 10px;&#125;/*也就是这么写也无所谓，反正最终部署都会删掉空格*/ 例如1234.better&#123; background-color: gray; border: none !important;&#125; 类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。 css中的长度单位有px,em,以及rem（ ios：6.1系统以上都支持. android：2.1系统以上都支持.），当然还有百分比。1&lt;img src=\"https://avatars0.githubusercontent.com/u/1?v=4\" width=\"70\" height=\"70\"&gt; 不写单位就默认是px了 2. 引用方式html中引用css有三种方式: InLine Styling(内联样式) 只在非常特殊的情况下才使用 123&lt;div&gt; &lt;p id='content' style=\"position: absolute; top:0; left:0; width: 100%\"&gt;Inline style are bad&lt;/p&gt;&lt;/div&gt; Embedded style sheets(嵌入样式) 在当前页面中添加一个样式，不能复用 1234567891011121314151617181920&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Embedded style&lt;/title&gt; &lt;style&gt; p&#123; font-size : 10px; color: red; &#125; .welcome&#123; color: blue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt; now every p tag in this page will have my style&lt;/p&gt; &lt;p class=\"welcome\"&gt; this one will have blue text color&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; External style sheets(外部样式) 12345678910&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Embedded style&lt;/title&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/syntax.css\"&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt; now every p tag in this page will have my style&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 注意上面那个rel表示relation. 3. 选择器及优先级，各种Selector的写法派生选择器，两种不同的效果 3.1 基于类的，很多时候看到中间有一个空格，意思就是在前者的基础上，再加上一些限定条件进行查找1&lt;td class=\"fancy\"&gt; 1234td.fancy &#123;color: #f60;background: #666;&#125; 所有class是fancy的td将是带有灰色背景的橙色。 1234&lt;div class='fancy'&gt; &lt;td&gt; &lt;/td&gt;&lt;/div&gt; 1234.fancy td &#123; color: #f60; background: #666;&#125; 所有class是fancy的元素，里面的td都将是带有灰色背景的橙色。 3.2 基于id的12345#sidebar p &#123; font-style: italic; text-align: right; margin-top: 0.5em;&#125; 所有id是sidebar的标签，内部的p段落全部应用上述样式 123456789#sidebar &#123; border: 1px dotted #000; padding: 10px;&#125;div #sidebar &#123; border: 1px dotted #000; padding: 10px;&#125; 因为id 属性只能在每个 HTML 文档中出现一次，所以上面两个是一样的，后者指的是该元素所属的父标签。css层叠优先级: IDs、class 选择器优先于element选择器比起class而言id优先级更高!important具有最高的优先级，尽量不要使用简单说!import &gt; id &gt; class &gt; 普通的tag 关于important，能不用就不要用。有人开玩笑说，职业生涯中不要使用超过5次。 3.3 css Conflict假如一个css文件里面出现了1234567.span&#123; color : blue&#125;.span&#123; color: red&#125; 结果是底部红色的赢了，原因是css是Cascade的，从上往下读文件。前提是两个选择器一模一样1234567body span&#123; color : blue&#125;.span&#123; color: red&#125; 这种情况还是蓝色的赢 3.4 css的继承在一个页面中，父tag定义的样式是会传递给子tag的，如果子tag没有复写掉，那么就会propogate整个父tag的范围例如1234567891011body &#123; color : red;&#125;div &#123; color : yellow&#125;p &#123; color: blue&#125; 上面body的红色字体颜色会传递给当前页面所有tag的字体中，但div和p各自定义了自己的字体颜色，所以等于复写了。需要注意的是，这个时候有些tag，例如a tag是会获得浏览器默认属性的1234a &#123; color: blue; text-decoration: underline;&#125; 类似于浏览器默认给你加上了这么一行css。browser 的default browser style,如果什么css都不加的话，就能看出来了 3.5 Targeting Multipe Elements12345678910111213141516171819202122232425262728p&#123; color: red; font-size: 14px; font-weight: bold; font-family: Arial;&#125;span&#123; color: red; font-size: 14px; font-weight: bold; font-family: Arial;&#125;a&#123; color: red; font-size: 14px; font-weight: bold; font-family: Arial;&#125;/*还不如写成这样*/p, span, a&#123; color: red; font-size: 14px; font-weight: bold; font-family: Arial;&#125; 3.6 Descendant Selector（后代选择器）123456789/*这个意思就是，把content这个class里面的所有p tag的字体颜色都改成红色*/#content p&#123; color: red;&#125;/*这个更进一步，一层层嵌套下去，指定的p tag才会获得属性*/#content #child-content p&#123; color: red;&#125; 这么嵌套多少层其实没关系，实践中，不要嵌套太多层，不方便维护 3.7 Child Selector（子选择器）碰到下面这种html，如果只想给Direct Child赋属性，可以使用child selector12345678&lt;div class=\"content\"&gt; &lt;p&gt;Direct child&lt;/p&gt; &lt;p&gt;Direct child&lt;/p&gt; &lt;p&gt;Direct child&lt;/p&gt; &lt;div&gt; &lt;p&gt;Indirect child&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 12345/*这个向右的箭头就表示child selector*/#content &gt; p&#123; color: pink;&#125;/*这个时候不会对Indirect child生效*/ 这种方式能够在不影响其他Descendant的情况下设置属性 3.8 Adjacent Selector（相邻选择器）给一个tag之后下一个tag赋属性12345678910111213141516171819202122232425&lt;div id='all-posts'&gt; &lt;h2&gt;First Article&lt;/h2&gt; &lt;p&gt;Published by Smith&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;h2&gt;Second Article&lt;/h2&gt; &lt;p&gt;Published by John&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;h2&gt;Third Article&lt;/h2&gt; &lt;p&gt;Published by Ted&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt; &lt;p&gt;something specific about the article content&lt;/p&gt;&lt;/div&gt; 现在想要把所有紧跟着h2标签后面的那个p tag装饰下123.all-posts h2 + p&#123; color: green;&#125; Adjacent Selector必须是follow directly after first element 3.8 Attribute Selector（属性选择器）首先明确什么是attribute，href,class,id,rel,type,title这些全都是Attribute。1234&lt;span&gt;Span without an class Attribute&lt;/span&gt;&lt;span class=\"Deck\"&gt;&lt;/span&gt;&lt;span class=\"Deck\"&gt;&lt;/span&gt;&lt;span class=\"Deck\"&gt;&lt;/span&gt; 1234span[class]&#123; color: purple;&#125;/*这样就能选中所有上面带有class属性的tag*/ 同样的，只要用一个方括号括起来的选择器，就能选中带有特定属性的标签当然还能更具体一点，例如123&lt;a href='#'&gt;&lt;/a&gt;&lt;a href='http://www.google.com' title='Google'&gt;&lt;/a&gt;&lt;a href='http://www.baidu.com' title='Baidu'&gt;&lt;/a&gt; 1234a[title='google']&#123; color : red;&#125;/*这样只有上面的Google标签才变成红色*/ 还有更高级的Pattern Matching1234&lt;span&gt;Span without an class Attribute&lt;/span&gt;&lt;span class=\"deck halls\"&gt;&lt;/span&gt;&lt;span class=\"deck tails\"&gt;&lt;/span&gt;&lt;span class=\"deck\"&gt;&lt;/span&gt; 1234span[class~='deck']&#123; color: purple;&#125;/*这样上面三个都会变成紫色,或者~符号的意思是只要属性值里面包含了这个deck单词就算*/ 12&lt;a href=\"http://www.baidu.com\"&gt;web page&lt;/a&gt;&lt;a href=\"something.pdf\"&gt;View as pdf&lt;/a&gt; 12345678span[href$='pdf']&#123; color: purple;&#125;/*这个美元符号的意思是任何以pdf结尾的href，如果要算上以xx开头的话，这样*/span[href^='http']&#123; color: yellow;&#125; 3.9 Pseudo selector1&lt;a class=\"site\" href=\"http://www.baidu.com\"&gt;站点&lt;/a&gt; 123456789101112a:hover&#123; text-weight: bold;&#125;a:visited&#123; color: red;&#125;a:active&#123; color: yellow;&#125;/*active的状态是指鼠标点上去，但还没有跳转页面那一瞬间。其实你也可以鼠标点上去不放开，就是active了*/ 3.10还有first child等例如1234567&lt;acticle&gt; &lt;p&gt;First line,or first child&lt;/p&gt; &lt;p&gt;center and other stuffs&lt;/p&gt; &lt;p&gt;center and other stuffs&lt;/p&gt; &lt;p&gt;center and other stuffs&lt;/p&gt; &lt;p&gt;this is the last child&lt;/p&gt;&lt;/article&gt; 1234567article p:first-child&#123; color :blue;&#125;article p:last-child&#123; color: green;&#125; 关键词就是first-child和last-child这么简单还有first-of-type,last-of-type 4. 常用属性顺便说一下，mrakDown里面是能直接插入img标签的 background-size : cover;(比如说你要拿一张很大的图片作为body的background，但图片的大小已经超出了浏览器的大小，这时候就用cover缩放一下，就能填满了) box-sizing 如果两个element都有margin，挤在一起的话，最终的margin不是两个元素之间的margin相加1234&lt;div&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt;&lt;/div&gt; 123span&#123; margin: 0px 10px&#125; 因为这俩都是inline-elements，最终生成的margin不是10+10=20px ,而是10px flex box可以实现有效的居中。外部容器添加display:flex属性，子元素可以设置自己的order(越小越靠前/左，负数最小)。父容器可以设置的属性包括：123456789101112flex-directionflex-wrapflex-flowjustify-contentalign-itemsalign-content/*子元素可以设置的属性包括:*/orderalign-selfflex-growflex-shrinkflex-basis 更多参考MDN 5. blcok，inline和inline-block display可能的值包括inline,block,inline-block.参考MDN网站，inline的说法是相较block来说的，就是默认不会另起一行： An inline element does not start on a new line and only takes up as much width as necessary. block-level elements(块级元素)和inline elements(内联元素)；block元素可以包含block元素和inline元素；但inline元素只能包含inline元素。要注意的是这个是个大概的说法，每个特定的元素能包含的元素也是特定的，所以具体到个别元素上，这条规律是不适用的。比如 P 元素，只能包含inline元素，而不能包含block元素。 display:blockblock元素会独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素宽度。 block元素可以设置width,height属性。块级元素即使设置了宽度,仍然是独占一行。 block元素可以设置margin和padding属性。 display:inlineinline元素不会独占一行，多个相邻的行内元素会排列在同一行里，直到一行排列不下，才会新换一行，其宽度随元素的内容而变化。 inline元素设置width,height属性无效。 inline元素的margin和padding属性，水平方向的padding-left, padding-right, margin-left, margin-right都产生边距效果；但竖直方向的padding-top, padding-bottom, margin-top, margin-bottom不会产生边距效果。 display:inline-block简单来说就是将对象呈现为inline对象，但是对象的内容作为block对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个link（a元素）inline-block属性值，使其既具有block的宽度高度特性又具有inline的同行特性。 5.css的简写多的不敢想,short-hand下面这三个是一个意思，也就是说css是按照顺时针上，右，下，左的顺序来的1234567891011121314151617.content&#123; margin 10px 20px 10px 20px;&#125;.content &#123; margin 10px 20px;&#125;.content&#123; margin-top: 10px; margin-right: 20px; margin-bottom: 10px; margin-left: 20px;&#125;h2&#123; color: #ffffff #0000000 ; /* 这个意思是平时是白色，鼠标移上去就变成黑色 */&#125; 除了margin以外,padding也是。至于那种倒角，例如border-radius,则是左上角,右上角，右下角，左下角这样的顺序12345678910111213141516171819.round_corner&#123; border-radius: 10px;&#125;.round_corner&#123; border-radius: 10px 20px; /* 左上角，右下角10px,右上角和左下角20px*/&#125;.round_corner&#123; border-radius: 10px 20px 30px 40px;&#125;.circle&#123; width: 100px; height:100px; border-radius: 50px; /* 糊一个圆*/&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374.back&#123; background-color: #606060; background-image: url(#) ; background-repeat: no-repeat; /*repeat的意思是图片填不满容器的话，从左到右，从上到下重复一遍 */ background-position: center; /*将图片居中摆放在容器中，还有bottom-center，bottom-right等*/ background-position: 10px 20px; /*距离左边10px,顶部20px*/ background-size: 200px; /*图片的宽高，自动缩放*/&#125;.simplyfy&#123; background: url (#) no-repeat top center; background-color: #606060;&#125;/*这是一种简写的方式,注意backgroundColor和background最好分开写*/.multiple_background&#123; background-image: url('url1'),url('url2'); /*多层背景，url1叠在最顶层，可以想象是z轴最上方，url2在下面，中间一定要有一个逗号。*/ background-repeat: no-repeat,no-repeat; /*中间有一个逗号，no-repeat属性分别应用在url1和url2上。由于上面这俩一样的，所以只写一个也行*/ background-position: center,top left; background-size: 300px,100%; /*都是一样的，分别一一对应*/&#125;/*画三个圆*/#circle&#123; width: 400px; height: 400px; position: absolute; background: rgb(200, 200, 100); border-radius: 200px; top: 50px; left: 50px; opacity: 0; /* 这个是透明度，0表示完全透明*/ text-align: center; background: rgba(200, 200, 100, 0.5); /*注意opacity会影响div里面text的透明 度，rgba不会影响*/&#125;#circle-2&#123; width: 400px; height: 400px; position: absolute; background: rgb(200, 100, 200); border-radius: 200px; top: 250px; left: 150px;&#125;#circle-3&#123; width: 400px; height: 400px; position: absolute; border-radius: 200px; top: 50px; left: 250px; background: #aadddd; background: linear-gradient(top,#aadddd,0%,#77aaaa,100%); /*Gradient在有些浏览器上不支持，毕竟是比较新的属性，这时候就会fallback到background上，所以支持的话就有渐变色，不支持的话就恢复到设定的颜色，这也就是一个属性写两遍的原因*/ /*但是上面两行在chrome里面不会出现渐变色,需要vender-prefix*/ background: -moz-linear-gradient(top,#aadddd,0%,#77aaaa,100%); background: -webkit-linear-gradient(top,#aadddd,0%,#77aaaa,100%); background: linear-gradient(top,#aadddd,0%,#77aaaa,100%); /*这个top的意思是从上开始渐变，写bottom也行，从下往上*/&#125;.shadow_box&#123; box-shadow: 2px 2px 4px 2px rgba(40,40,40,0.6); /*分别是阴影距离元素的右侧的距离和距离底部的距离以及阴影需要多深，越大越深，最后是阴影拓展的距离.外加阴影的颜色*/&#125; cssmatic这个网站可以使用拖拽的方式生成shadow的css文件======================================sass============================= 5. css positioning首先是float,Float 可用于实现文字环绕图片(加在图片的属性上)the float element no longer take any height in document flow1234&lt;div class=\"wrapper\"&gt; &lt;img src=\"picture.jpg\" width=\"300px\"&gt;&lt;/img&gt; &lt;p&gt;这段文字默认会另起一行在图片下面&lt;/p&gt;&lt;/div&gt; 12345678910111213141516171819.wrapper&#123; background: #ffffff; max-width: 960px; margin: 0 auto; padding: 20px;&#125;/*margin auto 让这个wrapper在其父容器中横向居中显示*/img&#123; float: left; margin: 10px;&#125;/*float: left的意思是让这个图片居左显示，同时，旁边的text会自动调整，不至于被图片挡住。就能实现图文混排的效果*//*更具体一点的意思就是，float属性的标签，在html计算是否需要换行的时候是不会考虑这个标签的，同时，将根据float:left或者right摆在父容器的左边或者右边。感觉就像是在z轴方向提升了一个层级。*//*但如果每一个标签都被提升到一个z层级,比如两个div都有float:left属性，后面一个会排在前面一个的右边*/ 12345678&lt;div id='container'&gt;&lt;div class=\"left_float\"&gt; &lt;p&gt;First Tag&lt;/p&gt;&lt;/div&gt;&lt;div class=\"left_float\"&gt; &lt;p&gt;Second&lt;/p&gt;&lt;/div&gt;&lt;/div&gt; 1234567891011.left_float&#123; float: left; margin: 10px&#125;/*float有一点好处就是浏览器不会让文字被float的元素遮挡住，所以会挪到下面去，但文字标签的背景会延伸到float元素的下面*/.clear_float_for_text&#123; padding: 10px; background: #ddd; clear: both;&#125;/*clear both的意思是让文字的左右和上下背景都不会延伸到float元素的下面*/ float的元素和下面的文字之间使用margin无效，一般在text前面加一个空的或者在float的父元素加上12345.folat_wrapper:after&#123; content: ''; display: block; clear: both;&#125; 这种方式更好，after被称为伪元素，就是在父容器后面插入一个空的元素 css3有一个transition效果，就是操作任何属性变换都设定一个事件，达到一种类似于动画演进的效果 list-style-type : none会把li标签前面的方块干掉 text-align: center;不仅会把文字居中，还会把这个容器中的img也居中 CSS Positioningposition : absolute意味着remove it from normal document flow;position:relative意味着相对原本应该的位置移动，但依然占据document flow;position:fixed意味着 absolute 是最棘手的position值。 absolute 与 fixed 的表现类似，但是它不是相对于视窗而是相对于最近的“positioned”祖先元素。如果绝对定位（position属性的值为absolute）的元素没有“positioned”祖先元素，那么它是相对于文档的 body 元素，并且它会随着页面滚动而移动。记住一个“positioned”元素是指 position 值不是 static 的元素。 其实就是元素的postion:absolute之后，就可以添加top,right,bottom,left这些属性了。但是 这些属性不是简单的说就直接相对于其parent元素的。而是相对于最近一个position不是static的父元素（static是default，所以如果直系父元素不写的话，子元素会忽略 top, bottom, left, right 或者 z-index 声明）。如果真的一个个往上找都没有的话，直接相对于body起效。 Definitely will center a text in div , both horizontally and verticallyCSS center text (horizontally and vertically) inside a div block 12345&lt;div id=\"container\"&gt; &lt;div id=\"content\"&gt; Line 1 &lt;/div&gt;&lt;/div&gt; 1234567891011(function() &#123; var toggle = true; setInterval(function() &#123; if (toggle) &#123; $(\"#content\").html(\"Line 1\"); &#125; else &#123; $(\"#content\").html(\"&lt;div&gt;Line 1&lt;/div&gt;&lt;div&gt;Line 2&lt;/div&gt;\"); &#125; toggle = !toggle; &#125;, 1300);&#125;()); 1234567891011121314151617181920body &#123; font: 36px Arial, sans-serif;&#125;#container &#123; color: white; background: #ffbd17; width: 400px; height: 260px;&#125;#content &#123; background: #06c; width: 120px; margin-left: auto; margin-right: auto; position: relative; top: 50%; transform: translateY(-50%);&#125; css position z index and stack orderinghtml文件从上到下，越是在下面的文件，在z轴方向上的高度就越高。所以顶部nav要写在最底下。这是默认情况如果要放在顶部的话，需要添加z-index：1;默认所有的z-index=0。使z-index生效的前提是给了一个position属性 Clipping Content先加上一个max-height，然后使用over-flow : hidden; 这个属性默认值是visible。使用auto会在内容高度超过容器高度的时候带上一个scrollbar，内容可以滚动。使用scroll的时候会在右侧和底部加上scrollbar，无论是否超出了max-height 12345@Media(max-width=768)&#123; body&#123; display: none; &#125;&#125; 这里面的css只会在平板及手机上生效，其实768px也就是平板和一般电脑宽度像素的界限了 子元素的margin会移动父元素 给parent加上overflow :auto就好了 有时候遇到重大灾难，一些门户网站会把自家首页变成黑白色的，这种情况其实不多见。2018年3月14日，霍金逝世，阿里云变成黑的了。F12了一下，直接改在body的style上了原路粘贴至此123456789101112body&#123; -webkit-filter: grayscale(100%); -moz-filter: grayscale(100%); -ms-filter: grayscale(100%); -o-filter: grayscale(100%); filter: grayscale(100%); filter: gray;&#125; font awesome怎么用直接下载下来一个zip文件，解压后得到font-awesome文件夹，整个丢到项目中，html中引用’./font-awesome/css/font-awesome.css.min’即可。一般是粘贴到一个a标签里面。 更新 cssmatic很多时候，手写css是一种奢侈，css这种东西本来就属于样式一类，尽量去复制粘贴，不要自己写 有些浏览器不支持特定样式的话，可以使用Modernizrz这个javaScript库 作为新手，多数时候css不起效是因为class和id在html中和css中拼写错了 比较合适的css布局教程 参考css层叠优先级Material CSScss选择器汇总谷歌的字体库 自己去下，很多","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"},{"name":"css","slug":"css","permalink":"https://haldir65.github.io/tags/css/"}]},{"title":"Vanilla JS Tips","date":"2017-10-29T22:10:27.000Z","path":"2017/10/29/2017-10-29-pure-javaScript/","text":"Vanilla JS其实就是原生javascript了。论运行速度，在Vanilla JS面前，所有的js library都要慢很多。 关于js的历史，根据Patrick Dubroy在2014年的一次演讲，ES3是1999年出来的，ES3之前的版本简直是翔。ES4设计的实在太牛逼，一直拖到2008年也没搞定，所以大家决定直接跳过ES4(历史上也从未有过ES4)，推出了ES5（只把ES4中的一部分实现了），实际上2015年6月ES6(也就是2008年那帮人所称呼的harmony)才发布。关于Patrick Dubroy，这人在2011年的Google IO上做过关于用mat检测Android Memory Leak的演讲，老外真是全才。 TakeAways 基本语法 操作html的一些点 交互事件的注册，捕获，拦截 异步 ES6新增的东西 我也不知道归到哪一类的问题 一些tricks 1. 一些作为一门语言基本的操作都有 1.1 比如说module（就是import，export这种，虽然是ES6才补上的） js中好像没有像java中那种javaBean的特殊的数据类型的存在。其实也不需要，js并不是一种用class来model real world object的语言。ES6开始可以使用import和export语法，有类似的效果，参考但node js目前(version 8.x)还不支持es 2015的import export语法，偏偏node对于其他es2015的特性都支持到位了。 12345678910111213141516171819202122// states.jsexport default &#123; STATES: &#123; 'AU' : &#123;...&#125;, 'US' : &#123;...&#125; &#125;&#125;;// accept.jsimport &#123; STATES &#125; from './states'; //undefinedimport STATES from './states'; // concrete object ,this worksimport whatever from 'states'; // concrete object, this works// 另一种情况var STATES = &#123;&#125;;STATES.AU = &#123;...&#125;;STATES.US = &#123;...&#125;;export STATES;import &#123; STATES &#125; from 'states';//如果输出方使用export default，接收方不应加上大括号。此时输出方输出的是匿名Object，接收方随便起什么名字都行。// 如果输出方输出有明确定义的function, object，接收方需要添加大括号。 es6的import和export需要注意1234567891011121314151617// A.jsexport default function greet(params) &#123; console.log('hello');&#125;// B.jsimport firstGreet from '.A.js'; //this worksimport &#123; firstGreet &#125; from '.A.js'; // undefined !// A.jsconst sayHi = function hi() &#123; console.log(\"hi\");&#125;export &#123; sayHi &#125;// B.jsimport &#123; firstGreet &#125; from '.A.js'; // this works 原因就在于第一种方式是使用匿名export的。 1.2 基本的操作符，dynanic type,函数，变量，oop,class（ES6）,for循环,while这些都有 js里面判断两个变量相等的方式，建议一律使用三个等号（严格相等） 1234567891011121314151617181920212223var a = 3;var b = \"3\";a==b 返回 truea===b 返回 false// 因为a,b的类型不一样// ==只比较了值// ===只有在值和类型完全相同的时候才为true，用来进行严格的比较判断// !=（只检查值）和!==（检查值和类型）也差不多的意思。= 赋值运算符== 等于=== 严格等于&amp;&amp;和||也有，!=也有- true和false也有// truthy的概念是js里面特有的// 在console里面输入：Boolan(5) &gt; 输出trueBoolean(-5) &gt;输出falseBoolean(7&gt;5) &gt; 输出trueBoolean('someword') &gt; trueBoolean('') &gt; false// 只有Boolan(0)才是false string，number,array也有 123456789101112131415// var myString = 'i 'm a \"funny\" string' #这样是不行的var myString = 'i \\'m a \"funny\" string';//加一个转义就好了var a = 'abc'var b = 'bcd'a&lt;b // true,因为ASCII表里面，a在b前面var str = 'hello world'var str2 = str.slice(2,9);str2 // 'llo,wo'var tags = 'meat,ham ,salami,prok,beef,chicken'var tagsArray = tags.split(\",\")//生成[\"meat\",\"ham\",\"salami\",\"prok\",\"beef\",\"chicken\"] js的Array里面能够装不同类型的数据，跟Python很像123456789101112131415161718//创建Array的方式很多var array = []var array1 = ['stuff','jeff',20]var array2 = new Array()var myArray = []// 初始化就好了，无需指定容量myArray[0] ='stuff'myArray[1] = 70myArray &gt; ['stuff',70]myArray[30] = true// 以下为亲测console中的输出就这样myArray &gt; (31) [\"stuff\", 70, empty × 28, true]myArray[12] &gt; 'undefined'myArray.length &gt; 31myArray.sort() &gt; (31) [70, \"stuff\", true, empty × 28] Object，class这种oop的特性也有1234567891011121314151617181920212223242526var myCaR = new Car()VM315:1 Uncaught ReferenceError: Car is not defined at &lt;anonymous&gt;:1:13var myString = new String()myString = 'hello' myString.length &gt; 5var mystring23 = new String('stuff')//这也是行的// 直接在console里写var myCar = new Object()undefinedmyCar.speed = 2020myCar.speed20myCar.name = 'benz'\"benz\"myCar.name\"benz\"myCar&#123;speed: 20, name: \"benz\"&#125; //json即objectvar car2 = &#123;speed: 30, name: \"tesla\"&#125;car2&#123;speed: 30, name: \"tesla\"&#125; 上下文的概念也有，this关键字，但要注意闭包12345678910111213// console直接输入thisWindow &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;//window是一个有很多变量(function也是变量)的对象，在当前语义下，就是windowcar2.test = function()&#123;console.log(this)&#125;car2&#123;speed: 30, name: \"tesla\", test: ƒ&#125;car2.testƒ ()&#123;console.log(this)&#125;car2.test()//这时候this就是car2这个Object了VM592:1 &#123;speed: 30, name: \"tesla\", test: ƒ&#125; this应该是当前上下文 Construction function，函数也是一个object的成员123456789101112var Car = function (name,speed) &#123; this.name = name this.speed = speed this.test = function () &#123; console.log('speed is '+speed) &#125;&#125;var car24 = new Car('jim',40)car24Car &#123;name: \"jim\", speed: 40, test: ƒ&#125;car24.test()VM621:5 speed is 40 Object definition(construcor)，class也有 还有随便用的log 1.3 一些工具，时间,Math，io操作（文件系统、网络）也有Date Object的使用1234567891011121314let past = new Date(2007,11,9)undefinedpast// Sun Dec 09 2007 00:00:00 GMT+0800 (中国标准时间)past.getDayƒ getDay() &#123; [native code] &#125;past.getDay()0past.getFullYear()2007past.getDateƒ getDate() &#123; [native code] &#125;past.getDate()9 网络请求，Ajax(Asynchronous javaScript &amp; xml)请求的套路也有(AJAX命名上就是异步的)XMLHttpRequest缩写是(XHR)关于XHR Object API In the form of an object Provided by the browser’s js environment can be used with other protocols than http Can work with data other than XML(Json ,plain text) 有很多的Library能干ajax一样的事情:jQuery,Axios,Superagent,Fetch API,Prototype,Node HTTP ajax的onload只会在onreadystatechange==4的时候才会触发MDN文档上说ajax的readyState有五种：0 UNSENT 代理被创建，但尚未调用 open() 方法。1 OPENED open() 方法已经被调用。2 HEADERS_RECEIVED send() 方法已经被调用，并且头部和状态已经可获得。3 LOADING 下载中； responseText 属性已经包含部分数据。4 DONE 下载操作已完成。 xhr.onProgress的readyState是3，这个时候显示加载进入条就可以了。 1234567891011121314151617181920212223242526var getJSON = function(url) &#123; var promise = new Promise(function(resolve, reject)&#123; var client = new XMLHttpRequest(); client.open(\"GET\", url,true); client.onreadystatechange = handler; client.responseType = \"json\"; client.setRequestHeader(\"Accept\", \"application/json\"); client.send(); function handler() &#123; if (this.status === 200) &#123; resolve(this.response); &#125; else &#123; reject(new Error(this.statusText)); &#125; &#125;; &#125;); return promise;&#125;;getJSON(\"/posts.json\").then(function(json) &#123; console.log('Contents: ' + json);&#125;, function(error) &#123; console.error('出错了', error);&#125;); 表单的操作1234567891011121314151617181920212223&lt;h1&gt;Normal get form&lt;/h1&gt;&lt;form method=\"GET\" action=\"process.php\"&gt; &lt;input type=\"text\" name='name'&gt; &lt;input type=\"submit\" value=\"Submit\"&gt;&lt;/form&gt;&lt;h1&gt;Ajax get form&lt;/h1&gt;&lt;form id='getForm' &gt; &lt;input type=\"text\" name='name' id='name1'&gt; &lt;input type=\"submit\" value=\"Submit\"&gt;&lt;/form&gt;&lt;h1&gt;Normal post form&lt;/h1&gt;&lt;form method=\"POST\" action=\"process.php\"&gt; &lt;input type=\"text\" name='name'&gt; &lt;input type=\"submit\" value=\"Submit\"&gt;&lt;/form&gt;&lt;h1&gt;Ajax post form&lt;/h1&gt;&lt;form id='postForm' name='name' id='name2'&gt; &lt;input type=\"text\" name='name'&gt; &lt;input type=\"submit\" value=\"Submit\"&gt;&lt;/form&gt; 1234567891011121314151617181920212223242526272829document.getElementById('getForm').addEventListener('submit',getName);function getName(e)&#123; e.preventDefault(); var name = document.getElementById('name1').value;//用户输入的内容 var xhr = new XMLHttpRequest(); xhr.open('GET','process.php?name='+name,true); xhr.onload = function()&#123; console.log(this.responseText); &#125; xhr.send();&#125;document.getElementById('postForm').addEventListener('submit',postName);function postName(e)&#123; e.preventDefault(); var name = document.getElementById('name2').value;//用户输入的内容 var params =\"name=\"+name; var xhr = new XMLHttpRequest(); xhr.open('POST','process.php',true); xhr.setRequestHeader('Content-type','application/x-www-form-urlencoded') xhr.onload = function()&#123; console.log(this.responseText); &#125; xhr.send();&#125; JavaScript random方法得到随机整数1234567document.write(Math.ceil(Math.random()*3)) //得到1-3的整数document.write(Math.floor(Math.random()*4)); //得到0-3的整数Math.round() //当小数是0.5或者大于0.5的时候向上一位Math.ceil() //始终向上一位Math.floor() // 始终向下舍入 2. 操作HTML-DOM的一些方法通过 id 找到 HTML 元素 window.document.getElementById()通过标签名找到 HTML 元素 window.document.getElementsByTagName()//比如说’h2’这种通过类名找到 HTML 元素 window.document.getElementsByClassName()注意方法名称，带s的返回的是一个数组，不带s返回一个object找form 标签的话，还有一种方法:先手写一段html123456789101112131415161718192021222324252627&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"utf-8\"/&gt; &lt;title&gt;有时候手写html不是坏事&lt;/title&gt; &lt;link href=\"style.css\" type=\"text/css\" rel=\"stylesheet\"&gt;&lt;/link&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;form id='my-form' name='myForm' action=\"#\"&gt; &lt;label for=\"name\"&gt;Name: &lt;/label&gt; &lt;input type=\"text\" name=\"name\"&gt;&lt;br/&gt; &lt;label&gt;Hobbies: &lt;/label&lt;br/&gt; &lt;input type=\"checkbox\" name=\"biking\" value=\"biking\"&gt;Biking&lt;/br&gt; &lt;input type=\"checkbox\" name=\"sking\" value=\"sking\"&gt;Sking&lt;/br&gt; &lt;input type=\"checkbox\" name=\"diving\" value=\"diving\"&gt;Diving&lt;/br&gt; &lt;label for=\"colour\"&gt;Fav colour: &lt;/label&gt; &lt;select name=\"colour\"&gt; &lt;option&gt;Red&lt;/option&gt; &lt;option&gt;Blue&lt;/option&gt; &lt;option&gt;Green&lt;/option&gt; &lt;/select&gt; &lt;input type=\"submit\" name=\"submit\" value='Submit'&gt; &lt;/form&gt; &lt;/div&gt; &lt;script src=\"test.js\"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 1234var myForm = document.forms.myForm//myForm是这个Form标签的name属性,form是跟input配合使用的myForm.name &gt; 那个input标myForm.name.value &gt; 那个input标签，其实也就是那个输入框里面的文字myForm.colour.vaule &gt; 显示当前选中的select值 还是上面那个表单123456789101112var myForm = document.forms.myFormvar message = document.getElementById('message')myForm.onsubmit = function () &#123;//就是上面那个submit被点击时触发 if(myForm.name.value === '')&#123; message.innerHtml = 'please enter an not empty name' return false //summit事件被终止 &#125;else &#123; message.innerHtml = '' return true &#125;&#125; div.innerHtml（把整个html对象都返回了）和div.textContent(只返回文字)。所以innerHtml可以用来把一个div里面的tag全部替换掉（比如原来是个p，现在换成h1），而textContent只能把某一个tag里面的文字改掉。想要改href的话，得这样：12var link = document.getElementById(\"abc\");link.setAttribute(\"href\", \"xyz.php\"); setAttribute()可以用于设置一个在当前tag上不存在的attr设置class可以用setAttribute(‘class’,’XXX’)，也可以用div.className = ‘XXX’对于一个a标签1&lt;a href=\"/subpage\"&gt;Some Thing&lt;/a&gt; 这时候调用a.href &gt; 会输出’http://www.host.com/subpage&#39;，即输出完整的路径但是如果使用a.getAttribute(‘href’) &gt; 输出’/subpage’ 改一个tag的背景元素不能这么改：123a.style.background-color= 'blue'//得这样a.style.backgroundColor= 'blue'//其实就是横线换成CammelCase 在dom中新增一个element的方法123456var li = document.createElement('li') //创建一个新的li标签,parentTag.appendChild(li)//添加到尾部parentTag.insertBefore(li,parentTag.getElementsByTagName('li')[0])//添加到原来的0元素前面//删除一个tag的话var removed = parentTag.removeChild(li)//移除方法会返回被移除的元素 3.从onclick开始到整个交互事件模型4. 异步的实现首先js里面也是有callback hell这种概念的，一个接口好了请求另一个接口，好了之后在请求第三个接口，这样一层套一层谁也不喜欢。123456789var http = new XMLHttpRequest(); http.onreadystatechange=function()&#123; if(http.readyState==4&amp;&amp;http.status==200)&#123; console.log(JSON.parse(http.response)) &#125; &#125;; http.open(\"GET\",'data/tweets.json',true); http.send(); 上面这段直接在chrome里面跑的话会出错： Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https Chrome 默认不支持跨域请求，启动时要加上个flag就行了 ajax的readyState有四种 request not initialized request has been set up request has been set request is in process request is complete ajax的open第三个参数表示是异步还是同步，一般都得异步。由于js是单线程的，所以会把实际的网络请求工作放到一条js以外的线程中，完成后丢到当前js线程任务池的最后。 当前线程的任务完成后就可以执行这段回调 ES6提供了Promise，能够将事情简化。 1234567891011121314151617181920212223242526272829//promise(ES6) is a placeholder for something that will happen in the futurefunction get(url)&#123; return new Promise(function(resolve,reject)&#123; var http = new XMLHttpRequest(); http.open('GET',url,true); http.onload = function()&#123; if(http.status==200)&#123; resolve(JSON.parse(http.response)); &#125;else&#123; reject(http.statusText); &#125; &#125; http.onerror = function () &#123; reject(http.statusText) &#125; http.send(); &#125;); var promise = get('data/tweets.json'); promise.then(function (tweets) &#123; console.log(tweets); return get('data/friends.json') &#125;).then(function name(friends) &#123; console.log(friends); &#125;). catch(function(error)&#123; console.log(error); &#125;) &#125;; 更加有效的方式是使用generator，还不是很了解1234567function* gen() &#123; yield 10;&#125;var myGen = gen()// myGen.done//myGen.value() 5. ES6新增的一些东西let(lexical)的用法就在一个循环里给function赋值，很常见。注意的是var的作用域是跨大括号的。所以大括号里面的var是能被大括号外面访问的，let就不行。async await 都是ES2017（比ES2015更高的版本）中出现的。default parameters： 默认参数，和python中很像12345678910function myLog(name,age,id)&#123;&#125;function myDefaultFunction(name='john',age=27,id =100)&#123;&#125;// 调用：myDefalutFunction()// 不传参也可 spread operator12345678910111213141516var num1 = [1,2,3]var num2 = [num1,5,6]console.log(num2)// var num2 = [num1,5,6]var num2 = [...num1,5,6] //三个点console.log(num2)// (5) [1, 2, 3, 5, 6]//另外一个用处var num3 = [1,2,3]function acceptAnArray(a,b,c)&#123; console.log(a+b+c)&#125;//调用acceptAnArray(...num3) // 输出6 template String(这个不是引号，是在tab键上面那个)123456789var myString = `This is an template String , note we have some line break here,that will be honored. Also there are some whiteSpace afront , which will be honored too`console.log(myString) var nextString = `This is `function logLiteralString(name,age) &#123; console.log(`the name is $&#123;name&#125; and the age is $&#123;10+12&#125;`);&#125;// the name is hhaha and the age is 22 。 String literals. String新增了一些方法123456789101112var str = 'hahhaha'console.log(str.repeat(3));// hahhahahahhahahahhahavar str2 = 'goodbye'console.log(str2.startWith('good')); // trueconsole.log(str2.startWith('bye',4)); // trueconsole.log(str2.endsWith('good')); //falseconsole.log(str2.endsWith('good',str2.length-3)); //truevar str3 = 'Good Day'console.log(str3.includes('Day')); //true Object Literal notation12345678910111213141516171819// es5得这么写var name = 'Josh'var age = 27var person = &#123; name: name, age: age, greet: function (X) &#123; console.log(`you say $&#123;X&#125; in your greets`); &#125;&#125;// es6这样就行了var person = &#123; name,age, greet(X)&#123; console.log(`you say $&#123;X&#125; in your greets`); &#125;&#125; 简明很多 Arrow Function（箭头函数）12345678910111213window.onload = function () &#123; var stuff = function () &#123; console.log('say Stuff'); &#125; var stuff2 = () =&gt;&#123; console.log('this is more precise'); &#125; var stuff3 = () =&gt; console.log('只有一行的话可以不要大括号'); var stuff4 = (name) =&gt; console.log(`the name is $&#123;name&#125; and hi`); var stuff5 = name =&gt; console.log(`只有一个参数 $&#123;name&#125;的话，参数的小括号也不要了`);&#125; 还有一个好处就是: the arrow function will bind the this keyword lexically.1234567891011121314window.onload = function () &#123; var jam = &#123; name : 'Jane', greeting: function (X) &#123; window.setInterval(function () &#123; if (X&gt;0) &#123; console.log(this.name+' greet you'); &#125; &#125;,500) &#125; &#125; jam.greeting(3)&#125;// 输出 greet you 原因是this已经不是jam这个object了，也就是闭包问题.es6之前用下面这种方式规避一下123456789101112131415161718192021222324252627282930window.onload = function () &#123; var jam = &#123; name : 'Jane', greeting(X) &#123; var _this =this; window.setInterval(function () &#123; if (X&gt;0) &#123; console.log(_this.name+' greet you'); X--; &#125; &#125;,500) &#125; &#125; jam.greeting(3)&#125;window.onload = function () &#123; var jam = &#123; name : 'Jane', greeting(X) &#123; window.setInterval(() =&gt; &#123; if (X&gt;0) &#123; console.log(this.name+' greet you'); X--; &#125; &#125;,500) &#125; &#125; jam.greeting(3)&#125; class definitiones6 新增了class的概念，还有extends的概念123456789101112131415161718192021222324class Band &#123; constructor(name ,location) &#123; this.name = name; this.location = location; &#125; function greet() &#123; console.log(this.name); &#125;&#125;class SubBand extends Band &#123; construcor(name ,location,popularity) &#123; super(name ,location); // this is essential , 如果后面想要使用parent 的属性的话，需要加上super() this.popularity = popularity; &#125;&#125;// 调用let garage = new Band('john', 'Doe');garage.greet(); Sets是新增的用于存储unique数据的集合(元素不能重复)12345678910111213var names = new Set();names.add(\"josh\").add('bob').add('neo')console.log(names);console.log(names.size);names.delete('bob') // 返回true表示删除成功，false表示删除失败names.clear()names.has('bob') //就是contains的意思var duplicatedArray = [1,2,'jane','harry',2];var undepulicatedSet = new Set(duplicatedArray);console.log(undepulicatedSet);duplicatedArray = [...undepulicatedSet] //使用spread operater将set变成各个单一的元素console.log(duplicatedArray); add的时候如果存在重复元素直接无视新增的重复元素 6. 我也不知道归到哪一类的问题 js语法上虽说不用加分号，但实际应用中为避免压缩js文件时出现歧义，还是得老老实实加上分号 js 是大小写敏感的 IIFE(Immediately Invoked Function Expression) Library use this to avoid polluting global environment声明了之后立刻调用该函数执行iife的例子: 123456789101112131415161718192021222324252627282930313233343536373839404142(function () &#123;console.log('this is invoked!')&#125;)();// iife的好处是只对外提供必要功能，内部成员不用暴露给外部。 Javascript模块的基本写法var module1 = (function()&#123; var _count = 0; var m1 = function()&#123; //... &#125;; var m2 = function()&#123; //... &#125;; return &#123; m1 : m1, m2 : m2 &#125;; &#125;)();console.info(module1._count); //undefined// 放大模式\"（augmentation），一个模块继承另一个模块var module1 = (function (mod)&#123; mod.m3 = function () &#123; //... &#125;; return mod; &#125;)(module1);// 宽放大模式（Loose augmentation）var module1 = ( function (mod)&#123; //... return mod; &#125;)(window.module1 || &#123;&#125;); Javascript模块化编程（一）：模块的写法 Paul Irish的视频中提到了jQuery的Source中用到了这种做法。 如果引用一个未声明的变量，js会直接创建一个（除非使用use strict） undefined和null的关系null: absence of value for a variable; undefined: absence of variable itself;what-is-the-difference-between-null-and-undefined-in-javascript undefined的意思是事先声明了一个var但没有给赋值，null是一个object，表示no value。typeof(Undefined) = ‘undefined’, typeof(‘Null’) = ‘object’why-is-there-a-null-value-in-javascriptnull is a special keyword that indicates an absence of value. 1234567891011121314151617181920var foo;defined empty variable is null of datatype undefined //这种声明了但是没给赋值的变量的值是null,数据类型是undefinedvar a = '';console.log(typeof a); // stringconsole.log(a == null); //falseconsole.log(a == undefined); // false// 两个等号表示只检查valuevar a;console.log(a == null); //trueconsole.log(a == undefined); //true// 三个等号表示既检查value也检查typevar a;console.log(a === null); //falseconsole.log(a === undefined); // truevar a = 'javascript';a = null ; // will change the type of variable \"a\" from string to object js的数据类型包括：Number,String,Boolean,Object,Function,Undefined和Null js中是存在一些全局属性和全局函数的比如Infinity(代表正的无穷大),NaN(指某个值是不是数字)全局的函数比如decodeURI(),escape(),eval(),parseInt(),parseFloat()，这些方法不属于任何对象 这两个函数都接受String作为参数12parseInt(\"10\"); //返回 10，官方文档说返回的是integer(也就是Number了)parseFloat(\"10.33\") // 返回10.33 =================================================== 交互事件的捕获，拦截，消费（冒泡）12345678910111213141516171819//添加点击事件点击事件：var button = document.getElementById('btn')button.onclick = function () &#123; console.log('you click this button');&#125;button.onfocus = function() &#123; // body...&#125;button.onblur = function () &#123; //&#125;function cancelEvent(e) &#123; if(e) &#123; e.stopPropagation(); //非IE &#125; else &#123; window.event.cancelBubble = true; //IE &#125;&#125; 在一个元素上触发事件，如果此元素定义了处理程序，那么此次事件就会被捕获，根据程序进行该事件的处理。否则这个事件会根据DOM树向父节点逐级传播，如果从始至终都没有被处理，那么最终会到达document或window根元素。所以事件是往上传递的，即冒泡。 //事件注册的时机对于简单的script，需要在body的最后一行，因为浏览器是从上到下解析的，轮到script解析的时候，需要操作dom，这就要求dom元素已经建立好。有时候，就算你把script写在body最后一行，轮到解析script的时候，前面的html还在加载（比如说非常大的html什么的，总之是有可能的）。所以一般用window.onLoad来注册事件。 复杂点的script放在外面，用src引用。 也要用window.onLoad来注册事件。所以，一般的js长这样（假如的你js要操作dom）：12345678910111213function setUpEvents() &#123; var button = .... var .... button.onclick = function () &#123; // &#125; button.&#125;window.onLoad = function () &#123; setUpEvents()&#125; this的作用范围代码来源1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"&gt;&lt;/script&gt;&lt;script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"&gt;&lt;/script&gt;&lt;script&gt;var watchExampleVM = new Vue(&#123; el: '#watch-example', data: &#123; question: '', answer: 'I cannot give you an answer until you ask a question!' &#125;, watch: &#123; // 如果 `question` 发生改变，这个函数就会运行 question: function (newQuestion) &#123; this.answer = 'Waiting for you to stop typing...' this.getAnswer() &#125; &#125;, methods: &#123; // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。 // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率 // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于 // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识， // 请参考：https://lodash.com/docs#debounce getAnswer: _.debounce( function () &#123; if (this.question.indexOf('?') === -1) &#123; this.answer = 'Questions usually contain a question mark. ;-)' return &#125; this.answer = 'Thinking...' var vm = this //这里需要把this（VewComponent）作为一个变量 axios.get('https://yesno.wtf/api') .then(function (response) &#123; vm.answer = _.capitalize(response.data.answer) &#125;) .catch(function (error) &#123; vm.answer = 'Error! Could not reach the API. ' + error &#125;) &#125;, // 这是我们为判定用户停止输入等待的毫秒数 500 ) &#125;&#125;)&lt;/script&gt; 7. 小测试如何用js反转一个String123456789101112131415161718192021222324252627function reverse(s)&#123; return s.split(\"\").reverse().join(\"\");&#125;// 另一种方式function revserse2(s)&#123; let revString = \"\"; for(let i = s.length; i&gt;=0;i--) &#123; revString = revString+str[i]; &#125; return revString;&#125;// 用forEach的话function reverse3(string) &#123; let revString = \"\"; string.split('').forEach((c) =&gt; &#123; revString = c + revString; &#125;); return revString;&#125;function reverse4(string)&#123; return string.split('').reduce(function(revString, char) &#123; return char + revString; &#125;,'');&#125; 反转一个int1234function reverseInt(int) &#123; const revString = int.toString().split('').reverse().join(''); return parseInt(revString)*Math.sign(int);&#125; 首字母大写12345678910111213141516function capitalizedLetters(str)&#123; const strArr = str.toLowerCase().split(' '); for(let i=0;i&lt;strArr.length;i++)&#123; strArr[i] = strArr[i].subString(0,1).toUpperCase()+ strArr[i].subString(1); &#125; return strArr.join(' ');&#125;function capitalizedLetters2(str)&#123; return str .toLowerCase() .split(' ') .map( (word) =&gt; word[0].toUpperCase()+word.subString[1]) .join(' ');&#125; how about shuffle an array123456789101112131415161718/** * Shuffles array in place. * @param &#123;Array&#125; a items An array containing the items. */function shuffle(a) &#123; var j, x, i; for (i = a.length - 1; i &gt; 0; i--) &#123; j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; &#125;&#125;// Used like sovar arr = [2, 11, 37, 42];shuffle(arr);console.log(arr); js去刷新当前页面，返回上级页面。。 12345&lt;a href=\"javascript:history.go(-1)\"&gt;返回上一页&lt;/a&gt;&lt;a href=\"javascript:location.reload()\"&gt;刷新当前页面&lt;/a&gt;&lt;a href=\"javascript:\" onclick=\"history.go(-2); \"&gt;返回前两页&lt;/a&gt;&lt;a href=\"javascript:\" onclick=\"self.location=document.referrer;\"&gt;返回上一页并刷新&lt;/a&gt;&lt;a href=\"javascript:\" onclick=\"history.back(); \"&gt;返回上一页&lt;/a&gt; 监听关闭窗口事件 123456789101112131415161718192021222324252627282930window.onbeforeunload = function () &#123; return \"Bye now!\" &#125;``` [JavaScript使用哪一种编码？](http://www.ruanyifeng.com/blog/2014/12/unicode.html),不是utf-8[atom安装插件被墙问题](http://blog.csdn.net/qianghaohao/article/details/52331432)Atom推荐插件[atom-beautify](https://atom.io/packages/atom-beautify)===============================================================================================## 使用Atom的时候，按下ctrl+shift+i ，会发现原来atom编辑页面就特么是一个网页。[javaScript自己的Utils](https://juejin.im/post/5a2a7a5051882535cd4abfce)12. MicroTask和MacroTask的执行顺序是：Stack -&gt; MacroTask -&gt; MicroTask [参考](https://juejin.im/entry/59e95b4c518825579d131fad)9. setTimeout是schedule一个task，setInterval是设定一个周期性执行的任务。8. 可以检测是ES5还是ES6```javaScriptfunction f() &#123; console.log('I am outside!'); &#125;(function () &#123;if(false) &#123;// 重复声明一次函数f,ES5会输出'i am insider', ES6会输出'i am outsider'function f() &#123; console.log('I am inside!'); &#125;&#125;f();&#125;()); javaScript debug的方法：选中一个html 的tag，break on 。。。 自然会在执行到的时候停下来，evalulate value需要自己在console里面敲（注意此时应该位于Sources标签页下）。 json object有一个prototype属性，表面其所代表的类型。 js迭代一个数组的方法：12345678910111213141516171819202122232425262728293031323334353637for (var i = 0; i &lt; array.length; i++) &#123; // array[i]&#125;for (var i = 0,len=array.length; i &lt; len; i++) &#123; // array[i]&#125;array.forEach(function(item)&#123; // item&#125;)// 用于列出对象所有的属性var obj = &#123; name: 'test', color: 'red', day: 'sunday', number: 5&#125;for (var key in obj) &#123; console.log(obj[key])&#125;//// es6for (variable of iterable) &#123;&#125;array.map(function(item)&#123;&#125;)array.filter(function(item)&#123;&#125;) 基本上就这些了参考 异常捕获(try catch也有) javaScript操作cookie: 这种方式就是给String全局添加一个方法，当然不是说推荐这么干123456789101112String.prototype.hashCode = function() &#123; var hash = 0, i, chr; if (this.length === 0) return hash; for (i = 0; i &lt; this.length; i++) &#123; chr = this.charCodeAt(i); hash = (hash &lt;&lt; 5) - hash + chr; hash |= 0; // Convert to 32bit integer &#125; return hash;&#125;; string concatnate的方法也有，然而最快的方式还是使用+=这种12var hello = 'Hello, ';console.log(hello.concat('Kevin', '. Have a nice day.')); FileReader是什么 参考5 分钟彻底明白 JSONP","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"},{"name":"javaScript","slug":"javaScript","permalink":"https://haldir65.github.io/tags/javaScript/"}]},{"title":"正则表达式手册","date":"2017-09-10T23:10:05.000Z","path":"2017/09/10/2017-09-10-wielding-regular-expressions/","text":"关于正则的一些收集 javaScript中的正则比如说webpack.config.js中，loader模块有:12345&#123; ... test: /\\.css$/, ...&#125; nginx的config文件中也要写正则 第一个正斜杠和最后一个正斜杠表示正则的开始和结束，反斜杠表示后面那个点就当做一个文字的点来处理，$代表以css结束We need more Pictures 一般情况下不要乱用正则 参考 DFA和NFA","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"}]},{"title":"VueJs学习笔记","date":"2017-09-08T21:41:43.000Z","path":"2017/09/08/2017-09-08-all-about-Vue/","text":"Vue Js学习笔记 有句话放在前面，所有的javaScript库都比不上Vanilla JS，即原生js代码。 1. 前提使用cmder ,安装了nodejs基本命令 npm install npm run dev npm 设置淘宝镜像 npm config set registry https://registry.npm.taobao.org 或者直接用本地ss代理设置proxy npm config set strict-ssl falsenpm config set registry “http://registry.npmjs.org/“npm config set proxy http://127.0.0.1:1080 ## 以上三句话设置代理npm config list ##列出当前所有的设置npm config get stuff ##比如说registry等等 上面的npm run run dev只是为了方便本地开发，具有live reload功能。实际生产环境中，需要在CI服务器上运行 npm run build 然后把dist文件夹中的静态文件推送到正式服务器在本地起nginx，设置好config,port,location什么的，然后把dist文件夹下所有东西复制到ngix config的目录下。 1234error_page 500 502 503 504 /50x.html;location = /50x.html &#123; root html;&#125; 然后直接在浏览器里面localhost打开查看，这是生产环境的大致描述，实际过程中代码还需要经历开发机器，编译机器，测试机器，cdn机器等等环节。 import语法:从别的vue文件中导入数据：import Data from ./xxx/stuff.vue其实和python很像 一些常用的标签 template 标签用于显示模板，内部可以使用获取json对象的数据 data 普通属性，标签用于存储json类型的数据，是属于这个实例的变量 methods 标签用于声明方法，内部使用this.xxx可以获得data中的json对象。在html里面不需要this，在export语句里面需要 components 标签用于引入可复用的模板,用于注册 computed 计算属性，computed和data一样，也是方法，只不过只是返回了变量的值的一份copy。不会影响data的值 12345678910111213var vm = new Vue(&#123; el: &apos;#example&apos;, data: &#123; message: &apos;Hello&apos; &#125;, computed: &#123; // 计算属性的 getter reversedMessage: function () &#123; // `this` 指向 vm 实例 return this.message.split(&apos;&apos;).reverse().join(&apos;&apos;) &#125; &#125;&#125;) 你可以像绑定普通属性一样在模板中绑定计算属性。Vue 知道 vm.reversedMessage 依赖于 vm.message，因此当 vm.message 发生改变时，所有依赖 vm.reversedMessage 的绑定也会更新。而且最妙的是我们已经以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的，这使它更易于测试和理解。普通属性更改的话就真的改了，计算属性只是把这种操作预期的结果返回，并不会修改原来的值。还有一个好处是，计算属性的值依赖于普通属性的值，前者不更改的话，后者直接返回缓存的值。所以这种获取时间的东西就不要放在计算属性里了。12345computed: &#123; now: function () &#123; return Date.now() &#125;&#125; 一些常用的事件绑定: v-if=’’ //移除或者显示某个Tag，(display:none是隐藏或显示) v-on:click=’somefunction’ //点击事件发生时触发某个method template v-is=’some_template_name’ //用于在页面模板中导入现成的模板 缩写： v-on的缩写是@符号 v-bind:的缩写就是: 那个冒号 1.1 Dynamic Components页面中需要随时展示不同template是，可以使用component标签。12345678910// Importsimport formOne from './components/formOne.vue';import formTwo from './components/formTwo.vue';&lt;form-one&gt;&lt;/form-one&gt;//这和下面这种写法是一样的 &lt;component v-bind:is='component'&gt;&lt;/component&gt; //component标签注册在data中，可以随时改变。例如 &lt;button v-on:click=\"component='form-one'\"&gt;Show form one&lt;/button&gt; &lt;button v-on:click=\"component='form-two'\"&gt;Show form two&lt;/button&gt; 1.2 InputBinding将input标签中用户输入的文字显示在一个tag中12345678910111213141516171819202122//在template中&lt;input type=\"text\" v-model.lazy='title' required/&gt; //lazy是指preview部分只会在点击后显示内容//在data中注册data () &#123; return &#123; title :'', content: '' &#125; &#125;在需要展示内容的标签中可以实时获取内容如&lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;&gt; 或者data () &#123; return &#123; blog:&#123; title :'', content: '', categories:[] &#125; &#125; &#125; data中返回的是一个json object，json本身的定义就是(JavaScript Object Notation)。这样做的好处是可以将所有需要的变量存储在一个object,当然，这里面存数组也是可以的。 1.3 Checkbox Binding123456789101112131415161718&lt;div id=\"checkboxes\"&gt; &lt;label&gt;Apple&lt;/label&gt; &lt;input type=\"checkbox\" value=\"apple\" v-model=\"blog.categories\"&gt; &lt;label&gt;Juice&lt;/label&gt; &lt;input type=\"checkbox\" value=\"juice\" v-model=\"blog.categories\"&gt; &lt;label&gt;Panda&lt;/label&gt; &lt;input type=\"checkbox\" value=\"panda\" v-model=\"blog.categories\"&gt; &lt;label&gt;rocky&lt;/label&gt; &lt;input type=\"checkbox\" value=\"rocky\" v-model=\"blog.categories\"&gt; &lt;label&gt;moon&lt;/label&gt; &lt;input type=\"checkbox\" value=\"moon\" v-model=\"blog.categories\"&gt;&lt;/div&gt;在预览区，可以这样展示 &lt;ul&gt; &lt;li v-for='cat in blog.categories'&gt;&#123;&#123;cat&#125;&#125;&lt;/li&gt; &lt;/ul&gt; 如果checkbox被选中，blog的categories数组中就加入了这个元素，取消选中则从数组中移除。 1.4 Select Box BindingSelctBox只能单选，绑定数据这样:12345678910&lt;select v-model='blog.author'&gt; &lt;option v-for='a in authors' &gt;&#123;&#123;a&#125;&#125;&lt;/option&gt;&lt;/select&gt;data&#123; blog:&#123; author:'default' &#125;, authors:['bob','Jessy','Jean','Jean','Dave']&#125; SelectBox会从authors数组中提供选项，选中后，blog.author对象将会被赋予相应的值。 1.5 HTML模板复用组件的意义就在于可以复用UI元素，就像Flask的renderTemplate方法里面可以接收若干参数，vue Component也是一样12341. 在父Component中引入子Component2. 子Component中添加props:[&apos;variable1&apos;,&apos;variable2&apos;]数组3. 在父控件中直接在html标签上添加 :variable1 =&apos;&apos; ，注意这个冒号其实是 v-bind: 的缩写，不能省略4. 在子控件的html中就像引用data一样使用props 1.6各种引用在vue组件中this指的是当前的VueComponent（也就是常说的vm），self指的是window对象，this.$el指的是所渲染的template 1.7 嵌套路由破坏了静态资源的引用路径nested-routes-breaks-the-static-path解决方法是在 html中置顶css或js等静态资源的location，从绝对路径，根路径开始 2.使用Http进行CURD操作安装：Repo注意：需要在当前工作目录.安装完成在package.json中看到 “dependencies”: { “vue”: “^2.3.3”, “Vue-resource”:”^1.3.4”},类似这样即可。 2.1 进行POST操作jsonPlaceHolder是一个免费的API网站。vue-resource提交表单的操作如下:123456789101112post:function () &#123; //use http here this.$http.post('https://jsonplaceholder.typicode.com/posts',&#123; title:this.blog.title, body:this.blog.content, userId:1, &#125;).then(function (data) &#123; // body... console.log(data) this.summited = true &#125;); &#125; post方法返回的是一个promise，加回调即可打印出api返回结果。 3. Router,Eventbus,mixin，axios等安装: npm install vue-router –save npm install vue-bus –save3.1 关于Bus， 是用来在不同的Vue文件中传递事件(数据)用的，安装好后，main.js里面improt并使用import Vue from ‘vue’import VueBus from ‘vue-bus’;Vue.use(VueBus); A.vue中123456789101112created()&#123; this.$bus.emit('loadSuccess', '创建成功！');&#125;,beforedestory()&#123; this.$bus.off('loadSuccess')&#125; // B.vue中created()&#123; this.$bus.on('loadSuccess',text=&gt; &#123; console.log('receieve msg from another vue component '+ text) &#125;)&#125; 3.2 关于mixin，有比较好的介绍其实就是把一些公用的methods放到一个js文件中export掉，然后需要的vue文件，自己去import，在data中设置mixins: [] ,使用的时候就可以用this.method()使用这些共有的方法了。其实主要是为了复用。 3.3 添加全局变量(常量)的方法，vuex是官方的 3.4 router就是建立internal link 页面之间跳转的桥梁在template中添加router-link的tag,会生成一个对应的a Tag,点击跳转即可。router-view标签表示预先准备好的布局会被渲染进入这个标签内（将其取代） 3.5 axios取代vue-resource用于发起http请求安装在官方介绍页有，子组件可以使用import从mainjs里面拿到。回到axios，作者表示不打算支持jsonp，想用jsonp的话可以用jquery,或者使用jsonp插件12345678910 $ npm install jsonp --save var jsonp = require('jsonp');jsonp('http://api.douban.com/v2/movie/top250', null, function (err, data) &#123; if (err) &#123; console.error(err.message); &#125; else &#123; console.log(data); &#125;&#125;); 亲测有效。 take aways:123456789101112131415161718##同源：$.ajax(&#123; url:\"persons.json\", success:function(data)&#123; console.log(data); //ToDo.. &#125;&#125;);##跨域：$.ajax(&#123; url:\"http://www.B.com/open.php?callback=?\", dataType:\"jsonp\", success:function(data)&#123; console.log(data); //ToDo.. &#125;&#125;); 其实一开始没有callback=?这些个东西的，http://www.B.com/open.js 这个链接就是一个简单的js1foo(&#123;\"name\":\"B\",\"age\":23&#125;); 所以A网站往document里面写一个script之后，直接就执行了A网站的foo() function。 但假如B网站还对C网站提供服务，C网站说foo()这个方法名已经被占用了。所以B就约定，不管是A,B,C D哪家网站，想要调各自的什么方法自己传上来，B负责调用以下。因为jsonp只能是GET，所以只好放在queryParameters里面了。为什么叫callback的原因我也是最近才想清楚的上面那个callback不一定非要写callback，其实写什么都行，主要看对方网站是怎么定义的。就是对方这个链接是怎么拿这个url里面的queryParams的。 XSS注入就是利用了CORS 4. Vuex及状态管理在js眼中，一段json字符串就是一个object。这是vuex 中改变某项属性的代码：123456789mutations: &#123; increment (state, payload) &#123; state.count += payload.amount &#125;&#125;store.commit('increment', &#123; amount: 10&#125;)两个花括号括起来的(json)，才是对象。这里，函数名叫做'increment'，传进去的payLoad即有效信息，是通过json转达的。 事件处理点击时会发生MouseEvent,如果想要获取这里面的一些属性，比如点击位置screenX,ScreenY这些，可以在html中绑定事件时，使用$event这个符号将事件传递到方法中。 基础复习 id和class的问题html tag的class，不同tag可以有相同的class，引用的时候用.classname来查找id这个tag唯一的，一个页面不能有两个tag有相同的id，引用的时候用#id来找一个是点，一个是# js 里面有一个promise的概念，和java8的一些流式理念有点像 关闭ESlint，Eslint实在是太严格了，有点妨碍开发效率 html中audio tag不识别本地文件，需要放在static文件下，放在src文件夹里就是404，一开始的时候我这么写”src=’../assets/赵雷-成都.mp3’”，死活放不出来，换成”file://“开头也不行，换成网易云音乐的http地址就好了。最后换成’static目录下’。终于放出来了，“让我掉下眼泪的是，简直日了X”，还蛮押韵的。 atom可以同时预览两个选项卡，右键,split right，用于copy and paste比较方便 css里面可以写”background-image: url(./somefile.png)”，就是相对路径的意思。 10.css里面的class继承是同时在一个tag里面添加class=”class_a class_b”，中间一个空格，需要什么拿什么 css分三种，外部样式表（写在另一个css文件里），内部样式表(写在header tag中)和内联样式表(写在单独的tag里面) 日常开发出错记录 Vue warn]: Property or method is not defined on the instance but referenced during render。原来是template里面的html某个元素里面调用了XXX，而这个XXX并没有在当前Vue实例中声明。 Cannot read property ‘state’ of undefined.这其实就是在vue component中访问this.$store ===undefines了，需要确保Vue的声明中1234567// root instancenew Vue(&#123; // eslint-disable-line no-new el: \"#app\", store, router, render: h =&gt; h(App)&#125;) 3. tools,tangiable takeaways atom plugin ide-typescript sucks , after disable the plugin ,the autocomplete feature works againself. config atom behind a firewall : apm config set https-proxy https://127.0.0.1:1080apm config set strict-ssl false 官方的库 Vuex是负责全局状态管理的，参考 组件间通信的方式 参考 Vue JS 2 Tutorial github repo jsonPlaceHoder css Sass JavaScript 教程 ES6相关 css教程 widgets 2018 我所了解的 Vue 知识大全（一）","tags":[{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"},{"name":"javaScript","slug":"javaScript","permalink":"https://haldir65.github.io/tags/javaScript/"},{"name":"Vue","slug":"Vue","permalink":"https://haldir65.github.io/tags/Vue/"}]},{"title":"http2笔记","date":"2017-09-01T06:52:35.000Z","path":"2017/09/01/2017-09-01-how-much-an-http-s-cost/","text":"http建立在tcp,ip基础上，tcp协议的可靠性意味着每次http请求都会分解为多次ip请求。很多出于book keeping的东西占用了实际发送数据的相当一部分，具体占用多少。由此顺便展开到http和tcp的基本关系。 大部分基于Hadi在2016年的演讲 1. Http的几个概念1.1 bandwidth和latency的概念bandwidth是指数据传输的速度上限（运营商设置），latency是物理距离限制的信号传递到达的时间(中美之间的延迟一般180ms左右，这是物理距离决定的)。 1.2 为什么http1.1差劲这是由于latency决定的，跟bandwidth无关。假设客户端和服务器之间存在一定带宽限制，随着带宽上限的提高，两者之间的传输速度趋于平衡。只有在路不够宽的时候，路的宽度才会成为交通的阻碍，如果路足够宽，那么通信双方的通信速度只和两者之间的物理距离有关。要命的是，每一次连接都受到延迟影响。 1.3 现代网站的复杂化程度使得网络请求越来越频繁http（超文本传输协议），最初设计的时候确实只需要传输一些固定的文字，可能只要一条连接就够了。随着现在网页越来越复杂，打开一个网页，在chrome里面能看到一瞬间请求的资源多达几十个甚至上百个。想象下，每条连接都会受到latency的影响，浪费的时间成倍数增长。webpagetest可以展示加载一个页面的过程中都发起了哪些请求，并以waterfall view的形式展示出来。比直接在chrome里面看更加直观。 1.4 ISO OSI Layer一共七层 Application (Http在这一层，但人们习惯把它当做第四层) Presentation Session Transport (Tcp在这) Network Link Physical Http本身是OK的，tcp为了确保可靠性，建立连接要三次握手，断开连接要四次挥手。真正有用的数据传输只在这两者之间。每次发起请求，都需要带上这些必要的数据传输。这里面还有Handshake，客户端每收到一个包，都要向服务端发Acknowledgement(ACK)。还有Flow Control(两端之间传输数据，实现并不知道两者之间的道路有多宽，所以先传100byte试试，一切ok在提到200byte，接着提到500byte,万一出现问题，退回到200byte,这就叫congestion)。Flow Control的存在是有道理，但却使得每一条连接都得从很小的传输速度进行尝试，这就造成了延迟的增大。 1.5 HTTP 0.9 始于 1991年0.9版本的Http还没有header,1996年的Http 1.0 加入了Header。但这种协议的设计初衷并不是为了现在这种一个网页带上300个请求的事实而设计的。 1999年，http 1.1 加入了Connection close（默认是Keep-Alive）。Keep-Alive的好处是Tcp连接不会在一个http请求结束之后就断开，也就没有三次握手这种东西了。 1.6 一些前人总结的优化技巧 Sigle connection (/index.html；style.css全都放在一个连接里面) Pipelining (一次性请求index.html以及style.css，这些东西全都放在一个请求里面)。这种方式的问题叫做 Head-of-line Blocking,由于tcp是可靠的协议，所以必须得等第一个请求的response回来，后续的请求才能执行。所以很多浏览器后来都放弃了对这种技术的支持。 于是人们开始一次性发出多个tcp请求。客户端能同时向一个host(不同host之间不影响)发起的请求最多6(不同浏览器数量不同)到8个。这么干的原因一方面是客户端自我保护，另一方面也是为了保护服务器不至于崩溃。具体在知乎上有讨论所以我们经常看到知乎把api数据放在zhihu.com上，图片放在zhimg.com,统计放在zhstatic.com上。有时候还会有pic2.zhimg.com，pic3.zhimg.com。。。等等这些，还不是为了加快网页加载速度。(这就叫Domian Sharding)，这么干也有坏处，More DNS lookups。找dns花的时间多了。 Inline resources直接把图片放在html里面传回来，这造成缓存失效。还有编码的问题 Concatenating and Spriting resourcesConcatenating是把所有的js文件塞在一个大的js里面返回，这也造成缓存失效，处理缓慢等问题。Spriting是把一大堆图片放在一整张图片里面，通过复杂的css选择其中的图片。 2. http2的开始Http有点像一种谈话式的协议，但tcp并不是。http并没有什么错,慢就慢在tcphttp2的一些要点如下 Binary Communication(http1.X 就是往socket里面写文字，h2直接写binary， 解析binary的速度要比解析文字快) Compression and optimization techniques(GZip没法压header，h2压缩了header) No change in HTTP semantics(主要是为了backward compatibility，GET,POST这些都没变) Not compatible with HTTP1.X but can be used ontop of it 2.1 SPDY谷歌设计了SPDY，h2建立在SPDY的基础上，google已经废弃了SPDY,据说是为了给h2让路。 2.2 h2过程h2传输的是Binary Frame，这里面包括HEADER FRAME和DATA FRAME, request的body和response的body都通过DATA FRAME传输。client发起一个请求，header里面包括(Upgrade:2c),一切OK的话，服务器返回一个status code 101(switching Protocol)。在response header里面返回一个Upgrade: h2c。 2.3 TLS ,SSL用于两点间传输binary数据TLS(Transport Layer Security),SSL(Secure Sockets Layer)ALPN(Application Level Protcol Negotitation) 2.4 数据传输的模型h2只有一条connection，里面有多个STREAM，STREAM里面包括了Request的HEADER FRAME和DATA FRAME以及Response的HEADER FRAME和DATA FRAME。FRAME里面有length,Type，Flags,ID(有了ID就能有sequence,也就能multiplexing，多路复用)以及Payload(数据)。FRAME TYPE有很多种，DATA,HEADER,WINDOW_UPDATE,SETTING，GOAWAY,这些在okhttp里面都能看到.用WireShark可以查看h2为什么快，Multiplexing，多路复用允许同时通过单一的 HTTP/2 连接发起多重的请求-响应消息 2.5 Header Compression本来GZip是不能压缩Header的，h2使用HPACK(很复杂的协议)，讲header(无非是键值对)中的key,value映射一份表，所以每一次发起请求，h2会将那些header变成数字，同时，只会发送改变了的header。（应用层无需关心，十分复杂） 2.6 Streams可以设置优先级都是在一条Connection中发送出去，开发者可以设置，例如，js优先级高点，image优先级低一点。 2.7 Flow Control Multiplexing requires ability of flow control WINDOW_UPDATE 2.8 Server Push客户端请求一个网页如 index.html，服务器会觉得，客户端很有可能还想要style.css和script.js。于是顺带着也给丢过来了。server push大致如此。这样的好处就是，client无需发起请求，省了流量。同时，client还可以说GO_AWAY,也就是拒绝SERVER的push。 3.现状现在很多网站已经支持了h2，twitter好像就是。一个很简单的方法就是看chrome里面的network，h2只有一条线。服务器这边，Ngnix 1.9.5支持h2，Apache 2.4.12开始支持客户端这边 Netty,OkHttp,Curl 都行进入h2，domain sharding,Concatenation and Spriting,InLining这些techniques都没有意义了。 演示 Update With 100Mbit/s Ethernet, a large file transfers at 94.1Mbit/s. That’s 6% overhead.所以本地记录的下载到的文件的速度要比运营商报告的实际带宽小一点，当然这只是一部分原因。 参考 what-of-traffic-is-network-overhead-on-top-of-http-s-requests Hadi Hariri — HTTP/2 – What do I need to know? WEB加速，协议先行腾讯技术工程事业群基础架构部高级工程师lancelot演讲 HTTP 2.0: why and how by Simone Bordet HTTP1.1中的一些优化策略失效 O’Reilly HTTP/2","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"}]},{"title":"jQuery手册","date":"2017-08-27T21:48:52.000Z","path":"2017/08/27/2017-08-27-jquery-stuff/","text":"jQuery是一个dom manipulate library，非常大。jQuery能干的事情包括： html 的元素选取 html的元素操作 html dom遍历和修改 js特效和动画效果 css操作 html事件操作 ajax异步请求方式,etc 1.安装1.1 使用微软或者谷歌的CDN,放在head tag里面这样做的好处是别的网站已经加载过的js文件可以直接读缓存，加快加载速度其实自己下载一份，用src引用也行1234&lt;head&gt;&lt;script src=\"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.8.0.js\"&gt;&lt;/script&gt;&lt;/head&gt; 这一段必须放在head里面，用自己的src或者微软，谷歌的cdn都可以。如果自己的js文件引用到了jQuery，需要把jQuery写在其他js前面 这之后，在console中输入&gt;window.jQueryƒ (a,b){return new r.fn.init(a,b)} 显然是已经注册了全局常量 2. 使用npm和express yarn add jquery express 然后在app.js中1app.use('/jquery', express.static(__dirname + '/node_modules/jquery/dist/')); 在html里 1&lt;script src=\"/jquery/jquery.js\"&gt;&lt;/script&gt; 1.1所有的jQuery函数都放在ready里面这一段script放在body后面也行，放在head里面也行12345$(document).ready(function()&#123;--- jQuery functions go here ----&#125;); 基本上就是window渲染完毕之后开始做一些事情，随便抄了一段知乎首页的Button这里面双引号(“”)和单引号(‘’)都行 1234$('button#button1').css(\"background-color\",\"#0f88eb\").css('border-radius','8px').css('padding-right','14px').css('padding-left','14px').css('color','white').css('line-height','30px') 前提是body里面放了一个class = button1 的button tag.这里只是改变了按钮的css样式，jQuery选择器有一些规则需要记住，主要就是如何选择html中的元素 $(this)表示当前html对象 $(‘p’)表示所以标签 $(‘p.intro’)表示所有class为intro的标签 $(‘.intro’)表示所有class为intro的标签 $(‘#intro’)表示所有id为intro的元素 $（’div#intro.head’) 所有id= ‘intro’的div中，找到class为’head’的元素 1.2 常用函数在script tag里面添加这一段，因为比对框架可能使用了$符号，为避免冲突，用var替代$符号1var jq=jQuery.noConflict()， 1.3 selector怎么写写一个tag，后面要么写id=’’，要么写class = ‘’，id要用”#”查找，class要用’.’查找。所以 文字 这种id是不会有响应的 1.4 还可以加事件回调可以在事件后面加回调，例如12345jq('.click_btn').slideUp(300)//可以认为第二个参数是一个function jq('.click_btn').slideUp(300,function &#123; alert('this will invoke after slideup finished') &#125;) 可以自己写函数，可以引用之前定义的函数。当然函数回调里面还可以加回调，当然会有callback hell。简单的解决方式，把作为第二个参数的函数提取成一个函数，引用函数名作为参数传进去就好了。另外，在js里面var myFunction = function(){//stuff }是完全成立的，函数也是var。 Todo 去复制一大堆文字，button，img的css样式，修改，继承，引用。手写实在太慢 jQuery插件 fx queue TakeAway jQuery必须写在最前面，如果网页中还有其他的js引用到了jQuery的话","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"},{"name":"jQuery","slug":"jQuery","permalink":"https://haldir65.github.io/tags/jQuery/"},{"name":"前端","slug":"前端","permalink":"https://haldir65.github.io/tags/前端/"}]},{"title":"Python工具手册","date":"2017-08-24T22:25:18.000Z","path":"2017/08/24/2017-08-24-python-cookbook/","text":"苦海无涯，Python是岸 1. 基本数据操作，及语法 函数参数默认参数、可变参数、关键字参数等 集合类型(list是中括号，tuple是小括号) unicodeError 面向对象 多线程，多进程多线程基本无用，基本语法很简单：12345678import threadingdef readIo() print('do stuff heavy')for i in range(10): threading.Thread(target=readIo).start()print('Finishing up') 2. Flask相关2.1 Flask Admin PannelFlask-Admin中文入门教程Please run on linux2.2.log上颜色博客，Pycharm的console无效，内置Terminal有效 2.7 小Web2.3 Pycharm里面import各种can’t resolve 的解决方法 from werkzeug import secure_filename from werkzeug.utils import secure_filename只是因为这个文件的包的位置挪了，import只能用绝对路径","tags":[{"name":"python","slug":"python","permalink":"https://haldir65.github.io/tags/python/"},{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"}]},{"title":"数据结构之-算法手册","date":"2017-08-12T19:04:16.000Z","path":"2017/08/12/2017-08-12-algorithm-enlightenment/","text":"1. 各种Search的原理及java代码实现java.utils.Arrays这个类中有各种经典的实现，直接对照着学就好了。 1.1 BinarySearch二分法查找，前提是数组中元素全部按照顺序(从小到大或者从大到小)排列好了。Android中SparseArray中用到了binarySearch android.support.v4.util.ContainerHelpers12345678910111213141516171819// This is Arrays.binarySearch(), but doesn't do any argument validation. static int binarySearch(int[] array, int size, int value) &#123; int lo = 0; int hi = size - 1; while (lo &lt;= hi) &#123; int mid = (lo + hi) &gt;&gt;&gt; 1; int midVal = array[mid]; if (midVal &lt; value) &#123; lo = mid + 1; &#125; else if (midVal &gt; value) &#123; hi = mid - 1; &#125; else &#123; return mid; // value found &#125; &#125; return ~lo; // value not present（） &#125; 最后一个用的是位非操作，就是把int(4 bytes)转成2进制所有的0变成1，所有的1变成0. 1.2 BubbleSort把较大的元素挪到右边，较小的元素挪到左边。每次从左到右边，两个两个的比较，大的往右挪，第一次完成后，最大的一个一定已经挪到最后了。接下里对n-1个元素进行同样的操作。java代码1234567891011121314151617public static void bubbleSort(int[] numArray) &#123; int n = numArray.length; int temp = 0; for (int i = 0; i &lt; n; i++) &#123; for (int j = 1; j &lt; (n - i); j++) &#123; if (numArray[j - 1] &gt; numArray[j]) &#123; temp = numArray[j - 1]; numArray[j - 1] = numArray[j]; numArray[j] = temp; &#125; &#125; &#125;&#125; Python实现，python中swap两个值非常方便：a , b = b , a 12345678def bubble_sort(lists): # 冒泡排序 count = len(lists) for i in range(0, count): for j in range(i + 1, count): if lists[i] &gt; lists[j]: lists[i], lists[j] = lists[j], lists[i] return lists the worst case scenario ：array完全倒序 o(n^2)the best case scenario : array已经排序好 Ω（n） 1.3 Insertion Sort基本上就是把一个数组从左到右迭代，第一遍声明第一个元素是sorted，第二遍看下第二个和第一个是不是有序的，第二遍完成后第二个元素是sorted。第三遍把前三个排序好。下面这段代码是从华盛顿大学教程抄的，应该没问题。12345678910public static void insertionSort(int[] a)&#123; for (int i=1;i&lt;a.length;i++)&#123; int temp = a[i]; int j; for(j=i-1;j&gt;=0&amp;&amp;temp&lt;a[j];j--) a[j+1] = a[j] a[j+1] = temp; &#125;&#125; 核心算法就是第N此排序完成后，前N个元素已经排序完毕。 the worst case scenario ：array完全倒序 o(n^2)the best case scenario : array已经排序好 Ω（n） 1.4 Merge Sort这个算法比较复杂，一图胜千言参考其实就是把array打成一半一半，直到变成多个大小为2的数组，然后再合并起来。java代码直接复制粘贴了，保留包名是对作者的尊重：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package com.java2novice.sorting;public class MyMergeSort &#123; private int[] array; private int[] tempMergArr; private int length; public static void main(String a[])&#123; int[] inputArr = &#123;45,23,11,89,77,98,4,28,65,43&#125;; MyMergeSort mms = new MyMergeSort(); mms.sort(inputArr); for(int i:inputArr)&#123; System.out.print(i); System.out.print(\" \"); &#125; &#125; public void sort(int inputArr[]) &#123; this.array = inputArr; this.length = inputArr.length; this.tempMergArr = new int[length]; doMergeSort(0, length - 1); &#125; private void doMergeSort(int lowerIndex, int higherIndex) &#123; if (lowerIndex &lt; higherIndex) &#123; int middle = lowerIndex + (higherIndex - lowerIndex) / 2; // Below step sorts the left side of the array doMergeSort(lowerIndex, middle); // Below step sorts the right side of the array doMergeSort(middle + 1, higherIndex); // Now merge both sides mergeParts(lowerIndex, middle, higherIndex); &#125; &#125; private void mergeParts(int lowerIndex, int middle, int higherIndex) &#123; for (int i = lowerIndex; i &lt;= higherIndex; i++) &#123; tempMergArr[i] = array[i]; &#125; int i = lowerIndex; int j = middle + 1; int k = lowerIndex; while (i &lt;= middle &amp;&amp; j &lt;= higherIndex) &#123; if (tempMergArr[i] &lt;= tempMergArr[j]) &#123; array[k] = tempMergArr[i]; i++; &#125; else &#123; array[k] = tempMergArr[j]; j++; &#125; k++; &#125; while (i &lt;= middle) &#123; array[k] = tempMergArr[i]; k++; i++; &#125; &#125;&#125; 看视频比较方便 1.5 Selection Sort每次把数组里面最小的元素挪到最左边,图片是从这里抄的java代码也是抄的123456789101112131415161718192021222324252627282930package com.java2novice.algos;public class MySelectionSort &#123; public static int[] doSelectionSort(int[] arr)&#123; for (int i = 0; i &lt; arr.length - 1; i++) &#123; int index = i; for (int j = i + 1; j &lt; arr.length; j++) if (arr[j] &lt; arr[index]) index = j; int smallerNumber = arr[index]; arr[index] = arr[i]; arr[i] = smallerNumber; &#125; return arr; &#125; public static void main(String a[])&#123; int[] arr1 = &#123;10,34,2,56,7,67,88,42&#125;; int[] arr2 = doSelectionSort(arr1); for(int i:arr2)&#123; System.out.print(i); System.out.print(\", \"); &#125; &#125;&#125; 注意，每次遍历都都会意味着数组分为有序和无序两部分，遍历是从无序的数组第一个开始的，并且将无序数组中的最小值与无序数组第一个元素swap一下。就是很直观的每次把最小的拿到最左边的做法。 1.6 Quicksort一种比较快速的排序方法视频选中数组最后一个元素，称之为pivot。然后从左到右找，把所有小于pivot的元素挪到左边。然后把pivot挪到刚才那个元素右边，一直重复下去。 1.7 TimSortjava的Collections.sort的算法，Comparison Method Violates Its General Contract!) 2. 其他算法有环链表的判断问题。时间复杂度和空间复杂度的最优解是创建两根迭代速度不一样的指针 下面的代码来自csdn1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class LinkLoop &#123; public static boolean hasLoop(Node n)&#123; //定义两个指针tmp1,tmp2 Node tmp1 = n; Node tmp2 = n.next; while(tmp2!=null)&#123; int d1 = tmp1.val; int d2 = tmp2.val; if(d1 == d2)return true;//当两个指针重逢时，说明存在环，否则不存在。 tmp1 = tmp1.next; //每次迭代时，指针1走一步，指针2走两步 tmp2 = tmp2.next.next; if(tmp2 == null)return false;//不存在环时，退出 &#125; return true; //如果tmp2为null，说明元素只有一个，也可以说明是存在环 &#125; //方法2：将每次走过的节点保存到hash表中，如果节点在hash表中，则表示存在环 public static boolean hasLoop2(Node n)&#123; Node temp1 = n; HashMap&lt;Node,Node&gt; ns = new HashMap&lt;Node,Node&gt;(); while(n!=null)&#123; if(ns.get(temp1)!=null)return true; else ns.put(temp1, temp1); temp1 = temp1.next; if(temp1 == null)return false; &#125; return true; &#125; public static void main(String[] args) &#123; Node n1 = new Node(1); Node n2 = new Node(2); Node n3 = new Node(3); Node n4 = new Node(4); Node n5 = new Node(5); n1.next = n2; n2.next = n3; n3.next = n4; n4.next = n5; n5.next = n1; //构造一个带环的链表,去除此句表示不带环 System.out.println(hasLoop(n1)); System.out.println(hasLoop2(n1)); &#125;&#125; 1234567891011121314151617181920212223242526给定两单链表A、B，只给出两头指针。请问：1、如何判断两单链表（无环）是否相交？有两种可取的办法：（1）人为构环，将链表A的尾节点指向链表B，再判断是否构环成功？从链表B的头指针往下遍历，如果能够回到B，则说明相交（2）判断两链表最后一个节点是否相同，如果相交，则尾节点肯定是同一节点2、如何判断两单链表（不知是否有环）相交？先判断是否有环，判断是否有环可以使用追逐办法，设置两个指针，一个走一步，一个走两步，如果能相遇则说明存在环（1）两个都没环：回到问题1（2）一个有环，一个没环：不用判断了，肯定两链表不相交（3）两个都有环：判断链表A的碰撞点是否出现在链表B的环中，如果在，则相交。（相交时，环必定是两链表共有的）3. 最小栈的实现需要两个栈，A和B，B用于存储A中当前min的index，B中由上而下依次是A的最小，第二小，第三小。。。所以万一A中的最小被pop掉了，直接拿B顶上的元素，始终是最小的。时间复杂度是O(1)，空间复杂度最坏是O(N)4. 参考Java关于数据结构的实现：树","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"},{"name":"algorithm","slug":"algorithm","permalink":"https://haldir65.github.io/tags/algorithm/"}]},{"title":"高并发实践手册","date":"2017-08-03T21:04:28.000Z","path":"2017/08/03/2017-08-03-high-concurrency-recipes/","text":"The difference between “concurrent” and “parallel” executionGood to know 1. 同时对共享资源进行操作好一点的加锁的方式1234567891011@Override public void run() &#123; final ReentrantLock lock = this.lock; lock.lock(); //拿不到lock的Thread会挂起 try &#123; this.mList.add(\"new elements added by\" + mIndex + \"\"); //对共享资源的操作放这里 &#125; finally &#123; lock.unlock(); //记得解锁 &#125; &#125; 2. ThreadLocal比较好的用例在Andriod的Looper中Looper.prepare()12345678910111213141516private static void prepare(boolean quitAllowed) &#123; if (sThreadLocal.get() != null) &#123; throw new RuntimeException(\"Only one Looper may be created per thread\"); &#125; sThreadLocal.set(new Looper(quitAllowed));//sThreadLocal是static的，注意leak &#125;// ThreadLocal public void set(T value) &#123; Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); //ThreadLocalMap就是一个Entry为WeakReference（WeakRWeakReference不是有get方法嘛，也是key-value的形式）。上面返回当前Thread的成员变量。（所以说Thread创建也是很耗费内存的嘛） if (map != null) map.set(this, value);//注意这个this是sThreadLocal，static的 else createMap(t, value); &#125; 一个比较好的关于ThreadlLocal为什么容易leak的解释，ThreadLocal是作为ThreadLocalMap中的Entry的key存在的，也就是Thread-&gt; ThreadLocalMap -&gt; Entry -&gt; WeakReference of ThreadLocal 。想想一下，假如外部调用者释放了ThreadLocal的引用，这个Entry中的key就成为null了，但是这个Entry中的Value还在，一直被Thread持有着。所以这事还是在于Thread的生命周期可能很长。fix的方案： 外部确定不用的时候记得调用下remove就好了。 所以避免leak的话，记得调用ThreadLocal.remove每一条线程调用ThreadLocal的set方法时都只能改变属于自己（线程）的值，调用get的时候也只能读到自己曾经设置的值。在多条线程面前，一个ThreadLocal类似于一个银行，每条线程只能保存或者更改读取自己的保险柜里的东西，保险柜钥匙即Thread自身。 3. Fork/join since java 7有些任务是可以分块的。work-stealing的实现 4. ArrayBlockingQueue Thread Safe构造函数里面就加了锁，是为了避免指令重排，保证可见性 5.ReentrantLock 不公平锁在jdk1.5里面，ReentrantLock的性能是明显优于synchronized的，但是在jdk1.6里面，synchronized做了优化，他们之间的性能差别已经不明显了。 6. StampedLocks(java 8)java 1.5 就有了ReentrantReadWriteLock，用于实现专门针对读或者写的lockjava 8提供了StampedLocks,lock方法返回一个long的时间戳，可以用这个时间戳release lock，或者检测lock是否有效。例如，tryConvertToOptimisticRead,假如在这个读的时间段内未发生其他线程的写操作，可以认为数据是有效的。像这样 假如有线程通过lock.writeLock()获得了写锁，只要不unlockWrite，所有的调用lock.readLock或者tryConvertToOptimisticRead都不会成功。 假如有线程获取了读锁，即调用了lock.readLock()，或者tryReadLock获得读取锁。读取获取锁并不是加锁，读并不是危险操作，获取锁只是为了检测读取的过程中是否发生过写 Optimistic Reading ，即tryConvertToOptimisticRead,只有在当前锁不被写持有的时候才返回一个非零值，这个值用于在读取完毕之后用validate检测本次读取的间隙中是否发生过写操作。 7. Android官方文档上对于happens-before的准则有详细的描述happens-before，主要是jdk本身提供的primitive遵守的并发准则。 8. lock的声明方式一般synchronize(object)就好了,但有更经济的方式123456789101112Object lock = new Object();private byte[] lock = new byte[0]; // 特殊的instance变量 Public void methodA() &#123; synchronized(lock) &#123; //… &#125; &#125; 零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而1Object lock = new Object() ;则需要7行操作码。 9. CountdownLatch的简单使用作者：天然鱼链接：http://www.jianshu.com/p/cef6243cdfd9來源：简书 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253public class CountDownLatchTest &#123; private int threadNum = 5;//执行任务的子线程数量 private int workNum = 20;//任务数量 private ExecutorService service; private ArrayBlockingQueue&lt;String&gt; blockingQueue; private CountDownLatch latch; @Before public void setUp() &#123; service = Executors.newFixedThreadPool(threadNum, new ThreadFactoryBuilder().setNameFormat(\"WorkThread-%d\").build()); blockingQueue = new ArrayBlockingQueue&lt;&gt;(workNum); for (int i = 0; i &lt; workNum; i++) &#123; blockingQueue.add(\"任务-\" + i); &#125; latch = new CountDownLatch(workNum);//计数器的值为任务的数量 &#125; @Test public void test() throws InterruptedException &#123; SoutUtil.print(\"主线程开始运行\"); for (int i = 0; i &lt; workNum; i++) &#123; service.execute(new WorkRunnable()); &#125; latch.await();//等待子线程的所有任务完成 SoutUtil.print(\"主线程去做其它事\"); &#125; //用blockQueue中的元素模拟任务 public String getWork() &#123; return blockingQueue.poll(); &#125; class WorkRunnable implements Runnable &#123; public void run() &#123; String work = getWork(); performWork(work); latch.countDown();//完成一个任务就调用一次 &#125; &#125; private void performWork(String work) &#123; SoutUtil.print(\"处理任务：\" + work); try &#123; //模拟耗时的任务 Thread.currentThread().sleep(60); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 10.指令重排不是说说而已为什么说指令重排序会影响 items 的可见性呢？创建一个对象要分为三个步骤： 1231 分配内存空间2 初始化对象3 将内存空间的地址赋值给对应的引用 但是由于指令重排序的问题，步骤 2 和步骤 3 是可能发生重排序的，如下：1231 分配内存空间2 将内存空间的地址赋值给对应的引用3 初始化对象 这也就解释了我们平时是怎么写单例的 11.HashMap不是线程安全的，可能会在reHash里形成死锁非常烧脑 10. CyclicBarrier——————————mere trash————————————————- 构造函数也不是线程安全的(因为指令重排) 同步一个对象的前提是各方都同意使用同一把锁作为调用方法的前提，单方面加锁并不限制不尊重锁机制的使用者。 在多线程的场景下，无逻辑相关的代码写的前后顺序并无意义，原因是编译器会进行指令重排。 volatile并不是Atomic操作，例如，A线程对volatile变量进行写操作(实际上是读和写操作)，B线程可能在这两个操作之间进行了写操作；例如用volatile修饰count变量那么 count++ 操作就不是原子性的。而AtomicInteger类提供的atomic方法可以让这种操作具有原子性如getAndIncrement()方法会原子性的进行增量操作把当前值加一 CopyOnWriteArrayList和Collections.synchronizedList相比。在高并发前提下，前者读的性能更好，后者写的性能更好（前者的写性能极差）。CopyOnWriteArrayList与Collections.synchronizedList的性能对比。CopyOnWriteArrayList适合做缓存。 java io为什么慢，有一个原因是InputStream的read方法和OutputStream的write方法都是加了synchronized的。而Okio里面synchronized方法我没找到，另外，真的想要io性能的话，用nio。 参考 看起来 ReentrantLock 无论在哪方面都比 synchronized 好 Jesse Wilson - Coordinating Space and Time 一级缓存，时钟周期volatile硬件层面的实现原理 StampedLock in Java Java 8 StampedLocks vs. ReadWriteLocks and Synchronized","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"},{"name":"concurrency","slug":"concurrency","permalink":"https://haldir65.github.io/tags/concurrency/"},{"name":"java","slug":"java","permalink":"https://haldir65.github.io/tags/java/"}]},{"title":"多线程断点续传原理及实现","date":"2017-08-01T22:19:31.000Z","path":"2017/08/01/2017-08-01-mutithread-downloader/","text":"主要讲一下在java中实现多线程断点续传的原理,主要讲断点下载的原理。 其实就是在Http请求里面加上一个”range”的header，HttpUrlConnection可以这么干： conn.setRequestProperty(“Range”, “bytes=” + 500 + “-“ + 1000); 也就是告诉服务器上次下载到的位置，本地写文件可以使用RandomAccessFile。本地需要记录下上次中断后停下来的位置。可以用db记录，也可以用sp记录。 这里面的难点在于多线程同步问题，高效率锁。还得要使用ArrayBlockingQueue。 1. 获取要下载的内容的contentLengthHttpUrlConnection有一个connection.getContentLength()方法，用于获取内容大小(bytes) 2. 大文件上传避免oom1234567891011121314Caused by java.lang.OutOfMemoryError: Failed to allocate a 65548 byte allocation with 32012 free bytes and 31KB until OOMat com.android.okio.Segment.&lt;init&gt;(Segment.java:37)at com.android.okio.SegmentPool.take(SegmentPool.java:48)at com.android.okio.OkBuffer.writableSegment(OkBuffer.java:511)at com.android.okio.OkBuffer.write(OkBuffer.java:424)at com.android.okio.OkBuffer.clone(OkBuffer.java:740)at com.android.okhttp.internal.http.RetryableSink.writeToSocket(RetryableSink.java:77)at com.android.okhttp.internal.http.HttpConnection.writeRequestBody(HttpConnection.java:263)at com.android.okhttp.internal.http.HttpTransport.writeRequestBody(HttpTransport.java:84)at com.android.okhttp.internal.http.HttpEngine.readResponse(HttpEngine.java:790)at com.android.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:405)at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:349)at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponseCode(HttpURLConnectionImpl.java:517)at com.android.okhttp.internal.http.DelegatingHttpsURLConnection.getResponseCode(DelegatingHttpsURLConnection.java:105) 参考 con.setChunkedStreamingMode(1024);//内部缓冲区—分段上传防止oomHttpURLConnection教程上传的时候不走HttpUrlConnection，直接创建Socket模拟POST避免大文件OOM 3. 现有的实现方案非常优秀的library，英语流利说喜欢搞多进程。Aspsine英语流利说下载文件的本质是inputstream.read 参考 简书 Demo MultiThreadDownload for Android csdn 断点上传麻烦点，要自己搭server","tags":[{"name":"java","slug":"java","permalink":"https://haldir65.github.io/tags/java/"}]},{"title":"二进制编码总结","date":"2017-07-30T17:45:51.000Z","path":"2017/07/30/2017-07-30-decoding-the-secret-of-binary/","text":"OkHttp作者Jesse Wilson在2016 Droidcon NYC上作了一篇关于编码的演讲，十分有趣。对于了解计算机基础非常有用，结合着写一些关于这方面的笔记。 1.重新学习Java基本数据类型基本数据类型之间的转换初学java的时候都说没必要记住各种基本数据类型的大小范围。这里补上一些：1234567891011121314151617这些范围都是闭区间byte：8位，最大存储数据量是255，存放的数据范围是[-128,127]间, singed。short：16位，最大数据存储量是65536，数据范围是[-32768~32767]之间,signed。int(整数)：32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1。[-2^31, 2^31-1],singed。long(长整数)：64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1。[-2^63,2^63-1],signed。float(单精度数)：32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F。unsigned。//这个范围只是正数部分的double(双精度数)：64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加。unsigned。 //这个范围是正数部分的boolean：只有true和false两个取值。char：16位，存储Unicode码，用单引号赋值。 这个表的顺序是有道理的，byte-&gt;short-&gt;int-&gt;long这类表示的都是整数（不带小数点的）;float-&gt;double这类表示的都是浮点数(计算机里没有小数点，都是用类似科学计数法来表示的); 后面这俩比较特殊：boolean只有两个值;char专门用来表示Unicode码，最小值是0，最大值是65535(2^16-1); (这个范围是严格限定的，比如byte a = 127都没问题，byte a = 128 立马编译有问题。)另外，char是为数不多的可以在java IDE里面像python一样写单引号的机会：char c = ‘1’ // okchar c = ‘12’//错误char c = 12 //正确 当一个较大的数和一个较小的数在一块运算的时候，系统会自动将较小的数转换成较大的数，再进行运算。这里的大小指的是基本类型范围的大小所以(byte、short、char) -&gt; int -&gt; long -&gt; float -&gt; double这么从小往大转是没有问题的。编译器自动转，所以经常不会被察觉。byte、short、char这三个是平级的，相互转换也行。试了下,12345678910111213byte b = 3;char c = '2';short s = 23;s = b; //只有byte往上转short是自动的b = (byte) s;s = (short) c;c = (char) s;b = (byte) c;c = (char) b; 强转就意味着可能的精度损失。 所以除去boolean以外: char byte,short,int,long float,double可以分成这三类，从小往大转没问题，同一类从小到大转没问题。 具体到实际操作上： char-&gt;byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double 有一个操作数是long，结果是long 有一个操作数是float,结果是float 有一个操作数是double，结果是double long l = 424323L ,后面的L要大写。 这些整数都是没办法表示一个小数的，要用float或者double，后面加上f（F）或者L。 char(16位)，能表示的范围大小和short一样，是用单引号括起来的一个字符(可以是中文字符)，两个字符不行。 char的原理就是转成int，根据unicode编码找到对应的符号并显示出来。 两个char相加，就是转成int之后两个int相加 double类型后面可以不写D float后面写f或者F都一样 2. Java中注意的点java编译器将源代码编译位字节码时，会用int来表示boolean(非零表示真)byte,short,int,long这些都是有符号的整数，八进制数以0开头，十六进制数字以0x开头java7 开始 ，可以直接在代码里写二进制数，例如：205 = 0b110_1101 3. Encoding解释 hexadecimal 十六进制 Decimal 十进制 Octal 八进制 3.1 用二进制表示(0,1)任何文字的能力数据的发送方和接收方对传输数据的结构类型达成一致，即(Encoding)。 8 bit = 1 Byte (为什么是8，据说60年代是6)，8bit能够表达的范围也就是2^8 = 0-256.1967年，ASCII码诞生，即American Standard Code for Information Interchange，即将Byte转成文字的一张表。ASCII只用了7个bits，原因是当时硬件很贵。所以就能够表示128个字符。随便找了下这张表 例如0表示NULL, 65表示A(大写),93表示标点符号”]”。举例：单词Donut的每一个字母对应的ASCII分别是：十进制 ：68 111 110 117 116二进制: 01000100 01101111 01101110 01110101 01110100所以这么发送出去，接收者就知道是Donut了 3.2 可是128个字符不足以表示世界上所有的文字 Charset 字符集1991年出现Unicode，用于表示所有的字符，所有语言的每一个字符都能有一个唯一的id（数字）。为了能够表达这么大的一个范围，所以得多用点内存，于是UTF-16(16-bit Unicode Transformation Format)出现了，每一个字符都得用2bytes来表示。至于这张表的范围,2^16 = 65536(好熟悉的数字)，这也就是java的char类型的来源，char的定义就是16位Unicode字符。这样做有一个显然的缺陷。Unicode是ASCII的超集，D在ASCII中只要 01000100，在Unicode中却要在前面补上毫无意义的8个0，浪费了空间。 UTF-16最大范围65536 但还是没法表示一些特殊字符，例如Emoji,Dount Emoji的id是127,849。原因是90年代的设计者没有想到今天会出这么多emoji。解决办法是”surrogate pairs”。下面解释：java的String其实不过是一个char Array的wrapper，如果在ide里面看的话，String里面的char[]每个数字都代表这个位置的Unicode id。所以经常在IDE里debu看到String里面有char[],1=”67”；2=“79”。。。这种东西，其实也就是这个String（字符串）中对应位置的字符的unicode码。对于Emoji，会用两个char来表示。如何确定相邻的两个字符应该用来表示一个Emoji而是两个独立的字符？去看Emoji的Unicode表的话，这四个byte连在一起一般长这样： \\xF0\\x9F\\x98\\x81 \\xF0\\x9F\\x98\\x82 \\xF0\\x9F\\x98\\x83 \\xF0\\x9F\\x98\\x84 中间那个\\x9F\\x98就是surrogate pairs的标志所以，要认识到char本身还是不足以表示所有的字符这样的代码要是拿来打印Emoji，只会讲原本4byte的Emoji拆成2个char，所以就在console里面看到一些乱码。 12345String s = &quot;一些包含Emoji的文字&quot;for(int i =0 ,size = s.length();i&lt;size;i++)&#123; char c = s.charAt(i); System.out.println(&quot;The Caharacter at %d is &apos;%c&apos;%n&quot;,i,c);&#125; 正确的做法是:123456String s = &quot;一些包含Emoji的文字&quot;for(int i =0 ,size = s.length();i&lt;size;)&#123; int c = s.codePointAt(i); System.out.println(&quot;The Caharacter at %d is &apos;%c&apos;%n&quot;,i,c); i+=Cahracter.charCount(c);//正确识别char数量&#125; 汉字用UTF-8编码的话，有些还是会超出两个字节的，比如“𠮷”，wiki给这货的解释。十进制是134071，已经超出两个字节(65536)了。转成十六进制的话就是“F0 A0 AE B7”，utf-8本身就是可变长度的编码format，所以这货占了4个字节也正常。1234567String w = \"\\uD842\\uDFB7\"; //这个“\\u”是ide自己加上去的，注意和上面的十六进制不一样，是因为utf-8前面要加一些0,1什么的 System.out.println(String.valueOf(hex)); // 134071 for (int i = 0,size = w.length(); i &lt;size;) &#123; int c = w.codePointAt(i); System.out.println(String.format(\"The character at %d is %c \", i, c)); //成功打印出这个汉字 i += Character.charCount(c); &#125; 3.3 UTF-8出现8-bit Unicode Transformation Format于1998年出现，之前提到了2个byte表示一个字符实在太浪费了，utf-8的做法是将每个字符所需要的长度变成可变的。 多数字符只用1byte，有些用到2,3个byte，Donut的Emoji用4bytes. &lt;=7个bit的（ASCII）： 0XXXXXX (我用X表示可以被填充的空间)&lt;=11个bit ：110XXXXX 10XXXXXX (第一个byte以110开头，后面以10开头)&lt;=16个bit : 1110XXXX 10XXXXXX 10XXXXXX (第一个byte以1110开头，后面跟两个10开头的bytes)&lt;=21个bit : 11110XXX 10XXXXXX 10XXXXXX 10XXXXXX (第一个byte以11110开头，后面跟三个10开头的bytes) 现在来看看网上那些常用的中文转UTF-8工具怎么用，随便找一个找一个站长之家输入“美” ，对应的utf-8编码是”&amp;#x7F8E”，转Unicode是”\\u7f8e”查了下“美”这个字还真是“7F8E”。这里有张比较好的表格。二进制转unicode直接粘贴到这里的转16进制就可以了。转utf-8的话，来看这个其实是15个bit。所以这样写123456789101112137F8E显然是16进制，转成十进制是32654。转成二进制是11111111 0001110(注意只有15个bit,前面8个1)。转utf-8的时候，从后往前往上面的XXXX里面填充1110XXXX 10XXXXXX 10XXXXXX就变成了1110X111 10111110 10001110（注意有一个位置还空着）X用0补上，最终得到汉字&quot;美&quot;的utf-8二进制编码11100111 10111110 10001110读取的时候1111 111100 01110(7f8e) ，这三个byte就代表汉字”美”。 Integer.toBinaryString提供了将一个int(十进制)转成二进制字符的方法,即给一个十进制数字，转成”01010101110101”这样的String，方便看懂。 即转成一大堆”0101010110”来试一下，看怎么获得这些”01010101110101”.123456789public static void main(String[] args) &#123; String s = \"美\"; char[] array = s.toCharArray(); for (int i = 0,size = array.length; i &lt; size; i++) &#123; System.out.println(array[i]); System.out.println(Integer.toBinaryString(array[i])); &#125;&#125; //输出 111111110001110 古人诚不我欺也反过来，用一大堆”0101010111010”也能在java代码里写一个汉字出来 123char c = 0b111111110001110;String ns = new String(new char[]&#123;c&#125;);System.out.println(ns); 0b是java 1.7开始可以使用的用来直接在代码里写二进制的方式。so if you want improve the cooleness of your code…当然java早就准备好了相应的方法(二进制-八进制-十进制-十六进制)之间的互相转化123456789101112十进制转成十六进制：String Integer.toHexString(int i)十进制转成八进制String Integer.toOctalString(int i)十进制转成二进制 String Integer.toBinaryString(int i)十六进制转成十进制Integer.valueOf(\"FFFF\",16).toString() //不能处理带前缀的情况 0x八进制转成十进制Integer.valueOf(\"76\",8).toString() //前缀0可以被处理二进制转十进制Integer.valueOf(\"0101\",2).toString() String还有一个getByte(Charset)方法，可以传各种charset进去，i/o强调的是读写使用的都是相同的编码，否则就会出现乱码。 4.接下来讲颜色颜色就是RGB的组合,屏幕中每一个像素都是由三个subPixel组成的(分别是红绿蓝)，所以在ps里面经常会碰到255,XXX,XXX这种东西。0,0,0代表全黑，255,255,255(0-256也就是一个byte能够表达的范围)代表纯白。其他的颜色都是这三种颜色的组合，所以用三个byte就能表达一种颜色。所以经常在java代码里看到：123456view.setBackgroundColor(Color.parseColor(&quot;#87CEFA&quot;));//三个bytes//或者Color.RED//还有更好玩的tv.setTextColor(Color.rgb(255, 255, 255));//&quot;#XX XX XX&quot; 十六进制，256的范围，只需要2位数字就好了，所以总是看到00,01,10,...ff这样 在xml里面是这样的123456&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;resources&gt; &lt;color name=\"wl_blue\"&gt;#2878ff&lt;/color&gt; &lt;color name=\"wl_gray\"&gt;#c1c1c1&lt;/color&gt; &lt;color name=\"text_color\"&gt;#434343&lt;/color&gt;&lt;/resources&gt; 只不过少写了0x而已关于十六进制，多说一点 Colors: #ffffff URL escaping:http://example.com/?q=hello%20world Unicode code points: U+2020 ipv6地址： 2001∶0d02∶0000∶0000∶0014∶0000∶0000∶0095 都是十六进制(Dexadecimal)的应用 5.有了颜色就有了图片3个小像素组成一个像素，屏幕上无数个像素(颜色的点,每个像素大小为3bytes)组成了图片，图片只是一个颜色的2维数组(数组的每个元素是一个颜色)。那么一张6464pixel的图标大小为，64643 = 12 288bytes，现在的屏幕动辄百万像素，19801080的图片，大小是198010803 = 6.4MB。现在明白Android上图片为什么这么容易oom了吧。这还只是rgb，其实正规图片应该还有一个Alpha，即ARGB,好了，这下占用了192010804 = 8MB。所以Android在Bitmap里面提供了一些选项： BitMap.config.ALPAH_8 ：只存储透明度，不存储颜色信息 BitMap.config.ARGB_4444(Deprecated) ：Each pixel is stored on 2 bytes. (节省了一半) BitMap.config.ARGB_8888 : Each pixel is stored on 4 bytes. Each channel (RGB and alpha for translucency) is stored with 8 bits of precision (256 possible values.) This configuration is very flexible and offers the best quality. It should be used whenever possible.这也就是上面提到的一个像素三个小像素外加一个透明度的算法。 Bitmap.Config RGB_565： Each pixel is stored on 2 bytes and only the RGB channels are encoded。(能这么省是因为这里面用5bit表示red，6bit表示green，5bit表示blue，这个划分似乎是UI行业的标准，用了一些近似算法。所以经常看到有人拿着两张ARGB_8888和RGB_565的图片来比较，然后批判RGB_565颜色不准)。RBG_565本来就不是冲着颜色准确去的。其实还有RBG_232这种更加不准确的。 日常开发都是用的ARGB_8888,一个像素要用4bytes内存，所以bitmap真的非常耗内存。一篇研究bitmap存储位置的文章，讲到cpp层。根据Dianne Hackborn的解释 A Bitmap is just an interface to some pixel data. The pixels may be allocated by Bitmap itself when you are directly creating one, or it may be pointing to pixels it doesn’t own such as what internally happens to hook a Canvas up to a Surface for drawing. (A Bitmap is created and pointed to the current drawing buffer of the Surface.) 看下java层的bitmap的成员变量，并没有什么特别大的数组，所以真正的像素数据的存储不是放在bitmap这个对象里的。 根据懂c++人的分析，通过调用jni的CallObjectMethod来调用gVimRuntime的gVMRuntime_newNonMovableArray方法来创建一个数组，这个数组类型和长度分别用gByte_class和size表示。CallObjectMethod函数返回一个jbyteArray，此时，在Java层已经创建了一个长度为size的byte数组。 也就符合official document中说的 the pixel data is stored on the Dalvik heap along with the associated bitmap. 说法了。我的理解是，庞大的像素数据是放在java层的，因为是直接gVimRuntime进行调用gVMRuntime_newNonMovableArray来创建的，并不会对开发者暴露这个数组的直接引用(直接乱改也不好吧)，而是使用bitmap这个对象进行间接操作。 6.来看一张图片是怎么写出来的(在文件系统中)我这里直接把Jesse Wilson的代码复制过来，大意就是写一个bmp文件的方法，先写文件头，然后从那个int[][]中读取数组，写进一个文件，也就得到一个.bmp文件了。文件就是这么写的。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162public final class Bitmap &#123; private final int[][] pixels; public Bitmap(int[][] pixels) &#123; this.pixels = pixels; &#125; /** https://en.wikipedia.org/wiki/BMP_file_format */ public void encode(BufferedSink sink) throws IOException &#123; int height = pixels.length; int width = pixels[0].length; int bytesPerPixel = 3; int rowByteCountWithoutPadding = (bytesPerPixel * width); int rowByteCount = ((rowByteCountWithoutPadding + 3) / 4) * 4; int pixelDataSize = rowByteCount * height; int bmpHeaderSize = 14; int dibHeaderSize = 40; // BMP Header sink.writeUtf8(\"BM\"); // ID. sink.writeIntLe(bmpHeaderSize + dibHeaderSize + pixelDataSize); // File size. sink.writeShortLe(0); // Unused. sink.writeShortLe(0); // Unused. sink.writeIntLe(bmpHeaderSize + dibHeaderSize); // Offset of pixel data. // DIB Header sink.writeIntLe(dibHeaderSize); sink.writeIntLe(width); sink.writeIntLe(height); sink.writeShortLe(1); // Color plane count. sink.writeShortLe(bytesPerPixel * Byte.SIZE); sink.writeIntLe(0); // No compression. sink.writeIntLe(16); // Size of bitmap data including padding. sink.writeIntLe(2835); // Horizontal print resolution in pixels/meter. (72 dpi). sink.writeIntLe(2835); // Vertical print resolution in pixels/meter. (72 dpi). sink.writeIntLe(0); // Palette color count. sink.writeIntLe(0); // 0 important colors. // Pixel data. for (int y = height - 1; y &gt;= 0; y--) &#123; int[] row = pixels[y]; for (int x = 0; x &lt; width; x++) &#123; int pixel = row[x]; sink.writeByte((pixel &amp; 0x0000ff)); // Blue. sink.writeByte((pixel &amp; 0x00ff00) &gt;&gt; 8); // Green. sink.writeByte((pixel &amp; 0xff0000) &gt;&gt; 16); // Red. &#125; // Padding for 4-byte alignment. for (int p = rowByteCountWithoutPadding; p &lt; rowByteCount; p++) &#123; sink.writeByte(0); &#125; &#125; &#125; public void encodeToFile(File file) throws IOException try (BufferedSink sink = Okio.buffer(Okio.sink(file))) &#123; encode(sink); &#125; &#125; 这里没有考虑压缩算法。这里面还有Big Ending和Small Ending的处理。Big Ending： 拿32bit ，一次读8bit，从左到右Little Ending: 拿32bit ,一次读8bit，从右到左读 7.从json到protoBuffer以及http2一般我们看到的json是这样的1234567&#123; \"price\": 14, \"gender\": true, \"height\": 1.65, \"grade\": null, \"time\": ,\"2016-09-30T18:30:00Z\"&#125; 注意那个事件戳，时间戳本可以用long(8bytes)表示，这上面的String的每个字符都在英文或者阿拉伯数字，所以在ASCII内，所以一个字符按照utf-8编码的话也就1byte，一个个数下来也有二十多个bytes。从8bytes到二十多个bytes，浪费了一半多的bits。数据量越大，编码越慢，传输越慢，解码越慢。 来看protocolBuffer，protocolBuffer一般长这样，每一个field都有一个独一无二的tag. 123456789101112131415161718message Person &#123; required string name = 1; required int32 id = 2; optional string email = 3; enum PhoneType &#123; MOBILE = 0; HOME = 1; WORK = 2; &#125; message PhoneNumber &#123; required string number = 1; optional PhoneType type = 2 [default = HOME]; &#125; repeated PhoneNumber phone = 4;&#125; 以 optional string email = 3 为例，ProtocolBuffer定义了一个length mode（enum,int32,int64是000,fixed64是001，String,message是010），拿一个byte出来，先把后面三位填上010，即XXXXX010，然后把3在前面，即00011010，一共只用了一个byte就把String email这句话表示出来了。即protobuffer只需一个byte就能表示key,同样的key，json要12byte（utf-8下一个字母一个byte）。value也是一样，转成hex的形式。印象中http2也是用数字来表示header key的，类似的节省数据的道理。 8. 补充8.1 Big-ending和Little-endian这名字其实跟文学作品有关 Notepad++可以右下角可以看到当前文件的编码方式，utf-8 dom跟微软有关，最好不要用. Python前面写的”# -- coding: utf-8 --“跟这事有关,”#!/usr/bin/python”是用来说明脚本语言是python的 unicode是字符集，utf-8是一种编码形式。 《格列夫游记》里面，吃鸡蛋先打打头还是小头详解 文档头部放一个BOM (用来表示该文件的字节序，BOM是FFFE或者FEFF，操作系统也就能判断是大端还是小端了)大小端的介绍 全角和半角跟GB2312把一些ASCII里面已有的拉丁字母又编码了一遍有关。 GB2312 是对 ASCII 的中文扩展.在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。 大端小端没有谁优谁劣，各自优势便是对方劣势 大小端的应用 windows记事本会强行给utf-8加上bom，主要是为了兼容旧版本系统。BOM就是（“FE FF”）这么几个二进制，notepad++需要装插件才能看二进制，比较好的解释看这篇.直接用InputStream往文件里写byte数组，接着读出来，编码不对就报错。 很多人都有用记事本编辑代码出错的经历，所以尽量不要用windows下的记事本编辑代码。notepad++默认保存为utf-8不带bom格式，所以编辑文件没什么问题。 123456789101112131415 一般操作系统都是小端，而通讯协议是大端的。4.1 常见CPU的字节序Big Endian : PowerPC、IBM、SunLittle Endian : x86、DECARM既可以工作在大端模式，也可以工作在小端模式。4.2 常见文件的字节序Adobe PS – Big EndianBMP – Little EndianDXF(AutoCAD) – VariableGIF – Little EndianJPEG – Big EndianMacPaint – Big EndianRTF – Little Endian另外，Java和所有的网络通讯协议都是使用Big-Endian的编码。 8.2 读取一个json文件先用BufferedSource将文件变成一个Source，再用Moshi从这个Source里面读数据 8.3 从一个byte[]中读取一个int或者写一个int可以这样在com.square.tape.QueueFile中看到12345678910111213private static int readInt(byte[] buffer, int offset) &#123; return ((buffer[offset] &amp; 0xff) &lt;&lt; 24) + ((buffer[offset + 1] &amp; 0xff) &lt;&lt; 16) + ((buffer[offset + 2] &amp; 0xff) &lt;&lt; 8) + (buffer[offset + 3] &amp; 0xff);&#125;private static void writeInt(byte[] buffer, int offset, int value) &#123; buffer[offset] = (byte) (value &gt;&gt; 24); buffer[offset + 1] = (byte) (value &gt;&gt; 16); buffer[offset + 2] = (byte) (value &gt;&gt; 8); buffer[offset + 3] = (byte) value;&#125; 一个int占据4个字节，没问题。 有一个一维整型数组int[]data保存的是一张宽为width，高为height的图片像素值信息。请写一个算法，将该图片所有的白色不透明(0xffffffff)像素点的透明度调整为50%。12345final int size = data.length;for(int i = 0; i&lt; size; i++)&#123; if(data[i] == 0xffffffff) data[i] = 0x80ffffff; // ARGB_8888 一个像素占据4个bytes，A(alpha)R(red)G(green)B(blue)。所以只要改alpha就好了&#125; 总结 软件开发能够接触到的最小单位byte就是8个排在一起的可以盛放0或者1的小槽子。从60年代的ASCII到后来的utf-8再到今天的utf-8，成熟的业界标准使得计算机行业能够跨语言形成信息处理，传输，消费的统一化，同时兼顾了效率。 图片只是无数颜色的组合，用byte表示RGB的方式使得电子产品显示图片变为可能。 在数据传输中，数据传输双方可以协商采取合理的传输协议，让通信量变得小，通信速度变快。 hexadecimal简化了写无数个01的过程，日常开发尽量写0xffffff这种形式。两个十六进制数字的组合通常代表一个byte的范围。 根据阮一峰的介绍，目前，Unicode的最新版本是7.0版，一共收入了109449个符号，其中的中日韩文字为74500个。可以近似认为，全世界现有的符号当中，三分之二以上来自东亚文字。 参考 Jesse Wilson | Decoding the Secrets of Binary Data 深入分析 Java 中的中文编码问题IBM出品","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"},{"name":"java","slug":"java","permalink":"https://haldir65.github.io/tags/java/"}]},{"title":"位运算总结","date":"2017-07-23T19:06:46.000Z","path":"2017/07/23/2017-07-23-manipulating-bits/","text":"位运算的好处至少有两点，由于是直接操作bit,没有任何包装类，速度快。另外一个就是节省内存了。 1.左移（&lt;&lt;）12345public class Test &#123; public static void main(String[] args) &#123; System.out.println(5&lt;&lt;2);//运行结果是20 &#125; &#125; 原理：5的二进制表示方式是：0000 0000 0000 0000 0000 0000 0000 0101向左挪两位就变成了0000 0000 0000 0000 0000 0000 0001 0100 //末位补零 ，也就是20 可以认为 5&lt;&lt;n就代表乘以2的n次方所以10KB可以这么写 ： 10&lt;&lt;10 2.右移(&gt;&gt;)和左移反过来，前面补0。一样的道理，不再赘述。 3. 无符号右移(&gt;&gt;&gt;)在java中一个int占32位，正数的首位是0，负数位-1。-5 就是1111 1111 1111 1111 1111 1111 1111 1011 正数右移，高位用0补；负数右移，高位用1补；负数无符号右移，用0补高位。 所以-5&gt;&gt;&gt;3 也就变成了0001 1111 1111 1111 1111 1111 1111 1111 //十进制536870911 注意，正数或者负数左移，低位都是用0补 4. 位与(&amp;)看实例:123public static void main(String[] args) &#123; System.out.println(5 &amp; 3);//结果为1 &#125; 原因： 5的二进制是： 0000 0000 0000 0000 0000 0000 0000 0101 3的二进制是： 0000 0000 0000 0000 0000 0000 0000 0011同一位上必须都为1，结果才为1，否则为0；于是结果就得到： 0000 0000 0000 0000 0000 0000 0000 0001 = 1 5. 位或（|）和位与相反同一位上只要有一个为1，就为1.只有两个都为0，才为0.二进制下： 5的二进制是： 0000 0000 0000 0000 0000 0000 0000 0101 3的二进制是： 0000 0000 0000 0000 0000 0000 0000 0011所以结果是 7 0000 0000 0000 0000 0000 0000 0000 0111所以 (5|3) = 7(这让人想到linux文件权限的777) 其实就是 111 111 111 （owner,creater,others） 6. 位异或(^)还是拿5和3一起算第一个操作数的的第n位于第二个操作数的第n位 相反，那么结果的第n为也为1，否则为0二进制下： 5的二进制是： 0000 0000 0000 0000 0000 0000 0000 0101 3的二进制是： 0000 0000 0000 0000 0000 0000 0000 0011所以结果是 6 0000 0000 0000 0000 0000 0000 0000 0110所以a^b可以用来判断两个Flag前后有没有发生变化，有时候如果发现前后flag没有变化，即不操作。 7.位非(~)位非是一元操作符，对一个数进行操作位非：操作数的第n位为1，那么结果的第n位为0，反之为1，就是所有的1变成0,0变成1。 5的二进制是： 0000 0000 0000 0000 0000 0000 0000 0101 倒过来就是： 1111 1111 1111 1111 1111 1111 1111 1010负整数转二进制的标准方法：先是将对应的正整数转换成二进制后，对二进制取反，然后对结果再加一。 8.一些衍生的操作符从上面的一些基本操作符衍生来的有 123456&amp;= 按位与赋值|= 按位或赋值^= 按位非赋值&gt;&gt;= 右移赋值&gt;&gt;&gt;= 无符号右移赋值&lt;&lt;= 赋值左移 和+=一个意思。至于那个运算符优先级，算了吧。 9.一些常用的小技巧// 1. 获得int型最大值System.out.println((1 &lt;&lt; 31) - 1);// 2147483647， 由于优先级关系，括号不可省略System.out.println(~(1 &lt;&lt; 31));// 2147483647 // 2. 获得int型最小值System.out.println(1 &lt;&lt; 31);System.out.println(1 &lt;&lt; -1); // 3. 获得long类型的最大值System.out.println(((long)1 &lt;&lt; 127) - 1); // 4. 乘以2运算System.out.println(10&lt;&lt;1); // 5. 除以2运算(负奇数的运算不可用)System.out.println(10&gt;&gt;1); // 6. 乘以2的m次方System.out.println(10&lt;&lt;2); // 7. 除以2的m次方System.out.println(16&gt;&gt;2); // 8. 判断一个数的奇偶性System.out.println((10 &amp; 1) == 1);System.out.println((9 &amp; 1) == 1); // 9. 不用临时变量交换两个数（面试常考）a ^= b;b ^= a;a ^= b; // 10. 取绝对值（某些机器上，效率比n&gt;0 ? n:-n 高）int n = -1;System.out.println((n ^ (n &gt;&gt; 31)) - (n &gt;&gt; 31));/* n&gt;&gt;31 取得n的符号，若n为正数，n&gt;&gt;31等于0，若n为负数，n&gt;&gt;31等于-1若n为正数 n^0-0数不变，若n为负数n^-1 需要计算n和-1的补码，异或后再取补码，结果n变号并且绝对值减1，再减去-1就是绝对值 // 11. 取两个数的最大值（某些机器上，效率比a&gt;b ? a:b高）System.out.println(b&amp;((a-b)&gt;&gt;31) | a&amp;(~(a-b)&gt;&gt;31)); // 12. 取两个数的最小值（某些机器上，效率比a&gt;b ? b:a高）System.out.println(a&amp;((a-b)&gt;&gt;31) | b&amp;(~(a-b)&gt;&gt;31)); // 13. 判断符号是否相同(true 表示 x和y有相同的符号， false表示x，y有相反的符号。)System.out.println((a ^ b) &gt; 0);所以在Android的View.java中1234567891011121314void setFlags(int flags, int mask) &#123; final boolean accessibilityEnabled = AccessibilityManager.getInstance(mContext).isEnabled(); final boolean oldIncludeForAccessibility = accessibilityEnabled &amp;&amp; includeForAccessibility(); int old = mViewFlags; mViewFlags = (mViewFlags &amp; ~mask) | (flags &amp; mask); int changed = mViewFlags ^ old; //如果和旧的flag一致，直接return if (changed == 0) &#123; return; &#125; // 以下省略、、、、、、、 &#125; // 14. 计算2的n次方 n &gt; 0System.out.println(2&lt;&lt;(n-1)); // 15. 判断一个数n是不是2的幂System.out.println((n &amp; (n - 1)) == 0);/如果是2的幂，n一定是100… n-1就是1111….所以做与运算结果为0/ // 16. 求两个整数的平均值System.out.println((a+b) &gt;&gt; 1); // 17. 从低位到高位,取n的第m位int m = 2;System.out.println((n &gt;&gt; (m-1)) &amp; 1); // 18. 从低位到高位.将n的第m位置为1System.out.println(n | (1&lt;&lt;(m-1)));/将1左移m-1位找到第m位，得到000…1…000n在和这个数做或运算/ // 19. 从低位到高位,将n的第m位置为0System.out.println(n &amp; ~(0&lt;&lt;(m-1)));/ 将1左移m-1位找到第m位，取反后变成111…0…1111n再和这个数做与运算/ 结束 记得Chet Haase和Romain Guy曾经在2013年的一次演讲中提到,Android中View内部使用了3个int来表示70多个Flags。如果换做boolean(4byte大小)的话，就需要接近300bytes。由于View在Application中被广泛（成百上千）使用，framework这样做事实上为开发者节约了相当多的内存。View.java里面放了好几个flags。android.view.View.java1234567/* @hide */ public int mPrivateFlags; int mPrivateFlags2; int mPrivateFlags3; // The view flags hold various views states. int mViewFlags; int中的每一个bit都成为一个boolean，一共只用了12bytes(96bits)的内存.和300bytes相比，节省的内存总量还是相当可观的。一个onClickListener大概500bytes所以View.java中到处是这样的奇怪的Flags123456789public void setDrawingCacheEnabled(boolean enabled) &#123; mCachingFailed = false; setFlags(enabled ? 0x00008000 : 0, 0x00008000); &#125; @ViewDebug.ExportedProperty(category = \"drawing\") public boolean isDrawingCacheEnabled() &#123; return (mViewFlags &amp; 0x00008000) == 0x00008000; &#125; 除了省内存，位运算速度快也有一定的好处。 来看看Android中的ViewGroup是怎么干的1234567891011121314151617181920212223242526272829303132// Set by defaultstatic final int FLAG_CLIP_CHILDREN = 0x1; //二进制的1private static final int FLAG_CLIP_TO_PADDING = 0x2; //二进制的10static final int FLAG_INVALIDATE_REQUIRED = 0x4; //二进制 100private static final int FLAG_RUN_ANIMATION = 0x8; //二进制1000static final int FLAG_ANIMATION_DONE = 0x10; //二进制 10000private static final int FLAG_PADDING_NOT_NULL = 0x20;//二进制 100000/** @deprecated - functionality removed */private static final int FLAG_ANIMATION_CACHE = 0x40;//二进制 1000000static final int FLAG_OPTIMIZE_INVALIDATE = 0x80;//二进制 10000000static final int FLAG_CLEAR_TRANSFORMATION = 0x100;//二进制 100000000private static final int FLAG_NOTIFY_ANIMATION_LISTENER = 0x200;//二进制 1000000000protected static final int FLAG_USE_CHILD_DRAWING_ORDER = 0x400;//二进制 10000000000//还有更多。if ((flags &amp; FLAG_INVALIDATE_REQUIRED) == FLAG_INVALIDATE_REQUIRED) &#123; //按为与 两个都为1才为1，所以只有当前flag小于FLAG_INVALIDATE_REQUIRED的时候这个表达式才成立 invalidate(true); &#125; java-integer-flag-and-bitwise-operations-for-memory-reductionstackoverflow上有人回答了关于用一个int的flag替代32个boolean的利弊。要点如下: 大多数jvm implementation都以一个int的方式存储boolean如果一个class里面滥用一大堆boolean，但这个class的实例不过几百个，那么也不会有什么影响位运算对于cpu来说非常快jdk提供了BitSet，属于一种开箱即用的bit操作工具 下面是google 关键词 int flag找到的一段java代码。这是代表各种state之间互斥的。123456789101112131415161718public static final int UPPERCASE = 1; // 0001public static final int REVERSE = 2; // 0010public static final int FULL_STOP = 4; // 0100public static final int EMPHASISE = 8; // 1000public static final int ALL_OPTS = 15; // 1111public static String format(String value, int flags)&#123; if ((flags &amp; UPPERCASE) == UPPERCASE) value = value.toUpperCase(); if ((flags &amp; REVERSE) == REVERSE) value = new StringBuffer(value).reverse().toString(); if ((flags &amp; FULL_STOP) == FULL_STOP) value += \".\"; if ((flags &amp; EMPHASISE) == EMPHASISE) value = \"~*~ \" + value + \" ~*~\"; return value;&#125; 可以想象的是，View中一个int，32个小槽子(bit)，每一位都能用来代表isSelected,isFocused,XXX等属性。检查是否有某个flag只需要1234567891011121314151617public class BitFlags&#123; public static boolean isFlagSet(byte value, byte flags) &#123; return (flags &amp; value) == value;//和上面的FLAG_INVALIDATE_REQUIRED一模一样 &#125; public static byte setFlag(byte value, byte flags) &#123; return (byte) (flags | value); &#125; public static byte unsetFlag(byte value, byte flags) &#123; return (byte) (flags &amp; ~value); &#125;&#125; 不要迷信位运算，对于一些简单的操作，现代编译器还是能够帮助开发者自动做好优化的。 从java7开始，可以在java代码里直接写二进制，八进制，十六进制的数字了 1234567891011121314151617181920212223242526272829303132333435363738394041//16进制jdk6写法：public static void main(String[] args) &#123; int res = Integer.parseInt(\"A\", 16); System.out.println(res); &#125;jdk7写法：public static void main(String[] args) &#123; int res = 0xA; System.out.println(res); &#125;// 8进制jdk6写法: public static void main(String[] args) &#123; int res = Integer.parseInt(\"11\",8); System.out.println(res); &#125;jdk7写法:public static void main(String[] args) &#123; int res = 011; System.out.println(res); &#125;//二进制jdk6写法:public static void main(String[] args) &#123; int res = Integer.parseInt(\"1100110\", 2); System.out.println(res); &#125;jdk7写法:public static void main(String[] args) &#123; int res = 0b1100110; System.out.println(res); &#125; 即：二进制： int res = 0b110; 六（0B也行，0b01_10010_0这种加下划线也行）八进制： int res = 0110; 七十二十六进制： int res = 0xA; 十 View.MeasureSpec就是32位的int前2位是mode(能表示四种，够了),后30位是size文档的定义是：MeasureSpecs are implemented as ints to reduce object allocation. This classis provided to pack and unpack the size, mode tuple into the int就是为了节省内存，才用的位运算123456789101112131415161718192021222324public static class MeasureSpec &#123; private static final int MODE_SHIFT = 30; private static final int MODE_MASK = 0x3 &lt;&lt; MODE_SHIFT; /** @hide */ @IntDef(&#123;UNSPECIFIED, EXACTLY, AT_MOST&#125;) @Retention(RetentionPolicy.SOURCE) public @interface MeasureSpecMode &#123;&#125; public static final int UNSPECIFIED = 0 &lt;&lt; MODE_SHIFT;//(就是00后面跟30个0) public static final int EXACTLY = 1 &lt;&lt; MODE_SHIFT;//（就是01后面跟30个0） public static final int AT_MOST = 2 &lt;&lt; MODE_SHIFT;// (就是10后面跟30个0) public static int getMode(int measureSpec) &#123; //noinspection ResourceType return (measureSpec &amp; MODE_MASK); //按位与，都是1才能得到1，再加上前面的IndeDef &#125; public static int getSize(int measureSpec) &#123; return (measureSpec &amp; ~MODE_MASK); //按位与加上位非，二进制取反，结果加一 &#125; // ~MODE_MASK就是01后面跟30个0，所以等于直接把measureSpec后三十位拿出来转成int。 &#125; 所以就是一个int存了状态以及大小两部分信息。多说一句measureSpec是在ViewGroup.getChildMeasureSpec里面算出来的，是parent用来跟child交流的，一般用View.resolveSize就知道到底得多大了。 参考 Java位运算操作全面总结 Java 位运算(移位、位与、或、异或、非）","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"},{"name":"java","slug":"java","permalink":"https://haldir65.github.io/tags/java/"}]},{"title":"设计模式总结","date":"2017-07-23T19:03:51.000Z","path":"2017/07/23/2017-07-23-design-pattern/","text":"一般来讲设计模式有23种，这里根据菜鸟教程上的关于设计模式的总结看下来的一些读书笔记，估计要写很久。 设计模式分四大类： 创建型模式 结构型模式 行为型模式 J2EE模式 1. 面向对象的六大原则这个就当背书好了。 单一职责原则 开闭原则 里氏替换原则 依赖倒置原则 接口隔离原则 迪米特原则 2. 23中设计模式简单介绍 工厂模式意图：定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。 做法： 定义一个完成某项功能的接口，功能的具体实现由子类决定，让子类实现工厂接口，返回的也是一个抽象产品。 实例：getSystemService根据传入的参数决定返回什么样的SystemService实例。 抽象工厂模式 单例模式 参考 设计模式大全 从Android代码中来记忆23种设计模式","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"},{"name":"java","slug":"java","permalink":"https://haldir65.github.io/tags/java/"},{"name":"designpattern","slug":"designpattern","permalink":"https://haldir65.github.io/tags/designpattern/"}]},{"title":"java对象内存占用分析","date":"2017-07-23T19:02:52.000Z","path":"2017/07/23/2017-07-23-from-java-code-to-java-heap/","text":"面向对象语言就意味着对象要占用内存空间，那么，java中随便new 出来的东西到底多大？还有，new出来的东西全都都放在heap上吗(有些真不是)？ 1.首先给出精确判断Object大小的一种方法一个判断Java Object大小的方法比较精准的确定一个对象的大小的方法: 123456789101112public class ObjectSizeFetcher &#123; private static Instrumentation instrumentation; public static void premain(String args, Instrumentation inst) &#123; instrumentation = inst; &#125; public static long getObjectSize(Object o) &#123; return instrumentation.getObjectSize(o); &#125;&#125; 这样通常在IDE里面跑不起来。 据说dump memory也行，没试过。 2. 内存对齐JVM为了malloc与gc方便，指定分配的每个对象都需要是8字节的整数倍参考简单来说，一个Object占用的内存大小是8 Byte的倍数 3. java进程的内存占用情况3.1 操作系统和runtime占用的内存操作系统的内存中，一部分被操作系统和kernel所占用。对于用c或者c++写的jvm，还需要分配一部分给c runtime。操作系统和cruntime占用的内存比较大，不同的操作系统上不一样，windows上默认是2GB。剩下的内存(即user space)，就是进程可以使用的内存。 3.2 剩下的内存(user space)对于Java进程来讲，这剩下的部分分为两块: Java Heap(s) Native (non-java) Heap Java Heap可以通过-Xms 和 -Xmx 来设置最小值和最大值Native Heap是在分配了java maximum Heap大小之后剩下的大小(jvm占用的内存也算在这里面) 3.3 数据类型大小基本数据类型大小很简单，其实也不简单。这张图是从ibm网站上截下来的注意一个boolean在数组中只占用一个字节，单独使用占用4个字节。原理参考 引用的大小：在 32 位的 JVM 上，一个对象引用占用 4 个字节；在 64 位上，占用 8 个字节。通过 java -d64 -version 可确定是否是 64 位的 JVM。处理器能够处理的bit范围决定了操作系统能够使用的内存范围：32位的cpu(2^32 = 4,294,967,296 bits = 4GB)64位cpu (2^64 = 18,446,744,073,709,551,616 = 16 exabytes)多数jvm是用c或者c++写的: the Java runtime creates an operating-system process — just as if you were running a C-based program. In fact, most JVMs are written largely in C or C++ 查看jvm是否64位的方法: java -d64 -version64位上引用占用大小变大的原因是，需要管理4g以上的内存，指针(内存地址不够用了) 4. java对象内存布局，从一个Integer说起一个class实例占据的大小包括: 自身的大小（对象头+基本数据类型数据大小） - Shadow heap sizeObject自身的大小在不同的jvm版本和厂商之间有一些变化，但大体上包括三个部分: Class ： 一个指针，指向对应的class，用于表明其类型。比如一个Integer就指向java.lang.Integer这个类(32位上4字节，64位上8字节) Flags : A collection of flags that describe the state of the object, including the hash code for the object if it has one, and the shape of the object (that is, whether or not the object is an array).（就是存hash值和用于表示是不是数组的，32位上4字节，64位上8字节） Lock 所有的Object都能lock，这部分内存用于表示当前Object是否是被synchronized(32位上4字节，64位上8字节) 所以，对于java.lang.Integer来说，一个Integer的大小就是：32(class信息)+32(Flags)+32(Lock))+32(int是基本数据类型，4字节) = 128bits（16字节）事实上，一个Interger的大小是int（4个字节）的四倍，简单来说一个对象的头信息就占用了3个字节。 数组的大小数组和普通的object差不多，多了一个size(32字节)。也就是说。为了存储一个int值。使用一个大小为1的int[]数组的内存消耗比一个Integer还要大。（同样，32位4字节，64位8字节）。数组因为多一个size，所以4个字节起步。 8个字节变成4个字节IBM和Oracle的jvm都能够提供ompressed References (-Xcompressedrefs) 和Compressed OOPs (-XX:+UseCompressedOops) 选项。这样一来，原本在64位机器上要占用8个字节的指针就只要占用4个字节了。但这只对java Heap上的内存有效，对于Native Heap这部分，64位占用内存还是要比32位多。所以同样的一份代码，在64位上占用的内存一定比32位上多。jdk 1.6.x之后好像默认是打开了的。 引用的对象的大小(递归即可) - Retained heap size(Shallow Heap大小加上引用的对象的)java.lang.Integer还算比较简单的，里面除了一个int值表示value以外，没有其它的成员变量，所以并没有引用到其他对象的实例。对于复杂一点的数据类型，比如jav.lang.String呢？ String本身是一个很简单的类(如果不算常量池的话)，几乎可以看成一个char数组的wrapper。除了一个普通对象的class、Flag和Locks等信息外，String内部还有一个 private int hash（用于Cache hash值），还有offset和count（这俩好像没找到），此外就是一个char数组了。所以，为了存储8个字符(16个字节,128bits)。首先这个char数组对象占用了16个字节(2*8)+（对象头+数组大小）16个字节 = 256bits。算到String头上，String本身的文件头是12个字节，算上hash,count,offset各自4个字节，就24个字节了。再加上数组的引用4个字节，再加上数组的大小32个字节。合计60个字节（480bits）。而这里面实际有用的数据只有16个字节。73.3%的内存都是存储其他东西的。 说的比较乱了，这里直接照搬一段计算,参考1234567891011121314151617181920212223242526272829303132333435- 一般而言，Java 对象在虚拟机的结构如下：•对象头（object header）：8 个字节（保存对象的 class 信息、ID、在虚拟机中的状态）•Java 原始类型数据：如 int, float, char 等类型的数据•引用（reference）：4 个字节•填充符（padding）String定义：JDK6:private final char value[];private final int offset;private final int count;private int hash;JDK6的空字符串所占的空间为40字节JDK7:private final char value[];private int hash;private transient int hash32;JDK7的空字符串所占的空间也是40字节JDK6字符串内存占用的计算方式：首先计算一个空的 char 数组所占空间，在 Java 里数组也是对象，因而数组也有对象头，故一个数组所占的空间为对象头所占的空间加上数组长度，即 8 + 4 = 12 字节 , 经过填充后为 16 字节。那么一个空 String 所占空间为：对象头（8 字节）+ char 数组（16 字节）+ 3 个 int（3 × 4 = 12 字节）+1 个 char 数组的引用 (4 字节 ) = 40 字节。因此一个实际的 String 所占空间的计算公式如下：8*( ( 8+12+2*n+4+12)+7 ) / 8 = 8*(int) ( ( ( (n) *2 )+43) /8 )其中，n 为字符串长度。 小结随便new一个Object就意味着12个Byte没了，数组的话16个字节没了。每添加一个成员变量（指针），4个字节没了。这些都还没算上实际存储的数据。 5. java.util框架中使用的那些集合类5.1 HashSetA HashSet is an implementation of the Set interface。无重复元素，不保证迭代顺序，常规的add,contains等方法速度不会随着内部元素的增加而变慢。HashSet内部最多有一个null，底层实现是HashMap，这意味着其占用内存要比HashMap大。默认容量 16个Entries内部元素为空时的大小 144bytes查找，添加，删除的时间复杂度为 O(1)，在没有Hash collisions发生的前提下 5.2 HashMapA HashMap is an implementation of the Map interface.HashMap是一种存储Key-Value型数据的集合，一个key最多map到一个value，key和value都可以为null，可以存储重复元素。（所以）——HashMap是HashSet的一种功能上的简化。底层是Entries(Entries元素是链表)，长这样。 transient HashMapEntry[] table = (HashMapEntry[]) EMPTY_TABLE;HashMap的成员变量包括： transient HashMapEntry[] table（HashMapEntry的数组）int sizeint thresholdfinal float loadFactortransient int modCount; 一个HashMap刚创建时(完全为空时)的大小为128bytes，jdk 1.8在初始化时没有加载Entries，在put操作时才去分配。可能会好一点。内部结构一般是这样的，一个HashMapEntry的大小为32byte。int KeyHashObject nextObject keyObject valueHashMap每次put键值对时，都使用了一个HashMap$Entry这样的包装类，这意味着整个HashMap的overhead包括：This means that the total overhead of a HashMap consists of the HashMap object, a HashMap$Entry array entry, and a HashMap$Entry object for each entry.直接照搬结论：对于HashMapDefault capacities为16个 entries 对于一个有10000个Entries的HashMap，光是由于HashMap，Entry数组以及每个Entry对象带来的overhead就达到了360K左右，这里还不算存储的键值对本身的大小。 5.3 HashtableHashTable和HashMap的主要区别是HashTable是线程安全的，HashTable中很多方法都加上了synchronized修饰。一般来讲，jdk1.5以上如果想要线程安全，直接用synchronizedHashMap。Hashtable继承自Dictionary，后者已经被废弃了，推荐使用map接口的实现类。照搬结论：要存储10k个Entries，overhead达到360k。 5.4 LinkedListLinkedist是典型的双向链表，除非增删操作特别频繁，否则没必要使用。查找的时间复杂度为 o(n)。添加的元素被包装在一个Node节点中。存储10K个元素的overhead为240K。 5.5 ArrayListArrayList要好很多，value直接存在一个数组内部，查找的时间复杂度为o(1)存储10K个元素的overhead为40K左右。 5.6 StringBuffer，StringBuilderStringBuffer直接强加synchronized，StringBuilder和StringBuffer都继承自AbstractStringBuilder。成员变量就两个一个char[] value和一个int count。 6.集合的默认初始容量和扩系数以StirngBuffer为例（也算一种char的集合吧），默认容量是16，即创建了一个char[16]，空的，算上对象头，一共72bytes。这还只是StringBuffer里什么都没存储的情况。StringBuffer sb = new StringBuffer(“My String”)。//算下用了多少内存首先算数组，文件头12bytes，加上size 16bytes。算上数组，（数组长度为str.length+16）一共116bytes，算上内存对齐，一共120bytes。StringBuffer对象的大小：对象头+count+数组指针 = 20 bytes。合计140bytes，内存对齐后144bytes，只为存储”My String”这9个字符（36bytes）。上面提到的这些集合类都对外提供了可以设置初始容量的构造函数以避免内存浪费，但要注意HashMap只接受2的指数幂。 7.high level抽象带来的便利性及所需付出的代价面向对象语言推荐开发者使用一些高层抽象化的类，但更加复杂的功能意味着内存占用的增加。而内存意味着一切，所以，权衡好开发便利与内存占用对于程序的高效运行就十分重要，而这一切的前提就在于了解这些Wrapper对象工作的原理。 一些很有意思的事情 Integer内部缓存了一个Integer[] ，最大值可以通过(java.lang.Integer.IntegerCache.high)配置 不同版本jdk上String的优化很有意思，又是那个一个String占用多少字节的问题 关于ConcurrentModificationException，对一个集合的更改分为结构性更改和集合元素值的更改，前者会抛出ConcurrentModificationException，后者不会。 参考 JAVA 对象大小 一个Java对象到底占用多大内存 查看 Java 对象大小 From Java code to Java heap Understanding the Memory Usage of Your Application Thanks for the memory, Linux boolean数组中一个值占用1bit 不同jdk版本String做的优化 对象头里面的lock是怎么用的 Android里面的一个View大概0.5kb stuart mark也提到了文件头大小","tags":[{"name":"java","slug":"java","permalink":"https://haldir65.github.io/tags/java/"}]},{"title":"LruCache阅读笔记","date":"2017-07-23T19:02:21.000Z","path":"2017/07/23/2017-07-23-lru-cache-and-more/","text":"LruCache在android3.1中加入，即android.util.LruCache，主要是作为一种合理的缓存策略的实现，用于替代原来的SoftReference。v4包提供了static version的实现，即android.support.v4.util.LruCache。此外，还有DiskLruCache对应磁盘缓存，在OkHttp和Glide等开源项目中都有，可直接复制过来，改下包名直接用。这些类本质上都是对于Least Recently Used算法的实现。稍微看了下网上的博客，LruCache实际上就是利用了LinkedHashmap的accessorder来实现末位淘汰的。v4包里的LinkedHashmap就是java.util里面的,platform里的LinkedHashmap添加了一些方法。 1. 使用入门这是最简单的一个用于缓存图片Bitmap的cache的算法12345678int maxMemory = (int) (Runtime.getRuntime().totalMemory()/1024); int cacheSize = maxMemory/8; mMemoryCache = new LruCache&lt;String,Bitmap&gt;(cacheSize)&#123; @Override protected int sizeOf(String key, Bitmap value) &#123; return value.getRowBytes()*value.getHeight()/1024; &#125; &#125;; 这个sizeOf函数必须复写，用于计算单个元素大小，主要为了确保缓存不超出最大容量。 2.简单介绍LruCache是线程安全的，在内部的 get、put、remove 包括 trimToSize 都是安全的（因为都上锁了） 简书作者写的比较好这种链表最好结合着图来看 HashMap只是一个HashMap.Node的数组，因为Hash Collision产生链表（单向，通过Node.next实现）LinkedHashMap extends HashMap。 基本元素是LinkedHashMap.Entry(extends HashMap.Node，继承不过是添加了before和after的Entry)，由此在HashMap的基础上再构造了一个双向循环链表。 LinkedHashMap继承HashMap之后主要Override了几个HashMap预留的回调函数。afterNodeAccess(把最近用过的元素挪到双向链表的尾部),afterNodeInsertion，afterNodeRemoval等也就是说，每次CRUD操作都会把最近使用过的元素挪到最上面(不一定准确，大致这个意思)，而且这项操作只不过是挪一下指针，并不费事 参考 彻底解析Android缓存机制——LruCache Android源码解析——LruCache LruCache 源码解析","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"从glide源码到图片加载框架设计思路","date":"2017-07-21T00:13:02.000Z","path":"2017/07/21/2017-07-21-glide-decoded/","text":"glide的源码几个月前曾经拜读过，大致了解了其异步加载的实现原理。图片加载和网络请求很类似，就像当初看Volley，从一个Request —&gt; CacheDispatch —&gt; NetworkDispatcher —-&gt; ResponseDeliver。优秀的轮子不仅执行效率高，同时具备高的扩展性。读懂源码其实只是第一步，往下应该是利用框架提供的扩展方案，再往后应该就是能够独立设计出一套类似的框架了。 1. 使用入门印象中最早接触Glide是在cheesequare中，顿时发现，原来加载图片可以这么简单，之后的开发过程中总会对Glide有所偏倚。接近两年之后再来过一遍源码，希望能够回答那个“如果让你来设计一个图片加载框架，你会怎么设计？”的问题。使用方式很简单 123Glide.with(activity) .load(R.drawable.image_id) .into(mImageView); 来看这里面做了什么： 12345678910111213141516171819202122232425 public RequestManager get(FragmentActivity activity) &#123; if (Util.isOnBackgroundThread()) &#123; return get(activity.getApplicationContext()); &#125; else &#123; assertNotDestroyed(activity); FragmentManager fm = activity.getSupportFragmentManager(); return supportFragmentGet(activity, fm); &#125;&#125;SupportRequestManagerFragment getSupportRequestManagerFragment(final FragmentManager fm) &#123; SupportRequestManagerFragment current = (SupportRequestManagerFragment) fm.findFragmentByTag( FRAGMENT_TAG); if (current == null) &#123; current = pendingSupportRequestManagerFragments.get(fm); if (current == null) &#123; current = new SupportRequestManagerFragment(); pendingSupportRequestManagerFragments.put(fm, current); fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss(); handler.obtainMessage(ID_REMOVE_SUPPORT_FRAGMENT_MANAGER, fm).sendToTarget(); &#125; &#125; return current;&#125; with方法只是返回了一个RequestManager，with方法可以接受Fragemnt,Activity以及Context等.以上面的activity为例，supportFragmentGet方法只是通过FragmentActivity的supportFragmentManager去findFragmentByTag，这个Tag叫做：“com.bumptech.glide.manager”，所以一般在Debug的时候，去SupportFragmentManager里面查找，有时候能够看到一个这样的Fragment。这个方法里面就是查找这样的一个Fragment，甚至我们自己也可以FindFragmentByTag去调用这个Fragment的方法(这是一个Public的class)然后从这个Fragemnt里面获得RequestManager成员变量（没有就new一个并set）。可以看出，一个Fragment只有一个RequestManager，Fragment主要是为了跟Activity生命周期挂钩的。这里有必要讲一下为什么要写两次current ==null，findFragmentByTag并不会在commitAllowingStateLoss之后就会返回添加的Fragment，只是往主线程的MessageQueue里面丢了一个消息，这个消息执行完毕之后才findFragmentByTag才不为空。这里用Handler丢一条消息，这条消息肯定要排在之前那条消息之后才被执行，所以才有这样一个Pendingmap的设计。当然到这里，最重要的还是Glide是通过commit了一个特殊的Fragment来实现生命周期监听。具体来看：SupportRequestManagerFragment中 1234567891011121314151617@Override public void onStart() &#123; super.onStart(); lifecycle.onStart(); &#125; @Override public void onStop() &#123; super.onStop(); lifecycle.onStop(); &#125; @Override public void onDestroy() &#123; super.onDestroy(); lifecycle.onDestroy(); &#125; 而对应到LifeCycle的各个方法： 1234567891011121314151617181920void onStart() &#123; isStarted = true; for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123; lifecycleListener.onStart(); &#125; &#125; void onStop() &#123; isStarted = false; for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123; lifecycleListener.onStop(); &#125; &#125; void onDestroy() &#123; isDestroyed = true; for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) &#123; lifecycleListener.onDestroy(); &#125; &#125; 就是把内部维护的一个集合一个个拿出来调用响应生命周期的方法。而这个LifeCycleListener就是上面创建RequestManager时(构造函数传进来了fragment的lifeCycle)添加的。RequestManager还默认添加了一个ConnectivityMonitor，主要作用就是在生命周期的onStart注册了一个ConnectivityManager.CONNECTIVITY_ACTION的BroadCastReceiver，在onStop的时候unRegister，在网络状态变化的时候调用RequestManager的RequestTracker成员变量的restartRequet。 小结： 在有权限(android.permission.ACCESS_NETWORK_STATE)的情况下，Glide已经做好了有网-&gt; 断网-&gt; 有网的恢复请求。另外，Android 7.0虽说不再发送ConnectivityManager.CONNECTIVITY_ACTION这个广播，但对于前台应用，动态注册的Receiver还是能够收到，Glide由于是在OnStart注册的，所以完全没问题。 在一个Activity中，RequestManager只要一个，其实开发者自己保留下来也没什么问题 2. RequestManager调度请求来看下这个RequestManager的成员变量 123456789101112131415161718192021public class RequestManager implements LifecycleListener &#123; private final Context context; private final Lifecycle lifecycle; private final RequestManagerTreeNode treeNode; private final RequestTracker requestTracker; private final Glide glide; //全局只有一个，控制线程池，用Application的Context创建的 private final OptionsApplier optionsApplier; private DefaultOptions options; &#125; class OptionsApplier &#123; public &lt;A, X extends GenericRequestBuilder&lt;A, ?, ?, ?&gt;&gt; X apply(X builder) &#123; if (options != null) &#123; options.apply(builder); &#125; return builder; &#125; &#125; 上面这个泛型写的非常绕，OptionApplier的意思就是，如果用户提供了一些定制(存在options里面)，就给一些定制的选择。一般这个options为null。 2.1 各种Type的RequestGlide的RequestManager可以接受各种各样的来源 123456789101112131415161718192021222324252627 public DrawableTypeRequest&lt;Integer&gt; load(Integer resourceId) &#123; return (DrawableTypeRequest&lt;Integer&gt;) fromResource().load(resourceId); &#125; public DrawableTypeRequest&lt;byte[]&gt; load(byte[] model) &#123; return (DrawableTypeRequest&lt;byte[]&gt;) fromBytes().load(model); &#125; public DrawableTypeRequest&lt;File&gt; load(File file) &#123; return (DrawableTypeRequest&lt;File&gt;) fromFile().load(file); &#125;//上述方法都调用到了 private &lt;T&gt; DrawableTypeRequest&lt;T&gt; loadGeneric(Class&lt;T&gt; modelClass) &#123; ModelLoader&lt;T, InputStream&gt; streamModelLoader = Glide.buildStreamModelLoader(modelClass, context); ModelLoader&lt;T, ParcelFileDescriptor&gt; fileDescriptorModelLoader = Glide.buildFileDescriptorModelLoader(modelClass, context); if (modelClass != null &amp;&amp; streamModelLoader == null &amp;&amp; fileDescriptorModelLoader == null) &#123; throw new IllegalArgumentException(\"Unknown type \" + modelClass + \". You must provide a Model of a type for\" + \" which there is a registered ModelLoader, if you are using a custom model, you must first call\" + \" Glide#register with a ModelLoaderFactory for your custom model class\"); &#125; return optionsApplier.apply( new DrawableTypeRequest&lt;T&gt;(modelClass, streamModelLoader, fileDescriptorModelLoader, context, glide, requestTracker, lifecycle, optionsApplier)); &#125; DrawableTypeRequest接受一个泛型，可以是String(网络路径)，File(本地文件),Integer（资源文件）。所以最终返回的DrawableTypeRequet里面装的可能是String.class，Integer.class也可能是File.class。比较难懂的是 streamModelLoader和fileDescriptorModelLoader的创建. 123public interface ModelLoader&lt;T, Y&gt; &#123; DataFetcher&lt;Y&gt; getResourceFetcher(T model, int width, int height);&#125; ModelLoader其实就是只有一个方法的接口，例如with(File)会传一个File.class进来，返回的streamModelLoader的T就是File，Y就是InputStream。ModelLoader负责提供DataFetcher，T是数据源，可以是File,Resourse，url等等。Y用于描述类型，本地的就使用ParcelFileDescriptor（记得FileDescriptor属于Native的东西），网络上的就使用InputStream.T和Y的组合可能有很多种，Cache在Glide(全局唯一)的loaderFactory（成员变量）的一个HashMap(没用ConcurrentHashMap是因为buildModelLoader方法加锁了)中。所以这份缓存也是全局唯一的。T和Y的一一对应其实是在Glide的构造函数里面写好的： 1234567891011121314register(File.class, ParcelFileDescriptor.class, new FileDescriptorFileLoader.Factory());register(File.class, InputStream.class, new StreamFileLoader.Factory());register(int.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());register(int.class, InputStream.class, new StreamResourceLoader.Factory());register(Integer.class, ParcelFileDescriptor.class, new FileDescriptorResourceLoader.Factory());register(Integer.class, InputStream.class, new StreamResourceLoader.Factory());register(String.class, ParcelFileDescriptor.class, new FileDescriptorStringLoader.Factory());register(String.class, InputStream.class, new StreamStringLoader.Factory());register(Uri.class, ParcelFileDescriptor.class, new FileDescriptorUriLoader.Factory());register(Uri.class, InputStream.class, new StreamUriLoader.Factory());register(URL.class, InputStream.class, new StreamUrlLoader.Factory());register(GlideUrl.class, InputStream.class, new HttpUrlGlideUrlLoader.Factory());register(byte[].class, InputStream.class, new StreamByteArrayLoader.Factory()); 左边有很多种，右边只可能是InputStream或者ParcelFileDescriptor。 2.2 Request的继承关系12345public class DrawableTypeRequest&lt;ModelType&gt; extends DrawableRequestBuilder&lt;ModelType&gt; implements DownloadOptionspublic class DrawableRequestBuilder&lt;ModelType&gt; extends GenericRequestBuilder&lt;ModelType, ImageVideoWrapper, GifBitmapWrapper, GlideDrawable&gt; implements BitmapOptions, DrawableOptionspublic class GenericRequestBuilder&lt;ModelType, DataType, ResourceType, TranscodeType&gt; implements Cloneable 记住这个ModelType就是Glide.with(context).load(XXX) 里面传进去的Object的Class，例如File.class，那么上面其实就是创建了一个DrawableTypeRequest，泛型是File ，构造函数一层层往上调用，DrawableRequestBuilder这一层调用了crossFade方法，即默认会有一个crossFade的效果，默认用的是DrawableCrossFadeFactory。注意这里把属于RequestManager的RequestTracker也传进来了。 Glide.with(context).load(XX)到目前为止只是返回了一个DrawableTypeRequest 的实例。(还在主线程) 2.3 小节Glide.with返回一个RequestManger，每个Activity只会有一个RequestManagerload方法返回了一个DrawableTypeRequest，这个T可能是File,String,Interger等。到目前为止还只是构建一个Request。 3. DrawableRequestBuilder的into方法Glide的最后一个调用方法是into()，也是最终分发请求的方法 DrawableRequestBuilder12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849@Override public Target&lt;GlideDrawable&gt; into(ImageView view) &#123; return super.into(view); &#125; public Target&lt;TranscodeType&gt; into(ImageView view) &#123; Util.assertMainThread();//还是在主线程对不对 if (view == null) &#123; throw new IllegalArgumentException(\"You must pass in a non null View\"); &#125; if (!isTransformationSet &amp;&amp; view.getScaleType() != null) &#123; switch (view.getScaleType()) &#123; case CENTER_CROP: applyCenterCrop(); break; case FIT_CENTER: case FIT_START: case FIT_END: applyFitCenter(); break; //$CASES-OMITTED$ default: // Do nothing. &#125; &#125; return into(glide.buildImageViewTarget(view, transcodeClass)); //这个into接收一个Target的子类的实例，而Target又继承自LifeCycleListener //这个TranscodeClass是每一个Request创建的时候从构造函数传进来的。 &#125;//transcodeclass可能是GlideDrawable.class，也可能是Bitmap.class也可能是Drawable.class @SuppressWarnings(\"unchecked\") public &lt;Z&gt; Target&lt;Z&gt; buildTarget(ImageView view, Class&lt;Z&gt; clazz) &#123; if (GlideDrawable.class.isAssignableFrom(clazz)) &#123; //isAssignableFrom表示左边的class是否是右边class一个类或者父类，应该和instaceof倒过来。 return (Target&lt;Z&gt;) new GlideDrawableImageViewTarget(view); &#125; else if (Bitmap.class.equals(clazz)) &#123; return (Target&lt;Z&gt;) new BitmapImageViewTarget(view); &#125; else if (Drawable.class.isAssignableFrom(clazz)) &#123; return (Target&lt;Z&gt;) new DrawableImageViewTarget(view); &#125; else &#123; throw new IllegalArgumentException(\"Unhandled class: \" + clazz + \", try .as*(Class).transcode(ResourceTranscoder)\"); &#125; &#125; GlideDrawableImageViewTarget、BitmapImageViewTarget以及DrawableImageViewTarget全部继承自ImageViewTarget，后者继承自ViewTarget,再继承自BaseTarget，再 implements Target。一层层继承下来，GlideDrawableImageViewTarget等三个子类中都有一个Request，一个T extents View(看来不一定是ImageView) 3.1 以GlideDrawableImageViewTarget为例12345public class GlideDrawableImageViewTarget extends ImageViewTarget&lt;GlideDrawable&gt; &#123; private static final float SQUARE_RATIO_MARGIN = 0.05f; private int maxLoopCount; private GlideDrawable resource; &#125; GlideDrawable是一个继承自Drawable的抽象类，添加了isAnimated(),setLoopCount以及由于实现了isAnimated所需要的三个方法(start,stop,isRunning)。子类必须实现这五个抽象方法。 GlideDrawableImageViewTarget往上走123public abstract class ImageViewTarget&lt;Z&gt; extends ViewTarget&lt;ImageView, Z&gt; implements GlideAnimation.ViewAdapter&#123;&#125; 接着往上找父类 123456789public abstract class ViewTarget&lt;T extends View, Z&gt; extends BaseTarget&lt;Z&gt; &#123; private static final String TAG = \"ViewTarget\"; private static boolean isTagUsedAtLeastOnce = false; private static Integer tagId = null; protected final T view; private final SizeDeterminer sizeDeterminer;&#125; 看下文档：A base Target for loading android.graphics.Bitmaps into Views that provides default implementations for most most methods and can determine the size of views using a android.view.ViewTreeObserver.OnDrawListenerTo detect View} reuse in android.widget.ListView or any android.view.ViewGroup that reuses views, this class uses the View setTag(Object) method to store some metadata so that if a view is reused, any previous loads or resources from previous loads can be cancelled or reused. Any calls to View setTag(Object)on a View given to this class will result in excessive allocations and and/or IllegalArgumentExceptions. If you must call View#setTag(Object)on a view, consider using BaseTarget or SimpleTarget instead. 翻译一下，ViewTarget提供了将Bitmap 加载进View的大部分方法的基本实现，并且添加了onPreDrawListener以获得View的尺寸，对于Resuse View的场景，通过setTag来取消被滑出屏幕的View的request的加载。 既然提供了大部分方法的默认实现，那么一定有方法没实现，其实就是protected void setResource(Z resource)啦。这个Z可能是Bitmap,GlideDrawable或者Drawable。直接拿来setImageBitmap或者setImageDrawable就可以了，这个方法其实在是解码完成之后了。 关键是default implementation是怎么实现的以及这些方法在父类中的调用时机。ViewTarget的构造函数传进来一个View的子类，同时创建一个SizeDeterminer（只是通过onPreDrawListener获得View的宽和高）。 再往上找父类12345public abstract class BaseTarget&lt;Z&gt; implements Target&lt;Z&gt; &#123; //添加了一个Request成员变量，为Target中的一些方法提供了空实现，比如onLoadStarted，onLoadXXX等 private Request request; &#125; 到这里，还只是配置资源要加载进的对象，我倾向于把Target看成一个资源加载完毕的中转者，它管理了View（也可以没有View）和Request，在外部调用Target.onLoadStarted等方法是，调用View(如果有的话)的xxx方法。 3.2任务分发1234567891011121314151617public &lt;Y extends Target&lt;TranscodeType&gt;&gt; Y into(Y target) &#123; Util.assertMainThread(); //还在主线程上 Request previous = target.getRequest(); if (previous != null) &#123; //每一个Target都只有一个Request，用于清除之前的请求 previous.clear(); requestTracker.removeRequest(previous); previous.recycle(); &#125; Request request = buildRequest(target); target.setRequest(request); lifecycle.addListener(target); requestTracker.runRequest(request); return target; //这里返回Target的好处在于可以接着链式调用，上面只是添加到任务队列，真正被处理还得等到下一帧(onPreDraw调用时)，所以这里还可以接着对这个Target进行配置&#125; 注意 requestTracker.runRequest(request)方法GenericRequest.java12345678910111213141516171819202122232425/** * &#123;@inheritDoc&#125; */ @Override public void begin() &#123; startTime = LogTime.getLogTime(); if (model == null) &#123; onException(null); return; &#125; status = Status.WAITING_FOR_SIZE; if (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123; onSizeReady(overrideWidth, overrideHeight); &#125; else &#123; target.getSize(this); //这个方法其实就等于挂了个钩子在onPreDraw中调用，onPreDraw时会调用onSizeReady。 &#125; if (!isComplete() &amp;&amp; !isFailed() &amp;&amp; canNotifyStatusChanged()) &#123; target.onLoadStarted(getPlaceholderDrawable()); &#125; if (Log.isLoggable(TAG, Log.VERBOSE)) &#123; logV(\"finished run method in \" + LogTime.getElapsedMillis(startTime)); &#125; &#125; onSizeReady才是真正开始干活的时机，理由也很充分。解码Bitmap必须要知道需要多大的尺寸，否则也是白搭。GenericRequest.java1234567891011121314151617181920212223242526/** * A callback method that should never be invoked directly. */ @Override public void onSizeReady(int width, int height) &#123; if (status != Status.WAITING_FOR_SIZE) &#123; return; &#125; status = Status.RUNNING; width = Math.round(sizeMultiplier * width); //这个sizeMultiplier可以通过链式调用配置 height = Math.round(sizeMultiplier * height); ModelLoader&lt;A, T&gt; modelLoader = loadProvider.getModelLoader(); final DataFetcher&lt;T&gt; dataFetcher = modelLoader.getResourceFetcher(model, width, height); ResourceTranscoder&lt;Z, R&gt; transcoder = loadProvider.getTranscoder(); loadedFromMemoryCache = true; loadStatus = engine.load(signature, width, height, dataFetcher, loadProvider, transformation, transcoder, priority, isMemoryCacheable, diskCacheStrategy, this); loadedFromMemoryCache = resource != null; if (Log.isLoggable(TAG, Log.VERBOSE)) &#123; logV(\"finished onSizeReady in \" + LogTime.getElapsedMillis(startTime)); &#125; &#125; 3.3 缓存查找开始查找缓存是engine.load开始的，找到了就调用Callback的onResourceReadyEngine.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public &lt;T, Z, R&gt; LoadStatus load(Key signature, int width, int height, DataFetcher&lt;T&gt; fetcher, DataLoadProvider&lt;T, Z&gt; loadProvider, Transformation&lt;Z&gt; transformation, ResourceTranscoder&lt;Z, R&gt; transcoder, Priority priority, boolean isMemoryCacheable, DiskCacheStrategy diskCacheStrategy, ResourceCallback cb) &#123; Util.assertMainThread(); //还是在主线程上 long startTime = LogTime.getLogTime(); final String id = fetcher.getId();//如果是个网络图片，返回网络url，类似这种 EngineKey key = keyFactory.buildKey(id, signature, width, height, loadProvider.getCacheDecoder(), loadProvider.getSourceDecoder(), transformation, loadProvider.getEncoder(), transcoder, loadProvider.getSourceEncoder()); EngineResource&lt;?&gt; cached = loadFromCache(key, isMemoryCacheable); //EngineResource内部wrap了真正的Resource，并使用一个int acquire表示当前正在占用资源的使用者数。当这个数为0的时候可以release。 if (cached != null) &#123; cb.onResourceReady(cached); if (Log.isLoggable(TAG, Log.VERBOSE)) &#123; logWithTimeAndKey(\"Loaded resource from cache\", startTime, key); &#125; return null; &#125; EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable); if (active != null) &#123; cb.onResourceReady(active); if (Log.isLoggable(TAG, Log.VERBOSE)) &#123; logWithTimeAndKey(\"Loaded resource from active resources\", startTime, key); &#125; return null; &#125; EngineJob current = jobs.get(key); if (current != null) &#123; current.addCallback(cb); if (Log.isLoggable(TAG, Log.VERBOSE)) &#123; logWithTimeAndKey(\"Added to existing load\", startTime, key); &#125; return new LoadStatus(cb, current); &#125; EngineJob engineJob = engineJobFactory.build(key, isMemoryCacheable); DecodeJob&lt;T, Z, R&gt; decodeJob = new DecodeJob&lt;T, Z, R&gt;(key, width, height, fetcher, loadProvider, transformation, transcoder, diskCacheProvider, diskCacheStrategy, priority); EngineRunnable runnable = new EngineRunnable(engineJob, decodeJob, priority); jobs.put(key, engineJob); engineJob.addCallback(cb); engineJob.start(runnable); if (Log.isLoggable(TAG, Log.VERBOSE)) &#123; logWithTimeAndKey(\"Started new load\", startTime, key); &#125; return new LoadStatus(cb, engineJob);&#125; Engine先去Cache里面查找，找到了直接调用ResourceCallback(GenericRequest)的onResourceReady(EngineResource&lt;?&gt; resource)，注意这个EngineResource里面包装了一个Resource，主要是为了引用计数。 Engine的loadFromCache(key, isMemoryCacheable)是第一步，从成员变量cache中获取。找到了就挪到activeResources里面。 Engine.java 12345678910111213 public class Engine implements EngineJobListener, MemoryCache.ResourceRemovedListener, EngineResource.ResourceListener &#123; private static final String TAG = \"Engine\"; private final Map&lt;Key, EngineJob&gt; jobs; private final EngineKeyFactory keyFactory; private final MemoryCache cache; private final EngineJobFactory engineJobFactory; private final Map&lt;Key, WeakReference&lt;EngineResource&lt;?&gt;&gt;&gt; activeResources; private final ResourceRecycler resourceRecycler; private final LazyDiskCacheProvider diskCacheProvider;&#125; 如果在MemoryCache这个Lru里面没找到，就调用loadFromActiveResources，从activeResources里面找到。 所以这里已经出现两层缓存了，先去Lru(内存)找，再去activeResources(HashMap)里面找。缓存都是放在Engine里面的，全局只有一份 缓存里面的Value都是EngineResource。 这个MemoryCache是一个LruCache，大小是在MemorySizeCalculator中获得的，对于一般的设备，activityManager.getMemoryClass() 1024 1024获得每个App能够使用的Size,乘以0.4。1234567891011121314151617181920MemorySizeCalculator(Context context, ActivityManager activityManager, ScreenDimensions screenDimensions) &#123; this.context = context; final int maxSize = getMaxSize(activityManager); final int screenSize = screenDimensions.getWidthPixels() * screenDimensions.getHeightPixels() * BYTES_PER_ARGB_8888_PIXEL; //算出占满整个屏幕的一张图的大小 int targetPoolSize = screenSize * BITMAP_POOL_TARGET_SCREENS; //乘以4就是bitmappool的大小 int targetMemoryCacheSize = screenSize * MEMORY_CACHE_TARGET_SCREENS; //乘以2就是MemoryCache的大小 if (targetMemoryCacheSize + targetPoolSize &lt;= maxSize) &#123; memoryCacheSize = targetMemoryCacheSize; bitmapPoolSize = targetPoolSize; &#125; else &#123; //这里判断了BitmapPool和MemoryCache的大小之和不能超出应用可以使用的内存大小的0.4倍。 int part = Math.round((float) maxSize / (BITMAP_POOL_TARGET_SCREENS + MEMORY_CACHE_TARGET_SCREENS)); memoryCacheSize = part * MEMORY_CACHE_TARGET_SCREENS; bitmapPoolSize = part * BITMAP_POOL_TARGET_SCREENS; &#125; &#125; 所以缓存的大小综合考虑了屏幕分辨率和内存大小。只要屏幕像素不是特别高，一般都会走到第一步。 小结 ViewTarget里面有一个 T extends View，可见Glide不只适用于ImageView。 BaseTarget里带了一个private Request，其子类可以通过getRequest获得。 对于ListView等可以快速滑动的View，如果某一个View被滑出屏幕外，自动取消请求(通过setTagId实现) “You must not call setTag() on a view Glide is targeting” setTag会崩，原因是GenericRequestBuilder的into方法会通过ViewTarget去查找previous，看看这一个ViewTarget是否已经有了request。这一点常见于循环利用View的场景，快速滑动的ViewGroup会复用View。对于同一个View，可能ViewGroup会需要它展示不同的(图片、Url)，所以Glide必须要检查previous，同时清除掉旧的请求。 GenericRequestBuilder的obtainRequest内部使用了一个ArrayDeque来obtain Request。这样Request实例不会多次创建，回收是在request.recycle里面做的。 4. 离开主线程，提交任务到线程池如果上面两层缓存都没找到，去jobs里找看下有没有已经加入队列的EngineJob记住上面有两层缓存 来看后面提交任务这几段12345678910111213141516171819202122232425262728293031323334353637 EngineJob engineJob = engineJobFactory.build(key, isMemoryCacheable); DecodeJob&lt;T, Z, R&gt; decodeJob = new DecodeJob&lt;T, Z, R&gt;(key, width, height, fetcher, loadProvider, transformation, transcoder, diskCacheProvider, diskCacheStrategy, priority); EngineRunnable runnable = new EngineRunnable(engineJob, decodeJob, priority); jobs.put(key, engineJob); engineJob.addCallback(cb); engineJob.start(runnable); //往diskCacheService提交了一个Runnableclass EngineJob implements EngineRunnable.EngineRunnableManager &#123; private static final EngineResourceFactory DEFAULT_FACTORY = new EngineResourceFactory(); private static final Handler MAIN_THREAD_HANDLER = new Handler(Looper.getMainLooper(), new MainThreadCallback()); private static final int MSG_COMPLETE = 1; private static final int MSG_EXCEPTION = 2; private final List&lt;ResourceCallback&gt; cbs = new ArrayList&lt;ResourceCallback&gt;(); private final EngineResourceFactory engineResourceFactory; private final EngineJobListener listener; private final Key key; private final ExecutorService diskCacheService; //线程池 private final ExecutorService sourceService; //线程池 private final boolean isCacheable; private boolean isCancelled; // Either resource or exception (particularly exception) may be returned to us null, so use booleans to track if // we've received them instead of relying on them to be non-null. See issue #180. private Resource&lt;?&gt; resource; private boolean hasResource; private Exception exception; private boolean hasException; // A set of callbacks that are removed while we're notifying other callbacks of a change in status. private Set&lt;ResourceCallback&gt; ignoredCallbacks; private EngineRunnable engineRunnable; private EngineResource&lt;?&gt; engineResource; private volatile Future&lt;?&gt; future;&#125; EngineJob是通过Factory创建的，创建时会传两个线程池进来。一个管DiskCache,一个管Source获取。初始化是在Glide.createGlide里面做的：1234567if (sourceService == null) &#123; final int cores = Math.max(1, Runtime.getRuntime().availableProcessors()); sourceService = new FifoPriorityThreadPoolExecutor(cores); &#125; if (diskCacheService == null) &#123; diskCacheService = new FifoPriorityThreadPoolExecutor(1); &#125; 在外部没有提供线程池的情况下，DiskCache一个线程池就好了，SourceService的大小为当前cpu可用核心数，还是比较高效的。debug的时候可能会看见“fifo-pool-thread-1”这样的线程，就是Glide的。上面是往DiskCacheService提交了一个EngineRunable，这个Runnable的run里面主要是decodeFromCache和DecodeFroSource，分别代表从磁盘缓存获取和从数据源获取。首先会调用decodeFromCache，一层层往下找，如果没找到的话会调用onLoadFailed方法，并将任务提交给SourceService，去获取资源。 4.1 CacheService这个线程池的工作以及第三层缓存的出现注意这里出现了第三层缓存1File cacheFile = diskCacheProvider.getDiskCache().get(key); 这一层缓存是给DiskCache的线程池查找用的，查找的时候分为从Result中查找和从Source中查找，其实查找的目的地都是那个DiskCache，Resul是用ResultKey去找的，Source是用ResultKey.getOriginalKey去查找的。物理位置都放在那个磁盘目录下。 另外在DecodeJob的cacheAndDecodeSourceData方法里，存的只是origin(因为用的是origin Key)，然后再拿着originKey去磁盘找，找出来decode。 DecodeFromCache又包括两步decodeResultFromCache和decodeSourceFromCache，这就让人想到Glide的DiskCacheStrategy分为Result和Source，即可以缓存decode结果也可以缓存decode之前的source。前提是在上面的diskCacheProvider.getDiskCache().get(key)方法里面找到了CachedFile。这个路径在InternalCacheDiskCacheFactory里面写了具体的路径 123456789101112131415161718public InternalCacheDiskCacheFactory(final Context context, final String diskCacheName, int diskCacheSize) &#123; super(new CacheDirectoryGetter() &#123; @Override public File getCacheDirectory() &#123; File cacheDirectory = context.getCacheDir(); if (cacheDirectory == null) &#123; return null; &#125; if (diskCacheName != null) &#123; return new File(cacheDirectory, diskCacheName); //就是context.getCacheDir+\"image_manager_disk_cache\" //默认上限是250MB //由于这个Cache放在CacheDir里面，其他应用拿不到 &#125; return cacheDirectory; &#125; &#125;, diskCacheSize); &#125; 注意无论是decodeResultFromCache还是decodeSourceFromCache里都有类似的一段：12Resource&lt;T&gt; transformed = loadFromCache(resultKey);Resource&lt;Z&gt; result = transcode(transformed); ///把一种资源转成另一种资源，比如把Bitmap的Resource转成一个ByteResource 4.2 SourceService这个线程池以及BitmapPool这一层缓存的出现12345678910111213private Resource&lt;T&gt; decodeFromSourceData(A data) throws IOException &#123; final Resource&lt;T&gt; decoded; if (diskCacheStrategy.cacheSource()) &#123; decoded = cacheAndDecodeSourceData(data); &#125; else &#123; long startTime = LogTime.getLogTime(); decoded = loadProvider.getSourceDecoder().decode(data, width, height); // 这里面放进BitmapPool了 if (Log.isLoggable(TAG, Log.VERBOSE)) &#123; logWithTimeAndKey(\"Decoded from source\", startTime); &#125; &#125; return decoded; &#125; 第四层缓存出现。。。LruBitmapPoolDecodeFromSource也是类似，判断是否允许Cache，通过DataFetcher获取数据这个数据可能是InputStream，也可能是ImageVideoWrapper。。。总之是一个可以提供数据的来源。如果可以Cache的话，先把数据写到lru里面，然后从lru里面取出来，从Source decode成想要的数据类型。例如从Stream转成Bitmap是这么干的StreamBitmapDecoder.java12345@Override public Resource&lt;Bitmap&gt; decode(InputStream source, int width, int height) &#123; Bitmap bitmap = downsampler.decode(source, bitmapPool, width, height, decodeFormat); return BitmapResource.obtain(bitmap, bitmapPool); &#125; 顺便还放进了LruBitmapPool（又一个实现了lru算法的缓存），Bitmap存在一个LruPoolStrategy接口实例的GroupedLinkedMap中。 4.3 回到主线程EngineRunnable的run方法跑在子线程，在run的最后就是用一个handler推到主线程了。有可能是从CacheService这个线程池里面的线程推过去的，也可能是SourceSevice这个线程池里面推过去的。 onResourceReady最终会走到GenericRequest的onResourceReady方法里12345678private void onResourceReady(Resource&lt;?&gt; resource, R result) &#123; if (requestListener == null || !requestListener.onResourceReady(result, model, target, loadedFromMemoryCache, isFirstResource)) &#123; GlideAnimation&lt;R&gt; animation = animationFactory.build(loadedFromMemoryCache, isFirstResource); target.onResourceReady(result, animation); //注意这句话就可以了 &#125; &#125; 最终会调到ImageViewTarget,AppWidgetTarget等Target（持有Request和View,View可能没有），这时候，直接调用ImageView.setImagBitmap等方法就可以了。图片设置完毕。 5. Glide除了普通的加载方法，还能用什么比较有意思的玩法 1.Glide加载Gif的原理在GifDecoder的 public synchronized Bitmap getNextFrame()方法里，Gif本质上是一帧帧的Frame数据，Glide将这些数据包装到GifFrame这个类中，每次想要获得下一帧的时候，就从bitmapPool中obtain Bitmap,同时从Frame中提取必要信息填充bitmap.Gif的显示是在GifDrawable的draw方法里面通过frameLoader.getCurrentFrame()获得当前帧的bitmap。android.graphics.Movie也能加载gif图片。只是Movie里面都是些native方法，glide的GifHeaderParser.java中的readContents方法里面用java方法实现了对gif帧的读取。从GifDecoder.read这个方法开始读就好了 2.GlideDrawableImageViewTarget中有这么一段注释： 123456789101112131415161718192021@Override public void onResourceReady(GlideDrawable resource, GlideAnimation&lt;? super GlideDrawable&gt; animation) &#123; if (!resource.isAnimated()) &#123; //TODO: Try to generalize this to other sizes/shapes. // This is a dirty hack that tries to make loading square thumbnails and then square full images less costly // by forcing both the smaller thumb and the larger version to have exactly the same intrinsic dimensions. // If a drawable is replaced in an ImageView by another drawable with different intrinsic dimensions, // the ImageView requests a layout. Scrolling rapidly while replacing thumbs with larger images triggers // lots of these calls and causes significant amounts of jank. float viewRatio = view.getWidth() / (float) view.getHeight(); float drawableRatio = resource.getIntrinsicWidth() / (float) resource.getIntrinsicHeight(); if (Math.abs(viewRatio - 1f) &lt;= SQUARE_RATIO_MARGIN &amp;&amp; Math.abs(drawableRatio - 1f) &lt;= SQUARE_RATIO_MARGIN) &#123; resource = new SquaringDrawable(resource, view.getWidth()); &#125; &#125; super.onResourceReady(resource, animation); this.resource = resource; resource.setLoopCount(maxLoopCount); resource.start(); &#125; Glide还可以用来纯粹的解码获得Bitmap.1234567891011121314Glide.with(itemView.getContext()) //不用担心leak,RequestManager只是通过这个context获得了ApplicationContext，保留下来的是Application的context .load(R.drawable.image_41) .asBitmap() .centerCrop().into(new SimpleTarget&lt;Bitmap&gt;() &#123; @Override public void onResourceReady(Bitmap resource, GlideAnimation&lt;? super Bitmap&gt; glideAnimation) &#123; &#125; @Override public void onDestroy() &#123; super.onDestroy(); //其实这里面是空方法。 &#125; &#125;); 4.缓存路径获取 12345678910111213Glide.with(itemView.getContext()) .load(\"\") .downloadOnly(new BaseTarget&lt;File&gt;() &#123; @Override public void onResourceReady(File resource, GlideAnimation&lt;? super File&gt; glideAnimation) &#123; Log.d(TAG, resource.getAbsoluteFile()); //放心，都在主线程 &#125; @Override public void getSize(SizeReadyCallback cb) &#123; &#125; &#125;); 根据之前的分析，打印出来的应该是context.getCacheDir+”image_manager_disk_cache”+”/xxxxxx.xxx” ，我没研究过后缀，不过这个后缀没意义吧。 在2017年的Droidcon2017NYC上，有一个演讲提到了关于图片尺寸大小和内存关系。大致情形就是在使用加载图片的时候，使用了一张3594pixel5421pixel(1900万像素)的图片（内存占用19million pixels X 4 bytes/pixel = 78MB），填进了一个50dp50dp的avatar中。而如果使用和ImageView大小一样的图片源的话(150pxX150px)，只需要90kb。这之间的内存消耗差异几乎是1000倍。这位speaker说的解决方案是请求图片是加上宽度和高度参数，或者调用Picasso的fit方法。目前看来，Glide从onSizeReady之后获取资源的每一步，读取缓存，读磁盘，解码图片这些过程都带上了width和height参数，所以应该也是不存在这种浪费内存的问题 - 总结 4层缓存（MemoryCache是内存中的一层，activeResources是一层（HashMap）,cacheService和SourceService这俩线程池干活需要一个DiskLruCache，另外decode还有一个bitmapPool，其实这不算缓存吧）。 默认的缓存大小考虑了屏幕尺寸和可用内存大小，科学合理。线程池的keepAlive数量上，一个是可用cpu核心数，所以快吧，一个是1。 全局只有一个Glide,一个页面只有一个RequestManager Target是一个接口，将资源的受众抽象成一个接口。 setTag会崩，ListView,RecyclerView原理,加载优化(prefetcher什么的，滑动过程中不去加载图片，Glide只是取消了之前的请求，并未去prefetch,其实可以啊，网络差的时候，downloadOnly就好了嘛，下次会快一点点) 传进去的是context，但它只是借用context.getApplicationContext，保留下来的是ApplicationContext，哪有那么容易leak。 生命周期挂钩什么，创建一个没有View的SupportFragment，还是做的很巧妙的。 泛型写的各种绕。。。 现在来回答那个问题：“如果你来设计一个图片加载框架，你会怎么设计？” 一个ImagerLoader应该具有的几个特性包括： 内存缓存和磁盘缓存,lru 做好图片压缩和bitmap重用(不可见图片及时回收)，避免oom (bitmap的宽高要根据View的大小确定) 对于不同资源来源能够提供对应的DataFetcher 对外提供start,stop,pause,resume等功能，必要时自动跟踪应用生命周期 耗时操作(io，解码)挪到后台 内存缓存可以设计两层bitmap缓存，一层是直接拿来用的(active)，一层是lru的。根据经验，一张bitmap占几个MB(高分辨屏幕)，而一个App能够使用的最大heap大小（ActivityManage.getMemoryClass）一般在100多MB，取其中的40%。完全能够做到内存中cache十几张bitmap。 外部调用者需要传入资源(url,File,res，etc)，及ImageView实例(我们也就有了Context)。在onPreDraw之后获得View的尺寸（这一点至关重要）。根据资源地址生成唯一的key，在bitmap pool中查找，然后在内存缓存(lru)中查找。如果还未找到的话提交DiskCache查找请求请求到DiskCache查找线程池，如果未找到提交请求到资源获取线程池(网络，文件，或者Res)，数据获取完成后cahe到disk并提交到主线程。多线程同步和生命周期追踪是难点。 参考 Android Glide源码解析","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"网络通信手册","date":"2017-07-21T00:05:32.000Z","path":"2017/07/21/2017-07-21-network-manual/","text":"网络相关的查找手册 1. URI和URL是两件事根据wiki的解释URL是URI的子集，URL的一般格式包括三部分：资源类型、存放资源的主机域名，资源文件名。语法格式上,根据百度百科找到一个能用的：1protocol :// hostname[:port] / path / [;parameters][?query]#fragment protocol 指使用的传输协议(http、file、https、mailto、ed2k、thunder等)hostname 是指存放资源的服务器的域名系统(DNS) 主机名或 IP 地址。有时，在主机名前也可以包含连接到服务器所需的用户名和密码（格式：username:password@hostname）。有时候是ip,有时候前面还带账号密码port http默认是80，https是443 ,ssh默认端口号是20path(路径) 由零或多个“/”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。parameters（参数）这是用于指定特殊参数的可选项。query(查询) 一般GET请求可以在这里面查找。可选，用于给动态网页（如使用CGI、ISAPI、PHP/JSP/ASP/ASP。NET等技术制作的网页）传递参数，可有多个参数，用“&amp;”符号隔开，每个参数的名和值用“=”符号隔开。fragment（信息片断）字符串，用于指定网络资源中的片断。例如一个网页中有多个名词解释，可使用fragment直接定位到某一名词解释。 1.1 Http的GET请求的url长度是有限制的(服务器和浏览器都限制了)Http1.1协议中并没有做这个限制，但通信的两端，服务器(Nginx和Tomcat)和客户端(浏览器厂商)都做了限制。参考一些浏览器的url长度限制，即url长度不能超过这么多个字符 IE : 2803 Firefox:65536 Chrome:8182 Safari:80000 Opera:190000再具体一点的话，就是下面这个我在百度里搜索zhihu这个词的时候1234567891011GET /s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=zhihu&amp;rsv_pq=d66519eb000157d4&amp;rsv_t=4ce0B%2B8rfGgWxu9SAjGi7H5n5vylTydZebyyJXgD0JrPUSfBwp5zKxK9uKQ&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=6&amp;rsv_sug1=4&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;inputT=3737&amp;rsv_sug4=4444 HTTP/1.1 （从GET到这里不能超过8182个字）Host: www.baidu.comConnection: keep-aliveCache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.101 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8DNT: 1Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.8Cookie: BAIDUID=325243543:FG=1; PSTM=543534543; BIDUPSID=54353; pgv_pvi=5435; MCITY=-%3A; BD_HOME=0; BD_UPN=5435; H_PS_645EC=453453453; BDORZ=5435; BD_CK_SAM=1; PSINO=5; BDSVRTM=54; H_PS_PSSID=543; ispeed_lsm=2 另外，Cookie就是一个键值对，放在header里面，所以如果服务器对于Http请求头长度做了限制，Cookie也会受限制。 1.2 GET和POST的一些小区别GET只会发一个TCP包，POST发两个(一个是Header,一个是Body)。所以GET快一点，POST要求服务器长时间处于连接状态，可能造成服务器负载升高。一个比较实在的例子是，我在七牛的CDN上看到的收费价格1万次PUT/10万次GET，不用想也知道GET对于服务器的压力要比PUT小 2. http请求本质上是发送了一堆字符给服务器另外,domain(域名)是指www.wikipedia.org这种，DNS会把它转成一个ip地址而在http请求的header中经常或看到Host: www.baidu.com\\r\\n 这样的一行，其实这是Http头字段的标准请求字段，总之就是标准。这个Host指的是服务器的域名，就是domian。wiki上的http名词解释 2.1 statusCode有些常用的还是要记住的：比较好的一个表格 101 Switching Protocols (注意WebSocket)200 一切正常，对GET和POST请求的应答文档跟在后面。201 Created 比如刚刚向服务器提交了一次POST请求创建了一项资源301 Moved Permanently 客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。302 Found 类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。304 Not Modified 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告诉客户，原来缓冲的文档还可以继续使用。401 Unauthorized403 Forbidden404 Not Found414 Request URI Too Long URI太长（HTTP 1.1新）。这就是上面说的Http的GET请求的url长度是有限制的，是服务器方做出的限制500 Internal Server Error502 Bad Gateway 服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。503 Service Unavailable 服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个Retry-After头。就是服务器扛不住了的意思504 Gateway Timeout 由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新） 3. Header相关的首先看下请求百度首页的request和response Request（其实发送的时候每一行后面都跟了一个\\r\\n用于换行） 1234567891011GET / HTTP/1.1Host: www.baidu.comConnection: keep-aliveCache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8DNT: 1Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4Cookie: BAIDUID=B41D39A8836273546754tC7F0C5DE315B64E2:FG=1; MCITY=-289%3A; Response(同样，无线电传输的时候是没有换行的概念的，每一行末尾都有一个\\r\\n) 1234567891011121314151617181920HTTP/1.1 200 OKBdpagetype: 1Bdqid: 0xa1524365407b7Bduserid: 0Cache-Control: privateConnection: Keep-AliveContent-Encoding: gzipContent-Type: text/html; charset=utf-8Cxy_all: baidu+9bdfb3567324332546a7cb482b3Date: Sun, 23 Jul 2017 08:27:22 GMTExpires: Sun, 23 Jul 2017 08:26:51 GMTServer: BWS/1.1Set-Cookie: BDSVRTM=0; path=/Set-Cookie: BD_HOME=0; path=/Set-Cookie: H_PS_PSSID=1430_210543_17001; path=/; domain=.baidu.comStrict-Transport-Security: max-age=172800Vary: Accept-EncodingX-Powered-By: HPHPX-Ua-Compatible: IE=Edge,chrome=1Transfer-Encoding: chunked 报文的语法：请求的格式 注意上面的“path=/”document.cookie = “username=cfangxu;path=/;domain=qq.com”如上：“www.qq.com” 与 “sports.qq.com” 公用一个关联的域名”qq.com”，我们如果想让 “sports.qq.com” 下的cookie被 “www.qq.com” 访问，我们就需要用到 cookie 的domain属性，并且需要把path属性设置为 “/“。cookie还有domain和path的概念 123&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;&lt;headers&gt;&lt;entity-body&gt; 响应的格式 123&lt;version&gt; &lt;status&gt; &lt;reason-phrase&gt;&lt;headers&gt;&lt;entity-body&gt; request中常见的请求头包括： Accept：指定客户端能够接收的内容类型 Accept-Charset ：浏览器可以接受的字符编码集 Accept-Encoding:gzip, deflate, br客户端浏览器可以支持的压缩编码类型。比如gzip，用于压缩数据，节省带宽。 Accept-Language 指定Http客户端浏览器用来优先展示的语言示例: Accept-Language:zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4 Cache-Control： 参考具体操作百度百科写的很清楚可能的值包括： public 所有内容都将被缓存(客户端和代理服务器都可缓存)private 内容只缓存到私有缓存中(仅客户端可以缓存，代理服务器不可缓存)no-cache 必须先与服务器确认返回的响应是否被更改，然后才能使用该响应来满足后续对同一个网址的请求。因此，如果存在合适的验证令牌 (ETag)，no-cache 会发起往返通信来验证缓存的响应，如果资源未被更改，可以避免下载。no-store 所有内容都不会被缓存到缓存或 Internet 临时文件中(和no-cache相比，“no-store”则要简单得多。它直接禁止浏览器以及所有中间缓存存储任何版本的返回响应，例如，包含个人隐私数据或银行业务数据的响应。每次用户请求该资产时，都会向服务器发送请求，并下载完整的响应。发现虽然设置了no-cache，但是没有设置ETag可以进行校验，最终还是从缓存里读取)。有些敏感信息，用户账户列表这种，就应该完全不缓存在本地。max-age=xxx (xxx is numeric) 缓存的内容将在 xxx 秒后失效, 这个选项只在HTTP 1.1可用, 并如果和Last-Modified一起使用时, 优先级较高 实际过程中我看到了这种：Cache-Control:private, no-cache, no-cache=Set-Cookie, no-store, proxy-revalidate，must-revalidate…. 而浏览器的前进后退，默认会从缓存里读取，完全不发请求。 Connection:keep-alive http1.1 默认为keep-alivehttp 1.0需要手动设置。原理就是服务器保持客户端到服务器的连接持续有效，避免了重新建立连接的开销(tcp三次握手)。这种情况下，客户端不能根据读取到EOF(-1)来判断传输完毕。有两种解决方案：对于静态文件，客户端和服务器能够知道其大小，使用content-length，根据这个判断数据是否已经接收完成；对于动态页面，不可能预先知道内容大小。可以使用Transfer-Encoding:chunked的模式进行传输。基本上就是服务器把文件分成几块，一块一块的发送过去。参考 Content-Type 代表文件类型。request只有POST请求中会有，Response中也会有。POST里面的Content-type有两种:Content-type: application/x-www-form-urlencoded;charset:UTF-8 //缺省值，表示提交表单multipart/form-data //上传文件时用这种，既可以发送文本数据，也支持二进制上传。上面那个CharSet只是为了告诉服务器用的是哪种编码响应头中的Content-Type示例： Content-Type:image/gif或者Content-Type: text/html;charset=utf-8 参考 Date:Sun, 23 Jul 2017 07:39:47 GMT 这就是当前的GMT时间 DNT: 1 Do Not Track（当用户提出启用“请勿追踪”功能后，具有“请勿追踪”功能的浏览器会在http数据传输中添加一个“头信息”（headers），这个头信息向商业网站的服务器表明用户不希望被追踪。这样，遵守该规则的网站就不会追踪用户的个人信息来用于更精准的在线广告。） Etag 用于比较客户端请求的文件的内容是否发生了改变。跟Last-Modified的作用差不多。最简单的用hash值就可以了。 Expires:Mon, 01 Jan 1990 00:00:00 GMT 过期时间，这里应该是永不过期 HOST 服务器的域名(domian)或者ip地址Host: www.baidu.com If-Modified-Since:Fri, 24 Feb 2017 12:37:22 GMT 这个跟缓存有关 If-None-Match:”abf29cbe9a8ed21:0” 还是缓存 Pramga 和Cache-Control一样实例： Pramga: no-cache 相当于 Cache-Control： no-cache。 User-Agent 这个代表用的是哪种浏览器(客户端)，写爬虫的时候找到一大堆User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36Android设备发出来的可能长这样： Mozilla/5.0 (Linux; U; Android 4.4.4; zh-cn; HTC_D820u Build/KTU84P) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30ios设备发出来的长这样: Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A365 Safari/600.1.4至少Chrome团队给出了自家浏览器的UA Referer 一般是一个url，代表当前请求时从哪个页面发出的，写爬虫有用 Header其实就是个字典，比较麻烦的就是Cache-Control了，这个还要结合If-None-Match，Etag来看。需要用的时候再看应该也不迟。 WikI上比较完整 Transfer-Encoding: chunked 有时候要传输的Content-Length实在太大，服务器计算长度需要开很大的Buffer，干脆把文件分块传输。wiki的解释，注意此时content-length无效。浏览器对于缓存的实际处理，是否过期由Cache-Control标识的max-age和Expires判断。Cache-Control的优先级较高。From Chrome简单来说就是先看客户端是否Expire，然后去服务器看下Etag,最后看Last-Modified那个。 补上一个http statuscode = 302的实际例子吧，今晚看腾讯新闻的时候抓到的1234567891011121314151617181920212223242526Request URL:http://tdd.3g.qq.com/17421/e8475fe7-7418-43bf-9be7-c6b116730cac.gif?a=0.33637654883709955&amp;b=1511790303321Request Method:GETStatus Code:302 FoundRemote Address:123.151.152.123:80Referrer Policy:no-referrer-when-downgradeRequest HeaderAccept:image/webp,image/apng,image/*,*/*;q=0.8Accept-Encoding:gzip, deflateAccept-Language:zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7Connection:keep-aliveCookie:XX=SDSDSADSA0; SADSAD=21FDGFDGF; //cookie是我编的DNT:1Host:tdd.3g.qq.comReferer:http://new.qq.com/omn/20171127A0OHHD00User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.62 Safari/537.36Response HeaderCache-Control:max-age=0Connection:closeContent-Length:0Date:Mon, 27 Nov 2017 13:45:04 GMTExpires:Mon, 27 Nov 2017 13:45:04 GMTLocation:http://210.22.248.167/tdd.3g.qq.com/17421/e8475fe7-7418-43bf-9be7-c6b116730cac.gif?mkey=5a1c30156df5812a&amp;f=4f20&amp;c=0&amp;a=0.33637654883709955&amp;b=1511790303321&amp;p=.gif //注意这个新的locationServer:nws 1.2.15 4. Cookie和Session4.1 Cookie先看Wiki上的解释: 指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密.主要是因为Http是无状态的，服务器不知道这一次连接和上一次连接是不是同一个客户端Cookie总是保存在客户端中，按在客户端中的存储位置，可分为内存Cookie和硬盘Cookie。内存Cookie由浏览器维护，保存在内存中，浏览器关闭后就消失了，其存在时间是短暂的。硬盘Cookie保存在硬盘里，有一个过期时间，除非用户手工清理或到了过期时间，硬盘Cookie不会被删除，其存在时间是长期的。所以，按存在时间，可分为非持久Cookie和持久Cookie。 Cookie的一些缺点，直接照搬WiKi了 Cookie会被附加在每个HTTP请求中，所以无形中增加了流量。(其实这里面只应该放“每次请求都要携带的信息”) 由于在HTTP请求中的Cookie是明文传递的，所以安全性成问题。（除非用HTTPS） Cookie的大小限制在4KB左右。对于复杂的存储需求来说是不够用的。 一个域名下存放的cookie的个数是有限制的，不同的浏览器存放的个数不一样,一般为20个。 cookie也可以设置过期的时间，默认是会话结束的时候，当时间到期自动销毁 另外，不同域名是无法共享浏览器端本地信息，包括cookies，这即是跨域问题。百度是不能读取爱奇艺的Cookie的，这是安全性问题。需要注意的是，虽然网站images.google.com与网站www.google.com同属于Google，但是域名不一样，二者同样不能互相操作彼此的Cookie。必须域名一样才能操作。Java中把Cookie封装成了javax.servlet.http.Cookie类，直接用就可以了。 Cookie并不提供修改、删除操作。如果要修改某个Cookie，只需要新建一个同名的Cookie，添加到response中覆盖原来的Cookie。 对了，在众多的Header中Cookie一般长这样: Cookie:key1=value1;key_2=value2;key_3=value3;JSessionID=24DHFKDSFKJ324329NSANDI124EH故意把最后一个JSESSION写出来是因为底下要讲Session了嘛 4.2 Session参考文章Header(字典)里面装着一个Cookie(字典)，Cookie里面有个键值对:JSESSIONID:SESSIONID宏观上就是这么个关系。 Cookie保存在客户端，Session保存在服务器端。Session是在客户端第一次访问的时候由服务器创建的，session一般存储在redis中（ram），客户端始终只有sessionId。第二次请求的时候(session还未过期)，浏览器会加上sessionId=XXXXX。服务器接收到请求后就得到该请求的sessionID，服务器找到该id的session返还给请求者（Servlet）使用。一个会话只能有一个session对象，对session来说是只认id不认人。 Session超时：超时指的是连续一定时间服务器没有收到该Session所对应客户端的请求，并且这个时间超过了服务器设置的Session超时的最大时间。Session的maxAge一般为-1，表示仅当前浏览器内有效，关闭浏览器就会失效。 知乎上有一段比较好的描述,这里直接引用了。http是无状态的协议，客户每次读取web页面时，服务器都打开新的会话，而且服务器也不会自动维护客户的上下文信息，那么要怎么才能实现网上商店中的购物车呢，session就是一种保存上下文信息的机制，它是针对每一个用户的，变量的值保存在服务器端，通过SessionID来区分不同的客户,session是以cookie或URL重写为基础的，默认使用cookie来实现，系统会创造一个名为JSESSIONID的输出cookie，我们叫做session cookie,以区别persistent cookies,也就是我们通常所说的cookie,注意session cookie是存储于浏览器内存中的，并不是写到硬盘上的，这也就是我们刚才看到的JSESSIONID，我们通常情是看不到JSESSIONID的，但是当我们把浏览器的cookie禁止后，web服务器会采用URL重写的方式传递Sessionid，我们就可以在地址栏看到 sessionid=KWJHUG6JJM65HS2K6之类的字符串。javax.servlet.http.HttpServletRequest.getSession() 将会返回当前request相关联的HttpSession对象，如果不存在，将会创建一个。翻译一下，当一个浏览器请求来到之后，Servlet处理程序（Servlet容器内部实现）将会主动检查请求信息Cookie当中是否有JSESSIONID，若有，找到对应JSESSION的HttpSession对象，如果没有，创建一个，具体的机制在Servlet容器的实现当中。 Session就是维护会话的。 session在express js中是这么维护的 这意思就是说，当你浏览一个网页时，服务端随机产生一个 1024 比特长的字符串，然后存在你 cookie 中的 connect.sid 字段中。当你下次访问时，cookie 会带有这个字符串，然后浏览器就知道你是上次访问过的某某某，然后从服务器的存储中取出上次记录在你身上的数据。由于字符串是随机产生的，而且位数足够多，所以也不担心有人能够伪造。伪造成功的概率比坐在家里编程时被邻居家的狗突然闯入并咬死的几率还低。 4.3 自动登录的实现一些网站的“记住密码，自动登录功能”，据说discuz直接将加密的（可逆）uid和密码保存到cookie中。另外一种做法是可以尝试将Session的过期时间设置的长一点，比如一年，下次访问网站的时候就能实现自动登录了。更好一点的是是本地绝不保存用户敏感信息，登录生成一个有过期时间的的cookie或者token返回给客户端，下次打开浏览器判断下过期时间就好了。另外，现在浏览器大多带有记住密码的功能，这个锅还是丢给浏览器(用户)好了。 论Token为什么要放在内存里 为了解决在操作过程不能让用户感到 Token 失效这个问题，有一种方案是在服务器端保存 Token 状态，用户每次操作都会自动刷新（推迟） Token 的过期时间——Session 就是采用这种策略来保持用户登录状态的。然而仍然存在这样一个问题，在前后端分离、单页 App 这些情况下，每秒种可能发起很多次请求，每次都去刷新过期时间会产生非常大的代价。如果 Token 的过期时间被持久化到数据库或文件，代价就更大了。所以通常为了提升效率，减少消耗，会把 Token 的过期时保存在缓存或者内存中。 这篇文章顺便提到了如果在Token过期的时候去实现重刷Token的操作，首先客户端绝对不会存账户密码这种敏感信息。第一次登录成功后，后台返回token(有一定时长有效期)和一个refreshToken(如果前面的token失效了，直接拿着这个去请求后台给个新的Token)。所以客户端基本上就是在onError里面判断如果是Token失效的话，拿着refreshToken去重新获取Token。 5. 长连接像即时通讯软件，或者消息推送这种场景，都得维护一个长连接。HTTP长连接和短连接 5.1长连接的实现原理 轮询 心跳 Tcp长连接 HTTP1.1规定了默认保持长连接（HTTP persistent connection ，也有翻译为持久连接），数据传输完成了保持TCP连接不断开（不发RST包、不四次握手），等待在同域名下继续用这个通道传输数据；相反的就是短连接。TCP的keep alive是检查当前TCP连接是否活着；HTTP的Keep-alive是要让一个TCP连接活久点。它们是不同层次的概念。TCP keep alive的表现：当一个连接“一段时间”没有数据通讯时，一方会发出一个心跳包（Keep Alive包），如果对方有回包则表明当前连接有效，继续监控。Http长连接不如说tcp长连接,Tcp是可以不断开的，http连接服务器给到response之后就断开了。TCP连接Http不过是做了tcp连接复用,http通道是一次性的，tcp不是的，这样做也是为了节省tcp通道。长连接就是Connection keep-Alive那玩意，客户端和服务器都得设置才有效。长短轮询的间隔是服务器通过代码控制的。 TCP 长连接是一种保持 TCP 连接的机制。当一个 TCP 连接建立之后，启用 TCP Keep Alive 的一端便会启动一个计时器，当这个计时器到达 0 之后，一个 TCP 探测包便会被发出。这个 TCP 探测包是一个纯 ACK 包，但是其 Seq 与上一个包是重复的。打个比喻，TCP Keep Alive 是这样的：TCP 连接两端好比两个人，这两个人之间保持通信往来（建立 TCP 连接）。如果他俩经常通信（经常发送 TCP 数据），那这个 TCP 连接自然是建立着的。但如果两人只是偶尔通信。那么，其中一个人（或两人同时）想知道对方是否还在，就会定期发送一份邮件（Keep Alive 探测包），这个邮件没有实质内容，只是问对方是否还在，如果对方收到，就会回复说还在（对这个探测包的 ACK 回应）。需要注意的是，keep alive 技术只是 TCP 技术中的一个可选项。因为不当的配置可能会引起诸如一个正在被使用的 TCP 连接被提前关闭这样的问题，所以默认是关闭的 5.2 keep-Alive和WebSocket的区别 5.3 http2可以实现推送了5.4 Http这玩意就不是为了视频流设计的HTTP wasn’t really designed for streaming 5.5 主流浏览器浏览器默认最大并发连接数浏览器不可能同时发起10000个请求，所以主流浏览器都设定了限制,主要是http1.1,http2的话，只有一条connection。解释 5.6 TLS,SSL6. WebSocket、SPDY、Http2WebSocket一种在单个TCP 连接上进行全双工通讯的协议。HTTP/2（超文本传输协议第2版，最初命名为HTTP 2.0），简称为h2（基于TLS/1.2或以上版本的加密连接）或h2c（非加密连接），是HTTP协议的的第二个主要版本SPDY也就是HTTP/2的前身，一种开放的网络传输协议，由Google开发，用来发送网页内容。基于传输控制协议（TCP）的应用层协议 7. DNS(Domian Name System)通过java代码调用DNS的方式123456789101112public class Test &#123; public static void main(String[] args) throws UnknownHostException &#123; //获取本机IP地址 System.out.println(InetAddress.getLocalHost().getHostAddress()); //获取www.baidu.com的地址 System.out.println(InetAddress.getByName(\"www.baidu.com\")); //获取www.baidu.com的真实IP地址 System.out.println(InetAddress.getByName(\"www.baidu.com\").getHostAddress()); //获取配置在HOST中的域名IP地址 System.out.println(InetAddress.getByName(\"TEST\").getHostAddress()); &#125; &#125; 8.Fiddler抓包 手机和电脑连接同一个wifi 从https://www.telerik.com/download/fiddler 下载Fiddler 启动并配置: Tools-&gt;Fiddler-&gt;Connections, check “allow remote computers to connect” and default port is 8888 配置手机：选择连接的网络-&gt;修改网络-&gt;代理设置:手动; 代理服务器主机名为电脑的ip，端口8888，ip DHCP 抓包查看 9.Ajax和jQuery发起POST请求的时候设置的Content-Type对于服务器很重要AJAX POST请求中参数以form data和request payload形式在servlet中的获取方式 最近在看书时才真正搞明白，服务器为什么会对表单提交和文件上传做特殊处理，因为表单提交数据是名值对的方式，且Content-Type为application/x-www-form-urlencoded，而文件上传服务器需要特殊处理，普通的post请求（Content-Type不是application/x-www-form-urlencoded）数据格式不固定，不一定是名值对的方式，所以服务器无法知道具体的处理方式，所以只能通过获取原始数据流的方式来进行解析。jquery在执行post请求时，会设置Content-Type为application/x-www-form-urlencoded，所以服务器能够正确解析，而使用原生ajax请求时，如果不显示的设置Content-Type，那么默认是text/plain，这时服务器就不知道怎么解析数据了，所以才只能通过获取原始数据流的方式来进行解析请求数据。 10 .七层网络模型OSI七层网络体系结构 ： 物理层(IEEE 802.2)、数据链路层(ARP,RARP)、网络层(ip,icmp)、传输层(tcp,udp)、表示层、会话层(SSL,TLS)、应用层(HTTP,FTP,SMTP,POP3).这里面Socket比较特殊，Socket是一组编程接口（API）。介于传输层和应用层，向应用层提供统一的编程接口。应用层不必了解TCP/IP协议细节。直接通过对Socket接口函数的调用完成数据在IP网络的传输。 OSI Model application firefox/chrome/emailPresentation OS / letters$numbers -&gt; ASCIISession Conversation between computersTransport Packets are delived reliably(比如发送顺序和接受顺序一致)Network Dtetermine best route for dataData link NICS’s(Network interface cards) checking for errors(比如switches)Physical Cabel / fiber optic cable / electronic signals 应用层面的Http，SMTP,FTP,POP,TLS/SSL,IMAP tcp三次握手，四次挥手在UDP中，每次发送数据报时，需要附带上本机的socket描述符和接收端的socket描述符。而由于TCP是基于连接的协议，在通信的socket对之间需要在通信之前建立连接，因此会有建立连接这一耗时存在于TCP协议的socket编程。 在UDP中，数据报数据在大小上有64KB的限制。而TCP中也不存在这样的限制。一旦TCP通信的socket对建立了连接，他们之间的通信就类似IO流，所有的数据会按照接受时的顺序读取。 UDP是一种不可靠的协议，发送的数据报不一定会按照其发送顺序被接收端的socket接受。然而TCP是一种可靠的协议。接收端收到的包的顺序和包在发送端的顺序是一致的。 TCP适合于诸如远程登录(rlogin,telnet)和文件传输（FTP）这类的网络服务。因为这些需要传输的数据的大小不确定。而UDP相比TCP更加简单轻量一些。UDP用来实现实时性较高或者丢包不重要的一些服务。在局域网中UDP的丢包率都相对比较低。 tls,https加密过程，sha1和sha256加密算法 ping ,traceRouter tcp三次握手四次挥手，用人话说：因为HTTP是一个基于TCP的协议,而TCP是一种可靠的传输层协议.建立TCP连接时会发生:三次握手(three-way handshake)firefox &gt; nginx [SYN] 在么nginx &gt; firefox [SYN, ACK] 在firefox &gt; nginx [ACK] 知道了 关闭TCP连接时会发生:四次挥手(four-way handshake)firefox &gt; nginx [FIN] 我要关闭连接了nginx &gt; firefox [ACK] 知道了,等我发完包先nginx &gt; firefox [FIN] 我也关闭连接了firefox &gt; nginx [ACK] 好的,知道了 几个报文的标识的解释:SYN: synchronization(同步)ACK: acknowledgement(确认:告知已收到)FIN: finish(结束) 作者：eechen链接：https://www.zhihu.com/question/67772889/answer/257170215来源：知乎 ===========================trash here=====================================经常说的网速 bps (bits per second)，所以跟byte比起来，要除以8。1024kbps的带宽就意味着每秒传递的数据大小为1024/8=128KB。1024s就是128MB（这下清楚了） css sprites在http2的环境下并不完全无效 一些优化[TTFB] TTFB（Time To First Byte），客户端发出请求到收到响应的第一个字节所花费的时间。一般浏览器里面都能看到，这也是服务端可以优化的指标。 GZip压缩文本还可以，图片就没必要开压缩了，因为图片本身就高度压缩了，再压只是浪费CPU。 网络协议，架构，规范，spdy,http2,url规范. HLS直播流慢(延迟高)是因为基于HTTP，(http live streaming，苹果提出的)如果要低延迟还得rmtp 开启浏览器内支持webp关于WebP接入方案单个网卡最多65535个端口2的16次方 = 65536。 2的32次方 = 4GB（大致是32位系统不能识别4G以上内存的原因） 短网址(short URL)系统的原理及其实现 301 是永久重定向，302 是临时重定向。短地址一经生成就不会变化，所以用 301 是符合 http 语义的。同时对服务器压力也会有一定减少。但是如果使用了 301，我们就无法统计到短地址被点击的次数了。而这个点击次数是一个非常有意思的大数据分析数据源。能够分析出的东西非常非常多。所以选择302虽然会增加服务器压力，但是我想是一个更好的选择。 Android微信智能心跳方案为什么基于TCP的应用需要心跳包（TCP keep-alive原理分析） ipv6 ping6 参考 谈谈HTTP协议中的短轮询、长轮询、长连接和短连接 http请求的TCP瓶颈 Restfull架构详解 文件断点续传原理,CountdownLatch 断点续传实现 一张非常好的解释status code的表格 tcp-ip较好的解释 基本算是计算机网络教程的 C10K问题 服务器常用端口以及TCP/UDP端口列表 tcp dump + wireShark抓包详细教程 httpOnly：浏览器不允许脚本操作 document.cookie 去更改 cookie cookie 和 session参考 签名(signedCookies)server一般不会在client端cookie中保留敏感信息，所以比方说我们要存一个user_id，正常也应该存在session中（后台的redis根据请求头中的session_id自己去找）。假如非要存client端的cookie中，可以这么干：sever端保留一段随机的String，server将用户的user_id(存在后台)用sha1算法加密比如1234var secret = \"some_very_important_key\"; // 这段secret越长，暴力破解的难度越大function sha1(real_user_id)&#123; return sha1(secret+real_user_id);&#125; 实际使用中:user_id： John Doe即 “some_very_important_keyJohn Doe” = ‘a0d63c5c4194a1d2a67b96391d8d52954ac3512e’;在线sha1工具所以client端最终保存的是”user_id_signed”: “a0d63c5c4194a1d2a67b96391d8d52954ac3512e”后台收到请求之后，在后台服务的数据库中SELECT * FROM USER_TABLE WHERE user_id_signed = “a0d63c5c4194a1d2a67b96391d8d52954ac3512e”;找到了的话就一切正常，找不到就403；上述过程即”签名，专业点说，叫 信息摘要算法”。 在yahoo上找到这样的评论: SHA1通常不是用來加密資料，而是用來產生資料的特徵碼 (fingerprint)，你是不是用錯演算法啦 ??是的~~sha-1是不可逆的 也即sha1过程是不可逆的加密解密需要耗费cpu资源，暴力破解哈希值的成本太高。值得注意的是，上面那个在线加密网站中有些加密方法是可加密可解密(AES)的，有些根本没有解密的选项(SHA1,MD5),有些比较奇怪的(BASE64编码，BASE64解码，BASE64还能将图片转成一大串字符串)； 对称加密(cookie-session)session 可以存在 cookie 中sessionData 中，丢到客户端。var sessionData = {username: ‘alsotang’, age: 22, company: ‘alibaba’, location: ‘hangzhou’}用sha1算法加密之后丢到cookie的 signedCookies 跟 cookie-session 还是有区别的：1）是前者信息可见不可篡改，后者不可见也不可篡改2）是前者一般是长期保存，而后者是 session cookiecookie-session 的实现跟 signedCookies 差不多。不过 cookie-session 我个人建议不要使用，有受到回放攻击的危险。所以最好把cookie session 也丢进缓存 初学者容易犯的一个错误是，忘记了 session_id 在 cookie 中的存储方式是 session cookie。即，当用户一关闭浏览器，浏览器 cookie 中的 session_id 字段就会消失。常见的场景就是在开发用户登陆状态保持时。 GZIP是需要耗费cpu的，也就是一种以cpu资源换取带宽的策略 If you keep gzip compression enabled here, note that you are trading increased CPU costs in exchange for your lower bandwidth use. Set the gzip_comp_level to a value between 1 and 9, where 9 requires the greatest amount of CPU resources and 1 requires the least. The default value is 1. windows下host文件修改很简单，linux下在/etc/hosts里。这里面都写了一句映射： localhost : 127.0.0.1 ## the local loopback interface. 补上一个在windows上安装curl的方法how-do-i-install-set-up-and-use-curl-on-windows。简单说就是下一个windows x64的版本，然后把curl.exe所在位置添加到环境变量的PATH中，重启cmd就好了。然后开始测试一些主流网站 126邮箱返回301(Moved Permanently)，同时告诉浏览器去https站点访问1234567891011121314151617181920212223242526curl -v mail.126.com* Rebuilt URL to: mail.126.com/* Trying 220.181.15.150...* TCP_NODELAY set* Connected to mail.126.com (220.181.15.150) port 80 (#0)&gt; GET / HTTP/1.1&gt; Host: mail.126.com&gt; User-Agent: curl/7.58.0&gt; Accept: */*&gt;&lt; HTTP/1.1 301 Moved Permanently&lt; Server: nginx&lt; Date: Sun, 11 Feb 2018 06:16:02 GMT&lt; Content-Type: text/html&lt; Content-Length: 178&lt; Connection: keep-alive&lt; Location: https://mail.126.com/&lt;&lt;html&gt;&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=&quot;white&quot;&gt;&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;* Connection #0 to host mail.126.com left intact wireshark在windows下也能抓包，首先安装，安装好之后如果没有检测出网卡，需要去下载一个win10pcap。 NAT超时[这个主要是移动端保活的话题下需要关注的]因为 IP v4 的 IP 量有限，运营商分配给手机终端的 IP 是运营商内网的 IP，手机要连接 Internet，就需要通过运营商的网关做一个网络地址转换(Network Address Translation，NAT)。简单的说运营商的网关需要维护一个外网 IP、端口到内网 IP、端口的对应关系，以确保内网的手机可以跟 Internet 的服务器通讯。大部分移动无线网络运营商都在链路一段时间没有数据通讯时，会淘汰 NAT 表中的对应项，造成链路中断。长连接心跳间隔必须要小于NAT超时时间(aging-time)，如果超过aging-time不做心跳，TCP长连接链路就会中断，Server就无法发送Push给手机，只能等到客户端下次心跳失败后，重建连接才能取到消息。 TCP长连接本质上不需要心跳包来维持，因为无论客户端还是服务器都不知道两者之间的额通道是否断开了。心跳包一个主要的作用就是防止NAT超时的。 ARP（Address Resolution Protocol）地址解析协议。谈中间人攻击(man in the middle attack)的时候会讲到ARP欺骗。其实就是局域网内，任一主机可以宣称自己拥有某个IP，并让发出ARP请求的客户端接受自己的MAC地址，傻乎乎的更新ARP缓存，下次，该客户端发出的请求就全部被交给这个中间人主机了。 =============================== m38u就是很多ts文件的目录","tags":[{"name":"linux","slug":"linux","permalink":"https://haldir65.github.io/tags/linux/"},{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"}]},{"title":"OkHttp和Okio阅读笔记","date":"2017-07-21T00:02:56.000Z","path":"2017/07/21/2017-07-21-okhttp-demisified/","text":"很早的时候就知道，OkHttp在io层面上的操作是由Okio代为完成的，所以实际意义上和Socket打交道的应该是Okio。而Okio又比传统的java io要高效。所以，在分析OkHttp之前，有必要针对Okio的一些方法进行展开，作为后面读写操作的铺垫。 Okio -&gt; OkHttp -&gt; Picaso -&gt; RetrofitOkio版本 1.13.0OkHttp版本 3.8.0 1. Okio与java io相比的优势java的InputStream可以被查看成是一个数据的来源，调用read方法从中读取数据。由于有些文件特别大，我们不可能在内存中分配一个和文件大小一样大的字节数组来专门来读写文件。因此需要传入一个缓冲数组。所以一般的读写程序的代码是这么写的1234567891011121314151617181920212223public abstract class InputStream implements Closeable&#123; public int read(byte b[]) throws IOException &#123; return read(b, 0, b.length); &#125;&#125; public static void main(String[] args) throws Exception &#123; // 指定要读取文件的缓冲输入字节流 BufferedInputStream in = new BufferedInputStream(new FileInputStream(\"F:\\\\test.jpg\")); File file = new File(\"E:\\\\test.jpg\"); if (file != null) &#123; file.createNewFile(); &#125; // 指定要写入文件的缓冲输出字节流 BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file)); byte[] bb = new byte[1024];// 用来存储每次读取到的字节数组 int n;// 每次读取到的字节数组的长度 while ((n = in.read(bb)) != -1) &#123; out.write(bb, 0, n);// 写入到输出流 &#125; out.close();// 关闭流 in.close(); &#125; BufferedInputStream和BufferedOutputStream就是提供了这样的缓冲策略，其内部默认分配了一个默认大小的字节数组，或者在read方法中传入一个字节数组，每次一个byte一个byte的读，然后将读出来的内容写进outPutStream。读到-1就是文件终止(EOF)。具体原理可以参考IBM的深入分析 Java I/O 的工作机制。那么问题来了，buffer[]作为一个字节数组，其容量是恒定的。假设我们想要一次性读取特别多的数据怎么办。例如http的response header一般长这样,然而实际上在无线电传播的过程中，每一行的后面都跟了一个换行符’\\r\\n’,而且无线电传播的时候其实根本没有换行的概念，就是一个字节跟着一个字节。假如服务器自己定义了特别长的header字段，inputstream读到这里的时候，事先预设的字节数组(没法改了)装不下，一种简单粗暴的方式是尝试扩容，这就意味着要把数据从原始数组copy到新的数组，丢掉旧的数组，把指针指向新的数组(一个是allocate数组，一个是arrayCopy，这俩都造成了性能损耗),当然jdk肯定不是这么干的。12345678910111213141516171819HTTP/1.1 200 OKBdpagetype: 1Bdqid: 0xc8f942640001e753Bduserid: 0Cache-Control: privateConnection: Keep-AliveContent-Encoding: gzipContent-Type: text/html; charset=utf-8Date: Fri, 21 Jul 2017 15:35:58 GMTExpires: Fri, 21 Jul 2017 15:35:29 GMTServer: BWS/1.1Set-Cookie: BDSVRTM=0; path=/Set-Cookie: BD_HOME=0; path=/Set-Cookie: H_PS_PSSID=1428_21110_20930; path=/; domain=.baidu.comStrict-Transport-Security: max-age=172800Vary: Accept-EncodingX-Powered-By: HPHPX-Ua-Compatible: IE=Edge,chrome=1Transfer-Encoding: chunked 对于Http这种频繁的读写操作，allocate数组和copy数据无形中减慢了网络访问的速度。 Okio的解决方案1234Buffer buffer = new Buffer();//cheap ,allocation literal nothingbuffer.writeUtf8(&quot;Hello Okio&quot;); //java中一个英文字符占一个字节(byte)，一个汉字占2个字节(byte)buffer.writeUtf8(&quot;you can &quot;); //可以想象segment中被塞进了&quot;you can &quot;这几个bytebuffer.writeUtf8(&quot;Go faster&quot;); Okio将读写操作集中到到Buffer这个类中，用Sink和Source分别代表数据的去向和来源。而数据的承载类是Segment,读取数据(read)的时候从SegmentPool中索取Segment，读到Segment的byte[]数组中，装不下了再拿一个Segment。这个过程中是没有 new byte[]操作的。 Read from a source， write to a sink 1234567891011121314151617181920public final class Buffer implements BufferedSource, BufferedSink, Cloneable &#123; Segment head; long size; public Buffer() &#123; //构造函数里不分配任何对象，所以创建一个Buffer几乎没有什么性能开销 &#125; final class Segment &#123; static final int SIZE = 8192; static final int SHARE_MINIMUM = 1024; final byte[] data; int pos; int limit; boolean shared; boolean owner; Segment next; Segment prev; &#125;&#125; 现在那个读取一个文件写到另一个文件的程序可以写成这样:123456sink = Okio.sink(dstFile); //返回了一个Sink匿名类，write的时候使用public void write(Buffer source, long byteCount)方法进行写操作source = Okio.source(srcFile); Buffer buf = new Buffer(); for (long readCount; (readCount = source.read(buf, 2048)) != -1; ) &#123; sink.write(buf, readCount); &#125; 看起来还是在数据源和数据终点之间塞了一个缓冲层，sink(dst)和source(src)都是接口，Buffer同时实现了这俩接口。write是从外面拿数据塞到自己的数组中，所以每次写的时候或让Buffer的Size变大(从segment pool中借用segment)。Buffer(Source)的read方法是把数据从Buffer中拿出来，所以会让Buffer的size变小(每一个Segment读完了会返回到segment pool中)在Buffer的所有readXXX方法中都能看到这么一句话 SegmentPool.recycle(segment)因为Buffer内部是通过Segment的next和prev实现了双向链表，write是在尾部添加数据，read是从头部读取数据并移除。 Okio能够实现高效率的核心在于,在java的inputStream和BufferedInputStream中，如果两块缓冲区之间想要交换数据。前面提到的扩容情况，从一个数组把数据复制到另一个更大的数组，必须走arrayCopy。网上查找了很多博客，总的来说就是java io采用了装饰者模式，不同Stream之间要包一层。写数据时，写原始数据要用DataOutputStream，使用带缓冲的写要用BuffedOutputStream，使用字符编码要用OutputStreamWriter,写字节数组有ByteArrayOutputStream。读数据时也是，原始数据要用DataInputStream，带缓冲的要用BufferedInputStream,字符编码要用InputStreamReader，读字节数有ByteArrayInputStream。 来看下其中带buffer的装饰类是怎么创建的，顺便把java io批判一下。123456789101112131415161718ByteArrayOutPutStream baos = new ByteArrayOutPutStream();ByteArrayInputStream bis = new ByteArrayInputStream(baos.toByteAarray()); //toByteArry内部调用了Arrays.copyOf()，创建了新对象public BufferedInputStream(InputStream in, int size) &#123; super(in); if (size &lt;= 0) &#123; throw new IllegalArgumentException(\"Buffer size &lt;= 0\"); &#125; buf = new byte[size]; //创建新数组 &#125; public BufferedOutputStream(OutputStream out, int size) &#123; super(out); if (size &lt;= 0) &#123; throw new IllegalArgumentException(\"Buffer size &lt;= 0\"); &#125; buf = new byte[size]; //创建数组 &#125; 同样的事情在okio中是这么干的123456789101112131415RealBufferedSource(Source source) &#123; if(source == null) &#123; throw new NullPointerException(\"source == null\"); &#125; else &#123; this.source = source; //其实是buffer &#125; &#125; RealBufferedSink(Sink sink) &#123; if(sink == null) &#123; throw new NullPointerException(\"sink == null\"); &#125; else &#123; this.sink = sink; //只是挪一下指针 &#125; &#125; 由于一个Buffer即是source也是sink，挪一下指针就行了。写的时候往链表的尾巴写，读的时候从链表的头部读，读完了segment回收。 BufferedInputStream要求外部调用者带着一个固定大小的byte数组来取数据，难免会有人传进来一个特别小的数组，这样永远不可能读取超过这个数组大小长度的某一行。 BufferedSource在读取Socket数据时，一边从socket里面拿一个Segment大小的数据，然后调用readInt,readLong等方法返回int,long(同时从segment头部清空数据)。如果读到segment最后发现剩下的byte不能组成一个int，就会从segment pool中借一个segment，并从socket中读取数据塞满，把第一个segment剩下的一点byte和第二个segment的头部一点拼成一个int。以BufferSource的readInt为例:1234567891011121314151617181920212223public int readInt() &#123; if(this.size &lt; 4L) &#123; throw new IllegalStateException(\"size &lt; 4: \" + this.size); &#125; else &#123; Segment segment = this.head; int pos = segment.pos; int limit = segment.limit; if(limit - pos &lt; 4) &#123; //一个int 4个byte,这时候segment中未读的数据只剩下不到4个了 return (this.readByte() &amp; 255) &lt;&lt; 24 | (this.readByte() &amp; 255) &lt;&lt; 16 | (this.readByte() &amp; 255) &lt;&lt; 8 | this.readByte() &amp; 255; //readByte就是从链表的头部开始一个byte一个byte的读，segment读完了自动回收，直到组成一个int。 &#125; else &#123; //剩下的byte足够组成一个int byte[] data = segment.data; int i = (data[pos++] &amp; 255) &lt;&lt; 24 | (data[pos++] &amp; 255) &lt;&lt; 16 | (data[pos++] &amp; 255) &lt;&lt; 8 | data[pos++] &amp; 255; //从byte转int this.size -= 4L; if(pos == limit) &#123; this.head = segment.pop(); SegmentPool.recycle(segment); //读完了就把segment回收 &#125; else &#123; segment.pos = pos; &#125; return i; &#125; &#125;&#125; 一个很有意思的现象是，java BufferedInputStream的默认buffer数组大小是8192，okio 的segment的默认size也是8192，这些都是以byte为单位的。找到一个合理的解释。大致意思是8192 = 2^13, windows和linux上这个大小正好占用两个分页文件(8kB)。另外java io的类图确实让人眼花缭乱。 2. OkHttp的解析2.1 使用介绍先上一张图。这是最简单的直接用OkHttpClient请求百度首页的堆栈调用情况。在没有做任何手动配置的情况下，至少发现了五个Interceptor: RetryAndFollowUpInterceptor BridgeInterceptor CacheInterceptor ConnectInterceptor CallServerInterceptor 走到CallServerInterceptor的时候，可以看到Response已经形成了。每一个Interceptor之间还有一个RealInterceptorChain，将各个Interceptor串联起来， 首先是调用者的代码123456789101112131415161718192021222324252627282930mClient = new OkHttpClient()//同步执行 Request request = new Request.Builder() .url(\"http:www.baidu.com\") .build(); Call call = mClient.newCall(request); Response response = null; try &#123; response = call.execute(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;//异步执行代码 Request request = new Request.Builder() .url(\"http:www.baidu.com\") .build(); Call call = mClient.newCall(request); call.enqueue(new Callback() &#123; @Override public void onFailure(Call call, IOException e) &#123; &#125; @Override public void onResponse(Call call, Response response) throws IOException &#123; &#125; &#125;); 2.2 参数配置首先Request.Builder().build()方法，这里面只是使用Builder模式，和Retrofit很相似，方便链式调用。最终调用了Request的构造函数1234567Request(Request.Builder builder) &#123; this.url = builder.url; //HttpUrl类型 this.method = builder.method; //String类型 this.headers = builder.headers.build(); //header就是个字典，内部用一个String数组维护。 this.body = builder.body;// RequestBody类型，用于POST提交表单或者Multipart上传文件。 this.tag = builder.tag != null?builder.tag:this; //Object类型 &#125; Request里面的成员代表了一个网络请求所应该有的一切可能的元素，没什么可说的。OkHttpClient的构造也是Builder模式，一旦创建了不能setXX.找到一个比较丰富的例子123456client = new OkHttpClient.Builder() .retryOnConnectionFailure(true) .connectTimeout(15, TimeUnit.SECONDS) //设置缓存 .cache(cache) .build(); 到这里都还只是发起真正的请求之前的configuration阶段，来看发起RealCall的过程 Call call = mClient.newCall(request); 这里面初始化了一个RetryAndFollowUpInterceptor。这个拦截器的作用是在连接server失败后自动重连，但服务器500就不会重连,参考okhttp-is-quietly-retrying-requests-is-your-api-ready 2.3 开始执行请求response = call.execute(); 123456789101112131415161718public Response execute() throws IOException &#123; synchronized(this) &#123; this.executed = true; &#125; Response var2; try &#123; this.client.dispatcher().executed(this); //这个Dispatcher负责记录当前OkHttpClient的所有Request的状态，提供线程池 Response result = this.getResponseWithInterceptorChain(); if(result == null) &#123; throw new IOException(\"Canceled\"); &#125; var2 = result; &#125; finally &#123; this.client.dispatcher().finished(this); //记录状态 &#125; return var2;&#125; 重点就在getResponseWithInterceptorChain里面123456789101112131415Response getResponseWithInterceptorChain() throws IOException &#123; List&lt;Interceptor&gt; interceptors = new ArrayList(); interceptors.addAll(this.client.interceptors()); interceptors.add(this.retryAndFollowUpInterceptor); interceptors.add(new BridgeInterceptor(this.client.cookieJar())); interceptors.add(new CacheInterceptor(this.client.internalCache())); interceptors.add(new ConnectInterceptor(this.client)); if(!this.forWebSocket) &#123; interceptors.addAll(this.client.networkInterceptors()); &#125; interceptors.add(new CallServerInterceptor(this.forWebSocket)); Chain chain = new RealInterceptorChain(interceptors, (StreamAllocation)null, (HttpCodec)null, (RealConnection)null, 0, this.originalRequest); return chain.proceed(this.originalRequest); &#125; 注意顺序，用户手动添加的interceptor是最先添加的。在添加完ConnectInterceptor之后，又添加了networkInterceptors(用户手动添加的，一个List)。道理也很清楚，一种是在发起Socket请求之前就拦下来，一种是连上Socket之后的拦截 Chain的proceed就是从List中一个个取出Inerceptor，然后执行 3. 自带的五个Interceptor3.1 RetryAndFollowUpInterceptor1234567891011121314151617181920212223242526272829while(!this.canceled) &#123; Response response = null; boolean releaseConnection = true; try &#123; response = ((RealInterceptorChain)chain).proceed(request, this.streamAllocation, (HttpCodec)null, (RealConnection)null); releaseConnection = false; &#125; catch (RouteException var13) &#123; releaseConnection = false; continue; &#125; catch (IOException var14) &#123; releaseConnection = false; continue; &#125; finally &#123; if(releaseConnection) &#123; this.streamAllocation.streamFailed((IOException)null); this.streamAllocation.release(); &#125; &#125; Request followUp = this.followUpRequest(response); if(followUp == null) &#123; return response; &#125; ++followUpCount; if(followUpCount &gt; 20) &#123; this.streamAllocation.release(); throw new ProtocolException(\"Too many follow-up requests: \" + followUpCount); &#125; &#125; 这里面写死了一个循环，只要没有cancel，catch到特定的Exception就一直让链条走下去。 3.2 BridgeInterceptor这是第二个Interceptorinterceptors.add(new BridgeInterceptor(this.client.cookieJar()));//注意带进来了cookie，主要都是添加header什么的123456789101112public Response intercept(Chain chain) throws IOException &#123; Request userRequest = chain.request(); if(userRequest.header(\"Host\") == null) &#123; requestBuilder.header(\"Host\", Util.hostHeader(userRequest.url(), false)); &#125; Response networkResponse = chain.proceed(requestBuilder.build()); okhttp3.Response.Builder responseBuilder = networkResponse.newBuilder().request(userRequest); &#125; return responseBuilder.build();&#125; 都是些Host,Connection Keep-Alive,User-Agent,Content-Length等跟header有关的东西。随后将request交给链条的下一个interceptor。Response回来之后相应set-Cookie这些东西，下次请求带上cookie，这些都是Http的标准步骤。 3.3 CacheInterceptor接下来轮到cache，对于response的处理也是差不多的过程12345678910111213141516171819202122232425public Response intercept(Chain chain) throws IOException &#123; Response cacheCandidate = this.cache != null?this.cache.get(chain.request()):null; Request networkRequest = strategy.networkRequest; Response cacheResponse = strategy.cacheResponse; Response networkResponse = null; networkResponse = chain.proceed(networkRequest); Response response; if(cacheResponse != null) &#123; if(networkResponse.code() == 304) &#123; response = cacheResponse.newBuilder().headers(combine(cacheResponse.headers(), networkResponse.headers())).sentRequestAtMillis(networkResponse.sentRequestAtMillis()).receivedResponseAtMillis(networkResponse.receivedResponseAtMillis()).cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody(networkResponse)).build(); networkResponse.body().close(); this.cache.trackConditionalCacheHit(); this.cache.update(cacheResponse, response); return response; //只针对304做了自动cache &#125; Util.closeQuietly(cacheResponse.body()); &#125; response = networkResponse.newBuilder().cacheResponse(stripBody(cacheResponse)).networkResponse(stripBody(networkResponse)).build(); return response;&#125; 这里也是让请求接着走下去，response回来之后，只有304的时候才会去主动cache下来。 3.4 ConnectInterceptor这里的interceptor方法异常简短12345678910public Response intercept(Chain chain) throws IOException &#123; RealInterceptorChain realChain = (RealInterceptorChain)chain; Request request = realChain.request(); StreamAllocation streamAllocation = realChain.streamAllocation(); boolean doExtensiveHealthChecks = !request.method().equals(\"GET\"); HttpCodec httpCodec = streamAllocation.newStream(this.client, doExtensiveHealthChecks); RealConnection connection = streamAllocation.connection(); return realChain.proceed(request, streamAllocation, httpCodec, connection);&#125; 这里重点关注 StreamAllocation这个类12345678910public final class StreamAllocation &#123; public final Address address; private Route route; private final ConnectionPool connectionPool; private final Object callStackTrace; private final RouteSelector routeSelector; private int refusedStreamCount; private RealConnection connection; private HttpCodec codec;&#125; 从HttpCodec httpCodec = streamAllocation.newStream(this.client, doExtensiveHealthChecks); 这句话一直往下走，会走到Socket.connect()，也就是大多数人初学网络编程时被教导的如何创建Socket连接。现在想想，能够从操作系统底层的Socket封装出这么多复杂的步骤，实在是高手。StreamAllocation.newStream —-&gt; StreamAllocation.findHealthyConnection —&gt; StreamAallocation.findConnection —&gt; new RealConnection —&gt; RealConnection.connect RealConnection.connect()方法1234567891011121314151617181920212223public void connect(int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled) &#123; if(this.protocol != null) &#123; throw new IllegalStateException(\"already connected\"); &#125; else &#123; while(true) &#123; try &#123; if(this.route.requiresTunnel()) &#123; this.connectTunnel(connectTimeout, readTimeout, writeTimeout); &#125; else &#123; this.connectSocket(connectTimeout, readTimeout); &#125; break; &#125; catch (IOException var11) &#123; if(!connectionRetryEnabled || !connectionSpecSelector.connectionFailed(var11)) &#123; throw routeException; //这个Exception就是给RetryAndFollowupInterceptor准备的 &#125; &#125; &#125; &#125; &#125; 最初学习Socket编程的时候，就是写了一个while(true)，是不是很像？ 对了ConnectionPool内部使用了一个Deque保存RealConnection,findConnection里面有这么一段 Internal.instance.get(this.connectionPool, this.address, this, (Route)null);//查找 Internal.instance.put(this.connectionPool, result);//放进pool connectSocket长这样:12345678910111213141516171819202122232425private void connectSocket(int connectTimeout, int readTimeout) throws IOException &#123; Proxy proxy = this.route.proxy(); Address address = this.route.address(); this.rawSocket = proxy.type() != Type.DIRECT &amp;&amp; proxy.type() != Type.HTTP?new Socket(proxy):address.socketFactory().createSocket(); this.rawSocket.setSoTimeout(readTimeout); try &#123; Platform.get().connectSocket(this.rawSocket, this.route.socketAddress(), connectTimeout); //这里面就一句话socket.connect &#125; catch (ConnectException var7) &#123; ConnectException ce = new ConnectException(\"Failed to connect to \" + this.route.socketAddress()); ce.initCause(var7); throw ce; &#125; try &#123; this.source = Okio.buffer(Okio.source(this.rawSocket)); this.sink = Okio.buffer(Okio.sink(this.rawSocket)); &#125; catch (NullPointerException var8) &#123; if(\"throw with null exception\".equals(var8.getMessage())) &#123; throw new IOException(var8); &#125; &#125;&#125; 重点看this.source = Okio.buffer(Okio.source(this.rawSocket));this.sink = Okio.buffer(Okio.sink(this.rawSocket));通过sink往Socket里面写数据，通过source网Socket里面写数据，通过Okio包装了，虽然本质上还是socket.getOutputStream和Socket.getInputStream。到这一步，RealConnection内部sink和source初始化完成，socket已经连接上，Socket的inputStream和outPutStream都准备就绪。其实在这种状态下就已经可以开始读写了。 3.5 CallServerInterceptor这里已经连上了服务器，可以像操作本地文件一样读写数据了，当然要在遵守http规范的前提下。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public Response intercept(Chain chain) throws IOException &#123; RealInterceptorChain realChain = (RealInterceptorChain)chain; HttpCodec httpCodec = realChain.httpStream(); StreamAllocation streamAllocation = realChain.streamAllocation(); RealConnection connection = (RealConnection)realChain.connection(); Request request = realChain.request(); //可以看到，到这一步所需要的数据都准备就绪 long sentRequestMillis = System.currentTimeMillis(); httpCodec.writeRequestHeaders(request); //开始写数据 Builder responseBuilder = null; if(HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != null) &#123; //这里面是跟POST相关的 if(\"100-continue\".equalsIgnoreCase(request.header(\"Expect\"))) &#123; httpCodec.flushRequest(); responseBuilder = httpCodec.readResponseHeaders(true); &#125; if(responseBuilder == null) &#123; Sink requestBodyOut = httpCodec.createRequestBody(request, request.body().contentLength()); BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut); request.body().writeTo(bufferedRequestBody); //这里就是Okio发挥高效的地方 bufferedRequestBody.close(); &#125; else if(!connection.isMultiplexed()) &#123; streamAllocation.noNewStreams(); &#125; &#125; httpCodec.finishRequest(); //到这里，client的数据全部写完并且发送给服务器，服务器开始干活。 if(responseBuilder == null) &#123; responseBuilder = httpCodec.readResponseHeaders(false); //开始从Socket里面读取数据 &#125; Response response = responseBuilder.request(request).handshake(streamAllocation.connection().handshake()).sentRequestAtMillis(sentRequestMillis).receivedResponseAtMillis(System.currentTimeMillis()).build(); int code = response.code(); if(this.forWebSocket &amp;&amp; code == 101) &#123; response = response.newBuilder().body(Util.EMPTY_RESPONSE).build(); &#125; else &#123; response = response.newBuilder().body(httpCodec.openResponseBody(response)).build(); &#125; if(\"close\".equalsIgnoreCase(response.request().header(\"Connection\")) || \"close\".equalsIgnoreCase(response.header(\"Connection\"))) &#123; streamAllocation.noNewStreams(); &#125; if((code == 204 || code == 205) &amp;&amp; response.body().contentLength() &gt; 0L) &#123; throw new ProtocolException(\"HTTP \" + code + \" had non-zero Content-Length: \" + response.body().contentLength()); &#125; else &#123; return response; &#125;&#125; 这里面就是一步步的开始写数据了。这里再借用下百度,chrome按下F12，打开百度首页，看下request的raw header1234567891011GET / HTTP/1.1Host: www.baidu.comConnection: keep-aliveCache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8DNT: 1Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4Cookie: PSTM=122178321; BIDUPSID=CF3243290400VSDG52B3859AD4AEC2; BAIDUID=5176CC0A23DB1F3423426454DRTG5EC8:FG=1; MCITY=-%3A; BD_HOME=0; H_PS_PSSID=1428_24320_20930; BD_UPN=1223214323 看下httpCodec.writeRequestHeaders(request)的实现，就会发现真的是这么一行一行的写的例如RequestLine.java12345678910111213public static String get(Request request, Type proxyType) &#123; StringBuilder result = new StringBuilder(); result.append(request.method()); // GET result.append(' '); //空格 if(includeAuthorityInRequestLine(request, proxyType)) &#123; result.append(request.url()); &#125; else &#123; result.append(requestPath(request.url())); //我们访问的是百度首页，当然是'/'这个Index啦 &#125; result.append(\" HTTP/1.1\"); //是不是和上面一模一样 return result.toString(); &#125; 接下来轮到Http1Codec.class123456789101112131415public void writeRequest(Headers headers, String requestLine) throws IOException &#123; if(this.state != 0) &#123; throw new IllegalStateException(\"state: \" + this.state); &#125; else &#123; this.sink.writeUtf8(requestLine).writeUtf8(\"\\r\\n\"); //这是第一行，写完了加上换行符 int i = 0; for(int size = headers.size(); i &lt; size; ++i) &#123; this.sink.writeUtf8(headers.name(i)).writeUtf8(\": \").writeUtf8(headers.value(i)).writeUtf8(\"\\r\\n\"); //一个header写完就写一个换行符 &#125; this.sink.writeUtf8(\"\\r\\n\"); this.state = 1; &#125; &#125; 读取Response的顺序和写Request相反，不再赘述。 4.结语这里只是针对OkHttp发起的一个最简单同步的网络请求进行了分析。关于异步请求再说两句：本质上不过是包装了一个回调，丢到线程池里面，相比整个Http请求，实在是不值一提。来看下这个线程池 new ThreadPoolExecutor(0, 2147483647, 60L, TimeUnit.SECONDS, new SynchronousQueue(), Util.threadFactory(“OkHttp Dispatcher”, false)); 照说jdk不推荐这么创建线程池，一般用jdk封装好的CachedThreadPool，FixedThreadPool等等，但想必这样做也是不为了造成过大的系统开销吧。debug的时候如果看到OkHttp Dispatcher这条线程，应该明白是为什么了吧。另外，Okio会引入一条名为Okio WatchDog的线程，这跟Okio的AsyncTimeOut有关。时间关系(已经是夜里12点了)，不打算研究了。 OkHttp总量过于庞大，很多方面，包括spdy,webSocket,RouterDatabase,DNS,网络执行周期触发回调，http2，http协议，太多太多，再研究一天也看不完。 拎出来几个比较重要的点吧： Okio放在最前面，就是为了说明在网络请求这样对于io性能要求高的场合，okio避免了memory allocation和不必要的缓存复制。 OkHttpClient应该是对标apache的HttpClient的，后者不清楚。 底层还是调用操作系统的Socket接口，从这个角度来看，Retrofit只是一个Util，包括线程调度都是用的OkHttp的线程池；Volley我记得默认是4条NetWorkDispatcher和一个CacheDispatcher和一个ContentDelivery。 不推荐创建多个OkHttpClient，真想创建多个的话，用newBuilder(浅复制)就好了嘛。 网上说Picaso内部的cache其实就是OkHttp的cache，不愧square全家桶系列 和Retrofit一样，也是用的Builder模式，提供了极大的自定义空间 Interceptor，广受业界好评的责任链模式 写于2017年7月23日0:29 updateOkHttp拦截器里面能不能把请求取消掉? 结论几乎是否随便挑一个interceptor出来,上游传递下来的chain只能获取到Request，看了下,request并没有一个cancel的方法。真要cancel的话，得去OkHttpClient那边去cancel，这里并不能获得。就算你全局获得一个Client，这里还得返回一个Response。看了下proceed方法，如果返回null的话，会主动抛一个空指针出来的。123456789101112@Override public Response intercept(Chain chain) throws IOException &#123; RealInterceptorChain realChain = (RealInterceptorChain) chain; Request request = realChain.request(); StreamAllocation streamAllocation = realChain.streamAllocation(); // We need the network to satisfy this request. Possibly for validating a conditional GET. boolean doExtensiveHealthChecks = !request.method().equals(\"GET\"); HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks); RealConnection connection = streamAllocation.connection(); return realChain.proceed(request, streamAllocation, httpCodec, connection);&#125; 5. 参考 Paisy Frodo系列 A few ok library Forcing bytes downward in Okio","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"java","slug":"java","permalink":"https://haldir65.github.io/tags/java/"}]},{"title":"日常开发手册","date":"2017-07-12T08:40:08.000Z","path":"2017/07/12/2017-07-12-android-cookbook/","text":"A Cookbook shall look like a collection of Recipes, or an index page from where dinner are made. And it keeps you sane. github上已经star了四百多个项目，应该复习下了。 各个平台相关的特定的一些记录布局相关的点theme和Style Dan lew 事件分发，动画，自定义Viewandroid使用selectableItemBackground的一些坑activity transition pre and post lollipop事件分发流程安卓坐标系常用方法android-Ultra-pull-to-refresh分析 内存管理内存泄漏 任务管理使用Loader进行异步数据操作 V4包里面的东西使用RecyclerView的Animation Android Dev Summit 2015 yigit boyar和Chet Haase自定义LayoutManager Dave SmithFragment源码解析 底层原理主线程的工作原理 Michael Bailey American Express, 他2016年还讲了LayoutInflater的工作原理vsync原理解释让service常驻后台的方法//下面这些已经有人写的很好了，直接看就可以了应用进程启动流程Launcher启动流程SystemServer进程启动流程Zygote进程启动流程Apk安装流程Activity启动流程//这个博主写的一系列底层分析都比较清楚 图片出自搜狐 新版本适配，新特性Android 7.0的适配 工具方法沉浸式状态栏replace butterKnife with databinding 拆轮子Glide源码解析Rxjava2的一些点 Jake WhartonRetrofit源码解析OkHttp和Okio源码解析 跟java相关的java集合类的实现原理Java线程池的一些点使用AnnotationProcessor自动生成代码翻译了一个印度口音的关于jvm架构的视频一个Java Object到底占用多少内存(from java code to java heap)LruCache的原理 工具书git常用操作手册adb常用命令手册 杂乱的点java中的任何细碎的点 ToDo ListJava相关 [X] 画一下java的集合框架 [X] String StringBuffer StringBuilder区别(StringBuffer很多方法都加了synchronized) [ ] 多线程异步断点续传框架原理,利用该原理在图片加载框架中的应用(MappedByteBuffer或者RandomAccessFile) [X] 多线程断点续传原理，大文件下载oom问题 [X] java位运算，Collection框架中多次用到了 [ ] gson的原理，cache什么的，常规json解析器的原理 [ ] 垃圾回收器的分类及优缺点 [X] ThreadLocal原理及可能的内存泄漏(主要还是Thread的生命周期比较长) [ ] Understanding Dagger2’s generated code [X] 单例模式需要考虑到jvm优化的问题（为什么要写两个synchronized） [ ] java类加载机制(classLoader相关的，类的加载顺序) [ ] Java四种引用 [ ] Future和FutureTask,CompletableFuture这些怎么用 [ ]反射 [ ] java堆和栈的区别，如何判断堆栈上的对象死没死 [ ] 自己写一个一部图片加载框架，并发图像滤镜框架 [ ] try catch finally到底会不会执行 [ ] 并发编程，java.util.concurrent里面的类熟练掌握，粗略了解原理 [ ]写一个生产者消费者模型 [X] HashMap和conrrentHashmap区别(分段锁比较难)Segement分段，获取size的时候先乐观，然后悲观 [ ] java的包结构：java.lang(Language核心类);java.io(I/O相关);java.util(包含collection和concurrent);java.nio(另一种I/O);java.net(网络操作) [ ] 面试长谈问题 [ ] jvm字节码看函数调用链接，Jit for dummies [ ] OkHttp跑分github以及作者的Gplus，以及外国人做的High-Concurrency HTTP Clients on the JVM，纯属好玩。 [ ] 指令重排序，内存栅栏，JVM垃圾回收机制，何时触发MinorGC [ ] Eden和Survivor的比例分配等 [ ] Gson主要的代码在JsonWriter里面，打几个断点即可。gson这类parser的劣势就在于allocating a bounch of String(array) and throw them away。 [ ] 类加载机制和时序 Android相关 [ ] AppCompat源码解析 [ ] ContentProvider的启动过程 [ ] IPC，Binder原理Binder学习指南 [ ] Android Internals [ ] cookie存储位置(/webviewCookiesChromium.db),db存储位置 [ ] Binder的原理，Binder里面引用计数的原理，Binder底层为什么用红黑树 [X] 拆ButterKnife [X] onSaveInstance,不仅仅是Activity,Fragment，View中也有，具体实现原理。View一定要有id(在View.dispatchSaveInstanceState中判断了id不为-1).[继承BaseSavedState] [X] 热修复框架原理 Android应用程序资源的编译和打包过程分析 [ ] WebView JS交互，WebView存在的漏洞,通过反射可看可能存在的安全问题以及C代码 [ ] Media相关，视频播放etc，相机，滤镜等.Demo [X] FFMpeg，IjkPlayer，弹幕 [ ] using protobuf on android [ ] UI Toolkit源码解析(android.widget包下面的) [X] ViewPager的原理，作者Adam Powell [ ] View的源码, View的绘制原理(往displayList那边靠) [ ] ViewGroup源码 [X] FrameLayout [X] LinearLayout(主要代码在measureHorizontal,layoutHorizontal) [ ] RelativeLayout [X] PopupWindow(api24以上的深坑网上也有解决方法) [X] Dialog [X] ImageView(onMeasure主要是尊重drawable的aspect ratio)setImageResource前后图片大小不一致会有些问题 [ ] TextView(super complicated) [ ] ScrollView(不到2000行) [ ] NestedScrollView [ ] ListView原理,加载优化 [ ] RecyclerView（这货最早的时候9K行，现在好像1.2W行。prefetcher什么的，滑动过程中不去加载图片，参考我写的Glide笔记） [ ] 属性动画据说用了反射，源码解析 [ ] Aosp中的launcher地址Launcher3，网上分析的也很多 [X] Context是什么 [ ]Android View的显示框架原理，讲的比较全 [X] 美团那个Walle 还是要玩玩的 [X] Android生命周期在不同版本的表现形式有些onXXX在高版本不会调，原因是HoneyComb之后对Activity LifeCycle进行了改动 [ ] 要不是Jake Wharton在DroidConNYC2017上提到，还不知道有v4包里面有AtomicFile这玩意 [X] LocalBroadCastManager好像是基于handler实现的 [ ] armeabiv,arm64-v8a等问题Android 设备的CPU类型(通常称为”ABIs”) [ ] Romain Guy提到了android asset atlas，顺带看下ZygotoInit [ ] Zygote进程启动流程 [X] SystemServer进程启动流程 [ ] Launcher启动流程 Android 应用点击图标到Activity界面显示的过程分析 Android面试题汇总 [X] SurfaceView，TextureView从入门到解析 [ ] LeakCanary的原理就是registerActivityLifecycleCallbacks,在onDestory的时候，检查有没有该释放没有释放的东西，具体的Pierre-Yves Ricau在Droidcon NYC 2015 - Detect all memory leaks with LeakCanary! 都说过了。- Studio里面看源码，find usage没有的话，find in path , choose android sdk Linux相关 [ ] linux进程间通信方式有哪些（信号量这种） [ ] Linux command extended [ ] 搭建mail服务 [x] win10加ubuntu双系统安装[如果不需要了直接删分区，删除引导即可] [x]win10 装ubuntu有时候失败是因为删除了C盘的一个文件夹参考 网络通信 [ ] TCP UDP的不同 TCP三次握手，wireShark抓包,抓一个App的包，模拟请求 [X] 如何维持一个长连接 [ ] 点击一个网址底层经历哪些过程 [ ] nginx搭建rmtp推流后台搭建nginx-rtmp直播服务器，ffmpeg模拟推流 [ ] ffmpeg参考教程 Gradle相关 [ ]写一些DSL吧Old Driver [X] 狗日的Gradle下载的cache都放在C盘了，问题是C盘哪里，能删吗，C盘快不够用了 Python [ ] sending mail via Flask [X] bootstrap integration 数据库相关 [X] MySql从入门到删库跑路 [ ] Realm的优点 C语言从入门到放弃 [ ] 加载ffmpeg需要，不得不学ffmpeg教程 数据结构，算法(注意，不值得深究) [ ] 数据结构，操作系统 [X] 编码，底层二进制 [ ] 二分法查找，排序，冒泡，复杂度 [ ] 数组跟链表区别,数组跟链表排序时区别,数组跟链表排序时区别 [ ] 八大排序算法 [ ] 算法刷题网站剑指offer,leetcode 一些精彩的的演讲Droidcon Montreal Jake Wharton - A Few Ok LibrariesAdvanced Scrolling Techniques on AndroidAndroid Graphics Performance the cost of setAlphaDeveloping Mobile Experiences at Facebook’s scale 一些有名的人GDEDianne HackbornJesse Wilson Good ReadingAndroid Source codeProject Butter and other stuffSurfaceFlinger 一些列入的规划的想法 多线程下载实例 自己写一个ImageLoader(主要是多线程同步的问题,queue) 对于Android来说，平台技术发展相对缓慢，这是跟前端比。","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"},{"name":"java","slug":"java","permalink":"https://haldir65.github.io/tags/java/"}]},{"title":"2017-07-12-scrapy-notes","date":"2017-07-12T08:37:55.000Z","path":"2017/07/12/2017-07-12-scrapy-notes/","text":"Scrappy框架学习首先建议安装virtualenv，在env中进行操作。 pip install Scrappy 报错 error: Microsoft Visual C++ 14.0 is required. Get it with “Microsoft Visual C++ Build Tools”: http://landinghub.visualstudio.com/visual-cpp-build-tools解决办法是安装vs,4个GB左右。。。。 以下开始在命令行中操作：安装完毕后，首先创建scrapy 项目 scrapy startproject tutorial #创建一个project。会生成一个tutorial的文件夹，在tutorial/spiders文件夹中新建一个quotes_spider.py 参考Scrapy教程1234567891011121314151617181920import scrapyclass QuotesSpider(scrapy.Spider): name = \"quotes\" def start_requests(self): urls = [ 'http://quotes.toscrape.com/page/1/', 'http://quotes.toscrape.com/page/2/', ] for url in urls: yield scrapy.Request(url=url, callback=self.parse) #这个callback就是response拉下来之后的解析过程 #下面的这个做法只是把response写到一个文件中，通常还可以使用css或者xpath解析获得相应值。 def parse(self, response): page = response.url.split(\"/\")[-2] filename = 'quotes-%s.html' % page with open(filename, 'wb') as f: f.write(response.body) self.log('Saved file %s' % filename) scrapy crawl quotes #开始爬quotes.toscrape.com的内容,需要切换到tutorial文件夹下 scrapy shell ‘http://quotes.toscrape.com/page/1/‘ #从Response中提取所需的值 输入就能得到大致这样的交互12&gt;&gt;&gt; response.css(&apos;title::text&apos;).extract()[&apos;Quotes to Scrape&apos;] 由于没有安装vc2014，只能在virtualenv中运行,pycharm中也是显示scrapy没有安装。只能用命令行运行。想要看具体的值需要这样123456789&gt;&gt;&gt; response.css('title::text').extract_first()'Quotes to Scrape'&gt;&gt;&gt; response.css('title::text').re(r'Quotes.*') #这里是正则了['Quotes to Scrape']#或者使用xpath&gt;&gt;&gt; response.xpath('//title/text()').extract_first()'Quotes to Scrape' 处理登录请求，afterLogin网站登录多数需要提交一个表单（Dict） formadata = {‘userName’: ‘Bob’,’pwd’：123456}中间件(MiddleWare)的作用Cookie，UserAgent处理 setting.py中设置需要的参数，Cookie默认是接受的PipeLine是用来持久化的，中间件用于处理Cookie,Ajax等，rules用于筛选需要跟进的url 2. MongoDB存储pymongo，就像node环境下有mongoose可以调用mongodb api一样，python环境下也有对于的driver","tags":[{"name":"python","slug":"python","permalink":"https://haldir65.github.io/tags/python/"}]},{"title":"Fragment源码解析记录(supportLibrary 25.3.0)","date":"2017-07-12T08:37:23.000Z","path":"2017/07/12/2017-07-12-fragment-decoded/","text":"We been told Fragment itself should only trust official docs, the implementation detail are prone to any change any time, don’t count on it! Fragment源码解析（support Library 25.3.0），不要以为看了源码就可以不鸟官方文档了，源码的内容经常变，只有官方的文档才是可靠的，谷歌保证会实现的效果。 1. 概述Fragment的核心类有这几个: FragmentManager, FragmentTransaction, Fragment。而事实上前两个都是抽象类，FragmentManager的实现类是FragmentManagerImpl，FragmentTransaction的实现类是BackStackRecord 从日常使用Fragment的方式开始:12((FragmentActivity) mActivity).getSupportFragmentManager() .beginTransaction().add(R.id.containerViewId,fragment).commit(); 2.FragmentTransaction只是将动作添加到一个队列中了beginTransaction获取了一个FragmentTransaction实例，来看add方法的实现:1234567891011121314151617@Overridepublic FragmentTransaction add(Fragment fragment, String tag) &#123; doAddOp(0, fragment, tag, OP_ADD); return this;&#125;@Overridepublic FragmentTransaction add(int containerViewId, Fragment fragment) &#123; doAddOp(containerViewId, fragment, null, OP_ADD); return this;&#125;@Overridepublic FragmentTransaction add(int containerViewId, Fragment fragment, String tag) &#123; doAddOp(containerViewId, fragment, tag, OP_ADD); return this;&#125; 不管是通过id还是Tag添加，都是调用同一个方法，传参不同而已1234567891011121314151617181920212223242526272829303132333435363738394041424344private void doAddOp(int containerViewId, Fragment fragment, String tag, int opcmd) &#123;//省略部分代码 fragment.mFragmentManager = mManager; if (tag != null) &#123; fragment.mTag = tag; &#125; //注意，进入这个方法的时候fragment已经实例化了，只是其中的回调方法还没有开始调用 if (containerViewId != 0) &#123; fragment.mContainerId = fragment.mFragmentId = containerViewId; &#125; Op op = new Op(); op.cmd = opcmd; //这个cmd很重要，代表了是show、hide、add、remove等这些东西 op.fragment = fragment; addOp(op);&#125;//所有可能的操作细节都包含在这里面了。注意，这是线性的！static final int OP_NULL = 0;static final int OP_ADD = 1;static final int OP_REPLACE = 2;static final int OP_REMOVE = 3;static final int OP_HIDE = 4;static final int OP_SHOW = 5;static final int OP_DETACH = 6;static final int OP_ATTACH = 7;//这个OP包装了了每一次操作的具体细节。static final class Op &#123; int cmd; Fragment fragment; int enterAnim; int exitAnim; int popEnterAnim; int popExitAnim;&#125; void addOp(Op op) &#123; mOps.add(op); //往一个普通的ArrayList中添加一个op op.enterAnim = mEnterAnim; op.exitAnim = mExitAnim; op.popEnterAnim = mPopEnterAnim; op.popExitAnim = mPopExitAnim;&#125; 3.通过FragmentTransaction.commit执行操作FragmentFransaction只是将所有操作保留到一次Transaction的一个任务队列(ArrayList)中了。真正的执行需要提交事务，这和数据库的事务很像。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121 @Override public int commit() &#123; return commitInternal(false); &#125; @Override public int commitAllowingStateLoss() &#123; return commitInternal(true); &#125;//上面两个函数的返回值 Returns the identifier of this transaction's back stack entry, if addToBackStack(String)&#125; had been called. Otherwise, returns a negative number. 如果调用过addToBackStack的话，返回这次操作在操作栈上的标识符。否则返回负数。 int commitInternal(boolean allowStateLoss) &#123; if (mCommitted) throw new IllegalStateException(\"commit already called\"); if (FragmentManagerImpl.DEBUG) &#123; Log.v(TAG, \"Commit: \" + this); LogWriter logw = new LogWriter(TAG); PrintWriter pw = new PrintWriter(logw); dump(\" \", null, pw, null); pw.close(); &#125; mCommitted = true; if (mAddToBackStack) &#123;//如果调用过addToBackStack，这个值就为true，否则为false mIndex = mManager.allocBackStackIndex(this);// 将BackStackRecord添加到一个ArrayList的尾部，List不存在则创建 &#125; else &#123; mIndex = -1; &#125; mManager.enqueueAction(this, allowStateLoss); // 这里就是调用FragmnetManager的方法，添加到FragmentManager的mPendingActions中，并scheduleCommit（通过FragmnetHostCallBack往主线程post一条runnable） return mIndex; //返回的就是本次事务的mIndex &#125; // FragmentManagerImpl /**这里就是被推送到主线程的runnable，注意，这里是异步的 * Only call from main thread! */ public boolean execPendingActions() &#123; ensureExecReady(true); boolean didSomething = false; //这里就是不断的从mPendingAction中查找待执行的操作 while (generateOpsForPendingActions(mTmpRecords, mTmpIsPop)) &#123; mExecutingActions = true; try &#123; optimizeAndExecuteOps(mTmpRecords, mTmpIsPop); //从方法名大致能猜到这里是执行操作的地方,两个参数，第一个是待执行的操作的List，一个是对应每项操作是pop还push(出栈还是入栈) &#125; finally &#123; cleanupExec(); &#125; didSomething = true; &#125; doPendingDeferredStart(); return didSomething; &#125; private void optimizeAndExecuteOps(ArrayList&lt;BackStackRecord&gt; records, ArrayList&lt;Boolean&gt; isRecordPop) &#123; &#125;随后调用了executeOpsTogether方法，接着调用 executeOps(records, isRecordPop, startIndex, endIndex);最终又走到了BackStackRecord的方法里面 /** * Reverses the execution of the operations within this transaction. The Fragment states will * only be modified if optimizations are not allowed. * * @param moveToState &#123;@code true&#125; if added fragments should be moved to their final state * in unoptimized transactions */ void executePopOps(boolean moveToState) &#123; for (int opNum = mOps.size() - 1; opNum &gt;= 0; opNum--) &#123; //倒序执行,每一个ops包含了对一个Fragment的指令，遍历所有的ops final Op op = mOps.get(opNum); Fragment f = op.fragment; f.setNextTransition(FragmentManagerImpl.reverseTransit(mTransition), mTransitionStyle); switch (op.cmd) &#123; //这些操作全部只是设置一些变量的值，暂时还没到UI更改，具体的UI操作在moveToState里面 case OP_ADD: f.setNextAnim(op.popExitAnim); mManager.removeFragment(f); //从FragmentManager的mAdded中移除该fragment，fragment的mAdded = false,mRemoving = true; break; case OP_REMOVE: f.setNextAnim(op.popEnterAnim); mManager.addFragment(f, false); /** addFragment里面有这么一段 if (mAdded.contains(fragment)) &#123; throw new IllegalStateException(\"Fragment already added: \" + fragment); //就是简单的判断下List中是否存在，如果在一个Fragment已经added的情况下再去add，就会出现这种错误 &#125;**/ break; case OP_HIDE: f.setNextAnim(op.popEnterAnim); mManager.showFragment(f); // 只是将fragment的mHidden设置为false了 break; case OP_SHOW: f.setNextAnim(op.popExitAnim); mManager.hideFragment(f); // 只是将fragment的mHidden设置为true了 break; case OP_DETACH: f.setNextAnim(op.popEnterAnim); mManager.attachFragment(f); //和attach差不多，也是设定了一些标志位 break; case OP_ATTACH: f.setNextAnim(op.popExitAnim); mManager.detachFragment(f); // mFragment.mDetached = false,这里判断了manager.mAdded.contains(mFragment)，会抛出异常Fragment already added!如果正常的话把mFragment添加到mAdded里面 break; default: throw new IllegalArgumentException(\"Unknown cmd: \" + op.cmd); &#125; if (!mAllowOptimization &amp;&amp; op.cmd != OP_ADD) &#123; mManager.moveFragmentToExpectedState(f); &#125; &#125; if (!mAllowOptimization) &#123; // Added fragments are added at the end to comply with prior behavior. mManager.moveToState(mManager.mCurState, true); &#125; &#125; 通常我们都是在主线程往Manager添加Transaction，不过从这里看来，添加Transaction只是添加了一份BackStackRecord，最终执行还是在主线程上做的。很直观的看到这里 调用了manager的removeFragment、showFragment等方法.随便挑两个12345678910111213141516171819202122232425262728293031323334353637383940// FragmentManagerImpl.java public void addFragment(Fragment fragment, boolean moveToStateNow) &#123; if (mAdded == null) &#123; mAdded = new ArrayList&lt;Fragment&gt;(); &#125; makeActive(fragment); if (!fragment.mDetached) &#123; if (mAdded.contains(fragment)) &#123; throw new IllegalStateException(\"Fragment already added: \" + fragment); &#125; mAdded.add(fragment); fragment.mAdded = true; // 记得fragment.isAdded()方法吗，在这里被设置的 fragment.mRemoving = false; if (fragment.mView == null) &#123; fragment.mHiddenChanged = false; &#125; if (fragment.mHasMenu &amp;&amp; fragment.mMenuVisible) &#123; mNeedMenuInvalidate = true; &#125; if (moveToStateNow) &#123; moveToState(fragment); &#125; &#125; &#125; // show的方法异常简单 /** * Marks a fragment as shown to be later animated in with * &#123;@link #completeShowHideFragment(Fragment)&#125;. * * @param fragment The fragment to be shown. */ public void showFragment(Fragment fragment) &#123; if (fragment.mHidden) &#123; fragment.mHidden = false; //这里只是设置一下标志位 // Toggle hidden changed so that if a fragment goes through show/hide/show // it doesn't go through the animation. fragment.mHiddenChanged = !fragment.mHiddenChanged; &#125; &#125; 接下里就是FragmentManager的MoveToState方法了，非常长先记住Fragment的几个状态，这些都是Adam powell说过的，这是线性的，moveToState方法也是这样走的，不会跳过中间某个state static final int INITIALIZING = 0; // Not yet created. static final int CREATED = 1; // Created. static final int ACTIVITY_CREATED = 2; // The activity has finished its creation. static final int STOPPED = 3; // Fully created, not started. static final int STARTED = 4; // Created and started, not resumed. static final int RESUMED = 5; // Created started and resumed. moveToState的方法比较长，删掉一些不必要的，重点关注Fragment的那些生命周期回调是什么时候被调用的。建议看源码，我这里删除了很多还有一大坨。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140// FragmentManagerImpl.java void moveToState(Fragment f, int newState, int transit, int transitionStyle, boolean keepActive) &#123;//Fragment的state将提高，例如从ACTIVITY_CREATED到ACTIVITYCREATED if (f.mState &lt; newState) &#123; switch (f.mState) &#123; case Fragment.INITIALIZING://尚未初始化 if (f.mSavedFragmentState != null) &#123; //从SavedState中获取各个View的状态，尝试恢复View的状态 &#125; f.mHost = mHost; //从这一刻开始,getActivity，getContext，isAdded等和Activity相关的方法都有正确的返回 f.mCalled = false; //这个mCalled是为了避免子类忘记调用super方法的 f.onAttach(mHost.getContext()); // onAttach就是在这里调用的 if (f.mParentFragment == null) &#123; mHost.onAttachFragment(f);//mHost其实就是Activity &#125; else &#123; f.mParentFragment.onAttachFragment(f); //这个是ChildFragment的情况 &#125; dispatchOnFragmentAttached(f, mHost.getContext(), false); if (!f.mRetaining) &#123; f.performCreate(f.mSavedFragmentState); //这里面调用了onCreate回调，同时STATE变成CREATED dispatchOnFragmentCreated(f, f.mSavedFragmentState, false); &#125; else &#123; f.restoreChildFragmentState(f.mSavedFragmentState); f.mState = Fragment.CREATED; &#125; f.mRetaining = false; if (f.mFromLayout) &#123;//写在XML里面的，直接在从INITIALIZING到CREATED的过程中把performCreateView和onViewCreated走一遍 &#125; case Fragment.CREATED: if (newState &gt; Fragment.CREATED) &#123; if (!f.mFromLayout) &#123; //不是写在xml标签中的Fragment ViewGroup container = null; if (f.mContainerId != 0) &#123; container = (ViewGroup) mContainer.onFindViewById(f.mContainerId); &#125; f.mContainer = container; f.mView = f.performCreateView(f.getLayoutInflater( f.mSavedFragmentState), container, f.mSavedFragmentState);// onCreateView回调 if (f.mView != null) &#123; f.mInnerView = f.mView; if (container != null) &#123; container.addView(f.mView);//所以Fragment本质上只是addView到Container里 &#125; if (f.mHidden) &#123; //hide就只是设置Visibility这么简单，这mHdidden是在上面的showFragment里面设置的 f.mView.setVisibility(View.GONE); &#125; f.onViewCreated(f.mView, f.mSavedFragmentState);// 又是回调,onViewCreated确实是在onCreatedView之后立马添加的 dispatchOnFragmentViewCreated(f, f.mView, f.mSavedFragmentState, false); // Only animate the view if it is visible. This is done after // dispatchOnFragmentViewCreated in case visibility is changed f.mIsNewlyAdded = (f.mView.getVisibility() == View.VISIBLE) &amp;&amp; f.mContainer != null; &#125; else &#123; f.mInnerView = null; &#125; &#125; //随后马上就调用到了onActivityCreated了，同一个Message中 f.performActivityCreated(f.mSavedFragmentState); dispatchOnFragmentActivityCreated(f, f.mSavedFragmentState, false); if (f.mView != null) &#123; f.restoreViewState(f.mSavedFragmentState); &#125; f.mSavedFragmentState = null; &#125; case Fragment.ACTIVITY_CREATED: if (newState &gt; Fragment.ACTIVITY_CREATED) &#123; f.mState = Fragment.STOPPED; &#125; case Fragment.STOPPED: if (newState &gt; Fragment.STOPPED) &#123; if (DEBUG) Log.v(TAG, \"moveto STARTED: \" + f); f.performStart(); //随后开始onStart dispatchOnFragmentStarted(f, false); &#125; case Fragment.STARTED: if (newState &gt; Fragment.STARTED) &#123; if (DEBUG) Log.v(TAG, \"moveto RESUMED: \" + f); f.performResume(); //onResume dispatchOnFragmentResumed(f, false); f.mSavedFragmentState = null; f.mSavedViewState = null; &#125; &#125; &#125; else if (f.mState &gt; newState) &#123; //Fragment的STATE降低 switch (f.mState) &#123; case Fragment.RESUMED: if (newState &lt; Fragment.RESUMED) &#123; f.performPause(); //onPause dispatchOnFragmentPaused(f, false); &#125; case Fragment.STARTED: if (newState &lt; Fragment.STARTED) &#123; f.performStop();//调用onStop,state变成STOPPED dispatchOnFragmentStopped(f, false); &#125; case Fragment.STOPPED: if (newState &lt; Fragment.STOPPED) &#123; f.performReallyStop();//不调用回调，状态变成ACTIVITY_CREATED &#125; case Fragment.ACTIVITY_CREATED: if (newState &lt; Fragment.ACTIVITY_CREATED) &#123; f.performDestroyView(); //状态变成CREATED，调用onDestoryView。最后收尾调用 f.mContainer.removeView(f.mView);//引用置空 dispatchOnFragmentViewDestroyed(f, false); if (f.mView != null &amp;&amp; f.mContainer != null) &#123; f.mContainer.removeView(f.mView); &#125; f.mContainer = null; f.mView = null; f.mInnerView = null; &#125; case Fragment.CREATED: if (newState &lt; Fragment.CREATED) &#123; if (DEBUG) Log.v(TAG, \"movefrom CREATED: \" + f); if (!f.mRetaining) &#123; f.performDestroy(); dispatchOnFragmentDestroyed(f, false); &#125; else &#123; f.mState = Fragment.INITIALIZING; &#125; f.performDetach(); dispatchOnFragmentDetached(f, false); if (!keepActive) &#123; if (!f.mRetaining) &#123; makeInactive(f); &#125; else &#123; f.mHost = null; //Fragment可以在Activity挂了之后接着存在，这里只是避免内存泄漏，那个方法叫做setRetainState好像 f.mParentFragment = null; f.mFragmentManager = null; &#125; &#125; &#125; &#125; &#125; &#125; moveToState的方法很长，基本上可以分为state升高和state降低来看： state升高的过程中： onAttach是第一个回调，这里面给Fragment的mHost赋值；(响应Fragment.CREATED信号) onCreateView,onViewCreated是在一个方法里进行的，本质上调用的是mContainer.addView方法。随后立即调用onActivityCreated方法(响应Fragment.ACTIVITY_CREATED方法) onStart是第三个回调，onStart文档明确表示该方法调用时Fragment已经对用户可见。文档同时说明该方法和Activity的onStart方法挂钩，原理是FragmentActivity的onStart中调用了mFragments.dispatchStart()方法。 Fragment和Activity生命周期挂钩 FragmentActivity的onCreate中调用了FragmentManager的dispatchCreate方法，发出Fragment.CREATED信号 FragmentActivity的onStart中先调用了dispatchActivityCreated方法（发出ACTIVITY_CREATED信号），随后调用dispatchStart（发出Fragment.STARTED信号） FragmentActivity的onResume中用Handler发送了一个Message，对应mFragments.dispatchResume(Fragment.RESUMED信号);FragmentActivity的onPostResume中也调用了dispatchResume方法，不过moveToState方法最后已经判断了newState&gt; currentState。 onPause和onStop和onDestoryView也差不多。注意，DestoryView实质只是将Fragment的mView从container中移除，设置mView为null，mContainer为null;onDestory先于onDetach调用 FragmentActivity中的dispatchActivityCreated和dispatchFragmentStarted写在一个方法里，区别是onActivityCreated先于onStart调用且只会被调用一次。所以onActivityCreated存在的意义不过是为了帮助区分是初次start还是后面多次的start（Activity的onStart会被多次调用） state降低的过程其实也差不多，我也懒得分析了。之前以为detach和attch方法很特殊，其实只是从FragmentManager的mAdded中移除该Fragment，并设置fragment.mAdded = false. 从一个state到另一个state基本的步骤就是fragment.performXXX，然后dispatchXXX，这里面顺手把state设置一下 FragmentManager的核心方法应该就是这个moveToState方法了。到此，commit分析结束。说一下几个不建议使用的方法executePendingTransactions 看了下，这个方法里面没有异步方法，别的就不清楚了。据说是将所有的Transaction全部执行掉，首先这里面有一大堆操作，会堵住主线程，其次，这个方法里面涉及到各个状态的判断，很混乱。 commitAllowingStateLoss 这个方法和commit的唯一区别是调用一个可能会抛出异常的方法，后面还是post了一个pendingAction,还是异步的。所以很多人纷纷调用commitAllowingStateLoss方法。然而，这个方法存在是有其意义的。安卓本身就是个异步的系统。Activity的onSaveInstanceState随时可能会被调用，调用之后所有有id的View的onSaveInstanceState都被调用了。这个时候再去尝试做任何操作都可能会重新对已经保存了状态的View造成影响。Activity重新恢复的时候会把saveState中的的UI快照恢复，这一次的操作就会造成恢复的时候不是保存时的效果.allowStateLoss的字面意思很清楚了，就是系统不保证此后View的状态能够正确被恢复。 12345678910private void checkStateLoss() &#123; if (mStateSaved) &#123; throw new IllegalStateException( \"Can not perform this action after onSaveInstanceState\"); &#125; if (mNoTransactionsBecause != null) &#123; throw new IllegalStateException( \"Can not perform this action inside of \" + mNoTransactionsBecause); &#125; &#125; commitNow 注意24.2 之后Google添加了一个单独的commitNow方法，这一点Adam Powell在2016年的IO上特别提到过。内部执行了mTmpRecords(临时操作)，由于只是一项操作，外加里面还对这一次操作进行了优化，所以直接同步执行了。该方法不允许addToBackStack，因为这实质上等同于在所有pendingAction中插队。由于是同步执行，该方法保证方法返回之后，所有的Fragment都能处于所预期的state。 1234567891011@Override public void commitNow() &#123; disallowAddToBackStack(); mManager.execSingleAction(this, false); &#125; @Override public void commitNowAllowingStateLoss() &#123; disallowAddToBackStack(); mManager.execSingleAction(this, true); &#125; commitNowAllowingStateLoss 和commitAllowingStateLoss一样的道理，开发者可能不经意在Activity保存了状态之后调用该方法，这违背了状态保存和恢复的原则。但还是开了个后门，前提是不保证UI恢复的时候出现非预期的表现。allowStateLoss的方法照说不应该调用，如果不调用这个方法的话，使用commitNow，而不是commit + executePendingTransactions。 同时，commitNow之前检查下mStateSaved是否是true,具体来说Activity的onStop和onSaveInstanceState调用之后这个值都会为true。 关于Activity的onSaveInstanceState什么时候会调用，找到比较好的解释。 记住，旋转屏幕的时候一定会调用的。 4. 现在再来看FragmentPagerAdapter和FragmentStatePagerAdapter这两个类行数都不超过300行，非常简单，只是通过调用FragmentManager的相应方法实现展示View的功能。 5. Fragment的一些不常用的APIattach,detach,FragmentLifecycleCallbacks,commitNow，setAllowOptimization(26.0.0又被deprecated了)onCreateView这个名字是怎么来的，其实是在dispatchFragmentsOnCreateView里面调用的。Activity实现了onCreateView(LayoutInflater定义的，会在getSytemService返回LayoutInflater时调用，获取系统服务毕竟是一个异步过程)。 6. 关于Glide是如何实现生命周期绑定的Fragment本身提供了生命周期监听回调12345registerFragmentLifecycleCallbacks 25.1.0unregisterFragmentLifecycleCallbacks 25.1.0addOnBackStackChangedListener 22.2.0removeOnBackStackChangedListener 22.2.0 Glide的做法是写了一个SupportRequestManagerFragment 在这个Fragment的构造函数里放了一个ActivityFragmentLifecycle 参考 在这个Fragment的onStart，OnStop等方法里面调用该lifeCycle的onStart,onStop等回调(lifeCycle是接口，由RequestManager实现) 关键代码 123456if (current == null) &#123; current = new RequestManagerFragment(); pendingRequestManagerFragments.put(fm, current); fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss(); handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget(); &#125; 所以经常会在Debug的时候看到FragmentManager里面有个”com.bumptech.glide.manager”的Fragment。这个Fragment没有实现onCreateView，所以直接返回null。Fragment本身是可以不带View的。 7. 总结Fragment的一些生命周期还是需要跟Activity的生命周期一起看，大部分是异步操作。FragmentManager类似一个管理者，也是一个容器，在Activity的生命周期中顺手实现了容器中元素所要求的UI状态。Fragment本质上是一个View的Controllers，通过FragmentManger和FragmentActivity的生命周期挂钩，并自动做好View的状态保存和恢复。具体的UI展示无非是addView，setVisibility等常规的方法，也正因为这样，support包里的Fragment才能做到3.0以下的适配。日常开发中，Fragment能够将原本堆在Activity中的逻辑承载过来,以异步的方式减轻主线程的压力，对外提供了获取(onViewCreated)，操作(Transaction)，销毁(onDestoryView)这些业务对象的回调方法。由于Android本身就是异步的系统，系统随时(asynchronous)可能会对Fragment的资源进行更改，开发者的代码也随时(asynchronous)会对这些资源进行操作。由于存在这种无法改变的’并发’现状，Fragment不得不为保证资源的一致性而主动抛出一些错误。本文有意忽略掉了一些transition动画(使用了hardwareLayer)和Loader加载的细节，希望能够对日常开发有点帮助。 更新，拿来主义 一份2013年的文档,不要在FragmentActivity#onResume中beginTransaction，需要的话，在onPostResume或者onPostResume中做。也不要在onActivityResult里面去做，onActivityResult会触发onPostResume，推迟到onPostResume去做。 [关于Can not perform this action after onSaveInstanceState] 今天很好奇的查了下FragmentActivity的onBackpressed特地把supportLibVersion改成25.3.0看下，还是123456@Override public void onBackPressed() &#123; if (!mFragments.getSupportFragmentManager().popBackStackImmediate()) &#123; super.onBackPressed(); &#125; &#125; 改到26.1.0之后就变成123456789101112131415@Overridepublic void onBackPressed() &#123; FragmentManager fragmentManager = mFragments.getSupportFragmentManager(); final boolean isStateSaved = fragmentManager.isStateSaved(); if (isStateSaved &amp;&amp; Build.VERSION.SDK_INT &lt;= Build.VERSION_CODES.N_MR1) &#123; // Older versions will throw an exception from the framework // FragmentManager.popBackStackImmediate(), so we'll just // return here. The Activity is likely already on its way out // since the fragmentManager has already been saved. return; &#125; if (isStateSaved || !fragmentManager.popBackStackImmediate()) &#123; super.onBackPressed(); &#125;&#125; 特意查了下aosp的git log，George Mount &#109;&#x6f;&#x75;&#110;&#x74;&#x40;&#103;&#111;&#111;&#103;&#108;&#101;&#46;&#x63;&#111;&#x6d; Tue Feb 21 11:04:14 2017 -0800。12345678910111213141516@Overridepublic void onBackPressed() &#123;- if (!mFragments.getSupportFragmentManager().popBackStackImmediate()) &#123;+ FragmentManager fragmentManager = mFragments.getSupportFragmentManager();+ final boolean isStateSaved = fragmentManager.isStateSaved();+ if (isStateSaved &amp;&amp; Build.VERSION.SDK_INT &lt;= Build.VERSION_CODES.N_MR1) &#123;+ // Older versions will throw an exception from the framework+ // FragmentManager.popBackStackImmediate(), so we'll just+ // return here. The Activity is likely already on its way out+ // since the fragmentManager has already been saved.+ return;+ &#125;+ if (isStateSaved || !fragmentManager.popBackStackImmediate()) &#123; super.onBackPressed(); &#125;&#125; 怎么说呢，fragmentManager.isStateSaved()对外暴露mStateSaved还是挺开明的。 Jake Wharton建议不要用fragment的addtoBackStack，这是Reddit上的讨论，最后Jake本人出来选择了最佳解读(Nailed it) Reference Fragment的onAttach和onDetach什么时候会调用 Glide是怎么跟生命周期挂钩的 Activity的onSaveInstanceState什么时候会调用 Activity-LifeCycle Fragments文档不要依赖Implementation Detail,源码随时会变，官方的文档才是值得依赖的。","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"Retrofit源码阅读笔记","date":"2017-07-01T23:03:00.000Z","path":"2017/07/01/2017-07-01-it-began-with-a-few-bits/","text":"This is gonna be nasty…… TL;DR 1. Retrofit1.1 使用方法Retrofit本身并不局限于Android平台，java应用也可以用来和服务器沟通。Retrofit一般的用法看上去很简单1234567891011121314151617181920212223 public interface GitHub &#123; @GET(\"/repos/&#123;owner&#125;/&#123;repo&#125;/contributors\") Call&lt;List&lt;Contributor&gt;&gt; contributors( @Path(\"owner\") String owner, @Path(\"repo\") String repo); &#125;Retrofit retrofit = new Retrofit.Builder() .baseUrl(API_URL) // end_point .addConverterFactory(GsonConverterFactory.create()) .build(); // Create an instance of our GitHub API interface. GitHub github = retrofit.create(GitHub.class); // Create a call instance for looking up Retrofit contributors. Call&lt;List&lt;Contributor&gt;&gt; call = github.contributors(\"square\", \"retrofit\"); // Fetch and print a list of the contributors to the library. List&lt;Contributor&gt; contributors = call.execute().body(); for (Contributor contributor : contributors) &#123; System.out.println(contributor.login + \" (\" + contributor.contributions + \")\"); &#125; 关键来看这段 retroft.create ,重点都在这里面。关键的代码就在这三行里面了 ServiceMethod serviceMethod = loadServiceMethod(method);OkHttpCall okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args);return serviceMethod.callAdapter.adapt(okHttpCall); 1.2 第一个方法以及ServiceMethod的创建loadServiceMethod(Method)会查找invoke的时候会查找methodCache中有没有这个方法，没有的话调用Builder方法创建一个ServiceMethod实例并放入cahce。看一看这个Builder的构造函数 ，基本上就是把Builder中的参数引用赋值给ServiceMethod实例。 result = new ServiceMethod.Builder(this, method).build();1234567public Builder(Retrofit retrofit, Method method) &#123; this.retrofit = retrofit; //client创建retrofit时可以设定一些属性 this.method = method; this.methodAnnotations = method.getAnnotations(); this.parameterTypes = method.getGenericParameterTypes(); this.parameterAnnotationsArray = method.getParameterAnnotations(); &#125; 12345678910111213141516171819202122232425262728293031323334根据ServiceMethod的变量名基本上能够猜到各自的用处，比如httpMethod（GET、POST）,contentType（MimeType） public ServiceMethod build() &#123; // 1.创建callAdapter,调用retrofit对象设定的callAdapter,例如RxjavAdapter,注意这里面的实现是便利retrofit对象的adapterFactories，找到一个就返回。找不到的话会丢出来一个IllegalArgumentException callAdapter = createCallAdapter(); //callAdapter的作用 就是将retrofit.Call的Call转成一个T。例如上面就是把Call&lt;List&lt;Contributor&gt;&gt;转成一个List&lt;Contributor&gt;，这个过程是上面提到的最重要的三个方法中的第三部 adapt（okHttpCall）。可以认为是拿着一个已经创建好的okHttp的Call去做事情，在适当的时候将网络返回结果转成用户事先定义好的respose类型。 //这一步返回一个java.lang.reflect.Type ，就个class的基本作用家就是根据泛型来确定response的class。 responseType = callAdapter.responseType(); //2.创建用于respnse和Request的converter。 responseConverter = createResponseConverter(); for (Annotation annotation : methodAnnotations) &#123; parseMethodAnnotation(annotation); //这里面就是把@GET变成\"GET\"这个String，表示当前方法是一个GET请求 &#125; int parameterCount = parameterAnnotationsArray.length; //3.创建ParameterHandler parameterHandlers = new ParameterHandler&lt;?&gt;[parameterCount]; for (int p = 0; p &lt; parameterCount; p++) &#123; Type parameterType = parameterTypes[p]; Annotation[] parameterAnnotations = parameterAnnotationsArray[p]; if (parameterAnnotations == null) &#123; throw parameterError(p, \"No Retrofit annotation found.\"); &#125; parameterHandlers[p] = parseParameter(p, parameterType, parameterAnnotations); //关键看这个方法 private ParameterHandler&lt;?&gt; parseParameter(int p, Type parameterType, Annotation[] annotations) 第一个参数表示当前的数组index 第二个参数表示想要的Response类型 第三个参数表示该方法上的注解，就是@那些东西 接下来就是调用 private ParameterHandler&lt;?&gt; parseParameterAnnotation( int p, Type type, Annotation[] annotations, Annotation annotation)方法来判断各种Http方法，这一段代码有300多行。。。。看完有助于掌握Http协议。 &#125; return new ServiceMethod&lt;&gt;(this); &#125;&#125; 关键是这三个方法，Buider在这个过程中完成了一些变量的赋值123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566671. createCallAdapter ---&gt; retrofit.callAdapter(returnType, annotations); 从adapterFactories(显然可以有多个)中遍历，找到了一个就返回。已经实现的的有三种**策略**，DefaultCallAdapterFactory、ExecutorCallAdapterFactory和RxjavaCallAdapterFactory。显然用户可以在创建retrofit实例的过程中install自己的callAdapter实现。再次强调这个CallAdater的作用，就是将Retrofit的Call adpt成对应的Response class的实例。2. createResponseConverter ---&gt; retrofit.responseBodyConverter(responseType, annotations);Retrofit2.Converter&lt;F, T&gt; (from和To，我猜的)Convert objects to and from their representation in HTTP. Instances are created by &#123;@linkplain * Factory a factory&#125; which is &#123;@linkplain Retrofit.Builder#addConverterFactory(Factory) installed&#125; * into the &#123;@link Retrofit&#125; instance.从retrofit对象的converterFactories（可以有多个，原因在于server有时候会返回json，有时候会返回protocolBuffer，有时候返回xml，response回来的时候会一个个问，这一点jake Wharton多次提到过）中遍历，找到一个就返回。确切的说，是找到一个能够处理的。3. 创建parameterHandlers应该可以猜到，这一步就是把用户定义的注解转换成发起网络请求时需要带上的参数private ParameterHandler&lt;?&gt; parseParameterAnnotation( int p, Type type, Annotation[] annotations, Annotation annotation)方法随便展开一点，关注第三个参数和第四个参数例如 public interface GitHub &#123; @GET(\"/repos/&#123;owner&#125;/&#123;repo&#125;/contributors\") Call&lt;List&lt;Contributor&gt;&gt; contributors( @Path(\"owner\") String owner, @Path(\"repo\") String repo); &#125;ServiceMethod走到这一步，annotations就表示 @Path(\"owner\") String owner。注意这里的@PATH是注解类，可以把它当成一个wrapper，这里面就调用了path.value()。else if (annotation instanceof Path) &#123; Path path = (Path) annotation; String name = path.value(); // 调用该方法时传入的String validatePathName(p, name); Converter&lt;?, String&gt; converter = retrofit.stringConverter(type, annotations); return new ParameterHandler.Path&lt;&gt;(name, converter, path.encoded()); &#125;ParameterHandler.Path&lt;&gt;在ParameterHandler这个类里面，看一下结构![](http://odzl05jxx.bkt.clouddn.com/ParameterHandlers.JPG)Path这个class中关键的方法apply: @Override void apply(RequestBuilder builder, @Nullable T value) throws IOException &#123; builder.addPathParam(name, valueConverter.convert(value), encoded); &#125;再往下走： relativeUrl = relativeUrl.replace(\"&#123;\" + name + \"&#125;\", canonicalizeForPath(value, encoded));apply这个方法会在构建Request时由RequestBilder调用，以上面的实例为例子，name就是\"owner\" ,value就是调用该方法时传进来的值，其实就只是Stirng.replace()方法。到这里，Buidler已经完成了- 准备callAdapter，- createResponseConverter- 和填充parameterHandlers数组的任务直接new一个ServiceMethod出来就好了ServiceMethod(Builder&lt;T&gt; builder) &#123; this.callFactory = builder.retrofit.callFactory(); // okhttp3.Call.Factory this.callAdapter = builder.callAdapter; // this.baseUrl = builder.retrofit.baseUrl(); //这个就是 this.responseConverter = builder.responseConverter; // GsonConverter this.httpMethod = builder.httpMethod; //@GET this.relativeUrl = builder.relativeUrl; //@Path this.headers = builder.headers; //@Header this.contentType = builder.contentType; //application/json这种 this.hasBody = builder.hasBody; this.isFormEncoded = builder.isFormEncoded; this.isMultipart = builder.isMultipart; this.parameterHandlers = builder.parameterHandlers; &#125;上面最重要的三个方法讲完了第一个。 1.3 第二个方法和OkHttpCall第二个方法: OkHttpCall okHttpCall = new OkHttpCall&lt;&gt;(serviceMethod, args); OkHttpCall的成员变量：okhttp3.Call rawCall //用于发起请求ServiceMethod serviceMethod; //这就是刚才实例化的serviceMethod对象这个类相对简单，主要看execute方法 123456789101112131415@Override public Response&lt;T&gt; execute() throws IOException &#123; okhttp3.Call call; synchronized (this) &#123; if (executed) throw new IllegalStateException(\"Already executed.\"); executed = true; call = rawCall; if (call == null) &#123; try &#123; call = rawCall = createRawCall(); &#125; catch (IOException | RuntimeException e) &#123; &#125; &#125; &#125; return parseResponse(call.execute()); //建立连接，发起请求，解析response都在这里了（都在一条线程上）。execute是okHttp的方法。 &#125; 还记得最简单的Demo吗，同步执行网络请求Call&lt;List&gt; call = github.contributors(“square”, “retrofit”);List contributors = call.execute().body();这也是Retrofit2.Call.execute方法最终就是走到了这里 createRawCall方法123456okhttp3.Request request = serviceMethod.toRequest(args);okhttp3.Call call = serviceMethod.callFactory.newCall(request); if (call == null) &#123; throw new NullPointerException(\"Call.Factory returned null.\"); &#125; return call; parseRespnse的实现12345678910111213141516171819202122232425262728293031323334Response&lt;T&gt; parseResponse(okhttp3.Response rawResponse) throws IOException &#123; ResponseBody rawBody = rawResponse.body(); //有用的信息在这里 // Remove the body's source (the only stateful object) so we can pass the response along. rawResponse = rawResponse.newBuilder() .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength())) .build(); //根据服务器返回的contentType和contentLength创建一个新的response用于检测200 int code = rawResponse.code(); if (code &lt; 200 || code &gt;= 300) &#123; try &#123; // Buffer the entire body to avoid future I/O. ResponseBody bufferedBody = Utils.buffer(rawBody); return Response.error(bufferedBody, rawResponse); //创建一个body为null的Retrofit2.Response &#125; finally &#123; rawBody.close(); &#125; &#125; if (code == 204 || code == 205) &#123; rawBody.close(); return Response.success(null, rawResponse); &#125; ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody); try &#123; T body = serviceMethod.toResponse(catchingBody); //调用ServiceMethod的responseConverter去转换，前面说过，responseConverter是在builder初始化的时候根据策略，从Retrofit的converterFactories中遍历，找到了就返回。 return Response.success(body, rawResponse); //返回创建一个body为定义好的数据类型的Retrofit2.Response，一般情况下，调用Response.body()就能得到所要的实体数据。 &#125; catch (RuntimeException e) &#123; // If the underlying source threw an exception, propagate that rather than indicating it was // a runtime exception. catchingBody.throwIfCaught(); throw e; &#125;&#125; 这里可以得知，Retrofit对于状态码的处理，1XX和3XX以上全部走到error中 execute是同步方法，enqueue是异步请求的方法，底层其实就调用了OkHttp.Call.enqueue()，所以说Retrofit本身并不负责创建网络请求，线程调度。只做了parseRespnse的方法，另外，OkHttp和Retrofit本身并不负责把Response推到主线程上，Android 平台可能要注意。 1.4 第三个方法和AdapterFactoryreturn serviceMethod.callAdapter.adapt(okHttpCall); //这个return需要的是Object,涉及到动态代理，可以无视。 回头看一下serviceMethod的createCallAdapter方法，就是从retrofit对象的adapterFactories中一个个遍历： CallAdapter&lt;?, ?&gt; adapter = adapterFactories.get(i).get(returnType, annotations, this)； 找到之后就返回，默认的实现有DefaultCallAdapterFactory和ExecutorCallAdapterFactory以及RxjavaCallAdapterFactory。 12345678910111213141516171819202122232425在DefaultCallAdapterFactory中的处理方式是 return new CallAdapter&lt;Call&lt;?&gt;&gt;() &#123; @Override public Type responseType() &#123; return responseType; &#125; @Override public &lt;R&gt; Call&lt;R&gt; adapt(Call&lt;R&gt; call) &#123; return call; &#125; &#125;;ExecutorCallAdapterFactory的处理方式是 return new CallAdapter&lt;Object, Call&lt;?&gt;&gt;() &#123; @Override public Type responseType() &#123; return responseType; &#125; @Override public Call&lt;Object&gt; adapt(Call&lt;Object&gt; call) &#123; return new ExecutorCallbackCall&lt;&gt;(callbackExecutor, call); &#125; &#125;; 其实就是将callback丢到一个线程池callbackExecutor中，这个线程池可以通过Retrofit创建的时候配置，简单来说就是response会在这个线程池中回调。 RxjavaCallAdapterFactory的做法是12345678910111213141516171819202122232425262728293031 @Override public CallAdapter&lt;?&gt; get(Type returnType, Annotation[] annotations, Retrofit retrofit) &#123; Class&lt;?&gt; rawType = getRawType(returnType); String canonicalName = rawType.getCanonicalName(); boolean isSingle = \"rx.Single\".equals(canonicalName); //直接看包名。。。。。 boolean isCompletable = \"rx.Completable\".equals(canonicalName); if (rawType != Observable.class &amp;&amp; !isSingle &amp;&amp; !isCompletable) &#123; return null; &#125; if (!isCompletable &amp;&amp; !(returnType instanceof ParameterizedType)) &#123; String name = isSingle ? \"Single\" : \"Observable\"; throw new IllegalStateException(name + \" return type must be parameterized\" + \" as \" + name + \"&lt;Foo&gt; or \" + name + \"&lt;? extends Foo&gt;\"); &#125; if (isCompletable) &#123; // Add Completable-converter wrapper from a separate class. This defers classloading such that // regular Observable operation can be leveraged without relying on this unstable RxJava API. // Note that this has to be done separately since Completable doesn't have a parametrized // type. return CompletableHelper.createCallAdapter(scheduler); &#125; CallAdapter&lt;Observable&lt;?&gt;&gt; callAdapter = getCallAdapter(returnType, scheduler); if (isSingle) &#123; // Add Single-converter wrapper from a separate class. This defers classloading such that // regular Observable operation can be leveraged without relying on this unstable RxJava API. return SingleHelper.makeSingle(callAdapter); &#125; return callAdapter;&#125; 1.5 使用Retrofit的best practices到这里，retrofit的工作流程就通过三个方法讲完了，接下来根据jake wharton的talk making retrofit work for you来讲几个best practice。 1.5.1 end point 不一样怎么办默认情况下，如果不指定client,每一次都会创建一个新的OkHttpClient，这样做就丧失了disk caching,connection pooling等优势。 所以需要提取出一个OkHttpClient,解决方式很简单 1.5.2 不要创建多个HttpClientshallow copy123456OkHttpClient client = new OkHttpClient();OkHttpClient clientFoo = client.newBuilder().addInterceptor(new FooInterceptor()).build()OkHttpClient clientBar = client.newBuilder().readTimeOut(20,SECONDS).writeTimeOut(20,SECONDS).build() 1.5.3 有的接口需要认证（加Header），有的不需要（比如登录，忘记密码）一般可能会想到在OkHttp的Interceptor中去判断url然后手动加上header，一种更好的解决方式是，假定所有的API都需要加Header，对于登录和忘记密码的Api,这样写123@POST(\"/login\")@Headers(\"No-Authentication: true\")Call&lt;User&gt; login(@Body LoginRequest request) //这个header对于server是不可见的，现在在Interceptor中，只要判断request.header(“No-Authentication”)==null 即表示该接口需要加上header。所以，对于特定接口的筛选可以，采用这种方式。 1.5.4 Converters将byte变成java对象，底层的解析器不要创建多个addConverterFactory，和之前的创建两个httpclient一样，人们也很容易创建两个解析器。解决方法也很实在，提取出来公用即可。 1.5.5 addConverterFactory可以调用多次假如一个接口返回json，一个接口返回proto。不要试图创建多个retrofit实例。这样就可以了 底层的原理是这样的。User是Proto,Friend是Json。 Proto都extends一个protoType class，所以只要看下是否 instanceof proto就可以了。这一切都是在serviceMethod创建过程中判断的。这里顺序很重要。由于gson基本能够序列化一切，所以gson总是会认为自己可以成功。所以要把protoConverter放在前面。 GsonConverterFactory, SimpleXmlConverterFactory converters , they say yes to everyThing. 所以如果出现这种情况怎么办？ 首先定义自己的注解 1234567891011121314151617181920212223242526272829 @interface Xml &#123;&#125; @interface Json &#123;&#125; interface Service&#123; @GET(\"/User\") @Xml Call&lt;User&gt; user(); // User是XML @GET(\"/Friends\") @Json Call&lt;Friends&gt; friends(); //Friends是Json &#125;class XmlOrJsonConverterFactroy extend Converter.Factory&#123; final Converter.Factory xml = ///; final Converter.Factory json = //....; @override public Converter&lt;ResponseBody,?&gt; responseBodyConverter(Type type, Annotation[] annotations, Retrofit retrofit)&#123; // annotations就包含了刚才我们添加的注解 for (Annotation annotation : annotations)&#123; if(annotation.getClass == Xml.class)&#123; return xml.reponseBodyConverter(type,annotations,retrofit); &#125;else if(annotation.getClass == Json.class)&#123; // json &#125; return null; 都不是。 会去找下一个Converter.. &#125; &#125;&#125;[AnnotatedConverterFactory用于自定义类型](https://github.com/square/retrofit/blob/master/samples/src/main/java/com/example/retrofit/AnnotatedConverters.java) 1.5.6 服务器返回的数据中包括一些metaData使用delegate的方式去除这些metadata，只获取想要的response实体对象但这些metaData是有用的。。怎么处理可以在convert中集中处理自定义错误码。 1.5.7 和Rxjava配合使用CallAdapterFactory和ConverterFactory类似，也可以自定义，所以这样可以直接将所有的Observable返回到主线程 所以，Retrofit就是将HttpClient、Converter和CallAdapter这三样职能结合起来，又提供了足够的定制化。 1.6 补充OkHttp本身没有将response挪到主线程，Retrofit这么干了，具体在Retrofit.Builder.build方法里面1234567891011121314151617181920public Retrofit build() &#123; Executor callbackExecutor = this.callbackExecutor; if (callbackExecutor == null) &#123; callbackExecutor = platform.defaultCallbackExecutor(); //Andriod平台默认挪到主线程，就是一个持有主线程的线程池 //这个线程池的excute方法就是用一个hadler推到主线程了。 &#125; // Make a defensive copy of the adapters and add the default Call adapter. List&lt;CallAdapter.Factory&gt; adapterFactories = new ArrayList&lt;&gt;(this.adapterFactories); adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor)); //如果不加CallAdapterFactory的话， //Android平台默认直接把response丢回给callback，默认配置也是在主线程干的。 //如果不希望在主线程接收Response的话，自己在Builder里面添加callbackExecutor. // Make a defensive copy of the converters. List&lt;Converter.Factory&gt; converterFactories = new ArrayList&lt;&gt;(this.converterFactories); return new Retrofit(callFactory, baseUrl, converterFactories, adapterFactories, callbackExecutor, validateEagerly);&#125; 2. OkHttp3. A few ‘ok’ librarieswhy moshi ? why Retrofit call can be clone cheap？why SinkedSource?why protolBuffer cost less ? Ref Paisy解析Retrofit open-sourse-projetc解析Retrofit Making Retrofit Work For You by Jake Wharton","tags":[{"name":"Retrofit","slug":"Retrofit","permalink":"https://haldir65.github.io/tags/Retrofit/"},{"name":"OkHttp","slug":"OkHttp","permalink":"https://haldir65.github.io/tags/OkHttp/"},{"name":"Okio","slug":"Okio","permalink":"https://haldir65.github.io/tags/Okio/"}]},{"title":"Java集合类的一些整理","date":"2017-06-25T22:56:33.000Z","path":"2017/06/25/2017-06-12-Collections-Refuled-by-Stuart-Marks/","text":"根据网上的大部分博客的分类，集合框架分为Collections(具有类似数组的功能)和Map(存储键值对)这两大部分。针对jdk1.8的java.util里面的一些常用的或者不常用的集合做一些分析。写这篇文章的过程中，我慢慢发现不同版本jdk的同一个class的实现是有一些差异的(LinkedList)，由于对照的是java1.8的代码，里面会多一些since 1.8的代码，这里不作论述。 java集合的大致框架建议参考网上博客的总结，Java集合干货系列写的比较好，图画的也不错，针对jdk 1.6源码讲的。我这里只是自己学习过程中的一些笔记。 ListArrayList (建议new出来的时候给定一个适当的size，不然每次扩容很慢的，可以放null)LinkedList(not recommended，增删元素的时候快一点)Vector（线程安全,重同步，不推荐） SetHashSet (底层是HashMap)TreeSet(排序存储)LinkedHashSet(底层是LinkedHashMap) QueueStack ArrayDeque(不常用) MapHashMap （键值都可以为null,底层是哈希表）TreeMap(底层二叉树)HashTable(线程安全，键值都不允许为null)SparseArray(Android平台用) 关于集合，不得不提到泛型，Java 1.5引入了泛型，关于泛型，找到一篇很好的文章类型擦除原理。本质上只是提供了编译期类型检查。编译通过后都是Object，所以叫做类型擦除。 1. List的解析1.1 ArrayList源码解析 先上一段崩溃代码12345678910 public static void main(String[] args) &#123; String[] array = new String[]&#123;\"a\", \"b\", \"c\", \"d\"&#125;; List&lt;String&gt; l = Arrays.asList(array); l.add(\"d\");&#125;Exception in thread \"main\" java.lang.UnsupportedOperationException at java.util.AbstractList.add(AbstractList.java:148) at java.util.AbstractList.add(AbstractList.java:108) at com.example.demo.main(ConcurrentModificationListDemo.java:13) 问题出在Arrays.asList返回了一个java.util.Arrays.ArrayList，而不是java.util.ArrayList。前者只实现了List接口的有限的几个方法，并且是Arrays内部的一个private class。正确的用法是new 一个ArrayList，把这个有限的list的元素(的指针)copy进去，即addAll()方法ArrayList.toArray(T[] a)是把所有的elements通过System.arraycopy(elementData, 0, a, 0, size);复制到a数组中。 System.arraycopy可以从自己的数组复制到自己的数组12345678public void add(int index, E element) &#123; rangeCheckForAdd(index); ensureCapacityInternal(size + 1); // Increments modCount!! System.arraycopy(elementData, index, elementData, index + 1, size - index); elementData[index] = element; size++; &#125; 添加到指定位置，System.arrayCopy可以从同一个数组复制到同一个数组，几乎就是挪动指针了。 不常见的方法 12345678910//下面这两个是因为ArrayList implements java.io.Serializable，是序列化时会调用的private void writeObject(java.io.ObjectOutputStream s)private void readObject(java.io.ObjectInputStream s)protected void removeRange(int fromIndex, int toIndex)public boolean removeAll(Collection&lt;?&gt; c) //给一个集合，删除list与之的交集public boolean retainAll(Collection&lt;?&gt; c) // 给定一个集合，从list中删除所有不在这个集合里面的元素public void trimToSize() // 内存压力大的时候可以释放掉一部分内存，记得那个1.5倍的默认扩容嘛，释放的就是这0.5的内存 多线程场景下要注意的问题 和Vector不同，ArrayList中的操作不是线程安全的！所以，建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或者CopyOnWriteArrayList。 1.2 LinkedList的一些点LinkedList是双向链表实现的，可以想象成一帮小孩左手拉右手绕成一个圈，只不过这里面的每一个小孩并不是你放进去的 T 类型数据，而是一个Node 。所以LinkedList是可以放进去一个Null的。LinkedList往往被人诟病的就是除了添加和删除快之外，get和set很慢。来看下add的实现（jdk 1.8） 1234567891011121314151617181920 public boolean add(E e) &#123; linkLast(e); return true; &#125;/** * Links e as last element. */ void linkLast(E e) &#123; final Node&lt;E&gt; l = last; //先把链表的尾巴找出来 final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null); // 可以想象每次add都有new的操作，并将原来的尾巴作为这个新的Entry的头部 last = newNode; //新的Node将成为新的尾巴 if (l == null) //这种情况是原来没有尾巴，也就是说size = 0 first = newNode; //这时候就只有一个Node，头和尾都是Null else l.next = newNode; //不然的话，旧的尾巴变成了倒数第二个，它的next指向了新的Entry. size++; modCount++; &#125; add的过程看起来很快，new一个entery，确定下前后的指针就可以了。remove也差不多，取消指针引用即可。 来看比较慢的get 1234567891011121314151617181920212223public E get(int index) &#123; checkElementIndex(index); return node(index).item; &#125; /** * Returns the (non-null) Node at the specified element index. */ Node&lt;E&gt; node(int index) &#123; // assert isElementIndex(index); if (index &lt; (size &gt;&gt; 1)) &#123; Node&lt;E&gt; x = first; for (int i = 0; i &lt; index; i++) x = x.next; //一直遍历到这个index才返回，慢 return x; &#125; else &#123; Node&lt;E&gt; x = last; for (int i = size - 1; i &gt; index; i--) x = x.prev; return x; &#125; &#125; 值得注意的一点小事：ArrayList implement RandomAccess接口，而LinkedList并没有。RandomAccess接口的定义如下 Marker interface used by List implementations to indicate that they support fast (generally constant time) random access. The primary purpose of this interface is to allow generic algorithms to alter their behavior to provide good performance when applied to either random or sequential access lists.* The best algorithms for manipulating random access lists (such as ArrayList) can produce quadratic behavior when applied to sequential access lists (such as LinkedList). Generic list algorithms are encouraged to check whether the given list is an instanceof this interface before applying an algorithm that would provide poor performance if it were applied to a sequential access list, and to alter their behavior if necessary to guarantee acceptable performance.* It is recognized that the distinction between random and sequential access is often fuzzy. For example, some List implementations provide asymptotically linear access times if they get huge, but constant access times in practice. Such a List implementation should generally implement this interface. As a rule of thumb, a List implementation should implement this interface if, for typical instances of the class, this loop: for (int i=0, n=list.size(); i &lt; n; i++) list.get(i); //get的速度应该是恒定的 runs faster than this loop: for (Iterator i=list.iterator(); i.hasNext(); ) i.next(); 这种接口就是给外界使用者看的，用来说明该集合支持这种通过下标查找（速度不变）的快速操作 实践表明，对于linkedList，采用for loop的方式要很慢，但使用ListIterator的方式，速度并不慢，简单来想，沿着链表的一个方向一致往下走就是了嘛。一些经验表明(摘自简书作者嘟爷MD的文章) ArryList和LinkedList的对比结论 1、顺序插入速度ArrayList会比较快2、LinkedList将比ArrayList更耗费一些内存3、ArrayList的遍历效率会比LinkedList的遍历效率高一些4、有些说法认为LinkedList做插入和删除更快，这种说法其实是不准确的：如果增加或者删除的元素在前半部分的时候，ArrayList会频繁调用System.arrayCopy方法，虽然native方法快，但高频率调用肯定慢，至少比不上移动指针。 2. Map的几个实现类2.1 HashMap源码解析 public class HashMap extends AbstractMap implements Map, Cloneable, Serializable HashMap不是线程安全的，Key和Value都有可能为null，存储数据不是有序的(get的顺序不是put的顺序)。比较专业的说法是 链表数组结构。 HashMap中有几个默认值常量 默认初始容量是16 static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16 默认加载因子是0.75f ，加载因子是指Hashmap在自动扩容之前可以达到多满 static final float DEFAULT_LOAD_FACTOR = 0.75f; //一般不需要改 构造函数有好几个 1234public HashMap(int initialCapacity, float loadFactor) //自定义加载因子，比较玄学public HashMap(int initialCapacity) // 避免扩容，和ArrayList初始化指定容量类似的道理public HashMap() //直接把初始容量设置成16public HashMap(Map&lt;? extends K, ? extends V&gt; m) 注意这个初始容量必须是2的n次方 来看常见的CURD操作(jdk 1.8源码，和我在网上找到的jdk1.6源码有一些变化了)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566 public V put(K key, V value) &#123; return putVal(hash(key), key, value, false, true); //HashMap允许key为null,key为null的话，直接放到数组的0的位置（hash方法返回的是0） &#125; static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16); //如果是null，放到数组的第一个// 这里面就是HashMap算法的高明之处 ，// 1. 首先算出object的hashcode，//2.然后根据上述公式将二进制的1尽量分散的均匀一点 // 3. 在putVal的时候将这个值跟数组的长度length-1进行位运算，得到一个比length小的正数，作为这个新元素在数组中的index.但这样仍不免会产生冲突(hash Collision) &#125; /** * Implements Map.put and related methods * * @param hash hash for key * @param key the key * @param value the value to put * @param onlyIfAbsent if true, don't change existing value * @param evict if false, the table is in creation mode. * @return previous value, or null if none */ final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; //table为成员变量，是一个Node数组，为空的话则创建 。在resize中创建 if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); else &#123; Node&lt;K,V&gt; e; K k; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) e = p; //Table数组中找到了这个下标的元素，直接指定 else if (p instanceof TreeNode)//p可以理解为previous 。 如果发现这个节点是一棵树（红黑树？） e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); else &#123;//否则该节点是链表，各个元素之间手拉手的那种 for (int binCount = 0; ; ++binCount) &#123; if ((e = p.next) == null) &#123; p.next = newNode(hash, key, value, null); //找到这个链表的尾巴了 if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; &#125; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; &#125; &#125; if (e != null) &#123; // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); //回调函数 return oldValue; &#125; &#125; ++modCount; if (++size &gt; threshold) resize(); afterNodeInsertion(evict);//回调函数 return null; &#125; get方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364public V get(Object key) &#123; Node&lt;K,V&gt; e; return (e = getNode(hash(key), key)) == null ? null : e.value;//根据key来找value &#125; /** * Implements Map.get and related methods * * @param hash hash for key * @param key the key * @return the node, or null if none */ final Node&lt;K,V&gt; getNode(int hash, Object key) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k; if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp; (first = tab[(n - 1) &amp; hash]) != null) &#123; //table不为空说明曾经put过 if (first.hash == hash &amp;&amp; // always check first node ((k = first.key) == key || (key != null &amp;&amp; key.equals(k)))) return first; if ((e = first.next) != null) &#123; if (first instanceof TreeNode) return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key); do &#123; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) return e; &#125; while ((e = e.next) != null); &#125; &#125; return null; &#125;public V get(Object key) &#123; Node&lt;K,V&gt; e; return (e = getNode(hash(key), key)) == null ? null : e.value; &#125; /** * Implements Map.get and related methods * * @param hash hash for key * @param key the key * @return the node, or null if none */ final Node&lt;K,V&gt; getNode(int hash, Object key) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k; if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp; (first = tab[(n - 1) &amp; hash]) != null) &#123; if (first.hash == hash &amp;&amp; // always check first node ((k = first.key) == key || (key != null &amp;&amp; key.equals(k)))) return first; if ((e = first.next) != null) &#123; if (first instanceof TreeNode) return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key); do &#123; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) return e; //可以看出比较的方式就是hash（int）相等且key(指针相等) 或者key equals(所以经常说重写equals需要确保hashcode一致，这里至少反应了这一点) &#125; while ((e = e.next) != null); &#125; &#125; return null; &#125; 回想一下平时迭代一个HashMap的方式123456long i = 0;Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; it = map.entrySet().iterator();while (it.hasNext()) &#123; Map.Entry&lt;Integer, Integer&gt; pair = it.next(); //上面的get也是这种不断查找next的方式 i += pair.getKey() + pair.getValue();&#125; entrySet方法是Map接口定义的123456789101112131415Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet(); * Returns a Set view of the mappings contained in this map. * The set is backed by the map, so changes to the map are * reflected in the set, and vice-versa. If the map is modified * while an iteration over the set is in progress (except through * the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation, or through the * &lt;tt&gt;setValue&lt;/tt&gt; operation on a map entry returned by the * iterator) the results of the iteration are undefined. The set * supports element removal, which removes the corresponding * mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;, * &lt;tt&gt;Set.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt; and * &lt;tt&gt;clear&lt;/tt&gt; operations. It does not support the * &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations. * * @return a set view of the mappings contained in this map 大致意思是： 返回一个能够反映该map元素组合的一个Set，对这个Set的操作都将反映到原map上，反之亦然。在通过entrySet迭代这个map的时候，除了remove和操作操作都是不被支持的。返回的Set支持删除对应的mapping组合。但不支持add操作 HashMap内部保留了一个这样的成员变量：transient Set&lt;Map.Entry&gt; entrySet; //成员变量具体实现enterySet方法的地方：123456789101112131415161718192021222324252627282930 public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123; Set&lt;Map.Entry&lt;K,V&gt;&gt; es; return (es = entrySet) == null ? (entrySet = new EntrySet()) : es; &#125;// 这个EntrySet大致长这样 final class EntrySet extends AbstractSet&lt;Map.Entry&lt;K,V&gt;&gt; &#123; public final int size() &#123; return size; &#125; public final void clear() &#123; HashMap.this.clear(); &#125; public final Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123; return new EntryIterator(); &#125; public final boolean contains(Object o) &#123; if (!(o instanceof Map.Entry)) return false; Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o; Object key = e.getKey(); Node&lt;K,V&gt; candidate = getNode(hash(key), key); return candidate != null &amp;&amp; candidate.equals(e); &#125; public final boolean remove(Object o) &#123; if (o instanceof Map.Entry) &#123; Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o; Object key = e.getKey(); Object value = e.getValue(); return removeNode(hash(key), key, value, true, true) != null; &#125; return false; &#125; &#125; 整理的关键在于removeNode方法，和getNode和putVal很像1234567891011121314151617181920212223242526272829303132333435363738394041final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index; if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp; (p = tab[index = (n - 1) &amp; hash]) != null) &#123; Node&lt;K,V&gt; node = null, e; K k; V v; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) node = p; else if ((e = p.next) != null) &#123; if (p instanceof TreeNode) node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key); else &#123; do &#123; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) &#123; node = e; break; &#125; p = e; &#125; while ((e = e.next) != null); &#125; &#125; //先把p(previous)找出来，这里的matchValue和movable都是true // node 就是包含了要移出对象的Node if (node != null &amp;&amp; (!matchValue || (v = node.value) == value || (value != null &amp;&amp; value.equals(v)))) &#123; if (node instanceof TreeNode) ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable); else if (node == p) //数组这个位置就一个 tab[index] = node.next;//直接指向下一个 else p.next = node.next; //数组这个位置指向链表下一个节点，释放引用 ++modCount; --size; afterNodeRemoval(node); return node; &#125; &#125; return null; &#125; 比较元素是否相同的关键是 e.hash == hash || (key!=null &amp;&amp;key.equals(k)) //后半部分其实也是比较hashCode 另外一些平时常用的方法包括：1234567891011121314151617public boolean containsKey(Object key) &#123; return getNode(hash(key), key) != null; //就是检查下有没有这个key对应的Node &#125; public boolean containsValue(Object value) &#123; Node&lt;K,V&gt;[] tab; V v; if ((tab = table) != null &amp;&amp; size &gt; 0) &#123; for (int i = 0; i &lt; tab.length; ++i) &#123; for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) &#123; if ((v = e.value) == value || (value != null &amp;&amp; value.equals(v))) return true; //遍历内部的数组，仅此而已 &#125; &#125; &#125; return false; &#125; 和ArrayList、LinkedList比起来，HashMap的源码要麻烦许多，这里面涉及到hashCode，链表，红黑树。需要一点数据结构的知识。另外，HashMap还针对hashCode冲突（hash Collision，不同的Object居然有相同的hashCode）的情况作了预处理通俗的来说，HashMap内部维护了一个数组，每一个数组元素内部不一定只有一个，有可能是一个链表。每次添加(key,value)不是盲目的往这个数组里面塞，而是算下key的hash值，放到对应的节点上。如果这个节点上还没有元素，直接放就好了。如果有的话，新加入的value将被作为原有元素的Next(外部调用get的时候，先根据传入的key的hashCode找到节点，然后根据key.equals来找)。简单如此，精致如斯。 2.2 LinkedHashMappublic class LinkedHashMap extends HashMap implements MapHashMap源码我看了下有两千多行，LinkedHashMap只有七百多行，显然这是继承带来的简便之处。关键的成员变量final boolean accessOrder; 默认是false The iteration ordering method for this linked hash map: truefor access-order, false for insertion-order. LinkedHashMap常用的属性就是它支持有序，这个有序是指迭代的时候有序HashMap用来存放和获取对象，而双向链表用来实现有序 2.3 SparseArray先来看一段崩溃日志1234Fatal Exception: java.lang.ArrayIndexOutOfBoundsException: src.length=509 srcPos=60 dst.length=509 dstPos=61 length=-60 at java.lang.System.arraycopy(System.java:388) at com.android.internal.util.GrowingArrayUtils.insert(GrowingArrayUtils.java:135) at android.util.SparseIntArray.put(SparseIntArray.java:144) 简单分析一下，123456789101112131415161718192021222324252627282930313233343536GrowingArrayUtils.java /** * Primitive int version of &#123;@link #insert(Object[], int, int, Object)&#125;. */ public static int[] insert(int[] array, int currentSize, int index, int element) &#123; assert currentSize &lt;= array.length; if (currentSize + 1 &lt;= array.length) &#123; System.arraycopy(array, index, array, index + 1, currentSize -index); array[index] = element; return array; &#125; int[] newArray = new int[growSize(currentSize)]; System.arraycopy(array, 0, newArray, 0, index); newArray[index] = element; System.arraycopy(array, index, newArray, index + 1, array.length - index); return newArray; &#125; public static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) &#123; if (src == null) &#123; throw new NullPointerException(&quot;src == null&quot;); &#125; if (dst == null) &#123; throw new NullPointerException(&quot;dst == null&quot;); &#125; if (srcPos &lt; 0 || dstPos &lt; 0 || length &lt; 0 || srcPos &gt; src.length - length || dstPos &gt; dst.length - length) &#123; throw new ArrayIndexOutOfBoundsException( &quot;src.length=&quot; + src.length + &quot; srcPos=&quot; + srcPos + &quot; dst.length=&quot; + dst.length + &quot; dstPos=&quot; + dstPos + &quot; length=&quot; + length);//对照着崩溃日志，length传了个-60进来，而srcPos = 60。显然是有其他线程在SparseArray.put调用后，在GrowingArrayUtils.insert调用前做了一次clear操作。怎么办，加锁呗。 &#125; &#125; 很显然这段话是因为length= -60导致崩溃，应该是mSize被设置为0(其他线程调用了clear方法，clear只是设置mSize = 0) 重现了一下：123456789101112131415161718192021222324252627282930313233343536373839404142434445@Override public void onClick(View v) &#123; executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()); for (int i = 0; i &lt; 1000; i++) &#123; if (i %2==0) &#123; executor.execute(new closer(sparseIntArray)); continue; &#125; executor.execute(new writer(sparseIntArray, i)); &#125; &#125; static class writer implements Runnable &#123; SparseIntArray array; int index; public writer(SparseIntArray array, int index) &#123; this.array = array; this.index = index; &#125; @Override public void run() &#123; array.put(index, (int) Thread.currentThread().getId()); LogUtil.p(\"write to \"+index); &#125; &#125; static class closer implements Runnable &#123; SparseIntArray array; public closer(SparseIntArray array) &#123; this.array = array; &#125; @Override public void run() &#123; array.clear(); LogUtil.e(\"clear array\"); &#125; &#125; 果然:1234567891008-21 15:26:27.600 23165-23207/com.harris.simplezhihu E/AndroidRuntime: FATAL EXCEPTION: pool-1-thread-4 Process: com.harris.simplezhihu, PID: 23165 java.lang.ArrayIndexOutOfBoundsException: src.length=21 srcPos=1 dst.length=21 dstPos=2 length=-1 at java.lang.System.arraycopy(System.java:388) at com.android.internal.util.GrowingArrayUtils.insert(GrowingArrayUtils.java:135) at android.util.SparseIntArray.put(SparseIntArray.java:143) at com.harris.simplezhihu._07_sparsearry_concurrent.SpareArrayCrashActivity$writer.run(SpareArrayCrashActivity.java:61) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588) at java.lang.Thread.run(Thread.java:818) SparseArry提供了类似于HashMap的调用接口， 使用SparseArray的初衷还是在android这种内存比cpu金贵的平台中，使用SparseArry相比HashMap能够减轻内存压力，获得更好的性能。liaohuqiu指出SparseArry并不是任何时候都更快，主要是节省内存，避免autoBoxing，二分法查找对于cpu的消耗需要权衡。尤其是存储的量很大的时候，二分法查找的速度会很慢。 SparseArry类似的class有好几个，据说有八个，以SparseIntArry为例SparseIntArry的几个常用方法,值得注意的是 clear方法只不过是把mSize设置为0。remove(key)只是把这个key对应位置value设置为DELETED.内部的mKeys是有序的int[],long[]。这样才能实现二分法查找。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public int indexOfKey(int key)public int indexOfValue(int value)public int get(int key)public void put(int key, int value)public void clear() &#123; mSize = 0; &#125;//迭代一个SparseArry的方法for(int i = 0; i &lt; sparseArray.size(); i++) &#123; int key = sparseArray.keyAt(i); // get the object by the key. Object obj = sparseArray.get(key);&#125;// 从源码来看变量结构public class SparseIntArray implements Cloneable&#123; private int[] mKeys; private int[] mValues; private int mSize;&#125;public void put(int key, int value) &#123; int i = ContainerHelpers.binarySearch(mKeys, mSize, key); //二分法查找 if (i &gt;= 0) &#123; mValues[i] = value; //找到了在Value数组中的index,直接替换掉 &#125; else &#123; i = ~i; mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key); mValues = GrowingArrayUtils.insert(mValues, mSize, i, value); mSize++; &#125; &#125; // GrowwingArrayUtils.java /** * Primitive int version of &#123;@link #insert(Object[], int, int, Object)&#125;. */ public static int[] insert(int[] array, int currentSize, int index, int element) &#123; assert currentSize &lt;= array.length; if (currentSize + 1 &lt;= array.length) &#123; System.arraycopy(array, index, array, index + 1, currentSize - index); array[index] = element; return array; &#125; int[] newArray = new int[growSize(currentSize)]; System.arraycopy(array, 0, newArray, 0, index); newArray[index] = element; System.arraycopy(array, index, newArray, index + 1, array.length - index); return newArray; &#125; SparseArray廖祜秋 特地强调 SparseArray 是针对HashMap做的优化。 1.HashMap 内部的存储结构，导致一些内存的浪费。 2.在刚扩容完，SparseArray 和 HashMap 都会存在一些没被利用的内存。 SparseArray 并不是任何时候都会更快，有时反而会更慢vauleAt和keyAt接收一个index参数(数组下标)，这个参数应该是key对应的BinarySearch得到的值。 2.4 ArrayMap3. Set的介绍Set用比较少，HashSet、TreeSet和LinkedHashSet是jdk的实现类 public class HashSet extends AbstractSet implements Set, Cloneable, java.io.SerializableSet的重要特点就是不能放进去重复的元素，Set中不会存在e1和e2，e1.equals(e2)的情况HashSet的源码只有三百多行，内部有一个map（HashMap）相对来说是比较简单的。其实Set平时用的也不是那么多。。。 4. 一些不常用的类Vetor，Stack，ArrayDeque,Queue Vector属于List,线程安全，但效率低（就是简单的在所有方法前面加上了synchronized） Queue是一个interface，属于两端可以出入的List，通常是(FIFO模式)，实现类有 PriorityQueue， java.util.concurrent.LinkedBlockingQueue java.util.concurrent.LinkedBlockingQueue java.util.concurrent.PriorityBlockingQueue 作者都是大名鼎鼎的Doug Lea 另外，LinkedList也能直接拿来当做queue使用 Stack是Vector的子类(属于LIFO的栈) The Stack class represents a last-in-first-out (LIFO) stack of object Deque(双端队列) 5. concurrentHashMap等jdk1.8的concurrentHashMap不是用synchronized实现的，是Doug Lea使用CAS操作写的，非常高效。 6. WeakHaskMapWeakHashMap的Key是WeakReference，但Value不是。常见用法 1234String a = \"a\";map.put(1,a);a = null;//map中的a可以出了map自身外没有其他地方被引用，a将被被gc回收 Android 官方开发文档上指出了一点 Implementation note: The value objects in a WeakHashMap are held by ordinary strong references. Thus care should be taken to ensure that value objects do not strongly refer to their own keys, either directly or indirectly, since that will prevent the keys from being discarded. Note that a value object may refer indirectly to its key via the WeakHashMap itself; that is, a value object may strongly refer to some other key object whose associated value object, in turn, strongly refers to the key of the first value object. If the values in the map do not rely on the map holding strong references to them, one way to deal with this is to wrap values themselves within WeakReferences before inserting, as in: m.put(key, new WeakReference(value)), and then unwrapping upon each get. WeakHashMap的value不要持有key的强引用，否则，key永远不会被清除,value也别想被清除。 7. java 8的一些新的方法list.replaceAll(String::toUpperCase) //method referencecan not change the elemeet type, for that you need an streamCollections Refuled by Stuart MarksputIfAbsent是Atmmic的Is putIfAbsent an atomic operation 8.结束语8.1 Doug Lea 是非常聪明的人，估计并发经常会牵涉到集合，所以jdk里面很多集合都有他的作品8.2 jdk只是定义了这些框架，像List，Map这些全都是接口，完全可以自己去实现。Apache就有一大堆适合特定场景的集合实现类。jdk只是帮助我们实现了一些常见的类。如果有现成的满足需求的框架，不要重复造轮子。8.3 平时只要记住ArrayList和HashMap的大致内部实现就可以了，至于别的，除非面试，平时没必要记录。8.4 Stuart Mark特别喜欢把一个class搞成@deprecated8.5 就连Joshua Bloch 都承认，除非性能真的很重要的，平时没必要过度优化。By the way , he said Doug Lea is very smart .8.6 Stack这种东西有点过时了 一个原因是Stack extends Vector（每个方法都加synchronized，多数场景下不需要，另外Vector是1.1还是1.0就有了） updatejdk 1.8对于长度超过8的链表改用红黑树。 Reference Collections Refuled by Stuart Marks From Java Code to Java Heap: Understanding the Memory Usage of Your Application Java集合干货系列 Arrays.asList()返回的List不是jva.util.ArrayList WeakHashMap和HashMap的区别 Hashmap的死锁问题 Young Pups: New Collections APIs for Java 9 by Stuart Marks","tags":[{"name":"java","slug":"java","permalink":"https://haldir65.github.io/tags/java/"}]},{"title":"在ubuntu服务器上部署web app","date":"2017-06-25T22:46:23.000Z","path":"2017/06/25/2017-06-25-deploying-flask-app-on-linux-server/","text":"1. virtualenv install123456789101112131415161718sudo pip install virtualenvsudo virtualenv venvsource venv/bin/activatesudo pip install Flask# sudo python __init__.pysudo /var/www/FlaskApp/FlaskApp/venv/bin/python2 __init__.pydeactivate # exitWindows环境下安装virtualenv类似在pycharm的cmd窗口中，执行pip install virtualenvvirtualenv env #会生成一个新的ENV文件夹cd env /Scriptsactivate.bat # 此时光标变成(env) &gt;.退出很简单deactivate.bat即可 2. install apache2 , mysql-server… on ubuntu重启apache2服务 service apache2 restart 3. Deploying node app on ubuntu(backgroud)三种方法 nohup node /home/zhoujie/ops/app.js &amp; ## nohup就是不挂起的意思( no hang up)。 ignoring input and appending output to nohup.out // 输出被写入当前目录下的nohup.out文件中 screen ## 新开一个screen pm2npm install -g pm2pm2 start app.js Configure Nginx as a web server and reverse proxy for Nodejs application on AWS Ubuntu 16.04 server Reference how-to-deploy-a-flask-application-on-an-ubuntu-vps","tags":[{"name":"python","slug":"python","permalink":"https://haldir65.github.io/tags/python/"}]},{"title":"linux常用命令扩展","date":"2017-06-18T16:51:49.000Z","path":"2017/06/18/2017-06-18-linux-commands-extended/","text":"一些linux的常用命令，linux环境下运行server ,bash的语法 速查 清理大文件 1. 常用软件安装utorrentapache,mysql没事不要手贱升级软件 apt-get -u upgrade //就像这样，stable挺好的 2. 环境变量怎么改平时在shell中输入sudo XXX ,系统是如何知道怎么执行这条指令的呢。首先，可以查看which XXX ，用于查找某项指令对应的文件的位置。而像sudo这种都放在PATH位置，系统会在几个关键位置查找sudo命令。用户本身完全可以创建一个叫做sudo的文件chmod+X ，然后运行这个sudo。123456789101112查看PATH : echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games (注意，系统是按照这个顺序找的，如果在第一个目录下找到一个叫sudo的东西，就会直接执行了，所以这里是有潜在的危险的)看下哪个命令对应的位置在哪里which XXXk比如sudo 就放在 /usr/bin/sudo $PATH环境变量修改在~./bashrc或者 ~./profile里面具体来说，比如要把/etc/apache/bin目录添加到PATH中PATH=$PATH:/etc/apache/bin #只对本次会话有效或者 PATH=$PATH:/etc/apache/bin #在~./bashrc或者~./profile里面添加这句话 比如把facebook 的buck添加到环境变量：1234$ cd ~$ vim ~/.bash_profileexport PATH=$HOME/buck/bin:$PATH$ source ~/.bash_profile ## 立刻生效 顺便说下widnows下怎么看环境变量： echo %path% 3. alias设置查看已经设置过的alias： alias或者 alias -pvi 中输入 /XXX 可以搜索123vi ~/.bashrc ## 这个是对当前用户生效的/etc/bashrc 写到文件这里面是对所有用户生效alias yourcommand='ls -alr' ##添加这一行，原来的命令也照样用 重开session即可生效急着要想马上生效可以source ~/.bashrc ## source命令其实就是执行一个脚本 touch ~/.bash_aliases ## unbuntu建议把所有的alias写到一个 ~/.bash_aliases文件里。保存之后,source ~/.bash_aliases。立即生效 据说alias是可以传参数的，不过加上&gt; /dev/null 2&gt;&amp;1 &amp; 就不行了。所以还是写个script算了。12#!/bin/bashkwrite $1 &gt; /dev/null 2&gt;&amp;1 &amp; 然后chomod 755 fileName 4. pushd和popd（类似于文件夹stack）5. linux删除垃圾文件（小硬盘linux磁盘要经常清理需要的命令）IBM给出了删除一些垃圾文件的建议使用 Linux 命令删除垃圾文件 sudo apt-get autoclean 清理旧版本的软件缓存sudo apt-get clean 清理所有软件缓存sudo apt-get autoremove 删除系统不再使用的孤立软件 autoremove有时候会报错： The link /initrd.img.old is a damaged linkRemoving symbolic link initrd.img.old you may need to re-run your boot loader[grub] 根据askubuntu的解答，不用管 &gt;du –max-depth=1 -h # 查看当前路径下所有文件/文件夹的大小du -k –max-depth=2 | sort -rn # 加上排序find / -name core -print -exec rm -rf {} \\; //分号也要，亲测find / -size +100M：列出所有大于100M的文件，亲测。靠着这个找到了shadowsocks的日志文件,170MB 删除/boot分区不需要的内核先df -h看/boot分区使用情况；然后 dpkg –get-selections|grep linux-image ;查看当前使用的内核 uname -a ;清理不用的内核 sudo apt-get purge linux-image-3.13.0-24-generic （注意，不要删正在使用的内核）删除不要的内核文件首先看下 uname- adpkg –get-selections|grep linux //查找所有的文件，有image的就是内核文件sudo apt-get remove 内核文件名 （例如：linux-image-4.4.0-92-generic） /var/log/btmp 这个文件是记录错误登录的日志，如果开放22端口的话，用不了多久这个文件就会变得很大系统 /var/log 下面的文件：btmp, wtmp, utmp 等都是二进制文件，是不可以使用 tail 命令来读取的，这样会导致终端出错。一般使用 last 系列命令来读取，如 last, lastb, lastlog。 一个目录下按照文件大小排序 ls -Sralh ## 亲测，从小到大排序出来加上-S参数，就可以根据文件的大小进行排序，默认是从大到小的顺序。在此基础上加上参数-r变成-Sr，就可以一自小到大的顺序打印出文件。-l参数表示打印出详细信息。 6. AWK文本分析工具 AWK is a language for processing text filesawk was created at Bell labs released in 1977Named after Alfred Aho, Peter Weinberger,and Brain KernighanTAPL= The AWK Programming Language awk ‘{print $0}’ /etc/passwd # 和cat差不多，显示文本内容查看恶意IP试图登录次数： lastb | awk ‘{ print $3 }’ | sort | uniq -c | sort -n ## 亲测可用,看上去挺吓人的 awk怎么用Using Linux AWK Utility，一个没有废话的教程，非常好。 drwxr-xr-x 3 root root 4096 Mar 14 2017 ufw-rw-r–r– 1 root root 338 Nov 18 2014 updatedb.confdrwxr-xr-x 3 root root 4096 Aug 30 03:53 update-managerdrwxr-xr-x 2 root root 4096 Aug 30 03:53 update-motd.ddrwxr-xr-x 2 root root 4096 Mar 14 2017 update-notifierdrwxr-xr-x 2 root root 4096 Mar 14 2017 vimdrwxr-xr-x 3 root root 4096 Mar 14 2017 vmware-toolslrwxrwxrwx 1 root root 23 Mar 14 2017 vtrgb -&gt; /etc/alternatives/vtrgb-rw-r–r– 1 root root 4942 Jun 14 2016 wgetrcdrwxr-xr-x 5 root root 4096 Mar 14 2017 X11drwxr-xr-x 3 root root 4096 Mar 14 2017 xdgdrwxr-xr-x 2 root root 4096 Mar 14 2017 xml-rw-r–r– 1 root root 477 Jul 19 2015 zsh_command_not_found 假设你面对一个这样的文件test.txtprint 每一行 : awk ‘{ print }’ test.txtprint第一行 ： awk ‘{ print $1 }’ test.txtprint第二行: awk ‘{ print $2 }’ test.txtprint第一行和第二行 awk ‘{ print $1,$2 }’ test.txtprint第一行和第二行中间不带空格 awk ‘{ print $1$2 }’ test.txtprint包含’test’的行 awk ‘/test/ { print } test.txt’print第二行包含’test’的行 awk ‘{if(2 ~ /test/) print }’ test.txtawk ‘/[a-z]/ { print }’ test.txt //包含a-z任一字母的awk ‘/[0-8]/ { print }’ test.txt // 包含0-8任一数字的awk ‘/^[0-8]/ { print }’ test.txt // 以0-8任一数字开头的awk ‘/[0-8]$/ { print }’ test.txt //以0-8任一数字结尾的 和管道结合的：grep -i test test.txt | awk ‘/[0-9]/ { print }’-i表示case insensitive,大小写都算.然后找出其中包含数字的。 7.tar命令主要是跟压缩和解压文件有关的,参考123tar -cvf log.tar log2012.log 仅打包，不压缩！tar -zcvf log.tar.gz log2012.log 打包后，以 gzip 压缩tar -jcvf log.tar.bz2 log2012.log 打包后，以 bzip2 压缩 对照手册来看：-c //小写的c，–create，表示创建新的备份文件-v //verbose,显示进度什么的-f 指定备份文件-z –gzip，通过gzip压缩或者解压文件 8.定时任务怎么写(crontab)已经有网站把各种常用的example写出来了，直接照抄就是后面跟上需要的命令，例如重启就是 /sbin/reboot 9. 查找相关(grep,find)在文件中查找字符串，不区分大小写 grep -i “sometext” filenname在一个文件夹里面的所有文件中递归查找含有特定字符串的文件 grep -r “sometext” * Linux 中 grep 命令的 12 个实践例子 find根据文件名查找文件12- find -name *.config #在当前目录下查找- find / -name finename # 在根目录下查找filename的文件(&quot;filename&quot;用双引号包起来) 10.已安装的软件 sudo dpkg -l 11.Ping一个主机 ping -c 5 gmail.com #只发送5次 12.Wget下载文件 wget url下载文件并以指定的文件名保存下来 wget -0 filename url 13.查看文件的时候显示行号cat -n rsyslog.conf # 显示行号，报错的时候方便处理-n 显示行号（包括空行）-b 显示行号（不包括空行） 14.统计文件夹下特定文件类型的数目 ls -l |grep “^-“|wc -l ##统计某文件夹下文件的个数 ls -l |grep “^ｄ”|wc -l ##统计当前目录中文件夹的数量 ls -lR|grep “^-“|wc -l ##递归一层层往下找的话，加上一个R就可以了统计某个目录下的所有js文件： ls -lR /home/user|grep js|wc -l ls -alh ## 亲测，可以显示当前目录下各个文件的大小 15. curl命令写shell脚本可能会用到网络交互，curl可以发起网络请求，下载文件，上传文件，cookie处理，断点续传，分段下载,ftp下载文件随便写两个： curl -o home.html http://www.baidu.com #把百度首页抓下来，写到home.html中 curl -d “user=nick&amp;password=12345” http://www.xxx.com/login.jsp # 提交表单，发起POST请求记得http statusCode 302是重定向什么 ： curl -v mail.qq.com输出：1234567891011121314151617181920curl -v mail.qq.com* Rebuilt URL to: mail.qq.com/* Trying 103.7.30.100...* Connected to mail.qq.com (103.7.30.100) port 80 (#0)&gt; GET / HTTP/1.1&gt; Host: mail.qq.com&gt; User-Agent: curl/7.47.0&gt; Accept: */*&gt;&lt; HTTP/1.1 302 Found&lt; Server: TWS&lt; Connection: close&lt; Date: Sun, 19 Nov 2017 09:19:46 GMT&lt; Content-Type: text/html; charset=GB18030&lt; Location: https://mail.qq.com/cgi-bin/loginpage&lt; Content-Security-Policy: referrer origin; script-src &apos;self&apos; https://hm.baidu.com http://hm.baidu.com *.google-analytics.com http://mat1.gtimg.com https://mat1.gtimg.com http://*.soso.com https://*.soso.com http://*.qq.com https://*.qq.com http://*.qqmail.com https://*.qqmail.com http://pub.idqqimg.com blob: &apos;unsafe-inline&apos; &apos;unsafe-eval&apos;; report-uri https://mail.qq.com/cgi-bin/report_cgi?r_subtype=csp&amp;nocheck=false&lt; Referrer-Policy: origin&lt; Content-Length: 0&lt;* Closing connection 0 http 302的意思也就说明qq邮箱已经把http重定向到别的地方的 16. 搭建samba服务器这个主要是用来从windows上访问linux主机上的文件的 sudo apt-get install samba剩下的就是设定要分享的目录，给权限，设定访问密码，启动服务这些了教程 17. tee命令 echo $(date) | tee -a date.logtee命令能够吧程序的输出输出到stdo,同时还能将输出写进文件(-a 表示append，否则就是覆盖) 18. missing argument to `-exec’123find /u03 -name server.xml -exec grep '9080' &#123;&#125;\\;find . -type f -exec ls -l &#123;&#125; \\; ## exec执行删除之前最好先打印出来，避免删错了find . -type f -mtime +14 -exec rm &#123;&#125; \\; exec是和find一起使用的，分号是要执行的命令的终止标志，前面得加上斜杠。简单来说，就是把exec前面的结果执行某项操作，语法上，大括号不能少，反斜杠不能少，分号不能少感觉exec和find 命令的xargs差不多xargs命令exec命令 19. sort命令sort命令排序什么的123ls -al | sort -n ## 按照文件名ASCII码值进行比较ls -al | sort -rn ## 按照文件名倒序排序du -hsBM ./* | sort -n ##查看当前目录下所有文件，从小到大排序 -u(unique)是忽略相同行，查找登录记录的时候有用-t 指定按照栏和栏之间的分隔符 20. history命令1234history ## 列出曾经执行过的命令!99 ##执行上面列表中第99条命令!! ##执行上一条命令history 10 ##列出最近执行的10条命令 21. 使用sshKeyGen免密码登录的方式首先在windows上安装putty，默认会装上puttyGen。在开始菜单里面总归能找到。点击那个generate按钮，按照提示鼠标不停挪动，进度条走完。会生成公钥，点击Save private key生成私钥。提示保存在一个文件中，这个要保存好。暂时不要关闭puttygen,需要直接去复制粘贴那个public key(因为要是生成了一个public key，由于windows的原因，中间可能存在换行，就得在文本编辑器里面删掉所有的换行符，非常麻烦)密码登录到服务器端，cd到~/.ssh/文件夹下，没有就mkdir一个，创建一个authorized_keys的文件，要是本来就有，echo &gt; autorized_keys，把内容清除干净。把自己刚才生成的public key粘贴进去，保存文件。看下/etc/ssh/sshd_config中是否符合如下描述如下条件123RSAAuthentication yesPubkeyAuthentication yesPermitRootLogin yes 还要给权限chmod 700 ~/.ssh &amp;&amp; chmod 600 ~/.ssh/authorized_keys重启ssh服务： service sshd restartputty登录窗口左侧有一个loggin-auth，进去选择自己windows上刚才保存的私钥文件。登录输入账户名即可自动登录成功。PUTTYGEN - KEY GENERATOR FOR PUTTY ON WINDOWS有什么问题的话看这个 22.iptables命令用防火墙屏蔽掉指定ip 12345678910111213141516171819202122iptables -L -n ## 查看已添加的iptables规则清除已有iptables规则iptables -Fiptables -Xiptables -Z#允许所有本机向外的访问iptables -A OUTPUT -j ACCEPT# 允许访问22端口iptables -A INPUT -p tcp --dport 22 -j ACCEPT#允许访问80端口iptables -A INPUT -p tcp --dport 80 -j ACCEPT#允许访问443端口iptables -A INPUT -p tcp --dport 443 -j ACCEPT#允许FTP服务的21和20端口iptables -A INPUT -p tcp --dport 21 -j ACCEPTiptables -A INPUT -p tcp --dport 20 -j ACCEPT#如果有其他端口的话，规则也类似，稍微修改上述语句就行#允许pingiptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT#禁止其他未允许的规则访问iptables -A INPUT -j REJECT #（注意：如果22端口未加入允许规则，SSH链接会直接断开。）iptables -A FORWARD -j REJECT 注意还需要将上述规则添加到开机启动中，还有使用iptables屏蔽来自某个国家的IP的教程 23. 变量($其实就是美元符号了)变量调用符号($)123456789101112131415161718LI=date$LI ### Tue Dec 5 04:06:18 EST 2017# 所以经常会有这样的脚本# Check if user is rootif [ $(id -u) != \"0\" ]; then echo \" Not the root user! Try using sudo Command ! \" exit 1fiecho \"Pass the test! You are the root user!\"## 亲测下面这种可用户if [ `whoami` = \"root\" ];then echo \"root用户！\" else echo \"非root用户！\" fi 变量分为用户自定义的和环境变量（其实就是系统预设的）,有些区别 用户自定义变量只在当前的shell中生效，环境变量在当前shell和这个shell的所有子shell中生效。环境变量是全局变量，用户自定义变量是局部变量。对系统生效的环境变量名和变量作用是固定的。 常用的环境变量 HOSTNAME：主机名SHELL：当前的shellTREM：终端环境HISTSIZE：历史命令条数SSH_CLIENT：当前操作环境是用ssh链接的，这里记录客户端的ipSSH_TTY：ssh连接的终端是pts/1USER:当前登录的用户 12345echo $HOSTNAME## unbutu$? 最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值非0（具体是哪个数，由命令自己决定），则证明上一个命令执行不正确了。$$ 当前进程的进程号（PID）$! 后台运行的最后一个进程的进程号（PID） 24. Linux软件安装目录惯例转载自。一般特定文件夹里放什么东西是有惯例的。cd到根目录下长这样drwxr-xr-x 26 root root 4096 Jan 26 10:08 .drwxr-xr-x 26 root root 4096 Jan 26 10:08 ..drwxr-xr-x 2 root root 12288 Jan 5 22:52 bin ##sbin和bin一样，存executable programsdrwxr-xr-x 4 root root 3072 Jan 26 10:08 bootdrwxr-xr-x 18 root root 4060 Feb 3 17:00 devdrwxr-xr-x 109 root root 4096 Feb 4 04:18 etc ##configuration files , 比如passwddrwxr-xr-x 3 root root 4096 Aug 6 05:42 home ##所有用户的home directorydrwxr-xr-x 22 root root 4096 Jan 5 22:53 lib ## 系统用的common librarydrwxr-xr-x 2 root root 4096 Jan 19 06:30 lib64 ##drwx—— 2 root root 16384 Mar 14 2017 lost+founddrwxr-xr-x 3 root root 4096 Mar 14 2017 mediadrwxr-xr-x 2 root root 4096 Feb 15 2017 mnt ##temp file systems are attached like cd rom or usb drive(就当优盘好了)drwxr-xr-x 2 root root 4096 Feb 15 2017 optdr-xr-xr-x 130 root root 0 Feb 3 17:00 proc ##这个念procedure, 代表virtual file system stores kernel info，知道为什么看cpu型号要cat /proc了吧drwx—— 6 root root 4096 Dec 21 02:16 root ##root account的根目录drwxr-xr-x 25 root root 940 Feb 4 08:07 rundrwxr-xr-x 2 root root 12288 Jan 19 06:30 sbin ##sbin和bin一样，存executable programs,s代表essential system binarydrwxr-xr-x 2 root root 4096 Jan 14 2017 snapdrwxr-xr-x 2 root root 4096 Feb 15 2017 srvdr-xr-xr-x 13 root root 0 Feb 4 08:08 sysdrwxrwxrwt 9 root root 4096 Feb 4 08:05 tmp ## contain temporary data,注意，该目录下文件重启后被eraseddrwxr-xr-x 11 root root 4096 Dec 10 01:04 usr ##这里面有bin man sbin等目录，存放user program and other data(并不是user，而是universal system resources)drwxr-xr-x 14 root root 4096 Dec 10 22:21 var ## 全称variable，存放variable data where system must be able to write during operation(就是log) /usr：系统级的目录，可以理解为C:/Windows/，/usr/lib理解为C:/Windows/System32。/usr/local：用户级的程序目录，可以理解为C:/Progrem Files/。用户自己编译的软件默认会安装到这个目录下。/opt：用户级的程序目录，可以理解为D:/Software，opt有可选的意思，这里可以用于放置第三方大型软件（或游戏），当你不需要时，直接rm -rf掉即可。在硬盘容量不够时，也可将/opt单独挂载到其他磁盘上使用。 /usr/src：系统级的源码目录。/usr/local/src：用户级的源码目录。 各个目录youtube-dl的安装途径就是下一个软件下来，然后chmod给权限，然后/usr/local/bin/youtube-dl和直接敲youtube-dl是一个命令。好像放在这个目录下面就好了。关于这些目录的解释/bin是系统的一些指令。bin为binary的简写；/sbin一般是指超级用户指令。就是只有管理员才能执行的命令/usr/bin：通常是一些非必要的，但是普通用户和超级用户都可能使用到的命令/usr/local/bin：通常是用户后来安装的软件，可能被普通用户或超级用户使用 /var：某些大文件的溢出 区，比方说各种服务的日志文件。/usr：最庞大的目录，要用 到的应用程序和文件几乎都在这个目录。/usr/local: 本地安装的程序和其他东西在/usr/local下一份比较全面的Linux 下各文件夹的结构说明及用途介绍 25. 一个往dropBox上传文件的Scriptdropbox的网盘空间不用感觉有点浪费了，一个将本地文件上传到dropBox的脚本Dropbox-Uploader亲测可用，也不是一个需要启动时跑起来的程序，就是一个给参数就上传的脚本。1./dropbox_uploader.sh upload /localFileOrDir /dropBoxFileOrDir 26. fuser显示当前文件正在被哪些进程使用fuser -m -u redis-server 27. 一些看上去比较玄的操作1bash &lt;(curl -s https://codecov.io/bash) ##重定向还有这么玩的 Mere trashLINUX下的21个特殊符号Shell学习笔记gdb调试器,debug用的chsh命令 1youtube-dl -o '%(title)s.%(ext)s' https://www.youtube.com/watch?v=rimXGaUdaLg 文件描述符限制 ls -al = l -al（可以少敲一个字母,其实是alias） small tricks12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455cat &gt; filename.txtthen start typing your text contentctrl +d to finishpushd and popd can help you jump to some directory can come back latergdebi ## like dpkg command , will install required dependency if neededcpulimit command ##limit the cpu usage to certain processhtop中按f4可以filter，按f9可以杀进程。 按下空格键可以选中某个process（用于多选）bleachbit可以帮助清理垃圾rsync用于做系统备份rsync -avz --delete Pictures/ 192.168.0.10:Pictures/ ## a表示archive，就是说保留源文件的permission,timestamp等等， v表示verbose, z表示zip(就像gzip一样，通过网络传输的时候能够节省流量),记得Pictures后面的斜杠不能少ubuntu上使用sudo xxx ，输入密码后，下次sudo就不会再次要求密码了，但其实系统会起一个倒计时，如果接下来的30分钟（大概这个时间）内没有执行sudo命令，将会再次提示要求输入密码解决方法sudo -s // 即后续sudo指令不需要秘密打开tty的方法: ctrl + alt + (f1-f8)sfpt cindy@192.168.0.2 ##以cindy的身份登录这台机器## bash的窗口在等待输入的时候一般张这样:john@server ~ $john表示当前用户名称sever表示当前主机名称~表示当前所在目录$表示没有特殊权限，就是说不是root previledge的意思### 下面这三个要跟ctrl+z一起用bg ##看之前按ctrl+z退到后台的程序jobs ##查看当前在跑的程序fg job name ##把这个程序拉到前台比方说当前目录下有一个dump.sh文件，想要执行的话，输入dump是没有用的。因为echo $PATH中并没有这个dump:目录/dusp.sh。所以要执行这个sh，需要./dump.sh或者建一个symbolic link到 /usr/local/bin下面，比如这样sudo ln -s /full/path/to/your/file /usr/local/bin/name_of_new_command想要可执行的话，记得给权限。chmod +x /full/path/to/your/file当然，想要移除这个软链接的话.sudo rm -rf /usr/local/bin/name_of_new_commandvisudo //via sudo 这是一个控制用户权限的文件，比如说希望给特定用户一部分usdo特权，比如只给安装软件的权利，编辑这个文件就可以为什么不要总以root权限做事:sudo rm -rf /etc/dummyfile ## 看上去oksudo rm -rf / etc/dummyfile ## 不小心多了个空格，系统并不会拦着你，这样就删掉了所有的文件raspberry Pi使用的是Raspbian -- 基于debian查看内存除了free 和htop之外sudo sh -c \"sync; echo 3 &gt; /proc/sys/vm/drop_caches\" ## 就是用sh执行一个command, 即dump memory cache，类似于windows上360那个点击清内存sudo bash -c \"echo 'vm.swappiness =15' &gt;&gt; /etc/sysctl.conf\" ## -c表示让bash执行一个命令， swappiness默认值是60，意思是系统在用掉了60%的内存后就将开始启用swap linux的swap文件需要经常读写，这对于ssd来说是一个需要注意的地方 unix domain socket用于ipc 装java装JenkinsCould not find or load main class的问题 参考 每天一个Linux命令 Linux命令大全 awk是三个人的名字 树莓派搭建局域网媒体服务器，下载机 Linux中国","tags":[{"name":"linux","slug":"linux","permalink":"https://haldir65.github.io/tags/linux/"}]},{"title":"For those tiny details in Java","date":"2017-06-17T21:24:48.000Z","path":"2017/06/17/2017-06-17-tiny-details-in-java/","text":"interesting stuff in java that don’t seem to get enough pubilicity 1. getting the concreate class from generic types12345678910111213141516 /** * Make a GET request and return a parsed object from JSON. * * @param url URL of the request to make * @param clazz Relevant class object, for Gson's reflection * @param headers Map of request headers */ public GenericMoshiRequest(String url, @Nullable Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers, Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener) &#123; super(Method.GET, url, errorListener);// this.clazz = clazz; Class&lt;T&gt; entityClass = (Class&lt;T&gt;) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];//使用反射获得泛型对应class this.clazz = entityClass; this.headers = headers; this.listener = listener; &#125; 2. OkHttp 默认会自动重试失败的请求okhttp-is-quietly-retrying-requests-is-your-api-readyOkHttp默认会对请求进行重试，具体是在RetryAndFollowUpInterceptor中进行的。 12345678910111213141516171819202122232425262728293031323334353637383940414243 RetryAndFollowUpInterceptor.java@Override public Response intercept(Chain chain) throws IOException &#123; Request request = chain.request(); streamAllocation = new StreamAllocation( client.connectionPool(), createAddress(request.url()), callStackTrace); int followUpCount = 0; Response priorResponse = null; while (true) &#123; # 不停的尝试 if (canceled) &#123; streamAllocation.release(); throw new IOException(\"Canceled\"); &#125; Response response = null; boolean releaseConnection = true; try &#123; response = ((RealInterceptorChain) chain).proceed(request, streamAllocation, null, null); releaseConnection = false; //默认不认可response成功 &#125; catch (RouteException e) &#123; // The attempt to connect via a route failed. The request will not have been sent. if (!recover(e.getLastConnectException(), false, request)) &#123; throw e.getLastConnectException(); &#125; releaseConnection = false; continue; //继续尝试 &#125; catch (IOException e) &#123; // An attempt to communicate with a server failed. The request may have been sent. boolean requestSendStarted = !(e instanceof ConnectionShutdownException); if (!recover(e, requestSendStarted, request)) throw e; releaseConnection = false; continue; //继续尝试 &#125; finally &#123; // We're throwing an unchecked exception. Release any resources. if (releaseConnection) &#123; //出现不可预料的错误，释放硬件资源，端口什么的 streamAllocation.streamFailed(null); streamAllocation.release(); &#125; &#125; &#125;&#125; 客户端当然可以使用retryOnConnectionFailure禁止这种自动重试策略，但不建议这么做。另外，为避免减少不必要的重试请求，OkHttp 3.3.0 issue Don’t recover if we encounter a read timeout after sending the request, but do recover if we encounter a timeout building a connection建立连接超时可以重试(客户端到服务器的通道不可靠，当然可以重试)，连接上之后读取超时则不去重试(服务器出了问题，没有必要重试)。 另外，GET方法本身是人畜无害的，Retry请求多次发起不会造成数据错误；但对于POST，涉及到写服务端写操作，最好带上GUID作为单次请求unique标示。（这是server和client之间需要协商好的protocol） 3. From Java Code To Java Heap A talk from IBM Engineer, talking about optimizing the memery usage for your java application.youtube ibm 4. 强行更改String的内容 String这种东西是放在常量池里面的，所以 1234567891011121314String a = \"hello\"String b = \"hello\"String c = new String(\"Hello\")显然ab都指向了常量池，c指向了放在堆上的对象，后者也指向常量池a==b!=c //更改这个String里面的东西Field a_ = String.class.getDeclaredField(\"value\"); a_.setAccessible(true); char[] value=(char[])a_.get(a); value[3]='_'; //修改a所指向的值这样a,b,c 的值都改掉了 5. 注解1234567Builder(Retrofit retrofit, Method method) &#123; this.retrofit = retrofit; this.method = method; this.methodAnnotations = method.getAnnotations(); this.parameterTypes = method.getGenericParameterTypes(); this.parameterAnnotationsArray = method.getParameterAnnotations(); &#125; 如果不是看到Retrofit的源码，一般还真没机会了解到这几个方法。。 6. java如何把char类型数据转成int类型数据String a = “123”Stirng本质上就是一个char[]的包装类，1对应Asicii码的49,2对应50,3对应51.所以实质上就类似于char[] = new char{49,50,51} ; 想把1,2,3分别拿出来得这么写：1234char[] array = a.tocharArray();for(i=0;i&lt;=array.length();i++)&#123; int a = Integer.parseInt(String.valueof(array.charAt(i)));//这样就能分别把1,2,3拿出来了。&#125; 根据stackoverFlow的解释, char只是16bit的数字，也就是int（4个字节,32位）的子集。 1234char word = 'A' +1234 ;//编译通过char word2 = 'A';word2 = word2 +1 ;//编译失败 char的转换问题 7. Guava就是个Util8. 从ArrayList的ConcurrentModificationException说起ArrayList的ConcurrentModificationException一般在使用Iterator的时候会抛出，普通的get，set不会。 12345678910111213141516private class Itr implements Iterator&lt;E&gt; &#123; int cursor; // index of next element to return int lastRet = -1; // index of last element returned; -1 if no such int expectedModCount = modCount; //简单的三个成员变量，cursor会在外部调用next方法时自增1，在 // lastRet 会在调用next时候设置为next方法返回的Value的index，在remove时设置为-1 &#125; //Itr的next 方法只是返回了array[cursor],cursor是从0开始的。 // Itr的remove方法调用了ArrayList的remove方法（modeCount++），expectedModCount设置为modCount // 之所以调用Iterator一边迭代一边删除，一方法是hasNext方法检测了当前index不会超出数组大小。另外在remove的时候会将当前Iterator的预期下一个操作位置cursor设置为上一次操作的位置（remove里面还有一个arrayCopy）。 final void checkForComodification() &#123; if (modCount != expectedModCount) throw new ConcurrentModificationException(); &#125; 假定开了十条线程，每条线程都调用ArrayList的ListIterator，各自得到一个new Itr的实例。而这些Itr的modecount都是从这一个ArrayList拿的，expectedModCount则是各自保存的。一个原则就是，对于这个集合结构性的更改，同时只能有一条线程来做。每条线程的expectedModCount都会在调用ArrayList的remove方法之后被赋值为ArrayList的modCount。next和remove方法开头都调用了这个checkForComodification。就在于next会因为其他线程的结构性更改抛出IndexOutOfBoundsException，但实际上问题并不出在next方法取错了index。同理，remove方法调用的是可能抛出IndexOutOfBoundsException的ArrayList的remove方法，但实际问题并不出在remove传错了对象。Itr本身保存的index是正确的，只是外部环境的变更使得这些index存在多线程条件下的不可靠性。即迭代器对象实例保持了一些对于外界环境的预期，而并发条件下对于集合的结构性更改使得这些必要的预测信息变得不可靠。 ListIterator和Iterator(next,hasNext以及remove)和两个接口，前者在后者的基础上加了一些方法(add,set,remove等方法). 改成CopyOnWriteArrayList为什么就不会崩了： 1234567static final class COWIterator&lt;E&gt; implements ListIterator&lt;E&gt; &#123; /** Snapshot of the array */ private final Object[] snapshot; /** Index of element to be returned by subsequent call to next. */ private int cursor; &#125; 没有了expectedModCount，成员变量就这俩。CopyOnWriteArrayList直接实现List，写操作都用ReentrantLock锁上了，即同时只能有一条线程进行写操作，get没有加锁。private transient volatile Object[] array;注意保存数据的array是volatile的，任何一条线程写的操作都会被所有的读取线程看到(skip了cpu缓存)，set的时候，以set为例：123456789101112131415161718192021public E set(int index, E element) &#123; final ReentrantLock lock = this.lock; lock.lock(); try &#123; Object[] elements = getArray(); E oldValue = get(elements, index); if (oldValue != element) &#123; int len = elements.length; Object[] newElements = Arrays.copyOf(elements, len); //即CopyOnWrite newElements[index] = element; setArray(newElements); &#125; else &#123; // Not quite a no-op; ensures volatile write semantics setArray(elements); &#125; return oldValue; &#125; finally &#123; lock.unlock(); &#125; &#125; CopyOnWriteArrayList内部ListIterator直接保存了一份final的之前Array的snapShot，由于是volatile，任何读操作都能读取到实时的array数据。所谓读取是安全的是指读的时候始终读到的是最实时的信息，这个通过volatile 就能保证。写入由于加锁了，所以也是线程安全的。 9.float和long这些相互除法，会出现精确度损失6.8040496E7*100/68040488f 会出现1.000001这种东西 10. int居然还可以这么写 int a = 5_372_4323; 下划线只是为了具有更好的可读性，added in java 7 11.java nio是java1.4引入的适合连接数高的并发处理1.nio做了内存映射，少了一次用户空间和系统空间之间的拷贝2.nio是异步，触发式的响应，非阻塞式的响应，充分利用了系统资源，主要是cpu 12.微观(macro)层面的性能要点12345678910 List&lt;String&gt; list = new ArrayList&lt;&gt;(); for (int i = 0; i &lt; list.size(); i++) &#123; //do stuff &#125;//下面这种才是正确的方法 List&lt;String&gt; list = new ArrayList&lt;&gt;(); for (int i = 0,size = list.size(); i&lt;size; i++) &#123; //do stuff &#125; 在字节码层面，list.size是通过invokeInterface实现的，这个过程实际上需要根据”size（）”这个方法名称计算出对应的hash值，然后去方法区缓存里面查找这个方法的对应实现。hash计算一次无所谓，计算多次总归比计算一次要浪费时间。 13. inline Function编译器层面做的优化inline。主要是省去不必要的一次函数调用 14.json解析器推荐报出的错误稍微看下还是能懂的例如：gson-throwing-expected-begin-object-but-was-begin-array 问题就在于，String形式的json没问题，自己这边写的对应映射class结构写错了，一个变量其实是object，自己在class里面写成了array(list).一般的解析器会allocate一大堆String然后丢掉，moshi会根据binary data做好cache，每一个key只会创建一次。所以速度很快。这一点jake Wharton和Jesse Wilson在一次会议上提到过.另外，jsonArray的String长这样”[{},{}]”,jsonObject的String长这样”{key1:value1,key2:value2}”. 经常会不确定。 15. Collections.unmodifiableList的出现是有道理的还记得Arrays.asList返回的并不是java.util.ArrayList。并不支持add,remove(丢unSupportedOperationException).但支持set,get。为了把List变成彻底只读的，就得用Collections的这个方法。原理上就是在get和set里面也丢异常出来。 16. 单例模式，双重锁检查单例模式怎么写，一般的答案就是双重检查12345678910111213class Foo &#123; private Helper helper; public Helper getHelper() &#123; if (helper == null) &#123; synchronized(this) &#123; if (helper == null) &#123; //可能指针不为空，但指向的对象还未实例化完成 helper = new Helper(); &#125; &#125; &#125; return helper; &#125;&#125; 除非在单例前面加上volatile，否则上述单例模式并不安全。infoQ也有解释正确答案参考知乎答案:知乎用户 是因为指令重排造成的。直接原因也就是 初始化一个对象并使一个引用指向他 这个过程不是原子的。导致了可能会出现引用指向了对象并未初始化好的那块堆内存，使用volatile修饰对象引用，防止重排序即可解决。推荐使用内部静态类做延时初始化，更合适，更可靠。这个同步过程由JVM实现了。 17.函数的执行顺序，由此带来的性能影响123Log.Debug(\"list is \"+list) //传一个list进去，list的长度未知其实应该改为Log.debug(() -&gt; \"list is\"+list) //这个方法接受一个Supplier&lt;String&gt; 区别在于，前者无论是否DEBUG都会去创建一个String，后者只是提供了如何创建String的思路，并没有真的创建。 18.inline的解释这种说辞更多见于C或者C++,java里面，例如12345String s = &quot;someThing&quot;;System.out.println(s.length())//可以改成System.out.println(&quot;something&quot;.length()) // 这就叫inline，没必要多创建一根指针出来 一种说法是，一个method只被用了一次，完全没必要声明这个method，vm调用method需要invokestatic或者invokeInterface,提取出来省掉这部分消耗。据说有些vm可以自动做好这部分优化。 19. for loop的写法1234int i = 0;for (; i &lt; 10; i++) &#123; // do stuff here&#125; 这么写也是可以的，其实很像1for (;;) &#123;&#125; 解释,这跟while(true)是一样的。 java7的enhanced for loop只是一个syntax sugar:1234567List&lt;String&gt; somelist = new ArrayList&lt;&gt;();//右边只有两个&lt;&gt;是jdk7出现的diamond operator。for (Iterator&lt;String&gt; i = someList.iterator(); i.hasNext();) &#123; String item = i.next(); System.out.println(item);&#125;//由于实在是一样的东西，intellij idea里面会变黄色，提醒 replace with for each// debug 一下确实发现 hasNext和next方法在每一个循环都被调用了 20. 关于泛型一般泛型要这么写： class A 或者class B 实际上IDE不在乎选择了什么字母，所以可以这么写： class A 这样写完全没问题 21.子类和父类的关系子类里面写一个和父类一样名字的变量，会把父类protected变量的值冲刷掉；12345678910111213141516171819202122232425262728293031323334353637383940414243public class FatherClass &#123; protected int mId;&#125;public class ChildClass extends FatherClass &#123; private int mId; public static void main(String[] args) &#123; FatherClass fatherClass = new ChildClass(); fatherClass.mId = 10; System.out.println(fatherClass.mId); //10 ChildClass childClass = (ChildClass) fatherClass; childClass.mId = 20; System.out.println(fatherClass.mId); //10 System.out.println(childClass.mId); //20 &#125;&#125;输出101020换成public class ChildClass extends FatherClass &#123; private int mId; public static void main(String[] args) &#123; ChildClass fatherClass = new ChildClass(); fatherClass.mId = 10; System.out.println(fatherClass.mId); ChildClass childClass = (ChildClass) fatherClass; childClass.mId = 20; System.out.println(fatherClass.mId); System.out.println(childClass.mId); &#125;&#125;输出102020 所基本上就是，把一个对象当成什么class来用，操作的范围就在这个层面造成影响；debug会看见两个变量mId和FatherClass.mId，所以完全是两个int。 调用父类被override的方法，目测只能用super.someMethod() 22.打印出一个方法执行到这里的方法栈 Thread.dumpStack();还有，e.printStakTrace是非常昂贵的 23. try with resource(since jdk 7)Joshua Bloch设计了jdk7中的try with resource特性。在程序开发中，代表资源的对象，一般用完了需要及时释放掉。例如，jdk7之前12345678static String readFirstLineFromFileWithFinallyBlock(String path) throws IOException &#123; BufferedReader br = new BufferedReader(new FileReader(path)); try &#123; return br.readLine(); &#125; finally &#123; if (br != null) br.close(); &#125; &#125; 放在finally里面就是确保资源能够被释放掉jdk7之后12345static String readFirstLineFromFile(String path) throws IOException &#123; try (BufferedReader br = new BufferedReader(new FileReader(path)) &#123; return br.readLine(); &#125; &#125; jdk7添加了AutoCloseable接口，当try语句块运行结束时，BufferReader会被自动关闭。即会自动调用close方法，假如这个close方法抛出异常，异常可以通过Exception.getSuppressed获得，所以这里面的Exception是try语句块里面抛出来的。oracle给出的解释其实跟python很像:12345with open('','wb+') as f: f.read()with urllib.request.urlopen(url) as u: page = u.read() print(len(page)) 会自动完成文件的关闭或者socket的关闭 24. java提供了文件zip功能的接口jdk7开始添加了java.util.zip包。 25. String为什么要设计成final的解释非常多有人猜测Java想用这种方式让String在形式上成为一种基本数据类型，而不是一个普通的类。确实String基本在所有的类中都用到了。 26.从Exploring java’s hidden cost得到的在intellij中，Setting -&gt; Editor -&gt; Inspection -&gt; Synthetic accessor callThe docs explains as these:&gt;This inspection is intended for J2ME and other highly resource constrained environments. Applying the results of this inspection without consideration might have negative effects on code clarity and design.Reports references to non-constant private members of a different class, for which javac will generate a package-private synthetic accessor method.An inner class and its containing class are compiled to separate class files. The Java virtual machine normally prohibits access from a class to private fields and methods of another class. To enable access from an inner class to private members of a containing class or the other way around javac creates a package-private synthetic accessor method. Less use of memory and greater performance may be achieved by making the member package-private, thus allowing direct access without the creation of a synthetic accessor method. There ‘s no actual inner class’ 27. abstract class可以没有抽象方法Why use an abstract class without abstract methods? 28. 一般说map迭代读取的顺序和存进去的顺序是不一样的（有例外）文档是这样说的：LinkedHashMap: “with predictable iteration order […] which is normally the order in which keys were inserted into the map (insertion-order).”HashMap: “makes no guarantees as to the order of the map”TreeMap: “is sorted according to the natural ordering of its keys, or by a Comparator”实际开发中想要有序就用LinkedHashMap。但是123456HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;(10);map.put(\"A\", 1);map.put(\"B\", 2);map.put(\"C\", 3);map.put(\"D\", 4);map.forEach((s, integer) -&gt; System.out.println(\"key = \"+s+\" value is \"+integer)); 实际是有序的，文档是说[no guarantees]。看下源码，其实是在Hashmap算hashcode的时候，String的hashCode比较耿。。。Stuart Mark提到了这一点，并希望开发者不要寄希望于这种edge case。 29. 自动装箱使用不小心会造成NullPointerException参考1234567891011public class Test &#123; public static long test(long value) &#123; return value; &#125; public static void main(String[] args) &#123; Long value = null; // ... test(value); &#125;&#125; 其实重点在于看javap -c 生成的字节码 30. 假如没有override hashCode方法，那么deug里面看到的是什么？12@HotSpotIntrinsicCandidate public native int hashCode();//是一个native方法 默认返回内存中的地址， 31. 接口里面放一个接口这种事情也不是没干过android.content.DialogInterface.java1234567891011121314151617181920212223242526272829303132333435public interface DialogInterface &#123; public static final int BUTTON_POSITIVE = -1; public static final int BUTTON_NEGATIVE = -2; public static final int BUTTON_NEUTRAL = -3; public void cancel(); public void dismiss(); interface OnCancelListener &#123; public void onCancel(DialogInterface dialog); &#125; interface OnDismissListener &#123; public void onDismiss(DialogInterface dialog); &#125; interface OnShowListener &#123; public void onShow(DialogInterface dialog); &#125; interface OnClickListener &#123; public void onClick(DialogInterface dialog, int which); &#125; interface OnMultiChoiceClickListener &#123; public void onClick(DialogInterface dialog, int which, boolean isChecked); &#125; interface OnKeyListener &#123; public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event); &#125;&#125; 接口里面放常量也行啊 32.Stuart Marks又提到了写comparatr时可能出现的错误Comparison Method Violates Its General Contract! (Part 1) by Stuart Marks 33. java也是有二维数组的34. 在运行时得这么拿注解代码出自深入理解Java：注解（Annotation）–注解处理器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152/** * 水果名称注解 * @author peida * */@Target(ElementType.FIELD)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface FruitName &#123; String value() default \"\";&#125;/** * 水果颜色注解 * @author peida * */@Target(ElementType.FIELD)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface FruitColor &#123; /** * 颜色枚举 * @author peida * */ public enum Color&#123; BULE,RED,GREEN&#125;; /** * 颜色属性 * @return */ Color fruitColor() default Color.GREEN;&#125;/** * 水果供应者注解 * @author peida * */@Target(ElementType.FIELD)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface FruitProvider &#123; /** * 供应商编号 * @return */ public int id() default -1; /** * 供应商名称 * @return */ public String name() default \"\"; /** * 供应商地址 * @return */ public String address() default \"\";&#125;/***********注解使用***************/public class Apple &#123; @FruitName(\"Apple\") private String appleName; @FruitColor(fruitColor=Color.RED) private String appleColor; @FruitProvider(id=1,name=\"陕西红富士集团\",address=\"陕西省西安市延安路89号红富士大厦\") private String appleProvider; public void setAppleColor(String appleColor) &#123; this.appleColor = appleColor; &#125; public String getAppleColor() &#123; return appleColor; &#125; public void setAppleName(String appleName) &#123; this.appleName = appleName; &#125; public String getAppleName() &#123; return appleName; &#125; public void setAppleProvider(String appleProvider) &#123; this.appleProvider = appleProvider; &#125; public String getAppleProvider() &#123; return appleProvider; &#125; public void displayName()&#123; System.out.println(\"水果的名字是：苹果\"); &#125;&#125;/***********注解处理器***************/public class FruitInfoUtil &#123; public static void getFruitInfo(Class&lt;?&gt; clazz)&#123; String strFruitName=\" 水果名称：\"; String strFruitColor=\" 水果颜色：\"; String strFruitProvicer=\"供应商信息：\"; Field[] fields = clazz.getDeclaredFields(); for(Field field :fields)&#123; if(field.isAnnotationPresent(FruitName.class))&#123; FruitName fruitName = (FruitName) field.getAnnotation(FruitName.class); strFruitName=strFruitName+fruitName.value(); System.out.println(strFruitName); &#125; else if(field.isAnnotationPresent(FruitColor.class))&#123; FruitColor fruitColor= (FruitColor) field.getAnnotation(FruitColor.class); strFruitColor=strFruitColor+fruitColor.fruitColor().toString(); System.out.println(strFruitColor); &#125; else if(field.isAnnotationPresent(FruitProvider.class))&#123; FruitProvider fruitProvider= (FruitProvider) field.getAnnotation(FruitProvider.class); strFruitProvicer=\" 供应商编号：\"+fruitProvider.id()+\" 供应商名称：\"+fruitProvider.name()+\" 供应商地址：\"+fruitProvider.address(); System.out.println(strFruitProvicer); &#125; &#125; &#125;&#125;/***********输出结果***************/public class FruitRun &#123; /** * @param args */ public static void main(String[] args) &#123; FruitInfoUtil.getFruitInfo(Apple.class); &#125;&#125;==================================== 水果名称：Apple 水果颜色：RED 供应商编号：1 供应商名称：陕西红富士集团 供应商地址：陕西省西安市延安路89号红富士大厦 35 .四舍五入问题，BigDecimal,BigInteger这些基本数据类型中float和double只能用于处理科学运算或者工程计算，商业应用中，需要使用BigDecimal来处理。1234567891011121314151617181920212223System.out.println(0.06 + 0.01);System.out.println(1.0 - 0.42);System.out.println(4.015 * 100);System.out.println(303.1 / 1000);//下面是实际输出，显然是不对的// 0.06999999999999999// 0.5800000000000001// 401.49999999999994// 0.30310000000000004double a = 4887233385.5;double b = 0.85;BigDecimal a1 = new BigDecimal(a);BigDecimal b1 = new BigDecimal(b);System.out.println(\"==============================================================\");System.out.println(a*b);System.out.println(\"result2--&gt;\"+a1.multiply(b1));//result2--&gt;4154148377.674999891481619374022926649558939971029758453369140625无限不循环,其实后面还有System.out.println(\"result2--&gt;\"+a1.multiply(b1).setScale(1, RoundingMode.HALF_UP));System.out.println(\"result2--&gt;\"+a1.multiply(b1).setScale(5, RoundingMode.HALF_UP));System.out.println(\"result2--&gt;\"+a1.multiply(b1).setScale(9, RoundingMode.HALF_UP));System.out.println(\"result2--&gt;\"+a1.multiply(b1).setScale(11, RoundingMode.HALF_UP));System.out.println(\"==============================================================\"); 以下为实际输出 ==============================================================4.1541483776749997E9 //科学计数法在这种场景下几乎没法用（注意默认给出了16位，下面有解释）result2–&gt;4154148377.674999891481619374022926649558939971029758453369140625 //这个是实际值result2–&gt;4154148377.7result2–&gt;4154148377.67500result2–&gt;4154148377.674999891 result2–&gt;4154148377.67499989148实在靠谱的四舍五入 RoundingMode.HALF_EVEN就是把这个小数化为离它最近的偶数RoundingMode.HALF_UP 就是碰到五就往上进一位RoundingMode.HALF_DOWN 就是碰到五就视为0RoundingMode.FLOOR 和Math.floor差不多RoundingMode.CEILING 和Math.ceiling差不多core Library的命名都很易懂 由此引申出：123456System.out.println( 0.9999999f==1f ); // 7个9System.out.println( 0.99999999f==1f ); //8个9System.out.println( 0.999999999f==1f ); // 9个9// false// true// true Java 浮点数 float和double类型的表示范围和精度和整数型是signed的不一样,float和double是unsigned。这32位是怎么分的：1bit（符号位） 8bits（指数位） 23bits（尾数位）（内存中就长这样）double占据64bit。1bit（符号位） 11bits（指数位） 52bits（尾数位）（内存中就长这样） 所以float的指数范围是-128~127 。(2的8次方)double的指数范围为-1024~+1023。再具体点：float的范围为-2^128 ~ +2^127，也即-3.40E+38 ~ +3.40E+38； update : From 3.402,823,5 E+38 to 1.4 E-45(由于是unsigned，这只是正数部分) the correct way: [-3.40E+38,-1.4 E-45 ] &amp;&amp; [1.4 E-45, +3.40E+38] ## 站在十进制的角度来看，是相对于0对称的两个区间。整个实数轴并未完全覆盖。 很多人都说这些最大值最小值不用记，对应的包装类都有常量MIN_VALUE和MAX_VALUE。然而，这个还是有些需要注意的。Float.MIN_VALUE 并不是负数，而是一个0.00000XXX 的小数。一般认为这个常量应该起一个更合适的名字，另外不要把Float.MIN_VALUE和Float.MIN_NORMAL搞混淆；12345678910111213// Floatpublic static final float MIN_NORMAL = 0x1.0p-126f; // 1.17549435E-38f // 这个是2^-126=1.175494350822..(注意小数点后的值就没有了，实在表示不了)public static final float MIN_VALUE = 0x0.000002P-126f; // 1.4e-45f 真正的MIN_VALUE应该是MAX_VALUE的负值public static final float MAX_VALUE = 0x1.fffffeP+127f; // 3.4028235e+38f //这个max倒是起名起的很好 // 怎么算的 拿个计算器算下：2^128 = 3.402823669209...。是不是小数点后第七位就不对了，这个就看上面的23bit了// Doublepublic static final double MAX_VALUE = 0x1.fffffffffffffP+1023; // 1.7976931348623157e+308 //这个确实是最大值public static final double MIN_NORMAL = 0x1.0p-1022; // 2.2250738585072014E-308public static final double MIN_VALUE = 0x0.0000000000001P-1022; // 4.9e-324 -Double.MAX_VALUE才是你能用double表示的最小值Float.MAX_VALUE + 1 == Float.MAX_VALUE // true MIN_VALUE和NIN_NORMAL的区别float和double最终在内存中都是以a^n次方来表示为十进制数值的。以float为例来解释下：float一共32bit，就是32个槽子，第一个拿来表示符号(unsigned)，那还剩下31个，最终要用剩下的31个bit表示出一个科学计数法的Decimal.上面说了，8个用来表示指数，也就是2^8 = 128，也就是指数方面最小是-127，最大是128。也就是说上面那个a^n的n的范围是[-127,128]。根据stackoverFlow的解释，MIN_NORMAL就是二进制小数点前有一个1开头的，MIN_VALUE就是可以用0开头的所以就是23个槽子前22个都放了0，最后一个放了1，也就是十进制的2，算上指数层的-127，也就是2乘以2^-127 = 2^-126，论MIN_NORMAL是怎么来的。还剩下32-1-8 = 23个，用来表示确切的值， 2^23 = 8388608(7个数字，所以7个数字保不准，但6个是有把握的，让7位给指数位吧，把10的-38次方变成10的-45次方)。也就是说上面个a^n的a的范围是[1,8388608]，论MIN_VALUE是怎么来的。 double和float都属于The IEEE 754 format has one bit reserved for the sign and the remaining bits representing the magnitude. double的范围为-2^1024 ~ +2^1023，也即-1.79E+308 ~ +1.79E+308。就这么算出来的。至于float里面那剩下的23位和double里面剩下的52位，是用来表示精度的。 float：2^23 = 8388608，一共七位，由于最左为1的一位省略了，这意味着最多能表示8位数： 2*8388608 = 16777216 。有8位有效数字，但绝对能保证的为7位，也即float的精度为7~8位有效数字；double：2^52 = 4503599627370496，一共16位，同理，double的精度为16~17位。 所以上面出现了小数点后最多16位的double。所以上面的java代码还可以想到：123System.out.println( 0.9999999f==1f ); // 7个9System.out.println( 0.99999999f==1f ); //8个9System.out.println( 0.9999999996666666f==1f ); // 9个9 当一个float小数的小数点后位数超出了8个之后，java就无法用float表示这后面的数字了。应该说一个float数据类型能够保证不损失精度的限制就是有效数字6-7位（6个是准的，7个不好说）。所以上面的第8个9之后写什么都是true的。随手写一个123float aa = 1123456789123456f;float bb = 1123456789123456.1f;System.out.println(aa==bb); // ide自动飚黄，显示always 为true 不要以为自己真的想要多少就有多少，float后面最多使用8位有效数字，double最多能表示16位有效数字。为什么，数学这么说的。这么说吧，从整个数轴来看，整个数轴最左边和最右边都是接触不到的。另外，0左右各有一小块宽度为0.0000000xxx的小范围是表示不了的。就算是已经覆盖到的位置，计算机这种二进制表达的方式只是零零散散的占据了很少的一部分。 123456float f = 2.2f; double d = (double) f; System.out.println(d); f = 2.25f; d = (double) f; System.out.println(d); 输出： 2.2000000476837162.25 这样的问题也能够理解了，给你32个bit，第一位表示正负，第2-9位表示指数，剩下23位表示实际的数字。对于2.2f，首先第一位表示正负，然后个位数2可以表示在第二位，剩下的0.2设法用22位表示。 来看十进制小数转换二进制的问题，例如：22.8125转二进制 整数和小数分别转换。整数除以2，商继续除以2，得到0为止，将余数逆序排列。22 / 2 11 余011/2 5 余 15 /2 2 余 12 /2 1 余 01 /2 0 余 1所以22的二进制是10110小数乘以2，取整，小数部分继续乘以2，取整，得到小数部分0为止，将整数顺序排列。0.8125x2=1.625 取整1,小数部分是0.6250.625x2=1.25 取整1,小数部分是0.250.25x2=0.5 取整0,小数部分是0.50.5x2=1.0 取整1,小数部分是0，结束所以0.8125的二进制是0.1101十进制22.8125等于二进制10110.1101 对于0.2来说，得到的是一个无线循环的00110011001100110011….区区23位怎么够用。所以23位之后的数字被无视了，然后打印的时候尝试将这仅有的23位0101表示成10进制的时候，无论如何是得不到跟数学意义上的数字相等的数。但对于机器来说，就是一样的，Intelij里面float超过小数点后8位自动飚黄，说什么is always true。。。就这么23个槽子，确实没法满足实际需要的位数要求。所以实际上是2.2f需要无限个小槽子表示，2.25f正好停在：0 100 0000 0001 0010 0000 0000 0000 0000 就够用了。有时候float或者double的位数不够了，就用String吧。BigDecimal提供了String为参数的初始化方法。123456789double currentLat2 = 2.455675;BigDecimal b = new BigDecimal(currentLat2);currentLat2 = b.setScale(5, BigDecimal.ROUND_HALF_UP).doubleValue();System.out.println(currentLat2);// 输出的是2.45567而不是2.45568String currentLat2 = \"2.455675\";BigDecimal b = new BigDecimal(currentLat2); System.out.println(b.setScale(5,BigDecimal.ROUND_HALF_UP).doubleValue()); 所以建议用String初始化BigDecimal. 36.调jvm参数先看怎么get:在Intelij里面，写一个helloworld程序，看下console的输出，然后复制出来。中间加上这么一行： -XX:+PrintFlagsFinal and -XX:+PrintFlagsInitial 打印出来的东西很长，在console中不好找，最好拿管道复制出来: XXXXX | clip 。然后在文本编辑器中粘贴，自己找想要的参数挑几个好玩的： InitialHeapSize = 132120576 MaxJavaStackTraceDepth = 1024 具体教程搜索打印jvm参数即可。 再看怎么set:Intelij里面，Setting-Build-maven-runner，有个VM Options。把网上找到的“jvm 参数粘贴进去”。比如这些 -Xmx3550m:设置JVM最大可用内存为3550M. -Xms3550m:设置JVM促使内存为3550m.此值可以设置与-Xmx相同,以避免每次垃圾回收完成后JVM重新分配内存. -Xmn2g:设置年轻代大小为2G. 37. Serializable的原理刚学java的时候没人会跟你讲Serializable为什么是一个没有抽象方法的接口，那时甚至不知道serialize和deserialize是怎么回事。关于Serializable主要的点有几个： 为什么一个没有抽象方法的接口也能算接口 为什么总是说序列化一定要实现serializable接口 那个serialVersionUID干什么用的 为什么写了transient就不会被序列化了。 现在回答下这些问题，serialize（序列化，就是把一个对象写进磁盘），deserialize（反序列化，就是把写在磁盘上的0110这些东西重新组装成一个对象）。123456789101112131415161718192021222324252627282930313233343536public interface Serializable &#123;&#125;private static final long serialVersionUID = 2906642554793891381L;// 网上随便找到的序列化和反序列化的demo如下// Serializable：把对象序列化public static void writeSerializableObject() &#123; try &#123; Man man = new Man(\"lat\", \"123456\"); Person person = new Person(man, \"王尼玛\", 21); ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(\"output.txt\")); objectOutputStream.writeObject(\"string\"); objectOutputStream.writeObject(person); objectOutputStream.close(); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125;&#125;// Serializable：反序列化对象public static void readSerializableObject() &#123; try &#123; ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(\"output.txt\")); String string = (String) objectInputStream.readObject(); Person person = (Person) objectInputStream.readObject(); objectInputStream.close(); System.out.println(string + \", age: \" + person.getAge() + \", man username: \" + person.getMan().getUsername()); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125; 为什么说序列化一定要实现serializable接口。上面的objectOutputStream.writeObject方法走进去。ObjectOutputStream.java12345678910111213141516171819202122232425262728293031323334353637public final void writeObject(Object obj) throws IOException &#123; if (enableOverride) &#123; writeObjectOverride(obj); return; &#125; try &#123; writeObject0(obj, false); &#125; catch (IOException ex) &#123; if (depth == 0) &#123; writeFatalException(ex); &#125; throw ex; &#125;&#125;private void writeObject0(Object obj, boolean unshared) throws IOException&#123; // 省略省略 // remaining cases if (obj instanceof String) &#123; writeString((String) obj, unshared); &#125; else if (cl.isArray()) &#123; writeArray(obj, desc, unshared); &#125; else if (obj instanceof Enum) &#123; writeEnum((Enum&lt;?&gt;) obj, desc, unshared); &#125; else if (obj instanceof Serializable) &#123; writeOrdinaryObject(obj, desc, unshared); &#125; else &#123; if (extendedDebugInfo) &#123; throw new NotSerializableException( cl.getName() + \"\\n\" + debugInfoStack.toString()); &#125; else &#123; throw new NotSerializableException(cl.getName()); &#125; &#125; // 省略省略&#125; 果然还是用了instanceof这个关键词啊。这是写进磁盘(serialize的情况)，从磁盘里取出来的话ObjecInputStream.java123456789101112131415161718192021222324252627 public final Object readObject()&#123; // 省略 Object obj = readObject0(false); // 省略 &#125; /** * Underlying readObject implementation. */ private Object readObject0(boolean unshared) throws IOException &#123; // 省略 case TC_OBJECT: return checkResolve(readOrdinaryObject(unshared)); // 省略 &#125; private Object readOrdinaryObject(boolean unshared)&#123; //省略 try &#123; obj = desc.isInstantiable() ? desc.newInstance() : null; &#125; catch (Exception ex) &#123; throw (IOException) new InvalidClassException( desc.forClass().getName(), \"unable to create instance\").initCause(ex); &#125; //省略&#125; 就是反射调用无参的构造函数。 以前我问过那个serialVersionUID是干什么的，怎么写，老手告诉我说，瞎写就行了。后来的项目中就一直瞎写了，倒也没出过什么问题。现在来回答这个serialVersionUID是干什么的：序列化和反序列化就是存进去和取出来，为了保证存进磁盘的A在取出来的时候不会去拿B的二进制数据，所以需要这个。这个值就相当于每一个存进去的class的身份证号，保证存进去和取出来的是一个东西。ObjectStreamClass.java123456789101112private static Long getDeclaredSUID(Class&lt;?&gt; cl) &#123; try &#123; Field f = cl.getDeclaredField(\"serialVersionUID\"); int mask = Modifier.STATIC | Modifier.FINAL; if ((f.getModifiers() &amp; mask) == mask) &#123; f.setAccessible(true); return Long.valueOf(f.getLong(null)); &#125; &#125; catch (Exception ex) &#123; &#125; return null; &#125; 假如忘记写的话，呵呵12345throw new InvalidClassException(osc.name, \"local class incompatible: \" + \"stream classdesc serialVersionUID = \" + suid + \", local class serialVersionUID = \" + osc.getSerialVersionUID()); 没有指定serialVersionUID的，那么java编译器会自动给这个class进行一个摘要算法，类似于指纹算法，只要这个文件多一个空格，得到的UID就会截然不同的，可以保证在这么多类中，这个编号是唯一的。所以，我们添加了一个字段后，由于没有显指定serialVersionUID，编译器又为我们生成了一个UID，当然和前面保存在文件中的那个不会一样了，于是就出现了2个号码不一致的错误。因此，只要我们自己指定了serialVersionUID，就可以在序列化后，去添加一个字段，或者方法，而不会影响到后期的还原，还原后的对象照样可以使用，而且还多了方法可以用 所以还是得老老实实写，而且一次写了之后就不用也不要改了现在可以不用瞎写了，在Intelij里面有小工具：1&quot;File-&gt;Setting-&gt;Editor-&gt;Inspections-&gt;Serialization issues-&gt;Serializable class without ’serialVersionUID’ -&gt;勾选操作&quot; 38. java中Process的Api关键词：ProcessBuilder , java9提供了新的Api 39. javap一般用来反编译class文件 javap Animal.classjavap -c Animal.class //直接看字节码javap -help 可以看更多命令行参数的含义 不过一般不这么直接看字节码，因为都是有规则的，已经有人做出了gui的工具，比如jad ./jad -sjava Animal.class 123456789101112131415161718192021222324252627282930313233343536public enum Animal &#123; DOG,CAT&#125;// 通过jad翻译过后的字节码其实长这样public final class Animal extends Enum&#123; public static Animal[] values() &#123; return (Animal[])$VALUES.clone(); &#125; public static Animal valueOf(String s) &#123; return (Animal)Enum.valueOf(Animal, s); &#125; private Animal(String s, int i) &#123; super(s, i); &#125; public static final Animal DOG; public static final Animal CAT; private static final Animal $VALUES[]; static &#123; DOG = new Animal(\"DOG\", 0); CAT = new Animal(\"CAT\", 1); $VALUES = (new Animal[] &#123; DOG, CAT &#125;); &#125;&#125; 40. 关于动态代理(InvocationHandler这一套)动态代理。 System.getProperties().put(“sun.misc.ProxyGenerator.saveGeneratedFiles”, “true”); 41. java io主要是装饰模式，另外，调用操作系统api实现读写文件的功能在FileInputStream和FilePutputStream里面，主要的native方法都在这里面，FileDescriptor的使用也在这里面12345678910 // FileInputStream.java private native int read0() throws IOException; private native int readBytes(byte b[], int off, int len) throws IOException; private native void close0() throws IOException;//FileOutputStream.javaprivate native void write(int b, boolean append) throws IOException;private native void writeBytes(byte b[], int off, int len, boolean append) throws IOException;private native void close0() throws IOException; 42. Using java from command line interface平时都被IDE宠坏了，习惯了用Intelij Idea跑java 程序，如果用命令行呢？ java -h 会告诉我们可以通过java command传递的参数。看了下Intelij Idea点击run的时候做了什么: 首先是一闪而过的compiling…..(其实就是跑javac了)，然后在console里面开始输出：”java.exe的绝对路径” “-javaagent:xxx.jar” -Dfile.encoding=UTF-8 -classpath “/jre/lib/A.jar;/jre/lib/B.jar;…..;/target/classes(这个是ide在当前项目目录下创建的一个文件夹，里面按照包名结构放了对应的class文件);C:/users/administrator/.m2/repository/com.xxx.xxx.jar;……” com.example.sample java - h说 -D&lt;名称&gt;=&lt;值&gt; 设置系统属性-javaagent:[=&lt;选项&gt;] 加载 Java 编程语言代理, 请参阅 java.lang.instrument-classpath &lt;目录和 zip/jar 文件的类搜索路径&gt;用 ; 分隔的目录, JAR 档案和 ZIP 档案列表, 用于搜索类文件。 记住,javac只是一个utlity that comes with JDK 错误: 找不到或无法加载主类两种正确的方案是： java文件中不写packagename!不写packagename!不写packagename!12345public class Demo &#123; public static void main(String[] args) &#123; System.out.println(\"Hello there\"); &#125;&#125; 然后命令行javac Demo.java -&gt; java Demo -&gt; Hello there java文件写上packageName 1234567package com.me.example;public class Demo2 &#123; public static void main(String[] args) &#123; System.out.println(\"Hello there\"); &#125;&#125; 然后javac Demo2.java -&gt; java Demo2 -&gt; 错误: 找不到或无法加载主类 com.me.example.Demo2应该javac Demo2.java -&gt; 把生成的Demo2.class粘贴到当前目录下新建的一个com/me/example文件夹下 -&gt; java/com/me/example/Demo2 -&gt; Hello there 非要把java文件写在src/com/me/example文件夹下？好啊1234567package com.me.example;public class Demo3 &#123; public static void main(String[] args) &#123; System.out.println(\"Hello there\"); &#125;&#125; 在src/com/me.example文件夹下敲命令：javac Demo3 -&gt; 把生成的Demo3.class粘贴到src/com/me/example/com/me/example文件夹下 -&gt; java com/me/example/Demo3 java文件还放在src/com/me/example文件夹下，不加packageName总能行了吧12345public class Demo4 &#123; public static void main(String[] args) &#123; System.out.println(\"Hello there\"); &#125;&#125; javac Demo4.java -&gt; java Demo4.class -&gt; “Hello there”最终的结构是每一个A.java文件旁边都跟着一个A.class文件 命令行里写java代码这篇文章告诉我们，没有IDE也能写java代码。亲测，用vs code写代码也不算差。文章的大致内容如下:假定当前项目目录结构如下: /bin ##用于存储安装生成的.class文件 /lib ## 用于放第三方jar文件 /Okio.jar /src ## 用于存放开发写的java文件 /com /example /Application.java 12345678910111213141516171819202122232425262728293031package com.example;import java.io.*;import okio.BufferedSource;import okio.Okio;public class Application &#123; public static void main(String[] args) &#123; print(\"Hello there\"); File info = new File(\"info.txt\"); FileReader reader = null; BufferedReader bufferedReader = null; try &#123; BufferedSource source = null; source = Okio.buffer(Okio.source(info)); // bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(info), \"UTF-8\")); String line = \"\"; while ((line = source.readUtf8Line()) != null) &#123; // print(new String(line.getBytes(\"GBK\"), \"UTF-8\")); print(line); &#125; &#125; catch (Exception e) &#123; //TODO: handle exception e.printStackTrace(); &#125; &#125; static void print(String out) &#123; System.out.println(out); &#125;&#125; 注意上面的java文件第一行是有package name声明的。首先cd到根目录下 javac -d bin -sourcepath src -cp lib/Okio.jar;lib/gson.jar src/com/example/Application.java -d的意思是destination, sourcepath就是源码路径 ， -cp其实和-classpath一样 bin目录下就会生成com/example/Application.class文件，这中间的文件层级也生成好了。还是在根目录下 java -cp bin;lib/Okio.jar com.example.Application 运行的时候要带上classpath,不然会出现classnotFound需要注意的是代码中引用的文件路径指的是你当前所在的路径，所以，想要避免FileNotFound的话，需要在当前项目的根目录下放一个”info.txt”文件。其实站在一个command的角度来看，这也正常，外部并未特意声明工作路径，所以jvm运行class文件时就是在当前的目录下进行的。 Some Notes About Classpath，关于classpath的说明。很多网上的教程都说去自己电脑的环境变量改CLASSPATH这个值，想看下当前是什么样的话 echo %CLASSPATH%javac编译器在编Application.java这个文件的时候，遇到了com.example.Util这个class，这个文件在哪？根据java命名规则，这个class应该在../com/example/这个文件夹下面。那么这个路径从哪里开始，就是让javac把哪个绝对路径当做根路径？三种方式: If no –classpath parameter is passed, CLASSPATH environment variable is usedIf CLASSPATH environment variable is not found, current folder (“.”) is used by defaultIf –classpath is explicitly set as a command line parameter, it overrides all other values java -cp bin;lib/Okio.jar com.example.Application 运行的时候需要带上bin这个classpath的原因是设定了classpath就会覆盖掉其他设定，所以要把我们自己的java文件打出来的class文件也加到classpath。还有要注意的是，unix系统上classpath之间是用:分割的，windows上是用;分割的 43 . java读文件也要注意编码问题(FileReader读取文件里文乱码问题)123456789101112131415161718192021222324252627import java.io.*;public class Sample &#123; public static void main(String[] args) &#123; print(\"Hello there\"); File info = new File(\"info.txt\"); FileReader reader = null; BufferedReader bufferedReader = null; try &#123; reader = new FileReader(info); bufferedReader = new BufferedReader(reader); // bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(info), \"UTF-8\")); String line = \"\"; while ((line = bufferedReader.readLine()) != null) &#123; print(new String(line.getBytes(\"GBK\"), \"UTF-8\")); //这样输出大部分正确，但是带了一些乱码，显示成问号 // print(line); 改用utf-8构造函数的InputStreamReader之后，直接print出来就丝毫不差了 &#125; &#125; catch (Exception e) &#123; //TODO: handle exception e.printStackTrace(); &#125; &#125; static void print(String out) &#123; System.out.println(out); &#125;&#125; 原理的话，文件读入时是按OS的默认字符集即GBK解码的，windows上默认是GBK(中文的win10)，String.getBytes(“GBK”)就是把按照GBK编码的内容还原成二进制数据，再用UTF-8去new String，照说没问题，结果大部分汉字显示出来，但是部分汉字后面跟着问号。原因的话，FileReader继承了InputStreamReader，没有实现InputStreamReader的带charset的构造函数。FileReader属于字符流，是读取字符文件的便捷类。其继承自InputStreamReader，后者是将字节流转换为字符流的的桥梁，即将字节信息转换为字符信息。实际上， FileReader在类内部实现过程中也是利用了InputStreamReader完成字节流到字符流的转化，只不过转化时采用的字符集为系统默认的字符集。如果文件保存时的编码设定为UTF-8， 那么在中文操作系统使用 FileReader时就会发生乱码，因为中文操作系统平台的默认字符集为GBK。解决该问题的办法是，放弃使用FileReader，改用InputStreamReader，在获取InputStreamReader对象时，显示指定合适的字符集。从源码来看，FileReader的read方法直接调用了InputStreamReader的read方法，在没有传编码进来的情况下，FileReader(InputStreamReader)直接用操作系统默认编码(GBK)去解码一个UTF-8的文件，当然会有损失。The constructors of FileReader always use the platform default encoding which is generally a bad idea.。 或者，在notpadPLus中新建一个txt文件，编码字符集-&gt;中文-&gt;GB2312(simplified)。这样这个文件本身就是GB2312编码的，那个FileReader用GBK去解码，自然不会存在损失，拿着解码后的二进制流给System.out去打印肯定没问题。所以，照说一个文本文件(编码是针对字符来说的，二进制文件是解码之后的东西)，想看编码格式的话，用Notepad++就好了。windows下建议使用utf-8不带BOM格式。很有意思的是我在vs code里面查看这个GB2312的文本文件，全是乱码，给当成utf-8处理了。。。。 44 . 主函数的参数顺便提一下，主函数里面的args是可以用的12345public static void main(String[] args)&#123; System.out.println(\"args[0] is\"+args[0]); System.out.println(\"args[1] is\"+args[1]); System.out.println(\"args[2] is\"+args[2]); &#125; 45. 打jar包(命令行还是ide) jar -cvf HelloWorld.jar HelloWorld.class #将HelloWorld.class文件打入jar包 intelij idea打jar包更简单 46. DateFormats are not thread-safe，多线程下不安全stackoverFlow上有人说DateFormat本身不是线程安全的，简单来说就是多条线程调用DateFormat的format方法，得到的String结果 有可能 是错的。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class Test&#123; private SimpleDateFormat dateFormat ; public static void main(String[] args) &#123; SimpleDateFormat dateFormat= new SimpleDateFormat(\"yyyy-MM-dd\"); Date today = new Date(); Date tomorrow = new Date(today.getTime()+1000*60*60*24); System.out.println(today); // 今天是2010-01-11 System.out.println(tomorrow); // 明天是2010-01-11 Thread thread1 = new Thread(new Thread1(dateFormat,today)); thread1.start(); Thread thread2 = new Thread(new Thread2(dateFormat,tomorrow)); thread2.start(); &#125;&#125;class Thread1 implements Runnable&#123; private SimpleDateFormat dateFormat; private Date date; public Thread1(SimpleDateFormat dateFormat,Date date)&#123; this.dateFormat = dateFormat; this.date = date; &#125; public void run() &#123; for(;;)&#123;// 一直循环到出问题为止吧。 String strDate = dateFormat.format(date); // 如果不等于2018-03-19，证明出现线程安全问题了！！！！ if(!\"2018-03-19\".equals(strDate))&#123; System.err.println(\"format 出来的 today=\"+strDate); System.exit(-1); &#125; &#125; &#125;&#125;class Thread2 implements Runnable&#123; private SimpleDateFormat dateFormat; private Date date; public Thread2(SimpleDateFormat dateFormat,Date date)&#123; this.dateFormat = dateFormat; this.date = date; &#125; public void run() &#123; for(;;)&#123; String strDate = dateFormat.format(date); if(!\"2018-03-20\".equals(strDate))&#123; System.err.println(\"format 出来的 tomorrow=\"+strDate); System.exit(-1); &#125; &#125; &#125;&#125; 47. 反射为什么慢，慢成什么样了参考 Jake Wharton and Jesse Wilson - Death, Taxes, and HTTP Android Tech Talk: HTTP In A Hostile World","tags":[{"name":"java","slug":"java","permalink":"https://haldir65.github.io/tags/java/"}]},{"title":"使用Python搭建本地服务器","date":"2017-06-15T23:56:26.000Z","path":"2017/06/15/2017-06-15-python-networks/","text":"关于如何使用Python搭建后台的方法很多，这里列举出一些实例。 1. The Flask WayPyCharm最好装Professional的，方便很多，可以ssh到linux远程服务器,直接远程开发，调试。除了连接有点慢，别的都好。windows环境下很多库都跑不起来。 1.1 Basics Flask is a very simple, but extremely flexible framework Flask使用Decorator对请求进行处理 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#!/usr/bin/python3# -*- coding:utf8 -*-from flask import Flaskfrom flask import requestfrom flask import jsonifyfrom flask import send_file# create the flask objectapp = Flask(__name__)# 处理GET请求像这样就可以了@app.route('/', methods=['GET'])def handle_get(): return 'haha ,this is http status code 200'#处理POST请求，从request中拿东西，返回response@app.route('/', methods=['POST'])def handle_post(): uid = request.form['uid'] # requets.form是一个list，从里面获取想表单的参数 name = request.form['name'] print('uid is %s ,name is %s ' % (uid, name)) return '200 Ok, or whatever you like' if __name__ == '__main__': app.run(port=12345, debug=True) #设置为True后，会自动检测到服务端代码更改并reload，出错了也会给client返回实际的错误堆栈， 生产环境不要打开Debug 。# 对于GET请求，获得query参数的方式http://127.0.0.1:12345/_search_user?user=111&amp;date=190@app.route('/_search_user', methods=['GET'])def query_user_profile(): user = request.args.get('user') date = request.args.get('date') print(user) print(date) return 'every Thing Ok' 输出 111 190 #返回json，作为API@app.route('/_get_current_user', methods=['GET'])def get_current_user(): return jsonify( username='Admin', email='Bob@gmail.com', age=18 ) &#123; username: 'Admin'; email: 'Bob@gamil.com'; age: 18&#125;#返回复杂一点的json，或者json数组@app.route('/_get_user_list', methods=['GET'])def get_user_list(): user_list = create_user_list() return Response(json.dumps(user_list), mimetype='application/json')#生成数据def create_user_list(): alice = &#123;'name': 'alice', 'age': 16, 'sex': 'female'&#125; tom = &#123;'name': 'tom', 'age': 23, 'sex': 'male'&#125; josh = &#123;'name': 'josh', 'age': 20, 'sex': 'male'&#125; bill = &#123;'name': 'bill', 'age': 19, 'sex': 'male'&#125; li = [alice, tom, josh, bill] return li# 在Postman中就能获得这样的result[ &#123; \"name\": \"alice\", \"age\": 16, \"sex\": \"female\" &#125;, &#123; \"name\": \"tom\", \"age\": 23, \"sex\": \"male\" &#125;, &#123; \"name\": \"josh\", \"age\": 20, \"sex\": \"male\" &#125;, &#123; \"name\": \"bill\", \"age\": 19, \"sex\": \"male\" &#125;]# hosting static file，image,css,etc# 提供图片什么的@app.route('/_get_image', methods=['GET'])def get_image(): filename = 'static/image/b1.jpg' fullpath = os.path.join(os.path.curdir, filename) print(filename, fullpath) return send_file(fullpath, mimetype='image/jpeg') 我觉得Flask的官方Doc对初学者的友好度几乎是满分 accessing-request-data cookies sessions static files所有的静态文件必须放在当前目录下的static目录中，里面可以再创建image，css,404.html等文件另外，如果要调试接口的话，用Postman吧，比Fiddler简单点返回response的时候一定要指明mime-type，或者content-typetext/html、text/css、application/json什么的，详细的http-content-type表格关于content-type,找到一篇介绍关于Http header常用字段理解Http HeaderHttp底层TCP ,ACK 等等需要tcpcump结合wireShark抓包 下面是几个常见的Content-Type:1.text/html2.text/plain3.text/css4.text/javascript5.application/x-www-form-urlencoded6.multipart/form-data7.application/json8.application/xml…前面几个都很好理解，都是html，css，javascript的文件类型，后面四个是POST的发包方式。 1.2 Flask BluePrints1.3 Flask + gevent 提高web 框架的性能docs 1.4 Flask Session management这段示例代码展示了如何为请求设置session123456789101112131415161718192021222324from flask import Flask ,sessionimport osapp = Flask(__name__)app.secret_key = os.urname(24)@app.route('/')def index(): session('user') = 'Anthony' return 'Index'@app.route('/getsession')def getsession(): if 'user' in session: return session['user'] return 'not logged in!'@app.router('/dropsession')def dropsession(): session.pop('user',None) return 'Dropped'if __name__ == '__main__': app.run(debug=True) 2. The Django WayDjango是web framework，不是WebServer 3. Using Tornado4. 其他的点4.1 Web架构网络库上手比较快，很重要的一点是理解其在通讯中的层级，Nigix属于代理转发，Flask处理业务逻辑，Tornado处理Http底层实现，Django负责用于高效网络应用开发 Django和Flask这两个框架在设计上各方面有什么优缺点？ UrlLib，Socket这些属于Python底层的基础性的network库，属于基础的东西。 4.2不服跑个分引用一篇测评 可见纯框架自身的性能为: bottle &gt; flask &gt; tornado &gt; django 结合实际使用: tornado 使用了异步驱动，所以在写业务代码时如果稍有同步耗时性能就会急剧下降； bottle需要自己实现的东西太多，加上之后不知道性能会怎样； flask性能稍微差点，但周边的支持已经很丰富了； django就不说了，性能已经没法看了，唯一的好处就是开发的架子都已经搭好，开发速度快很多 当然这些框架不是纯粹一个功能层面上的东西，可能有所偏差。 Update请教flask ,laravel , rails对初学者那个更友好？这三个分别是python,php,ruby。懂python的话，flask上手很快。没必要学会每一种，就好像会用15种语言写hello world并没有卵用，一个意思。 Reference xxxx xxxx","tags":[{"name":"python","slug":"python","permalink":"https://haldir65.github.io/tags/python/"}]},{"title":"jvm架构概述","date":"2017-05-24T22:48:58.000Z","path":"2017/05/24/2017-05-24-jvm-architecture/","text":"关于jvm运行的大致架构，最近找到一个比较合适的视频，记录要点如下 1.从MyApp.java文件开始大家都知道最开始学习Java的时候，要用javac 来编译MyApp.java来生成一个class文件。在命令行里，大致是这样的执行顺序:12javac MyApp.javajava MyApp 实际上后一句话就创建了一个jvm instance. 2. 从class loader进入Execution Engine 再到Host Operating Systemjava MyApp会调用class loader，后者不仅要负责加载MyApp.class文件，还需要加载java API中的class文件（String,Object,Collection….）。加载的class文件（byte code）被传递给Execution Engine,后者则负责执行byte code（其实也是调用宿主操作系统的方法执行操作） 3. where did class loader load class into ?classloader将class 文件加载进内存中的一部分（Runtime data areas）。到此，jvm architecture的三个主要组件：class loader subsystem,Runtime data areas 以及execution Enigne的主要功能都说清楚了。所以，这篇文章主要就按照class loader subsystem -&gt; Runtime data areas -&gt; Execution Engine的顺序来讲。 4.从classloader开始执行（class loading subsystem）- load 将byte code 加载进内存，来源可以是.java文件，可以是.jar文件，甚至可以是network Socket（这要看具体class loader的implementation）。load阶段包含三种不同的class loader，这也是面试时的重点。 &gt; 1. Bootstrap class loader (jre文件夹中有一个rt.jar文件，里面装的就是java的internal class) // &gt; 2. extension class loader (jre/lib/ext) //负责加载这个文件夹中的class文件 &gt; 3. Application class loader (CLASSPATH, -cp)//加载CLASSPATH变量中描述的位置 - load完成后是link verify(检查是否是符合jvm标准的byte code) -&gt; prepare(为class中的static variable分配内存，variable被赋默认值) -&gt; Resolve(when all the symbolic reference inside currentclass are resolved，例如引用了其他的class，例如引用了常量池里面的东西，classDefNotFoundException也是在这个时候抛出的) 注意，以上步骤都是java specification所规定的，但不同的jvm实现可能有微小的差异 class loading subsystem的最后一步是initializeclass vars to initiazed Value in code(比如静态代码块就是在这时执行的) 5. Runtime data area五个部分的划分Runtime data area 即java virtural machine的内存，可以划分成五部分 //per jvm ,shared by all threads - Method Area - Heap // per thread - java stack - pc Registers - Native method stacks 1. Method Area(方法区，用于存储class的数据，static variable,byte code,class level constant pool都放在这里) ，Method Area也称为Perm gen space(永生代)，默认大小是64MB ，可以通过-XX:MaxPermSize 调节 。这里有可能抛出out of memory error。java8将method Area移除，改为 metaspace (就是将method area移到了Native Memory，这样就不会有限制了，也可以人为设置上限)2. Heap日常开发中new出来的东西都放在这里 -Xms , minimun size-Xmx , maximum size 3. Java Stackjava stacks contains stack frames of the current execution per thread.eg : method a -&gt; 调用 method b -&gt; 调用method c当前线程的方法栈中就会push三个stack frame(每个Frame对应一个方法的执行环境)stack Frame包含当前方法中的变量，以及返回值，etc这里定义了stackoverFlowError 4. pc Registers这里面装的是程序计数器，后者是指向下一个将要被执行的指令的指针（每条线程都有）。 5. Native method stacksNative method stacks 是由java stack中的方法调用native方法创建的，例如windows上的dll库 6. Execution Engine的任务 - Interpreter 将byte code 翻译成机器指令并执行(根据指令去调用Native方法，在windows上jre/bin/文件夹中一大堆的dll就是windows平台提供的Native库，在linux上是.so文件) - JIT Compiler just in time compiler（如果有某项byte code instruction被多次调用，这些byte code不会每次都被inteprete，JIT will hold on to that system level target machine code for future usage,which is fast） - Hotspot profiler(it helps the JIT Compiler analysise the frequently used byte codess) - GC (a lengthy talk) 调用Native Method Interface(JNI) -&gt; Native method libraries（.dll,.so etc） 参考JVM ( java virtual machine) architecture - tutorialJava系列笔记(3) - Java 内存区域和GC机制","tags":[{"name":"jvm","slug":"jvm","permalink":"https://haldir65.github.io/tags/jvm/"}]},{"title":"VPS下载Youtube视频并同步到本地","date":"2017-05-07T16:48:01.000Z","path":"2017/05/07/2017-05-07-download-video-from-vps/","text":"几天前花几块钱买了个新的vps，试了下，速度不错。后来看到网上有关于如何使用vps下载视频并拖到Windows的，试了一下，确实酸爽。 1. youtube下载视频到vps的硬盘上首先是安装一些必要的环境，我安装的系统是Ubuntu 14.0.4 ，这个版本默认的python是2.7。配置好pip,python等环境后，首先安装youtube-dl,基本上就是两行命令搞定的事情，参考官网123sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dlsudo chmod a+rx /usr/local/bin/youtube-dl 为了方便管理，首先在/根目录下面创建一个文件夹并切换到该目录下 mkdir youtube 以一个普通的视频链接为例直接使用 youtube-dl https://www.youtube.com/watch?v=7PtDrv5AUmA 就能自动选择合适的格式，下载到当前目录。比较好的一点是，由于vps在美国，下载速度非常快，维持在20MB/ms的样子。下载好的文件会放在当前目录下，后面使用pscp工具从vps拖下来就好了，不过我实践下来，这一步往往是最慢的。关键要看vps到你的ip的速度。有些时候还会突然断掉，所以很麻烦。这个看后面能不能搞定百度云盘中转。还有一个要注意的，生成的文件名是随机的，比如 -yj74P_BY1zI.mp4 由于前面带了一个横杠，很多命令是不认这种名字的，需要手动重命名一下 mv -yj74P_BY1zI.mp4 porn.videomv ./-yj74P_BY1zI.mp4 porn.video #. 表示当前目录 谁也不想要后面的乱码1youtube-dl -o '%(title)s.%(ext)s' https://www.youtube.com/watch?v=rimXGaUdaLg youtube-dl的可扩展性好很多 有时候下载的文件带有空格，有时候带有中文，用单引号包起来就好了。 youtube-dl还有一些命令行参数可以设置 youtube-dl –all-formats https://www.youtube.com/watch?v=7PtDrv5AUmA 这样会列出所有的可供下载的分辨率选项，每个选项前面带有一个序号，选择特定分辨率的选项下载只需要 youtube-dl -f 13 https://www.youtube.com/watch?v=7PtDrv5AUmA 2.从vps的硬盘上把下载好的视频拖下来VPS下载视频的速度很快，但从vps到国内的速度就很慢了。目前可能的方案有从百度网盘或dropBox中转，测试了一下百度网盘的方案bypy，vps上传到网盘速度太慢，shell出现假死，据说是百度方面限速的原因，所以这条路基本也是堵上了的。 3.后话you-get也是基于python3的下载工具，使用简单。在windows上安装还有点麻烦，在ubuntu上只需 pip3 install you-get 就安装好了使用方式更简单 &gt; you-get “url”you-get还提供了windows版本 下载youtube视频只需要 you-get -x 127.0.0.1:1080 -o “D:\\Porn” ‘https://www.youtube.com/watch?v=jNQXAC9IVRw‘ 参考百度云盘同步的方法讨论","tags":[{"name":"python","slug":"python","permalink":"https://haldir65.github.io/tags/python/"},{"name":"linux","slug":"linux","permalink":"https://haldir65.github.io/tags/linux/"}]},{"title":"Python localHost部署命令","date":"2017-05-01T08:57:27.000Z","path":"2017/05/01/2017-05-01-python-server-test/","text":"一行命令即可 python -m http.server 8000 –bind 127.0.0.1 打开浏览器，输入127.0.0.1 ， 即可浏览当前目录下的文件，以GET的方式进行，命令行窗口会出现浏览记录。 据说SimpleHttpServer也可以，1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/python# -*- coding: UTF-8 -*-import sysfrom http.server import SimpleHTTPRequestHandlerfrom http.server import BaseHTTPRequestHandler, HTTPServerdef test(HandlerClass=SimpleHTTPRequestHandler, ServerClass=HTTPServer): protocol = \"HTTP/1.0\" host = '' port = 8000 if len(sys.argv) &gt; 1: arg = sys.argv[1] if ':' in arg: host, port = arg.split(':') port = int(port) else: try: port = int(sys.argv[1]) except: host = sys.argv[1] server_address = (host, port) HandlerClass.protocol_version = protocol httpd = ServerClass(server_address, HandlerClass) sa = httpd.socket.getsockname() print(\"Serving HTTP on\", sa[0], \"port\", sa[1], \"...\") httpd.serve_forever()if __name__ == \"__main__\": test() 2 .sys.args[]的使用cmd中 python Python 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 17:54:52) [MSC v.1900 32 bit (Intel)] on win32Type “help”, “copyright”, “credits” or “license” for more information. 退出方式 ctrl+Z 切换到脚本所在目录 ,例如test.py 123456789101112131415161718192021222324252627#!/usr/bin/env python3# -*- coding: utf-8 -*-import sys# sys.argv接收参数，第一个参数是文件名，第二个参数开始是用户输入的参数，以空格隔开# cmd到该文件位置def run1(): print('I\\'m action1')def run2(): print('I\\'m action2')if 2 &gt; len(sys.argv): print('none')else: action1 = sys.argv[0] action2 = sys.argv[1] &lt;!-- if 'run1' == action1: run1() if 'run2' == action2: run2() --&gt; print(action1) print(action2) 输入 python test.py run1输出 test.py ‘run1’","tags":[{"name":"python","slug":"python","permalink":"https://haldir65.github.io/tags/python/"}]},{"title":"java线程池的实现原理","date":"2017-04-30T19:17:45.000Z","path":"2017/04/30/2017-04-30-concurrency-and-beyond/","text":"原本只打算写一点关于线程池的实现原理，后来发现坑越挖越大。不得不写到一半停下来，所以，这算是一篇不那么完善的关于原理的解析吧。 线程池的常规使用方式通常说的线程池对外表现为具有一系列操作功能的接口，Executor提供了execute一个runnable的功能，而其子类ExecutorService则对外提供了更多的实用功能，所以平时用的都是ExecutorService的实现类。12345678910111213141516171819202122232425262728public interface Executor &#123; /** * Executes the given command at some time in the future. The command * may execute in a new thread, in a pooled thread, or in the calling * thread, at the discretion of the &#123;@code Executor&#125; implementation. * * @param command the runnable task * @throws RejectedExecutionException if this task cannot be * accepted for execution * @throws NullPointerException if command is null */ void execute(Runnable command);&#125;public interface ExecutorService extends Executor&#123;true&#125;public abstract class AbstractExecutorService implements ExecutorService &#123;true&#125;public class ThreadPoolExecutor extends AbstractExecutorService &#123;true&#125; 更具体一点来说，java.util.concurrent.ThreadPoolExecutor这个类提供了上述接口的具体实现，同时对外提供了一些hook(beforeExecute、afterExecute等)，当然开发者也可以继承这个方法，实现更多自定义功能。它的构造函数如下：12345678public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue) &#123; this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(), defaultHandler); &#125; 但实际上，java不建议这样直接弄一个线程池出来，而是使用java.util.concurrent.Executors中的一些现成的工厂方法来创建一个线程池实例，具体的方法名很好理解，newFixedThreadPool，newSingleThreadExecutor，newCachedThreadPool等等。关于线程池构造函数各个参数的意义以及Executors提供的各种线程方法的适用场合，网上有很多详尽的文章。 12345678910Thread有这些状态 */ public enum State &#123; NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED; &#125; 这里针对execute方法具体的实现来展开，即，如何做到自动扩容，如何做到线程缓存，如何实现终止，以及资源同步问题。1234567891011121314151617181920212223242526272829303132333435363738394041424344public void execute(Runnable command) &#123; if (command == null) throw new NullPointerException(); /* * Proceed in 3 steps: * * 1. If fewer than corePoolSize threads are running, try to * start a new thread with the given command as its first * task. The call to addWorker atomically checks runState and * workerCount, and so prevents false alarms that would add * threads when it shouldn't, by returning false. * * 2. If a task can be successfully queued, then we still need * to double-check whether we should have added a thread * (because existing ones died since last checking，上一次检查之后可能有线程挂掉了) or that * the pool shut down since entry into this method. So we * recheck state and if necessary roll back the enqueuing if * stopped, or start a new thread if there are none. * * 3. If we cannot queue task, then we try to add a new * thread. If it fails, we know we are shut down or saturated * and so reject the task. */ int c = ctl.get(); if (workerCountOf(c) &lt; corePoolSize) &#123; // // Core pool size is the minimum number of workers to keep alive (and not allow to time out etc) unless allowCoreThreadTimeOut is set, in which case the minimum is zero. if (addWorker(command, true))//true表示创建新的Worker时的上限是coolPoolSize,false表示上限是maximunPoolSize 一般前者都小于等于后者，成功创建新的Worker并执行任务的话,直接在这里就return掉了 return; c = ctl.get(); //当前pool的state,ctl是一个AtomicInteger &#125; if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;//addworker就是创建一个新的Worker并立即执行command，没能成功就得暂时放进queue了。offer就是往这里面加一个runnable int recheck = ctl.get();//recheck的原因源码中也说明了 //走到这一步，说明已经成功加入到队列中了。 if (! isRunning(recheck) &amp;&amp; remove(command)) reject(command);//pool随时可能会被关掉 else if (workerCountOf(recheck) == 0) addWorker(null, false); &#125; else if (!addWorker(command, false)) reject(command); &#125; 来看addWorker的实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657private boolean addWorker(Runnable firstTask, boolean core) &#123; retry: 、、、省略代码 try &#123; w = new Worker(firstTask); //每一个不为null的command都会创建一个新的worker final Thread t = w.thread; if (t != null) &#123; final ReentrantLock mainLock = this.mainLock; mainLock.lock();//加锁 try &#123; workers.add(w); //workers就是一个普通的HashSet,同步的问题通过ReentrantLock解决 &#125; &#125; finally &#123; mainLock.unlock(); &#125; if (workerAdded) &#123; t.start(); //这里就是真正执行command的方法了 workerStarted = true; &#125; &#125; &#125; return workerStarted; //这里可以看出来,addWorker返回值表示这个command有没有被执行 &#125; final void runWorker(Worker w) &#123; //每一条线程运行起来的时候都会走这个方法 try &#123; while (task != null || (task = getTask()) != null) &#123; w.lock();//task可能是第一个runnable，也可能是从queue中取出来的 //getTask方法就是不断的从队列中获取任务。注意之前addTask的方法入参说明,command是该worker执行的第一个任务。也就是说，一个worker之后还有可能从queue中获取新的任务。线程能够一直有任务执行，就不会进入死亡状态(Thread有几个状态) try &#123; beforeExecute(wt, task);//钩子 Throwable thrown = null; try &#123; task.run(); &#125; catch (RuntimeException x) &#123; thrown = x; throw x; &#125; catch (Error x) &#123; thrown = x; throw x; &#125; catch (Throwable x) &#123; thrown = x; throw new Error(x); &#125; finally &#123; afterExecute(task, thrown);//钩子 &#125; &#125; finally &#123; task = null; w.completedTasks++; w.unlock(); &#125; &#125; completedAbruptly = false; &#125; finally &#123; processWorkerExit(w, completedAbruptly); &#125; &#125; addWorker会创建一个新的Worker(线程)，并将command作为这个线程要执行的第一个任务，而Worker的run方法是线程跑起来执行的方法。至于如何实现从queue中获取任务交给线程去完成，看getTask方法12345678910111213141516private Runnable getTask() &#123; boolean timedOut = false; // Did the last poll() time out? for (;;) &#123; //轮询 try &#123; Runnable r = timed ? workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) : //从queue中提取任务 workQueue.take(); if (r != null) return r; &#125; catch (InterruptedException retry) &#123; timedOut = false; &#125; &#125; &#125; 整体来说，executor.execute方法就是通过new出Woker，而Worker则会在run方法中不停的从queue中获取新的任务，从而确保线程不会挂掉。也就是所谓的线程池缓存了线程，避免了频繁创建线程的开销。 Worker这个类继承自AbstractQueuedSynchronizerAbstractQueuedSynchronizer即大名鼎鼎的AQS。 Reetranlock的使用这其中有注意上面使用了重入锁 ReentrantLock，后来发现ThreadPoolExecutor中多处使用了这个类。 Future,Callable,FutureTask等等 最后，今天下午看到很多jdk里源码的注释，作者都是 Doug Lea ，实在佩服前人的功力。之前也看过一些自定义线程池的实现，现在看起来确实差很多，不要重复造轮子不意味着不需要去了解轮子是怎么造出来的。 Reference Java 多线程：线程池实现原理","tags":[{"name":"concurrency","slug":"concurrency","permalink":"https://haldir65.github.io/tags/concurrency/"}]},{"title":"Rxjava2 的一些点","date":"2017-04-23T13:56:07.000Z","path":"2017/04/23/2017-04-23-rxjava2-for-android/","text":"本文多数内容来自Jake Wharton的演讲，配合一些个人的感受，作为今后使用Rxjava2的一些参考。 1. Why Reactive?最早使用Rxjava的初衷在于方便地实现线程切换，使用链式语法轻松地将异步任务分发到子线程并省去了主动实现回调的麻烦。我们生活在一个事件异步分发的环境中，网络，文件、甚至用户输入本身也是异步事件，除此之外，安卓系统本身的许多操作也是异步的，例如startActivity，Fragment的transaction，这就要求开发者不得不考虑各种事件状态，并在各种事件之间进行协调。Rxjava将各种事件的处理、完成以及异常在事件定义之初定义好处理方式。事件的开始，进行，完成以及异常，都被抽象到Observable的载体中。值得注意的是，这种链式调用很像Builder Pattern，但本质上每一步都生成了一个新的对象。这个在Rxjava的Wiki上有所说明，即每一步都生成一个新的immutable object（GC表示压力大）。 2. 数据源Stream基本包括这三部分123source of datalistener of datamethods for modifying data 2.1 数据源的种类Observable 和Flowable，区别在于后者支持BackPressure，后者不支持BackPressure.接收Observable和Flowable的类型分别为Observer和Subscriber 1234567891011121314151617181920212223interface Observer&lt;T&gt;&#123; void onNext(T t); void onComplete(); void onError(Throwable t); void onSubscribe(Disposable d);&#125;interface Disposable&#123; void dispose();&#125;interface Subscriber&lt;T&gt;&#123; void onNext(T t) void onComplete();; void onError(Throwable t); void onSubscribe(Subscription s);&#125;interface Subscription&#123; void cancel() //用于取消订阅，释放资源 void request(long r) //请求更多的数据，即BackPressure开始体现的地方&#125; 两者的区别在于最后一个方法，以Disposable为例，当你开始subscribe一个数据源的时，就类似于创建了一个Resurce，而Resource是往往需要在用完之后及时释放。无论是Observable还是Flowable,这个onSubscribe方法会在订阅后立即被调用，这个方法里的Disposable可以保留下来，在必要时候用于释放资源。如Activity的onDestroy中cancel network request. 2.2 数据源的对应类 Single(订阅一个Single，要么获得仅一个返回值，要么出现异常返回Error) 1public abstract class Single&lt;T&gt; implements SingleSource&lt;T&gt; &#123;&#125; Completeable(订阅一个completeable，要么成功，不返回值，要么出现异常返回error，就像一个reactive runnale，一个可以执行的command，并不返回结果) 1public abstract class Completable implements CompletableSource &#123;&#125; 例如，异步写一个文件，要么成功，要么出现error，并不需要返回什么。123public void writeFile(Stirng data)&#123;&#125;// 就可以model成Completeable writeFile(Stirng data)&#123;&#125; Maybe(有可能返回值，有可能不返回，也有可能异常，即optional)1public abstract class Maybe&lt;T&gt; implements MaybeSource&lt;T&gt; &#123;&#125; 以上三种数据源都有static方法生成：例如 比较推荐的方法有两种 1. fromCallable1234567Observable.fromCallable(new Callable&lt;String&gt;()&#123; @override public String call() throw Exception&#123; return getName() // 之前是synchronious的get，现在这一步可以asynchnous执行,比如放一个OkHttpClient.newCall(request).execute(); //因为是异步执行的，也不存在性能问题&#125;&#125;) 上面这段中的call方法会在被订阅后执行，成功的话会走到observer的onNext，失败的话会走到onError。fromCallable可用于各种数据源，包括Flowable12345Flowable.fromCallable(() -&gt; \"Hello Flowable\");Observable.fromCallable(() -&gt; \"Hello Observable\");Maybe.fromCallable(() -&gt; \"Hello Maybe\");Single.fromCallable(() -&gt; \"Hello Single\");Completeable.fromCallable(() -&gt; \"Hello Completeable\"); fromCallable are for modeling synchronous sourse of a single source of data. 很多需要返回值的方法都可以抽象成这种方法。Maybe和Completeable还有两个方法,用于表示不返回数据的方法12345Maybe.fromAction(() -&gt; \"Hey jude\")Maybe.fromRunnable(() -&gt; \"ignore\")Completeable.fromAction(() -&gt; \"Hey jude\")Completeable.fromRunnable(() -&gt; \"ignore\") 2. create(Rxjava 1中不推荐使用该方法，Rxjava2中建议使用)12345678Observable.create(new ObservableOnSubscribe&lt;String&gt;())&#123; @override public void subscribe (ObservableEmitter&lt;String&gt; e) throws Exception&#123; //subscribe get called whenever there's a new subscriber, emitter is the person that's listening. // e.onNext(\"Hello\"); e.onComplete(); &#125;&#125; //一个Observable可以有多个subscriber。一个被观察者可以有多个观察者，被观察者的onNext调用，观察者的onNext也会被调用 lambda更简洁123456789101112131415161718192021222324252627282930313233343536373839404142434445Observable.create(e -&gt;&#123; e.onNext(\"Hello\"); e.onNext(\"Hello\"); e.onComplete();&#125;)Okhttp的异步网络请求也可以model成一种被观察的流Observable.create(e -&gt;&#123; Call call = client.newCall(request); call.enqueue(new Callback())&#123; @Override public void onResponse(Response r) throws IOException&#123; e.onNext(r.body().toString()); e.onComplete(); &#125; @Override public void onFailure(IOException e)&#123; e.onError(e); &#125; &#125;&#125;)//重点了来了，public interface ObservableEmitter&lt;T&gt; extends Emitter&lt;T&gt; &#123; /** * Sets a Cancellable on this emitter; any previous Disposable * or Cancellation will be unsubscribed/cancelled. * @param c the cancellable resource, null is allowed */ void setCancellable(Cancellable c);&#125;// emitter可以设置cancel的动作Observable.create(e -&gt;&#123; e.setCacelation(() -view.setOnClickListener(null)); view.setOnClickListener(v -&gt; e.onNext());&#125;)// 点击按钮发送事件，取消订阅时避免leak View和fromCallable一样，create方法也适用于所有五种data source 3. 如何订阅（接收）这些数据3.1 observer和Subscriber接收Observable和Flowable的类型分别为Observer和Subscriber 1234567891011121314151617181920212223interface Observer&lt;T&gt;&#123; void onNext(T t); void onComplete(); void onError(Throwable t); void onSubscribe(Disposable d);&#125;interface Disposable&#123; void dispose();&#125;interface Subscriber&lt;T&gt;&#123; void onNext(T t); void onComplete(); void onError(Throwable t); void onSubscribe(Subscription s);&#125;interface Subscription&#123; void cancel(); //用于取消订阅，释放资源 void request(long r) ;//请求更多的数据，即BackPressure开始体现的地方&#125; 所以整体来看，数据的流向就这么两种，左边发送数据(可能只有一个，可能间歇性的，可能一直不停)，事件通过数据流传输到右边，右边根据协议作出相应(Reactive)Observable -&gt; subscribe -&gt; Observer Flowable -&gt; subscribe -&gt; Subscription 3.2 onSubscribe怎么用通常不直接用这两种base class，因为第四个方法不知道怎么用嘛。123456789101112131415161718192021222324252627282930313233343536Observable.just(\"Hello\").subscribe(new DisposableObserver&lt;String&gt;() &#123; @Override public void onNext(String value) &#123; &#125; @Override public void onError(Throwable e) &#123; &#125; @Override public void onComplete() &#123; &#125; &#125;); 可以持有DisposableObserver，在停止订阅的时候调用observer.dispose方法，切断流。 或者这样 Disposable disposable = Observable.just(\"Hello\").subscribeWith(new DisposableObserver&lt;String&gt;() &#123; @Override public void onNext(String value) &#123; &#125; @Override public void onError(Throwable e) &#123; &#125; @Override public void onComplete() &#123; &#125; &#125;); subscribeWith返回一个Disposable，subscribe是一个没有返回值的函数 偷懒一点的话，通常把这些返回的订阅加入到一个CompositeDisposable,在onDestroy的时候统一取消订阅即可 Observable、Single、Completeable、Maybe以及Flowable都支持subscribewith。 4. 数据源和接受者建立联系 Observable.subscribe或者Flowable.subscribe或者使用之前提到的sbscribeWith我尝试写了一个比较复杂的调用顺序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455Observable.fromCallable(new Callable&lt;List&lt;String&gt;&gt;() &#123; @Override public List&lt;String&gt; call() throws Exception &#123; LogUtil.p(\"call do on thread any\"); blockThread(2000); // block 2s return Arrays.asList(array); &#125; &#125;).subscribeOn(Schedulers.computation()) .observeOn(AndroidSchedulers.mainThread()) .doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123; @Override public void accept(Disposable disposable) throws Exception &#123; LogUtil.p(\"\"); &#125; &#125;).doOnComplete(new Action() &#123; @Override public void run() throws Exception &#123; LogUtil.p(\"\"); &#125; &#125;).doOnNext(new Consumer&lt;List&lt;String&gt;&gt;() &#123; @Override public void accept(List&lt;String&gt; strings) throws Exception &#123; LogUtil.p(\"\" + strings.get(0)); &#125; &#125;).doAfterNext(new Consumer&lt;List&lt;String&gt;&gt;() &#123; @Override public void accept(List&lt;String&gt; strings) throws Exception &#123; LogUtil.p(\"\"+strings.get(0)); &#125; &#125;).subscribe(new Observer&lt;List&lt;String&gt;&gt;() &#123; @Override public void onSubscribe(Disposable d) &#123; LogUtil.p(\"onSubscribe \" + d.isDisposed()); &#125; @Override public void onNext(List&lt;String&gt; value) &#123; LogUtil.p(\" get Response \" + value.size()); value.set(0, \"change first element!\"); &#125; @Override public void onError(Throwable e) &#123; &#125; @Override public void onComplete() &#123; LogUtil.p(\"\"); &#125; &#125;);执行顺序：（括号内数字表示线程id）doOnsubscribe(1) -&gt; onSubscribe(1) -&gt; call(276) -&gt;doOnNext(1)-&gt;onNext(1) -&gt; doAfterNext(1) -&gt;doOnComplete(1)-&gt;onComplete(1)所以基本上可以认为doOnXXX= doBeforeXXX,线程都是一样的。估计是为了打日志用的，或者说用于切片。像极了OkHttp的interecpter或是gradle的task。 5. Operator and Threading1234Observable&lt;String&gt; greeting = Observable.just(\"Hello\");Observable&lt;String&gt; yelling = greeting.map(s -&gt;s.toUppercase())Observable.subscribeOn(Schedulers.io()) // subscribeOn决定了task在哪条线程上运行，操作符的顺序很重要 流之间的转换 Observable -&gt; first() -&gt; singleObservable -&gt; firsetElement -&gt; MaybeObservable -&gt; ignoreElements() -&gt;Completable Flowable -&gt; first() -&gt; singleFlowable -&gt; firsetElement -&gt; MaybeFlowable -&gt; ignoreElements() -&gt;Completable Combining Observables 多个数据来源的加工 updates: 复制一些实例merge():1234567891011121314151617181920212223242526272829303132333435363738394041424344// 用于存放最终展示的数据 String result = \"数据源来自 = \" ; /* * 设置第1个Observable：通过网络获取数据 * 此处仅作网络请求的模拟 **/ Observable&lt;String&gt; network = Observable.just(\"网络\"); /* * 设置第2个Observable：通过本地文件获取数据 * 此处仅作本地文件请求的模拟 **/ Observable&lt;String&gt; file = Observable.just(\"本地文件\"); /* * 通过merge（）合并事件 &amp; 同时发送事件 **/ Observable.merge(network, file) .subscribe(new Observer&lt;String&gt;() &#123; @Override public void onSubscribe(Disposable d) &#123; &#125; @Override public void onNext(String value) &#123; Log.d(TAG, \"数据源有： \"+ value ); result += value + \"+\"; &#125; @Override public void onError(Throwable e) &#123; Log.d(TAG, \"对Error事件作出响应\"); &#125; // 接收合并事件后，统一展示 @Override public void onComplete() &#123; Log.d(TAG, \"获取数据完成\"); Log.d(TAG, result ); &#125; &#125;); zip()，比如要同时拉两个接口1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class MainActivity extends AppCompatActivity &#123; private static final String TAG = \"Rxjava\"; // 定义Observable接口类型的网络请求对象 Observable&lt;Translation1&gt; observable1; Observable&lt;Translation2&gt; observable2; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // 步骤1：创建Retrofit对象 Retrofit retrofit = new Retrofit.Builder() .baseUrl(\"http://fy.iciba.com/\") // 设置 网络请求 Url .addConverterFactory(GsonConverterFactory.create()) //设置使用Gson解析(记得加入依赖) .addCallAdapterFactory(RxJava2CallAdapterFactory.create()) // 支持RxJava .build(); // 步骤2：创建 网络请求接口 的实例 GetRequest_Interface request = retrofit.create(GetRequest_Interface.class); // 步骤3：采用Observable&lt;...&gt;形式 对 2个网络请求 进行封装 observable1 = request.getCall().subscribeOn(Schedulers.io()); // 新开线程进行网络请求1 observable2 = request.getCall_2().subscribeOn(Schedulers.io());// 新开线程进行网络请求2 // 即2个网络请求异步 &amp; 同时发送 // 步骤4：通过使用Zip（）对两个网络请求进行合并再发送 Observable.zip(observable1, observable2, new BiFunction&lt;Translation1, Translation2, String&gt;() &#123; // 注：创建BiFunction对象传入的第3个参数 = 合并后数据的数据类型 @Override public String apply(Translation1 translation1, Translation2 translation2) throws Exception &#123; return translation1.show() + \" &amp; \" +translation2.show(); &#125; &#125;).observeOn(AndroidSchedulers.mainThread()) // 在主线程接收 &amp; 处理数据 .subscribe(new Consumer&lt;String&gt;() &#123; // 成功返回数据时调用 @Override public void accept(String combine_infro) throws Exception &#123; // 结合显示2个网络请求的数据结果 Log.d(TAG, \"最终接收到的数据是：\" + combine_infro); &#125; &#125;, new Consumer&lt;Throwable&gt;() &#123; // 网络请求错误时调用 @Override public void accept(Throwable throwable) throws Exception &#123; System.out.println(\"登录失败\"); &#125; &#125;); &#125;&#125; replay操作符：一个source先创建，发送了3个事件后，有一个subscriber才开始subscribe，这时会把之前的3个事件和之后的陆续事件都丢给subscriber。 链式调用每一步都生成了新的object，Rxjava2和Rxjava1相比，对GC更加友好。quote:RxJava 2 is not something new. Reactive programming is not new by any stretch, but Android itself is a highly reactive world that we’ve been taught to model in a very imperative, stateful fashion.Reactive programming allow us to model it in the proper way: asynchronously. Embrace the asynchronicity of the sources, and instead of trying to manage all the state ourselves, compose them together such that our apps become truly reactive. updates:How about Error Handling ?Error handling in RxJava Reference– GOTO 2016 • Exploring RxJava 2 for Android • Jake Wharton - YouTube– 掘金– 使用concat从数据库，内存，网络三层中获取数据","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"rxjava2","slug":"rxjava2","permalink":"https://haldir65.github.io/tags/rxjava2/"}]},{"title":"View的属性大全[转载]","date":"2017-04-03T11:38:10.000Z","path":"2017/04/03/2017-04-03-properties-of-view/","text":"转自Android属性大全android:alpha setAlpha(float) 属性说明: 视图透明度，值在0-1之间。0为完全透明，1为完全不透明。android:background setBackgroundResource(int) 属性说明: 视图背景android:clickable setClickable(boolean) 属性说明: 视图是否可点击android:contentDescription setContentDescription(CharSequence) 属性说明: 设置View的备注说明，作为一种辅助功能提供,为一些没有文字描述的View提供说明android:drawingCacheQuality setDrawingCacheQuality(int) 属性说明: \"设置绘图时半透明质量。有可以取以下3个值 auto——默认，由框架决定 high——高质量，使用较高的颜色深度，消耗更多的内存 low——低质量，使用较低的颜色深度，但是用更少的内存\"android:duplicateParentState 属性说明: 如果设置此属性，将直接从父容器中获取绘图状态（光标，按下等）android:fadeScrollbars setScrollbarFadingEnabled(boolean) 属性说明: 定义在ScrollBar没有使用时，是否褪色。android:fadingEdgeLength getVerticalFadingEdgeLength() 属性说明: 设置边框渐变的长度。android:filterTouchesWhenObscured setFilterTouchesWhenObscured(boolean) 属性说明: view所在窗口被其它可见窗口遮住时，是否过滤触摸事件。android:fitsSystemWindows setFitsSystemWindows(boolean) 属性说明: 设置布局调整时是否考虑系统窗口（如状态栏）android:focusable setFocusable(boolean) 属性说明: 设置是否获得焦点。若有requestFocus()被调用时，后者优先处理。注意在表单中想设置某一个如EditText获取焦点，光设置这个是不行的，需要将这个EditText前面的focusable都设置为false才行。在Touch模式下获取焦点需要设置focusableInTouchMode为true。android:focusableInTouchMode setFocusableInTouchMode(boolean) 属性说明: 设置在Touch模式下View是否能取得焦点。android:hapticFeedbackEnabled setHapticFeedbackEnabled(boolean) 属性说明: 是否启用触摸反馈，启用后就是在点击等操作时会有震动等反馈效果android:id setId(int) 属性说明: 给当前View设置一个在当前layout.xml中的唯一编号，可以通过调用View.findViewById() 或Activity.findViewById()根据这个编号查找到对应的View。不同的layout.xml之间定义相同的id不会冲突。android:importantForAccessibility setImportantForAccessibility(int) 属性说明: 设置可达性的重要性android:isScrollContainer setScrollContainer(boolean) 属性说明: 设置当前View为滚动容器。这里没有测试出效果来，ListView/ GridView/ ScrollView根本就不用设置这个属性，而EdidText设置android:scrollbars也能出滚动条android:keepScreenOn setKeepScreenOn(boolean) 属性说明: 视图在可见的情况下是否保持唤醒状态。android:layerType setLayerType(int,Paint) 属性说明: \"设置指定层的类型，可以取以下3个值： none——不指定 software——软件层。 hardware——硬件层。使用硬件加速。\"android:layoutDirection setLayoutDirection(int) 属性说明: 定义布局图纸的方向android:longClickable setLongClickable(boolean) 属性说明: 是否响应长点击事件android:minHeight setMinimumHeight(int) 属性说明: 设置视图最小高度android:minWidth setMinimumWidth(int) 属性说明: 设置视图最小宽度android:nextFocusDown setNextFocusDownId(int) 属性说明: 向下移动焦点时，下一个获取焦点的view的idandroid:nextFocusForward setNextFocusForwardId(int) 属性说明: 下一个获取焦点的view的idandroid:nextFocusLeft setNextFocusLeftId(int) 属性说明: 向左移动焦点时，下一个获取焦点的view的idandroid:nextFocusRight setNextFocusRightId(int) 属性说明: 向右移动焦点时，下一个获取焦点的view的idandroid:nextFocusUp setNextFocusUpId(int) 属性说明: 向上移动焦点时，下一个获取焦点的view的idandroid:onClick setOnClick()或 onClick(View view)属性说明: 点击时，要调用的方法的名称。android:padding setPaddingRelative(int,int,int,int) 属性说明: 设置上下左右的边距android:paddingBottom setPaddingRelative(int,int,int,int) 属性说明: 下边距android:paddingEnd setPaddingRelative(int,int,int,int) 属性说明: 与android:paddingRight相同android:paddingLeft setPadding(int,int,int,int) 属性说明: 左边距android:paddingRight setPadding(int,int,int,int) 属性说明: 右边距android:paddingStart setPaddingRelative(int,int,int,int) 属性说明: android:paddingLeft相同android:paddingTop setPaddingRelative(int,int,int,int) 属性说明: 上边距android:requiresFadingEdge setVerticalFadingEdgeEnabled(boolean) 属性说明: 定义滚动时边缘是否褪色android:rotation setRotation(float) 属性说明: 旋转度数android:rotationX setRotationX(float) 属性说明: 水平旋转度数android:rotationY setRotationY(float) 属性说明: 竖直旋转度数android:saveEnabled setSaveEnabled(boolean) 属性说明: 在配置改变等情况出现时是否保存view的状态数据。如果你的view有id，那默认系统就会帮你保存。android:scaleX setScaleX(float) 属性说明: 水平方向缩放比例android:scaleY setScaleY(float) 属性说明: 竖直方向缩放比例android:scrollX 属性说明: x方向的滚动偏移。即在水平方向滚动了多少距离android:scrollY 属性说明: y方向的滚动偏移。即在竖直方向滚动了多少距离android:scrollbarAlwaysDrawHorizontalTrack 属性说明: 是否总是绘制水平滚动条的滚动轨道android:scrollbarAlwaysDrawVerticalTrack 属性说明: 是否总是绘制竖直滚动条的滚动轨道android:scrollbarDefaultDelayBeforeFade setScrollBarDefaultDelayBeforeFade(int) 属性说明: 滚动条在n毫秒后开始淡出。android:scrollbarFadeDuration setScrollBarFadeDuration(int) 属性说明: 滚动条用多长时间淡出完毕。android:scrollbarSize setScrollBarSize(int) 属性说明: 设置滚动条的尺寸。垂直滚动条的宽度、水平滚动条的高度android:scrollbarStyle setScrollBarStyle(int) 属性说明: \"滚动条的风格。共4组值： insideOverlay——内贴图 insideInset——内插图 outsideOverlay——外贴图 outsideInset——外插图。 inside就是滚动条在绘制在padding以内；outside就是不需要绘制在padding内（即view的边界处）；Overlay是贴图，就是直接覆盖在内容的上方，这样内容可能会显示到滚动条下方去；Inset是插图，就是会在对应padding上加上滚动条的宽度，以不让内容显示到滚动条下面去。\"android:scrollbarThumbHorizontal 属性说明: 水平滚动块的drawable对象android:scrollbarThumbVertical 属性说明: 竖直滚动块的drawable对象android:scrollbarTrackHorizontal 属性说明: 水平滚动条滚动轨道的drawable对象android:scrollbarTrackVertical 属性说明: 竖直滚动条滚动轨道的drawable对象android:scrollbars 属性说明: \"设置可显示的滚动条。有3个取值: none——不显示滚动条 horizontal——显示水平滚动条 vertical——显示竖直滚动条\"android:soundEffectsEnabled setSoundEffectsEnabled(boolean) 属性说明: 点击或触摸该view时，是否需要有声音效果android:tag 属性说明: string标识。类似id，id是整数标识。android:textAlignment setTextAlignment(int) 属性说明: 设置文本的显示方式。android:textDirection setTextDirection(int) 属性说明: 设置文本的显示方向。android:transformPivotX setPivotX(float) 属性说明: 水平方向偏转量android:transformPivotY setPivotY(float) 属性说明: 竖直方向偏转量android:translationX setTranslationX(float) 属性说明: 水平方向的移动距离android:translationY setTranslationY(float) 属性说明: 竖直方向的移动距离android:visibility setVisibility(int) 属性说明: \"view的可见性。有3个取值： gone——不可见，同时不占用view的空间； invisible——不可见，但占用view的空间； visible——可见\"TextView属性说明下面对TextView的属性进行说明 android:autoLink setAutoLinkMask(int) 属性说明: 设置是否“当文本为URL链接/email/电话号码/map时，文本显示为可点击的链接”。可选值(none/web/email/phone/map/all)android:autoText setKeyListener(KeyListener) 属性说明: 如果设置，将自动执行输入值的拼写纠正。此处无效果，在显示输入法并输入的时候起作用。android:bufferType setText(CharSequence,TextView.BufferType) 属性说明: 指定getText()方式取得的文本类别。选项editable 类似于StringBuilder可追加字符，也就是说getText后可调用append方法设置文本内容。android:capitalize setKeyListener(KeyListener) 属性说明: 设置自动大写属性。比如设置为2，自动大写单词首字符；设置为1，自动大写每句话的首字母等等。android:cursorVisible setCursorVisible(boolean) 属性说明: 设定光标为显示/隐藏，默认显示。android:digits setKeyListener(KeyListener) 属性说明: 设置允许输入哪些字符。如“1234567890.+-*/%\\n()”android:drawableBottom setCompoundDrawablesWithIntrinsicBounds(int,int,int,int) 属性说明: 在text的下方输出一个drawable。如果指定一个颜色的话会把text的背景设为该颜色，并且同时和background使用时覆盖后者。android:drawableEnd setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int) 属性说明: 在文本结尾处显示drawable对象。它的值可以是其它资源的引用，比如，\"@[+][package:]type:name\"或者\"?[package:][type:]name\"；也可以是颜色值，如\"#rgb\", \"#argb\", \"#rrggbb\", or \"#aarrggbb\"。android:drawableLeft setCompoundDrawablesWithIntrinsicBounds(int,int,int,int) 属性说明: 在text的左边输出一个drawable。android:drawablePadding setCompoundDrawablePadding(int) 属性说明: 设置text与drawable的间隔，与drawableLeft、drawableRight、drawableTop、drawableBottom一起使用，可设置为负数，单独使用没有效果。android:drawableRight setCompoundDrawablesWithIntrinsicBounds(int,int,int,int) 属性说明: 在text的右边输出一个drawable。android:drawableStart setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int) 属性说明: 在文本开始处显示drawable对象。它的值可以是其它资源的引用，比如，\"@[+][package:]type:name\"或者\"?[package:][type:]name\"；也可以是颜色值，如\"#rgb\", \"#argb\", \"#rrggbb\", or \"#aarrggbb\"。android:drawableTop setCompoundDrawablesWithIntrinsicBounds(int,int,int,int) 属性说明: 在text的正上方输出一个drawable。android:editable 属性说明: 设置是否可编辑。这里无效果，在EditView中才有效果。android:editorExtras setInputExtras(int) 属性说明: 设置文本的额外的输入数据。在EditView中才有效果。android:ellipsize setEllipsize(TextUtils.TruncateAt) 属性说明: 设置当文字过长时,该控件该如何显示。有如下值设置：”start”—–省略号显示在开头；”end”——省略号显示在结尾；”middle”—-省略号显示在中间；”marquee” ——以跑马灯的方式显示(动画横向移动)android:ems setEms(int) 属性说明: 设置TextView的宽度为N个字符的宽度。android:fontFamily setTypeface(Typeface) 属性说明: 文本的字形体系。android:freezesText setFreezesText(boolean) 属性说明: 设置保存文本的内容以及光标的位置。android:gravity setGravity(int) 属性说明: 设置文本位置，如设置成“center”，文本将居中显示。android:height setHeight(int) 属性说明: 设置文本区域的高度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)android:hint setHint(int) 属性说明: Text为空时显示的文字提示信息，可通过textColorHint设置提示信息的颜色。android:imeActionId setImeActionLabel(CharSequence,int) 属性说明: 设置IME动作ID。android:imeActionLabel setImeActionLabel(CharSequence,int) 属性说明: 设置IME动作标签。在EditView再做说明。android:imeOptions setImeOptions(int) 属性说明: 附加功能，设置右下角IME动作与编辑框相关的动作，如actionDone右下角将显示一个“完成”，而不设置默认是一个回车符号。android:includeFontPadding setIncludeFontPadding(boolean) 属性说明: 设置文本是否包含顶部和底部额外空白，默认为true。android:inputMethod setKeyListener(KeyListener) 属性说明: 为文本指定输入法，需要完全限定名（完整的包名）。例如：com.google.android.inputmethod.pinyin，但是这里报错找不到。android:inputType setRawInputType(int) 属性说明: 设置文本的类型，用于帮助输入法显示合适的键盘类型。在EditView中再详细说明，这里无效果。android:lineSpacingExtra setLineSpacing(float,float) 属性说明: 设置行间距。android:lineSpacingMultiplier setLineSpacing(float,float) 属性说明: 设置行间距的倍数。如”1.2”android:lines setLines(int) 属性说明: 设置文本的行数，设置两行就显示两行，即使第二行没有数据。android:linksClickable setLinksClickable(boolean) 属性说明: 设置链接是否点击连接，即使设置了autoLink。android:marqueeRepeatLimit setMarqueeRepeatLimit(int) 属性说明: 在ellipsize指定marquee的情况下，设置重复滚动的次数，当设置为marquee_forever时表示无限次。android:maxEms setMaxEms(int) 属性说明: 设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项。android:maxHeight setMaxHeight(int) 属性说明: 设置文本区域的最大高度android:maxLength setFilters(InputFilter) 属性说明: 限制显示的文本长度，超出部分不显示。android:maxLines setMaxLines(int) 属性说明: 设置文本的最大显示行数，与width或者layout_width结合使用，超出部分自动换行，超出行数将不显示。android:maxWidth setMaxWidth(int) 属性说明: 设置文本区域的最大宽度android:minEms setMinEms(int) 属性说明: 设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项。android:minHeight setMinHeight(int) 属性说明: 设置文本区域的最小高度android:minLines setMinLines(int) 属性说明: 设置文本的最小行数，与lines类似。android:minWidth setMinWidth(int) 属性说明: 设置文本区域的最小宽度android:numeric setKeyListener(KeyListener) 属性说明: 如果被设置，该TextView有一个数字输入法。此处无用，设置后唯一效果是TextView有点击效果，此属性在EdtiView将详细说明。android:password setTransformationMethod(TransformationMethod) 属性说明: 以小点”.”显示文本android:phoneNumber setKeyListener(KeyListener) 属性说明: 设置为电话号码的输入方式。android:privateImeOptions setPrivateImeOptions(String) 属性说明: 设置输入法选项，在EditText中才有作用。android:scrollHorizontally setHorizontallyScrolling(boolean) 属性说明: 设置文本超出TextView的宽度的情况下，是否出现横拉条。android:selectAllOnFocus setSelectAllOnFocus(boolean) 属性说明: 如果文本是可选择的，让他获取焦点而不是将光标移动为文本的开始位置或者末尾位置。TextView中设置后无效果。android:shadowColor setShadowLayer(float,float,float,int) 属性说明: 指定文本阴影的颜色，需要与shadowRadius一起使用。android:shadowDx setShadowLayer(float,float,float,int) 属性说明: 设置阴影横向坐标开始位置。android:shadowDy setShadowLayer(float,float,float,int) 属性说明: 设置阴影纵向坐标开始位置。android:shadowRadius setShadowLayer(float,float,float,int) 属性说明: 设置阴影的半径。设置为0.1就变成字体的颜色了，一般设置为3.0的效果比较好。android:singleLine setTransformationMethod(TransformationMethod) 属性说明: 设置单行显示。如果和layout_width一起使用，当文本不能全部显示时，后面用“…”来表示。如android:text=\"test_ singleLine \" android:singleLine=\"true\" android:layout_width=\"20dp\"将只显示“t…”。如果不设置singleLine或者设置为false，文本将自动换行android:text setText(CharSequence,TextView.BufferType) 属性说明: 设置显示文本.android:textAllCaps setAllCaps(boolean) 属性说明: 设置文本全为大写。值为\"true\"或\"false\"。android:textAppearance 属性说明: 设置文字外观。如“?android:attr/textAppearanceLargeInverseandroid:textColor setTextColor(int) 属性说明: 设置文本颜色android:textColorHighlight setHighlightColor(int) 属性说明: 被选中文字的底色，默认为蓝色android:textColorHint setHintTextColor(int) 属性说明: 设置提示信息文字的颜色，默认为灰色。与hint一起使用。android:textColorLink setLinkTextColor(int) 属性说明: 文字链接的颜色.android:textIsSelectable isTextSelectable() 属性说明: 设置非编辑文本可否被选择。值为\"true\"或\"false\"。android:textScaleX setTextScaleX(float) 属性说明: 设置文字之间间隔，默认为1.0f。android:textSize setTextSize(int,float) 属性说明: 设置文字大小，推荐度量单位”sp”，如”15sp”android:textStyle setTypeface(Typeface) 属性说明: 设置字形[bold(粗体) 0, italic(斜体) 1, bolditalic(又粗又斜) 2] 可以设置一个或多个，用“|”隔开android:typeface setTypeface(Typeface) 属性说明: 设置文本字体，必须是以下常量值之一：normal 0, sans 1, serif 2, monospace(等宽字体) 3]android:width setWidth(int) 属性说明: 设置文本区域的宽度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)。android:fadingEdgeLength设置淡入淡出边缘的长度，可以接受大小值的单位是：px、dp、sp、in、mm，也可以参考大小值资源android:fitsSystemWindows是否适合系统窗体，取值为true或false。该属性只对不是子组件的组件有效android:focusable是否可以获取焦点，取值true或falseandroid:focusableInTouchMode是否可以在触摸模式下获取焦点，true或falseandroid:hapticFeedbackEnabled是否允许触摸反馈效果，true或falseandroid:id提供该组件的标识名，可以借助Activity或View实例的findViewById方法通过id获取对应的组件实例对象，其属性值的形式为：android:id=”@+id/id”android:isScrollContainer设置该组件是否设置为滚动条容器，true或falseandroid:keepScreenOn控制该组件在显示的时候保持在屏幕显示，true或falseandroid:longClickable是否响应长时间点击事件，true或falseandroid:minHeight组件的最小高度，取值同android:fadingEdgeLengthandroid:minWidth组件的最小宽度，取值同android:fadingEdgeLengthandroid:nextFocusDown设置下一个向下获取焦点的组件，取值为idandroid:nextFocusLeft设置下一个向左获取焦点的组件，取值为idandroid:nextFocusRight设置下一个向右获取焦点的组件，取值为idandroid:nextFocusUp设置下一个向上获取焦点的组件，取值为idandroid:padding设置上、下、左、右4个边缘的填充距离，必须是一个大小值，取值同android:fadingEdgeLengthandroid:paddingBottom设置下端边缘的填充距离，取值同android:paddingandroid:paddingLeft设置左端边缘的填充距离，取值同android:paddingandroid:paddingRight设置右端边缘的填充距离，取值同android:paddingandroid:paddingTop设置上端边缘的填充距离，取值同android:paddingandroid:saveEnabled是否允许保存状态，取值为true或falseandroid:scrollX设置垂直滚动条的位移量，必须是一个大小值，取值同android:paddingandroid:scrollY设置水平滚动条的位移量，必须是一个大小值，取值同android:paddingandroid:scrollbarAlwaysDrawHorizontalTrack是否总是设置水平滚动条滑块，true或falseandroid:scrollbarAlwaysDrawVerticalTrack是否总是设置垂直滚动条滑块，true或falseandroid:scrollbarSize设置垂直滚动条的宽度和水平滚动条的长度，必须是一个大小值，取值同android:paddingandroid:scrollbarStyle设置滚动条的样式，取值为下列之一：insideOverlay在填充区域内，覆盖形式insideInset在填充区域内，插进形式（凹进）outsideOverly在绑定组件边缘，覆盖形式outsideInset在绑定组件边缘，插进形似android:scrollbarThumbHorizontal设置水平滚动条按钮的绘制资源，必须引用可绘制资源android:scrollbarThumbVertical设置垂直滚动条按钮的绘制资源，必须引用可绘制资源android:scrollbarTrackHorizontal设置水平滚动条轨道的绘制资源，必须引用可绘制资源android:scrollbarTrackVertical设置水平滚动条轨道的绘制资源，必须引用可绘制资源android:scrollbars设置滚动显示，可以为一下一个或多个值：none不显示滚动条horizontal只显示水平滚动条vertical只显示垂直滚动条android:soundEffectsEnabled是否允许音效，取值为true或falseandroid:tag设置标记内容，可以通过View类实例的getTag方法获取该组件的标记内容，或者使用findViewByTag通过标记来查找相应的子组件android:visibility设置初始化可见状态，取值为以下之一：visible可见（默认值）invisible不可见（其所占空间将留出）gone完全不可见（其所占空间都不会留出）线性布局LinearLayout组件属性列表属性说明android:baselineAligned基线对齐android:baselineAlignedChildIndex以指定子组件作为基线对齐android:gravity指定该物体放入其容器的重心位置，取值为下列之一：top上方，物体大小不变bottom下方，物体大小不变left左方，物体大小不变right右方，物体大小不变center_vertical垂直方向的中间，物体大小不变fill_vertical填满垂直方向，自动进行大小调整center_horizontal水平方向的中间，大小不变fill_horizontal填满水平方向，自动进行大小调整center居中（既是水平也是垂直方向的中间）fill填满整个容器clip_verticalclip_horizontalandroid:orientation布局方向，取值为下列之一：horizontal水平的vertical垂直的（默认值）android:weightSum组件的比重和LinearLayout_Layout属性说明android:layout_gravity当前子组件的心位置android:layout_height当前子组件的高度android:layout_weight当前子组件的空间比重，取值为浮点数android:layout_width当前子组件的宽度RalativeLayout属性说明android:gravity设置添加组件的重心android:ignoreGravity忽略布局重心的影响RalativeLayout_Layout属性说明android:layout_above将当前组件的下边缘放置于参照组件之上，该属性为参照组件的IDandroid:layout_alignBaseline当前组件与参照组件的基线对齐，该属性为参照组件的IDandroid:layout_alignBottom当前组件与参照组件的下边界对齐，该属性为参照组件的IDandroid:layout_alignLeft当前组件与参照组件的左边界对齐，该属性为参照组件的IDandroid:layout_alignParenBottom当前组件与父组件的下边界对齐，true或falseandroid:layout_alignParentLeft当前组件与父组件的左边界对齐，true或falseandroid:layout_alignParentRight当前组件与父组件的右边界对齐，true或falseandroid:layout_alignParentTop当前组件与父组件的上边界对齐，true或falseandroid:layout_alignRight当前组件与参照组件的右边界对齐，该属性为参照组件的IDandroid:layout_alignTop当前组件与参照组件的上边界对齐，该属性为参照组件的IDandroid:layout_alignWithParentIfMissing如果对应的兄弟元素找不到的话就以父元素做参照物 true或falseandroid:layout_below将当前组件的上边缘放置于参照组件之下，该属性为参照组件的IDandroid:layout_centerHorizontal当前组件放置到父组件的水平居中的位置android:layout_centerInParent当前组件放置到父组件的重心位置android:layout_centerVertical当前组件放置到父组件垂直居中的位置android:layout_toLeftOf将当前组件的右边缘放置于参照组件之下，该属性为参照组件的IDandroid:layout_toRightOf将当前组件的左边缘放置于参照组件之下，该属性为参照组件的IDAbsoluteLayout_Layout属性说明android:layout_x当前组件的x坐标位置（从左到右方向）android:layout_y当前组件的y坐标位置（从上到下方向）FrameLayout属性说明android:foreground前置图片android:foregroundGravity前置图片重心android:measureAllChildren在切换显示时是否侧重所有子组件的大小android:layout_gravity添加组件的重心FrameLayout_Layout属性说明android:layout_gravity当前子组件所添加的重心位置TableLayout属性说明android:collapseColumns设置允许折叠的列编号，列编号基于0，属性值可以是单个或多个列编号，编号与编号直接用逗号”,”分隔android:shrinkColumns设置允许收缩的列编号，列编号基于0，属性值可以是单个或多个列编号，编号与编号直接用逗号”,”分隔android:stretchColumns设置允许伸展的列编号，列编号基于0，属性值可以是单个或多个列编号，编号与编号直接用逗号”,”分隔TableRow_Cell属性说明android:layout_column设置该单元格的列编号（基于0）android:layout_span指明该单元格可以跨越的列数AbsListView属性说明android:cacheColorHint设置缓冲颜色android:drawSelectorOnTop是否将选择器绘制在备选条目上方，取值为true或falseandroid:fastScrollEnabled允许快速滚动android:listSelector指示选择器的内容android:scrollingCache滚动时是否使用绘制缓冲，true或falseandroid:smoothScrollbar平滑滚动条android:stackFromBottom从下方堆叠条目android:textFilterEnbled是否允许过滤android:transcriptMode设置抄本模式ListView属性说明android:choiceMode选择模式android:divider分割线颜色或组件的参考android:dividerHeight分割线高度android:entries指定绑定到当前列表视图的一个数组资源android:footerDividersEnabled是否允许页脚分割线android:headerDividersEnabled是否允许页眉分割线GridView属性说明android:columnWidth指定列宽android:gravity添加组件的重心位置android:horizontalSpacing水平空间android:numColumns指定列数android:strechMode伸展模式android:verticalSpacing垂直空间Gallery属性说明android:animationDuration动画持续时间android:gravity添加组件的重心位置android:spacing间隔空间android:unselectedAlpha非选择条目的透明度TextView属性说明android:autoLink是否自动链接（内容是网址或是电子邮件时）android:autoText自动更新拼音错误android:bufferType设置缓冲区类型android:capitalize自动大写android:cursorVisible光标是否可见，true或falseandroid:digits所接受的数字字符android:drawableBottom在文本下方绘制android:drawableLeft在文本左方绘制android: drawablePadding绘制填充区android: drawableRight在文本右方绘制android: drawableTop在文本上方绘制android:editable是否可编辑，true或falseandroid:editorExtras设置文本的额外的输入数据。在EditView中才有效果android:ellipsize当内容过长时会自动打断单词内容android:ems设置TextView的宽度为N个字符的宽度android:enabled是否可用，true或falseandroid:freezesText是否冻结文本android:gravity指明文本的重心位置android:height高度值android:hint指示内容android:imeActionId设置IME动作IDandroid:imeActionLabel设置IME动作标签android:imeOptions输入法选项android:includeFontPadding设置文本是否包含顶部和底部额外空白，默认为trueandroid:inputMethod指定输入法android:inputType输入类型，取值为下列之一：nonetext普通文本textCapCharacters大写字符textCapWords单词首字母大写textCapSentences句子首字母大写textAutoCorret自动更正textAutoComplete自动完成textMultiLine多行内容textUri，UritextEmailAddress电子邮件地址textEmailSubject电子邮件主题textShortMessage短消息textLongMessage长消息textPersonName个人姓名textPostalAddress邮政地址textPassword密码textVIsiblePassword可见的密码textWebEditText网页格式textFilter过滤字符串textPhonetic语言发音number数字numberSigned有符号数字numberDecimal十进制数字phone电话号码datetime日期时间date日期time时间android:lineSpacingExtra设置行间距 android:lineSpacingMultiplier设置行间距的倍数android:lines设置文本行数android:linksClickable设置链接是否点击连接，即使设置了autoLickandroid:marqueeRepeatLimit来回移动的动画次数android:maxEms设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项 android:maxHeight物体的最大高度android:maxLength最大文本长度android:maxLines最大行数android:minWidth物体的最大宽度android:minEms设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项 android:minHeight物体的最小高度android:minLines最小文本行数android:minWidth物体的最小宽度android:numeric是否使用数字输入方式android:password是否使用密码输入方式android:phonenumber是否使用电话号码输入方式android:privateImeOptions设置输入法选项 android:scrollHorizontally设置文本超出TextView的宽度的情况下，是否出现横拉条 android:selectAllOnFocus如果文本是可选择的，让他获取焦点而不是将光标移动为文本的开始位置或者末尾位置。TextView中设置后无效果。android:shadowColor文本阴影颜色android:shadowDx阴影的水平偏移android:shadowDy阴影的垂直偏移android:shadowRadius阴影的半径android:singleLine是否单行（不自动换行）android:text显示的文本内容android:textApperance基本字体颜色、字样、大小和样式android:textColor文本颜色android: textColorHighlight文本高亮颜色android: textColorHint文本提示颜色android:textColorLink文本链接颜色android:textScaleX文本缩放因数android:textSize文本大小android:textStyle文本样式，取值为下列之一：bold粗体italic斜体bolditalic粗斜体android:typeface字样android:width物体的高度AutoCompleteTextView属性说明android:completionHint显示提示android:completionHintView提示视图android:completionThreshold设置开始提示的字符数android:dropDownAnchor下拉框链接视图android:dropDownSelector下拉框选择器android:dropDownWIdth下拉框宽度ImageView属性说明android:adjustViewBounds是否调整视图范围android:baselineAlignBottom是否按照下端基线对齐android:cropToPadding是否按照填充进行裁剪android:maxHeight设置最大高度android:maxWidth设置最大宽度android:scaleType缩放类型，取值为下列之一：matrix图片真实大小fitXY适合图片大小fitStartfitCenterfitEndcenter居中显示centerCropcenterInsideandroid:src设置绘制用内容android:tint设置染色颜色值android:layout_above=\"@id/xxx\" 将控件置于给定ID控件之上 android:layout_below=\"@id/xxx\"将控件置于给定ID控件之下android:layout_toLeftOf=\"@id/xxx\" 将控件的右边缘和给定ID控件的左边缘对齐 android:layout_toRightOf=\"@id/xxx\" 将控件的左边缘和给定ID控件的右边缘对齐android:layout_alignLeft=\"@id/xxx\" 将控件的左边缘和给定ID控件的左边缘对齐android:layout_alignTop=\"@id/xxx\" 将控件的上边缘和给定ID控件的上边缘对齐 android:layout_alignRight=\"@id/xxx\"将控件的右边缘和给定ID控件的右边缘对齐android:layout_alignBottom=\"@id/xxx\" 将控件的底边缘和给定ID控件的底边缘对齐 android:layout_alignParentLeft=\"true\" 将控件的左边缘和父控件的左边缘对齐 android:layout_alignParentTop=\"true\" 将控件的上边缘和父控件的上边缘对齐 android:layout_alignParentRight=\"true\" 将控件的右边缘和父控件的右边缘对齐 android:layout_alignParentBottom=\"true\" 将控件的底边缘和父控件的底边缘对齐 android:layout_centerInParent=\"true\" 将控件置于父控件的中心位置 android:layout_centerHorizontal=\"true\" 将控件置于水平方向的中心位置 android:layout_centerVertical=\"true\" 将控件置于垂直方向的中心位置","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"}]},{"title":"使用IDE内置的Terminal","date":"2017-03-11T22:28:51.000Z","path":"2017/03/11/2017-03-11-utilizing-the-terminal-in-android-studio/","text":"这周终于把Google I/O 2016的Android App在Device上跑起来了，顺便尝试多多使用命令行进行编译或者安装。 1. 编译Android client并安装到本地设备官方提供了比较完善的Build Instructions，对于习惯于shift+F10的我来说，还是有点麻烦。 clone下来iosched，修改gradle.properities里面的supportLib等值，参考Build Instruction ， gradlew clean assembleDebug 往往这一步会开始下载gradle，非常耗时。参考了stackOverFlow，自己去下载gradle 3.3 -all.zip，放到/gradle/wrapper文件夹下，修改gradle-wrapper.properities，将其中的distributionUrl改成 distributionUrl=gradle-3.3-all.zip 等于直接省去上述下载步骤。Build完成后，敲入命令行 gradlew installNormalDebug 不出意外的话，即可进入主页面。 2. Server端配置Google io 2016 Android Client提供了Map Intergation和Youtube video display以及GCM等服务。这些全部集成在Google Cloud Platform上配置。 关于性能优化有一些建议： don’t do premature optimazition在你整天思考到底要用Enum还是IntDef的时候，你的网络库已经allocate了一大堆的垃圾。将精力集中在解决最严重的问题上。， 1. Systrace用于跟踪一段方法执行过程中的影响123456try &#123; Trace.beginSection(TAG); // do stuff &#125;finally &#123; Trace.endSection(); &#125; 计算一段方法到底花了多长时间，当然还是要在Android device monitor里面begin trace，注意要勾选Enable Application Traces from XXXX，选中自己的包名就好了。一开始可能不是特别好找，只要在html中ctrl+f找到了自己写的TAG，慢慢来应该能找到的。 2. FileObserverFileObserver可以监控设备上文件的更改，删除，读取。底层原理是使用了linux内核的inotify机制。 3. Environment.getXXX长什么样私有文件应该放在哪里，公开的文件适合放在哪里，tmp文件可以放在哪里。123456Log.i(\"codecraeer\", \"getFilesDir = \" + getFilesDir());Log.i(\"codecraeer\", \"getExternalFilesDir = \" + getExternalFilesDir(\"exter_test\").getAbsolutePath());Log.i(\"codecraeer\", \"getDownloadCacheDirectory = \" + Environment.getDownloadCacheDirectory().getAbsolutePath());Log.i(\"codecraeer\", \"getDataDirectory = \" + Environment.getDataDirectory().getAbsolutePath());Log.i(\"codecraeer\", \"getExternalStorageDirectory = \" + Environment.getExternalStorageDirectory().getAbsolutePath());Log.i(\"codecraeer\", \"getExternalStoragePublicDirectory = \" + Environment.getExternalStoragePublicDirectory(\"pub_test\")); 4.对象池(Object Pool)这个看一下Glide里面的BitmapPool就好了LruBitmapPool.javapool的大小是MemorySizeCalculator算出来的，考虑了App可以使用的最大内存和屏幕分辨率像素对应容量这两个因素。对象池主要关注put和get这两个方法。Glide中的LruBitmapPool.java中有一段很有意思的注释123456789101112@Override public synchronized Bitmap get(int width, int height, Bitmap.Config config) &#123; Bitmap result = getDirty(width, height, config); if (result != null) &#123; // Bitmaps in the pool contain random data that in some cases must be cleared for an image to be rendered // correctly. we shouldn't force all consumers to independently erase the contents individually, so we do so // here. See issue #131. result.eraseColor(Color.TRANSPARENT); &#125; return result; &#125; 就是说，从回收池里面取出来的Bitmap可能存储了一些脏数据，在复用之前要清除下旧数据。 另外，MotionEvent,Message以及Okio里面的Segment都是可以被recycle和obtain的可回收再利用对象。Andorid Bitmap后期支持了inBitmap，也是类似于回收再利用的概念。Bitmap有点不同，虽然内存中的表现形式只是二维byte数组。但在支持inBitmap之前，并不是每一个Bitmap都可以被直接回收用于存储下一个Bitmap. V4包里提供了简单的实现 5.MediaScanner是一个和有趣的可以扫描多媒体文件的类技术小黑屋 6. Drawable跟单例有点像官方文档上有这么一句，看起来很不起眼的Note: Each unique resource in your project can maintain only one state, no matter how many different objects you instantiate for it. For example, if you instantiate two Drawable objects from the same image resource and change a property (such as the alpha) for one object, then it also affects the other. When dealing with multiple instances of an image resource, instead of directly transforming the Drawable object you should perform a tween animation.这件事的意义在于，Drawable在整个Application中是单例。简单来说，getDrawable每次返回的都是一个新的Drawable，但Drawable只是一个Wrapper，放在res文件夹里的Drawable资源在整个Application中是单例。证明的方式很简单: 两个相同资源的Drawable可能不一样，但Drawable.getConstantState都是同一个instance。原理的话，参考 Cyril Mottier在2013年的演讲就跟xml是binary optimized的一样，亲测，在一个Activity中改变Drawable的Alpha属性，退出重新进，Drawable的Alpha就已经是被更改了的。在另一个Activity中引用这个Drawable，Alpha也受到影响。更严重的是，在一个Activity中使用((BitmapDrawable)getDrawable).getBitmap().recycle()，在另一个Activity中使用这个Drawable，直接报错：12345java.lang.RuntimeException: Canvas: trying to use a recycled bitmap android.graphics.Bitmap@c08bbc6at android.graphics.Canvas.throwIfCannotDraw(Canvas.java:1270)at android.graphics.Canvas.drawBitmap(Canvas.java:1404)at android.graphics.drawable.BitmapDrawable.draw(BitmapDrawable.java:544)at android.widget.ImageView.onDraw(ImageView.java:1228) 这种东西根本防不胜防。stackOverFlow上也有讨论被人为调用Bitmap.recycle()的res中的图片资源直接不能用了，怎么办，重新用BitmapFactory去decode或者创建一张Canvas，用原来的bitmap去画呗。照说Android 3.0之后就不应该调用Recycle方法了，记得Chet Haase说过，Recycle doesn’t do anything。另外一种说法是，bitmap.isMutable()返回是false的话(从res加载的)就不该去mutate。真要更改像素属性的话，可以创建一个Canvas，然后用原来的bitmap去画一个一样大的，或者用bitmap.copy方法创建一个新的。 7. Aidl里面有些关键字oneway关键字。AIDL 接口的实现必须是完全线程安全实现。 oneway 关键字用于修改远程调用的行为。使用该关键字时，远程调用不会阻塞；它只是发送事务数据并立即返回 8. 自定义View一个不容易发现的点自定义View的套路一般是这样的1234567891011121314151617public CustomTitleView(Context context, AttributeSet attrs) &#123; &#123; this(context, attrs, 0); &#125; public CustomTitleView(Context context) &#123; this(context, null); &#125; public CustomTitleView(Context context, AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); // 获得我们所定义的自定义样式属性 init(); &#125; &#125; 然后在layout里面去findViewById，妥妥的找不到。写在xml里面，会调到两个参数的构造函数，因为id这种东西写是在xml里面的，所以在两个参数的构造函数里面做事情就好了。 9. Dialog会出的一些错误9.1. showDialog之前最好判断下,activity.isFinishing否则会崩成这样：12345678E/AndroidRuntime: FATAL EXCEPTION: mainProcess: com.xxx.xxx, PID: 30025 android.view.WindowManager$BadTokenException: Unable to add window -- token android.os.BinderProxy@59d55fe is not valid; is your activity running? at android.view.ViewRootImpl.setView(ViewRootImpl.java:579) at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:310) at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:91) at android.app.Dialog.show(Dialog.java:319) ... 9.2. show一个Dialog，忘记关掉就finish，App不会崩，但日志里面有error：从用户角度来看，Dialog随着页面的关闭也关了123456E/WindowManager: android.view.WindowLeaked: Activity com.example.SomeActivity has leaked window com.android.internal.policy.PhoneWindow$DecorViewat android.view.ViewRootImpl.&lt;init&gt;(ViewRootImpl.java:380)at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:299)at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:91)at android.app.Dialog.show(Dialog.java:319)... 对比一下上面那个error，目测只有FATAL EXCEPTION才会导致App崩溃 9.3. activity finish掉之后再去Dismiss，先出2的日志，然后是一个fatal exception12345button.setOnClickListener &#123; v -&gt; showDialog() finish() // onBackPressed也一样 v.postDelayed( Runnable &#123; mDialg!!.dismiss() &#125;,2000)&#125; 12345678910//第一个是这个E/WindowManager: android.view.WindowLeaked: Activity com.xxx.DialogActivity has leaked window com.android.internal.policy.PhoneWindow$DecorView&#123;240a531 V//2秒之后出现这个E/AndroidRuntime: FATAL EXCEPTION: main Process: com.harris.simplezhihu, PID: 7256 java.lang.IllegalArgumentException: View=com.android.internal.policy.PhoneWindow$DecorView&#123;240a531 V.E...... R......D 0,0-1026,716&#125; not attached to window managerat android.view.WindowManagerGlobal.findViewLocked(WindowManagerGlobal.java:424)at android.view.WindowManagerGlobal.removeView(WindowManagerGlobal.java:350)at android.view.WindowManagerImpl.removeViewImmediate(WindowManagerImpl.java:123)at android.app.Dialog.dismissDialog(Dialog.java:362) 就崩了，dismiss之前先判断下isFinishing就没事了 9.4. dialog.show不是异步方法12showDialog()finish() App不会崩，和2一样的error日志,看来不是Fatal瞅一眼源码Dialog.java:1234567891011121314public void show() &#123; // ....... mWindowManager.addView(mDecor, l); mShowing = true; sendShowMessage();//发个消息给，OnShowListener &#125;private void sendShowMessage() &#123; if (mShowMessage != null) &#123; // Obtain a new message so this dialog can be re-used Message.obtain(mShowMessage).sendToTarget(); //sendToTarget是到主线程的MessageQueue去排队了 &#125; &#125; 所以ui上显示出Dialog和onShow不是一前一后(在同一个消息里面)调用的。12345678910111213141516171819202122private static final class ListenersHandler extends Handler &#123; private final WeakReference&lt;DialogInterface&gt; mDialog; public ListenersHandler(Dialog dialog) &#123; mDialog = new WeakReference&lt;&gt;(dialog); &#125; @Override public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case DISMISS: ((OnDismissListener) msg.obj).onDismiss(mDialog.get()); break; case CANCEL: ((OnCancelListener) msg.obj).onCancel(mDialog.get()); break; case SHOW: ((OnShowListener) msg.obj).onShow(mDialog.get()); break; &#125; &#125;&#125; 很容易想到onDismiss(Dialog)里面的dialog可能为null，(主线程恰好在排队，正好来一次GC)，可能性应该不大。 9.5. Dialog中有一个OnKeyListener，所以用户手动按返回键会去dismissDialog并消费掉事件，代码调用onBackPressed和手动按返回键是不一样的。 10. RecyclerView的ItemAnimator有很多方法可以overrideChet的Demo 11. 一些点 图片缓存策略 Rxjava如何管理生命周期 Okio源码 OkHttp中和WebView中Cookie是怎么处理的 Android上Socket的使用 注解 Android上的进程通信，共享内存问题 Webp格式 UI widget检查Thread是在ViewRootImpl里面有一段方法checkThread() 。 12. No Activity found to handle Intent { act=com.android.camera.action.CROPcom.android.camera.action.CROP并不是一个AOSP官方规定的Intent，有些设备上是会报错的。这个链接的作者是Mark Murphy，很有趣的一个人。stackOverFlow上也有讨论解决办法就是加一个catch(ActivityNotFoundException)就好了 13. Dalvik和Art崩的时候堆栈是不一样的//Dalvik是这么崩的1234567891011at android.view.View.performClick(View.java:4438)at android.view.View$PerformClick.run(View.java:18439)at android.os.Handler.handleCallback(Handler.java:733)at android.os.Handler.dispatchMessage(Handler.java:95)at android.os.Looper.loop(Looper.java:136)at android.app.ActivityThread.main(ActivityThread.java:5095)at java.lang.reflect.Method.invokeNative(Method.java)at java.lang.reflect.Method.invoke(Method.java:515)at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:786)at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:602)at dalvik.system.NativeStart.main(NativeStart.java) //art是这么崩的1234567891011at android.app.Activity.performStart(Activity.java:6311)at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2387)at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2484)at android.app.ActivityThread.access$900(ActivityThread.java:158)at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1352)at android.os.Handler.dispatchMessage(Handler.java:102)at android.os.Looper.loop(Looper.java:171)at android.app.ActivityThread.main(ActivityThread.java:5454)at java.lang.reflect.Method.invoke(Method.java)at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616) 14. 理解Canvas,surface,window等概念Dianne Hackborn的回答onDraw里面的canvas是lock surface得到的 15.如果想要用一个动画移动一个View的话，没必要animate更改LayoutParams更改LayoutParams看上去是现实生活中应该做的，但其实只需要用setTranslationX或者setTranslationY就好了。如果动画的每一帧都去更改layoutParams（会requestLayout，非常慢）,正确的做法是在视觉上做到正确的，animate TranslationX，这些是postLayout params，等动画结束后再把应有的layout属性设置上去。这样动画会更加流畅。 —- Android for Java Developers(Big Android BBQ 2015) – Chet Haase 16. tint跑在GPU上，background会invalidate整个Drawable如果想要动画渐变一个View的Background的话,animate tint即可，性能更好 17. SpringAnimation(具有弹性的动画)Facebook早在15年就推出了具有弹性的动画,谷歌在16年给supportLib添加了Spring Animation，都是相似的理念。弹性动画的关键是在keyFrame处算出非线性的值，用于设定UI控件展示状态。 18. Choreographer可以添加callbackdoFrame方法的参数是(long FrameTimeNanos)，这个时间需要除以1000 1000测试了一下，Frame确实是16毫秒更新一次，也就是接收到VSYNC信号的时机。其实简单的想一下，这样可以用来显示当前应用的帧率，16ms就是60FPS,20ms就是50FPS.论那些跑分软件是怎么做出来的。。。。当然更专业的方式应该是这个命令 adb shell dumpsys SurfaceFlinger –latency + 网上有人写了python脚本，看起来更加直观一点 19. 网络请求的Batch网络较差的情况下，可以将Request cache下来，等到网络较好的时候再执行。Jesse Wilson推荐使用TAPE有两种实现，基于文件系统的和基于内存的。基于内存的很简单，基于文件的能够在crash发生时自动回退。 20.getSystemService是存在memory leak问题的context.getSystemService源码分析到最后，是从一个Hashmap里面取出Serviceactivity.getSystemService -&gt; ContextImpl.getSystemService -&gt; SystemServiceRegistry.getSystemService(SystemServiceRegistry里面有个HashMap&lt;String, ServiceFetcher&lt;?&gt;&gt;)WifiManager存在leak的issue 21. PopupWindow在7.0和7.1上是存在问题的参考解决方式12345678910111213if (Build.VERSION.SDK_INT &lt; 24) &#123; popupWindow.showAsDropDown(button); &#125; else &#123; int[] location = new int[2]; // 获取控件在屏幕的位置 button.getLocationOnScreen(location); if (Build.VERSION.SDK_INT == 25) &#123; int tempheight = popupWindow.getHeight(); if (tempheight == WindowManager.LayoutParams.MATCH_PARENT || screenHeight &lt;= tempheight) &#123; popupWindow.setHeight(screenHeight - location[1] - button.getHeight()); &#125; &#125; popupWindow.showAtLocation(button, Gravity.NO_GRAVITY, location[0], location[1] + button.getHeight()); &#125; 22. onSaveInstance的调用顺序以及ActivityThread的一些点onSaveInstance在HoneyComb之前会在onPause前调用，HoneyComb开始，会在onStop前调用3.0之前的基本不用看了，目前在Android 25 sdk中ActivityThread.performStopActivityInner1234567891011121314151617if (!r.activity.mFinished &amp;&amp; saveState) &#123; if (r.state == null) &#123; callCallActivityOnSaveInstanceState(r); &#125; &#125;try &#123; // Now we are idle. r.activity.performStop(false /*preserveWindow*/); &#125; catch (Exception e) &#123; if (!mInstrumentation.onException(r.activity, e)) &#123; throw new RuntimeException( \"Unable to stop activity \" + r.intent.getComponent().toShortString() + \": \" + e.toString(), e); &#125; &#125; 其实Activity的所有onXXX都是由ActivityThread发起的，其实主函数也在这里。那么开始吧ActivityThread.handleLaunchActivity123456789101112131415161718192021222324252627private void handleLaunchActivity(ActivityClientRecord r, Intent customIntent, String reason)&#123; // ................... Activity a = performLaunchActivity(r, customIntent); //''''''''' if (a != null) &#123; handleResumeActivity(r.token, false, r.isForward, !r.activity.mFinished &amp;&amp; !r.startsNotResumed, r.lastProcessedSeq, reason); &#125; //''''''''''&#125;private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent)&#123; // ............ activity = mInstrumentation.newActivity( cl, component.getClassName(), r.intent); //Activity实例就是在这里面反射创建出来的 if (activity != null) &#123; //...... mInstrumentation.callActivityOnCreate(activity, r.state); /// onCreate if (!r.activity.mFinished) &#123; //经常会有人在onCreate里面finish activity.performStart(); // onStart r.stopped = false; &#125; &#125;&#125; 所以总的顺序是ActivityThread#handleLaunchActivity -&gt;ActivityThread#performLaunchActivity -&gt;反射创建Activity实例 -&gt;mInstrumentation.callActivityOnCreate -&gt;activity.performStart() -&gt;handleResumeActivity()以上都是在一个Message里面做的这个Message的what是“LAUNCH_ACTIVITY =100”，这个Message是基本的尿性是 handleXXX -&gt; performXXX另外,onActivityResult是在ActivityThread的deliverResults里面触发的 23. 编译出错 duplicate files copied in apk lib/x86/libRoadLineRebuildAPI.so 集成高德地图的时候 在app的build.gradle中添加123packagingOptions &#123; pickFirst &apos;lib/**.so&apos;&#125; 24. Could not resolve com.android.support:appcompat-v7:26.1.0Android Studio里面设置httpProxy要生效其实得看gradle.properities文件里面这几行1234systemProp.http.proxyPort=1080systemProp.http.proxyHost=127.0.0.1systemProp.https.proxyPort=1080systemProp.https.proxyHost=127.0.0.1 注意，maven(),google()这些库都是https的，所以得把https也勾上。 25. 执行gradlew命令多了之后c盘占用空间越来越小执行gradlew命令，会根据gradlew-wrapper.properities中设置的distributionUrl去下载对应的gradle-4.1-all.zip，然后unzip到 C://Users//username//.gradle//wrapper//dists 这个目录。所以切换到这个目录，可以把之前2.x,3.x的全部都删掉了，看了下大小，将近3个GB。还有每个Android项目的根目录下都有一个.gradle文件夹。按照linux文件系统的传统，前面加上一个点的意思都是隐藏文件。点进去看，里面的东西删除也没问题。 26. 在 AndroidStudio 工程点击 Run 按钮， 实际上做了什么操作呢？知乎的回答看下日志就很清晰了12345678910111213141516171817:35:33 Executing tasks: [:app:assembleDebug]17:35:34 Gradle build finished in 858ms03/06 15:50:39: Launching app$ adb push F:\\workspace\\clones\\AndroidRepo\\app\\build\\outputs\\apk\\debug\\app-debug.apk /data/local/tmp/com.me.harris.myapplication$ adb shell pm install -t -r &quot;/data/local/tmp/com.me.harris.myapplication&quot;Success$ adb shell am start -n &quot;com.me.harris.myapplication/com.me.harris.myapplication.MainActivity&quot; -a android.intent.action.MAIN -c android.intent.category.LAUNCHERClient not ready yet..Waiting for process to come onlineWaiting for process to come onlineConnected to process 16409 on device vivo-vivo_x9-a9c690fbSuccess$ adb shell am start -n &quot;com.didi.virtualapk/com.didi.virtualapk.MainActivity&quot; -a android.intent.action.MAIN -c android.intent.category.LAUNCHERClient not ready yet..Waiting for process to come onlineConnected to process 21777 on device samsung-sm_g9500-98895a473737504e42 简单来说就是gradle installDebug Android Stuido点击build按钮做了什么Configure Your Build 27. 多进程场景下Application的onCreate是会被多次调用的在Application的onCreate中添加日志123456789101112131415//正常的Application起来都是1Log.e(\"current-process-id is \"+android.os.Process.myPid()); // 1Log.e(\"current-thread-id is \"+Thread.currentThread().getId()); // 1//在应用内点击按钮起一个process，application的onCreate又被执行了一次Log.e(\"current-process-id is \"+android.os.Process.myPid()); // 12055Log.e(\"current-thread-id is \"+Thread.currentThread().getId()); // 1//这时候看下当前系统中跑的所有进程，这个12055的进程就在这里面ActivityManager mActivityManager = (ActivityManager)this.getSystemService(getApplicationContext().ACTIVITY_SERVICE); for (ActivityManager.RunningAppProcessInfo appProcess : mActivityManager.getRunningAppProcesses()) &#123; if (appProcess.pid == pid) &#123; processNameString = appProcess.processName; &#125; &#125; 至于原因的话，ActivityThread的handleCreateService方法中有这么一句： Application app = packageInfo.makeApplication(false, mInstrumentation);但是这个不会把MainActivity重新创建一个。 至于为什么要用多进程，微信Android客户端后台保活经验分享这篇文章中提到了微信至少用了三个进程，这篇文章还提到Shadowsocks-Android就开了个进程跑C程序来维护代理。记得系统给每个Application分配的内存总量不那么多，可以通过123456Runtime runtime = Runtime.getRuntime();LogUtil.w(TAG, String.valueOf(toMB(runtime.freeMemory()))); // 5.79MBLogUtil.w(TAG, String.valueOf(toMB(runtime.totalMemory()))); //14.13MB private String toMB(long number) &#123; return String.format(\"%.2f\", number / 1024.0 / 1024.0); &#125; 大概也就几十个MB的样子，确实不是很多。多进程下，等于平白多了几十MB的内存，对于缓解性能压力还是有好处的。 28. 关于Android APK 安装过程以下内容来自Android APK 安装过程详解首先APK 的本质是一个 Zip 压缩包，只是后缀被修改为 apk，其中打包了源代码编译出的 class.dex、一些图片视频资源文件和一些 Native 库文件。APK 文件与 Zip 文件最大的一个不同是 APK 包含签名信息，用于保证安装包安全不被修改。 ODEX 文件是 Dalvik 将 DEX 文件中可执行文件——class.dex——文件解压出来后，存储在本地后生成的。因为 Android 系统无法直接运行 APK 文件，需要将其解压后找到 class.dex 文件后才可以运行，因此在安装时就将其取出放在本地，可以提高应用启动速度。除了这个原因，其实在将 class.dex 转换成 ODEX 文件过程中，还根据当前系统进行了优化（直接复制到其他系统不一定可以运行），文件大小会减少，ODEX 文件比 DEX 文件更难反编译，这也在一定程度上提高了安全性，因此在一些系统预装或系统级应用大多采用了 ODEX 优化。一般 ODEX 不直接运行，在 Dalvik 运行 ODEX 时，需要通过 JIT 进行优化，提高运行效率。JIT 是一种在运行时同步将字节码转化成机器码的过程，Dalvik 直接运行转化后的机器码，这会导致部分的内存和时间开销，但是整体来说，在某些情况下是会提高系统性能的。（有些动态编译器，可能根据经验或尝试编译，优化这一过程，可能运行次数越多，优化效果越好）OAT 文件是 ART 运行的文件，是一种二进制可运行文件，包含 DEX 文件和编译出的本地机器指令文件，其文件格式类似于网络数据报文，包含文件头和文件体，文件头的 oatdata、oatexec 和 oatlastword 字段分别描述 DEX 文件位置和本地机器指令的起止位置。因为 OAT 文件包含 DEX 文件，因此比 ODEX 文件占用空间更大，由于其在安装时经过了 ART 的处理，ART 加载 OAT 文件后不需要经过处理就可以直接运行，它没有了从字节码装换成机器码的过程，因此运行速度更快。可以理解为 JIT 从运行时才解析提前到了安装时解析，安装变慢，运行变快。 29.Android的动画分为Animation和Animator实现android 动画原理.ObjectAnimator和ValueAnimator这些东西要记得在页面销毁的时候去cancel或者end。end会通知一声onAnimationUpdate，cancel不会。所以不要在onAnimationUpdate里面调用end -&gt; onAnimationUpdate里面调用end -&gt; onAnimationUpdate里面调用end -&gt; onA…. Fatal Exception: java.lang.StackOverflowErrorat android.animation.ValueAnimator.getOrCreateAnimationHandler(ValueAnimator.java:1332) 30. 在api24之前，WifiManager存在leak On versions prior to Android N (24), initializing the WifiManager via Context#getSystemService can cause a memory leak if the context is not the application context 31. Android手机显示的电量是从哪读取的？batterystats.bin不是用来做电池校正的。2012年1月13日，DianneHackborn在G+上给出了答案：12345Today&apos;s myth debunking:&quot;The battery indicator in the status/notification bar is a reflection of the batterystats.bin file in the data/system/ directory.&quot;No, it does not. 这个文件只是用来显示“设置”里面App耗电量的,across reboot。深入浅出Android App耗电量统计这篇文章指出，实际读取的文件位置由OEM厂商决定，官方文档 device///frameworks/base/core/res/res/xml/power_profile.xml 这个文件 其实这一段adb命令就可以了 adb shell dumpsys batterystats","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"使用Kotlin进行java开发","date":"2017-01-13T23:06:13.000Z","path":"2017/01/13/2017-01-13-embracing-kotlin/","text":"Kotlin是Jetbrain公司推出的面向jvm的语言，编译后的bytecode和java编写的代码并没有什么区别。 1. 基本语法 没有new关键字 123456789 主函数 fun main(args : Array&lt;String&gt;) &#123; for (i in args.indices) &#123; print(args[i]) &#125;&#125;自定义函数 fun getStringLength(obj: Any) :Int?{ //问号代表有可能返回空值 if (obj is String) { return obj.length } return 0} 12345678 支持lambda fun maps(list: List&lt;String&gt;) &#123; list.filter &#123; it.startsWith(&quot;a&quot;) &#125; .sortedBy &#123; it &#125; .map(String::toUpperCase) .forEach(::print)&#125; 2. 集合相关1234567891011121314151617181920212223242526272829303132//带index的迭代一个集合的方式val quoteParts = &quot; YOU JUST TALKED TO MUCH !&quot;.split(&quot; &quot;)for ((index, value) in quoteParts.withIndex()) &#123; print(&quot;reading index $index: $value &quot;)&#125;//和java定义的List interface不一样，Kotlin定义的interface默认是没有add,remove这些修改性质的方法的。// List&lt;out T&gt;这种集合默认只提供了只读的方法，比如get ,size。想要更改内容需要使用MutableList接口提供的方法// 直接看代码的话，一个提供了readOnlyMethod，修改(add ,remove ,set ...)的方法是通过MutableList提供的val numbers: MutableList&lt;Int&gt; = mutableListOf(1, 2, 3)val readOnlyView: List&lt;Int&gt; = numbers //将原先一个可修改的List包装成一个“只读”的Listprintln(numbers) // prints &quot;[1, 2, 3]&quot;numbers.add(4)println(readOnlyView) // prints &quot;[1, 2, 3, 4]&quot; 但是不完全只读，通过修改底层list还是能只读readOnlyView.clear() // -&gt; does not compileval items = listOf(1, 2, 3) //彻底的只读public interface MutableList&lt;E&gt; : List&lt;E&gt;, MutableCollection&lt;E&gt; &#123; override fun clear(): Unit public fun add(index: Int, element: E): Unit&#125;读取一个List的元素推荐使用数组下标items.get(0) //ide会提示推荐使用下面这种方式items[0] //map也是，推荐通过类似于数组下标的方式去获取value 3. implementing an interface not like in java如果接口只有一个方法简单用lambda 1button.setOnClickListener( &#123; v-&gt; System.out.print(v.id)&#125;) 如果有多个方法，语法就显得啰嗦的多 12345678910111213val handler = object : DisposableObserver&lt;Bitmap&gt;() &#123; override fun onError(e: Throwable) &#123; LogUtil.d(&quot;e&quot;) &#125; override fun onNext(t: Bitmap) &#123; image_two!!.setImageBitmap(t) &#125; override fun onComplete() &#123; LogUtil.d(&quot;completed&quot;) &#125; &#125; 4. 没有new关键字了12345678910class somClass&#123; fun printMsg(msg : String)&#123; println(msg) &#125;&#125;fun main(args: Array&lt;String&gt;)&#123; val instance = somClass() // 直接把new给删了 instance.printMsg(&quot;Hey there&quot;)&#125; 5. java Bean不需要写废话了123456789101112131415161718192021data class SomeThing(val id: Int)//用的时候val instance = SomeThing(10)//这种data class会主动对外提供非private属性(都不能叫Field了)的访问权（类似get set）。有些get方法会刻意复写getterprivate val foo = calcValue(&quot;foo&quot;) //这个只会在第一次访问属性的时候调用这个方法private val bar get() = calcValue(&quot;bar&quot;) //主动添加的get方法，意味着每次调用属性都会调用这个方法private fun calcValue(name: String): Int &#123; println(&quot;Calculating $name&quot;) return 3&#125;// 自定义getter和settervar stringRepresentation: String get() = this.toString() set(value) &#123; setDataFromString(value) // parses the string and assigns values to other properties &#125; 6. 具有更好语义的typealis123typealias CustomerName = Stringdata class Customer(val name: CustomerName,val email: String) 跟linux上的alias差不多，CustomerName其实就是String，但使用typealias使得传数据时更不容易错误。 7. switch case用when来写123456789101112131415161718192021222324252627282930fun returnSomeThing(input :Any) : String&#123; val actual = when(input)&#123; 1 -&gt; &#123; println(&quot;1&quot;) &#125; 2 -&gt; &#123; println(&quot;2&quot;) &#125; is Int -&gt; &#123; println(&quot;is Int&quot;) &#125; else -&gt;&#123; println(&quot;don&apos;t know which one&quot;) &#125; &#125; return actual.toString()&#125;// when ... is ...是根据传入的object的class类型来进行判断的when (x) &#123; is Foo -&gt; ... is Bar -&gt; ... else -&gt; ...&#125; 8. 能够接受一个函数作为参数在调用一些资源的时候，经常需要用完了关闭掉1234567891011121314fun using(resource: Closeable, body: () -&gt; Unit) &#123; try &#123; body() &#125;finally &#123; resource.close() &#125;&#125;val inputstram = FileInputStream(&quot;/&quot;) as FileInputStream using(inputstram)&#123; // do stuff with this resource // it will close for you &#125; 9. 获取this使用this@MyActivity即可 10. findViewById怎么写 changeval listView = findViewById(R.id.list) as ListView toval listView = findViewById(R.id.list) 参考1234567891011封装：fun &lt;V : View&gt; Activity.bindView(id: Int): Lazy&lt;V&gt; = lazy &#123; viewFinder(id) as V&#125;private val Activity.viewFinder: Activity.(Int) -&gt; View? get() = &#123; findViewById(it) &#125;之后我们就可以在 Activity 中这样注入 View 了val mTextView by bindView&lt;TextView&gt;(R.id.text_view) 11.extends需要把parentClass设置为open1234567open class MySuperClass(parameter:String)class MyClass2 &#123; object AnonymousSubClass:MySuperClass(\"something\"),MyInterface1,MyInterface2 &#123; &#125;&#125; 12.没有static 关键字了，静态方法的写法123456789101112131415161718class Controller &#123; private val _items = mutableListOf&lt;String&gt;(&quot;1&quot;,&quot;2&quot;,&quot;4&quot;) val items: List&lt;String&gt; get() = _items.toList() companion object &#123; fun checkType(args:Any?)&#123; when(args)&#123; is String -&gt; println(&quot;This is an String Type&quot;) is Int -&gt; println(&quot;This is Some Integer Number &quot;) else -&gt; println(&quot;i don&apos;t recognize this format doom.....&quot;) &#125; &#125; &#125;&#125;//外部调用Controller.checkType(10) // -&gt; This is Some Integer Number//在另一个class中调用Controller.Companion.checkType(18) //和static方法一样，如果方法是private的话，外部也访问不了 13. class cast1val modifiableMap :MutableMap&lt;String,String&gt; = unmodifiableMap as MutableMap&lt;String, String&gt; //使用as关键字 14. by lazy和lateinit的区别参考12345678910111213141516171819val myUtil by lazy &#123; MyUtil(parameter1, parameter2)&#125;// 第一次调用myUtil的时候会调用val instance :HashMap&lt;String,String&gt; by lazy &#123; HashMap&lt;String,String&gt;()&#125;//所以看上去就特别适合作为instance//官方推荐的实现singleton的方式object Resource &#123; val name = &quot;Name&quot;&#125;lateinit var myUtil: MyUtil// 使用的时候myUtil = MyUtil(parameter1, parameter2)// 这明显是把变量的初始化与定义分离开了。 显然的区别是一个是val 一个是var。 如果是值可修改的变量（即在之后的使用中可能被重新赋值），使用 lateInit 模式如果变量的初始化取决于外部对象（例如需要一些外部变量参与初始化），使用 lateInit 模式。这种情况下，lazy 模式也可行但并不直接适用。如果变量仅仅初始化一次并且全局共享，且更多的是内部使用（依赖于类内部的变量），请使用 lazy 模式。从实现的角度来看，lateinit 模式仍然可用，但 lazy 模式更有利于封装你的初始化代码。 15. NPE还是会有的12345val files = File(&quot;&quot;).listFiles()println(files.size) // crashval files = File(&quot;&quot;).listFiles()println(files?.size) // 输出 null ?的意思类似于优先判空 16. let ,apply ,with,run方法1234567891011121314151617181920/** * Calls the specified function [block] with `this` value as its argument and returns its result. */// let，其实就是一个实例化的对象上添加一个extension methodval result =&quot;Hello World&quot;.let &#123; println(it) //这个it是一个关键字 520 &#125;println(result)输出&quot;Hello World&quot;520// 如果不为Null的话，执行下面这一段代码块val value = ...value?.let &#123; ... // execute this block if not null&#125; 17. with关键字用于同时调用一个Instance 的多个method12345678910111213141516171819202122class Turtle &#123; fun penDown() fun penUp() fun turn(degrees: Double) fun forward(pixels: Double)&#125;val myTurtle = Turtle()with(myTurtle) &#123; //draw a 100 pix square penDown() for(i in 1..4) &#123; forward(100.0) turn(90.0) &#125; penUp()&#125; // java7 的try with resourcesval stream = Files.newInputStream(Paths.get(&quot;/some/file.txt&quot;))stream.buffered().reader().use &#123; reader -&gt; println(reader.readText())&#125; stackoverflow ref Kotlin in production 10 Kotlin Tricks in 10 ish minutes by Jake Wharton​ Try Kotlin What can Kotlin do for me? (GDD Europe ‘17)","tags":[{"name":"kotlin","slug":"kotlin","permalink":"https://haldir65.github.io/tags/kotlin/"}]},{"title":"linux基本命令介绍","date":"2017-01-07T15:38:43.000Z","path":"2017/01/07/2017-01-07-Linux-Basic-Commands/","text":"一些常用的linux基本命令,仅作为参考。 nohup node server.js &gt; /dev/null 2&gt;&amp;1 &amp; 首先是连接vps的ssh(Secure Shell)工具，putty或者xshell都可以,putty改颜色教程。 重启 reboot关机 shutdown -h now #或者 halt 速查手册 文件操作 Vi文本编辑器 bash脚本怎么写 用户和用户组的问题 文件权限 管道 硬件相关的命令 软件的安装，卸载 网络监控 查看进程 通用配置 参考 另外一篇关于linux命令的补充 1. 文件操作常用命令1234567891011121314151617181920212223- &gt; cd //进入目录- &gt; cd / 返回根目录- &gt; pwd // 显示当前目录- &gt; ls // 显示当前目录下内容# ls -halt is for human readable, show hidden, print details, sort by datels –l –R(或-lR) src &gt; list.txt ##列出文件列表- &gt; mkdir //新建目录- &gt; rmdir //删除目录,如果目录不为空，- &gt;使用 rm -r //递归删除- &gt; rm -rf //强制删除文件名一般不支持空格，如果真有的话得用单引号括起来，像这样:-&gt; rm -f 'my file'-&gt; mv a.mp4 b.mp4 //mv虽然是移动（Windows中的剪切）操作，但这种情况下就等同于重命名了，亲测有效# 重命名rename是实际意义上的重命名命令，但rename接受三个参数- &gt; touch filename //创建文件，后缀在linux下没意义另外,touch 命令主要是用来改文件的时间戳的- &gt; touch -t 201707081238.34 file.txt //把这个文件的时间戳改成2017年XXX。。。 复制粘贴：12345678910- &gt; cp a b //把a复制一份，命名为b- &gt; cp d1 d2 // 这样是不行的，复制目录需要加上-r ，即- &gt; cp -r d1 d2移动(左边是被移动的文件或目录，右边是目标路径)：- &gt; mv d1 / 把d1移动到相对路径，也就是根目录下- &gt; mv d1 ../把d1往上移动一层- &gt; mv d1 ../../ 重定向123456789101112131415161718重定向输出 &gt;ls &gt; lsoutput.txt #用于将输出的结果写入一个新的文本文件中cat &gt; newfile // 所以重定向也能用于创建新的文件echo 'hey man' # 类似于printecho 'hello' &gt; log.txt #把这句话写入到文本中 ，覆盖其原有内容&gt;&gt; 表示追加，不覆盖,append###重定向输入 &lt;wall &lt; aa.txt # wall是向所有用户发广播， 即从aa.txt中读取内容，然后广播发出去bash &lt;(curl -L -s https://install.direct/go.sh) // 比如说随便从网上下一个sh文件下来，然后用bash执行#service命令service XXX start/stop/status #原理是将这些程序注册成为系统服务，这样调用这些程序的时候就不需要写一大堆绝对路径了，具体用法help已经很详细了。zip –q –r video.zip /home/videozip –q –r video.zip . # .代表当前目录建议加上-v，不然等很久 2. Vi文本编辑器12345678910111213141516171819202122- &gt; vi 3.txt // 如果有则编辑，没有则直接创建## 跳到文件开头处[[##跳到文件结尾处]]##Vi分为命令模式和编辑模式，一进来是命令模式，输入'a'进入编辑模式##切换回命令模式按'esc'## 命令模式下 :w 表示存盘- :q 退出- :wq 保存并退出- :q! 不保存退出（无内容变化）yy、Y 复制当前光标所在的行nyy 复制当前光标所在处以及以下的n行dd ：剪切当前光标所在处的行ndd ：剪切当前光标所在处及以下的n行p：在当前光标处下面粘贴内容。P：在当前光标处上面粘贴内容。 在编辑模式下,输入 ‘dd’删除一行 ，输入’dw’删除一个词输入’o’插入一行。。。。。。 123456789101112131415161718192021222324252627- &gt; more filename//查看文件内容(一页一页的显示档案内容)- &gt; less filename// 也是查看(less 与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页！)- &gt; cat filename //正序查看文件内容- &gt; tac filename //逆序查看文件内容- &gt; nl： 显示的时候，随便输出行号！- &gt; more： 一页一页的显示档案内容- &gt; less 与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页！对less显示出的内容中可以使用 /'字符' 输入需要查找的字符或者字符串并高亮显示，而more 不具备(亲测很好用)- &gt; head： 查看头几行- &gt; tail： 查看尾几行- &gt; head - 3 filename //只查看文件前面三行- &gt; tail - 3 filename //只查看倒数后三行- &gt; tail -n 3 filename //和上面是一样的- &gt; xxd -b fileName // 看binaryFile不能用cat- &gt; od： 通常使用od命令查看特殊格式的文件内容。通过指定该命令的不同选项可以以十进制、八进制、十六进制和ASCII码来显示文件。d 十进制o 八进制（系统默认值）x 十六进制n 不打印位移值od -c filename(以字符方式显示)od -Ax -tcx4 filename(以十六进制和字符同时显示) tail还有一个好处，可以实时查看文件内容，比如文件正在更新，可以实时查看最新的日志 tail -f /var/log/messages 亲测，一个10MB的log文件，就这么cat的话，会把putty搞死 所以后台开发就喜欢这么干: tail一个日志，狂按回车键，然后用客户端访问某个url，看下有没有报错。 更多命令如 find 、 whereis 、 Li(Link)查找：123456find / -name filename //在根目录下查找文件find /etc -name filename //在etc目录下查找文件grep stringtofind filename //在指定的文本文件中查找指定的字符串whereis ls //查看ls命令所执行的是哪个文件及其位置(查看系统文件所在路径) 3. linux下shell脚本语句的语法linux大小写敏感eg:1234567891011121314151617181920212223242526272829303132333435#!/bin/shmyPath=\"/var/log/httpd/\"myFile=\"/var /log/httpd/access.log\"#这里的-x 参数判断$myPath是否存在并且是否具有可执行权限if [ ! -x \"$myPath\"]; thenmkdir \"$myPath\"fi#这里的-d 参数判断$myPath是否存在if [ ! -d \"$myPath\"]; thenmkdir \"$myPath\"fi#这里的-f参数判断$myFile是否存在if [ ! -f \"$myFile\" ]; thentouch \"$myFile\"fi#其他参数还有-n,-n是判断一个变量是否是否有值if [ ! -n \"$myVar\" ]; thenecho \"$myVar is empty\"exit 0fi#两个变量判断是否相等if [ \"$var1\" == \"$var2\" ]; then //if 后面必须加thenecho '$var1 eq $var2'elseecho '$var1 not eq $var2'fi //else后面必须加fi if list then do something here elif list then do another thing here else do something else here fi eg: echo类似于print123456789##例：myvar=“Hi there！” echo $myvar ## Hi there！ echo \"$myvar\" ## Hi there! echo ' $myvar' ## $myvar echo \\$myvar ## $myvar 1234567#!/bin/bashecho \"hello there\"foo=\"Hello\"foo=\"$foo World\" ## 拼接一个现成的string到另一个string的尾部，用冒号跟美元符号就好了echo $fooecho \"Number of files in this directory: `ls | wc -l`\" ## 但是将ls | wc -l的输出作为一个String拼接到一个string中，用单引号echo \"all the files under the directory `ls /usr/*/g* | head -n3`\" 4. 用户和用户组的问题12345678910111213141516171819202122232425262728293031323334id userName // 查看当前用户的信息，比如是不是sudo之类的useradd user //添加用户，(-g 指定用户所在用户组)/home目录下会多一个user的目录，作为该用户的主目录sudo su - userName // 从root直接切到userName，具有sudo权限给一个user管理员权限:usermod -aG sudo userNamepasswd user //设置user的密码，会提示输入密码，密码不会显示在窗口中cd /etc &gt;&gt;&gt; more passwd ，这里面会显示所有的用户more group ,显示用户组的信息groupadd groupname //添加一个用户组//删除用户userdel user //删除一个用户这么删除还没删干净，需要把/home/username删掉还需要删除该用户的主目录(rm -rf user)重启机器，登录页面选择新用户即可完成用户切换或者使用 su testuser 切换到testuser身份exit就回到root用户的身份禁止某个用户登录的原理在/etc/shadow中存储了每个用户的密码的hash值，在前面有!的都是不能登录的加!的方法: usermod -L username解锁的方法: passwd username/etc/group存储了用户组的信息/etc/shadow存储了密码的hash值/etc/passwd存储了系统中所有用户的主目录路径，例如/home/username新用户登录时，默认的是该用户的主目录 ~/ 5. 文件权限的问题ls命令执行显示的文件前一般带有一串信息第一位： 代表文件l代表链接d代表目录 后面九位划分为三块，可能的权限有这么几种r(read权限)w(写权限)-(无权限)x(执行权限) 第一组代表所有者(u)权限，第二组代表与所有者一个用户组的用户(g)的权限，第三组代表其他用户(O)的权限user,user group还有other 更改文件权限命令: chmod(个人测下来要加sudo才行)12345678910sudo chmod +x filename //加上可执行权限，所有用户都加上了sudo chmod u+x filename //给当前用户加上可执行权限u：用户g：组o：其它用户a：所有用户```shell$chmod a+x main 对所有用户给文件main增加可执行权限$chmod g+w blogs 对组用户给文件blogs增加可写权限 //其他命令不一一列举 u ：目录或者文件的当前的用户 g ：目录或者文件的当前的群组 o ：除了目录或者文件的当前用户或群组之外的用户或者群组 a ：所有的用户及群组 r ：读权限，用数字4表示 w ：写权限，用数字2表示 x ：执行权限，用数字1表示 ：删除权限，用数字0表示 所以给所有用户增加a.txt文件的可执行权限就像这样chmod a+x a.txt #其余自行发挥chmod a-x a.txt #删除所有用户的可执行权限 chmod 755 filename751应该是读/写/执行chomod 444 filename# 为所有用户分配读权限chmod 777 filename //全部权限都有了，其实上面的9位就是这三位数每一位的二进制拼起来的755 就是 111101101,也就对应上面的权限九位字母 chown -R Jane /foldername # 把flodername文件夹的所有者改为Jane， -R 表示递归，会保证所有子文件夹的所有者也被更改 1234567891011121314更改文件所有者&gt; chown username filename### 6. 管道将一个命令的输出传送给另一个命令，作为另一个命令的输入eg: 中间那条竖线叫做管道连接符```shell$ cat /etc/passwd | grep usernametofind$ ls -l | grep &quot;^d&quot;$ ls -l * | grep &quot;^-&quot; | wc -| //&quot;^-&quot;表示不列出目录或链接，只展示目录；wc是数行数$ ls -l | grep &quot;^d&quot; //只列出目录 7. 硬件相关的命令查看硬盘存储空间:1234567df -h //h的意思是human-readabledu -sh //查看当前directory的大小du -h //查看当前目录下各个子目录分别的大小dh -h img// 查看img目录下文件及文件夹的大小dh -h img/1.jpg //查看指定文件的大小du -hsBM //查看当前目录的大小(s表示summary)，以MB为单位du -hsBM /var/* | sort -n //查看/var目录下全部文件，从小到大排列 12345678910查看cpu信息&gt; cat /proc/cpuinfo查看内存&gt; cat /proc/meminfo | grep Mem&gt;free -mfree -h # human readable修改默认安全设置&gt; vi /etc/ssh/ssd_config 添加或修改123Port 22 (ssh默认端口修改)PermitRootLogin without-Password noAllowUsers userName 把登录端口改大一点还是很有必要的，亲测不难12vi /etc/ssh/sshd_configservice ssh restart 搞定 看下成功登录历史1234- last | less | sort -rn### who 命令更好，是指wtmp文件创建以来的登录记录who /var/log/wtmp 压缩文件命令将/home/video/ 这个目录下所有文件和文件夹打包为当前目录下的video.zip1zip –q –r -v video.zip . #加上一个-v主要是为了能够实时查看输出 文件传输（linux -&gt;windows）： 一般使用putty ssh到Linux主机，想要把Linux上的文件弄到Windows中，需要使用pscp工具。下载好pscp.exe后，放到c:/windows/system32下面。打开cmd。输入命令1pscp -r root@202.123.123.123:\"/root/fileonServer.mp4\" d:/whateveriwantonmyPc.mp4 ，确认后输入root密码就好了。我主要是用来下载视频的。有时候会出现Connection Refused Error。1&gt; netstat -anp | grep sshd 看下跑在哪个端口然后 pscp -P 12345-r root@202.123.123.123:”/root/fileonServer.mp4” d:/whateveriwantonmyPc.mp4 ## -p要大写 8. 软件的安装，卸载(dpkg命令，不要只会apt-get) 在debian下，你可以使用dpkg(Debian package system)来安装和卸载软件包。 还是那句话，没事不要手贱升级软件123456789101112131415161718### （1）移除式卸载：apt-get remove softname1 softname2 …; （移除软件包，当包尾部有+时，意为安装）### （2）清除式卸载 ：apt-get --purge remove softname1 softname2...;(同时清除配置)### 清除式卸载：apt-get purge sofname1 softname2...;(同上，也清除配置文件)### （1）移除式卸载：dpkg -r pkg1 pkg2 ...;###（2）清除式卸载：dpkg -P pkg1 pkg2...;### 使用dpkg安装deb包dpkg -i tcl8.4_8.4.19-2_amd64.deb ###使用kpkg -r来删除deb包dpkg -r tcl8.4 参考Ubuntu 中软件的安装、卸载以及查看的方法总结 关于apt-get12345678910111213141516171819202122232425262728293031323334353637apt-cache search # ------(package 搜索包)就是看下符合这个名称的在repository中包有哪些apt-cache show #------(package 获取包的相关信息，如说明、大小、版本等)apt-get install # ------(package 安装包)apt-get install # -----(package --reinstall 重新安装包)apt-get -f install # -----(强制安装, \"-f = --fix-missing\"当是修复安装吧...)apt-get remove #-----(package 删除包)apt-get remove --purge # ------(package 删除包，包括删除配置文件等)apt-get autoremove --purge # ----(package 删除包及其依赖的软件包+配置文件等（只对6.10有效，强烈推荐）)apt-get update #------更新源apt-get upgrade #------更新已安装的包apt-get dist-upgrade # ---------升级系统apt-get dselect-upgrade #------使用 dselect 升级apt-cache depends #-------(package 了解使用依赖)apt-cache rdepends # ------(package 了解某个具体的依赖,当是查看该包被哪些包依赖吧...)apt-get build-dep # ------(package 安装相关的编译环境)apt-get source #------(package 下载该包的源代码)apt-get clean &amp;&amp; apt-get autoclean # --------清理下载文件的存档 &amp;&amp; 只清理过时的包apt-get check #-------检查是否有损坏的依赖dpkg -S filename -----查找filename属于哪个软件包apt-file search filename -----查找filename属于哪个软件包apt-file list packagename -----列出软件包的内容apt-file update --更新apt-file的数据库dpkg --info \"软件包名\" --列出软件包解包后的包名称.dpkg -l --列出当前系统中所有的包.可以和参数less一起使用在分屏查看. (类似于rpm -qa)dpkg -l |grep -i \"软件包名\" --查看系统中与\"软件包名\"相关联的包.dpkg -s 查询已安装的包的详细信息.dpkg -L 查询系统中已安装的软件包所安装的位置. (类似于rpm -ql)dpkg -S 查询系统中某个文件属于哪个软件包. (类似于rpm -qf)dpkg -I 查询deb包的详细信息,在一个软件包下载到本地之后看看用不用安装(看一下呗).dpkg -i 手动安装软件包(这个命令并不能解决软件包之前的依赖性问题),如果在安装某一个软件包的时候遇到了软件依赖的问题,可以用apt-get -f install在解决信赖性这个问题.dpkg -r 卸载软件包.不是完全的卸载,它的配置文件还存在.dpkg -P 全部卸载(但是还是不能解决软件包的依赖性的问题)dpkg -reconfigure 重新配置install snap package(通常通过apt-get install软件时候会顺带将该软件所需要的依赖也安装下来，下次装一个其他软件的时候如果有类似的依赖，就直接用了。而snap package本身就bundle了所需的依赖)。这个概念还比较新，仅限于ubuntu,debian也没有。 9. 网络监控tcpdump结合wireshark可实现完整的网络抓包，这个放在下面写。 123456789101112netstatnetstat -i ## 查看某个网络接口发出和接收了多少byte的数据netstat -ta ##当前active的网络连接 t: tcp a: all u: udp p:processnetstat -tan ##以ip地址的方式展示出来 n: 禁止域名解析，就是不显示域名，直接显示ipnetstat -tupln ##tcp+udp+program name+监听的端口+numericallynetstat -ie ##比较友好的方式展示当前各个端口的流量，就是显示每个网卡发送的流量，接收的流量一共多少MB,这种netstat -nlpt ##获取进程名、进程号以及用户 IDnetstat -s ##可以打印出网络统计数据，包括某个协议下的收发包数量。netstat -ct ## c:持续输出## 使用watch命令监视active状态的连接，实时显示网络流量watch -d -n0 \"netstat -atnp | grep ESTA\" 123456789101112ifconfig ## 查看机器上的网卡en01 ##Ethernet##注意 RX bytes(接收到的数据)和TX bytes(发送出去的数据)后面的数字sudo curl ifconfig.me ## 需要sudo，查看本机的外网地址，有点慢ip address show //类似的命令，据说多数distribution打算用ip替代ipconfigip addr show //和上面一样ip a //也一样cat /etc/network/interfacessystemctl status NetworkManager ## 查看维护系统网络的daemonsystemctl restart NetworkManager ## 重启networkManager 10.查看进程起一个进程，后台运行，关掉终端照样跑的那种 nohup node server.js &gt; /dev/null 2&gt;&amp;1 &amp; 123456nohup node server.js &gt; /dev/null 2&gt;&amp;1 &amp;1. nohup means: Do not terminate this process even when the stty is cut off.2. &gt; /dev/null means: stdout goes to /dev/null (which is a dummy device that does not record any output).3. 2&gt;&amp;1 means: stderr also goes to the stdout (which is already redirected to /dev/null). You may replace &amp;1 with a file path to keep a log of errors, e.g.: 2&gt;/tmp/myLog4. &amp; at the end means: run this command as a background task. 123456789101112131415161718192021222324top 动态显示PID：进程的ID[参数解释](http://www.cnblogs.com/gaojun/p/3406096.html) USER：进程所有者 PR：进程的优先级别，越小越优先被执行 NInice：值 VIRT：进程占用的虚拟内存 RES：进程占用的物理内存 SHR：进程使用的共享内存 S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数 %CPU：进程占用CPU的使用率 %MEM：进程使用的物理内存和总内存的百分比 TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。 COMMAND：进程启动命令名称ps a 显示现行终端机下的所有程序，包括其他用户的程序。**看下某个进程跑在哪个端口** netstat -anp | grep sshdps | grep 类似于 pgrep XXX //查找某个进程进程命令*实时监控，1秒刷新一次*watch -n 1 ps -aux --sort=-pmem,-pcpu 1234567891011121314151617181920212223242526272829303132#列出所有端口的占用情况netstat -anplsof -i # 这个也行#查看哪个进程占了http端口(其实就是80了)lsof -i:80#查看某个进程占了哪些端口netstat -anp|grep pidlsof //list opened files## 查看端口占用## 杀进程（如果进程不属于当前用户，要sudo）## 杀进程，慎用。kill -9 进程id // 9直接干掉进程，慎用。。。kill pid // 这个和kill 15是一样的 //15表示terminate,请求进程停下来 kill -l //列出进程及idkillall nginx -&gt;&gt; 干掉nginx的所有进程pkill -u username //干掉所有属于某一个用户的psSignal (信号) man signal进程状态runnable、sleeping、zombie、stop//更改友善度,数字越小越不友好nice -n 15 /..... 命令path。启动的时候确定nicerenice -s pid //更改友善度df -ah // 查看mounted文件系统proc 11 .常用配置 查看登陆失败日志 grep “Failed password for root” /var/log/auth.log | awk ‘{print $11}’ | sort | uniq -c | sort -nr | more 防范措施修改登陆端口号1234567891011sudo vi /etc/ssh/sshd_configPort 4484PermitRootLogin no###改了sshd_config之后千万记得重启ssh服务，不然会出现connection refused./etc/init.d/ssh restart##CentOS 重启SSH ：service sshd restart###DeBian重启SSH：service ssh restart 查看系统release版本123more /etc/*release### 这个也行lsb_release -a 编码的修改更改locale为utf-8(ubuntu)123456789vi ~/.bashrc# add these linesexport LC_ALL=en_US.UTF-8export LANG=en_US.UTF-8export LANGUAGE=en_US.UTF-8sudo locale-gen \"en_US.UTF-8\"sudo dpkg-reconfigure locales 12. sed命令sed 是一种在线编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。本身是不会更改文件内容的。12345##把一段字符串插入文件的第四行和第五行之间，默认是送到了标准输出，加一个重定向更改了文件内容sed -e 4a\\/\"this will be append to the 5th line\" sample.txt &gt;&gt; sample.txt ## 注意这个斜杠是为了语法高亮加的## 将 /etc/passwd 的内容列出并且列印行号，同时，请将第 2~5 行删除！nl /etc/passwd | sed '2,5d' 13. iptable iptables -L -n -v ## 查看已添加的iptables规则 默认是全部接受的12345678Chain INPUT (policy ACCEPT) ## 允许进入这台电脑target prot opt source destinationChain FORWARD (policy ACCEPT) ## 路由相关target prot opt source destinationChain OUTPUT (policy ACCEPT) ## 允许发出这台电脑target prot opt source destination 12345678910111213141516iptables -P FORWARD DROP ## 把forward 一律改为dropiptables -A INPUT -s 192.168.1.3 ## A是append s是source，拒绝接受192.168.1.3的访问，就是黑名单了iptables -A INPUT -s 192.168.0.0/24 -p tcp --destination-port 25 -j DROP ## block all devices on this network , p是protocol,SMTP一般是25端口iptables -A INPUT -s 192.168.0.66 -j ACCEPT ## 白名单iptables -D INPUT 3 ##这个3是当前INPUT表的第3条规则iptables -I INPUT -s 192.168.0.66 -j ACCEPT ## 白名单，和-A不同，A是加到尾部，I是加到list的头部，顺序很重要。iptables -I INPUT -s 123.45.6.7 -j DROP #屏蔽单个IP的命令iptables -I INPUT -s 123.0.0.0/8 -j DROP #封整个段即从123.0.0.1到123.255.255.254的命令iptables -I INPUT -s 124.45.0.0/16 -j DROP #封IP段即从123.45.0.1到123.45.255.254的命令## 清除已有iptables规则iptables -Fiptables -Xiptables -Z 14. 多个tty(TeleTYpewriter)how-to-multitask-in-the-linux-terminal-3-ways-to-use-multiple-shells-at-once sudo apt-get install screenscreen 。进入一个新的GNU screen // 可以执行耗时指令按住ctrl +a ，再按d 。退出screenscreen -r // 重新进刚才的screen 15. ipv6 howto12345678910## 首先在开启ipv6的机器上确认是否开启了ipv6ifconfig ## 看下是否有ipv6 addressnetstat -tuln ## 看下当前连接中是否有ipv6 addrifconfig的输出大致如下：inet6 addr: 2001:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/64 Scope:Globalinet6 addr: fe80::xxxx:xxxx:xxxx:xxxx/64 Scope:Link[What’s that % sign after ipconfig IPv6 address?](https://howdoesinternetwork.com/2013/ipv6-zone-id)## 那个/64不要管，2001.xxx粘贴到[ipv6now](http://ipv6now.com.au/pingme.php)## 然后用一些online ipv6 website ping一下 16.netcat , cryptcatoracle pagenetcat是网络工具中的瑞士军刀，它能通过TCP和UDP在网络中读写数据。netcat所做的就是在两台电脑之间建立链接并返回两个数据流。netcat = nc123456789101112131415161718192021222324nc -z -v -n 172.31.100.7 21-100 ##用来扫描这台机器上开放的端口，用来识别漏洞z 参数告诉netcat使用0 IO,连接成功后立即关闭连接， 不进行数据交换v 参数指使用冗余选项 verbosen 参数告诉netcat 不要使用DNS反向查询IP地址的域名 numericu 参数使用udp ，默认是tcp## on the server side ，创建一个chat 服务器netcat -l -p 38929 ## l listen p port ，大写的L表示socket断了之后自动重连## clientnc 172.31.100.7 38929### now the server and client can talk to each other## 文件传输### servernc -l 1567 &lt; file.txt## clientnc -n 172.31.100.7 1567 &gt; file.txt### 传输目录### servertar -cvf – dir_name | nc -l 1567### clientnc -n 172.31.100.7 1567 | tar -xvf - Linux Netcat 命令——网络工具中的瑞士军刀 17. WireShark and netcap首先是wireShark和fiddle的对比Wireshark vs Firebug vs Fiddler - pros and cons? Wireshark, Firebug, Fiddler all do similar things - capture network traffic.Wireshark captures any kind of a network packet. It can capture packet details below TCP/IP(Http is at the top). It does have filters to reduce the noise it captures.Fiddler works as a http/https proxy. It captures each http request the computer makes and records everything associated with it. Does allow things like converting post varibles to a table form and editing/replaying requests. It doesn’t, by default, capture localhost traffic in IE, see the FAQ for the workaround.The benefit of WireShark is that it could possibly show you errors in levels below the HTTP protocol. Fiddler will show you errors in the HTTP protocol. 简单来说就是fiddle只抓http(s)层的packet,wireShark抓的是tcp(udp)层的。 wireShark &gt; fiddler(Charles 也差不多，只抓http层的) 基本的流程是：首先在linux上生成dump.pcap文件，然后在wireShark中打开(对了要先去wireshark官网下windows的安装文件，注意不要装上全家桶就是了)； 聊聊tcpdump与Wireshark抓包分析12345678910111213141516171819sudo tcpdump -i \"venet0:0\" //tcpdump需要sudo权限sudo tcpdump -c 10 //countsudo tcpdump -c -A //Asicii码形式展示出来每个packagesudo tcpdump -c 5 -i wlo1 // 监听某一个网卡sudo tcpdump -c 5 -i wlo1 port 22// 监听某一个网卡某一个端口sudo tcpdump -i eth0 -w dump.pcap -v //w表示要保存的文件的位置// 注意运行上述指令的时候，会显示Got 18 这种提示，意味着已经抓到了多少个包，这个数其实也是随着时间流逝一直增长的。ctrl+c停止抓包，会生成一个dump.pcap文件(不要尝试着去cat 或者less，是一个binary 文件，会崩的)。tcpdump version 4.5.1libpcap version 1.5.3Usage: tcpdump [-aAbdDefhHIJKlLnNOpqRStuUvxX] [ -B size ] [ -c count ] [ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ] [ -i interface ] [ -j tstamptype ] [ -M secret ] [ -P in|out|inout ] [ -r file ] [ -s snaplen ] [ -T type ] [ -V file ] [ -w file ] [ -W filecount ] [ -y datalinktype ] [ -z command ] [ -Z user ] [ expression ] 18.ubuntu desktop预设的desktop environment叫做unity比较常见的linux desktop 还有gnome,KDE ,plasma,Ma tei, cinnamon. 19.tmux使用tmux是多窗口神器，再也不用傻乎乎的去开screen了，远程server也能用。tmuxcheatsheettmux创建的窗口叫做pane，关闭的方式有exit和ctrl+b xctrl+B // prefix,基本上就是让tmux开始接收后面的指令ctrl + b + “ //纵向排列ctrl + b + % //横向排列ctrl + b + z //zoom到这个pane,再按下ctrl+b +z 使当前pane退出全屏ctrl + b + c //创建一个新窗口ctrl + b +p //previous窗口 n就是next窗口ctrl + b 2 //跳到第2个窗口ctrl +b + &amp; 干掉当前窗口ctrl +b + , 重命名当前窗口 接下来看如何修改配置修改 ~/.tmux.conf 文件，如果没有就创建一个 每次都要按ctrl+b实在是太麻烦，改成ctrl+a吧，因为a距离ctrl近一点。下面三行就改好了set-option -g prefix C-aUNBIND-KEY C-abind key C a send prefix tmux有一个很重要的概念- session tmux list-sessions // 列出当前所有sessions tmux ls // 列出当前所有sessions ctrl+b + $ //可以重命名session 如果从一个terminal中开了一个tmux session，然后直接右上角关闭terminal，在其他的terminal中就能看到这个session不是attached的状态如果不想用点击右上角叉号的方式退出session，可以使用ctrl +B +d //disconnect from current session.这样就不用关闭整个terminal了 tmux attach -t vim-dev //假设vim-dev是一个session的名字 一个好玩的现象是，如果开两个terminal，连接到同一个session，任何在一个session的操作都会在另一个session的terminal中显示，就像远程协助一样。 ctrl +b + ( //切换到前一个sessionctrl +b + ) //切换到下一个session 20. 使用systemd管理程序Systemctl是一个systemd工具，主要负责控制systemd系统和服务管理器。systemd中一项服务称为unit12345678910111213141516171819202122232425262728sudo systemctl start application ## 比方说nginxsudo systemctl status nginx ## 看下状态sudo systemctl restart application.servicesudo systemctl reload application.servicesudo systemctl reload-or-restart application.servicesudo systemctl enable application.service ##开机启动## 开机启动的原理是往/lib/systemd/system或者/etc/systemd/system这个目录下创建了类似于nginx.service的symbolic link。## 指向在这个文件夹下创建的xxx.target.wants文件sudo systemctl disable application.service ## 禁止开机启动## 这句话就是取消了symbolic linksudo systemctl is-active nginx.service ## 看下在不在跑activesystemctl is-enabled application.servicesystemctl is-failed application.servicesystemctl list-units --all ## 所有systemd加载（或者尝试过加载）的程序systemctl list-units --all --state=inactive ## 只看active的systemctl list-unit-files ## 和list-units不一样，这里还包括了systemd为尝试过parse的配置sudo systemctl halt ## 挂起sudo systemctl poweroff ## 关机sudo systemctl reboot ## 重启 其实sudo reboot也是指向/bin/systemctl的软链接systemctl cat sshd.service ## 查看一个服务的配置文件 系统基本service服务配置目录（此目录勿动，一般情况下只放系统核心基础服务配置，否存放应用注册类服务配置）：/etc/systemd/system，自定义服务配置管理目录（存放自定义应用注册类服务和第三方服务类配置）：/usr/lib/systemd/system/ 自定义.service配置文件，实现开机自启(开机执行一个sh脚本)的步骤 创建一个start-script.service文件(权限改成754),大致内容如下 [Unit]Description=”app-run@Author Jack Liu Process Daemon” # 服务描述After=rc-local.service # 服务类别： # 例启动顺序(默认在rc-local.service之后调用执行) [Service]Type=forking # 优先使用forking方式: # (遵循传统Unix做法,设置PIDFile=选项 # 帮助systemd准确定位该服务的主进程) PIDFile=/var/run/app-run.pid # 设置应用进程的PID（缺省）Environment=”GOPATH=/usr/local/go” # 环境变量设置，可设置多个Environment=项 # 备注：Environment= 或 EnvironmentFile= # 引用文件, 两种方式皆可 ExecStart=/data/auto_run.sh start # 调用启动可执行文件： 这就是要执行的sh脚本 # （Service配置全部使用绝对路径， # 可执行文件内命令用绝对的路径格式） ExecReload=/data/auto_run.sh reload # 重新加载（缺省）ExecStop=/data/auto_run.sh stop # 停止服务（缺省）DefaultTimeoutStartSec=30 # 服务启动允许的最大时长，超时时间（默认无单位:秒） # 单位：&quot;ms&quot;(毫秒), &quot;s&quot;(秒), &quot;min&quot;(分钟), # &quot;h&quot;(小时), &quot;d&quot;(天), &quot;w&quot;(周) PrivateTmp=True # 是否分配独立的临时空间（缺省）[Install]WantedBy=multi-user.target 把这个文件复制到/usr/lib/systemd/user文件夹中 在/data/auto_run.sh这个脚本中写自己的业务逻辑,比如说 #!/bin/bashdate &gt;&gt; /tmp/date 把这个service注册到系统中systemctl enable start-script.service 搞定,如果service文件不会写的话，看下/lib/systemd/system/nginx.service就好了 systemctl带来的一个好处是可以直接使用journalctl命令查看所有Unit的启动日志(内核日志和应用日志)。日志的配置文件是/etc/systemd/journald.conf123456## 查看所有日志（默认情况下 ，只保存本次启动的日志）$ sudo journalctl# 查看系统本次启动的日志$ sudo journalctl -b$ sudo journalctl --since yesterday## 还有很多，能够知道系统启动时发生了什么 ================================================================================== shell script tutorialfdisk -l ## show a list of hard drives that are attached to your computer, fdisk就是硬盘分区命令 21. 关于命令行中标点符号的使用在unix系统上参数的分隔符是” : “在windows系统上分割符是” ; “还有就是forward slash和back slash了 参考 工具参考 文件大小查看命令 文件压缩命令 硬件查询 Python源码编译安装ss 源码编译安装ss 修改系统编码为utf-8 Linux工具快速教程","tags":[{"name":"置顶","slug":"置顶","permalink":"https://haldir65.github.io/tags/置顶/"},{"name":"linux","slug":"linux","permalink":"https://haldir65.github.io/tags/linux/"},{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"}]},{"title":"使用AnnotationProcessor自动生成代码","date":"2016-12-31T22:42:15.000Z","path":"2016/12/31/2016-12-31-Eliminating-BoilPlate-AnnotationProcessor/","text":"记得Romain Guy在一次DroidCon上曾说过: As I understand, modern java development are all about wrting annaotation Processors and not wrting code anymore… 全场观众大笑。。。 这之后经常看到Jack Wharton在演讲中提到”My Hypothetical Annotation Processor…” ，后来才意识到像Retrofit，ButterKnife这些都是使用了注解的方式。 1. 原理介绍Annotation Processoring Tool是javac的一部分，它会在编译期生成新的.java文件（不是class文件）定义一个Annotation的语法如下：12345@Documented@Target(ElementType.TYPE) //这说明生成的注解能够放在class,interface,enum等类型上。不能放在method上@Retention(RetentionPolicy.SOURCE) //指明在编译器有效public @interface Builder &#123; //@interface就像class,interface,enum一样&#125; 2.Annotation Processor是生成新代码的实现类大致的实现例如：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162public class PojoStringProcessor extends AbstractProcessor &#123; private static final String ANNOTATION = \"@\" + PojoString.class.getSimpleName(); private static final String CLASS_NAME = \"StringUtil\"; private Messager messager; //有点像Logger,用于输出信息 private Filer filer //可以获得Build Path，用于生成文件 //public构造函数不写也会自动加上 // init做一些初始化操作 @Override public synchronized void init(ProcessingEnvironment processingEnv) &#123; super.init(processingEnv); messager = processingEnv.getMessager(); this.filer = processingEnv.getFiler(); &#125; //apt在检查被注解的class时，会返回你需要的注解类型 @Override public Set&lt;String&gt; getSupportedAnnotationTypes() &#123; return immutableSet.of(Builder.class.getCanonicalName()); &#125;true //java7,java8 有点像android的targetSdk Version @Override public SourceVersion getSupportedSourceVersion() &#123; return SourceVersion.latestSupported(); &#125; //重点 @Override public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123; ArrayList&lt;AnnotatedClass&gt; annotatedClasses = new ArrayList&lt;&gt;(); for (Element element : roundEnv.getElementsAnnotatedWith(PojoString.class)) &#123; TypeElement typeElement = (TypeElement) element; if (!isValidClass(typeElement)) &#123; return true; //apt找到的所有被注解的class &#125; try &#123; annotatedClasses.add(buildAnnotatedClass(typeElement)); &#125; catch (IOException e) &#123; String message = String.format(\"Couldn't process class %s: %s\", typeElement, e.getMessage()); messager.printMessage(Diagnostic.Kind.ERROR, message, element); e.printStackTrace(); &#125; &#125; try &#123; generate(annotatedClasses); &#125; catch (IOException e) &#123; messager.printMessage(Diagnostic.Kind.ERROR, \"Couldn't generate class\"); &#125; return true; &#125;&#125; 几个重要的方法解释下： roundEnv: apt分两步：1. apt发现被注解的代码，提供给我们写的processor，后者生成新的java代码(apt还未处理这部分新代码)。 apt发现新代码，提供给我们的Processor，不生成新代码。完成processing。（后面提供给编译） ServiceLoader Discovery File（这货在jar中）//META-INFO/services/javax.annotations.processing.Processor文件中写入com.example.annotation.BuilderProcessor// class包名//这里声明所有的processor，这里可以include别的processor 语法：12345678910app/build.gradledependencies&#123;truecompile project(': annotation') apt project (':processor')&#125;//apt 表示processor中的方法不会带到distributed apk中,方法数不用担心了//https://bitbucket.org/hvisser/android-apt//https://github.com/tbroyer/gradle-apt-plugin 继承AbstractProcessor，必须要有一个无参public构造函数 3. 生成新的java方法首先添加依赖，square的javaPoet 假设想生成的代码是这样的12345678910public final class UserBuilder&#123;truetrueprivate String userName;truepublic UserBuilder username(String username)&#123;truetruethis.username = username;truetruereturen this;true&#125;&#125; 生成变量 生成方法 生成class: 直接截图了 主要步骤 meta_data 生成private field和public setter: FiledSpec username = FiledSpec.builder(String.class,”username”,Modifier.PRIVATE).build(); 生成build method 生成builder 写java文件： 4. 注意的地方dnot’t put annotation processors in a compile configuration, use the Android Apt plugin。 if you using jack, jack has support for annotation processors. if it’s only a java, could use the Gradle Apt Plugin 我们写的processor不会带到生成的apk中，但生成的代码会。这也正是想要的目的。 ref android gradle plugin 2.3的兼容问题 Android沉思录 Droidcon NYC 2016 - @Eliminate(“Boilerplate”) Gradle Apt Plugin Andorid Apt Plugin","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"annotation","slug":"annotation","permalink":"https://haldir65.github.io/tags/annotation/"}]},{"title":"Python 3 学习记录","date":"2016-12-24T22:06:37.000Z","path":"2016/12/24/2016-12-24-Python-UnicodeEncodeError/","text":"人生苦短，Python是岸 1. Python的一些缺点引用廖雪峰的官方网站上的话，Python一个是慢，一个是代码不能加密 第一个缺点就是运行速度慢，和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。 第二个缺点就是代码不能加密 GIL导致的多线程低效率 以下内容出自静觅 » Python爬虫进阶五之多线程的用法123456789101112131415161、GIL是什么？GIL的全称是Global Interpreter Lock(全局解释器锁)，来源是python设计之初的考虑，为了数据安全所做的决定。2、每个CPU在同一时间只能执行一个线程（在单核CPU下的多线程其实都只是并发，不是并行，并发和并行从宏观上来讲都是同时处理多路请求的概念。但并发和并行又有区别，并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔内发生。）在Python多线程下，每个线程的执行方式：获取GIL执行代码直到sleep或者是python虚拟机将其挂起。释放GIL可见，某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。在Python2.x里，GIL的释放逻辑是当前线程遇见IO操作或者ticks计数达到100（ticks可以看作是Python自身的一个计数器，专门做用于GIL，每次释放后归零，这个计数可以通过 sys.setcheckinterval 来调整），进行释放。而每次释放GIL锁，线程进行锁竞争、切换线程，会消耗资源。并且由于GIL锁存在，python里一个进程永远只能同时执行一个线程(拿到GIL的线程才能执行)，这就是为什么在多核CPU上，python的多线程效率并不高。 2. 安装package各种can’t resolve XXXno module named urllib2 The urllib2 module has been split across several modules in Python 3 named urllib.request and urllib.error. The 2to3 tool will automatically adapt imports when converting your sources to Python 3. This is what look like on py 2.7 1234567891011121314import urllib2req = urllib2.Request(url,headers=header)html = urllib2.urlopen(req)html_data = html.readhtml_path = etree.HTML(html_data)``` on Python 3.X```pythonfrom urllib.request import urlopenfrom urllib.request import Requestreq = Request(img_url, headers=headers)urlhtml = urlopen(req) 如果是自己写了一个.py文件，调用里面的函数,import的时候要把包路径写完整 3. pip install XXXX安装package的方式 pip install xxxx…. if not working 4. List、tuple、dict、set以及基本的数据类型12345678910111213141516list mylist = ['Tom','Jerry','Henry'] mylist[0] = 'Tom'tuple mytuple = ('rock','pop','jazz') mytuple[0] = 'rock'tuple在初始化时就已经确定，不能修改dict: d=&#123;'name':'tom','job':'doctor','age',99&#125; d['name'] = 'tom'set: s = set([1,2,3]) # 需要传入一个list作为参数 &gt;&gt; s &#123;1,2,3&#125; set无序，不可有重复元素 set和dict的区别在于前者没有存储value，两者内部都不能有重复元素(key) tuple用的比较多，例如有多个返回值的函数，Python其实返回了一个Tuple。 类名应该写成驼峰样式，变量名应该小写class name should be cammelCase, Arguments,variable name should be lowercase 循环1234567891011 for i in range(2, 5): print(i)&gt;&gt;&gt; result: 2 3 4 左闭右开条件判断def add_end(L=None): if L is None: L = [] L.append('END') return L 函数参数相关，函数组合（一共五种）位置参数，默认参数，可变参数，关键字参数，命名关键字参数 定义一个函数可以带上默认值，默认值是一个固定的对象，上次操作的值会保留到下一次调用12345678def sell(name,price,amount=1): print(price*amount)sell('product',26)sell('product',26,2)&gt;&gt;&gt; 26 &gt;&gt;&gt; 52 默认参数函数123456789def power(x, n=2): #这里的n=2就是默认参数，注意，默认参数应该是不可变对象,例如str、None这种 s = 1 while n &gt; 0: n = n - 1 s = s * x return spower(5) &gt;&gt; 25power(5,2) &gt;&gt;&gt;25 可变参数函数# 定义的时候在参数前面加一个*号就可以了，内部会默认组装成一个tuple123456789101112def calc(*numbers): #函数内部接收到的是一个tuple sum = 0 for n in numbers: sum = sum + n * n return sumcalc(1,2)calc(2,3,5) nums = [1,2,3]cal(*nums)#把tuple内的元素作为参数传进去 关键字参数1234567def person(name, age, **kw): print('name:', name, 'age:', age, 'other:', kw)&gt;&gt;&gt; person('Michael', 30)name: Michael age: 30 other: &#123;&#125;内部自动将关键字参数转换成一个dict 命名关键字函数12345def shoppping(name,time,*,price,count)# price可以有默认值 print(price*count)&gt;&gt; shopping(john,0325,price=39,count=5)&gt;&gt; 195 5. 爬虫相关Chrome自带开发者工具，可以查看每一个request的header，cookies等信息。模拟浏览器行为比较有效。ctrl+shift+R神器 5.1 Request, Urllib25.2 UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position就中文来说 GB18030 》 GBK 》 GB2312 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# how to invoke this errorb = &quot;this is english within ascii range&quot;.encode(&apos;ascii&apos;) # totally fines = &quot;你好&quot;.encode(&apos;ascii&apos;)# this will raise an error ,UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 0-1: ordinal not in range(128)&gt; print((b&quot;totally cool binary representation of english words within ascii range&quot;).decode(&apos;ascii&apos;)) print((b&quot;totally cool binary cause utf-8 include ascii&quot;).decode(&apos;utf-8&apos;)) # 完全正常 # eg.string = &quot;你好啊&quot;binary_string = b&apos;\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd\\xe5\\x95\\x8a&apos;binary_string_2_string = bstring.decode(&apos;utf-8&apos;)code :print(string) print(string.encode(&apos;utf-8&apos;))print(bstring2string)print(bstring2string)print(which_instance_is_this(string))print(which_instance_is_this(bstring))print(which_instance_is_this(bstring2string))outputs:你好啊b&apos;\\xe4\\xbd\\xa0\\xe5\\xa5\\xbd\\xe5\\x95\\x8a&apos;你好啊你好啊is stris byteis str**Since Python 3.0, the language features a str type that contain Unicode characters, meaning any string created using &quot;unicode rocks!&quot;, &apos;unicode rocks!&apos;, or the triple-quoted string syntax is stored as Unicode.**冒号里面的都是str，都是unicode的集合。生成unicode可以用chr(12345) ，该方法接受一个integer返回一个长度为1的Unicode String。反过来可以用ord(你) 生成“你”这个字在unicode中的编号print(chr(20320)) &gt;&gt;&gt;&gt; 你print(ord(&apos;你&apos;)) &gt;&gt;&gt;&gt; 20320 #这里只能用长度为1的stringbinary to string is called decode ,string to binary is encodebytes.decode(&apos;utf-8&apos;) &lt;----&gt; str.encode(&apos;utf-8&apos;)回到UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in positionstr.encode(&apos;ascii&apos;)，unicode字符超出了ascii的范围，无法decode成binary 6.一些细节文件读写的各种模式以及解码问题123with open(filepath, 'r', encoding=\"utf8\") as f: f.write('最好用utf8读和写文件') #已经自动做好close文件的工作 how to upgrade installed packages? pip install –upgrade setuptools 迭代一个字典，并打印出key,vaule123for key,value in d.items(): # 这个items函数其实是字典自带的函数 print('%s key has the value %s'%(key,value)) #第三个百分号是用来把key填到第一个百分号后，把value填到第二个百分号后面的# 用普通的for i 方式迭代一个字典，迭代出来的是一个个的key，可以用dict[key]把value搞出来 7. 在PyCharm中使用virtualenvvirtualenv一般都是在命令行里面创建，PyCharm里面，setting-project-project Interpreter 那个选择的箭头右边有一个齿轮，直接创建一个新的就好了。virtualenv的好处是不会干扰机器上已安装的package，有些包现在还只能在2.7下运行，如flask_mail。用完之后，ide cmd输入 deactivate即可退出virtualenv。 8.在linux环境中运行Python及调用系统API计算当前系统磁盘空间占用率推荐使用os.subprocess模块调用shell grep log in command consolebasic grammarsnetwork, disk ,database, io , dic, list ,etcclass object orientated Reference 廖雪峰的官方网站 use python and mongoDb as backend 静觅 unicodeencodeerror-ascii-codec-cant-encode-character Droidcon NYC 2016 - Decoding the Secrets of Binary Data Jake Wharton and Jesse Wilson - Death, Taxes, and HTTP Droidcon Montreal Jake Wharton - A Few Ok Libraries Jesse Wilson - Coordinating Space and Time","tags":[{"name":"python","slug":"python","permalink":"https://haldir65.github.io/tags/python/"}]},{"title":"adb常用命令手册","date":"2016-12-10T21:14:14.000Z","path":"2016/12/10/2016-12-10-adb-command/","text":"ADB 常用命令手册平时在android studio中用command的时候还有点不熟悉，找到一篇博客，记录下来，作为日常参考。希望后期能够有时间把Google IO上添加的一些命令加上来 获取序列号： adb get-serialno 查看连接计算机的设备： adb devices 重启机器： adb reboot 重启到bootloader，即刷机模式： adb reboot bootloader 重启到recovery，即恢复模式： adb reboot recovery 查看log： adb logcat 终止adb服务进程： adb kill-server 重启adb服务进程： adb start-server 获取机器MAC地址： adb shell cat /sys/class/net/wlan0/address 获取CPU序列号： adb shell cat /proc/cpuinfo 安装APK： adb install //比如：adb install baidu.apk 保留数据和缓存文件，重新安装apk： adb install -r //比如：adb install -r baidu.apk 安装apk到sd卡： adb install -s // 比如：adb install -s baidu.apk 卸载APK： adb uninstall //比如：adb uninstall com.baidu.search 卸载app但保留数据和缓存文件： adb uninstall -k //比如：adb uninstall -k com.baidu.search 启动应用： adb shell am start -n /. 查看设备cpu和内存占用情况： adb shell top 查看占用内存前6的app： adb shell top -m 6 刷新一次内存信息，然后返回： adb shell top -n 1 查询各进程内存使用情况： adb shell procrank 杀死一个进程： adb shell kill [pid] 查看进程列表： adb shell ps 查看指定进程状态： adb shell ps -x [PID] 查看后台services信息： adb shell service list 查看当前内存占用： adb shell cat /proc/meminfo 查看IO内存分区： adb shell cat /proc/iomem 将system分区重新挂载为可读写分区： adb remount 从本地复制文件到设备： adb push 从设备复制文件到本地： adb pull 列出目录下的文件和文件夹，等同于dos中的dir命令： adb shell ls 进入文件夹，等同于dos中的cd 命令： adb shell cd 重命名文件： adb shell rename path/oldfilename path/newfilename 删除system/avi.apk： adb shell rm /system/avi.apk 删除文件夹及其下面所有文件： adb shell rm -r 移动文件： adb shell mv path/file newpath/file 设置文件权限： adb shell chmod 777 /system/fonts/DroidSansFallback.ttf 新建文件夹： adb shell mkdir path/foldelname 查看文件内容： adb shell cat 查看wifi密码： 1adb shell cat /data/misc/wifi/*.conf 清除log缓存： adb logcat -c 查看bug报告： adb bugreport 获取设备名称： adb shell cat /system/build.prop 查看ADB帮助： adb help 跑monkey： adb shell monkey -v -p your.package.name 500 录制视频 adb shell screenrecord /sdcard/demo.mp4 生成的Demo.mp4文件在根目录下面，默认录制时长180s按下ctrl+c 停止录制注意，最好在开发者选项里面，把显示触摸操作打开，这样视频中能显示用户点击操作位置 ADB无线调试 $adb tcpip 5555$ adb connect &lt;\\device-ip-address&gt;$ adb devicesdone ANR的日志放在/data/anr/traces.txt里面./adb pull path_to_file location_to_save就能搞出来了 参考: 张明云的博客 adb无线调试","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"adb","slug":"adb","permalink":"https://haldir65.github.io/tags/adb/"}]},{"title":"wrap_content到底多大","date":"2016-11-27T16:46:44.000Z","path":"2016/11/27/2016-11-27-the-size-of-wrap-content/","text":"转眼就十一月了，java的分析越来越少，虽然常常在业务上碰到不少坑。。。 问题的由来这周碰到一个需要画时间轴样式的自定义View的需求，大概像这样(图片来自网络)： 要求，左侧的圆形节点可以自定义Drawable，右侧的文字高度随文字数量变化自适应。 想想也就是自定义ViewGroup的那一套老样子。抄起键盘就开始研(Copy)究(Paste)，写着写着发现不对劲，主要的问题包括: 在onMeasure里面拿到的height == 0 , 具体一点就是:整个ViewGroup包含多个Item，每个Item包括左侧的自定义View(CustomView)，高度是wrap_content，右边的TextView高度是wrap_content(自适应嘛)。可是debug时发现左侧的自定义View拿到的高度是0，简直日了哈士奇了。随后拿着关键词去Google搜索，还是没有什么收获。 123456protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; final int widthMode = MeasureSpec.getMode(widthMeasureSpec); final int heightMode = MeasureSpec.getMode(heightMeasureSpec);// 这里是UNSPECIFIED, 常规概念里wrap_content对应的应该是AT_MOST final int widthSize = MeasureSpec.getSize(widthMeasureSpec); final int heightSize = MeasureSpec.getSize(heightMeasureSpec); // 居然等于0 &#125; 回顾这个Item的实现，Item继承自RelativeLayout，左边的View是调用addView(view,RelativeLayout.Layoutparams)加进去的,params设置了一些rules，像是AlignParentLeft这种，记得给左边的View和右边的TextView都设置一个id就好。TextView也是这样addView进去的。后来查到了秋百万对于MeasureSpec的介绍，我想到RelativeLayout的onMeasure会调用两次，在第一次测量的时候，左边的View和右边的TextView都把高度设置为wrap_content了。要命的是这个Item本身添加到UI的方式也是类似的addView(view,RelativeLayout.Layoutparams)方式，这里的height也是wrap_content。即Item本身高度需要由其child决定，左边的child决定不了，只有右边的TextView才能决定。所以第一轮测量下来，左边的View的高度只能是0，右边的TextView高度倒是确定了。这时候Item本身的高度也就能确定了。在第二遍测量的时候，就能顺利拿到高度了。 左侧的每个节点上的drawable不画出来后来查了下，原因在于我对传进来的drawable检查了大小，太大的话用一个ScaleDrawable转一下。但是，scaleDrawable需要调用setLevel方法才会draw，我这里偷懒直接设置为1了。 Item本身是继承自RelativeLayout，想要使onDraw方法被调用需要在构造函数里设置setWillNotDraw(false)这个boolean值默认是true，主要是顾及到性能的原因。 参考 How Android caculates view size","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"Windows10平台安装lxml记录","date":"2016-10-31T15:49:38.000Z","path":"2016/10/31/2016-10-31-install-lxml-on-windows/","text":"前几天尝试使用一个简单的微博爬虫进行操作，导包的时候遇到lxml缺失的问题，找了好久最终在百度知道上找到个能用的，(⊙﹏⊙)b。 1. 环境 python2.7, win10 64位 pip 环境变量配置 2. 开始 cmd 命令行敲入 pip install wheel 准备lxml安装文件下载地址我的是win10 64位，选择 lxml-3.4.2-cp27-none-win_amd54.xhl 下载完成后放到 c:\\python27\\文件夹下 命令行敲入 pip install c:\\python27\\lxml…(刚才的文件名) 最后会提示 successfully installeed lxml-3.4.2 这时候关闭pycharm project，重新打开就可以看到导入成功了。 2018年1月更新首先确认pip是否安装了lxml，pip list(查看已安装的包)How to install LXML for Python 3 on 64-bit Windows因为安装的是python3.6，所以下载lxml‑4.1.1‑cp36‑cp36m‑win32.whl这个文件win10的64位系统只需要安装 lxml‑4.1.1‑cp36‑cp36m‑win32.whl ,如果安装lxml‑4.1.1‑cp36‑cp36m‑win_amd64.whl的话，可能会提示filename-whl-is-not-supported-wheel-on-this-platform，是因为安装的python是32位的。 ref 百度有时候也是挺管用的","tags":[{"name":"python","slug":"python","permalink":"https://haldir65.github.io/tags/python/"}]},{"title":"android-Ultra-pull-to-refresh分析","date":"2016-10-24T10:25:35.000Z","path":"2016/10/24/2016-10-24-a-peek-on-pull-to-refresh/","text":"最早开始接触安卓的时候就知道有Chris Banes的Pull-To-Refresh，当时这个库已经被标记被Deprecated了，后来出于寻找替代品的目的找到了秋百万的android-Ultra-pull-toRefresh，直接 当时甚至没有能力把一个Demo跑起来。之后的项目中，直接使用swipeRefreshLayout了。现在回头看，终于觉得可以尝试着分析一遍整个下拉刷新的过程。本文只针对android-Ultra-pulltoRefresh部分源码进行分析。拆一个轮子可能只需要花一天时间，但能够从无到有构思出这个框架，将项目搭建起来并且坚持长期维护真的是一件需要很强毅力的事情，向为开源社区贡献优秀代码的秋百万和众多做出贡献的开发者致敬。 1. 从Demo开始吧从github clone下来之后，改一下gradle版本，compile sdk version什么的就可以运行项目自带的Demo了.MainActivity 添加了一个PtrDemoHomeFragment,onCreateView里面返回的View对应的xml文件为fragment_ptr_home.xml123456789101112131415161718192021222324252627282930&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\"&gt; &lt;in.srain.cube.views.ptr.PtrFrameLayout android:id=\"@+id/fragment_ptr_home_ptr_frame\" xmlns:cube_ptr=\"http://schemas.android.com/apk/res-auto\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" cube_ptr:ptr_duration_to_close=\"200\" cube_ptr:ptr_duration_to_close_header=\"1000\" cube_ptr:ptr_keep_header_when_refresh=\"true\" cube_ptr:ptr_pull_to_fresh=\"false\" cube_ptr:ptr_ratio_of_header_height_to_refresh=\"1.2\" cube_ptr:ptr_resistance=\"1.7\"&gt; &lt;ScrollView android:id=\"@+id/fragment_block_menu_scroll_view\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@color/cube_mints_white\"&gt; &lt;in.srain.cube.views.block.BlockListView android:id=\"@+id/fragment_block_menu_block_list\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:padding=\"@dimen/cube_mints_content_view_padding\" /&gt; &lt;/ScrollView&gt; &lt;/in.srain.cube.views.ptr.PtrFrameLayout&gt;&lt;/LinearLayout&gt; 默认主页已经可以下拉刷新了，那么主要的事件拦截操作应该就在这个ptrFrameLayout里面 2. PtrFrameLayout源码从注释来看 This layout view for “Pull to Refresh(Ptr)” support all of the view, you can contain everything you want. support: pull to refresh / release to refresh / auto refresh / keep header view while refreshing / hide header view while refreshing It defines {@link in.srain.cube.views.ptr.PtrUIHandler}, which allows you customize the UI easily. 能够容纳各种View，同时支持下拉刷新，下拉释放刷新，自动刷新，刷新时保留刷新动画，刷新时隐藏刷新动画 一步步来看 构造函数 1234567891011121314151617181920212223public class PtrFrameLayout extends ViewGroup &#123; public PtrFrameLayout(Context context, AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); //删除无关代码 TypedArray arr = context.obtainStyledAttributes(attrs, R.styleable.PtrFrameLayout, 0, 0); if (arr != null) &#123; mHeaderId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_header, mHeaderId); // HeaderView的layout文件id mContainerId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_content, mContainerId); // contentView的layout文件id mDurationToClose = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close, mDurationToClose);// 维持刷新动画多久开始关闭HeaderView mDurationToCloseHeader = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close_header, mDurationToCloseHeader); float ratio = mPtrIndicator.getRatioOfHeaderToHeightRefresh(); ratio = arr.getFloat(R.styleable.PtrFrameLayout_ptr_ratio_of_header_height_to_refresh, ratio); mKeepHeaderWhenRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_keep_header_when_refresh, mKeepHeaderWhenRefresh); mPullToRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_pull_to_fresh, mPullToRefresh); arr.recycle(); &#125; //ViewConfiguration很常见了，mTouchSlop用于判断用户操作手势是否有效 final ViewConfiguration conf = ViewConfiguration.get(getContext()); mPagingTouchSlop = conf.getScaledTouchSlop() * 2; &#125;&#125; 构造函数里面主要就是获得在xml中设定的一些自定义属性的值并保存为成员变量，实际用途后面再看。 onFinishInflate这个方法在inflate xml文件结束，所有的childView都已经添加之后调用PtrFrameLayout复写了这个方法， 首先检查ChildView数量，如果childCount &gt;2 会报错 然后检查两个child(这里主要看childCount=2的情况下)123456789//省略若干if (child1 instanceof PtrUIHandler) &#123; mHeaderView = child1; mContent = child2; &#125; else if (child2 instanceof PtrUIHandler) &#123; mHeaderView = child2; mContent = child1; &#125; //省略若干 来看一下这个ptrUIHandler12345678910111213141516171819202122232425262728public interface PtrUIHandler &#123; /** * When the content view has reached top and refresh has been completed, view will be reset. * * @param frame */ public void onUIReset(PtrFrameLayout frame); /** * prepare for loading * * @param frame */ public void onUIRefreshPrepare(PtrFrameLayout frame); /** * perform refreshing UI */ public void onUIRefreshBegin(PtrFrameLayout frame); /** * perform UI after refresh */ public void onUIRefreshComplete(PtrFrameLayout frame); public void onUIPositionChange(PtrFrameLayout frame, boolean isUnderTouch, byte status, PtrIndicator ptrIndicator);&#125; 大概可以猜到这货是用来指定下拉过程中的刷新开始，刷新结束，刷新结束后复位等过程的实现者，具体的下拉过程中的动画，位移等特效都应该由这接口的实例(View)来完成。 onMeasure1234567891011121314151617181920@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; super.onMeasure(widthMeasureSpec, heightMeasureSpec); //省略... measureContentView(mContent, widthMeasureSpec, heightMeasureSpec); &#125; private void measureContentView(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec) &#123; final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams(); final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, getPaddingLeft() + getPaddingRight() + lp.leftMargin + lp.rightMargin, lp.width); final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec, getPaddingTop() + getPaddingBottom() + lp.topMargin, lp.height); child.measure(childWidthMeasureSpec, childHeightMeasureSpec); &#125; 主要就是调用了measureContentView方法，都是很中规中矩的实现 onLayout代码就不贴了，根据LayoutParams计算出需要的margin,最主要的Top是由 int offset = mPtrIndicator.getCurrentPosY(); 获得的，mPterIndicator是一个单独的组件，用于保存一些实时状态。滑动过程中如果有动画效果，会走到这个方法里，所以及时更新最新的位置很重要，ptr将这一功能剥离出来，这大概就是我所理解的解耦吧。 dispatchTouchEvent主要的手势处理逻辑都在这里，关于TouchEvent的分发处理，这里不再赘述。简单列出执行顺序: ViewGroup.dispatchTouchEvent—-ViewGroup.onInterceptTouchEvent—View.dispatchTouchEvent—– etc 、、、、 简书上有作者写出了非常好的关于TouchEvent分发的文章，忘记了的话可以去看看。来看这部分的实现，有删节123456789101112131415161718192021222324252627282930313233343536373839404142434445@Override public boolean dispatchTouchEvent(MotionEvent e) &#123; //..... switch (action) &#123; case MotionEvent.ACTION_UP: case MotionEvent.ACTION_CANCEL: if (mPtrIndicator.hasLeftStartPosition()) &#123; onRelease(false); //手指抬起后的操作 // ...... return dispatchTouchEventSupper(e); &#125; else &#123; return dispatchTouchEventSupper(e); &#125; case MotionEvent.ACTION_DOWN: //取消之前还在运行的Scroller等等。。 // The cancel event will be sent once the position is moved. // So let the event pass to children. // fix #93, #102 dispatchTouchEventSupper(e); return true;//这里返回true，child将会受到ACTION_CANCEL case MotionEvent.ACTION_MOVE: mLastMoveEvent = e; //这里实时更新装填 mPtrIndicator.onMove(e.getX(), e.getY()); float offsetX = mPtrIndicator.getOffsetX(); float offsetY = mPtrIndicator.getOffsetY(); boolean moveDown = offsetY &gt; 0; boolean moveUp = !moveDown; boolean canMoveUp = mPtrIndicator.hasLeftStartPosition(); // disable move when header not reach top if (moveDown &amp;&amp; mPtrHandler != null &amp;&amp; !mPtrHandler.checkCanDoRefresh(this, mContent, mHeaderView)) &#123; return dispatchTouchEventSupper(e); &#125; if ((moveUp &amp;&amp; canMoveUp) || moveDown) &#123; movePos(offsetY); //实现滑动操作的代码 return true;// 后续事件将只会走到此方法，不会再往下传递，直到ACTION_UP，本次手势结束 &#125; &#125; return dispatchTouchEventSupper(e); &#125; 用户手指按下。。。。。手指滑动。。。。。手指抬起 ACTION_DOWN : 手指按下后将TouchEvent交给mPtrIndicator处理，后者保留了当前ptr的位置，高度等信息。在执行ACTION_DOWN时，并没有简单地使用Event.getY，而是保留了当前position的一个备份(这是必要的，因为对于下拉刷新来说，最终需要回到的位置是0，而用户按下的位置可能在contentView比较靠下面的位置。ACTION_DOWN的getY并没有太大意义)。随后调用Scroller的 mScroller.forceFinished(true)方法停止滑动，如果定义了页面自动刷新(就是进来会下拉刷新一次)，还会调用onRelease(true)方法，onRelease方法与ACTION_UP相关。 ACTION_MOVE : 手指开始在屏幕上滑动，首先将滑动距离的改变保留到mPtrIndicator中，这里作者将很多坐标计算的方法都拆出来放到这个mPtrIndicator中，暴露出get方法，也使得代码更清晰。在开始滑动之前，先检查下是否是横向滑动，以及是否在(mDisableWhenHorizontalMove，ViewPager需要消费横向手势，这个标志符是为了return super)。往下走，来看这一段123boolean moveDown = offsetY &gt; 0; 新的Event中的y值和mptrIndicator中保留的当前y的差值，所以手指往下拉的话，offset &gt;0,也就是这里的moveDownboolean moveUp = !moveDown;boolean canMoveUp = mPtrIndicator.hasLeftStartPosition()// 检查下当前Event中的y是否大于0，即内容区域是否已经往下走了一点了 接下来，再次询问mPtrHandler能否DoRefresh,将自身和ChildView都交出去，所以可操作性很大大部分的情况下，直接使用一个 return PtrDefaultHandler.checkContentCanBePulledDown(frame, content, header); 使用了一个类似于ViewCompat.canScollVertically的方法，但判断下如果是AbstractListView的话，会调用getFirstVisiblePosition等方法，因为AdapterView能否滑动应该是由其内容能否滑动来决定的。如果这个方法返回true。接着往下走，开始执行View的滑动方法:判断下是否手指在往上拉(moveUp &amp;&amp; canMoveUp)或者往下拉(moveDown),return true，首先事件就不会再往下走，另外后续的ACTION_MOVE_ACTION_UP都只会传递到这个dispatchTouchEvent中实现滑动操作的代码最后会执行这里1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859private void updatePos(int change) &#123; boolean isUnderTouch = mPtrIndicator.isUnderTouch(); // once moved, cancel event will be sent to child if (isUnderTouch &amp;&amp; !mHasSendCancelEvent &amp;&amp; mPtrIndicator.hasMovedAfterPressedDown()) &#123; mHasSendCancelEvent = true; sendCancelEvent(); &#125; // leave initiated position or just refresh complete if ((mPtrIndicator.hasJustLeftStartPosition() &amp;&amp; mStatus == PTR_STATUS_INIT) || (mPtrIndicator.goDownCrossFinishPosition() &amp;&amp; mStatus == PTR_STATUS_COMPLETE &amp;&amp; isEnabledNextPtrAtOnce())) &#123; mStatus = PTR_STATUS_PREPARE; mPtrUIHandlerHolder.onUIRefreshPrepare(this);//刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。这个Holder的结构类似于一个链表，一个Holder里面有UIHandler，以及下一个Holder(next)。作用类似于一个集合，等于作者自己实现了这样一个不断循环的消息列表(看起来挺像Message的)。这个Holder的作用在于可以动态添加UIHanlder，相对应的方法都做好了(addHandler)。 //再次强调，这里表示**刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。此时的状态为STATUS_PREPARED** &#125; // back to initiated position if (mPtrIndicator.hasJustBackToStartPosition()) &#123; tryToNotifyReset(); //**刚刚从下面回到0的位置，通知UIHandler的onUIReset()方法,此时的状态为STATUS_INIT** //将整个过程划分的真详细 // recover event to children，虽然手指还在屏幕上，处于ACTION_MOVE，但这里由于已经复位，需要把ACTION_DOWN传递下去，这一段比较复杂。 if (isUnderTouch) &#123; sendDownEvent(); &#125; &#125; // Pull to Refresh if (mStatus == PTR_STATUS_PREPARE) &#123;//从上到下依次为0 ， 出现动画临界值， HeadView高度 // reach fresh height while moving from top to bottom if (isUnderTouch &amp;&amp; !isAutoRefresh() &amp;&amp; mPullToRefresh // 手指还在屏幕上，不是自动刷新且允许ptr且到达了下滑出现动画效果的临界值，条件还是比较苛刻的 &amp;&amp; mPtrIndicator.crossRefreshLineFromTopToBottom()) &#123; tryToPerformRefresh(); &#125; // reach header height while auto refresh if (performAutoRefreshButLater() &amp;&amp; mPtrIndicator.hasJustReachedHeaderHeightFromTopToBottom()) &#123;//刚刚超过headerView高度一丁点 tryToPerformRefresh(); &#125; &#125; //tryToPerformRefresh()方法判断mPtrIndicator.isOverOffsetToRefresh()，满足条件的话进入STATUS_LOADING，这个时候就要开始让动画run了。所以这里调用的是 mPtrUIHandlerHolder.onUIRefreshBegin(this);和mPtrHandler.onRefreshBegin(this);前者是后来手动添加的UIHandler，后者则是在onInFlateFinish中自行判断的，这两个都会被执行。这里扯一句，这个Holder就像一个中间层，持有了UIHandler,所有方法都调用的是后者HanldleUI的方法。facade模式？ // 终于看到实际调用View滑动的代码了，让一个View滑动的方式有很多种，这里采用的是改变X,Y的方式(X = left+translationX;Y = top+translationY) mHeaderView.offsetTopAndBottom(change); if (!isPinContent()) &#123; mContent.offsetTopAndBottom(change); &#125; invalidate();??我觉得这里好像没有必要这么频繁的调这一句话 //移动完成之后通知UIHandlerHolder位置改变了，没有通知mUIHandler是因为后者就是mContent和mHeaderView。 if (mPtrUIHandlerHolder.hasHandler()) &#123; mPtrUIHandlerHolder.onUIPositionChange(this, isUnderTouch, mStatus, mPtrIndicator); &#125; onPositionChange(isUnderTouch, mStatus, mPtrIndicator);//最后还预留了一个onPositionChange的空方法，子类可能会有点用吧 &#125; 到这里，ACTION_MOVE已经研究完毕，大部分的分析都在注释里面，只要分清楚滑动过程中的各种STATUS，我觉得还是比较好理解的。MOVE过程中伴随着距离的变化，ptr也进入不同的status，ptr本身其实只做了移动headrView和childView的工作，实际的动画效果等等都是由UIHanlder拿着ptr的实例去做的。关于能够滑动多少距离的问题，由于这里并没有判断，所以，这个contentView的下滑是没有下限的，不过在xml里面有一个自定义的resistance，相当于阻力系数了，设置大一点的话就不会出事。目前手指还在屏幕上，status等于STATUS_PREPARED或者STATUS_LOADING。借用手机评测那帮人的话来说，跟手 ACTION_UP： mPtrIndicator中的mPressed设置为false，标示下当前手指已经不按在屏幕上了。如果这时候的位置&gt;0，就是contentView还没有复位，需要想办法让它”弹回来”，这部分工作交给了onRelease(false)，这个false我猜肯定是后面加上去的(查了下git log果然。。。)。来看OnRelease:123456789101112131415161718192021222324private void onRelease(boolean stayForLoading) &#123; tryToPerformRefresh();//会检查下当前status!=STATUS_PREPARED的话直接return false，就是不是在刚开始或刚复位的情况下不做；否则继续执行performRefresh操作，其实这样想也符合常理，手指离开了屏幕，ptr应该能够自我判断是否还需要执行动画 if (mStatus == PTR_STATUS_LOADING) &#123; // keep header for fresh if (mKeepHeaderWhenRefresh) &#123; // scroll header back if (mPtrIndicator.isOverOffsetToKeepHeaderWhileLoading() &amp;&amp; !stayForLoading) &#123;//已经过了需要加载动画的位置，statyForLoading这里传进来的是false mScrollChecker.tryToScrollTo(mPtrIndicator.getOffsetToKeepHeaderWhileLoading(), mDurationToClose);//滑动到加载动画的位置，这里面是不断地post一个runnable，在run方法里面调用之前和ACTION_MOVE里面一样的那个movePos方法，所以重用性还好。也会通知相应的UIHandler或者UIHandlerHolder &#125; else &#123; // do nothing &#125; &#125; else &#123; tryScrollBackToTopWhileLoading();//这里会一直滑动到0的位置，其实也是不断调用updatPos方法，会将STATUS重置为STATUS_INIT或者STATUS_PREPARED &#125; &#125; else &#123; if (mStatus == PTR_STATUS_COMPLETE) &#123;//STATUS_COMPLETE通常由外部调用者调用refreshComplete public 方法设置，相当于SwipeRefreshLayout的setRefreshing()，否则将一直停留在加载状态。也就是说需要调用者手动设置关闭，这也符合常理，因为加载本身是需要时间的，把这个设置的时机交给开发者来手动设置几乎是唯一的选择。 notifyUIRefreshComplete(false); &#125; else &#123; tryScrollBackToTopAbortRefresh(); &#125; &#125; &#125; 到此，ptr内部只剩下一些getter和setter了，不再解释，结合Demo使用就会有所体会。 3. 总结ptr的本质就是通过ViewGroup的dispatchTouchEvent将事件拦截在内部进行处理，并将事件过程分发给几个自定义的接口。而内部又添加了一些自定义的变量，并给出getter和setter，使得外部调用者使用起来十分轻松。只要掌握好事件分发处理和View的绘制流程，拆起来还算简单。当然，如果在实际项目中碰到了类似的需求，我倾向于定制一个简单一点的小工具。","tags":[{"name":"置顶","slug":"置顶","permalink":"https://haldir65.github.io/tags/置顶/"}]},{"title":"让service常驻后台的方法","date":"2016-10-20T21:35:10.000Z","path":"2016/10/20/2016-10-20-android-dirty-code/","text":"今天在V2EX上看到有人提到Notification有漏洞，好奇也就查了一下，结果发现有人专门针对这个问题进行了分析。本身的技术分析并不多，写在这里只是为了作为今后的一个参考。 1. 问题的由来Android对后台应用是有一个权重区分的，最直观的就是查看最近使用的应用，这里每一个应用可能有一个或者多个Process，而系统在资源紧张时会干掉一些Process，而决定后台应用生死的是一个Lru List，也就是least recently used 会被干掉。显然大家都不希望自己被干掉，DAU对于很多应用来说是优先于系统资源和用户体验的。根据官方文档,Android Process有五种，根据优先级从高到低为: 前台进程 可见进程 服务进程 后台进程 空进程 越靠前的进程就越不容易被系统干掉，所以大家都希望能够成为前台进程。成为前台进程的条件:1234567用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）托管某个 Service，后者绑定到用户正在交互的 Activity托管正在“前台”运行的 Service（服务已调用 startForeground()）托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）托管正执行其 onReceive() 方法的 BroadcastReceiver通常，在任意给定时间前台进程都为数不多。只有在内在不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。 此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。 以上条件只有startForeground满足条件了，但大家都知道startForeground会在通知栏常驻一个Notification，且用户取消不了。对于我这种强迫症来说实在是太丑。 2. startForeground一定会在系统状态栏显示一个通知，真的吗?12void startForeground (int id, Notification notification) 我找到了G+上的Chris Banes的一篇post，这其中明确指出1Unfortunately there are a number of applications on Google Play which are using the startForeground() API without passing a valid notification. While this worked in previous versions of Android, it is a loophole which has been fixed in Android 4.3. The system now displays a notifications for you automatically if you do not provide a valid one. 也就是说，API 18以前，只需要提供一个无效的Notification就可以让Notification不显示了。所以，判断下API&lt;18的时候，直接new Notification()就可以得到一个不完整的Notification.文章也指出了这是一个Loophole（已经是个贬义词了）。Api 18之后的修复措施，看ServiceRecord的源码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879public void postNotification() &#123; final int appUid = appInfo.uid; final int appPid = app.pid; if (foregroundId != 0 &amp;&amp; foregroundNoti != null) &#123; // Do asynchronous communication with notification manager to // avoid deadlocks. final String localPackageName = packageName; final int localForegroundId = foregroundId; final Notification localForegroundNoti = foregroundNoti; ams.mHandler.post(new Runnable() &#123; public void run() &#123; NotificationManagerService nm = (NotificationManagerService) NotificationManager.getService(); if (nm == null) &#123; return; &#125; try &#123; if (localForegroundNoti.icon == 0) &#123; // It is not correct for the caller to supply a notification // icon, but this used to be able to slip through, so for // those dirty apps give it the app's icon. localForegroundNoti.icon = appInfo.icon; // Do not allow apps to present a sneaky invisible content view either. localForegroundNoti.contentView = null; localForegroundNoti.bigContentView = null; CharSequence appName = appInfo.loadLabel( ams.mContext.getPackageManager()); if (appName == null) &#123; appName = appInfo.packageName; &#125; Context ctx = null; try &#123; ctx = ams.mContext.createPackageContext( appInfo.packageName, 0); Intent runningIntent = new Intent( Settings.ACTION_APPLICATION_DETAILS_SETTINGS); runningIntent.setData(Uri.fromParts(\"package\", appInfo.packageName, null)); PendingIntent pi = PendingIntent.getActivity(ams.mContext, 0, runningIntent, PendingIntent.FLAG_UPDATE_CURRENT); localForegroundNoti.setLatestEventInfo(ctx, ams.mContext.getString( com.android.internal.R.string .app_running_notification_title, appName), ams.mContext.getString( com.android.internal.R.string .app_running_notification_text, appName), pi); &#125; catch (PackageManager.NameNotFoundException e) &#123; localForegroundNoti.icon = 0; &#125; &#125; if (localForegroundNoti.icon == 0) &#123; // Notifications whose icon is 0 are defined to not show // a notification, silently ignoring it. We don't want to // just ignore it, we want to prevent the service from // being foreground. throw new RuntimeException(\"icon must be non-zero\"); &#125; int[] outId = new int[1]; nm.enqueueNotificationInternal(localPackageName, localPackageName, appUid, appPid, null, localForegroundId, localForegroundNoti, outId, userId); &#125; catch (RuntimeException e) &#123; Slog.w(ActivityManagerService.TAG, \"Error showing notification for service\", e); // If it gave us a garbage notification, it doesn't // get to be foreground. ams.setServiceForeground(name, ServiceRecord.this, 0, null, true); ams.crashApplication(appUid, appPid, localPackageName, \"Bad notification for startForeground: \" + e); &#125; &#125; &#125;); &#125; &#125; 单单是看注释大概能看出来Android团队对于这种做法的不满。所以如果不提供有效Notification，则显示你的App的Icon。所以Api 18以上一定会显示一个Notification。 然而套路还是太深。。。。又有人给出了API 18以上的解决办法:我在这里找到了新的方法，简单来说就是起两个Service，两个Service都在一个进程里。先Start A Service ，onCreate里面 bind B Service，在onServiceConnected的时候A service startForeground(processId,notification)B service startForeground(processId,notification)随后立即调用B service stopForeGround(true)由于两个Notification具有相同的id，所以A service最终成为Foreground Service，Notification也被清除掉了。 3.最后整个过程看下来，API 18以下，给一个不完整的Notification(比如new Notification())，就不会出现在通知栏；API 18以上，起两个Service，B Service负责取消Notification就可以了。目前看来，国内很多App为了保活，都采取了类似的方式。而整体技术层面的实现并不难，只是利用了一个又一个小漏洞罢了。所谓脏代码不过是技术上做的一些欺骗系统的手段，作为开发者，理应明白谷歌设计这一套系统是为了更好的提升用户体验（占据市场）。然而在当前国内应用开发环境下，我们真的能够为用户考虑考虑吗，或者说，我们提交的代码能吗？ Reference 支付宝后台不死的黑科技 Android的startForeground前台Service如何去掉通知显示","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"自定义LayoutManager","date":"2016-10-20T16:37:42.000Z","path":"2016/10/20/2016-10-20-write-your-own-layoutmanager/","text":"1. 系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。基本用法都很简单，这里记录一些重要的用法 GridLayoutManager可以设置某个Item在某一行占据的Column num（VERTICAL的情况下）代码如下:1234567891011GridLayoutManager manager = new GridLayoutManager( this,2 ,GridLayoutManager.VERTICAL,false)manager.setSpanSizeLookup()&#123; new GridLayoutManager.SpanSizeLookup()&#123; @override public int getSpanSize(int position)&#123; return (position % 3 == 0 ? 2 : 1) &#125; &#125; &#125; 所以，一开始可以把这个2设置大一点，后面可以动态设置，看上去就会造成一种多种格子的错觉。 GridLayoutManger的同一行的ItemView的itemHeight必须一致，否则同一行的ItemView底部会出现空隙。这种情况请使用StaggeredGridLayoutManager 2. LayoutManager &lt;——-&gt; Recycler &lt;——–&gt; AdapterLayoutManager永远永远永远不要碰Adapter!!! 3.Recycler构造Recycler内部有两个集合: Scrap Heap ： detachAndScrapView() 暂时不用的View丢到这里，随时取回使用 Recycle Pool: removeAndRecycleView() 确定不需要的View丢到这里，拿回来时position或者data变了 4.FillGaps,最重要的方法 Discover firstVisible position/location 找到layout Gaps 1findFirstVisiblePosition Scrap everything(丢到ScrapHeap) 1234567891011121314/** * Temporarily detach and scrap all currently attached child views. Views will be scrapped * into the given Recycler. The Recycler may prefer to reuse scrap views before * other views that were previously recycled. * * @param recycler Recycler to scrap views into */ public void detachAndScrapAttachedViews(Recycler recycler) &#123; final int childCount = getChildCount(); for (int i = childCount - 1; i &gt;= 0; i--) &#123; final View v = getChildAt(i); scrapOrRecycleView(recycler, i, v); &#125; &#125; Lay out all visible positions 123456789for(...)&#123; int nextPosition = ...; View view = recycler.getViewForPosition(nextPosition); addView(view); //注意这里的Measure和Layout不是平时使用的measureChild和layout方法，原因是ItemDecoration measureChildWithMargin(view,...) layoutDecorated(view,....) &#125; Recycle remaining views123456final List&lt;RecyclerView.ViewHolder&gt; scrapList = recycler.getScrapList();for(int i=0;i&lt;scrapList.size;i++)&#123; final View removingView = scrapList.get(i); recycler.recycleView(removingView); &#125; 注意: 丢到RecyclerPool的View的viewHolder、LayoutParams都被清除掉 4. Scroll事件123456789public int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state) &#123;//dx 表示系统根据传入的TouchEvent告诉你应该滑动多少dx &lt;0 内容向右滑动dx &gt; 0内容向左滑动//这个正负号和ScrollBy那个是一样的邪门//返回值是你告诉系统你实际滑动了多少offsetChildrenHorizontal(delta);//调用该方法会帮助你移动所有的ChildView，比一个个Iterate方便多了&#125; 5.notifyDataSetChanged()调用了什么函数最终会走到onLayoutChildren这里面，就跟重新走一遍layout就可以了 6.ScrollToPosition()和SmoothScrollToPosition()两者的实现的不同:scrollToPosition:Track Requested Position、Trigger requestLayoutSmoothscrollToPosition: Create a SmoothScroller instance、Set the Target Position、invoke startSmoothScrollSmoothScroller是一个接口，在里面实现computeScrollVectorForPosition返回需要到达的位置 7. supportPredictiveItemAnimation主要用于ItemChange Animation主要在发生变化时展示动画。如果想要在滑动过程中展示动画的话，可以考虑在onViewAttachedToWindow或者onBindViewHolder里面给View添加TranslationX（从左边出来），Alpha(透明度从0变成1)，或者ScaleX等等 Reference Dave Smith 500px","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"使用RecyclerView的Animation","date":"2016-10-20T16:16:49.000Z","path":"2016/10/20/2016-10-20-RecyclerViewAnimationStuff/","text":"From the talkRecyclerView Animations and Behind the ScenesYigit Biyar &amp; Chet Haaseon Anroid Dev Summit 2015 1. RecyclerView架构RecyclerView is Flexible , Pluggable and Customizeable内部很多功能都交给了各个组件去完成ChildHelper 、AdapterHelper 、Recycler对于开发者来说并不常用，但它们在内部负责了许多针对Child View的管理。 ViewHolder的创建1 .LayoutManager首先检查getViewForPosition，RecyclerView查找Cache(getViewForPosition)，如果找到了。直接交给LayoutManager,这一过程甚至不需要与Adapter接触。 如果Cache中未找到，RecyclerView调用Adpter的getViewType，并去Recycled Pool中getViewHolderByType。 如果在Pool中未找到，RecyclerView将调用Adapter的createViewHolder。 如果在Pool中这种Type的ViewHolder已经有了，或者步骤3中创建了一个新的viewHolder，bindViewHolder并交给LayoutManager。 最终LayoutManager将把这个View添加到UI，这时会调用RecyclerView的onViewAttachedToWindow回调（生命周期）。 ViewHolder的回收(Reserves) LayoutManager调用removeAndRecycleView，RecyclerView会在这里收到回调onViewDetachedFromWindow 检查这个View.isValid。这一点很重要，在scroll过程中，如果一个View是Valid的话，可以将View添加到Cache中，随后可以简单将其复用。Cache将会invalidate oldest one，并告诉Adapter(onViewRecycled)。 如果不是Valid的View，将会被添加到Pool中，Adapter会收到onViewRecycled回调。 ViewHolder的另一种更好的回收方式(Fancy Reserves!) LayoutManager调用onLayoutChildren Layout完成后，RecyclerView检查那些之前已经被layout了的但不再存在于屏幕上了。RecyclerView将这些View重新添加到ViewGroup中，这些View此时对LayoutManager不可见。重新添加的目的在于动画。 RecyclerView这时候把这些本不该add的View交给ItemAnimator，后者调用动画效果，300ms(安卓中大部分默认动画时间是300ms)之后，调用onAnimationFinished，告诉RecyclerView. 接着RecyclerView通知Adapter(onViewDetachedFromWindow) 最后将这些View添加到Cache或者Recycled Pool。 ViewHolder的销毁 LayoutManager调用removeAndRecycleView，RecyclerView检查View是否valid 如果不是Valid，添加到RecycledPool中，但在这之前先检查是否 hasTransientState（例如正在运行动画） 如果这个View正好处在Animation中，一些属性被Animating， Pool会调用Adapter的onFailedToRecycle(Adapter中应该复写这个方法，取消动画) onFailedToRecycle(ViewHolder)返回true的话，Pool将无视View的TransientState并回收这个View(可能处在动画中) 另一种可能导致ViewHolder被销毁的方式RecyclerView将View添加到Pool中(实际调用的是addViewHolderToRecycledViewPool(ViewHolder))，Pool会检查这种type的ViewHolder是否还放得下（例如type x的ViewHolder已经有5个了，实在太多了），这种情况下就会Kill这种View,这种情况是我们希望避免的。开发者可以调用pool.setMaxRecycledViews(type,count)来让Pool放更多的Holder per type。 一些需要注意的，Pool是基于一个Activity Context的。 2. 使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤perdictiveItemAnimation的关键在于RecyclerView的list并不局限于屏幕。在LayoutManager中复写 supportPredictiveItemAnimations()，返回true。 LinearLayoutManger的实现 1234@Override public boolean supportsPredictiveItemAnimations() &#123; return mPendingSavedState == null &amp;&amp; mLastStackFromEnd == mStackFromEnd; &#125; 可以认为返回值就是true onLayoutChildern在这种情况下会被调用两次，(之前提到本该被移除的View需要重新添加到ViewGroup中，实现就在这里)参考LinearLayoutManager的实现，源代码实在太长，只复制一些注释1234567891011@Override public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) &#123; // layout algorithm: // 1) by checking children and other variables, find an anchor coordinate and an anchor // item position. // 2) fill towards start, stacking from bottom // 3) fill towards end, stacking from top // 4) scroll to fulfill requirements like stack from bottom. // create layout state //omitted.... &#125; 简单来说一共三步: detach and Scrap Views layout那些需要出现在list中的View(包括将要消失的View) 接下来进入第二步layout，在这里确定那些将出现在屏幕外的View的实际位置。 这样LayoutManager就能将必要的信息传递给ItemAnimator 进入ItemAnimator大部分的需要实现的函数在SimpleItemAnimator或者DefaultItemAnimator里面都已经实现好了，所以大部分人的选择就是： 使用DefaultItemAnimator(默认已经设置好了) Implement SimpleItemAnimator(或者DeafaultItemAnimator)，复写一些必要的方法 Animator需要做的一些事1234record[Pre|Post]LayoutInformation//记录动画开始和结束的layout信息animate[Appearance|Disappearance]animatePersistence()//不会改变位置animateChange()//实际的动画添加位置 这些在DefaultItemAnimator中都有默认的实现动画完成后一定要调用 DispatchAnimationFinished(ViewHolder) 记录动画开始前和结束后的信息，实例代码:123456789101112131415161718192021@NonNull @Override public ItemHolderInfo recordPreLayoutInformation(RecyclerView.State state, RecyclerView.ViewHolder viewHolder, int changeFlags, List&lt;Object&gt; payloads) &#123; ColorTextInfo info = (ColorTextInfo) super.recordPreLayoutInformation(state, viewHolder, changeFlags, payloads); return getItemHolderInfo((MyViewHolder) viewHolder, info); &#125; @NonNull @Override public ItemHolderInfo recordPostLayoutInformation(@NonNull RecyclerView.State state, @NonNull RecyclerView.ViewHolder viewHolder) &#123; ColorTextInfo info = (ColorTextInfo) super.recordPostLayoutInformation(state, viewHolder); return getItemHolderInfo((MyViewHolder) viewHolder, info); &#125; @Override public ItemHolderInfo obtainHolderInfo() &#123; return new ColorTextInfo(); &#125; canReuseViewHolder的作用:例如notifyItemChanged(position)后，只是某个位置的viewHolder发生了信息改变，那就没有必要创建一个新的ViewHolder，直接提供原有的ViewHolder，提升性能。 3. 常见错误 mAdapter.notifyItemMoved(1,5)不会调用onBindViewHolder，不会invalidate 不要在onBindViewHolder中添加onClickListener(以匿名内部类的方式,这会使得position变成final),想象一下，mAdapter.notifyItemMoved(1,5)调用后不会调用onBindViewHolder，这使得点击pos 1时实际传递给listener的是pos 5。 检查RecyclerView.NO_POSITION这个Int值为-1，其实就是itemView被removed，但用户手够快，在View被移除前点击了这个View，那这个onClickListener还是会被调用。 mAdapter.notifyItemChanged(position,payload)如果某个ViewHolder中只是一部分信息改变，将更新内容丢到payload中，最终会调用到onBindViewHolder(ViewHolder,position,List Payloads)，在这里只需要把ViewHolder中的一小部分改变就可以了，这有助于优化新能。 onCreateViewHolder必须返回一个new ViewHolder，不能在本地作为成员变量返回。 RecyclerView.setRecycledViewPool(pool)一个pool只能为为同一个context(Activity)中的RecyclerView使用，因为这些View是与Context相关的，而不同的Activity可能有不同的Theme，Style。 Pro RecyclerView最近看到yigit在relam作的关于recyclerView的演讲，记录下来一些比较重要的点 view:: requestLayout的效果，requestLayout会一直地向上请求直到根视图，next Frame开始时，所有的子View都将调用自身的measure(onMeasure)和layout(onLayout)方法如果子View不曾requestLayout,之前的measure结果会被cache下来，节省measure和layout的时间。 在RecyclerView中，在itemView的onBIndView方法中调用ImageLoader的加载图片方法，由于图片加载是异步操作，最终会调用ImageView的setImageBitmap方法。而在ImageView的实现中，setImageBitmap方法最终会调用requestLayout方法，最终会一层层向上传递到recyclerView中，就像这样 1234567imageView setImageBitmapimageView requestLayoutitemView requestLayoutrecyclerView requestLayout 而recyclerView的requestLayout方法会在next Frame重新position所有的child(very expensive!)为此，recyclerView提供了一个setHasFixedSize方法，设置为true表明recyclerView自身不会因为childView的变化而resize，这样recyclerVeiw就不会调用requestLayout方法(如果去看RecyclerView的源码，可以看到mEatRequestLayout这个变量，也就是避免重复调用requestLayout造成性能损耗。)，不会造成所有的childView都被重新测量一遍。在ImageView(2011年之后的版本)中，setImageDrawable方法大致长这样：1234567891011void setImageDrawable(Drawable drawable)&#123; if(mDrawable != drawable)&#123; int oldWidth = mDrawableWidth; int oldHeight = mDrawableHeight; updateDrawable(drawable) if(oldWidth!=mDrawableWidth||oldHeight!=mDrawableHeight)&#123; requestLayout(); &#125; invalidate(); &#125;&#125; 简单来说就是判断下前后图像的宽度或高度是否发生了变化，如果无变化则不需调用requestLayout方法，只需要reDraw。也就避免了这种性能的损耗。但是，TextView的implementation则复杂的多，并没有这种优化。实际操作中，API应该能够告诉客户端图片的width和Height,使用AspectRationImageView加载图片。在图片加载完成之前优先使用PlaceHolder，并设定好加载完成应有的尺寸，这样就避免了后期图片加载完成后的requestLayout。 使用SortedList用于进行List变更123456789SortedList&lt;Item&gt; mSortedList = new SortedList&lt;Item&gt;(Item.class, new SortedListAdapterCallback&lt;Item&gt;(mAdapter))&#123; //override三个方法，懒得抄了&#125;使用方式十分简单，后面的数据更新操作包括notifyDataChange都被处理好了。onNetwokCallback(List&lt;News&gt; news)&#123; mSortedList.addAll(news);&#125; 对于未发生变化的Item，将直接跳过，实现了最优化的列表数据更新。 DiffUtil(added in 24.2.0)用于对比数据变更前后的两个List1234DiffResult result = DiffUtil.calculateDiff( new MyCallback(oldList,newList));mAdapter.setItems(newList);result.dispatchTo(mAdapter); 只需调用上述方法即可实现列表Item更新及Adapter的notify。DiffUtil的callback有四个方法需要复写，另外有一个方法用于单个Item的部分payload更新。在medium上找到一个现成的，直接借用了。12345678910111213141516171819202122232425262728293031323334353637public class MyDiffCallback extends DiffUtil.Callback&#123; List&lt;Person&gt; oldPersons; List&lt;Person&gt; newPersons; public MyDiffCallback(List&lt;Person&gt; newPersons, List&lt;Person&gt; oldPersons) &#123; this.newPersons = newPersons; this.oldPersons = oldPersons; &#125; @Override public int getOldListSize() &#123; return oldPersons.size(); &#125; @Override public int getNewListSize() &#123; return newPersons.size(); &#125; @Override public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) &#123; return oldPersons.get(oldItemPosition).id == newPersons.get(newItemPosition).id; &#125; @Override public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) &#123; return oldPersons.get(oldItemPosition).equals(newPersons.get(newItemPosition)); &#125; @Nullable @Override public Object getChangePayload(int oldItemPosition, int newItemPosition) &#123; //you can return particular field for changed item.//这里的object会被带到onBindViewHolder中 return super.getChangePayload(oldItemPosition, newItemPosition); &#125;&#125; 这些方法会帮助完成remove和add等方法。 viewHolder的生命周期 12345onCreateonBindViewHolder(获取video资源)onViewAttachedToWindow(可以在这里开始播放视频)onViewDetachedFromWindow(可以在这里停止播放视频，随时有可能重新被直接attach，这过程中不会调用onBind方法)onRecycled(可以在这里释放Video资源或者释放Bitmap引用，这之后再使用该ViewHolder需要调用onBind方法) recyclerView的一些defer操作对于日常开发的帮助recyclerView会将一些pending操作defer到next frame。eg: 123456789101112recyclerView.scrollToPosition(15);int x = layoutManager.getFirstVisiblePosition()//此时x并不等于15，因为下一帧并未开始。真正的执行scroll操作需要等到nextFrame执行后才能生效，具体一点的话，就是下一个执行layout的message的callback还未被执行。又例如，在onCreate中调用```javarecyclerView.scrollToPosition(15)//在netWorkCallback中调用setAdapter，这时recyclerView会利用pending的15 position。原因在于recyclerView会判断如果layoutManager和adapter是否为null，如果都为null。skip layout。- 在getItemViewType中返回R.layout.itemLayout的好处。在onCreateViewHolder(ViewGroup viewParent,int ViewType)&#123; View itemView = inflate.inflate(ViewType,parent,false); return XXXHolder(itemView);//aapt可以确保R.layout.xxxx是unique的。&#125; ClickListener的实现在onCreateViewHolder中传一个callback，不要在onBindViewHolder中传，不要把onBindViewHolder中的position变为final的。getAdapterPositon可能为NO_POSITION(-1)，因为RecyclerView的UI更新会被defer到next Frame，在下一帧更新被执行前，用户可能已经点击了item，这时的position就有可能是-1(这种情况发生在点击后删除了所有的item数据，这时获得的position就类似于list的indexAt，当然是-1。). LayoutManager只知道LayoutPosition，并不知道AdapterPositionItems在Adapter的数据集中的顺序可能会随时变更，但recyclerView可能并不会调用onBindViewHolder方法，这也就是onBindViewHolder中的position并不可靠的原因。因为viewHolder本身是backed by Item的，而viewHolder的getAdapterPosition能够正确地反应Item在数据集中的顺序。 4 . 一些参考资料 RecyclerView Animations and Behind the Scenes (Android Dev Summit 2015) ItemAnimator模板 UI ToolKit Demo Yigit Boyar: Pro RecyclerView","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"RecyclerView","slug":"RecyclerView","permalink":"https://haldir65.github.io/tags/RecyclerView/"}]},{"title":"使用Loader进行异步数据操作","date":"2016-10-15T19:12:22.000Z","path":"2016/10/15/2016-10-15-using-loader-in-android-app/","text":"App中经常有这样的需求:进入一个页面，首先查询数据库，如果数据库数据有效，直接使用数据库数据。否则去网络查询数据，网络数据返回后重新加载数据。很显然，这里的查询数据库和网络请求都需要放到子线程去操作，异步了。android推荐使用Loader进行数据查询，最大的好处就是Laoder会处理好与生命周期相关的事情，Android Developers推出过关于Loaders的介绍视频，Loader就是为了解决这种问题而推出的，Loader具有几点好处 如果Activity挂掉了，Activity中启动了的线程怎么办，如果不处理好有可能导致leak。 activity挂了，而子线程中持有View的强引用，此时再去更新View已经没有意义，View已经不可见了 这条线程所做的工作，加载的资源都白白浪费了，下次还需要重新加载一遍。 1. 自定义一个Loader(加载数据类型，Cache处理等)Loader的使用就像一个AsyncTask一样，可以提前指定需要在异步线程中做的事情、数据类型以及完成加载后将数据推送到主线程。谷歌给出了一个使用Loader来查询手机上安装的App并显示在一个ListView中的DemoApp，虽然是好几年前的东西了，并且使用的是V4包里的Loader,但还是值得学习。首先来看自定义的AppListLoader 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576public class AppListLoader extends AsyncTaskLoader&lt;List&lt;AppEntry&gt;&gt; &#123; //AsynTaskLoader支持泛型，AppEntry是已安装App信息的包装类。 private List&lt;AppEntry&gt; mApps; //查询的App列表保存为成员变量 final PackageManager mPm; private boolean DEBUG = true; public static final String TAG = AppListLoader.class.getSimpleName(); //构造函数 public AppListLoader(Context ctx) &#123; // Loaders may be used across multiple Activitys (assuming they aren't // bound to the LoaderManager), so NEVER hold a reference to the context // directly. Doing so will cause you to leak an entire Activity's context. // The superclass constructor will store a reference to the Application // Context instead, and can be retrieved with a call to getContext(). super(ctx); //第一，这里运行在主线程上； //第二，传进来的context(一般是Activity只是为了获取ApplicationContext) mPm = getContext().getPackageManager();//getContext()返回的是Application的Context。 &#125; @Override public List&lt;AppEntry&gt; loadInBackground() &#123; if (DEBUG) Log.i(TAG, \"+++ loadInBackground() called! +++\"); LogUtil.p(\"\");// 子线程,耗时的工作放到这里 // Retrieve all installed applications. List&lt;ApplicationInfo&gt; apps = mPm.getInstalledApplications(0);//PackageManager的方法 if (apps == null) &#123; apps = new ArrayList&lt;ApplicationInfo&gt;(); &#125; // Create corresponding array of entries and load their labels. List&lt;AppEntry&gt; entries = new ArrayList&lt;AppEntry&gt;(apps.size()); for (int i = 0; i &lt; apps.size(); i++) &#123; AppEntry entry = new AppEntry(this, apps.get(i)); entry.loadLabel(getContext()); entries.add(entry); &#125; // Sort the list. Collections.sort(entries, ALPHA_COMPARATOR); return entries; &#125; @Override public void deliverResult(List&lt;AppEntry&gt; apps) &#123; //运行在主线程上 if (isReset()) &#123;//这里就类似于AsyncTask的onPostExecute了，把子线程处理好的数据推送到主线程 if (DEBUG) Log.w(TAG, \"+++ Warning! An async query came in while the Loader was reset! +++\"); // The Loader has been reset; ignore the result and invalidate the data. // This can happen when the Loader is reset while an asynchronous query // is working in the background. That is, when the background thread // finishes its work and attempts to deliver the results to the client, // it will see here that the Loader has been reset and discard any // resources associated with the new data as necessary. if (apps != null) &#123; releaseResources(apps); return; &#125; &#125;//如果调用了reset()方法，说明子线程加载的数据是无效的，释放资源，处理无效数据 // Hold a reference to the old data so it doesn't get garbage collected. // We must protect it until the new data has been delivered. List&lt;AppEntry&gt; oldApps = mApps; mApps = apps; if (isStarted()) &#123;// 如果一切正常，即调用了startLoading且stopLoading和reset均为被调用 if (DEBUG) Log.i(TAG, \"+++ Delivering results to the LoaderManager for\" + \" the ListFragment to display! +++\"); // If the Loader is in a started state, have the superclass deliver the // results to the client. super.deliverResult(apps); &#125; // Invalidate the old data as we don't need it any more. if (oldApps != null &amp;&amp; oldApps != apps) &#123; if (DEBUG) Log.i(TAG, \"+++ Releasing any old data associated with this Loader. +++\"); releaseResources(oldApps); &#125; &#125;&#125; 到此，数据加载的Server端算是完成，这里注意调用到了isReset()、isStarted()等方法，这些就是Server端在在处理Client端生命周期是需要注意的，这个后面再说。 2. 使用LoaderManager管理Loader我们使用LoaderManager在Activity或Fragment中与Loader交互。通常在onCreate或者onActivityCreated中: getSupportedLoaderManager.initLoader()//Activity中getLoaderManager() //Fragment中 这里介绍在Fragment中的使用，因为Loader处理好了与Activity,Fragment甚至Child Fragment的生命周期。推荐使用v4包里的Loader，Loader是在Android3.0引入FrameWork中的，但v4包让Loadder在更早的版本上也有相应的API。更重要的是，v4 包中的Loader是伴随着v4包新的release step，也就是说v4包会与时俱进修复其中的bug。这一点在medium上有介绍 。再看一下这个方法 public abstract Loader initLoader(int id, Bundle args, LoaderManager.LoaderCallbacks callback); Demo中使用的是Fragment： // Initialize a Loader with id ‘1’. If the Loader with this id already // exists, then the LoaderManager will reuse the existing Loader. getLoaderManager().initLoader(LOADER_ID, null, this); 相对应的Fragment需要implements LoaderManager.LoaderCallbacks&lt;List&gt; //注意泛型这个接口有三个方法123456789101112131415161718192021222324252627282930313233343536 public interface LoaderCallbacks&lt;D&gt; &#123; public Loader&lt;D&gt; onCreateLoader(int id, Bundle args); public void onLoadFinished(Loader&lt;D&gt; loader, D data); public void onLoaderReset(Loader&lt;D&gt; loader); &#125;``` 看一下Demo中是如何实现的```java @Override public android.support.v4.content.Loader&lt;List&lt;AppEntry&gt;&gt; onCreateLoader(int id, Bundle args) &#123; if (DEBUG) Log.i(TAG, \"+++ onCreateLoader() called! +++\"); return new AppListLoader(getActivity()); &#125; @Override public void onLoadFinished(android.support.v4.content.Loader&lt;List&lt;AppEntry&gt;&gt; loader, List&lt;AppEntry&gt; data) &#123; if (DEBUG) Log.i(TAG, \"+++ onLoadFinished() called! +++\"); mAdapter.setData(data);//加载数据到UI if (isResumed()) &#123; setListShown(true); &#125; else &#123; setListShownNoAnimation(true); &#125; &#125; @Override public void onLoaderReset(android.support.v4.content.Loader&lt;List&lt;AppEntry&gt;&gt; loader) &#123; if (DEBUG) Log.i(TAG, \"+++ onLoadReset() called! +++\"); mAdapter.setData(null);//loader被reset，UI这边需要清除所有与Loader数据相关的引用，但清除数据的任务会由Loader处理好 &#125; 在三个明显的回调中处理好数据绑定到UI及过期数据的清理即可。 3. 处理Activity生命周期的问题回到server端(Loader),AsyncTaskLoader是一个abstract class，loadInBackground方法已经实现了，但还有几个方法强调必须要复写或者与生命周期相关123456789101112131415161718192021222324252627282930313233343536373839404142434445@Override protected void onStartLoading() &#123; /* Subclasses must implement this to take care of loading their data, as per &#123;@link #startLoading()&#125;. This is not called by clients directly, but as a result of a call to &#123;@link #startLoading()&#125;.*/ //在这里检查一下成员变量中的数据是否不为空，有数据的话，deliverResults &#125; @Override protected void onStopLoading() &#123; /*Subclasses must implement this to take care of stopping their loader, as per &#123;@link #stopLoading()&#125;. This is not called by clients directly, but as a result of a call to &#123;@link #stopLoading()&#125;. This will always be called from the process's main thread.*/ &#125; @Override protected void onReset() &#123; /* Subclasses must implement this to take care of resetting their loader, as per &#123;@link #reset()&#125;. This is not called by clients directly, but as a result of a call to &#123;@link #reset()&#125;. This will always be called from the process's main thread. 如果调用了destoryLoader或者Loader相关联的Activity/Fragment被destory了 所以在Demo中可以看到onReset里面调用了onStopLoading去取消当前任务，同时释放资源，取消广播注册*/ &#125; @Override public void onCanceled(List&lt;AppEntry&gt; apps) &#123; /* Called if the task was canceled before it was completed. Gives the class a chance to clean up post-cancellation and to properly dispose of the result. @param data The value that was returned by &#123;@link #loadInBackground&#125;, or null if the task threw &#123;@link OperationCanceledException&#125;.*/ //在这里释放资源 &#125; @Override public void forceLoad() &#123; /*Force an asynchronous load. Unlike &#123;@link #startLoading()&#125; this will ignore a previously loaded data set and load a new one. This simply calls through to the implementation's &#123;@link #onForceLoad()&#125;. You generally should only call this when the loader is started -- that is, &#123;@link #isStarted()&#125; returns true. Must be called from the process's main thread.*/ //startLoading会直接使用onConfigurationchange之前的Activity中Loader加载的数据，但这里则放弃旧的数据，重新加载，所以isStarted会在这时返回true &#125; 考虑一下，如果在加载数据过程中数据源发生了变化，比如在扫描已安装App过程中又安装了新的App怎么办？所以这里又注册了两个广播，在onReceive的时候调用 mLoader.onContentChanged(); //这会直接调用forceLoad（Loader已经started）或者设置一个标志位，让takeContentChanged（）返回true在onStartLoading中发现这个为true，直接forceLoad//接下来进入loadInBackground,完成后进入deliverResultdeliverResult首先检查Activity是否destoryed(挂了直接释放资源),没挂的话判断下isStarted(是否一切正常，未调用过stopLoading或reset)，符合条件的话通过super.deliverResult把数据传递出去。接下来判断下之前的旧数据和新数据是否一致，否则释放掉旧数据 整个过程考虑到了数据的有效性，资源的释放，在Loader这一端，通过isReset,isStarted等方法确保了不确定的数据加载过程能够和不确定的生命周期和谐共处。网上看到的关于Loader的文章大部分是关于CursorLoader的，也就是和数据库打交道的那一块，这里不细说。主要是目前没有看到太多App中使用这种加载模式，可能确实有点麻烦。在Medium上看到这篇文章，觉得还是有必要做一些记录的。 4. 关于性能最后我想说的是，AsyncTaskLoader内部使用的还是AsyncTask那一套，关于AsyncTask的串行和并行的讨论网上有很多。于是我看了下AsyncTaskLoader中最终调用AsyncTask的execute方法: mTask.executeOnExecutor(mExecutor, (Void[]) null); 至于这个mExecutor的本质: public static final Executor THREAD_POOL_EXECUTOR = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE, TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);CORE_POOL_SIZE = 5嗯，并行的线程池，性能应该还不错。学过rxjava，是否rxjava会是一种比loader更好的加载数据的方式呢 Reference rxLoader making loading data on android lifecycle aware AppListLoader","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"fitSystemWindow和沉浸式状态栏的一些总结","date":"2016-10-14T17:15:47.000Z","path":"2016/10/14/2016-10-14-Android-translucent-status-bar/","text":"沉浸式状态栏是api 19之后引入的，KitKat应该算是一次比较大的更新了，像是Transition，art runtime,storage access FrameWork(这个有空研究下)，另外就是这个被官方称为Full-screen immersive mode的特性了。具体来说，App可以将展示的区域拓展到statusBar的位置了。我觉得直接叫statusBar就好了，大部分人应该也能理解这就是手机上显示”中国移动”还有显示手机电量那一块的长条，宽度是match_parent。高度的话，据说是25dp，然后6.0上给改成了24dp。不过这不是重点 1.最初的做法看到有人推荐使用SystemBarTint这个class,刚上来觉得也挺好用的，就是一个java class，直接复制粘贴到项目里，改一下package name，无脑使用即可。原理的话，看过源码后，大致明白是在statusBar的位置添加一个new View，然后持有这个view的引用，接下来就可以做常规的setBackground或者setBackgroundColor了。初始化时的关键代码如下123456789101112private void setupStatusBarView(Context context, ViewGroup decorViewGroup) &#123;//这个decorViewGroup指的是activity.getWindow() mStatusBarTintView = new View(context); LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, mConfig.getStatusBarHeight()); params.gravity = Gravity.TOP; if (mNavBarAvailable &amp;&amp; !mConfig.isNavigationAtBottom()) &#123; params.rightMargin = mConfig.getNavigationBarWidth(); &#125; mStatusBarTintView.setLayoutParams(params); mStatusBarTintView.setBackgroundColor(DEFAULT_TINT_COLOR); mStatusBarTintView.setVisibility(View.GONE); decorViewGroup.addView(mStatusBarTintView); &#125; 一切看起来都很美好 2. 直到碰到了fitSystemWindow = ture几个月前曾经在项目里写过一个普通的Coordinatelayout内部CollapingToolbarLayout的沉浸式状态栏实现，当时为了赶进度一直试到夜里2点才尝试出在4.4和5.0以上手机都能满意的效果。现在想想有些事还是能够事先搞清楚的好，被动学习的代价实在太大。当时的方法是给Toolbar添加了一个顶部的padding，具体原理也不大清楚。但实际上并不总能一直 3. 使用CollapsingToolbarLayout时的问题 5.0以上的手机似乎很简单12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:id=\"@+id/coordinateLayout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@android:color/background_light\" android:fitsSystemWindows=\"true\" &gt; &lt;android.support.design.widget.AppBarLayout android:id=\"@+id/appbarLayout\" android:layout_width=\"match_parent\" android:layout_height=\"300dp\" android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" android:fitsSystemWindows=\"true\" &gt; &lt;android.support.design.widget.CollapsingToolbarLayout android:id=\"@+id/collapsingToolbarLayout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:contentScrim=\"?attr/colorPrimary\" app:expandedTitleMarginEnd=\"64dp\" app:expandedTitleMarginStart=\"48dp\" app:layout_scrollFlags=\"scroll|exitUntilCollapsed\" &gt; &lt;ImageView android:id=\"@+id/backdrop\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:scaleType=\"centerCrop\" android:src=\"@drawable/image_19\" app:layout_collapseMode=\"parallax\" android:fitsSystemWindows=\"true\" /&gt; &lt;android.support.v7.widget.Toolbar android:id=\"@+id/toolbar\" android:layout_width=\"match_parent\" android:layout_height=\"?attr/actionBarSize\" app:layout_collapseMode=\"pin\" app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" /&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v4.widget.NestedScrollView android:id=\"@+id/nestedScrollView\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" &gt; &lt;TextView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:lineSpacingExtra=\"8dp\" android:padding=\"@dimen/activity_horizontal_margin\" android:text=\"@string/newsBody\" android:textSize=\"20sp\" /&gt; &lt;/android.support.v4.widget.NestedScrollView&gt; &lt;android.support.design.widget.FloatingActionButton android:id=\"@+id/fab\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_margin=\"@dimen/activity_horizontal_margin\" android:src=\"@android:drawable/ic_menu_slideshow\" app:layout_anchor=\"@id/appbarLayout\" app:layout_anchorGravity=\"bottom|right|end\" /&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; 只要分别在CoordinateLayout，AppBarLayout和CollapsingToolbarLayout的xml属性中加上android:fitSystemWindow = “true”java代码里添加一句 getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); //注意下版本判断 或者在当前Activity的values-v19 styles中添加 true就行了。实际效果就是图片完全展开时可以扩展到statusBar下面，图片收缩起来后可以让Toolbar停在statusBar下面。但同样的代码在4.4的手机上会使得实际绘图区域落到statusBar以下，statusBar位置变成带灰色遮罩的白色背景。 4. fitSystemWindow是什么意思fitSystemWindows属性：官方描述:Boolean internal attribute to adjust view layout based on system windows such as the status bar. If true, adjusts the padding of this view to leave space for the system windows. Will only take effect if this view is in a non-embedded activity.简单来说就是如果设置为true,机会根据statusbar来添加一个padding.假定:布局文件只是一个普通的LinearLayout(fitSystemWindow = false（默认情况）),顶部include一个toolbar(fitSystemWindow = true )就已经可以实现4.4以下，4.4-5.0，5.0以上的各种场景了,(前提，使用Appcompat 的Theme，因为它会使用colorPrimaryDark为statusBar着色) 但我的问题在于布局文件是CoordinateLayout&gt; AppBarLyout&gt; CollapsingToolbarLayout&gt; Toolbar &amp; ImageView这种情况下，照理说Toolbar应该顶部留有25dp的padding，也就是fitSystemWindow = true（假设就只是这么简单）然而事实是，fitSystemWindow会让你设置的padding失效,而ImageView需要侵入到statusBar下面，也就是fitSystemWindow = false。那就只要在toolbar的xml中添加fitSystemWindow这个属性好了。编译，运行，5.1手机，Toolbar的小箭头一部分跑到statusBar下面了，感觉就像Toolbar往上移动了25dp(这个目测的哈)，不可取。 5. 查找到的一些解决方案 主要介绍原理了: 类似于SystemBarTint，在android.R.id.content的View中添加一个 View 123 ViewGroup.LayoutParams statusViewLp = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, getStatusBarHeight());contentView.addView(statusBarView,layoutParams) Activity持有一个PhoneWindow，PhoneWindow持有一个根View，叫DecorView（是一个FrameLayout），DecorView持有一个LinearLayout，在LinearLayout下分配两个FrameLayout，一个给ActionBar（当设置主题为NoActionBar是为ViewStub），一个给ContentView。不管如何，只要我们在LinearLayout的第一个位置插入一个View就可以让ContentView下移了。简书作者这种方式其实已经无所谓是否需要在xml中fitSystemWindow了，因为都会通过添加最后一个View的方式把状态栏那块给遮住了。用来着色其实挺好的。 往android.R.id.content这个View里面添加一个假View,xml中fitSystemWindows 往android.R.id.content这个View的parent里面添加一个假View,xml中fitSystemWindows 6.我最后实现的解决方案（4.4,5.1均通过）其实整个问题的关键就是你是否想要在statusBar那一块长条的位置画画。。。。一整张imageView的话，当然希望能够把图片延伸到statusBar以下而Toolbar则不需要延伸到statusBar以下。我尝试了给toolbar加上padding &gt;&gt;失败我尝试了给toolbar加上margin &gt;&gt;&gt;&gt; 问题终于解决 所以最后，我的xml文件中删除了所有的fitSystemWindow，在style-v19中添加了该加的东西最后只在onCreate里面添加几段话123456setSupportActionBar(binding.toolbar);getSupportActionBar().setDisplayHomeAsUpEnabled(true); //这个用于显示返回的小箭头，还得指明parentActivitygetSupportActionBar().setTitle(\"\");CollapsingToolbarLayout.LayoutParams params = (CollapsingToolbarLayout.LayoutParams) binding.toolbar.getLayoutParams();params.setMargins(0, Utils.getStatusBarHeight(), 0, 0); //顶部加个margin就好了binding.toolbar.setLayoutParams(params); 实际操作可能还要判断非空什么的，但大致意思如此看起来像这样5.1图片展开: 5.1图片收起: 4.4图片展开: 4.4图片收起: 原理就是让整个布局占据statusBar的位置，但把Toolbar往下挪一点（其实也就是这篇文章中所推荐的给contentView的给第一个childView添加marginTop的方法） 7.在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪.自己测试了一下，在根布局里添加fitSystemWindows = true之后，在Activity的onCreate里面是可以使用ViewCompat.setfitSystems(rootView,false)设置起作用的。但也只限于onCreate的时候。例如添加一个点击事件，在onClick里面setFitSystemWindows，是不会把RootView往下挪的。这种情况就需要一开始就确保fitSystem = false，然后需要往下挪的时候，给设置一个FrameLayout.LayoutParams的TopMargin就可以了。注意来回切换(全屏模式和着色模式之间切换)的时候要看下rootView的getTop,因为MarginTop设置了之后会导致Top!=0。其实fitSystemWindows是在FitSystemWindowLinearLayout中添加Padding起效的，后期操作的Margin只是对其Child ContentFrameLayout进行操作。所以，这种情况下我觉得直接全部弄成fitSystemWindows = false，先把statusBar后面的空间占据了再说，后面再通过手动设置Margin上下挪动。 8. 一些不要犯的小错误 在Theme中添加1&lt;item name=\"android:fitsSystemWindows\"&gt;true&lt;/item&gt; 这会导致Toast的文字往上偏移，所以，如果需要使用fitSystemWinow = true的话，请老老实实去xml中写 状态栏那一块如果你不去占据的话，而你又声明了windowTranslucentStatus，v21上默认的颜色应该是colorPrimaryDark(是的，AppCompat帮你照顾好了)v19上就是一片带阴影的白色(AppCompat不会在这个版本上帮你着色statusBar)。 6.0以上可以设置statusBar字体的颜色了，这个随便找找就有了 Ian Lake在medium上给出了对于fitSystemWindow的权威解释，非常有价值。 9. 下面这段话可能对于理解window有一定帮助fitsSystemWindows, 该属性可以设置是否为系统 View 预留出空间, 当设置为 true 时,会预留出状态栏的空间.ContentView, 实质为 ContentFrameLayout, 但是重写了 dispatchFitSystemWindows 方法, 所以对其设置 fitsSystemWindows 无效.ContentParent, 实质为 FitWindowsLinearLayout, 里面第一个 View 是 ViewStubCompat, 如果主题没有设置 title ,它就不会 inflate .第二个 View 就是 ContentView.另外，如果使用AppCompat，在api21以上，会自动将状态栏颜色设置为colorPrimaryDark。最后感谢网上各位博主不辞辛苦写出来的干货，让我能够比较简单的复制粘贴他们的代码来检验，写博客真的很累。 Updates这个是用来显示或者隐藏状态栏位置的文字的，其实也就是youtube上一个google dev的视频中的部分内容了，亲测好用，比如全屏播放视频的时候可以调用一下。123456789101112131415161718192021// This snippet hides the system bars.private void hideSystemUI() &#123; // Set the IMMERSIVE flag. // Set the content to appear under the system bars so that the content // doesn't resize when the system bars hide and show. mDecorView.setSystemUiVisibility( View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar | View.SYSTEM_UI_FLAG_IMMERSIVE);&#125;// This snippet shows the system bars. It does this by removing all the flags// except for the ones that make the content appear under the system bars.private void showSystemUI() &#123; mDecorView.setSystemUiVisibility( View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);&#125; Reference Android-transulcent-status-bar总结 由沉浸式状态栏引发的血案 Android开发：Translucent System Bar 的最佳实践 Why would I want to fitsSystemWindows","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"Window","slug":"Window","permalink":"https://haldir65.github.io/tags/Window/"},{"name":"statusBar","slug":"statusBar","permalink":"https://haldir65.github.io/tags/statusBar/"}]},{"title":"安卓坐标系常用方法","date":"2016-10-13T18:17:02.000Z","path":"2016/10/13/2016-10-13-Android-coordinate-System/","text":"记录一些Android系统坐标系的常用方法，因为日常开发中难免会碰到需要单独计算View系统坐标的情况。 ScrollTo，ScrollBy，getVisibleRect这些方法平时想要用的时候总要去网上查找，这里记录下来，方便今后直接参考首先是一张很多人都见过的图中间的蓝色的点是TouchEvent发生时，获得的MotionEvent.getX()、getY()。 1. 坐标原点和坐标轴方向坐标原点有两种，屏幕左上角（statusBar也包含其中）和父控件左上角坐标轴方向：X轴向右，Y轴向下，Z轴(5.0增加)向上。 2. Left,Top,Right,Bottom而Top，left，bottom,down分别对应着其其相对于父控件的距离，由此可以计算得到View的宽度width = getRight()-getLeft() ,View的高度 height = getBottom()-getTop()而实际上view.getHeight()方法的实现也就是mBottom-mTop. 3. X , YX代表的是当前View的左上角那个点的横坐标，Y代表的是纵坐标。X = left + getTranslationXY = Top + getTranslationY通常在动画中使用setTranslationX来实现偏移效果，注意，这是不会改变left的。在滑动过程中，x, y会随着改变。 4. 几个跟Rect相关的获得的是当前View左上角距离屏幕左上角的位置，为此我专门测试了一下 W/ViewAnimationActivity.java: [32 | onWindowFocusChanged]statusBarHeight = 75 W/ViewAnimationActivity.java: [35 | onWindowFocusChanged]getLocationInWindow x = 0 y = 75 W/ViewAnimationActivity.java: [38 | onWindowFocusChanged]getLocationOnScreen x = 0 y = 75可以看到返回的就是View左上角的坐标，一般情况下两者区别不重要，stackoverFlow上有讨论 123456View.getLocationInWindow(pos); //获取在当前window内的绝对坐标View.getLocationOnScreen(pos); //包括statusBar，以屏幕左上角为坐标原点View.getLocalVisibleRect() //以view自身的左上角为坐标原点，这个很有用，//返回的坐标一定是(0,0,xxx,xxx)这样的，可以判断当前View是否完全可见View.getGlobalVisibleRect() // 以屏幕左上角为坐标原点 以上四个方法在onCreate里面返回的值都是0，需要在Activity的onWindowFocusChanged(true)中去获得这里需要扯一点关于window的问题，根据大部分博客的介绍：DecorView是FrameLayout的子类，是View视图层级树的根节点。一般会有一个LinearLayout的child 为此，我在setContentView里面放了一个CoordinateLayout,使用Hierarchy View截图的到这样的结果。图片有点大 在ViewHirearchy中可以看到，Activity中View视图层级从上到下依次为： PhoneWindow$DecorView（有三个child,分别是LinearLayout，View(id/statusBarBackground)和View(id/navigationBarBackground)）LinearLayoutFrameLayoutFitWindowsLinearLayoutContentFrameLayout(id/android.R.id.content) //这在开发过程中有时会用到setContentView设置的view 关于window，DecorWindow的文章网上有很多，仔细研究下会对理解View的测量机制有一定好处，这对于View的工作原理也能够更彻底的理解。参考文章日常开发中，setContentView这个方法只是将我们自己写的activiy_main.xml布局文件inflate出来的view添加到android.R.id.content这个ViewGroup中，实践下来发现这是一个ContentFrameLayout的实例，它的child只有一个，就是我们通过setContentView添加的View 5. 让View滑动起来 offsetLeftAndRight(int offset) //给left和right加上一个值，改变的是View的位置offsetTopAndBottom(int offset) scrollTo(int x,int y) // 将View中的内容移动，坐标原点为parentView左上角，注意，参数为正，效果为反例如scrollTo(-100,0) 在手机上看效果是往右移动了 scrollBy(int x, int y) scrollBy的源码如下:123public void scrollBy(int x, int y) &#123; scrollTo(mScrollX + x, mScrollY + y); &#125; 还有一些不常用的：123public void setScrollX(int value) &#123; scrollTo(value, mScrollY); &#125; 6. 改变LayoutParams的margin让View移动这是一种很生硬的方式，不常用123MarginLayoutParams params = (MarginLayoutParams)mTextView.getLayoutParams(); //可能为nullparams.leftMargin + = 100;mTextView.setLayoutParams();// 这里面调用了requestLayout 7.使用Animation让View动起来根据官方文档的定义Android中一共两种Animation: Property AnimationView Animation(包括Tween animation, Frame animation) 首先从package的位置来看属性动画都位于android.animation这个package下面，常见的如ObjectAnimator继承自ValueAnimatorView动画则位于android.view.animation这个package下，常见的如TranslateA,AlphaAnimation等 View Animation可以代码创建，也可以写在R.anim文件夹下,用法很简单123ImageView image = (ImageView) findViewById(R.id.image);Animation hyperspaceJump = AnimationUtils.loadAnimation(this, R.anim.hyperspace_jump);image.startAnimation(hyperspaceJump); 属性动画可以代码创建，也可以写在R.animator文件夹下,用法:1234AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext, R.anim.property_animator);set.setTarget(myObject);set.start(); 推荐使用ViewPropertyAnimator，这是一个位于android.view下面的class，感觉更像是一个Util,大部分的方法都是在API 12 ,API 14引入的，实际开发中推荐使用ViewCompat.animate() 返回一个ViewPropertyAnimator对象，省去了开发者版本判断的麻烦语法更为简单：1ViewCompat.animate(view).x(500).y(500).setDuration(5000).setInterpolator(new DecelaratorInterpolator()); //不需要调用start() 据说这种方式性能最好，Google官方强烈推荐,参考DevByte。另外，据说大部分Google的App使用的都是DecelaratorInterpolator，当然这跟设计有关。 8.使用Scroller实现smoothScrollView有一个方法computeScroll(),复写，像这样就可以了12345678910111213141516Scroller scroller = new Scroller(mContext); private void smoothScrollTo(int dstX, int dstY) &#123; int scrollX = getScrollX(); int delta = dstX - scrollX; scroller.startScroll(scrollX, 0, delta, 0, 1000); invalidate(); &#125; @Override public void computeScroll() &#123; if (scroller.computeScrollOffset()) &#123; scrollTo(scroller.getCurrX(), scroller.getCurY()); postInvalidate(); &#125; &#125; 9. 补充几个好玩的函数View.canScrollVertically(int)1234567891011121314public static boolean canChildScrollUp(View view) &#123; if (android.os.Build.VERSION.SDK_INT &lt; 14) &#123; if (view instanceof AbsListView) &#123; final AbsListView absListView = (AbsListView) view; return absListView.getChildCount() &gt; 0 &amp;&amp; (absListView.getFirstVisiblePosition() &gt; 0 || absListView.getChildAt(0) .getTop() &lt; absListView.getPaddingTop()); &#125; else &#123; return view.getScrollY() &gt; 0; &#125; &#125; else &#123; return view.canScrollVertically(-1); &#125; &#125; 这段是我在秋百万的android-ultra-pulltorefresh里面找到的，想当初为了自己写下拉刷新，一遍一遍的打Log，最后甚至用上getVisibleRect才算搞定。其实很多东西前人已经帮我们整理好了。对了这东西在v4包里有ViewCompat.canScrollVertically，v4包除了方法数有点多(10k+好像)这点不好以外，一直都很好用附上supportLibrary各个包的方法数，如果对65536这个数字熟悉的话，还是会注意点的。 总结 使用getLocalVisibleRect可以判断一个view是否完全可见 scrollBy,setScrollX等内部都是调用了scrollTo方法，ScrollTo方法传参数与实际效果是相反的 updatesAndroid device Monitor里面有一个Dump UI Hierarchy for UI Automator，直接查看视图层级 Reference Android应用坐标系统全面详解 ​[如何取得View的位置之View.getLocationInWindow()的小秘密](http://blog.csdn.net/imyfriend/article/details/8564781 详解实现Android中实现View滑动的几种方式","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"TouchEvent","slug":"TouchEvent","permalink":"https://haldir65.github.io/tags/TouchEvent/"}]},{"title":"主线程的工作原理","date":"2016-10-12T16:47:42.000Z","path":"2016/10/12/2016-10-12-How-the-mainThread-work/","text":"​ 今天突然找到这样一个问题: “Handler的postDelayed会阻塞线程吗？”。基于自己之前对于Handler的线程间通讯机制的理解，还是不能给出明确的答案。正好打算把一篇关于主线程的工作原理的文章写出来，顺带看下能否把这个问题从源码的角度解释清楚。 1. 从线程（Thread）开始通常，一个Process会有一个主线程, 而在Android中，UI控件相关的方法和一些系统callback都会发生在主线程上(onResume,onCreate,onStartCommand,onDraw, etc)。 如果App中使用了多个Process，则每个Process都会有一个主线程，但这不是今天的重点。Android应用是如何启动的?启动一个应用时，系统会从Zygote Process fork出一个新的Process，最终走到ActivityThread 的main方法123456789101112public static void main(String[] args) &#123;//省略部分无关代码 Looper.prepareMainLooper(); ActivityThread thread = new ActivityThread(); thread.attach(false); if (sMainThreadHandler == null) &#123; sMainThreadHandler = thread.getHandler(); &#125; // End of event ActivityThreadMain. Looper.loop(); throw new RuntimeException(\"Main thread loop unexpectedly exited\");//从这里可以猜到Looper.loop方法会一直执行下去 &#125; 看一下Looper.prepareMainLooper()方法：12345678910111213141516/** * Initialize the current thread as a looper, marking it as an * application's main looper. The main looper for your application * is created by the Android environment, so you should never need * to call this function yourself. See also: &#123;@link #prepare()&#125; */public static void prepareMainLooper() &#123; prepare(false); synchronized (Looper.class) &#123; if (sMainLooper != null) &#123; throw new IllegalStateException(\"The main Looper has already been prepared.\"); &#125; sMainLooper = myLooper(); &#125;&#125; 大致意思就是为当前Thread添加一个Looper。Looper.java是一个普通的class，其大致作用就是为当前Thread维持一个message loop，默认情况下一个Thread并没有一个Looper，要想添加一个，需要在该线程中调用Looper.prepare()，然后调用Looper.loop()方法即可让消息循环一直持续下去。大部分和message Loop的交互都是通过Handler这个类来进行的。例如12345678910111213141516class LooperThread extends Thread &#123; * public Handler mHandler; * * public void run() &#123; * Looper.prepare(); * * mHandler = new Handler() &#123; * public void handleMessage(Message msg) &#123; * // 在这里处理消息 * &#125; * &#125;; * * Looper.loop(); //这里面发送消息 * &#125; * &#125; Looper持有一个MessageQueue(消息队列)成员变量，消息循环时，Looper就不断地从消息队列中拿出消息进行处理。下面来看Looper.loop()方法里所做的事：1234567891011121314151617181920212223/** 删除了部分不相关的代码 * Run the message queue in this thread. Be sure to call * &#123;@link #quit()&#125; to end the loop. */ public static void loop() &#123; final Looper me = myLooper();//返回当前线程中对应的Looper，看看下面的Exception就知道了 if (me == null) &#123; throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\"); &#125; final MessageQueue queue = me.mQueue; for (;;) &#123; Message msg = queue.next(); // might block if (msg == null) &#123; // No message indicates that the message queue is quitting. return; &#125; try &#123; msg.target.dispatchMessage(msg); &#125; finally &#123; ....省略 &#125; &#125; &#125; 简单解释一下，也就是从消息队列中取出新的消息(msg)。交给msg.target.dispatchMessage(msg)这个trarget是个Handler来看下Handler里面的dispatchMessage方法123456789101112131415/** * Handle system messages here. */ public void dispatchMessage(Message msg) &#123; if (msg.callback != null) &#123; handleCallback(msg); &#125; else &#123; if (mCallback != null) &#123; if (mCallback.handleMessage(msg)) &#123; return; &#125; &#125; handleMessage(msg); &#125; &#125; 很明显是一个either or 的过程：Message这个类里面有个Runnable callback，如果这个message有callback的话，就执行这个runnable，否则执行handler.callBack.handleMessage。也就是我们经常用的123456Handler handler = new Handler()&#123; @Override public void handleMessage(Message msg) &#123; super.handleMessage(msg); &#125; &#125;; 这种内部类的形式了需要注意的是，Message最好不要用new，使用obtain方法获得，使用release方法释放，这里面有一个消息池的概念，我也不太理解。MessageQueue中没有太多的公共方法，其中next()方法会返回 message that should be processed. Will not return message that will be processed at future times.Message有一个long类型的变量Message.when，指的是这条消息最早可以被执行的时间，这个时间是基于SystemClock.uptimeMills()的。所以如果消息队列中没有一条message到达自己的可执行时间, 这个next()方法就会一直block。值得注意的是SystemClock.uptimeMills是基于CPU活动时间的，如果cpu处于sleep状态，这个sleep时间是不算的。所以如果你postDelayed了10s，假设cpu5s后开始休眠，10s后醒来，睡眠的这段时间是不算的。所以真正执行的时间可能还会往后延迟。 2. HandlerHandler基本上就做两件事 add message to the messageQueue of the Looper it’s associated with post() //把一条消息添加到所有可以被执行的消息的最后面，但在还没到时间的消息的前面 postDelayed()/postAtTime() //一个相对时间，一个绝对时间 postAtFrontOfQueue() // @piwai 插队行为，不要用 Handle message when this message doesn’t have callbackHandler的构造方法有7个,初始化时需要获得一个Looper常用的Handler handler = new Handler() 会创建一个基于当前线程的Looper的Handler,如果当前线程没有调用Looper.Prepare，会抛出一个异常，这些在源代码里都能看到。一些好用的构造函数 Handler (Looper.getMainLooper()) //往主线程的Looper的消息队列里发消息Hanlder(Looper.myLooper()) //往当前线程Looper的消息队列里添加消息 Choreographer使用Android studio时，经常会在Logcat里看到这样的 info: Skipped 60 frames! The application may be doing too much work on its main thread 这段log出自Chreographer ，大意就是主线程上做的事太多或者做了太多不该在主线程上做的事。至于为什么不要在主线程上做太多的事，来看看主线程都有哪些工作:System Events , Input Events ,Application callback ,Services, Alarm ,UI Drawing….另外，当屏幕内容发生变化，或者在Animation运行中，系统将会尝试每隔16ms来Draw a Frame。而这部分工作是由Choregrapher来完成的，而其内部是通过一个Handler来进行Frame更新的。 12345678910111213141516171819202122232425FrameHandler mHandler = new FrameHandler(Looper.myLooper());Message msg = mHandler.obtainMessage(MSG_DO_FRAME);msg.setAsynchronous(true);mHandler.sendMessageAtTime(msg,nextFrameTime) private final class FrameHandler extends Handler &#123; public FrameHandler(Looper looper) &#123; super(looper); &#125; @Override public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case MSG_DO_FRAME: doFrame(System.nanoTime(), 0); break; case MSG_DO_SCHEDULE_VSYNC: doScheduleVsync(); break; case MSG_DO_SCHEDULE_CALLBACK: doScheduleCallback(msg.arg1); break; &#125; &#125; &#125; 假设你在onMeasure,onLayout,onDraw这些方法中耽误主线程太多时间，Choregrapher将不能及时的更新Frame，哪怕你只耽误了1ms，系统也只能在16ms(大约)之后才能更新下一Frame。 3. 为了在开发中发现不应该在主线程中进行的操作(IO，网络)，可以使用StrictMode：1234567891011121314if (BuildConfig.DEBUG) &#123; StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder() .detectDiskReads() .detectDiskWrites() .detectNetwork() // or .detectAll() for all detectable problems .penaltyLog() .build()); StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder() .detectLeakedSqlLiteObjects() .detectLeakedClosableObjects() .penaltyLog() .penaltyDeath() .build()); &#125; 4 .Activity LifeCycle Events Activity LifeCycle Events(startActivity(), finishi()) go out of your process through Binder IPC to the ActivityManager //有时候startActivity启动的Activity不是自己Process的,比如调用系统相机这种 Then back on to your main queue in the form of lifeCycle callbacks(onCreate(),onDestory() et_al) // 异步，异步！ 最后回到文章开头的那个问题：Handler.postDelay会阻塞线程吗？答案在这里找到了postDelayed本身就是把一条消息推迟到相对时间多久之后。关键在Looper取出这条消息时，用的是 Message msg = queue.next(); // might block 注释已经暗示了可能会阻塞，看下next方法做了什么:123456789101112131415161718192021222324252627282930313233343536373839404142434445 Message next() &#123; .....省略 for (;;) &#123; if (nextPollTimeoutMillis != 0) &#123; Binder.flushPendingCommands(); &#125; nativePollOnce(ptr, nextPollTimeoutMillis); synchronized (this) &#123; // Try to retrieve the next message. Return if found. final long now = SystemClock.uptimeMillis(); Message prevMsg = null; Message msg = mMessages; if (msg != null &amp;&amp; msg.target == null) &#123; // Stalled by a barrier. Find the next asynchronous message in the queue. do &#123; prevMsg = msg; msg = msg.next; &#125; while (msg != null &amp;&amp; !msg.isAsynchronous()); &#125; if (msg != null) &#123; if (now &lt; msg.when) &#123; // Next message is not ready. Set a timeout to wake up when it is ready. nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE); &#125; else &#123; // Got a message. mBlocked = false; if (prevMsg != null) &#123; prevMsg.next = msg.next; &#125; else &#123; mMessages = msg.next; &#125; msg.next = null; msg.markInUse(); return msg; &#125; &#125; else &#123; // No more messages. nextPollTimeoutMillis = -1; &#125; &#125; &#125;true//....省略部分&#125; 首先进来 调用了nativePollOnce(ptr,nextPollTimeoutMillis);这是个native方法，类似于线程的wait方法，不过使用了Native的方法会更加精准。可以认为是用native方法让这个queue.next的方法耗时延长了，所以return时返回的Message也就满足合适的时间。往下看 // Next message is not ready. Set a timeout to wake up when it is ready. nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE); 所以确实是blocked了。但这并不意味着从postDelayed(r,10)开始，接下来的10ms就真的完全堵塞了(queue.next阻塞)PostDelayed最终会调用到enqueMessage方法，看一下:1234567891011121314151617181920212223242526272829303132333435363738394041424344synchronized (this) &#123; if (mQuitting) &#123; IllegalStateException e = new IllegalStateException( msg.target + \" sending message to a Handler on a dead thread\"); Log.w(TAG, e.getMessage(), e); msg.recycle(); return false; &#125; msg.markInUse(); msg.when = when; Message p = mMessages; boolean needWake; if (p == null || when == 0 || when &lt; p.when) &#123; // New head, wake up the event queue if blocked. msg.next = p; mMessages = msg; needWake = mBlocked; &#125; else &#123; // Inserted within the middle of the queue. Usually we don't have to wake // up the event queue unless there is a barrier at the head of the queue // and the message is the earliest asynchronous message in the queue. needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous(); Message prev; for (;;) &#123; prev = p; p = p.next; if (p == null || when &lt; p.when) &#123; break; &#125; if (needWake &amp;&amp; p.isAsynchronous()) &#123; needWake = false; &#125; &#125; msg.next = p; // invariant: p == prev.next prev.next = msg; &#125; // We can assume mPtr != 0 because mQuitting is false. if (needWake) &#123; nativeWake(mPtr); &#125;&#125; 注意nativeWake方法，在满足一定情况下会唤醒线程总结一下就是postDelayed确实调用了阻塞线程的方法，但一旦消息队列前面插入了可执行的message，会调用唤醒线程的方法。这些大部分在MessageQueue这个class中，看一下基本都能明白。 回顾一下整个过程:主线程作为一个Thread，持有一个Looper对象，Looper持有一个MessageQueue的消息队列，并一个一个地从中取出满足执行时间条件的Message，执行Messgae的callback或者交给Handler的handleMessage去处理。 5. update MessageQueue里面有个IdleHandler,可以在消息队列空了时候安插一些事情去做，Glide用了这个特性，在主线程不那么忙的时候做了一些事 nativePoolOnce能够挂起主线程和唤醒主线程的原理是使用了linux的管道： 以下文字出自Android应用程序消息处理机制（Looper、Handler）分析 管道是Linux系统中的一种进程间通信机制，具体可以参考前面一篇文章Android学习启动篇推荐的一本书《Linux内核源代码情景分析》中的第6章–传统的Uinx进程间通信。简单来说，管道就是一个文件，在管道的两端，分别是两个打开文件文件描述符，这两个打开文件描述符都是对应同一个文件，其中一个是用来读的，别一个是用来写的，一般的使用方式就是，一个线程通过读文件描述符中来读管道的内容，当管道没有内容时，这个线程就会进入等待状态，而另外一个线程通过写文件描述符来向管道中写入内容，写入内容的时候，如果另一端正有线程正在等待管道中的内容，那么这个线程就会被唤醒。这个等待和唤醒的操作是如何进行的呢，这就要借助Linux系统中的epoll机制了。 Linux系统中的epoll机制为处理大批量句柄而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著减少程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。但是这里我们其实只需要监控的IO接口只有mWakeReadPipeFd一个，即前面我们所创建的管道的读端，为什么还需要用到epoll呢？有点用牛刀来杀鸡的味道。其实不然，这个Looper类是非常强大的，它除了监控内部所创建的管道接口之外，还提供了addFd接口供外界面调用，外界可以通过这个接口把自己想要监控的IO事件一并加入到这个Looper对象中去，当所有这些被监控的IO接口上面有事件发生时，就会唤醒相应的线程来处理，不过这里我们只关心刚才所创建的管道的IO事件的发生。 Reference Handler.postDelayed()是如何精确延迟指定时间的 How the Main Thread works 安卓中为什么主线程不会因为Looper中的死循环而卡死？","tags":[{"name":"Handler Message","slug":"Handler-Message","permalink":"https://haldir65.github.io/tags/Handler-Message/"}]},{"title":"Theme和Style的区别","date":"2016-10-10T19:35:32.000Z","path":"2016/10/10/theme-versus-style/","text":"认识Theme和Styles 重新看一遍Using Themes and styles without going crazy，大部分属于直接翻译 1. Styles1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来1&lt;View android:background= \"#ff0000\" /&gt; 变成 12345&lt;View style= \"@Style/MyStyle\" /&gt;&lt;Style name = \"MyStyle\"&gt; &lt;item name = \"android:background\"&gt;#ff0000&lt;/item&gt;&lt;/Style&gt; 这种形式，对于大量的具有相同属性的且具有共性的View，可以直接使用对应的Style，这能够让layout文件更加整洁。前提是确信layout文件中使用的View具有相同的属性。 1.2 Style InheritanceStyle可以继承，两种方式： 假设有parent style ，一种在name中使用前缀的方式指明parent，另一种在后面显式的声明parent 1&lt;style name = \"Parent\"/&gt; Explicit child 1&lt;style name = \"Child\" parent = \"Parent\"&gt; Implicit Child 1&lt;style name = \"Parent.Child\"/&gt; 同时使用两种方式时，默认使用Explicit Parent 为避免混淆，推荐使用Explicit Child且Child name不带前缀 View不能拥有两个Style,除了TextView及其子类，例如 12345&lt;TextView&gt; android:textColor = \"#ffffff\"truestyle=\"@style/SomeStyle\" android:textAppearance = \"@style/MyText\"&lt;/TextView&gt; 如上所示，TextView中可以定义TextAppearance，后者包含了常见的textColor，textSize等attributes，而在一个View中可以同时定义两个Style。如果出现冲突，styles之间相同attributes的应用优先级为： android:textColor &gt;&gt; SomeStyle中的android:textColor&gt;&gt;MyText中的android:textColor 使用TextAppearance 时一定要有一个parent 123&lt;style name = \"MyText\" parent=\"TextAppearance.Appcompat\"&gt; &lt;item name = \"android:TextColor\"&gt;#F08&lt;/item&gt;&lt;/style&gt; 因为使用style时，系统将把style中定义的attribute和当前View的默认attribute融合起来，而TextView默认attribute 中什么也没有，造成textSize = 0的情况，所以务必选择parent，在parent style已经定义好大多数属性的情况下再去修改小部分属性将简单得多。TextAppearance可以在Theme中定义，也可以写在单一的TextView上。 2. Themes 在Android中，Theme名字以”Theme.”开头，查看源码会发现只是定义了一大堆color attributes 和Window attributes。Themes比Styles的作用范围更广，themes可以在Application,Activity层面管理Widget外观，Theme还可以实现夜间模式切换 来看如何定义一个Theme 123&lt;style name = \"Theme\"&gt; &lt;item name = android:statusBarColor&gt;#ff0000&lt;/item&gt;&lt;/style&gt; 回头看一下Style 123&lt;Style name = \"Style\"&gt; &lt;item name = \"android:background\"&gt;#ff0000&lt;/item&gt;&lt;/Style&gt; 语法看起来完全一样。 区别：styles中的属性被直接送到View的构造函数中，记得在自定义View时写的那些attrs吗，其实就是两个参数的构造函数中的AttributeSets Theme应用范围更广，定义的属性和Style也不尽相同。 两者之间有一些联系：例如Theme中可以定义default widget style，Style可以引用Theme中定义的属性(?attr:selectableItemBackground还记得吗) 上面提到了Theme中可以定义default widget style，具体做法无非就是这样: 123&lt;style name= \"MyTheme\" parent=\"Theme.AppCompat.Light\"&gt; &lt;item name=\"android:editTextStyle\"&gt;@style/MyEditTextStyle&lt;/item&gt;&lt;/style&gt; 所以，只要在AppTheme中点进去，找一下这个键对应的值就可以了 2.1 使用Theme 两种方式: 1.在Manifest中，例如 123456&lt;application android:theme=\"@style/Theme.AppCompat\" /&gt;或者&lt;activity android:theme=\"@style/Theme.AppCompat.Light\" /&gt; activty中Theme override Application的Theme 应用于View Lollipop开始引入View Theming的概念 123&lt;Toolbar android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" app:popupTheme=\"@style/ThemeOverlay.AppCompa.Light\"/&gt; 应用在View上的Theme将能够作用在该View及其所有的Children，这样做的好处在于没有必要专门为了一个View而去选择其他的Theme。 例如在Holo中有Holo.Light.DarkActionBar，为了专门适配ActionBar需要一个专门的Theme。目前看来主要应用在Toolbar上。 3 .墙裂推荐使用AppCompat 好处: Material on all devices ,记得以前听说AppCompat在21以上继承自Theme.Material。 Baseline themes/styles AppCompat 预设了一系列样式标准，只需要继承AppCompat，改动一小部分样式就能完成设计 Enable View theming pre-Lollipop 使用ColorPrimary , ColorAccent等attributes(backPorted by AppCompat)设置Widget样式 在Theme中可以定义默认的Widget样式，例如 123&lt;style name=\"AppTheme\" parent = \"Theme.AppCompat\"&gt;&lt;item name=\"android:spinnerItemStyle\"&gt;@sytle/MySpinnerStyle&lt;/item&gt;&lt;/style&gt; 还可以更改默认样式： 1234&lt;style name = \"AttrTheme\" parent =\"Theme.AppCompat\"&gt;&lt;item name =\"selectableItemBackground\"&gt;@drawable/bg&lt;/item&gt;&lt;/style&gt;&lt;Button android:background=?attr/selectableItemBackground\"/&gt; 这样就可以自定义点击时的Drawable了。 支持android:theme: API 7+(只应用于该View)，API 11+(View及其子View) View theming原本只是API 21才引入的概念，AppCompat实现了向前兼容 4 . ?attr的问题 ?android:attr/selectableItemBackground 一个个来解释： ? : we’re doing a theme lookup android: we’re looking up something within the android namespace attr/ : we’re looking for an attribute(可省略) selectableItemBackground: The name of the atribute we’re looking up 把attr/省略掉后变成 ?android:selectableItemBackground 效果完全一样 123&lt;style name=\"MyTheme\"&gt; &lt;item name = \"android:colorPrimary\"&gt;@color/red&lt;/item&gt;&lt;/style&gt; 问题在于android:ColorPromary是Lollipop才引入的，解决方案 123&lt;syle name = \"MyTheme\" parent=\"Theme.AppCompat\"&gt;true&lt;item name = \"colorPrimary\"&gt;@color/red&lt;/item&gt;&lt;/syle&gt; 注意这里没有android: 前缀，AppCompat针对API21之前的版本定义了自己的一套资源。 再举个例子 123456789101112131415在values/attrs.xml中&lt;attr name:\"myAttribute\" format=\"dimension\"/&gt;在values/themes.xml中&lt;style name = \"MyTheme\" parent = \"Theme.AppCompat\"&gt; &lt;item name=\"myAttribute\"&gt;4dp&lt;/item&gt; 这就是实际使用的Theme&lt;/style&gt;在values/styles.xml中&lt;style name=\"MyStyle\"&gt; &lt;item name=\"android:padding\"&gt;?attr/myAttribute&lt;/item&gt;&lt;/style&gt;实际操作中在layout文件中，通过将一个长度，颜色定义为?attr的方式，就会去当前的Theme中寻找相对应的attribute，这就是黑夜模式切换的原理 要注意的是，所有非android nameSpace的attribute Name都是global的，所以如果两个library定义了相同的attribute Name，将无法编译通过。 Style可以通过?attr的方式引用Theme中的资源 5 .获取Theme1234567context.getTheme().resolveAttribute(R.attr.dialogTheme,outValue,true)在View中 TypedArray a = context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.ImageView,defStyleAttr,defStyleRes)int alpha = a.getInt( com.android.internal.R.styleable.ImageView_drawableAlpha,255) Activity有一个setTheme(int themeResId)方法，注意，这个方法并不是取代原先的Theme,只是在原有的Theme上apply了。所以这个命名不算太好。Activity内部会在onCreate()前调用setTheme(你写在manifest里面的Theme) 6. v21的问题1234567891011在values/styles.xml中&lt;style name=\"BaseToolbar\"/&gt;在values-v21/styles.xml中&lt;style name= \"BaseToolbar\"&gt; &lt;item name = \"android:elevation\"&gt;4dp&lt;/item&gt;&lt;/style&gt;elevation是21以上api才有的属性，lint会提示问题这样，在values/styles.xml中&lt;style name = \"Toolbar\" parent = \"BaseToolbar\"/&gt;lint就不会飙黄了，直接引用Toolbar即可 通过这种继承的方式能够在自己的Theme中使用统一的theme，针对不同的运行时版本确定最终运行的Theme。 7 . ThemeOverlay123ThemeOverlay.Material.LightThemeOverlay.Material.Dark//etc ... 用于添加到现有的Theme上，例如Theme.Material.Light只包含color relevant to a light Theme，不会改变原有Theme的window Attributes。查看源码，只是完整的Theme中的一小部分attribute。 8. 常见错误 作为Theme中引用的style必须要有一个parent 例如12345678在AppTheme中&lt;item name = \"android:editTextStyle\"&gt;@style/MyEditTextStyle&lt;/item&gt;&lt;style name= \"MyEditTextStyle\"&gt; &lt;item name= \"android:fontFamily\"&gt; sans-serif-medium &lt;/item&gt;&lt;/style&gt; 这样做的结果将是所有的EditText都会失去基本的属性 defStyleAttr vs defStyleRes 常见于 12ObtainStyledAttributes(AttributeSet set,int []attrs, int defStyleAttr,int defStyleRes) 直接解释： defStyleAttr: The attr in your theme which points to the default style eg: R.attr.editTextStyle defStyleRes: The resource ID of the default style eg:R.style.Widget_Material_EditText ObtainStyledAttributes查找Value时读取的顺序如下 123451. Value in the AttributeSet2. Value in the explicit style3. Default style specified in defStyleRes4. Default style specified in defStyleAttr5. Base value in this theme 注意最后一条，万一在manifests文件中出现这种东西 123&lt;Style name = \"AppTheme\" parent = \"Theme.AppCompat\"&gt; &lt;item name = \"android:background\"&gt;...&lt;/item&gt;&lt;/Style&gt; 这意味着 Any View which doesn’t have a background set ,will use the theme’s value , SHIT! 9. 容易遇到的错误编译不通过的情况12Error retrieving parent for item: No resource found that matches the given name '@android:style/TextAppearance.Holo.Widget.ActionBar.Title' 10. 最后，一点好玩的12345678Context themedContext = new ContextThemeWrapper(baseContext,R.style.MyTheme);View view = LayoutInflator.form(themedContext) .inflate(R.layout.some_layout,null);//或者View view = new View(themedContext);//生成的View就会带有MyTheme中的属性，动态设置。 而这也是AppComPat对于API 21以下版本进行兼容的原理翻了一下文档：ContextThemeWrapper : Added in API level 1 这一点AppCompat的作者也在2014年的一篇 博客中提到了。 reference Daniel Lew View Constructor IO 2016","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"android 7.0一些新特性介绍及适配方案","date":"2016-10-08T03:02:26.000Z","path":"2016/10/08/android-7-0-new-features/","text":"Google I/O 2016上的What’s new in Android介绍的比较全面，MultiWindow、Notification、ConstraintLayout等都比较简单。这里拎出来开发者不得不注意的几点来介绍。 1. BackGround OptimizationCONNECTIVITY_CHANGE(很多应用喜欢在Manifest里注册这个BroadcastReceiver，导致网络变化时，一大堆应用都被唤醒，而ram中无法同时存在这么多process，系统不得不kill old process，由此导致memory thrashing) 同时被移除的还有NEW_PICTURE,NEW_VIDEO. 具体来说: 对于targeting N的应用，在manifest文件中声明 static broadcastReceiver，监听CONNECTIVITY_CHANGE将不会唤醒应用。如果应用正在运行，使用context.registerReceiver，将仍能够接受到broadcast。但不会被唤醒。 解决方案: 使用JobScheduler或firebase jobDispatcher。举个例子:123456789101112131415public static final int MY_BACKGROUND_JOB = 0; public static void scheduleJob(Context context)&#123; if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123; JobScheduler js = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE); JobInfo job = new JobInfo.Builder( MY_BACKGROUND_JOB, new ComponentName(context,MyJobService.class)). setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED). setRequiresCharging(true). build(); js.schedule(job); &#125; &#125; 对于NEW_PICTURE,NEW_VIDEO. 所有在7.0 Nuget以上设备运行的应用(无论是否 target N) 都不会收到这些broadcast。简单来说，fully deprecated !!! 解决方案：使用JobScheduler(可以监听contentProvider change)NEW_PICTURE的处理(这段代码只在API24以上存在，所以加了版本判断)123456789101112131415public static void scheduleJob(Context context)&#123; if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123; JobScheduler js = context.getSystemService(JobScheduler.class); JobInfo.Builder builder = new JobInfo.Builder( R.id.schedule_photo_jobs, new ComponentName(context,PhotoContentJob.class)); builder.addTriggerContentUri( new JobInfo.TriggerContentUri(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, JobInfo.TriggerContentUri.FLAG_NOTIFY_FOR_DESCENDANTS) ); js.schedule(builder.build()); &#125;&#125; 参考youtube上谷歌员工的演讲 2. 文件系统的权限更改(FileProvider) File storage permission change 简单来说就是Uri.fromFile(file://URI)不能再用了，需要使用FileProvider，这主要是为了6.0开始引进的permission model 考虑的，storage permission例如WRITE_EXTERNAL_STORAGE这种都已经属于Dangerous permission了。 一个常见的场景就是调用系统相机拍照，给Intent设置一个uri，在7.0上直接用Uri.FromFile会崩 需要通过FileProvider提供Uri,写了一个Demo，使用FileProvider传递文件给另一个App。 另一个需要注意的就是DownloadManager访问COLUMN_LOCAL_FILENAME会报错，这个不常见。 Reference Docs youtube Andrioid 7.0适配心得 Android 7.0 Behavior Changes","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"安卓事件分发流程","date":"2016-10-06T23:32:30.000Z","path":"2016/10/06/touch-event-distribution/","text":"图1 默认情况下事件传递的路径 Touch事件始于ACTION_DOWN, 终止于ACTION_UP, 这其中可能会伴随着ACTION_MOVE,ACTION_CANCEL等等。 首先来关注ACTION_DOWN，用户触摸屏幕，MotionEvent开始传递： Activity.dispatchTouchEvent ViewGroup.dispatchTouchEvent ViewGroup.onInterceptTouchEvent …..中间省略n个视图层级 ….&gt;&gt;&gt; View.dispatchTouchEvent View.onTouchEvent ​ ….中间省略n个视图层级….&gt;&gt;&gt; ViewGroup.onTouchEvent Activity.onTouchEvent 这也就是本文最开始的图1内描述的内容，注意，在默认情况下(各个函数都返回super的情况下)才能将这个从上到下，再从下到上的循环走完整。这里讨论的还只是ACTION_DOWN。 接下来看ACTION_DOWN下发过程中各个函数返回值对于整个传递链走向的影响，我们在override这些函数的时候，返回值无非三种： true , false ,super return true：ACTION_DOWN事件分发到此结束(消费掉)，这里有一个要注意的是onInterceptTouchEvent,返回true表示该ViewGroup打算将事件拦截下来，底层View将接收到一个ACTION_CANCEL，事件传递给该ViewGroup的onTouchEvent return false: 对于dispatchTouchEvent，返回false表明不再向下分发，ACTION_DOWN发送到上一层ViewGroup(Activity)的OnTouchEvent；对于onInterceptTouchEvent,返回false表明该ViewGroup不打算拦截，继续下发，对于onTouchEvent，返回false，事件继续上传至上一层级ViewGroup的OnTouchEvent 。 return super : 完成整个传递链，就像图1中展示的一样。 图2 来自图解安卓事件分发机制 完美地解释了事件分发各个流程中返回值对于事件传递的影响。 图3 来自图解安卓事件分发机制 接下来看ACTION_DOWN时返回值对于后续ACTION_MOVE,ACTION_UP等传递路径的影响： 首先介绍概念： gesture = ACTION_DOWN+ a bounch of ACTIONS +ACTION_UP 一个gesture(手势)即从手指按下到手指离开这段过程中所有的事件的集合,swipe,click,fling等等 ACTION_DWON发生时，android将会在当前touch区域所有的View中确定一个Touch Target,后者将接管此次gesture中的所有ACTION_MOVE,ACTION_UP。（这样做有两点好处：1.一旦确定了Touch Target，系统将会把所有的后续事件全部传递到这个target为止，这就避免了复杂的view traversing，有助于提升性能; 2：传递链中第一个能够成为Touch Target的View将独立处理后续事件，不需要考虑其他View受到影响）。在在一个gesture开始时，OnTouchEvent（ACTION_DOWN）返回true,就意味着成为TouchTarget。借用简书作者的总结: ACTION_DOWN事件在哪个控件消费了（return true）， 那么ACTION_MOVE和ACTION_UP就会从上往下（通过dispatchTouchEvent）做事件分发往下传，就只会传到这个控件，不会继续往下传，如果ACTION_DOWN事件是在dispatchTouchEvent消费，那么事件到此为止停止传递，如果ACTION_DOWN事件是在onTouchEvent消费的，那么会把ACTION_MOVE或ACTION_UP事件传给该控件的onTouchEvent处理并结束传递。 这里可以看到，事件依旧是从上往下一直分发到TouchTarget这一层，只是在TouchTarget这一层被消费了，且不再往上传递(有助于性能提升)。父ViewGroup的dispatchTouchEvent和onInterceptTouchEvent依旧会先于TouchTarget接收到ACTION_MOVE等事件。所以此时如果父ViewGroup在onInterceptTouchEvent中返回true，父ViewGroup将取代原有的子View成为新的ViewTarget,后续事件(ACTION_MOVE等)将传递到该父ViewGroup中，而子View将收到ACTION_CANCEL(可以在这里做一些恢复状态的工作，比如从foucused变成unfocused)。举一个例子：在ScrollView(不是Android自带的那个)中放一个Button，ACTION_DOWN时，BUTTON表示可以处理ACTION_DOWN,因为这可能会是一次click，于是Button就成了TouchTarget，后续事件将不会传递到ScrollView中，ScrollView也就无法滑动。为解决这个问题，在ScrollView的onInterceptTouchEvent中，如果看到ACTION_DWON，返回false(点击事件对于滑动毫无意义)，但如果看到ACTION_MOVE(滑动事件),返回true并成为新的TouchTarget。注意是在OnInterceptTouchEvent中拦截而不是dispatchTouchEvent中拦截，后者会将事件传递到上层ViewGroup的onTouchEvent中。想想看，不去dispatch了、、、android这种Api起名还是可以的。 #onClick事件接下来看onClick和onLongClick，onTouchListener这类事件何时触发 首先是View的dispatchTouchEvent源码部分 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152case MotionEvent.ACTION_UP: boolean prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != 0; if ((mPrivateFlags &amp; PFLAG_PRESSED) != 0 || prepressed) &#123; // take focus if we don't have it already and we should in // touch mode. boolean focusTaken = false; if (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123; focusTaken = requestFocus(); &#125; if (prepressed) &#123; // The button is being released before we actually // showed it as pressed. Make it show the pressed // state now (before scheduling the click) to ensure // the user sees it. setPressed(true, x, y); &#125; if (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123; // This is a tap, so remove the longpress check removeLongPressCallback(); // Only perform take click actions if we were in the pressed state if (!focusTaken) &#123; // Use a Runnable and post this rather than calling // performClick directly. This lets other visual state // of the view update before click actions start. if (mPerformClick == null) &#123; mPerformClick = new PerformClick(); &#125; if (!post(mPerformClick)) &#123; performClick(); &#125; &#125; &#125; if (mUnsetPressedState == null) &#123; mUnsetPressedState = new UnsetPressedState(); &#125; if (prepressed) &#123; postDelayed(mUnsetPressedState, ViewConfiguration.getPressedStateDuration()); &#125; else if (!post(mUnsetPressedState)) &#123; // If the post failed, unpress right now mUnsetPressedState.run(); &#125; removeTapCallback(); &#125; mIgnoreNextUpEvent = false; break; 所以onClick事件是在ACTION_UP中执行的 而LongClick事件要看ACTION_DOWN了 1234567891011121314151617181920212223242526case MotionEvent.ACTION_DOWN: mHasPerformedLongPress = false; if (performButtonActionOnTouchDown(event)) &#123; break; &#125; // Walk up the hierarchy to determine if we're inside a scrolling container. boolean isInScrollingContainer = isInScrollingContainer(); // For views inside a scrolling container, delay the pressed feedback for // a short period in case this is a scroll. if (isInScrollingContainer) &#123; mPrivateFlags |= PFLAG_PREPRESSED; if (mPendingCheckForTap == null) &#123; mPendingCheckForTap = new CheckForTap(); &#125; mPendingCheckForTap.x = event.getX(); mPendingCheckForTap.y = event.getY(); postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout()); &#125; else &#123; // Not inside a scrolling container, so show the feedback right away setPressed(true, x, y); checkForLongClick(0, x, y); &#125; break; 关键看checkForLongClick, 不贴代码了，结论是：在ACTION_DOWN事件被捕捉后，系统会开始触发一个postDelayed操作，delay的时间为 12&gt; ViewConfiguration.getLongPressTimeout() - delayOffset&gt; （这个值在Eclair2.1上为500ms），500ms后会触发CheckForLongPress线程的执行： 想想看，LongClick事件是在DOWN时开始计时，500ms假设，OnClick是在UP是发生，所以完全有可能同时发生OnClick和OnLongClick。这里看到当onLongClick的返回值为true时， mHasPerformedLongPress = true ,仔细看ACTION_UP中，如果HasPerformLongPress==true，就不会走到onClick事件里。所以在onLongClickListener里需要返回一个boolean值的原因就这么简单。 1234567891011121314151617if (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123; // This is a tap, so remove the longpress check removeLongPressCallback(); // Only perform take click actions if we were in the pressed state if (!focusTaken) &#123; // Use a Runnable and post this rather than calling // performClick directly. This lets other visual state // of the view update before click actions start. if (mPerformClick == null) &#123; mPerformClick = new PerformClick(); &#125; if (!post(mPerformClick)) &#123; performClick(); &#125; &#125; &#125; 接下来是OnTouchListener，直接上结论: onTouchListener里面的方法是在dispatchTouchEvent里面调用的，并且如果listener里面的onTouch返回true，事件将不会发送给onTouchEvent，因此OnTouchListener势必会优先级高于onClick和onLongClick。 VelocityTracker12345velocityTracker = VelocityTracker.obtain()；velocityTracker.addMovement(event);velocityTracker.computeCurrentVelocity(1); velocityTracker.getXVelocity();velocityTracker.recycle(); 值得注意的是，VelocityTracker内部使用了大量的native方法，所以执行速度比java要快很多。 实现Fling效果1234567891011121314private void onFling(float velocityX,float velocityY)&#123; scroller.fling(getScrollX(),getScrollY(),(int)-velocityX (int)-velocityY,minScrollX,maxScrollX, minScrollY,maxScrollY); invalidate();&#125;@overdide// 这是每个View都有的方法private void computeScroll()&#123; if(scroller.isFinished())&#123; scroller.computeScrollOffset(); scrollTo(scroller.getCurrX(),scroller.getCurrY()); postInvalidateOnAnimation(); &#125;&#125; 捕获双击事件12345678910111213141516171819202122232425262728293031323334353637public class MyView extends View &#123;GestureDetector gestureDetector;public MyView(Context context, AttributeSet attrs) &#123; super(context, attrs); // creating new gesture detector gestureDetector = new GestureDetector(context, new GestureListener());&#125;// skipping measure calculation and drawing // delegate the event to the gesture detector@Overridepublic boolean onTouchEvent(MotionEvent e) &#123; return gestureDetector.onTouchEvent(e);&#125;private class GestureListener extends GestureDetector.SimpleOnGestureListener &#123; @Override public boolean onDown(MotionEvent e) &#123; return true; &#125; // event when double tap occurs @Override public boolean onDoubleTap(MotionEvent e) &#123; float x = e.getX(); float y = e.getY(); Log.d(\"Double Tap\", \"Tapped at: (\" + x + \",\" + y + \")\"); return true; &#125;&#125;&#125; 最后是关于ViewConfiguration的一些常量获取的静态方法： int getScaledTouchSlop(); (if Math.abs(xx+yy)&gt;mTouchSlop 就可以认为是滑动事件了) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293/** * 包含了方法和标准的常量用来设置UI的超时、大小和距离 */ public class ViewConfiguration &#123; // 设定水平滚动条的宽度和垂直滚动条的高度，单位是像素px private static final int SCROLL_BAR_SIZE = 10; //定义滚动条逐渐消失的时间，单位是毫秒 private static final int SCROLL_BAR_FADE_DURATION = 250; // 默认的滚动条多少秒之后消失，单位是毫秒 private static final int SCROLL_BAR_DEFAULT_DELAY = 300; // 定义边缘地方褪色的长度 private static final int FADING_EDGE_LENGTH = 12; //定义子控件按下状态的持续事件 private static final int PRESSED_STATE_DURATION = 125; //定义一个按下状态转变成长按状态的转变时间 private static final int LONG_PRESS_TIMEOUT = 500; //定义用户在按住适当按钮，弹出全局的对话框的持续时间 private static final int GLOBAL_ACTIONS_KEY_TIMEOUT = 500; //定义一个touch事件中是点击事件还是一个滑动事件所需的时间，如果用户在这个时间之内滑动，那么就认为是一个点击事件 private static final int TAP_TIMEOUT = 115; /** * Defines the duration in milliseconds we will wait to see if a touch event * is a jump tap. If the user does not complete the jump tap within this interval, it is * considered to be a tap. */ //定义一个touch事件时候是一个点击事件。如果用户在这个时间内没有完成这个点击，那么就认为是一个点击事件 private static final int JUMP_TAP_TIMEOUT = 500; //定义双击事件的间隔时间 private static final int DOUBLE_TAP_TIMEOUT = 300; //定义一个缩放控制反馈到用户界面的时间 private static final int ZOOM_CONTROLS_TIMEOUT = 3000; /** * Inset in pixels to look for touchable content when the user touches the edge of the screen */ private static final int EDGE_SLOP = 12; /** * Distance a touch can wander before we think the user is scrolling in pixels */ private static final int TOUCH_SLOP = 16; /** * Distance a touch can wander before we think the user is attempting a paged scroll * (in dips) */ private static final int PAGING_TOUCH_SLOP = TOUCH_SLOP * 2; /** * Distance between the first touch and second touch to still be considered a double tap */ private static final int DOUBLE_TAP_SLOP = 100; /** * Distance a touch needs to be outside of a window's bounds for it to * count as outside for purposes of dismissing the window. */ private static final int WINDOW_TOUCH_SLOP = 16; //用来初始化fling的最小速度，单位是每秒多少像素 private static final int MINIMUM_FLING_VELOCITY = 50; //用来初始化fling的最大速度，单位是每秒多少像素 private static final int MAXIMUM_FLING_VELOCITY = 4000; //视图绘图缓存的最大尺寸，以字节表示。在ARGB888格式下，这个尺寸应至少等于屏幕的大小 @Deprecated private static final int MAXIMUM_DRAWING_CACHE_SIZE = 320 * 480 * 4; // HVGA screen, ARGB8888 //flings和scrolls摩擦力度大小的系数 private static float SCROLL_FRICTION = 0.015f; /** * Max distance to over scroll for edge effects */ private static final int OVERSCROLL_DISTANCE = 0; /** * Max distance to over fling for edge effects */ private static final int OVERFLING_DISTANCE = 4; &#125; 来看源码应用层的事件的开始是从Activity.dispatchTouchEvent开始的Activity.dispatchTouchEvent -&gt; getWindow().superDispatchTouchEvent(ev) -&gt; ViewGroup.dispatchTouchEvent(ev) 。ViewGroup.java，删掉一些无关的代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889@Override public boolean dispatchTouchEvent(MotionEvent ev) &#123; boolean handled = false; final int action = ev.getAction(); final int actionMasked = action &amp; MotionEvent.ACTION_MASK; // Handle an initial down. // 1. 在ACTION_DOWN的时候把状态复原 if (actionMasked == MotionEvent.ACTION_DOWN) &#123; // Throw away all previous state when starting a new touch gesture. // The framework may have dropped the up or cancel event for the previous gesture // due to an app switch, ANR, or some other state change. //这里的注释说明了framework在上一次手势中未必能把down - move - up 的整个后续流程全部deliver到，原因ect... 所以这里要确保在一次全新的手势开始之初 clear all states cancelAndClearTouchTargets(ev); resetTouchState(); &#125; // Check for interception. // 2. 判断ViewGroup是否拦截touch事件。当为ACTION_DOWN或者找到能够接收touch事件的子View // 时，由onInterceptTouchEvent(event)决定是否拦截。其他情况，即ACTION_MOVE/ACTION_UP且 // 没找到能够接收touch事件的子View时，直接拦截。 final boolean intercepted; if (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) &#123; // 这个firstTarget就是子View里面谁第一个站出来说愿意接受 final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0; if (!disallowIntercept) &#123; //这个就是requestDisallowInterceptTouchEvent（是child说不允许父元素拦截） intercepted = onInterceptTouchEvent(ev); //这个是正常的流程 ev.setAction(action); // restore action in case it was changed &#125; else &#123; intercepted = false; &#125; &#125; else &#123; // There are no touch targets and this action is not an initial down // so this view group continues to intercept touches. intercepted = true; &#125; //从这里也能看出来，onInterceptTouchEvent的调用时机是第一次ACTION_DOWN。以及在已经有愿意在dispatchTouchEvent里面返回true的child的前提下，所有的后续动作。所以这个父ViewGroup随时可以从子View前拦截Event //3. 遍历child的for循环开始 for (int i = childrenCount - 1; i &gt;= 0; i--) &#123; final int childIndex = getAndVerifyPreorderedIndex( childrenCount, i, customOrder); final View child = getAndVerifyPreorderedView( preorderedList, children, childIndex); newTouchTarget = getTouchTarget(child); // mFirstTouchTarget是一个链表，遍历这个链表，如果有任何一个target的child是当前ViewGroup的child，说明找到，直接break出来 if (newTouchTarget != null) &#123; // Child is already receiving touch within its bounds. // Give it the new pointer in addition to the ones it is handling. newTouchTarget.pointerIdBits |= idBitsToAssign; break; &#125; if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) &#123; // Child wants to receive touch within its bounds. //这个dispatchTransformedTouchEvent就是 mLastTouchDownX = ev.getX(); mLastTouchDownY = ev.getY(); newTouchTarget = addTouchTarget(child, idBitsToAssign); //这个括号里面就是说明有一个child愿意接受event（在dispatchTouchEvent里面返回了true）,addTouchTarget其实是为上一个break服务的，所以每次event传递下来的时候,在这里addTouchTarget，下一次在上面的getTouchTarget就break了。 alreadyDispatchedToNewTouchTarget = true; break; &#125; &#125; /// 遍历child的for循环到此结束。这个for循环有点长，其实只需要关注哪里break出来了，实际上有两处。，g关键在后一处，就是将event交给child,把event针对child调整一下x和y，调用child的dispatchTouchEvent. // Dispatch to touch targets. // 4. 把事件转交给愿意接受的爱谁谁 if (mFirstTouchTarget == null) &#123; // No touch targets so treat this as an ordinary view. handled = dispatchTransformedTouchEvent(ev, canceled, null, TouchTarget.ALL_POINTER_IDS); &#125; else &#123; // Dispatch to touch targets, excluding the new touch target if we already // dispatched to it. Cancel touch targets if necessary. while (target != null) &#123; if (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123; handled = true; &#125; else &#123; if (dispatchTransformedTouchEvent(ev, cancelChild, target.child, target.pointerIdBits)) &#123; handled = true; &#125; &#125; &#125; &#125; // 把target这个链表走一遍，之要有一个target愿意在dispatchTouchEvent里面返回true，就认为handled并返回 return handled; &#125; 上面的是viewGroup的dispatchTouchEvent，结论是如果子View在dispatchTouchEvent里面返回了true，后续事件都会(所有的，不管是ACTION_DOWN,UP,还是MOVE)通过dispatchTransformedTouchEvent方法传递到child的dispatchTouchEvent（如果child是一个ViewGroup，这样的查找还会继续下去，一直到child是View不是ViewGroup）。 View的dispatchToucheEvent就显得极为简单，每一次Event都会用mOnTouchListener试一下返回值（mOnTouchListener返回true的话不会掉onTouchEvent），onTouchEvent就又变得复杂许多。 View,ViewGroup的dispatchTouchEvent，requestDisAllowInterceptTouchEvent,onTouchEvent这些都是可以有条件的返回true或false的，这些可以override的方法给了程序设计以极大的灵活性。 View的onTouchEvent简单说就是一大堆的switch caseView.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172public boolean onTouchEvent(MotionEvent event) &#123; if (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123; switch (action) &#123; case MotionEvent.ACTION_UP: if (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123; // This is a tap, so remove the longpress check removeLongPressCallback(); // Only perform take click actions if we were in the pressed state if (!focusTaken) &#123; // Use a Runnable and post this rather than calling // performClick directly. This lets other visual state // of the view update before click actions start. //这段注释其实说到了post这个方法，messageQueue本身是一个个处理的。手指抬起的时候，优先更新UI，点击事件can wait . 比方onClick里面耗时10s，抬起手10s后才看到按钮变成unPressedState，这显然是不合理的 if (!post(mPerformClick)) &#123; //所以我们在onClick里面打断点，堆栈前面从来不是OnTouchEvent performClick(); // 我们喜爱的onClickListener就在这里啦 &#125; &#125; &#125; removeTapCallback(); //Tap就是post一个runnable，run的时候setPressed，再postLongClick mIgnoreNextUpEvent = false; break; case MotionEvent.ACTION_DOWN: // Walk up the hierarchy to determine if we're inside a scrolling container. boolean isInScrollingContainer = isInScrollingContainer(); // For views inside a scrolling container, delay the pressed feedback for // a short period in case this is a scroll. if (isInScrollingContainer) &#123; mPrivateFlags |= PFLAG_PREPRESSED; if (mPendingCheckForTap == null) &#123; mPendingCheckForTap = new CheckForTap(); &#125; mPendingCheckForTap.x = event.getX(); mPendingCheckForTap.y = event.getY(); postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout()); &#125; else &#123; // Not inside a scrolling container, so show the feedback right away //这是我们常用的onLongClickListener被触发的地方了 setPressed(true, x, y); checkForLongClick(0, x, y); //这里面就是postDelay一个longClickRunnable，时间是ViewConfiguration.getLongPressTimeout()，默认500ms。 &#125; break; case MotionEvent.ACTION_CANCEL: if (clickable) &#123; setPressed(false); &#125; removeTapCallback(); removeLongPressCallback(); mInContextButtonPress = false; mHasPerformedLongPress = false; mIgnoreNextUpEvent = false; mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN; break; case MotionEvent.ACTION_MOVE: // Be lenient about moving outside of buttons //手指滑动的时候挪出了Button的话，取消按压状态 if (!pointInView(x, y, mTouchSlop)) &#123; // Outside button // Remove any future long press/tap checks removeTapCallback(); removeLongPressCallback(); if ((mPrivateFlags &amp; PFLAG_PRESSED) != 0) &#123; setPressed(false); &#125; &#125; break; &#125; return true; //这里很乐观地返回了true &#125; return false; &#125; 之前说的TouchEvent从Activity由上往下传递再往上传递的过程是没有错的DecorView通过Window.callback(其实就是Actvity)开始Activity.java 12345678910public boolean dispatchTouchEvent(MotionEvent ev) &#123; if (ev.getAction() == MotionEvent.ACTION_DOWN) &#123; onUserInteraction(); &#125; if (getWindow().superDispatchTouchEvent(ev)) &#123; return true; &#125; //如果经历了ViewGroup -&gt; View 都不愿意处理的话，是会丢回Activity的 return onTouchEvent(ev); &#125; 而在ViewGroup那一层，如果交给child.dispatchTouchEvent都不愿处理的话，默认会调用View.dispatchTouchEvent，这里面多半会调到自己的onTouchEvent。所以Activity -&gt; ViewGroup -&gt; View -&gt; ViewGroup -&gt; Activity这一个流程是没错的。难点就在于这个ViewGroup -&gt; View的层级有多深。在ViewGroup里面，往子View下发TouchEvent的唯一途径是dispatchTransformedTouchEvent。这个方法的调用次数也不多，估计就是在这里控制住的。 TouchEvent只是java层的抽象之前看过一篇文章，是用户手指在LCD面板上面滑动产生电阻变化，硬件由此产生中断。接下来的顺序是Driver -&gt; kernel -&gt; Framework -&gt; Application -&gt; UserInterface ，说的非常好，好像是知乎上的，可惜一时间找不到出处了。 Reference 图解安卓事件分发机制 making sense of the touch system Android onTouchEvent, onClick及onLongClick的调用机制 Android触摸事件机制(三) ViewConfiguration用法 触摸事件的分析与总结 View事件分发及消费源码分析 ​","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"service和activity的通信方式","date":"2016-09-30T15:25:28.000Z","path":"2016/09/30/service-activity-communication/","text":"一年以前写过一篇关于service和Activity相互通信的很详细的博客，当时真的是费了很大心思在上面。现在回过头来看，还是有些不完善的地方，比如aidl没有给，demo不够全面。现在补上。 关于Android的Service，官方文档是这样描述的 Service 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。 这其中也能看出Android对于Service角色的定位，后台工作，不涉及UI。 Service本身包含started Service和Binded Service 对于Binded Service 使用 待续referencecsdn","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"service","slug":"service","permalink":"https://haldir65.github.io/tags/service/"}]},{"title":"git常用操作手册","date":"2016-09-27T17:24:51.000Z","path":"2016/09/27/git-manual/","text":"记录一下常用git的命令，作为日常使用的参考手册 1. 在本地创建一个项目并同步到github的过程12345678$ mkdir ~/hello-world //创建一个项目hello-world$ cd ~/hello-world //打开这个项目$ git init //初始化$ touch README //创建文件$ git add README //更新README文件$ git commit -m &apos;first commit&apos; //提交更新，并注释信息“first commit”$ git remote add origin git@github.test/hellotest.git //连接远程github项目 $ git push -u origin master //将本地项目更新到github项目上去 2. 将本地git branch和远程github repository同步可行的方式1git branch --set-upstream local_branch origin/remote_branch 这样做可行，但出现下面的错误提示，照着操作就行了。 123$ git branch --set-upstream master origin/masterThe --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-toBranch master set up to track remote branch master from origin. 3. git处理大小写字母的问题 git默认对大小写不敏感，所以，新建一个文件adapter.java，上传到github之后说不定就给变成了Adapter.java。在windows下面将已经push到远端的文件，改变其文件名的大小写时，git默认会认为文件没有发生任何改动，从而拒绝提交和推送，原因是其默认配置为大小写不敏感，故须在bash下修改配置： 1git config core.ignorecase false 4. git设置用户名12$ git config --global user.name &quot;name&quot;$ git config --global user.email xxx@163.com 这样可以为git所有的仓库设置用户名，如果想为指定仓库设置用户名或email: 12$ git config user.name &quot;name&quot;$ git config user.email &quot;myEmail.awesome.com&quot; 查看当前用户名或email12$ git config user.name$ git config user.email 5. 设置代理只针对当前项目设置代理12git config http.proxy socks5://127.0.0.1:1080git config https.proxy socks5://127.0.0.1:1080 设置全局代理12git config --global http.proxy socks5://127.0.0.1:1080git config --global https.proxy socks5://127.0.0.1:1080 取消设置123git config --global --unset http.proxygit config --global --unset https.proxy 对指定url设置代理 ###git config –global http.&lt;要设置代理的URL&gt;.proxy socks5://127.0.0.1:1080 git config –global http.https://github.com.proxy socks5://127.0.0.1:1080 6. 对上一次commit进行修改(在不添加新的commit的基础上)1git commit --amend 7. git revert和reset的区别 reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的. 即reset是通过一次反向的commit操作撤销之前的commit，而reset则会直接从提交历史里删除commit。如果还没有push，用reset可以在本地解决问题，之后重新commit再push。如果已经push，可以考虑通过一次revert来实现“撤销”的效果。 语法： reset123git reset --hard HEAD //本地仓库文件修改也会消失git reset --soft HEAD //本地文件修改不会消失，类似于回到git add 之前的状态(把绿色的改成红色)git reset --hard HEAD~3 //最近的三次提交全部撤销 revert1git revert c011eb3c20ba6fb38cc94fe //之后在分支图上就能看到一个新的反向的commit，push即可。 8. 切分支, 删除分支本地新建分支1git checkout -b &lt;branchName&gt; 将这条分支与远程同步的方式123git branch --set-upstream &lt;laocalBranchName&gt; origin/&lt;RemoteBranchName&gt;// 或者git branch -u origin/dev 直接从远程仓库切一个分支出来并保持同步的方式123git checkout -b &lt;branchName&gt; origin/&lt;branchName&gt;git checkout --track origin/dev 删除远程分支:1git push origin --delete &lt;branchName&gt; 删除远程tag1git push origin --delete tag &lt;tagName&gt; 顺便说一下打tag，这个实在太简单12345678git tag //看下当前仓库有哪些tagsgit tag myTag // 在当前head打一个myTag的标签git push origin myTag //刚才那个tag还只是在本地，需要提交到远程git checkout myTag //打tag的好处就在于埋下一个里程碑，你随时可以回到当时的状态git tag -d myTag //删除这个tag也很简单git tag -a myTag adjksdas31231//假如当前head不在想打的位置，找到想打的位置的log，照着打就好git push origin -tags //将本地所有标签一次性提交到git服务器git ls-remote --tags //查看远程仓库所有的tags 9. pull和rebase的区别pull = fetch +merge ，会生成新的提交 Merge好在它是一个安全的操作。现有的分支不会被更改，避免了rebase潜在的缺点 10. rebase和cherry-pickrebase不会生成新的提交，而且会使得项目提交历史呈现出完美的线性。但注意不要在公共的分支上使用 11. gitignore文件写法参考repo12345678910111213141516171819202122# 忽略所有以 .c结尾的文件*.c# 但是 stream.c 会被git追踪!stream.c# 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO/TODO# 忽略所有在build文件夹下的文件build/# 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txtdoc/*.txt# 忽略所有在doc目录下的.pdf文件doc/**/*.pdf# 让ignore文件立即生效的方法（如果不该上传到服务器的东西已经上传了，本次提交会把这些不该上传的东西从服务器删掉）git rm -r --cached .git add .git commit -m &quot;.gitignore is now working&quot; 12. git stash常用命令12345678910git stash //保存下来，压进一个栈，基本上就是先进后出了git stash pop //推出一个栈git stash save -a &quot;message to add&quot; // 添加一次stash，打上标记git stash list //展示当前仓库所有的被stash的变更以及对应的id，记得这个不是跟着branch走的git stash drop stah@&#123;id&#125; // 从stash的List中删除指定的某一次stashgit stash apply &lt;stash@&#123;id&#125;&gt; //应用某一次的stashgit stash clear// 一次性删除stash List中所有的item 13. 强推谨慎使用12# Be very careful with this command!git push --force 14.既然是shell环境，那当然可以写bash 脚本 git add . &amp;&amp; git commit -m “stuff” &amp;&amp; git push一部搞定，前提是每一步都得成功，原理就是bash脚本的&amp;&amp;和||操作符。 15. git-error-please-make-sure-you-have-the-correct-access-rights-and-the-reposito总会有不小心的时候把本地的sshkey干掉了，解决方法就是本地生成sshkey，然后粘贴到你的github或者gitlab网站上 ssh-keygen ## 这个基本上在网上都能找到，可以传参数，生成的文件名，密码什么的cat ~/.ssh/id_rsa.pub | clip ## 中间的管道是把内容搞到剪切板上，clip是windows上的命令 去粘贴吧 16. 空目录推送到远端常常在node项目中看到一个static文件夹，里面只有一个.gitkeep文件，这个文件的意思是，就算这个目录是空的，也得推送到远端。 17. stale和prune的概念prune(stale的概念 - 一个原本分支叫做dev，远程叫origin/dev，如果删除了dev，合到master，提交到origin/master之后，远程的origin/dev就成了stale的了)man prune是这么说的： Deletes all stale tracking branches under .These stale branches have already been removed from the remote repositoryreferenced by , but are still locally available in “remotes/“. prune的解释 一些看上去很神奇的操作git clone –depth=50 –branch=branchName https://github.com/XXX/XXX.git myFolder/theNameIwantItToBe git -c core.quotepath=false push –progress –porcelain origin refs/heads/master:master // idea内置git push操作实际执行了这一行指令 git fetch -v git submodule update –init ## 比如说shadowsocks工程 我也是才发现，windows下的git bash集成了openssh，curl，好用的不行 Reference-git reset和revert-git recipes","tags":[{"name":"tools","slug":"tools","permalink":"https://haldir65.github.io/tags/tools/"},{"name":"git","slug":"git","permalink":"https://haldir65.github.io/tags/git/"}]},{"title":"activity transition pre and post lollipop","date":"2016-09-27T14:53:25.000Z","path":"2016/09/27/activity-transition-pre-and-post-lollipop/","text":"Lollipop开始引入了新的Activity Transition动画效果，比起常用的overridePendingTransaction() 效果要强大许多 测试环境supportLibVersion = “24.2.1”gradle plugin version : “classpath ‘com.android.tools.build:gradle:2.2.0’”gradle version : 3.1compileSdkVersion 24buildToolsVersion “24.0.2” 常规用法: A activity &gt;&gt;&gt;&gt; B activity A activity中: 123456789101112intent = new Intent(getActivity(), PictureDetailSubActivity2.class); intent.putExtra(EXTRA_IMAGE_URL, R.drawable.b2); intent.putExtra(EXTRA_IMAGE_TITLE, \"使用ActivityCompat动画\"); ActivityOptionsCompat optionsCompat = ActivityOptionsCompat. makeSceneTransitionAnimation(getActivity(), view, TRANSIT_PIC); try &#123; ActivityCompat.startActivity(getActivity(), intent, optionsCompat.toBundle()); //据说部分三星手机上会失效 &#125; catch (Exception e) &#123; e.printStackTrace(); ToastUtils.showTextShort(getActivity(), \"ActivityCompat出错！！\"); startActivity(intent); &#125; Pair这个class是v4包里的一个Util类，用来装载一组(pair)对象，支持泛型，很好用。由于都是v4包里的方法，省去了做API版本判断，在API 16以下，就只会调用普通的startActivity方法。上面加了try catch是避免部分手机上出现问题 B activity中onCreate调用 1ViewCompat.setTransitionName(binding.imageDetail, TRANSIT_PIC); 就可实现普通的转场动画。 兼容方式(将连续的Transition带到API16以下) 主要的原理: 在A activity中记录要带到B activity中的View的当前位置，在B activity中添加onPredrawListener(measure完毕，layout完毕，即将开始Draw的时候)，此时开始进行动画，将SharedView从原位置animate到B Activty中的位置 原理及详细代码在这里: Dev Bytes Activity Animations Youtube 我照着写了一些关于Activity Transition的模板，gitHub 基本能实现兼容到API 16以下的效果 最后是这几天遇到的天坑 1234@Overridepublic void onCreate(Bundle savedInstanceState, PersistableBundle persistentState) &#123; super.onCreate(savedInstanceState, persistentState);&#125; 这样的Activity绝对会出ClassNotFoundException , 而且并不会主动出现在logcat中 overridePendingTransaction要在startActivity以及finish之后才能调用 gitHub上有一个比较好的兼容库，大致原理也是使用onPreDrawListener","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"transition","slug":"transition","permalink":"https://haldir65.github.io/tags/transition/"}]},{"title":"android使用selectableItemBackground的一些坑","date":"2016-09-23T19:56:39.000Z","path":"2016/09/23/selectableItemBackground-foreground/","text":"android:foreground=”?android:attr/selectableItemBackground” 或是 android:background=”?android:attr/selectableItemBackground” 这个xml属性最早是我学着写recyclerVeiw的item xml的时候接触到的，简单来说就是，在API 21及以上，用户点击这个itemView时候会出现一个Ripple效果非常好看，而在API 21以下则会表现为MonoChrome的类似按压色的效果 而这个点击时的水波纹颜色也是可以Customize的1&lt;item name=&quot;android:colorControlHighlight&quot;&gt;@color/my_ripple_color&lt;/item&gt; //这个要写在自己的Activity的Theme(style-v21)里，注意，当前Activity的Theme必须继承自Appcompat!!于是，我写了这样的xml1234567891011&lt;LinearLayout android:id=\"@+id/item_root\" android:layout_width=\"match_parent\" android:layout_height=\"?android:attr/listPreferredItemHeight\" android:orientation=\"vertical\" android:gravity=\"center\" android:onClick=\"@&#123;(view) -&gt; callback.onClick(view,data)&#125;\" android:elevation=\"2dp\" android:background=\"@color/md_amber_200\" android:foreground=\"?android:attr/selectableItemBackground\" /&gt; 然而，点击之后并没有出现水波纹(模拟器 API 21)，换成CardView或是将foreground改为background之后才有效。查了很多博客，最后得出结论:android:foreground在API 23之前只对FrameLayout有效(CardView继承自FrameLayout当然有效)。 ##所以正确的做法是 android:foreground=”?android:attr/selectableItemBackground” 改为 android:background=”?android:attr/selectableItemBackground” 或者使用FrameLayout。 关于foreground之前看google io2016时，Chris Banes给了这样的解释。,android:foreground在API 1 的FrameLayout中就有了，但直到API 23才将这个属性添加到View中。所以，换成API 23的手机上面那段代码foreground也是可以出现Ripple的,至于23之前为什么foreground无效，并不清楚为什么 首先是一种简单的模拟这种视觉效果的尝试：如何创建兼容的Forefround drawable selector 这篇文章提到了: 简单来讲，Foreground 定义了绘制于当前内容之上的 Drawable，类似一层覆盖物。所以我们可以为设置 Foreground 的值为 drawable或者color， 那如果将 Froeground 设置为 drawable selector，自然就可以为控件实现点击响应效果了。 比较奇怪的是在 sdk 23 以前，foregrond 属性只对 Framelayout 生效，但这个问题现在得到了解决，所以也请确保你的 compileSdkVersion 大于等于23 这篇文章的做法是针对21以下的版本使用slelector Drawable实现类似的效果 如何真正实现为API23之前的View,ViewGroup添加foreground?随后我找到了这篇博客，具体的逻辑并不太多。这里插一句，任何Drawable对象，在你调用setDrawable之后，该Drawable都会保留一个最后一个调用对象的callback Drawable-&gt;View-&gt;Context //leak!//所以Drawable也有可能导致Activity leak 随后我发现了更多有意思的讨论首先是Chris Banes在G+上的Post : Foreground Doge他给出了两种方案,Chris作为Google员工，给出的解决方案应该是比较官方的了 如果想利用FrameLayout的foreground特性来实现点击特效的话，完全可以在自己的xml外面再包裹一层FrameLayout 自己动手写一个实现foreground的Viewgroup , 代码 attrs:version1234567&lt;resources&gt; &lt;declare-styleable name=&quot;ForegroundLinearLayout&quot;&gt; &lt;attr name=&quot;android:foreground&quot; /&gt; &lt;attr name=&quot;android:foregroundInsidePadding&quot; /&gt; &lt;attr name=&quot;android:foregroundGravity&quot; /&gt; &lt;/declare-styleable&gt;&lt;/resources&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217/* * Copyright (C) 2006 The Android Open Source Project * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package your.package; import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Rect;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import android.view.Gravity;import android.widget.LinearLayout; import your.package.R; public class ForegroundLinearLayout extends LinearLayout &#123; private Drawable mForeground; private final Rect mSelfBounds = new Rect(); private final Rect mOverlayBounds = new Rect(); private int mForegroundGravity = Gravity.FILL; protected boolean mForegroundInPadding = true; boolean mForegroundBoundsChanged = false; public ForegroundLinearLayout(Context context) &#123; super(context); &#125; public ForegroundLinearLayout(Context context, AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public ForegroundLinearLayout(Context context, AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundLinearLayout, defStyle, 0); mForegroundGravity = a.getInt( R.styleable.ForegroundLinearLayout_android_foregroundGravity, mForegroundGravity); final Drawable d = a.getDrawable(R.styleable.ForegroundLinearLayout_android_foreground); if (d != null) &#123; setForeground(d); &#125; mForegroundInPadding = a.getBoolean( R.styleable.ForegroundLinearLayout_android_foregroundInsidePadding, true); a.recycle(); &#125; /** * Describes how the foreground is positioned. * * @return foreground gravity. * * @see #setForegroundGravity(int) */ public int getForegroundGravity() &#123; return mForegroundGravity; &#125; /** * Describes how the foreground is positioned. Defaults to START and TOP. * * @param foregroundGravity See &#123;@link android.view.Gravity&#125; * * @see #getForegroundGravity() */ public void setForegroundGravity(int foregroundGravity) &#123; if (mForegroundGravity != foregroundGravity) &#123; if ((foregroundGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) &#123; foregroundGravity |= Gravity.START; &#125; if ((foregroundGravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == 0) &#123; foregroundGravity |= Gravity.TOP; &#125; mForegroundGravity = foregroundGravity; if (mForegroundGravity == Gravity.FILL &amp;&amp; mForeground != null) &#123; Rect padding = new Rect(); mForeground.getPadding(padding); &#125; requestLayout(); &#125; &#125; @Override protected boolean verifyDrawable(Drawable who) &#123; return super.verifyDrawable(who) || (who == mForeground); &#125; @Override public void jumpDrawablesToCurrentState() &#123; super.jumpDrawablesToCurrentState(); if (mForeground != null) mForeground.jumpToCurrentState(); &#125; @Override protected void drawableStateChanged() &#123; super.drawableStateChanged(); if (mForeground != null &amp;&amp; mForeground.isStateful()) &#123; mForeground.setState(getDrawableState()); &#125; &#125; /** * Supply a Drawable that is to be rendered on top of all of the child * views in the frame layout. Any padding in the Drawable will be taken * into account by ensuring that the children are inset to be placed * inside of the padding area. * * @param drawable The Drawable to be drawn on top of the children. */ public void setForeground(Drawable drawable) &#123; if (mForeground != drawable) &#123; if (mForeground != null) &#123; mForeground.setCallback(null); unscheduleDrawable(mForeground); &#125; mForeground = drawable; if (drawable != null) &#123; setWillNotDraw(false); drawable.setCallback(this); if (drawable.isStateful()) &#123; drawable.setState(getDrawableState()); &#125; if (mForegroundGravity == Gravity.FILL) &#123; Rect padding = new Rect(); drawable.getPadding(padding); &#125; &#125; else &#123; setWillNotDraw(true); &#125; requestLayout(); invalidate(); &#125; &#125; /** * Returns the drawable used as the foreground of this FrameLayout. The * foreground drawable, if non-null, is always drawn on top of the children. * * @return A Drawable or null if no foreground was set. */ public Drawable getForeground() &#123; return mForeground; &#125; @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123; super.onLayout(changed, left, top, right, bottom); mForegroundBoundsChanged = changed; &#125; @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; super.onSizeChanged(w, h, oldw, oldh); mForegroundBoundsChanged = true; &#125; @Override public void draw(Canvas canvas) &#123; super.draw(canvas); if (mForeground != null) &#123; final Drawable foreground = mForeground; if (mForegroundBoundsChanged) &#123; mForegroundBoundsChanged = false; final Rect selfBounds = mSelfBounds; final Rect overlayBounds = mOverlayBounds; final int w = getRight() - getLeft(); final int h = getBottom() - getTop(); if (mForegroundInPadding) &#123; selfBounds.set(0, 0, w, h); &#125; else &#123; selfBounds.set(getPaddingLeft(), getPaddingTop(), w - getPaddingRight(), h - getPaddingBottom()); &#125; Gravity.apply(mForegroundGravity, foreground.getIntrinsicWidth(), foreground.getIntrinsicHeight(), selfBounds, overlayBounds); foreground.setBounds(overlayBounds); &#125; foreground.draw(canvas); &#125; &#125; &#125; 使用方式 123456789101112&lt;your.package.ForegroundLinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:foreground=\"?android:selectableItemBackground\"&gt; &lt;ImageView android:id=”@+id/imageview_opaque” android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt; ... other views .../&gt; 接着是Jack Wharton的ForegroundImageView attrs 123456&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;resources&gt; &lt;declare-styleable name=\"ForegroundImageView\"&gt; &lt;attr name=\"android:foreground\"/&gt; &lt;/declare-styleable&gt;&lt;/resources&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import android.widget.ImageView; public class ForegroundImageView extends ImageView &#123; private Drawable foreground; public ForegroundImageView(Context context) &#123; this(context, null); &#125; public ForegroundImageView(Context context, AttributeSet attrs) &#123; super(context, attrs); TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundImageView); Drawable foreground = a.getDrawable(R.styleable.ForegroundImageView_android_foreground); if (foreground != null) &#123; setForeground(foreground); &#125; a.recycle(); &#125; /** * Supply a drawable resource that is to be rendered on top of all of the child * views in the frame layout. * * @param drawableResId The drawable resource to be drawn on top of the children. */ public void setForegroundResource(int drawableResId) &#123; setForeground(getContext().getResources().getDrawable(drawableResId)); &#125; /** * Supply a Drawable that is to be rendered on top of all of the child * views in the frame layout. * * @param drawable The Drawable to be drawn on top of the children. */ public void setForeground(Drawable drawable) &#123; if (foreground == drawable) &#123; return; &#125; if (foreground != null) &#123; foreground.setCallback(null); unscheduleDrawable(foreground); &#125; foreground = drawable; if (drawable != null) &#123; drawable.setCallback(this); if (drawable.isStateful()) &#123; drawable.setState(getDrawableState()); &#125; &#125; requestLayout(); invalidate(); &#125; @Override protected boolean verifyDrawable(Drawable who) &#123; return super.verifyDrawable(who) || who == foreground; &#125; @Override public void jumpDrawablesToCurrentState() &#123; super.jumpDrawablesToCurrentState(); if (foreground != null) foreground.jumpToCurrentState(); &#125; @Override protected void drawableStateChanged() &#123; super.drawableStateChanged(); if (foreground != null &amp;&amp; foreground.isStateful()) &#123; foreground.setState(getDrawableState()); &#125; &#125; @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; super.onMeasure(widthMeasureSpec, heightMeasureSpec); if (foreground != null) &#123; foreground.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight()); invalidate(); &#125; &#125; @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; super.onSizeChanged(w, h, oldw, oldh); if (foreground != null) &#123; foreground.setBounds(0, 0, w, h); invalidate(); &#125; &#125; @Override public void draw(Canvas canvas) &#123; super.draw(canvas); if (foreground != null) &#123; foreground.draw(canvas); &#125; &#125; &#125; 最后，还有人给出据说更好的解决方案没有测试过，不了解 reference Android themes and styles demisfied 关于Theme和Style的区别的很好的学习资料 Chris Banes G+ post 评论很精彩 RelativeLayout with foreGround 没测试过 Ripple Effect 将Ripple的动画兼容到API 9+ ，很出色的一个库。之前项目中用过，就是一个继承自RelativeLayout的自定义ViewGroup。","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"foreground","slug":"foreground","permalink":"https://haldir65.github.io/tags/foreground/"}]},{"title":"replace butterKnife with databinding","date":"2016-09-22T15:17:39.000Z","path":"2016/09/22/replace-butterKnife-with-databinding/","text":"Yigit Boyar 在2015年的android Dev summit上介绍了Databinding，当时好像提到一句:“no binding libraries will be created from now on “，大意如此。本文介绍使用Databinding替代ButterKnife的用法 本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。 1.在Activity中使用before123456789101112class ExampleActivity extends Activity &#123; @Bind(R.id.title) TextView title; @Bind(R.id.subtitle) TextView subtitle; @Bind(R.id.footer) TextView footer; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.simple_activity); ButterKnife.bind(this); &#125;&#125; after首先需要将xml文件添加 Layout tagR.layout.smple_activity1234567&lt;layout&gt; &lt;LinearLayout&gt; &lt;TextView android:id=\"@+id/title\"&gt; &lt;TextView android:id=\"@+id/subtitle\"&gt; &lt;TextView android:id=\"@+id/footer\"&gt; &lt;/LinearLayout&gt;&lt;/layout&gt; 1234567891011class ExampleActivity extends Activity &#123; private ActivitySampleBinding binding; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); binding = DataBindingUtils.setContentView(this, R.layout.simple_activity); binding.title.setText(\"I am Title\"); //no more findViewById!!! &#125;&#125; 2.在Fragment中使用before1234567891011public class FancyFragment extends Fragment &#123; @Bind(R.id.button1) Button button1; @Bind(R.id.button2) Button button2; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; View view = inflater.inflate(R.layout.fancy_fragment, container, false); ButterKnife.bind(this, view); // TODO Use fields... return view; &#125;&#125; after12345678910public class FancyFragment extends Fragment &#123; private FragmentFancyBinding binding; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; binding = DataBindingUtil.inflate(inflater,R.layout.fragment_fancy, container, false);true return binding.getRoot(); &#125;&#125; 3.在ViewHolder中使用before1234567891011121314151617181920212223242526public class MyAdapter extends BaseAdapter &#123; @Override public View getView(int position, View view, ViewGroup parent) &#123; ViewHolder holder; if (view != null) &#123; holder = (ViewHolder) view.getTag(); &#125; else &#123; view = inflater.inflate(R.layout.list_item_sample, parent, false); holder = new ViewHolder(view); view.setTag(holder); &#125; holder.name.setText(\"John Doe\"); // etc... return view; &#125; static class ViewHolder &#123; @Bind(R.id.title) TextView name; @Bind(R.id.job_title) TextView jobTitle; public ViewHolder(View view) &#123; ButterKnife.bind(this, view); &#125; &#125;&#125; after ListView1234567891011121314151617public class MyAdapter extends BaseAdapter &#123; @Override public View getView(int position, View convertView, ViewGroup parent) &#123; ListItemSampleBinding binding; if (convertView == null) &#123; binding = DataBindingUtil.inflate(inflater, R.layout.list_item_sample, parent, false); convertView = binding.getRoot(); convertView.setTag(binding); &#125; else &#123; binding = (ListItemSampleBinding) convertView.getTag(); &#125; binding.setUser(getItem(position)); // binding.name.setText(\"John Doe\"); return convertView; &#125;&#125; recyclerView1234567891011121314151617181920212223242526public class SampleRecyclerAdapter extends RecyclerView.Adapter&lt;SampleRecyclerAdapter.BindingHolder&gt; &#123; @Override public RegisterableDeviceListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; final View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_sample, parent, false); return new BindingHolder(v); &#125; @Override public void onBindViewHolder(BindingHolder holder, int position) &#123; holder.getBinding().setVariable(BR.user, getItem(position)); &#125; static class BindingHolder extends RecyclerView.ViewHolder &#123; private final ViewDataBinding binding; public BindingHolder(View itemView) &#123; super(itemView); binding = DataBindingUtil.bind(itemView) &#125; public ViewDataBinding getBinding() &#123; return binding; &#125; &#125;&#125; 4.在CustomView中使用在自定义View(ViewGroup)的时候，可以用ButterKnife减少自定义ViewGroup中的findViewById,使用Databinding之后是这样的。1234567891011121314151617181920212223242526272829303132public class Pagination extends RelativeLayout &#123; private ViewPaginationBinding binding; public Pagination(Context context) &#123; this(context, null); &#125; public Pagination(Context context, AttributeSet attrs) &#123; super(context, attrs); binding = DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.view_pagination, this, true); &#125; public static void setListener(Pagination paginate, View target, OnPaginationClickListener listener) &#123; if (listener != null) &#123; target.setOnClickListener(_v -&gt; listener.onClick(paginate)); &#125; &#125; @BindingAdapter(&#123;\"android:onPrevButtonClicked\"&#125;) public static void setPrevClickListener(Pagination view, OnPaginationClickListener listener) &#123; setListener(view, view.binding.btnPrevPage, listener); &#125; @BindingAdapter(&#123;\"android:onNextButtonClicked\"&#125;) public static void setNextClickListener(Pagination view, OnPaginationClickListener listener) &#123; setListener(view, view.binding.btnNextPage, listener); &#125; public interface OnPaginationClickListener &#123; void onClick(Pagination pagination); &#125;&#125; 5.EventHandler, setDefaultComponent…Databinding还有很多高级用法，目前给我带来的好处就是明显减少了boilerplate code So ,感谢ButterKnife给我们带来的便利，Googbye ButterKnife，Hello DataBinding! ＊todo＊ ### how did ButterKnife work?ButterKnife原理基本上从ButterKnifeAnnotationProcess.process开始 Reference Data Binding Library data-binding-android-boyar-mount Advanced Data Bindinding Two-Way Data Binding at google io 2016 Android Dev Summit 2015 Goodbye Butter Knife Google Sample","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"databinding","slug":"databinding","permalink":"https://haldir65.github.io/tags/databinding/"},{"name":"Butterknife","slug":"Butterknife","permalink":"https://haldir65.github.io/tags/Butterknife/"}]},{"title":"android内部类导致leak模板","date":"2016-09-18T10:23:42.000Z","path":"2016/09/18/android-inner-class-leak/","text":"通常我们在一个class里面写内部类时，不是一定要用static声明为静态类，但是推荐作为内部静态类，因为内部类会隐式持有外部类的引用，有些时候如果代码处理不对容易造成内存泄漏下面就是个内存泄漏的例子12345678910111213141516171819202122232425262728public class MainActivity extends Activity &#123;truepublic class MyHandler extends Handler&#123;true@Overridetruepublic void handleMessage(Message msg) &#123;truetrueif(msg.what==1)&#123;truetruetruenew Thread()&#123;truetruetruetrue@Overridetruetruetruetruepublic void run() &#123;truetruetruetruetruewhile(true)&#123;truetruetruetruetruetrue//do somethingtruetruetruetruetrue&#125;truetruetruetrue&#125;truetruetrue&#125;.start();truetrue&#125;true&#125;true&#125;truepublic MyHandler handler;true@Overridetrueprotected void onCreate(Bundle savedInstanceState) &#123;truetruesuper.onCreate(savedInstanceState);truetruesetContentView(R.layout.activity_main);truetruetruetrue//...truetruehandler.sendEmptyMessage(1);truetruefinish();true &#125;&#125; 如上面代码所示，在onCreate方法里发送了一条消息给handler处理然后finish方法关闭activity，但是代码并不能如愿，因为在handler收到消息启动了一个线程并且是死循环，这时候Thread持有handler的引用，而handler又持有activity的引用，这就导致了handler不能回收和activty也不能回收，所以推荐使用静态内部类，因为静态内部类不持有外部类的引用，可以避免这些不必要的麻烦。 除此之外，在Activity里面创建一个AsyncTask的子类也容易导致leak例如 stackoverFlow上的这个问题 对于这类问题的比较常用的方式:WeakReference例如,写这样一个的静态内部类 private static class IncomingHandler extends Handler { private final WeakReference&lt;MessagingService&gt; mReference; IncomingHandler(MessagingService service) { mReference = new WeakReference&lt;&gt;(service); } @Override public void handleMessage(Message msg) { MessagingService service = mReference.get(); switch (msg.what) { case MSG_SEND_NOTIFICATION: int howManyConversations = msg.arg1 &lt;= 0 ? 1 : msg.arg1; int messagesPerConversation = msg.arg2 &lt;= 0 ? 1 : msg.arg2; if (service != null) { service.sendNotification(howManyConversations, messagesPerConversation); } break; default: super.handleMessage(msg); } } } //handler通过弱引用持有service对象，外加static内部类不持有外部类引用，应该不会leak了","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]}]