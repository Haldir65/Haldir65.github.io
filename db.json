{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.png","path":"favicon.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.d221b8.css","path":"main.d221b8.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.c853ad.js","path":"mobile.c853ad.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.59dfdc.js","path":"slider.59dfdc.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.d221b8.js","path":"main.d221b8.js","modified":0,"renderable":1},{"_id":"source/assets/blogImg/zhangzhe.jpg","path":"assets/blogImg/zhangzhe.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"source/assets/blogImg/getX.png","path":"assets/blogImg/getX.png","modified":0,"renderable":0},{"_id":"source/assets/blogImg/service_binding_tree_lifecycle.png","path":"assets/blogImg/service_binding_tree_lifecycle.png","modified":0,"renderable":0},{"_id":"source/assets/blogImg/service_lifecycle.png","path":"assets/blogImg/service_lifecycle.png","modified":0,"renderable":0},{"_id":"source/assets/blogImg/cat.jpg","path":"assets/blogImg/cat.jpg","modified":0,"renderable":0},{"_id":"source/assets/blogImg/colorAccent.jpg","path":"assets/blogImg/colorAccent.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/favicon.png","hash":"12f8cb4e7a7f19abacb2f972df6166a804669327","modified":1483838532000},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1474160201658},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1483801970352},{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1483801970348},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1483801970358},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1483801970361},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1483801970367},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1474160201663},{"_id":"themes/yilia/_config.yml","hash":"483ff0a4893a252e58157cd5a9850702ebf1b7dd","modified":1483802616240},{"_id":"themes/yilia/package.json","hash":"6a34fcc46a5edcf94269674ead74a3af073e4aff","modified":1483801970602},{"_id":"themes/yilia/webpack.config.js","hash":"fed83a2cf7e9f92e2eb2c6dd31f3ffdca98eea5d","modified":1483801971524},{"_id":"source/_posts/2016-10-12-How-the-mainThread-work.md","hash":"63bc4218e819686568c4b47c00be195a9131c467","modified":1476344691771},{"_id":"source/_posts/2016-10-13-Android-coordinate-System.md","hash":"b1a30995c4b0cf2712309b669b12a07cd3b08786","modified":1477233137967},{"_id":"source/_posts/2016-10-14-Android-translucent-status-bar.md","hash":"d80977132b0af9f2fa2120eedca09b8acb1de0e4","modified":1482052591426},{"_id":"source/_posts/2016-10-15-using-loader-in-android-app.md","hash":"9ba8b2a9767a84155506abfa535468669f3dba43","modified":1477219174619},{"_id":"source/_posts/2016-10-20-RecyclerViewAnimationStuff.md","hash":"5f4e41d54ab954da53ae35fcccc021d1104cfae8","modified":1476952434999},{"_id":"source/_posts/2016-10-20-android-dirty-code.md","hash":"1725bdafcb3c922489f64a96dfa01d4f87129a21","modified":1477219349266},{"_id":"source/_posts/2016-10-20-write-your-own-layoutmanager.md","hash":"d661fa92eb669a597d322e8bdbdc545da2193cbf","modified":1477972991805},{"_id":"source/_posts/2016-10-24-a-peek-on-pull-to-refresh.md","hash":"b052f3a03a7a96fd2a95f7c56399db4aa2023715","modified":1483869973605},{"_id":"source/_posts/2016-10-31-install-lxml-on-windows.md","hash":"27bdf31816c8db2171e09ff2dbff8e62f01f6971","modified":1477902395822},{"_id":"source/_posts/2016-11-27-the-size-of-wrap-content.md","hash":"03bc686a935c5fd2ac55836997edb34bc3e10477","modified":1480239546296},{"_id":"source/_posts/2016-12-10-adb-command.md","hash":"2150844022d87800414225df4c86419e0f6586d2","modified":1483803918436},{"_id":"source/_posts/2016-12-24-Python-UnicodeEncodeError.md","hash":"6feb0543a0fb5c35fdf1de36949e833bbd0e1233","modified":1482588572979},{"_id":"source/_posts/2016-12-31-Eliminating-BoilPlate-AnnotationProcessor.md","hash":"1dc8bcf8ff7833f10392173af9d2872bb9752bcd","modified":1483277584779},{"_id":"source/_posts/2017-01-07-Linux-Basic-Commands.md","hash":"b066472e90bc15d6736259bfd7e50617f2d8ca1f","modified":1483882867420},{"_id":"source/_posts/2017-01-08-trouble-shooting-with-my-blog.md","hash":"b76b963dd8ea2036393eb4aed2e44cab0cfa52c8","modified":1483882666784},{"_id":"source/_posts/activity-transition-pre-and-post-lollipop.md","hash":"bc984f5838cb80a90a2fc6a5490d2fac91e1b895","modified":1475744693709},{"_id":"source/_posts/android-7-0-new-features.md","hash":"91121b230a4c55ddcdde9a42a05813789d3fb79e","modified":1478083516164},{"_id":"source/_posts/android-inner-class-leak.md","hash":"6d47bb039c71395fed723ad1546fb67a1fb8c6ef","modified":1475744693716},{"_id":"source/_posts/git-manual.md","hash":"2cdb3209df4a265516f3122b08d56d2fbc53c2d2","modified":1483804938830},{"_id":"source/_posts/hello-world.md","hash":"aa73fbad5185050bfbc21abbf6a425a70922be74","modified":1475744693728},{"_id":"source/_posts/replace-butterKnife-with-databinding.md","hash":"9101d4b6beccb6a2ef6bb6154b82ef0f4d2df2a9","modified":1475744693739},{"_id":"source/_posts/selectableItemBackground-foreground.md","hash":"4a82fc98e596ad1474868608e3e58b96e72f3065","modified":1475744693749},{"_id":"source/_posts/service-activity-communication.md","hash":"069235d1c105d8c3df76b6044668e9156bd4551a","modified":1475936940554},{"_id":"source/_posts/theme-versus-style.md","hash":"f449f0519136b8b6bcfa6e30c1685961c895b6eb","modified":1476129077483},{"_id":"source/_posts/touch-event-distribution.md","hash":"0318ddc8428e7b4d85f85bb82abe7f569bee192b","modified":1476281782197},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"d0ed7dadf547e7d0b242aefd19bff8552e950380","modified":1483801967464},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1483801972493},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"448556e686ca27ceec903b6b0558c75bd952be0d","modified":1483801971652},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1474160201638},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1474160185901},{"_id":"themes/yilia/.git/index","hash":"7435a55e004399ac94cf68d5a3b415c6f0ebe85a","modified":1483801992095},{"_id":"themes/yilia/.git/packed-refs","hash":"9295e7df400c6b3bc71309059e20d92171362302","modified":1474160201595},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1474160201679},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1474160201684},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1474160201688},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1474160201693},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1474160201697},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1474160201706},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1474160201701},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1474160201865},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1474160201865},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1474160201865},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1483801970597},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1474160201893},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1474160201895},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1474160201898},{"_id":"themes/yilia/source/main.d221b8.css","hash":"9e853b14b4c70a560bb6c12c9c98600d0abf798d","modified":1483801971402},{"_id":"themes/yilia/source/mobile.c853ad.js","hash":"527ce9d0d479ed467c24113ed8833b09f2aa2300","modified":1483801971477},{"_id":"themes/yilia/source/slider.59dfdc.js","hash":"76f0c36a9779bafce39aaecb99bc62c75a83109a","modified":1483801971510},{"_id":"themes/yilia/source-src/css.ejs","hash":"edc89a945d271abfb24240ab31d5ea0285530b23","modified":1483801970607},{"_id":"themes/yilia/source-src/script.ejs","hash":"3c4882506928b6043b9585a6edeffeb335604161","modified":1483801971320},{"_id":"themes/yilia/source/main.d221b8.js","hash":"007024d2f215883da4bc15b95390cb70a79fbcb2","modified":1483801971451},{"_id":"source/assets/blogImg/zhangzhe.jpg","hash":"d5f7cfd5cc970932ecb9e6ee9cd534e7079b08dc","modified":1475744693791},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1474160185916},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1474160185932},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1474160185916},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1474160185932},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1474160185932},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1474160185948},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1474160185948},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1474160185963},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1474160185963},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1474160185963},{"_id":"themes/yilia/.git/logs/HEAD","hash":"fc6f81c38cbd915de720e199f9f234f5103d0f08","modified":1483801972490},{"_id":"themes/yilia/.git/refs/stash","hash":"09eed3d5c8880e19ed7442ccb82a435bff8f510d","modified":1483801956660},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"61c95c49baa2c1bfd99cf88c55ba205b44bf3d97","modified":1483801970386},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1474160201717},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1474160201736},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"82375389dfdb316c5e218115bf708bd2666ab4e8","modified":1483801970414},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1483801970430},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"facc996e4a5bb798e0e5476e233699c4ccc0630e","modified":1483801970433},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1474160201765},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1474160201771},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1483801970454},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1483801970461},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"6f3f8c1dc25a9a1ffe4051344b5516fa713f1666","modified":1483803350494},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1474160201802},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1483801970484},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"b98c60b601b04900f5c5d67d7865953056df0d62","modified":1483801970557},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"538b6d35b25cbdba7dc77feec638336625c8ef8b","modified":1483801970576},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1483801970581},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1483801971328},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1483801971343},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1483801971367},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1483801971376},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1483801971385},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1483801971387},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1483801971389},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1483801971392},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1483801971390},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1474160201909},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1474160201913},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"8a0ae8ee6af8df3f215f1cd4ecc10145a5b92cf0","modified":1474160201923},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"4115c4518cca3f5cf461018aa7a7321138d017cc","modified":1483801970611},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1483801970616},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1483801970621},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1483801970626},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"8eb9678e2f88da64436d75e5fde5c84bd52f7e17","modified":1483801970649},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"bdccd6822da009353e4be0ea9cfd0b96fa75de05","modified":1483801970654},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1474160202005},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1474160202005},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1483801970689},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"0267e2febaef284cf319235435643232fdeee0c9","modified":1474160202020},{"_id":"themes/yilia/source-src/css/left.scss","hash":"1ee3dd6fa50186af5bedb09d4a0e6b47ddb1b57b","modified":1483801970708},{"_id":"themes/yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1483801970715},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1483801970735},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"28a01c3d85ec3194095f96988642a16d461f1077","modified":1483801970865},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1474160202052},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1483801970936},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1474160202052},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1483801970990},{"_id":"themes/yilia/source-src/css/social.scss","hash":"70c2e36b7161717feed1f231271ed693c36407d1","modified":1483801971000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1474160202067},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1483801971010},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"f5bed08765a8f0a344af5d4781ff822a57028148","modified":1483801971019},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1483801971033},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1483801971081},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1483801971105},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1483801971125},{"_id":"themes/yilia/source-src/js/fix.js","hash":"eccdcc7ee79adebf450bc655b2e80eb6801421a6","modified":1483801971143},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1483801971157},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1483801971178},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1483801971199},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1483801971217},{"_id":"themes/yilia/source-src/js/slider.js","hash":"8f5d922d380f1946d910cd584da29a503aad9d09","modified":1483801971229},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1483801971260},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1483801971277},{"_id":"source/assets/blogImg/getX.png","hash":"2bff0efbd620f1911193fe255038939beb001fbf","modified":1475744693777},{"_id":"source/assets/blogImg/service_binding_tree_lifecycle.png","hash":"eda090eefdd0ad8c9324caa1977d351b7d0633bb","modified":1475744693780},{"_id":"source/assets/blogImg/service_lifecycle.png","hash":"8f58fa262d06b6ea8e20ca738da45a6c06d42ecb","modified":1475744693784},{"_id":"themes/yilia/.git/logs/refs/stash","hash":"3ddd4e1bffa20abac4713b7f94bfa43b8f1b434f","modified":1483801956666},{"_id":"themes/yilia/.git/objects/0f/3a4763bf649cbcf6e6c6ef4bde3e42aa77adf0","hash":"9b60f138dabe89dd7aab0805ee8d296c331117f4","modified":1483801956255},{"_id":"themes/yilia/.git/objects/10/ee4df83a9c5d37e6888bf3a60a680cc6015b80","hash":"7eb1e2da4983d31090375ad8977590ff2a61e0ca","modified":1483801956240},{"_id":"themes/yilia/.git/objects/14/42379f0180d8008ad4ed215f7639ebcabe405c","hash":"c4653de6c8d1f91403e8661923cb66f6f81b7214","modified":1483801956110},{"_id":"themes/yilia/.git/objects/38/ae77e6a3357cf264d7002c54c1308e6e42a0a1","hash":"a96e0f32f31ce45e9198133d822178ef75f7a18c","modified":1483801955669},{"_id":"themes/yilia/.git/objects/53/96bb299000725cc5650fc494fbdd044d70525c","hash":"c970919e6698e20088951f7a53251fb2689e9042","modified":1483801992058},{"_id":"themes/yilia/.git/objects/5a/d1743e3d4d5342ed8525cd68d13cbf22d1f3e7","hash":"c29c11a647e523fb1d93945630996e5f8f0dd1c6","modified":1483801956249},{"_id":"themes/yilia/.git/objects/60/23ab1c64378edcb8e94771007c263a76a44215","hash":"e05c7426d5a62a77db7454f43b81780c11d2e29a","modified":1483801956103},{"_id":"themes/yilia/.git/objects/86/51d03ccf648e8856134613ecf439feab07b487","hash":"7cd7ccda78a2c047fe08a17ae07afcee5cdaf966","modified":1483801956537},{"_id":"themes/yilia/.git/objects/98/d3764cfb1894bdff480de5c3cce0dec3a057f3","hash":"404512a8af64a021251b0d4cc46dd13c922e158e","modified":1483801992076},{"_id":"themes/yilia/.git/objects/pack/pack-3b74d4d5eacba667205d38a328b396d955aa76f5.idx","hash":"405f48d45c00bfdcad973f9942ddc5bc86a14c77","modified":1483801917334},{"_id":"themes/yilia/.git/objects/pack/pack-f287423bdddd0dae090311153706b8ee09994797.idx","hash":"6a16af275dd353c57c9afec2d28157e5c5453a57","modified":1474160201396},{"_id":"themes/yilia/.git/refs/heads/master","hash":"d8581514d9fcdef2803a87f7ea3e386c648ef01f","modified":1483801972349},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1483801970499},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"4e11ffbd6606b6536b0afda862bfde9826a3d03a","modified":1483801970494},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1474160201818},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1474160201818},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1483801970509},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1483801970518},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1474160201849},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1483801970634},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1474160201963},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1483801970644},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1474160201976},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1474160201982},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1483801970662},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1483801970667},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1483801970679},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1483801970685},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1474160202020},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1474160202036},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1483801970693},{"_id":"source/assets/blogImg/cat.jpg","hash":"07ec243a561640c379d2d088caedbb0789f3d5b1","modified":1475744693764},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"b13f34f7b28642488ee679e1b60163364fdc366d","modified":1483801972362},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1474160201613},{"_id":"themes/yilia/.git/refs/remotes/origin/master","hash":"d8581514d9fcdef2803a87f7ea3e386c648ef01f","modified":1483801917534},{"_id":"themes/yilia/.git/refs/remotes/origin/myself","hash":"d9893970a3f49fee45d449931381c471db51e5ec","modified":1483801917546},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/master","hash":"766a90205739db284795959633f699e295786486","modified":1483801917539},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"7d87cc956364bc48669ad14fff337d9216febbf2","modified":1474160201609},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/myself","hash":"d9ca225efb2648a9df6003eaa2ea26d3097271b6","modified":1483801917551},{"_id":"source/assets/blogImg/colorAccent.jpg","hash":"6712969d1eb8357224faaf2525178d73969d7d05","modified":1475744693772},{"_id":"themes/yilia/.git/objects/pack/pack-3b74d4d5eacba667205d38a328b396d955aa76f5.pack","hash":"0e1370e63b603ecbfd227d3e2cf1d51ba08b91d6","modified":1483801917257},{"_id":"themes/yilia/.git/objects/pack/pack-f287423bdddd0dae090311153706b8ee09994797.pack","hash":"10edfacb4a22e329c5cd4e6d5826dc65034d84ae","modified":1474160201458},{"_id":"public/atom.xml","hash":"27636a4c810ca5230710b8a0f04791f6f77b869e","modified":1483882879912},{"_id":"public/content.json","hash":"5c02b6895d2877826f4e56309bf49806e7790349","modified":1483882682641},{"_id":"public/sitemap.xml","hash":"0e62805700128eb4098a99d190789f5b853c34a7","modified":1483882880925},{"_id":"public/2017/01/07/2017-01-07-Linux-Basic-Commands/index.html","hash":"5fda022cb6b0f6f2f5e858cdd2936c8b22d317ec","modified":1483882880994},{"_id":"public/2016/12/31/2016-12-31-Eliminating-BoilPlate-AnnotationProcessor/index.html","hash":"96bd02e5749f5efc48455945014708899db3dc0b","modified":1483870194821},{"_id":"public/2016/12/24/2016-12-24-Python-UnicodeEncodeError/index.html","hash":"e4baf4c268b4811ce44e8366bc5d83ee5615e541","modified":1483870194821},{"_id":"public/2016/11/27/2016-11-27-the-size-of-wrap-content/index.html","hash":"fd7b74fe1bffd34a84eed1c8251d79dc4574c736","modified":1483870194821},{"_id":"public/2016/10/31/2016-10-31-install-lxml-on-windows/index.html","hash":"65ca1017265b29e9e6c48e3d2ce578482be8abd4","modified":1483870194821},{"_id":"public/2016/10/24/2016-10-24-a-peek-on-pull-to-refresh/index.html","hash":"5dba1760dbce1332b9bf0b371da22ccda3ee9958","modified":1483870194821},{"_id":"public/2016/10/20/2016-10-20-android-dirty-code/index.html","hash":"bae7810d831d08a6141914ba127965ba544b8d1e","modified":1483870194821},{"_id":"public/2016/10/20/2016-10-20-write-your-own-layoutmanager/index.html","hash":"d908c344e678a41f649280f54d2680d12066460b","modified":1483870194821},{"_id":"public/2016/10/20/2016-10-20-RecyclerViewAnimationStuff/index.html","hash":"b4debe85e5ad4b92c919e02ec956a4ba3c5be877","modified":1483870194821},{"_id":"public/2016/10/15/2016-10-15-using-loader-in-android-app/index.html","hash":"a8dd2890f7314929cc9dd7e8ddfbeb36bdb45c5f","modified":1483870194821},{"_id":"public/2016/10/14/2016-10-14-Android-translucent-status-bar/index.html","hash":"e54dc880675ee68e38b570b41f533387b27af699","modified":1483870194821},{"_id":"public/2016/10/13/2016-10-13-Android-coordinate-System/index.html","hash":"fd2bdcb144a2dd9a16c3614f1d74396d7183b5e0","modified":1483870194821},{"_id":"public/2016/10/12/2016-10-12-How-the-mainThread-work/index.html","hash":"97a2c19356fef6d2926553e957cd526c287349ce","modified":1483870194821},{"_id":"public/2016/10/10/theme-versus-style/index.html","hash":"652d4b679ebbaffbff4c1b1e2fb7dddd4d1d57d5","modified":1483870194821},{"_id":"public/2016/10/08/android-7-0-new-features/index.html","hash":"6ba80207b01f371ed295d07312b2ace19e078180","modified":1483870194821},{"_id":"public/2016/10/06/touch-event-distribution/index.html","hash":"d14a0d977cc5e5fe83ebd9332648c511bc3c1278","modified":1483870194821},{"_id":"public/2016/09/30/service-activity-communication/index.html","hash":"b5beff480ba9ce3d444ea758ce76e071002584b1","modified":1483870194821},{"_id":"public/2016/09/27/git-manual/index.html","hash":"66c93f668ea1876a386922dff408e11ccab31b39","modified":1483870194821},{"_id":"public/2016/09/27/activity-transition-pre-and-post-lollipop/index.html","hash":"97f05df09ec6d1f975e73e4b72cb6ce21d96f67b","modified":1483870194821},{"_id":"public/2016/09/23/selectableItemBackground-foreground/index.html","hash":"c5156aca1521270ad846642b3eccfcf2233dbb5c","modified":1483870194821},{"_id":"public/2016/09/22/replace-butterKnife-with-databinding/index.html","hash":"beb7e6546a80ec40e12dbe7277bfa19a14294142","modified":1483870194821},{"_id":"public/2016/09/18/android-inner-class-leak/index.html","hash":"f695d73db37b7b05184cb6814f89ef3999a2b91f","modified":1483870194821},{"_id":"public/2016/09/18/hello-world/index.html","hash":"c7302591d552e5d1ee9080384069ef7712713693","modified":1483870194821},{"_id":"public/archives/index.html","hash":"f1f86877d6632aa13e633dd2c64931568aee54b3","modified":1483882385350},{"_id":"public/archives/page/2/index.html","hash":"cebbe734c96e5042fc457c3363ae84d10b24642f","modified":1483870194821},{"_id":"public/archives/page/3/index.html","hash":"ad970c9718edce5ada277131110a23a4fc215fc4","modified":1483870194821},{"_id":"public/archives/page/4/index.html","hash":"83a988d9f9d71a1aa1fb6dacf2a8701c07f0d46e","modified":1483870194821},{"_id":"public/archives/page/5/index.html","hash":"6d43cc050c11b782258c5fd566a9d0be5e79426f","modified":1483870194821},{"_id":"public/archives/page/6/index.html","hash":"45c02a6736da6c707190ea30dedf849c4fb69a16","modified":1483870194821},{"_id":"public/archives/2016/index.html","hash":"5b6383efd0db0df4ff5fd55c6e9035bee06acd43","modified":1483870194821},{"_id":"public/archives/2016/page/2/index.html","hash":"e1b019bfa8e9bac24e1797d3996bba54d714e7af","modified":1483870194821},{"_id":"public/archives/2016/page/3/index.html","hash":"a912e0283dda75b78356bde04abf6a3b7e5fe042","modified":1483870194821},{"_id":"public/archives/2016/page/4/index.html","hash":"3686823c6fc17260a91a529cd55d488775f7cbe1","modified":1483870194821},{"_id":"public/archives/2016/page/5/index.html","hash":"f64e14ec3eebd73a255cf3237982bfb24fcebf1f","modified":1483870194821},{"_id":"public/archives/2016/page/6/index.html","hash":"78fc376df56ce0b7806954d83ae5f6c384f107fa","modified":1483870194821},{"_id":"public/archives/2016/09/index.html","hash":"b8d228324a30f023cc7b617d83e91789903cc061","modified":1483870194821},{"_id":"public/archives/2016/09/page/2/index.html","hash":"14db7033efd9ba9f10bd94f8b1571974faac194a","modified":1483870194821},{"_id":"public/archives/2016/10/index.html","hash":"16e4cc9f528bac3566d5ab2b85344c13d0a7d616","modified":1483870194821},{"_id":"public/archives/2016/10/page/2/index.html","hash":"75d503ed731380b223f721180cd9c6f2500a07ea","modified":1483870194821},{"_id":"public/archives/2016/10/page/3/index.html","hash":"8297d84b20e45bca056a1c5453d3f94f7fb13b7c","modified":1483870194821},{"_id":"public/archives/2016/11/index.html","hash":"277f93f5a90278180b55aabb9681ab4cffc72cf1","modified":1483870194821},{"_id":"public/archives/2016/12/index.html","hash":"7ee48f4607466686ace8b3b23ada4fd0f703befa","modified":1483870194821},{"_id":"public/archives/2017/index.html","hash":"bcbd94d696fd81e1e9c0373226c7ca839f46476b","modified":1483882385350},{"_id":"public/archives/2017/01/index.html","hash":"3c2803c4e88d725bddf7f006ddbc3bd16eda8b8a","modified":1483882385351},{"_id":"public/categories/Android/index.html","hash":"56760f5a9655f95a22b4a56b98f7898f766e7133","modified":1483870194821},{"_id":"public/categories/技术/index.html","hash":"47d7db4e301562cdb789ddb3892a265b4aa2dd87","modified":1483870194821},{"_id":"public/categories/技术/page/2/index.html","hash":"4baf8abb3434579077ee27059e7c31a1799cb3eb","modified":1483870194821},{"_id":"public/categories/linux/index.html","hash":"051be1bff9011594889f5af9d2e644aa9c49111e","modified":1483870194821},{"_id":"public/categories/blog/index.html","hash":"dfe47997abb3e17296e0b23d616950c6a084b60f","modified":1483870194821},{"_id":"public/index.html","hash":"ba56e47f87a2cab81c7d3a10926a0d9d9b6bee24","modified":1483882880995},{"_id":"public/page/2/index.html","hash":"bf85a53ef7c90fe2c4beed92f4dda9c09bec11c9","modified":1483870194821},{"_id":"public/page/3/index.html","hash":"8553e93478d6c2ad9dca1448e8d2a8b9d7993650","modified":1483870194821},{"_id":"public/page/4/index.html","hash":"6642ae81cd048030c167a56524fddf18bba062f1","modified":1483870194821},{"_id":"public/page/5/index.html","hash":"24e3bfb3f262fd959d66108fcd90380c76222b50","modified":1483870194821},{"_id":"public/page/6/index.html","hash":"412ff0179118fd73a72f18a6163a558149c54cf5","modified":1483870194821},{"_id":"public/tags/Handler-Message/index.html","hash":"c24974d409d9b423b0d7b35a4c4eff2100e49ddd","modified":1483870194821},{"_id":"public/tags/坐标/index.html","hash":"98b1943b3f1f201b4dd46035598b895b1cf3110f","modified":1483870194821},{"_id":"public/tags/TouchEvent/index.html","hash":"84579ca7fdf2fc040cd48ea73fa74c6fa91f217a","modified":1483870194821},{"_id":"public/tags/Android/index.html","hash":"02b027726d1f86741c57b2b3d8dff307817991cc","modified":1483870194821},{"_id":"public/tags/Window/index.html","hash":"1757dc7805724ee27a2762f065a5504fc0eca931","modified":1483870194821},{"_id":"public/tags/statusBar/index.html","hash":"dadfcdd92e59c56783ad30ef3643142a1955d6e3","modified":1483870194821},{"_id":"public/tags/RecyclerView/index.html","hash":"f18afd8be391aa0223b39f9c9266ae94d1c8e08f","modified":1483870194821},{"_id":"public/tags/置顶/index.html","hash":"58a8af665a3d4ae849839f4b8917b8713183f787","modified":1483870194821},{"_id":"public/tags/Python/index.html","hash":"4aa73d797ce6de9842c1b36a83534a64100513ec","modified":1483870194821},{"_id":"public/tags/android/index.html","hash":"6796a022cd198f33187aebca77f16e511e69e3a6","modified":1483870194821},{"_id":"public/tags/android/page/2/index.html","hash":"ca35504abb746a19203306545c1eeeea4938d9a1","modified":1483870194821},{"_id":"public/tags/transition/index.html","hash":"b4925fbc6c5398792cac4971548298b9f42561dd","modified":1483870194821},{"_id":"public/tags/android-7/index.html","hash":"ca9914e34162373860cd95456c1a195fd6d7506d","modified":1483870194821},{"_id":"public/tags/git/index.html","hash":"1a2aa79cc2ed493e3e733bd5781d3668b0c62b56","modified":1483870194821},{"_id":"public/tags/databinding/index.html","hash":"4fe2a66796fe5401543abcf4eda5fa5994d2dde8","modified":1483870194821},{"_id":"public/tags/Butterknife/index.html","hash":"e18ba5f93fea668088c4af3243568bb8333d91d6","modified":1483870194821},{"_id":"public/tags/随笔/index.html","hash":"575c1af07f0865a1c6d89d65b4e5b0bb1788a4c1","modified":1483870194821},{"_id":"public/tags/foreground/index.html","hash":"930b8cea683c38a9c4970a50566b4c42061d0050","modified":1483870194821},{"_id":"public/tags/service/index.html","hash":"49cff3a725e3a581ed318085deb518a6630f2b31","modified":1483870194821},{"_id":"public/2017/01/08/2017-01-08-trouble-shooting-with-my-blog/index.html","hash":"31f52ff701dea18c334a4bbb5b8f161c41b96614","modified":1483882682661},{"_id":"public/tags/hexo/index.html","hash":"8cfed11a64cf9cbc2792276e22a43ed08a8769dc","modified":1483882385351},{"_id":"public/favicon.png","hash":"12f8cb4e7a7f19abacb2f972df6166a804669327","modified":1483870194858},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1483870194858},{"_id":"public/assets/blogImg/zhangzhe.jpg","hash":"d5f7cfd5cc970932ecb9e6ee9cd534e7079b08dc","modified":1483870194858},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1483870194858},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1483870194858},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1483870194858},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"f6c8d119c14f2124f4362acd6c8e00f209af5613","modified":1483870194858},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1483870194858},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1483870194858},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1483870194858},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1483870194858},{"_id":"public/assets/blogImg/getX.png","hash":"2bff0efbd620f1911193fe255038939beb001fbf","modified":1483870194874},{"_id":"public/assets/blogImg/service_binding_tree_lifecycle.png","hash":"eda090eefdd0ad8c9324caa1977d351b7d0633bb","modified":1483870194874},{"_id":"public/assets/blogImg/service_lifecycle.png","hash":"8f58fa262d06b6ea8e20ca738da45a6c06d42ecb","modified":1483870194874},{"_id":"public/main.d221b8.css","hash":"9e853b14b4c70a560bb6c12c9c98600d0abf798d","modified":1483870194874},{"_id":"public/mobile.c853ad.js","hash":"527ce9d0d479ed467c24113ed8833b09f2aa2300","modified":1483870194874},{"_id":"public/slider.59dfdc.js","hash":"28e623e183fd004ac5e0fe7984b904bd398b55c4","modified":1483870194874},{"_id":"public/main.d221b8.js","hash":"79cb6470c3a7e6851121c545a992029293b5b401","modified":1483870194874},{"_id":"public/assets/blogImg/cat.jpg","hash":"07ec243a561640c379d2d088caedbb0789f3d5b1","modified":1483870197217},{"_id":"public/assets/blogImg/colorAccent.jpg","hash":"6712969d1eb8357224faaf2525178d73969d7d05","modified":1483870197369}],"Category":[{"name":"Android","_id":"cixohzzlb00027gvrnaa11q8f"},{"name":"技术","_id":"cixohzzlr00077gvrrumouypg"},{"name":"linux","_id":"cixohzzmt000u7gvrebd92v86"},{"name":"blog","_id":"cixohzzn800117gvrj7ei24wo"}],"Data":[],"Page":[],"Post":[{"title":"主线程的工作原理","date":"2016-10-12T08:47:42.000Z","_content":"\n![](http://odzl05jxx.bkt.clouddn.com/writing%20code%20that%20nobody%20else%20can%20read.jpg)\n\n​\t今天突然找到这样一个问题: \"Handler的postDelayed会阻塞线程吗？\"。基于自己之前对于Handler的线程间通讯机制的理解，还是不能给出明确的答案。正好打算把一篇关于主线程的工作原理的文章写出来，顺带看下能否把这个问题从源码的角度解释清楚。<!--more-->\n\n### 1. 从线程（Thread）开始\n通常，一个Process会有一个主线程, 而在Android中，UI控件相关的方法和一些系统callback都会发生在主线程上(onResume,onCreate,onStartCommand,onDraw, etc)。 如果App中使用了多个Process，则每个Process都会有一个主线程，但这不是今天的重点。\nAndroid应用是如何启动的?\n启动一个应用时，系统会从Zygote Process fork出一个新的Process，最终走到ActivityThread 的main方法\n```java\n public static void main(String[] args) {\n //省略部分无关代码\n        Looper.prepareMainLooper();\n        ActivityThread thread = new ActivityThread();\n        thread.attach(false);\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = thread.getHandler();\n        }\n        // End of event ActivityThreadMain.\n        Looper.loop();\n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");//从这里可以猜到Looper.loop方法会一直执行下去\n    }\n```\n看一下Looper.prepareMainLooper()方法：\n```java\n\n    /**\n     * Initialize the current thread as a looper, marking it as an\n     * application's main looper. The main looper for your application\n     * is created by the Android environment, so you should never need\n     * to call this function yourself.  See also: {@link #prepare()}\n     */\n    public static void prepareMainLooper() {\n        prepare(false);\n        synchronized (Looper.class) {\n            if (sMainLooper != null) {\n                throw new IllegalStateException(\"The main Looper has already been prepared.\");\n            }\n            sMainLooper = myLooper();\n        }\n    }\n```\n大致意思就是为当前Thread添加一个Looper。\nLooper.java是一个普通的class，其大致作用就是**为当前Thread维持一个message loop**，默认情况下一个Thread并没有一个Looper，要想添加一个，需要在该线程中调用Looper.prepare()，然后调用Looper.loop()方法即可让消息循环一直持续下去。大部分和message Loop的交互都是通过Handler这个类来进行的。例如\n```java\nclass LooperThread extends Thread {\n  *      public Handler mHandler;\n  *\n  *      public void run() {\n  *          Looper.prepare();\n  *\n  *          mHandler = new Handler() {\n  *              public void handleMessage(Message msg) {\n  *                  // 在这里处理消息\n  *              }\n  *          };\n  *\t\n  *          Looper.loop();\n    \t\t//这里面发送消息\n  *      }\n  *  }\n```\nLooper持有一个MessageQueue(消息队列)成员变量，消息循环时，Looper就不断地从消息队列中拿出消息进行处理。\n下面来看Looper.loop()方法里所做的事：\n```java\n  /** 删除了部分不相关的代码\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     */\n    public static void loop() {\n        final Looper me = myLooper();//返回当前线程中对应的Looper，看看下面的Exception就知道了\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n        for (;;) {\n            Message msg = queue.next(); // might block\n            if (msg == null) {\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n            try {\n                msg.target.dispatchMessage(msg);\n            } finally {\n               ....省略\n            }\n        }\n    }\n```\n简单解释一下，也就是从消息队列中取出新的消息(msg)。交给msg.target.dispatchMessage(msg)\n这个trarget是个Handler\n来看下Handler里面的dispatchMessage方法\n```java\n /**\n     * Handle system messages here.\n     */\n    public void dispatchMessage(Message msg) {\n        if (msg.callback != null) {\n            handleCallback(msg);\n        } else {\n            if (mCallback != null) {\n                if (mCallback.handleMessage(msg)) {\n                    return;\n                }\n            }\n            handleMessage(msg);\n        }\n    }\n```\n很明显是一个either or 的过程：\nMessage这个类里面有个Runnable callback，如果这个message有callback的话，就执行这个runnable，否则执行handler.callBack.handleMessage。也就是我们经常用的\n```java\nHandler handler = new Handler(){\n            @Override\n            public void handleMessage(Message msg) {\n                super.handleMessage(msg);\n            }\n        };\n```\n这种内部类的形式了\n需要注意的是，Message最好不要用new，使用obtain方法获得，使用release方法释放，这里面有一个消息池的概念，我也不太理解。\nMessageQueue中没有太多的公共方法，其中next()方法会返回\n> message that should be processed. Will not return message that will be processed at future times.\n> Message有一个long类型的变量Message.when，指的是这条消息最早可以被执行的时间，这个时间是基于SystemClock.uptimeMills()的。所以如果消息队列中没有一条message到达自己的可执行时间, 这个next()方法就会一直block。值得注意的是SystemClock.uptimeMills是基于CPU活动时间的，如果cpu处于sleep状态，这个sleep时间是不算的。所以如果你postDelayed了10s，假设cpu5s后开始休眠，10s后醒来，睡眠的这段时间是不算的。所以真正执行的时间可能还会往后延迟。\n\n### 2. Handler\nHandler基本上就做两件事\n1. add message to the messageQueue of the Looper it's associated with\n- post()  //把一条消息添加到所有可以被执行的消息的最后面，但在还没到时间的消息的前面\n- postDelayed()/postAtTime() //一个相对时间，一个绝对时间\n- postAtFrontOfQueue() // @piwai 插队行为，不要用\n2. Handle message when this message doesn't have callback\n   Handler的构造方法有7个,初始化时需要获得一个Looper\n   常用的Handler handler = new Handler() 会创建一个基于当前线程的Looper的Handler,如果当前线程没有调用Looper.Prepare，会抛出一个异常，这些在源代码里都能看到。\n   一些好用的构造函数\n> Handler (Looper.getMainLooper()) //往主线程的Looper的消息队列里发消息\n> Hanlder(Looper.myLooper()) //往当前线程Looper的消息队列里添加消息\n\n### Choreographer\n使用Android studio时，经常会在Logcat里看到这样的 info:\n> Skipped 60 frames! The application may be doing too much work on its main thread\n\n这段log出自Chreographer ，大意就是主线程上做的事太多或者做了太多不该在主线程上做的事。至于为什么不要在主线程上做太多的事，来看看主线程都有哪些工作:\nSystem Events , Input Events ,Application callback ,Services, Alarm ,UI Drawing....另外，当屏幕内容发生变化，或者在Animation运行中，系统将会尝试每隔16ms来Draw a Frame。而这部分工作是由Choregrapher来完成的，而其内部是通过一个Handler来进行Frame更新的。\n\n```java\nFrameHandler mHandler = new FrameHandler(Looper.myLooper());\nMessage msg = mHandler.obtainMessage(MSG_DO_FRAME);\nmsg.setAsynchronous(true);\nmHandler.sendMessageAtTime(msg,nextFrameTime)\n\n private final class FrameHandler extends Handler {\n        public FrameHandler(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_DO_FRAME:\n                    doFrame(System.nanoTime(), 0);\n                    break;\n                case MSG_DO_SCHEDULE_VSYNC:\n                    doScheduleVsync();\n                    break;\n                case MSG_DO_SCHEDULE_CALLBACK:\n                    doScheduleCallback(msg.arg1);\n                    break;\n            }\n        }\n    }\n```\n假设你在onMeasure,onLayout,onDraw这些方法中耽误主线程太多时间，Choregrapher将不能及时的更新Frame，哪怕你只耽误了1ms，系统也只能在16ms(大约)之后才能更新下一Frame。\n\n### 3. 为了在开发中发现不应该在主线程中进行的操作(IO，网络)，可以使用StrictMode：\n```java\nif (BuildConfig.DEBUG) {\n            StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()\n                    .detectDiskReads()\n                    .detectDiskWrites()\n                    .detectNetwork()   // or .detectAll() for all detectable problems\n                    .penaltyLog()\n                    .build());\n            StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()\n                    .detectLeakedSqlLiteObjects()\n                    .detectLeakedClosableObjects()\n                    .penaltyLog()\n                    .penaltyDeath()\n                    .build());\n        }\n```\n### 4 .Activity LifeCycle Events\n- Activity LifeCycle Events(startActivity(), finishi()) go out of your process through Binder IPC to the ActivityManager //有时候startActivity启动的Activity不是自己Process的,比如调用系统相机这种\n- Then back on to your main queue in the form of lifeCycle callbacks(onCreate(),onDestory() et_al) // 异步，异步！\n\n\n\n最后回到文章开头的那个问题：Handler.postDelay会阻塞线程吗？\n答案在[这里](http://www.dss886.com/android/2016/08/17/17-18)找到了\npostDelayed本身就是把一条消息推迟到相对时间多久之后。关键在Looper取出这条消息时，用的是\n> Message msg = queue.next();  // might block\n\n注释已经暗示了可能会阻塞，看下next方法做了什么:\n```java\n    Message next() {\n    .....省略\n        for (;;) {\n            if (nextPollTimeoutMillis != 0) {\n                Binder.flushPendingCommands();\n            }\n\n            nativePollOnce(ptr, nextPollTimeoutMillis);\n\n            synchronized (this) {\n                // Try to retrieve the next message.  Return if found.\n                final long now = SystemClock.uptimeMillis();\n                Message prevMsg = null;\n                Message msg = mMessages;\n                if (msg != null && msg.target == null) {\n                    // Stalled by a barrier.  Find the next asynchronous message in the queue.\n                    do {\n                        prevMsg = msg;\n                        msg = msg.next;\n                    } while (msg != null && !msg.isAsynchronous());\n                }\n                if (msg != null) {\n                    if (now < msg.when) {\n                        // Next message is not ready.  Set a timeout to wake up when it is ready.\n                        nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\n                    } else {\n                        // Got a message.\n                        mBlocked = false;\n                        if (prevMsg != null) {\n                            prevMsg.next = msg.next;\n                        } else {\n                            mMessages = msg.next;\n                        }\n                        msg.next = null;\n                        msg.markInUse();\n                        return msg;\n                    }\n                } else {\n                    // No more messages.\n                    nextPollTimeoutMillis = -1;\n                }\n\t....省略部分\n```\n首先进来 调用了nativePollOnce(ptr,nextPollTimeoutMillis);\n这是个native方法，类似于线程的wait方法，不过使用了Native的方法会更加精准。可以认为是用native方法让这个queue.next的方法耗时延长了，所以return时返回的Message也就满足合适的时间。\n往下看\n>  // Next message is not ready.  Set a timeout to wake up when it is ready.       \n>  nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\n\n所以确实是blocked了。但这并不意味着从postDelayed(r,10)开始，接下来的10ms就真的完全堵塞了(queue.next阻塞)\nPostDelayed最终会调用到enqueMessage方法，看一下:\n```java\n\n        synchronized (this) {\n            if (mQuitting) {\n                IllegalStateException e = new IllegalStateException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(TAG, e.getMessage(), e);\n                msg.recycle();\n                return false;\n            }\n\n            msg.markInUse();\n            msg.when = when;\n            Message p = mMessages;\n            boolean needWake;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                // Inserted within the middle of the queue.  Usually we don't have to wake\n                // up the event queue unless there is a barrier at the head of the queue\n                // and the message is the earliest asynchronous message in the queue.\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n\n            // We can assume mPtr != 0 because mQuitting is false.\n            if (needWake) {\n                nativeWake(mPtr);\n            }\n        }\n```\n注意nativeWake方法，在满足一定情况下会唤醒线程\n总结一下就是postDelayed确实调用了阻塞线程的方法，但一旦消息队列前面插入了可执行的message，会调用唤醒线程的方法。这些大部分在MessageQueue这个class中，看一下基本都能明白。\n\n#### 回顾一下整个过程:\n\n主线程作为一个Thread，持有一个Looper对象，Looper持有一个MessageQueue的消息队列，并一个一个地从中取出满足执行时间条件的Message，执行Messgae的callback或者交给Handler的handleMessage去处理。\n\n### Reference\n1. [Handler.postDelayed()是如何精确延迟指定时间的](http://www.dss886.com/android/2016/08/17/17-18)\n2. [How the Main Thread works](https://www.youtube.com/watch?v=aFGbv9Ih9qQ)\n","source":"_posts/2016-10-12-How-the-mainThread-work.md","raw":"---\ntitle: 主线程的工作原理\ndate: 2016-10-12 16:47:42\ntag: \n    Handler\n    Message\ncategories : Android\n---\n\n![](http://odzl05jxx.bkt.clouddn.com/writing%20code%20that%20nobody%20else%20can%20read.jpg)\n\n​\t今天突然找到这样一个问题: \"Handler的postDelayed会阻塞线程吗？\"。基于自己之前对于Handler的线程间通讯机制的理解，还是不能给出明确的答案。正好打算把一篇关于主线程的工作原理的文章写出来，顺带看下能否把这个问题从源码的角度解释清楚。<!--more-->\n\n### 1. 从线程（Thread）开始\n通常，一个Process会有一个主线程, 而在Android中，UI控件相关的方法和一些系统callback都会发生在主线程上(onResume,onCreate,onStartCommand,onDraw, etc)。 如果App中使用了多个Process，则每个Process都会有一个主线程，但这不是今天的重点。\nAndroid应用是如何启动的?\n启动一个应用时，系统会从Zygote Process fork出一个新的Process，最终走到ActivityThread 的main方法\n```java\n public static void main(String[] args) {\n //省略部分无关代码\n        Looper.prepareMainLooper();\n        ActivityThread thread = new ActivityThread();\n        thread.attach(false);\n        if (sMainThreadHandler == null) {\n            sMainThreadHandler = thread.getHandler();\n        }\n        // End of event ActivityThreadMain.\n        Looper.loop();\n        throw new RuntimeException(\"Main thread loop unexpectedly exited\");//从这里可以猜到Looper.loop方法会一直执行下去\n    }\n```\n看一下Looper.prepareMainLooper()方法：\n```java\n\n    /**\n     * Initialize the current thread as a looper, marking it as an\n     * application's main looper. The main looper for your application\n     * is created by the Android environment, so you should never need\n     * to call this function yourself.  See also: {@link #prepare()}\n     */\n    public static void prepareMainLooper() {\n        prepare(false);\n        synchronized (Looper.class) {\n            if (sMainLooper != null) {\n                throw new IllegalStateException(\"The main Looper has already been prepared.\");\n            }\n            sMainLooper = myLooper();\n        }\n    }\n```\n大致意思就是为当前Thread添加一个Looper。\nLooper.java是一个普通的class，其大致作用就是**为当前Thread维持一个message loop**，默认情况下一个Thread并没有一个Looper，要想添加一个，需要在该线程中调用Looper.prepare()，然后调用Looper.loop()方法即可让消息循环一直持续下去。大部分和message Loop的交互都是通过Handler这个类来进行的。例如\n```java\nclass LooperThread extends Thread {\n  *      public Handler mHandler;\n  *\n  *      public void run() {\n  *          Looper.prepare();\n  *\n  *          mHandler = new Handler() {\n  *              public void handleMessage(Message msg) {\n  *                  // 在这里处理消息\n  *              }\n  *          };\n  *\t\n  *          Looper.loop();\n    \t\t//这里面发送消息\n  *      }\n  *  }\n```\nLooper持有一个MessageQueue(消息队列)成员变量，消息循环时，Looper就不断地从消息队列中拿出消息进行处理。\n下面来看Looper.loop()方法里所做的事：\n```java\n  /** 删除了部分不相关的代码\n     * Run the message queue in this thread. Be sure to call\n     * {@link #quit()} to end the loop.\n     */\n    public static void loop() {\n        final Looper me = myLooper();//返回当前线程中对应的Looper，看看下面的Exception就知道了\n        if (me == null) {\n            throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\n        }\n        final MessageQueue queue = me.mQueue;\n        for (;;) {\n            Message msg = queue.next(); // might block\n            if (msg == null) {\n                // No message indicates that the message queue is quitting.\n                return;\n            }\n            try {\n                msg.target.dispatchMessage(msg);\n            } finally {\n               ....省略\n            }\n        }\n    }\n```\n简单解释一下，也就是从消息队列中取出新的消息(msg)。交给msg.target.dispatchMessage(msg)\n这个trarget是个Handler\n来看下Handler里面的dispatchMessage方法\n```java\n /**\n     * Handle system messages here.\n     */\n    public void dispatchMessage(Message msg) {\n        if (msg.callback != null) {\n            handleCallback(msg);\n        } else {\n            if (mCallback != null) {\n                if (mCallback.handleMessage(msg)) {\n                    return;\n                }\n            }\n            handleMessage(msg);\n        }\n    }\n```\n很明显是一个either or 的过程：\nMessage这个类里面有个Runnable callback，如果这个message有callback的话，就执行这个runnable，否则执行handler.callBack.handleMessage。也就是我们经常用的\n```java\nHandler handler = new Handler(){\n            @Override\n            public void handleMessage(Message msg) {\n                super.handleMessage(msg);\n            }\n        };\n```\n这种内部类的形式了\n需要注意的是，Message最好不要用new，使用obtain方法获得，使用release方法释放，这里面有一个消息池的概念，我也不太理解。\nMessageQueue中没有太多的公共方法，其中next()方法会返回\n> message that should be processed. Will not return message that will be processed at future times.\n> Message有一个long类型的变量Message.when，指的是这条消息最早可以被执行的时间，这个时间是基于SystemClock.uptimeMills()的。所以如果消息队列中没有一条message到达自己的可执行时间, 这个next()方法就会一直block。值得注意的是SystemClock.uptimeMills是基于CPU活动时间的，如果cpu处于sleep状态，这个sleep时间是不算的。所以如果你postDelayed了10s，假设cpu5s后开始休眠，10s后醒来，睡眠的这段时间是不算的。所以真正执行的时间可能还会往后延迟。\n\n### 2. Handler\nHandler基本上就做两件事\n1. add message to the messageQueue of the Looper it's associated with\n- post()  //把一条消息添加到所有可以被执行的消息的最后面，但在还没到时间的消息的前面\n- postDelayed()/postAtTime() //一个相对时间，一个绝对时间\n- postAtFrontOfQueue() // @piwai 插队行为，不要用\n2. Handle message when this message doesn't have callback\n   Handler的构造方法有7个,初始化时需要获得一个Looper\n   常用的Handler handler = new Handler() 会创建一个基于当前线程的Looper的Handler,如果当前线程没有调用Looper.Prepare，会抛出一个异常，这些在源代码里都能看到。\n   一些好用的构造函数\n> Handler (Looper.getMainLooper()) //往主线程的Looper的消息队列里发消息\n> Hanlder(Looper.myLooper()) //往当前线程Looper的消息队列里添加消息\n\n### Choreographer\n使用Android studio时，经常会在Logcat里看到这样的 info:\n> Skipped 60 frames! The application may be doing too much work on its main thread\n\n这段log出自Chreographer ，大意就是主线程上做的事太多或者做了太多不该在主线程上做的事。至于为什么不要在主线程上做太多的事，来看看主线程都有哪些工作:\nSystem Events , Input Events ,Application callback ,Services, Alarm ,UI Drawing....另外，当屏幕内容发生变化，或者在Animation运行中，系统将会尝试每隔16ms来Draw a Frame。而这部分工作是由Choregrapher来完成的，而其内部是通过一个Handler来进行Frame更新的。\n\n```java\nFrameHandler mHandler = new FrameHandler(Looper.myLooper());\nMessage msg = mHandler.obtainMessage(MSG_DO_FRAME);\nmsg.setAsynchronous(true);\nmHandler.sendMessageAtTime(msg,nextFrameTime)\n\n private final class FrameHandler extends Handler {\n        public FrameHandler(Looper looper) {\n            super(looper);\n        }\n\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_DO_FRAME:\n                    doFrame(System.nanoTime(), 0);\n                    break;\n                case MSG_DO_SCHEDULE_VSYNC:\n                    doScheduleVsync();\n                    break;\n                case MSG_DO_SCHEDULE_CALLBACK:\n                    doScheduleCallback(msg.arg1);\n                    break;\n            }\n        }\n    }\n```\n假设你在onMeasure,onLayout,onDraw这些方法中耽误主线程太多时间，Choregrapher将不能及时的更新Frame，哪怕你只耽误了1ms，系统也只能在16ms(大约)之后才能更新下一Frame。\n\n### 3. 为了在开发中发现不应该在主线程中进行的操作(IO，网络)，可以使用StrictMode：\n```java\nif (BuildConfig.DEBUG) {\n            StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()\n                    .detectDiskReads()\n                    .detectDiskWrites()\n                    .detectNetwork()   // or .detectAll() for all detectable problems\n                    .penaltyLog()\n                    .build());\n            StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder()\n                    .detectLeakedSqlLiteObjects()\n                    .detectLeakedClosableObjects()\n                    .penaltyLog()\n                    .penaltyDeath()\n                    .build());\n        }\n```\n### 4 .Activity LifeCycle Events\n- Activity LifeCycle Events(startActivity(), finishi()) go out of your process through Binder IPC to the ActivityManager //有时候startActivity启动的Activity不是自己Process的,比如调用系统相机这种\n- Then back on to your main queue in the form of lifeCycle callbacks(onCreate(),onDestory() et_al) // 异步，异步！\n\n\n\n最后回到文章开头的那个问题：Handler.postDelay会阻塞线程吗？\n答案在[这里](http://www.dss886.com/android/2016/08/17/17-18)找到了\npostDelayed本身就是把一条消息推迟到相对时间多久之后。关键在Looper取出这条消息时，用的是\n> Message msg = queue.next();  // might block\n\n注释已经暗示了可能会阻塞，看下next方法做了什么:\n```java\n    Message next() {\n    .....省略\n        for (;;) {\n            if (nextPollTimeoutMillis != 0) {\n                Binder.flushPendingCommands();\n            }\n\n            nativePollOnce(ptr, nextPollTimeoutMillis);\n\n            synchronized (this) {\n                // Try to retrieve the next message.  Return if found.\n                final long now = SystemClock.uptimeMillis();\n                Message prevMsg = null;\n                Message msg = mMessages;\n                if (msg != null && msg.target == null) {\n                    // Stalled by a barrier.  Find the next asynchronous message in the queue.\n                    do {\n                        prevMsg = msg;\n                        msg = msg.next;\n                    } while (msg != null && !msg.isAsynchronous());\n                }\n                if (msg != null) {\n                    if (now < msg.when) {\n                        // Next message is not ready.  Set a timeout to wake up when it is ready.\n                        nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\n                    } else {\n                        // Got a message.\n                        mBlocked = false;\n                        if (prevMsg != null) {\n                            prevMsg.next = msg.next;\n                        } else {\n                            mMessages = msg.next;\n                        }\n                        msg.next = null;\n                        msg.markInUse();\n                        return msg;\n                    }\n                } else {\n                    // No more messages.\n                    nextPollTimeoutMillis = -1;\n                }\n\t....省略部分\n```\n首先进来 调用了nativePollOnce(ptr,nextPollTimeoutMillis);\n这是个native方法，类似于线程的wait方法，不过使用了Native的方法会更加精准。可以认为是用native方法让这个queue.next的方法耗时延长了，所以return时返回的Message也就满足合适的时间。\n往下看\n>  // Next message is not ready.  Set a timeout to wake up when it is ready.       \n>  nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\n\n所以确实是blocked了。但这并不意味着从postDelayed(r,10)开始，接下来的10ms就真的完全堵塞了(queue.next阻塞)\nPostDelayed最终会调用到enqueMessage方法，看一下:\n```java\n\n        synchronized (this) {\n            if (mQuitting) {\n                IllegalStateException e = new IllegalStateException(\n                        msg.target + \" sending message to a Handler on a dead thread\");\n                Log.w(TAG, e.getMessage(), e);\n                msg.recycle();\n                return false;\n            }\n\n            msg.markInUse();\n            msg.when = when;\n            Message p = mMessages;\n            boolean needWake;\n            if (p == null || when == 0 || when < p.when) {\n                // New head, wake up the event queue if blocked.\n                msg.next = p;\n                mMessages = msg;\n                needWake = mBlocked;\n            } else {\n                // Inserted within the middle of the queue.  Usually we don't have to wake\n                // up the event queue unless there is a barrier at the head of the queue\n                // and the message is the earliest asynchronous message in the queue.\n                needWake = mBlocked && p.target == null && msg.isAsynchronous();\n                Message prev;\n                for (;;) {\n                    prev = p;\n                    p = p.next;\n                    if (p == null || when < p.when) {\n                        break;\n                    }\n                    if (needWake && p.isAsynchronous()) {\n                        needWake = false;\n                    }\n                }\n                msg.next = p; // invariant: p == prev.next\n                prev.next = msg;\n            }\n\n            // We can assume mPtr != 0 because mQuitting is false.\n            if (needWake) {\n                nativeWake(mPtr);\n            }\n        }\n```\n注意nativeWake方法，在满足一定情况下会唤醒线程\n总结一下就是postDelayed确实调用了阻塞线程的方法，但一旦消息队列前面插入了可执行的message，会调用唤醒线程的方法。这些大部分在MessageQueue这个class中，看一下基本都能明白。\n\n#### 回顾一下整个过程:\n\n主线程作为一个Thread，持有一个Looper对象，Looper持有一个MessageQueue的消息队列，并一个一个地从中取出满足执行时间条件的Message，执行Messgae的callback或者交给Handler的handleMessage去处理。\n\n### Reference\n1. [Handler.postDelayed()是如何精确延迟指定时间的](http://www.dss886.com/android/2016/08/17/17-18)\n2. [How the Main Thread works](https://www.youtube.com/watch?v=aFGbv9Ih9qQ)\n","slug":"2016-10-12-How-the-mainThread-work","published":1,"updated":"2016-10-13T07:44:51.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzkw00007gvri14ca6kv","content":"<p><img src=\"http://odzl05jxx.bkt.clouddn.com/writing%20code%20that%20nobody%20else%20can%20read.jpg\" alt=\"\"></p>\n<p>​    今天突然找到这样一个问题: “Handler的postDelayed会阻塞线程吗？”。基于自己之前对于Handler的线程间通讯机制的理解，还是不能给出明确的答案。正好打算把一篇关于主线程的工作原理的文章写出来，顺带看下能否把这个问题从源码的角度解释清楚。<a id=\"more\"></a></p>\n<h3 id=\"1-从线程（Thread）开始\"><a href=\"#1-从线程（Thread）开始\" class=\"headerlink\" title=\"1. 从线程（Thread）开始\"></a>1. 从线程（Thread）开始</h3><p>通常，一个Process会有一个主线程, 而在Android中，UI控件相关的方法和一些系统callback都会发生在主线程上(onResume,onCreate,onStartCommand,onDraw, etc)。 如果App中使用了多个Process，则每个Process都会有一个主线程，但这不是今天的重点。<br>Android应用是如何启动的?<br>启动一个应用时，系统会从Zygote Process fork出一个新的Process，最终走到ActivityThread 的main方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//省略部分无关代码</span></div><div class=\"line\">       Looper.prepareMainLooper();</div><div class=\"line\">       ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">       thread.attach(<span class=\"keyword\">false</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           sMainThreadHandler = thread.getHandler();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// End of event ActivityThreadMain.</span></div><div class=\"line\">       Looper.loop();</div><div class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);<span class=\"comment\">//从这里可以猜到Looper.loop方法会一直执行下去</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>看一下Looper.prepareMainLooper()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Initialize the current thread as a looper, marking it as an</div><div class=\"line\"> * application's main looper. The main looper for your application</div><div class=\"line\"> * is created by the Android environment, so you should never need</div><div class=\"line\"> * to call this function yourself.  See also: &#123;<span class=\"doctag\">@link</span> #prepare()&#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareMainLooper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    prepare(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (Looper.class) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sMainLooper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The main Looper has already been prepared.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sMainLooper = myLooper();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大致意思就是为当前Thread添加一个Looper。<br>Looper.java是一个普通的class，其大致作用就是<strong>为当前Thread维持一个message loop</strong>，默认情况下一个Thread并没有一个Looper，要想添加一个，需要在该线程中调用Looper.prepare()，然后调用Looper.loop()方法即可让消息循环一直持续下去。大部分和message Loop的交互都是通过Handler这个类来进行的。例如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LooperThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">  *      <span class=\"keyword\">public</span> Handler mHandler;</div><div class=\"line\">  *</div><div class=\"line\">  *      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  *          Looper.prepare();</div><div class=\"line\">  *</div><div class=\"line\">  *          mHandler = <span class=\"keyword\">new</span> Handler() &#123;</div><div class=\"line\">  *              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">  *                  <span class=\"comment\">// 在这里处理消息</span></div><div class=\"line\">  *              &#125;</div><div class=\"line\">  *          &#125;;</div><div class=\"line\">  *\t</div><div class=\"line\">  *          Looper.loop();</div><div class=\"line\">    \t\t<span class=\"comment\">//这里面发送消息</span></div><div class=\"line\">  *      &#125;</div><div class=\"line\">  *  &#125;</div></pre></td></tr></table></figure></p>\n<p>Looper持有一个MessageQueue(消息队列)成员变量，消息循环时，Looper就不断地从消息队列中拿出消息进行处理。<br>下面来看Looper.loop()方法里所做的事：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** 删除了部分不相关的代码</span></div><div class=\"line\">   * Run the message queue in this thread. Be sure to call</div><div class=\"line\">   * &#123;<span class=\"doctag\">@link</span> #quit()&#125; to end the loop.</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> Looper me = myLooper();<span class=\"comment\">//返回当前线程中对应的Looper，看看下面的Exception就知道了</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\">      <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">          Message msg = queue.next(); <span class=\"comment\">// might block</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              msg.target.dispatchMessage(msg);</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">             ....省略</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>简单解释一下，也就是从消息队列中取出新的消息(msg)。交给msg.target.dispatchMessage(msg)<br>这个trarget是个Handler<br>来看下Handler里面的dispatchMessage方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * Handle system messages here.</div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           handleCallback(msg);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                   <span class=\"keyword\">return</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           handleMessage(msg);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>很明显是一个either or 的过程：<br>Message这个类里面有个Runnable callback，如果这个message有callback的话，就执行这个runnable，否则执行handler.callBack.handleMessage。也就是我们经常用的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler handler = <span class=\"keyword\">new</span> Handler()&#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure></p>\n<p>这种内部类的形式了<br>需要注意的是，Message最好不要用new，使用obtain方法获得，使用release方法释放，这里面有一个消息池的概念，我也不太理解。<br>MessageQueue中没有太多的公共方法，其中next()方法会返回</p>\n<blockquote>\n<p>message that should be processed. Will not return message that will be processed at future times.<br>Message有一个long类型的变量Message.when，指的是这条消息最早可以被执行的时间，这个时间是基于SystemClock.uptimeMills()的。所以如果消息队列中没有一条message到达自己的可执行时间, 这个next()方法就会一直block。值得注意的是SystemClock.uptimeMills是基于CPU活动时间的，如果cpu处于sleep状态，这个sleep时间是不算的。所以如果你postDelayed了10s，假设cpu5s后开始休眠，10s后醒来，睡眠的这段时间是不算的。所以真正执行的时间可能还会往后延迟。</p>\n</blockquote>\n<h3 id=\"2-Handler\"><a href=\"#2-Handler\" class=\"headerlink\" title=\"2. Handler\"></a>2. Handler</h3><p>Handler基本上就做两件事</p>\n<ol>\n<li>add message to the messageQueue of the Looper it’s associated with</li>\n</ol>\n<ul>\n<li>post()  //把一条消息添加到所有可以被执行的消息的最后面，但在还没到时间的消息的前面</li>\n<li>postDelayed()/postAtTime() //一个相对时间，一个绝对时间</li>\n<li>postAtFrontOfQueue() // @piwai 插队行为，不要用</li>\n</ul>\n<ol>\n<li>Handle message when this message doesn’t have callback<br>Handler的构造方法有7个,初始化时需要获得一个Looper<br>常用的Handler handler = new Handler() 会创建一个基于当前线程的Looper的Handler,如果当前线程没有调用Looper.Prepare，会抛出一个异常，这些在源代码里都能看到。<br>一些好用的构造函数<blockquote>\n<p>Handler (Looper.getMainLooper()) //往主线程的Looper的消息队列里发消息<br>Hanlder(Looper.myLooper()) //往当前线程Looper的消息队列里添加消息</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Choreographer\"><a href=\"#Choreographer\" class=\"headerlink\" title=\"Choreographer\"></a>Choreographer</h3><p>使用Android studio时，经常会在Logcat里看到这样的 info:</p>\n<blockquote>\n<p>Skipped 60 frames! The application may be doing too much work on its main thread</p>\n</blockquote>\n<p>这段log出自Chreographer ，大意就是主线程上做的事太多或者做了太多不该在主线程上做的事。至于为什么不要在主线程上做太多的事，来看看主线程都有哪些工作:<br>System Events , Input Events ,Application callback ,Services, Alarm ,UI Drawing….另外，当屏幕内容发生变化，或者在Animation运行中，系统将会尝试每隔16ms来Draw a Frame。而这部分工作是由Choregrapher来完成的，而其内部是通过一个Handler来进行Frame更新的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">FrameHandler mHandler = <span class=\"keyword\">new</span> FrameHandler(Looper.myLooper());</div><div class=\"line\">Message msg = mHandler.obtainMessage(MSG_DO_FRAME);</div><div class=\"line\">msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">mHandler.sendMessageAtTime(msg,nextFrameTime)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrameHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FrameHandler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(looper);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> MSG_DO_FRAME:</div><div class=\"line\">                    doFrame(System.nanoTime(), <span class=\"number\">0</span>);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MSG_DO_SCHEDULE_VSYNC:</div><div class=\"line\">                    doScheduleVsync();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MSG_DO_SCHEDULE_CALLBACK:</div><div class=\"line\">                    doScheduleCallback(msg.arg1);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>假设你在onMeasure,onLayout,onDraw这些方法中耽误主线程太多时间，Choregrapher将不能及时的更新Frame，哪怕你只耽误了1ms，系统也只能在16ms(大约)之后才能更新下一Frame。</p>\n<h3 id=\"3-为了在开发中发现不应该在主线程中进行的操作-IO，网络-，可以使用StrictMode：\"><a href=\"#3-为了在开发中发现不应该在主线程中进行的操作-IO，网络-，可以使用StrictMode：\" class=\"headerlink\" title=\"3. 为了在开发中发现不应该在主线程中进行的操作(IO，网络)，可以使用StrictMode：\"></a>3. 为了在开发中发现不应该在主线程中进行的操作(IO，网络)，可以使用StrictMode：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (BuildConfig.DEBUG) &#123;</div><div class=\"line\">            StrictMode.setThreadPolicy(<span class=\"keyword\">new</span> StrictMode.ThreadPolicy.Builder()</div><div class=\"line\">                    .detectDiskReads()</div><div class=\"line\">                    .detectDiskWrites()</div><div class=\"line\">                    .detectNetwork()   <span class=\"comment\">// or .detectAll() for all detectable problems</span></div><div class=\"line\">                    .penaltyLog()</div><div class=\"line\">                    .build());</div><div class=\"line\">            StrictMode.setVmPolicy(<span class=\"keyword\">new</span> StrictMode.VmPolicy.Builder()</div><div class=\"line\">                    .detectLeakedSqlLiteObjects()</div><div class=\"line\">                    .detectLeakedClosableObjects()</div><div class=\"line\">                    .penaltyLog()</div><div class=\"line\">                    .penaltyDeath()</div><div class=\"line\">                    .build());</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-Activity-LifeCycle-Events\"><a href=\"#4-Activity-LifeCycle-Events\" class=\"headerlink\" title=\"4 .Activity LifeCycle Events\"></a>4 .Activity LifeCycle Events</h3><ul>\n<li>Activity LifeCycle Events(startActivity(), finishi()) go out of your process through Binder IPC to the ActivityManager //有时候startActivity启动的Activity不是自己Process的,比如调用系统相机这种</li>\n<li>Then back on to your main queue in the form of lifeCycle callbacks(onCreate(),onDestory() et_al) // 异步，异步！</li>\n</ul>\n<p>最后回到文章开头的那个问题：Handler.postDelay会阻塞线程吗？<br>答案在<a href=\"http://www.dss886.com/android/2016/08/17/17-18\" target=\"_blank\" rel=\"external\">这里</a>找到了<br>postDelayed本身就是把一条消息推迟到相对时间多久之后。关键在Looper取出这条消息时，用的是</p>\n<blockquote>\n<p>Message msg = queue.next();  // might block</p>\n</blockquote>\n<p>注释已经暗示了可能会阻塞，看下next方法做了什么:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"function\">Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   .....省略</div><div class=\"line\">       <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (nextPollTimeoutMillis != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               Binder.flushPendingCommands();</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">// Try to retrieve the next message.  Return if found.</span></div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">               Message prevMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\">               Message msg = mMessages;</div><div class=\"line\">               <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class=\"line\">                   do &#123;</div><div class=\"line\">                       prevMsg = msg;</div><div class=\"line\">                       msg = msg.next;</div><div class=\"line\">                   &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</div><div class=\"line\">                       <span class=\"comment\">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class=\"line\">                       nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                       <span class=\"comment\">// Got a message.</span></div><div class=\"line\">                       mBlocked = <span class=\"keyword\">false</span>;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                           prevMsg.next = msg.next;</div><div class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                           mMessages = msg.next;</div><div class=\"line\">                       &#125;</div><div class=\"line\">                       msg.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                       msg.markInUse();</div><div class=\"line\">                       <span class=\"keyword\">return</span> msg;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"comment\">// No more messages.</span></div><div class=\"line\">                   nextPollTimeoutMillis = -<span class=\"number\">1</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">....省略部分</div></pre></td></tr></table></figure></p>\n<p>首先进来 调用了nativePollOnce(ptr,nextPollTimeoutMillis);<br>这是个native方法，类似于线程的wait方法，不过使用了Native的方法会更加精准。可以认为是用native方法让这个queue.next的方法耗时延长了，所以return时返回的Message也就满足合适的时间。<br>往下看</p>\n<blockquote>\n<p> // Next message is not ready.  Set a timeout to wake up when it is ready.<br> nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);</p>\n</blockquote>\n<p>所以确实是blocked了。但这并不意味着从postDelayed(r,10)开始，接下来的10ms就真的完全堵塞了(queue.next阻塞)<br>PostDelayed最终会调用到enqueMessage方法，看一下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">        IllegalStateException e = <span class=\"keyword\">new</span> IllegalStateException(</div><div class=\"line\">                msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</div><div class=\"line\">        Log.w(TAG, e.getMessage(), e);</div><div class=\"line\">        msg.recycle();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    msg.markInUse();</div><div class=\"line\">    msg.when = when;</div><div class=\"line\">    Message p = mMessages;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">        <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">        msg.next = p;</div><div class=\"line\">        mMessages = msg;</div><div class=\"line\">        needWake = mBlocked;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">        <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">        <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">        needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">        Message prev;</div><div class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">            prev = p;</div><div class=\"line\">            p = p.next;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">                needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">        prev.next = msg;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (needWake) &#123;</div><div class=\"line\">        nativeWake(mPtr);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意nativeWake方法，在满足一定情况下会唤醒线程<br>总结一下就是postDelayed确实调用了阻塞线程的方法，但一旦消息队列前面插入了可执行的message，会调用唤醒线程的方法。这些大部分在MessageQueue这个class中，看一下基本都能明白。</p>\n<h4 id=\"回顾一下整个过程\"><a href=\"#回顾一下整个过程\" class=\"headerlink\" title=\"回顾一下整个过程:\"></a>回顾一下整个过程:</h4><p>主线程作为一个Thread，持有一个Looper对象，Looper持有一个MessageQueue的消息队列，并一个一个地从中取出满足执行时间条件的Message，执行Messgae的callback或者交给Handler的handleMessage去处理。</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"http://www.dss886.com/android/2016/08/17/17-18\" target=\"_blank\" rel=\"external\">Handler.postDelayed()是如何精确延迟指定时间的</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=aFGbv9Ih9qQ\" target=\"_blank\" rel=\"external\">How the Main Thread works</a></li>\n</ol>\n","excerpt":"<p><img src=\"http://odzl05jxx.bkt.clouddn.com/writing%20code%20that%20nobody%20else%20can%20read.jpg\" alt=\"\"></p>\n<p>​    今天突然找到这样一个问题: “Handler的postDelayed会阻塞线程吗？”。基于自己之前对于Handler的线程间通讯机制的理解，还是不能给出明确的答案。正好打算把一篇关于主线程的工作原理的文章写出来，顺带看下能否把这个问题从源码的角度解释清楚。","more":"</p>\n<h3 id=\"1-从线程（Thread）开始\"><a href=\"#1-从线程（Thread）开始\" class=\"headerlink\" title=\"1. 从线程（Thread）开始\"></a>1. 从线程（Thread）开始</h3><p>通常，一个Process会有一个主线程, 而在Android中，UI控件相关的方法和一些系统callback都会发生在主线程上(onResume,onCreate,onStartCommand,onDraw, etc)。 如果App中使用了多个Process，则每个Process都会有一个主线程，但这不是今天的重点。<br>Android应用是如何启动的?<br>启动一个应用时，系统会从Zygote Process fork出一个新的Process，最终走到ActivityThread 的main方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//省略部分无关代码</span></div><div class=\"line\">       Looper.prepareMainLooper();</div><div class=\"line\">       ActivityThread thread = <span class=\"keyword\">new</span> ActivityThread();</div><div class=\"line\">       thread.attach(<span class=\"keyword\">false</span>);</div><div class=\"line\">       <span class=\"keyword\">if</span> (sMainThreadHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           sMainThreadHandler = thread.getHandler();</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// End of event ActivityThreadMain.</span></div><div class=\"line\">       Looper.loop();</div><div class=\"line\">       <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"Main thread loop unexpectedly exited\"</span>);<span class=\"comment\">//从这里可以猜到Looper.loop方法会一直执行下去</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>看一下Looper.prepareMainLooper()方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Initialize the current thread as a looper, marking it as an</div><div class=\"line\"> * application's main looper. The main looper for your application</div><div class=\"line\"> * is created by the Android environment, so you should never need</div><div class=\"line\"> * to call this function yourself.  See also: &#123;<span class=\"doctag\">@link</span> #prepare()&#125;</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">prepareMainLooper</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    prepare(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (Looper.class) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (sMainLooper != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"The main Looper has already been prepared.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        sMainLooper = myLooper();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大致意思就是为当前Thread添加一个Looper。<br>Looper.java是一个普通的class，其大致作用就是<strong>为当前Thread维持一个message loop</strong>，默认情况下一个Thread并没有一个Looper，要想添加一个，需要在该线程中调用Looper.prepare()，然后调用Looper.loop()方法即可让消息循环一直持续下去。大部分和message Loop的交互都是通过Handler这个类来进行的。例如<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LooperThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</div><div class=\"line\">  *      <span class=\"keyword\">public</span> Handler mHandler;</div><div class=\"line\">  *</div><div class=\"line\">  *      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">  *          Looper.prepare();</div><div class=\"line\">  *</div><div class=\"line\">  *          mHandler = <span class=\"keyword\">new</span> Handler() &#123;</div><div class=\"line\">  *              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">  *                  <span class=\"comment\">// 在这里处理消息</span></div><div class=\"line\">  *              &#125;</div><div class=\"line\">  *          &#125;;</div><div class=\"line\">  *\t</div><div class=\"line\">  *          Looper.loop();</div><div class=\"line\">    \t\t<span class=\"comment\">//这里面发送消息</span></div><div class=\"line\">  *      &#125;</div><div class=\"line\">  *  &#125;</div></pre></td></tr></table></figure></p>\n<p>Looper持有一个MessageQueue(消息队列)成员变量，消息循环时，Looper就不断地从消息队列中拿出消息进行处理。<br>下面来看Looper.loop()方法里所做的事：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** 删除了部分不相关的代码</div><div class=\"line\">   * Run the message queue in this thread. Be sure to call</div><div class=\"line\">   * &#123;<span class=\"doctag\">@link</span> #quit()&#125; to end the loop.</div><div class=\"line\">   */</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">loop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> Looper me = myLooper();<span class=\"comment\">//返回当前线程中对应的Looper，看看下面的Exception就知道了</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (me == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"No Looper; Looper.prepare() wasn't called on this thread.\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">final</span> MessageQueue queue = me.mQueue;</div><div class=\"line\">      <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">          Message msg = queue.next(); <span class=\"comment\">// might block</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              <span class=\"comment\">// No message indicates that the message queue is quitting.</span></div><div class=\"line\">              <span class=\"keyword\">return</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">              msg.target.dispatchMessage(msg);</div><div class=\"line\">          &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">             ....省略</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>简单解释一下，也就是从消息队列中取出新的消息(msg)。交给msg.target.dispatchMessage(msg)<br>这个trarget是个Handler<br>来看下Handler里面的dispatchMessage方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">    * Handle system messages here.</div><div class=\"line\">    */</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (msg.callback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">           handleCallback(msg);</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (mCallback != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class=\"line\">                   <span class=\"keyword\">return</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           handleMessage(msg);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>很明显是一个either or 的过程：<br>Message这个类里面有个Runnable callback，如果这个message有callback的话，就执行这个runnable，否则执行handler.callBack.handleMessage。也就是我们经常用的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Handler handler = <span class=\"keyword\">new</span> Handler()&#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure></p>\n<p>这种内部类的形式了<br>需要注意的是，Message最好不要用new，使用obtain方法获得，使用release方法释放，这里面有一个消息池的概念，我也不太理解。<br>MessageQueue中没有太多的公共方法，其中next()方法会返回</p>\n<blockquote>\n<p>message that should be processed. Will not return message that will be processed at future times.<br>Message有一个long类型的变量Message.when，指的是这条消息最早可以被执行的时间，这个时间是基于SystemClock.uptimeMills()的。所以如果消息队列中没有一条message到达自己的可执行时间, 这个next()方法就会一直block。值得注意的是SystemClock.uptimeMills是基于CPU活动时间的，如果cpu处于sleep状态，这个sleep时间是不算的。所以如果你postDelayed了10s，假设cpu5s后开始休眠，10s后醒来，睡眠的这段时间是不算的。所以真正执行的时间可能还会往后延迟。</p>\n</blockquote>\n<h3 id=\"2-Handler\"><a href=\"#2-Handler\" class=\"headerlink\" title=\"2. Handler\"></a>2. Handler</h3><p>Handler基本上就做两件事</p>\n<ol>\n<li>add message to the messageQueue of the Looper it’s associated with</li>\n</ol>\n<ul>\n<li>post()  //把一条消息添加到所有可以被执行的消息的最后面，但在还没到时间的消息的前面</li>\n<li>postDelayed()/postAtTime() //一个相对时间，一个绝对时间</li>\n<li>postAtFrontOfQueue() // @piwai 插队行为，不要用</li>\n</ul>\n<ol>\n<li>Handle message when this message doesn’t have callback<br>Handler的构造方法有7个,初始化时需要获得一个Looper<br>常用的Handler handler = new Handler() 会创建一个基于当前线程的Looper的Handler,如果当前线程没有调用Looper.Prepare，会抛出一个异常，这些在源代码里都能看到。<br>一些好用的构造函数<blockquote>\n<p>Handler (Looper.getMainLooper()) //往主线程的Looper的消息队列里发消息<br>Hanlder(Looper.myLooper()) //往当前线程Looper的消息队列里添加消息</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"Choreographer\"><a href=\"#Choreographer\" class=\"headerlink\" title=\"Choreographer\"></a>Choreographer</h3><p>使用Android studio时，经常会在Logcat里看到这样的 info:</p>\n<blockquote>\n<p>Skipped 60 frames! The application may be doing too much work on its main thread</p>\n</blockquote>\n<p>这段log出自Chreographer ，大意就是主线程上做的事太多或者做了太多不该在主线程上做的事。至于为什么不要在主线程上做太多的事，来看看主线程都有哪些工作:<br>System Events , Input Events ,Application callback ,Services, Alarm ,UI Drawing….另外，当屏幕内容发生变化，或者在Animation运行中，系统将会尝试每隔16ms来Draw a Frame。而这部分工作是由Choregrapher来完成的，而其内部是通过一个Handler来进行Frame更新的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">FrameHandler mHandler = <span class=\"keyword\">new</span> FrameHandler(Looper.myLooper());</div><div class=\"line\">Message msg = mHandler.obtainMessage(MSG_DO_FRAME);</div><div class=\"line\">msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">mHandler.sendMessageAtTime(msg,nextFrameTime)</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrameHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FrameHandler</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(looper);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> MSG_DO_FRAME:</div><div class=\"line\">                    doFrame(System.nanoTime(), <span class=\"number\">0</span>);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MSG_DO_SCHEDULE_VSYNC:</div><div class=\"line\">                    doScheduleVsync();</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MSG_DO_SCHEDULE_CALLBACK:</div><div class=\"line\">                    doScheduleCallback(msg.arg1);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>假设你在onMeasure,onLayout,onDraw这些方法中耽误主线程太多时间，Choregrapher将不能及时的更新Frame，哪怕你只耽误了1ms，系统也只能在16ms(大约)之后才能更新下一Frame。</p>\n<h3 id=\"3-为了在开发中发现不应该在主线程中进行的操作-IO，网络-，可以使用StrictMode：\"><a href=\"#3-为了在开发中发现不应该在主线程中进行的操作-IO，网络-，可以使用StrictMode：\" class=\"headerlink\" title=\"3. 为了在开发中发现不应该在主线程中进行的操作(IO，网络)，可以使用StrictMode：\"></a>3. 为了在开发中发现不应该在主线程中进行的操作(IO，网络)，可以使用StrictMode：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (BuildConfig.DEBUG) &#123;</div><div class=\"line\">            StrictMode.setThreadPolicy(<span class=\"keyword\">new</span> StrictMode.ThreadPolicy.Builder()</div><div class=\"line\">                    .detectDiskReads()</div><div class=\"line\">                    .detectDiskWrites()</div><div class=\"line\">                    .detectNetwork()   <span class=\"comment\">// or .detectAll() for all detectable problems</span></div><div class=\"line\">                    .penaltyLog()</div><div class=\"line\">                    .build());</div><div class=\"line\">            StrictMode.setVmPolicy(<span class=\"keyword\">new</span> StrictMode.VmPolicy.Builder()</div><div class=\"line\">                    .detectLeakedSqlLiteObjects()</div><div class=\"line\">                    .detectLeakedClosableObjects()</div><div class=\"line\">                    .penaltyLog()</div><div class=\"line\">                    .penaltyDeath()</div><div class=\"line\">                    .build());</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-Activity-LifeCycle-Events\"><a href=\"#4-Activity-LifeCycle-Events\" class=\"headerlink\" title=\"4 .Activity LifeCycle Events\"></a>4 .Activity LifeCycle Events</h3><ul>\n<li>Activity LifeCycle Events(startActivity(), finishi()) go out of your process through Binder IPC to the ActivityManager //有时候startActivity启动的Activity不是自己Process的,比如调用系统相机这种</li>\n<li>Then back on to your main queue in the form of lifeCycle callbacks(onCreate(),onDestory() et_al) // 异步，异步！</li>\n</ul>\n<p>最后回到文章开头的那个问题：Handler.postDelay会阻塞线程吗？<br>答案在<a href=\"http://www.dss886.com/android/2016/08/17/17-18\">这里</a>找到了<br>postDelayed本身就是把一条消息推迟到相对时间多久之后。关键在Looper取出这条消息时，用的是</p>\n<blockquote>\n<p>Message msg = queue.next();  // might block</p>\n</blockquote>\n<p>注释已经暗示了可能会阻塞，看下next方法做了什么:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">   <span class=\"function\">Message <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">   .....省略</div><div class=\"line\">       <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (nextPollTimeoutMillis != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">               Binder.flushPendingCommands();</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">               <span class=\"comment\">// Try to retrieve the next message.  Return if found.</span></div><div class=\"line\">               <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">               Message prevMsg = <span class=\"keyword\">null</span>;</div><div class=\"line\">               Message msg = mMessages;</div><div class=\"line\">               <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; msg.target == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   <span class=\"comment\">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class=\"line\">                   do &#123;</div><div class=\"line\">                       prevMsg = msg;</div><div class=\"line\">                       msg = msg.next;</div><div class=\"line\">                   &#125; <span class=\"keyword\">while</span> (msg != <span class=\"keyword\">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class=\"line\">               &#125;</div><div class=\"line\">               <span class=\"keyword\">if</span> (msg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (now &lt; msg.when) &#123;</div><div class=\"line\">                       <span class=\"comment\">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class=\"line\">                       nextPollTimeoutMillis = (<span class=\"keyword\">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class=\"line\">                   &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                       <span class=\"comment\">// Got a message.</span></div><div class=\"line\">                       mBlocked = <span class=\"keyword\">false</span>;</div><div class=\"line\">                       <span class=\"keyword\">if</span> (prevMsg != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                           prevMsg.next = msg.next;</div><div class=\"line\">                       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                           mMessages = msg.next;</div><div class=\"line\">                       &#125;</div><div class=\"line\">                       msg.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                       msg.markInUse();</div><div class=\"line\">                       <span class=\"keyword\">return</span> msg;</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"comment\">// No more messages.</span></div><div class=\"line\">                   nextPollTimeoutMillis = -<span class=\"number\">1</span>;</div><div class=\"line\">               &#125;</div><div class=\"line\">....省略部分</div></pre></td></tr></table></figure></p>\n<p>首先进来 调用了nativePollOnce(ptr,nextPollTimeoutMillis);<br>这是个native方法，类似于线程的wait方法，不过使用了Native的方法会更加精准。可以认为是用native方法让这个queue.next的方法耗时延长了，所以return时返回的Message也就满足合适的时间。<br>往下看</p>\n<blockquote>\n<p> // Next message is not ready.  Set a timeout to wake up when it is ready.<br> nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);</p>\n</blockquote>\n<p>所以确实是blocked了。但这并不意味着从postDelayed(r,10)开始，接下来的10ms就真的完全堵塞了(queue.next阻塞)<br>PostDelayed最终会调用到enqueMessage方法，看一下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mQuitting) &#123;</div><div class=\"line\">        IllegalStateException e = <span class=\"keyword\">new</span> IllegalStateException(</div><div class=\"line\">                msg.target + <span class=\"string\">\" sending message to a Handler on a dead thread\"</span>);</div><div class=\"line\">        Log.w(TAG, e.getMessage(), e);</div><div class=\"line\">        msg.recycle();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    msg.markInUse();</div><div class=\"line\">    msg.when = when;</div><div class=\"line\">    Message p = mMessages;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> needWake;</div><div class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when == <span class=\"number\">0</span> || when &lt; p.when) &#123;</div><div class=\"line\">        <span class=\"comment\">// New head, wake up the event queue if blocked.</span></div><div class=\"line\">        msg.next = p;</div><div class=\"line\">        mMessages = msg;</div><div class=\"line\">        needWake = mBlocked;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class=\"line\">        <span class=\"comment\">// up the event queue unless there is a barrier at the head of the queue</span></div><div class=\"line\">        <span class=\"comment\">// and the message is the earliest asynchronous message in the queue.</span></div><div class=\"line\">        needWake = mBlocked &amp;&amp; p.target == <span class=\"keyword\">null</span> &amp;&amp; msg.isAsynchronous();</div><div class=\"line\">        Message prev;</div><div class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">            prev = p;</div><div class=\"line\">            p = p.next;</div><div class=\"line\">            <span class=\"keyword\">if</span> (p == <span class=\"keyword\">null</span> || when &lt; p.when) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class=\"line\">                needWake = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        msg.next = p; <span class=\"comment\">// invariant: p == prev.next</span></div><div class=\"line\">        prev.next = msg;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (needWake) &#123;</div><div class=\"line\">        nativeWake(mPtr);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注意nativeWake方法，在满足一定情况下会唤醒线程<br>总结一下就是postDelayed确实调用了阻塞线程的方法，但一旦消息队列前面插入了可执行的message，会调用唤醒线程的方法。这些大部分在MessageQueue这个class中，看一下基本都能明白。</p>\n<h4 id=\"回顾一下整个过程\"><a href=\"#回顾一下整个过程\" class=\"headerlink\" title=\"回顾一下整个过程:\"></a>回顾一下整个过程:</h4><p>主线程作为一个Thread，持有一个Looper对象，Looper持有一个MessageQueue的消息队列，并一个一个地从中取出满足执行时间条件的Message，执行Messgae的callback或者交给Handler的handleMessage去处理。</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"http://www.dss886.com/android/2016/08/17/17-18\">Handler.postDelayed()是如何精确延迟指定时间的</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=aFGbv9Ih9qQ\">How the Main Thread works</a></li>\n</ol>"},{"title":"安卓坐标系常用方法","date":"2016-10-13T10:17:02.000Z","_content":"记录一些Android系统坐标系的常用方法，因为日常开发中难免会碰到需要单独计算View系统坐标的情况。\n\n![](http://odzl05jxx.bkt.clouddn.com/minion.jpg?imageView2/2/w/400)\n<!--more-->\n\nScrollTo，ScrollBy，getVisibleRect这些方法平时想要用的时候总要去网上查找，这里记录下来，方便今后直接参考\n首先是一张很多人都见过的图\n![](http://odzl05jxx.bkt.clouddn.com/android_screen_coordinate_system.png?imageView2/2/w/500)\n中间的蓝色的点是TouchEvent发生时，获得的MotionEvent.getX()、getY()。\n### 1. 坐标原点和坐标轴方向\n坐标原点有两种，屏幕左上角（statusBar也包含其中）和父控件左上角\n坐标轴方向：X轴向右，Y轴向下，Z轴(5.0增加)向上。\n\n\n### 2. Left,Top,Right,Bottom\n而Top，left，bottom,down分别对应着其其相对于父控件的距离，由此可以计算得到View的宽度width = getRight()-getLeft() ,View的高度 height = getBottom()-getTop()\n而实际上view.getHeight()方法的实现也就是mBottom-mTop.\n\n\n### 3. X , Y\nX代表的是当前View的左上角那个点的横坐标，Y代表的是纵坐标。\nX = left + getTranslationX  \nY = Top + getTranslationY\n通常在动画中使用setTranslationX来实现偏移效果，注意，这是不会改变left的。在滑动过程中，x, y会随着改变。\n\n### 4. 几个跟Rect相关的\n获得的是当前View左上角距离屏幕左上角的位置，为此我专门测试了一下\n>  W/ViewAnimationActivity.java: [32 | onWindowFocusChanged]statusBarHeight = 75\n>  W/ViewAnimationActivity.java: [35 | onWindowFocusChanged]getLocationInWindow  x = 0 y = 75 \n>  W/ViewAnimationActivity.java: [38 | onWindowFocusChanged]getLocationOnScreen x = 0 y = 75\n可以看到返回的就是View左上角的坐标，一般情况下两者区别不重要，stackoverFlow上有[讨论](http://stackoverflow.com/questions/17672891/getlocationonscreen-vs-getlocationinwindow)\n\n```java\nView.getLocationInWindow(pos); //获取在当前window内的绝对坐标\nView.getLocationOnScreen(pos); //包括statusBar，以屏幕左上角为坐标原点\nView.getLocalVisibleRect()  \n//以view自身的左上角为坐标原点，这个很有用，\n//返回的坐标一定是(0,0,xxx,xxx)这样的，可以判断当前View是否完全可见\nView.getGlobalVisibleRect()  // 以屏幕左上角为坐标原点\n```\n以上四个方法在onCreate里面返回的值都是0，需要在Activity的onWindowFocusChanged(true)中去获得\n这里需要扯一点关于window的问题，根据大部分博客的介绍：DecorView是FrameLayout的子类，是View视图层级树的根节点。\n一般会有一个LinearLayout的child\n\n为此，我在setContentView里面放了一个CoordinateLayout,使用Hierarchy View截图的到这样的结果。\n图片有点大\n![](http://odzl05jxx.bkt.clouddn.com/view_hirearchy_1013.png)\n\n在ViewHirearchy中可以看到，Activity中View视图层级从上到下依次为：\n\n> PhoneWindow$DecorView（有三个child,分别是LinearLayout，View(id/statusBarBackground)和View(id/navigationBarBackground)）\n> LinearLayout\n> FrameLayout\n> FitWindowsLinearLayout\n> ContentFrameLayout(id/android.R.id.content) //这在开发过程中有时会用到\n> setContentView设置的view\n\n关于window，DecorWindow的文章网上有很多，仔细研究下会对理解View的测量机制有一定好处，这对于View的工作原理也能够更彻底的理解。\n[参考文章](http://blog.csdn.net/qibin0506/article/details/49245601)\n日常开发中，setContentView这个方法只是将我们自己写的activiy_main.xml布局文件inflate出来的view添加到\nandroid.R.id.content这个ViewGroup中，实践下来发现这是一个ContentFrameLayout的实例，它的child只有一个，就是我们通过setContentView添加的View\n\n### 5. 让View滑动起来\n> offsetLeftAndRight(int offset) //给left和right加上一个值，改变的是View的位置\n> offsetTopAndBottom(int offset) \n\n> scrollTo(int x,int y)  // 将View中的内容移动，坐标原点为parentView左上角，注意，参数为正，效果为反\n例如scrollTo(-100,0) 在手机上看效果是往右移动了\n\n> scrollBy(int x, int y)\n\nscrollBy的源码如下:\n```java\n  public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n```\n还有一些不常用的：\n```java\npublic void setScrollX(int value) {\n        scrollTo(value, mScrollY);\n    }\n```\n\n### 6. 改变LayoutParams的margin让View移动\n这是一种很生硬的方式，不常用\n```java\nMarginLayoutParams params = (MarginLayoutParams)mTextView.getLayoutParams(); //可能为null\nparams.leftMargin + = 100;\nmTextView.setLayoutParams();// 这里面调用了requestLayout\n```\n\n\n### 7.使用Animation让View动起来\n根据官方文档的[定义](https://developer.android.com/guide/topics/graphics/overview.html)Android中一共两种Animation: \n> Property Animation\n> View Animation(包括Tween animation, Frame animation)\n\n首先从package的位置来看\n属性动画都位于android.animation这个package下面，常见的如ObjectAnimator继承自ValueAnimator\nView动画则位于android.view.animation这个package下，常见的如TranslateA,AlphaAnimation等\n\nView Animation可以代码创建，也可以写在R.anim文件夹下,用法很简单\n```java\nImageView image = (ImageView) findViewById(R.id.image);\nAnimation hyperspaceJump = AnimationUtils.loadAnimation(this, R.anim.hyperspace_jump);\nimage.startAnimation(hyperspaceJump);\n```\n属性动画可以代码创建，也可以写在R.animator文件夹下,用法:\n```java\nAnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,\n    R.anim.property_animator);\nset.setTarget(myObject);\nset.start();\n```\n推荐使用ViewPropertyAnimator，这是一个位于android.view下面的class，感觉更像是一个Util,大部分的方法都是在API 12 ,API 14引入的，\n实际开发中推荐使用ViewCompat.animate() 返回一个ViewPropertyAnimator对象，省去了开发者版本判断的麻烦\n语法更为简单：\n```java\nViewCompat.animate(view).x(500).y(500).setDuration(5000).setInterpolator(new DecelaratorInterpolator());  //不需要调用start()\n```\n据说这种方式性能最好，Google官方强烈推荐,参考DevByte。\n另外，据说大部分Google的App使用的都是DecelaratorInterpolator，当然这跟设计有关。\n\n### 8.使用Scroller实现smoothScroll\nView有一个方法computeScroll(),复写，像这样就可以了\n```java\nScroller scroller = new Scroller(mContext);\n \n private void smoothScrollTo(int dstX, int dstY) {\n      int scrollX = getScrollX();\n      int delta = dstX - scrollX;\n      scroller.startScroll(scrollX, 0, delta, 0, 1000);\n      invalidate();\n }\n  \n @Override\n public void computeScroll() {\n     if (scroller.computeScrollOffset()) {\n         scrollTo(scroller.getCurrX(), scroller.getCurY());\n         postInvalidate();\n     }\n }\n```\n\n### 9. 补充几个好玩的函数\nView.canScrollVertically(int)\n```java\n public static boolean canChildScrollUp(View view) {\n        if (android.os.Build.VERSION.SDK_INT < 14) {\n            if (view instanceof AbsListView) {\n                final AbsListView absListView = (AbsListView) view;\n                return absListView.getChildCount() > 0\n                        && (absListView.getFirstVisiblePosition() > 0 || absListView.getChildAt(0)\n                        .getTop() < absListView.getPaddingTop());\n            } else {\n                return view.getScrollY() > 0;\n            }\n        } else {\n            return view.canScrollVertically(-1);\n        }\n    }\n```\n这段是我在秋百万的android-ultra-pulltorefresh里面找到的，想当初为了自己写下拉刷新，一遍一遍的打Log，最后甚至用上getVisibleRect才算搞定。\n其实很多东西前人已经帮我们整理好了。\n对了这东西在v4包里有ViewCompat.canScrollVertically，v4包除了方法数有点多(10k+好像)这点不好以外，一直都很好用\n附上supportLibrary各个包的方法数，如果对65536这个数字熟悉的话，还是会注意点的。\n![pic](http://odzl05jxx.bkt.clouddn.com/support_lib_methods_summary.jpg)\n\n\n\n### 总结\n- 使用getLocalVisibleRect可以判断一个view是否完全可见\n- scrollBy,setScrollX等内部都是调用了scrollTo方法，ScrollTo方法传参数与实际效果是相反的\n\n\n\n\n### Reference\n1. [Android应用坐标系统全面详解](http://blog.csdn.net/yanbober/article/details/50419117)\n2. ​[如何取得View的位置之View.getLocationInWindow()的小秘密](http://blog.csdn.net/imyfriend/article/details/8564781\n3. [详解实现Android中实现View滑动的几种方式](http://www.cnblogs.com/absfree/p/5352258.html)","source":"_posts/2016-10-13-Android-coordinate-System.md","raw":"---\ntitle: 安卓坐标系常用方法\ndate: 2016-10-13 18:17:02\ncategories: [技术]\ntags: [坐标,TouchEvent]\n---\n记录一些Android系统坐标系的常用方法，因为日常开发中难免会碰到需要单独计算View系统坐标的情况。\n\n![](http://odzl05jxx.bkt.clouddn.com/minion.jpg?imageView2/2/w/400)\n<!--more-->\n\nScrollTo，ScrollBy，getVisibleRect这些方法平时想要用的时候总要去网上查找，这里记录下来，方便今后直接参考\n首先是一张很多人都见过的图\n![](http://odzl05jxx.bkt.clouddn.com/android_screen_coordinate_system.png?imageView2/2/w/500)\n中间的蓝色的点是TouchEvent发生时，获得的MotionEvent.getX()、getY()。\n### 1. 坐标原点和坐标轴方向\n坐标原点有两种，屏幕左上角（statusBar也包含其中）和父控件左上角\n坐标轴方向：X轴向右，Y轴向下，Z轴(5.0增加)向上。\n\n\n### 2. Left,Top,Right,Bottom\n而Top，left，bottom,down分别对应着其其相对于父控件的距离，由此可以计算得到View的宽度width = getRight()-getLeft() ,View的高度 height = getBottom()-getTop()\n而实际上view.getHeight()方法的实现也就是mBottom-mTop.\n\n\n### 3. X , Y\nX代表的是当前View的左上角那个点的横坐标，Y代表的是纵坐标。\nX = left + getTranslationX  \nY = Top + getTranslationY\n通常在动画中使用setTranslationX来实现偏移效果，注意，这是不会改变left的。在滑动过程中，x, y会随着改变。\n\n### 4. 几个跟Rect相关的\n获得的是当前View左上角距离屏幕左上角的位置，为此我专门测试了一下\n>  W/ViewAnimationActivity.java: [32 | onWindowFocusChanged]statusBarHeight = 75\n>  W/ViewAnimationActivity.java: [35 | onWindowFocusChanged]getLocationInWindow  x = 0 y = 75 \n>  W/ViewAnimationActivity.java: [38 | onWindowFocusChanged]getLocationOnScreen x = 0 y = 75\n可以看到返回的就是View左上角的坐标，一般情况下两者区别不重要，stackoverFlow上有[讨论](http://stackoverflow.com/questions/17672891/getlocationonscreen-vs-getlocationinwindow)\n\n```java\nView.getLocationInWindow(pos); //获取在当前window内的绝对坐标\nView.getLocationOnScreen(pos); //包括statusBar，以屏幕左上角为坐标原点\nView.getLocalVisibleRect()  \n//以view自身的左上角为坐标原点，这个很有用，\n//返回的坐标一定是(0,0,xxx,xxx)这样的，可以判断当前View是否完全可见\nView.getGlobalVisibleRect()  // 以屏幕左上角为坐标原点\n```\n以上四个方法在onCreate里面返回的值都是0，需要在Activity的onWindowFocusChanged(true)中去获得\n这里需要扯一点关于window的问题，根据大部分博客的介绍：DecorView是FrameLayout的子类，是View视图层级树的根节点。\n一般会有一个LinearLayout的child\n\n为此，我在setContentView里面放了一个CoordinateLayout,使用Hierarchy View截图的到这样的结果。\n图片有点大\n![](http://odzl05jxx.bkt.clouddn.com/view_hirearchy_1013.png)\n\n在ViewHirearchy中可以看到，Activity中View视图层级从上到下依次为：\n\n> PhoneWindow$DecorView（有三个child,分别是LinearLayout，View(id/statusBarBackground)和View(id/navigationBarBackground)）\n> LinearLayout\n> FrameLayout\n> FitWindowsLinearLayout\n> ContentFrameLayout(id/android.R.id.content) //这在开发过程中有时会用到\n> setContentView设置的view\n\n关于window，DecorWindow的文章网上有很多，仔细研究下会对理解View的测量机制有一定好处，这对于View的工作原理也能够更彻底的理解。\n[参考文章](http://blog.csdn.net/qibin0506/article/details/49245601)\n日常开发中，setContentView这个方法只是将我们自己写的activiy_main.xml布局文件inflate出来的view添加到\nandroid.R.id.content这个ViewGroup中，实践下来发现这是一个ContentFrameLayout的实例，它的child只有一个，就是我们通过setContentView添加的View\n\n### 5. 让View滑动起来\n> offsetLeftAndRight(int offset) //给left和right加上一个值，改变的是View的位置\n> offsetTopAndBottom(int offset) \n\n> scrollTo(int x,int y)  // 将View中的内容移动，坐标原点为parentView左上角，注意，参数为正，效果为反\n例如scrollTo(-100,0) 在手机上看效果是往右移动了\n\n> scrollBy(int x, int y)\n\nscrollBy的源码如下:\n```java\n  public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n```\n还有一些不常用的：\n```java\npublic void setScrollX(int value) {\n        scrollTo(value, mScrollY);\n    }\n```\n\n### 6. 改变LayoutParams的margin让View移动\n这是一种很生硬的方式，不常用\n```java\nMarginLayoutParams params = (MarginLayoutParams)mTextView.getLayoutParams(); //可能为null\nparams.leftMargin + = 100;\nmTextView.setLayoutParams();// 这里面调用了requestLayout\n```\n\n\n### 7.使用Animation让View动起来\n根据官方文档的[定义](https://developer.android.com/guide/topics/graphics/overview.html)Android中一共两种Animation: \n> Property Animation\n> View Animation(包括Tween animation, Frame animation)\n\n首先从package的位置来看\n属性动画都位于android.animation这个package下面，常见的如ObjectAnimator继承自ValueAnimator\nView动画则位于android.view.animation这个package下，常见的如TranslateA,AlphaAnimation等\n\nView Animation可以代码创建，也可以写在R.anim文件夹下,用法很简单\n```java\nImageView image = (ImageView) findViewById(R.id.image);\nAnimation hyperspaceJump = AnimationUtils.loadAnimation(this, R.anim.hyperspace_jump);\nimage.startAnimation(hyperspaceJump);\n```\n属性动画可以代码创建，也可以写在R.animator文件夹下,用法:\n```java\nAnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,\n    R.anim.property_animator);\nset.setTarget(myObject);\nset.start();\n```\n推荐使用ViewPropertyAnimator，这是一个位于android.view下面的class，感觉更像是一个Util,大部分的方法都是在API 12 ,API 14引入的，\n实际开发中推荐使用ViewCompat.animate() 返回一个ViewPropertyAnimator对象，省去了开发者版本判断的麻烦\n语法更为简单：\n```java\nViewCompat.animate(view).x(500).y(500).setDuration(5000).setInterpolator(new DecelaratorInterpolator());  //不需要调用start()\n```\n据说这种方式性能最好，Google官方强烈推荐,参考DevByte。\n另外，据说大部分Google的App使用的都是DecelaratorInterpolator，当然这跟设计有关。\n\n### 8.使用Scroller实现smoothScroll\nView有一个方法computeScroll(),复写，像这样就可以了\n```java\nScroller scroller = new Scroller(mContext);\n \n private void smoothScrollTo(int dstX, int dstY) {\n      int scrollX = getScrollX();\n      int delta = dstX - scrollX;\n      scroller.startScroll(scrollX, 0, delta, 0, 1000);\n      invalidate();\n }\n  \n @Override\n public void computeScroll() {\n     if (scroller.computeScrollOffset()) {\n         scrollTo(scroller.getCurrX(), scroller.getCurY());\n         postInvalidate();\n     }\n }\n```\n\n### 9. 补充几个好玩的函数\nView.canScrollVertically(int)\n```java\n public static boolean canChildScrollUp(View view) {\n        if (android.os.Build.VERSION.SDK_INT < 14) {\n            if (view instanceof AbsListView) {\n                final AbsListView absListView = (AbsListView) view;\n                return absListView.getChildCount() > 0\n                        && (absListView.getFirstVisiblePosition() > 0 || absListView.getChildAt(0)\n                        .getTop() < absListView.getPaddingTop());\n            } else {\n                return view.getScrollY() > 0;\n            }\n        } else {\n            return view.canScrollVertically(-1);\n        }\n    }\n```\n这段是我在秋百万的android-ultra-pulltorefresh里面找到的，想当初为了自己写下拉刷新，一遍一遍的打Log，最后甚至用上getVisibleRect才算搞定。\n其实很多东西前人已经帮我们整理好了。\n对了这东西在v4包里有ViewCompat.canScrollVertically，v4包除了方法数有点多(10k+好像)这点不好以外，一直都很好用\n附上supportLibrary各个包的方法数，如果对65536这个数字熟悉的话，还是会注意点的。\n![pic](http://odzl05jxx.bkt.clouddn.com/support_lib_methods_summary.jpg)\n\n\n\n### 总结\n- 使用getLocalVisibleRect可以判断一个view是否完全可见\n- scrollBy,setScrollX等内部都是调用了scrollTo方法，ScrollTo方法传参数与实际效果是相反的\n\n\n\n\n### Reference\n1. [Android应用坐标系统全面详解](http://blog.csdn.net/yanbober/article/details/50419117)\n2. ​[如何取得View的位置之View.getLocationInWindow()的小秘密](http://blog.csdn.net/imyfriend/article/details/8564781\n3. [详解实现Android中实现View滑动的几种方式](http://www.cnblogs.com/absfree/p/5352258.html)","slug":"2016-10-13-Android-coordinate-System","published":1,"updated":"2016-10-23T14:32:17.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzlb00017gvr5z2z3awi","content":"<p>记录一些Android系统坐标系的常用方法，因为日常开发中难免会碰到需要单独计算View系统坐标的情况。</p>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/minion.jpg?imageView2/2/w/400\" alt=\"\"><br><a id=\"more\"></a></p>\n<p>ScrollTo，ScrollBy，getVisibleRect这些方法平时想要用的时候总要去网上查找，这里记录下来，方便今后直接参考<br>首先是一张很多人都见过的图<br><img src=\"http://odzl05jxx.bkt.clouddn.com/android_screen_coordinate_system.png?imageView2/2/w/500\" alt=\"\"><br>中间的蓝色的点是TouchEvent发生时，获得的MotionEvent.getX()、getY()。</p>\n<h3 id=\"1-坐标原点和坐标轴方向\"><a href=\"#1-坐标原点和坐标轴方向\" class=\"headerlink\" title=\"1. 坐标原点和坐标轴方向\"></a>1. 坐标原点和坐标轴方向</h3><p>坐标原点有两种，屏幕左上角（statusBar也包含其中）和父控件左上角<br>坐标轴方向：X轴向右，Y轴向下，Z轴(5.0增加)向上。</p>\n<h3 id=\"2-Left-Top-Right-Bottom\"><a href=\"#2-Left-Top-Right-Bottom\" class=\"headerlink\" title=\"2. Left,Top,Right,Bottom\"></a>2. Left,Top,Right,Bottom</h3><p>而Top，left，bottom,down分别对应着其其相对于父控件的距离，由此可以计算得到View的宽度width = getRight()-getLeft() ,View的高度 height = getBottom()-getTop()<br>而实际上view.getHeight()方法的实现也就是mBottom-mTop.</p>\n<h3 id=\"3-X-Y\"><a href=\"#3-X-Y\" class=\"headerlink\" title=\"3. X , Y\"></a>3. X , Y</h3><p>X代表的是当前View的左上角那个点的横坐标，Y代表的是纵坐标。<br>X = left + getTranslationX<br>Y = Top + getTranslationY<br>通常在动画中使用setTranslationX来实现偏移效果，注意，这是不会改变left的。在滑动过程中，x, y会随着改变。</p>\n<h3 id=\"4-几个跟Rect相关的\"><a href=\"#4-几个跟Rect相关的\" class=\"headerlink\" title=\"4. 几个跟Rect相关的\"></a>4. 几个跟Rect相关的</h3><p>获得的是当前View左上角距离屏幕左上角的位置，为此我专门测试了一下</p>\n<blockquote>\n<p> W/ViewAnimationActivity.java: [32 | onWindowFocusChanged]statusBarHeight = 75<br> W/ViewAnimationActivity.java: [35 | onWindowFocusChanged]getLocationInWindow  x = 0 y = 75<br> W/ViewAnimationActivity.java: [38 | onWindowFocusChanged]getLocationOnScreen x = 0 y = 75<br>可以看到返回的就是View左上角的坐标，一般情况下两者区别不重要，stackoverFlow上有<a href=\"http://stackoverflow.com/questions/17672891/getlocationonscreen-vs-getlocationinwindow\" target=\"_blank\" rel=\"external\">讨论</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">View.getLocationInWindow(pos); <span class=\"comment\">//获取在当前window内的绝对坐标</span></div><div class=\"line\">View.getLocationOnScreen(pos); <span class=\"comment\">//包括statusBar，以屏幕左上角为坐标原点</span></div><div class=\"line\">View.getLocalVisibleRect()  </div><div class=\"line\"><span class=\"comment\">//以view自身的左上角为坐标原点，这个很有用，</span></div><div class=\"line\"><span class=\"comment\">//返回的坐标一定是(0,0,xxx,xxx)这样的，可以判断当前View是否完全可见</span></div><div class=\"line\">View.getGlobalVisibleRect()  <span class=\"comment\">// 以屏幕左上角为坐标原点</span></div></pre></td></tr></table></figure>\n<p>以上四个方法在onCreate里面返回的值都是0，需要在Activity的onWindowFocusChanged(true)中去获得<br>这里需要扯一点关于window的问题，根据大部分博客的介绍：DecorView是FrameLayout的子类，是View视图层级树的根节点。<br>一般会有一个LinearLayout的child</p>\n<p>为此，我在setContentView里面放了一个CoordinateLayout,使用Hierarchy View截图的到这样的结果。<br>图片有点大<br><img src=\"http://odzl05jxx.bkt.clouddn.com/view_hirearchy_1013.png\" alt=\"\"></p>\n<p>在ViewHirearchy中可以看到，Activity中View视图层级从上到下依次为：</p>\n<blockquote>\n<p>PhoneWindow$DecorView（有三个child,分别是LinearLayout，View(id/statusBarBackground)和View(id/navigationBarBackground)）<br>LinearLayout<br>FrameLayout<br>FitWindowsLinearLayout<br>ContentFrameLayout(id/android.R.id.content) //这在开发过程中有时会用到<br>setContentView设置的view</p>\n</blockquote>\n<p>关于window，DecorWindow的文章网上有很多，仔细研究下会对理解View的测量机制有一定好处，这对于View的工作原理也能够更彻底的理解。<br><a href=\"http://blog.csdn.net/qibin0506/article/details/49245601\" target=\"_blank\" rel=\"external\">参考文章</a><br>日常开发中，setContentView这个方法只是将我们自己写的activiy_main.xml布局文件inflate出来的view添加到<br>android.R.id.content这个ViewGroup中，实践下来发现这是一个ContentFrameLayout的实例，它的child只有一个，就是我们通过setContentView添加的View</p>\n<h3 id=\"5-让View滑动起来\"><a href=\"#5-让View滑动起来\" class=\"headerlink\" title=\"5. 让View滑动起来\"></a>5. 让View滑动起来</h3><blockquote>\n<p>offsetLeftAndRight(int offset) //给left和right加上一个值，改变的是View的位置<br>offsetTopAndBottom(int offset) </p>\n<p>scrollTo(int x,int y)  // 将View中的内容移动，坐标原点为parentView左上角，注意，参数为正，效果为反<br>例如scrollTo(-100,0) 在手机上看效果是往右移动了</p>\n<p>scrollBy(int x, int y)</p>\n</blockquote>\n<p>scrollBy的源码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">      scrollTo(mScrollX + x, mScrollY + y);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>还有一些不常用的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setScrollX</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</div><div class=\"line\">        scrollTo(value, mScrollY);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"6-改变LayoutParams的margin让View移动\"><a href=\"#6-改变LayoutParams的margin让View移动\" class=\"headerlink\" title=\"6. 改变LayoutParams的margin让View移动\"></a>6. 改变LayoutParams的margin让View移动</h3><p>这是一种很生硬的方式，不常用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MarginLayoutParams params = (MarginLayoutParams)mTextView.getLayoutParams(); <span class=\"comment\">//可能为null</span></div><div class=\"line\">params.leftMargin + = <span class=\"number\">100</span>;</div><div class=\"line\">mTextView.setLayoutParams();<span class=\"comment\">// 这里面调用了requestLayout</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"7-使用Animation让View动起来\"><a href=\"#7-使用Animation让View动起来\" class=\"headerlink\" title=\"7.使用Animation让View动起来\"></a>7.使用Animation让View动起来</h3><p>根据官方文档的<a href=\"https://developer.android.com/guide/topics/graphics/overview.html\" target=\"_blank\" rel=\"external\">定义</a>Android中一共两种Animation: </p>\n<blockquote>\n<p>Property Animation<br>View Animation(包括Tween animation, Frame animation)</p>\n</blockquote>\n<p>首先从package的位置来看<br>属性动画都位于android.animation这个package下面，常见的如ObjectAnimator继承自ValueAnimator<br>View动画则位于android.view.animation这个package下，常见的如TranslateA,AlphaAnimation等</p>\n<p>View Animation可以代码创建，也可以写在R.anim文件夹下,用法很简单<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ImageView image = (ImageView) findViewById(R.id.image);</div><div class=\"line\">Animation hyperspaceJump = AnimationUtils.loadAnimation(<span class=\"keyword\">this</span>, R.anim.hyperspace_jump);</div><div class=\"line\">image.startAnimation(hyperspaceJump);</div></pre></td></tr></table></figure></p>\n<p>属性动画可以代码创建，也可以写在R.animator文件夹下,用法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,</div><div class=\"line\">    R.anim.property_animator);</div><div class=\"line\">set.setTarget(myObject);</div><div class=\"line\">set.start();</div></pre></td></tr></table></figure></p>\n<p>推荐使用ViewPropertyAnimator，这是一个位于android.view下面的class，感觉更像是一个Util,大部分的方法都是在API 12 ,API 14引入的，<br>实际开发中推荐使用ViewCompat.animate() 返回一个ViewPropertyAnimator对象，省去了开发者版本判断的麻烦<br>语法更为简单：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewCompat.animate(view).x(<span class=\"number\">500</span>).y(<span class=\"number\">500</span>).setDuration(<span class=\"number\">5000</span>).setInterpolator(<span class=\"keyword\">new</span> DecelaratorInterpolator());  <span class=\"comment\">//不需要调用start()</span></div></pre></td></tr></table></figure></p>\n<p>据说这种方式性能最好，Google官方强烈推荐,参考DevByte。<br>另外，据说大部分Google的App使用的都是DecelaratorInterpolator，当然这跟设计有关。</p>\n<h3 id=\"8-使用Scroller实现smoothScroll\"><a href=\"#8-使用Scroller实现smoothScroll\" class=\"headerlink\" title=\"8.使用Scroller实现smoothScroll\"></a>8.使用Scroller实现smoothScroll</h3><p>View有一个方法computeScroll(),复写，像这样就可以了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scroller scroller = <span class=\"keyword\">new</span> Scroller(mContext);</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> dstX, <span class=\"keyword\">int</span> dstY)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> scrollX = getScrollX();</div><div class=\"line\">      <span class=\"keyword\">int</span> delta = dstX - scrollX;</div><div class=\"line\">      scroller.startScroll(scrollX, <span class=\"number\">0</span>, delta, <span class=\"number\">0</span>, <span class=\"number\">1000</span>);</div><div class=\"line\">      invalidate();</div><div class=\"line\"> &#125;</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (scroller.computeScrollOffset()) &#123;</div><div class=\"line\">         scrollTo(scroller.getCurrX(), scroller.getCurY());</div><div class=\"line\">         postInvalidate();</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"9-补充几个好玩的函数\"><a href=\"#9-补充几个好玩的函数\" class=\"headerlink\" title=\"9. 补充几个好玩的函数\"></a>9. 补充几个好玩的函数</h3><p>View.canScrollVertically(int)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canChildScrollUp</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (android.os.Build.VERSION.SDK_INT &lt; <span class=\"number\">14</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> AbsListView) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> AbsListView absListView = (AbsListView) view;</div><div class=\"line\">               <span class=\"keyword\">return</span> absListView.getChildCount() &gt; <span class=\"number\">0</span></div><div class=\"line\">                       &amp;&amp; (absListView.getFirstVisiblePosition() &gt; <span class=\"number\">0</span> || absListView.getChildAt(<span class=\"number\">0</span>)</div><div class=\"line\">                       .getTop() &lt; absListView.getPaddingTop());</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> view.getScrollY() &gt; <span class=\"number\">0</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> view.canScrollVertically(-<span class=\"number\">1</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这段是我在秋百万的android-ultra-pulltorefresh里面找到的，想当初为了自己写下拉刷新，一遍一遍的打Log，最后甚至用上getVisibleRect才算搞定。<br>其实很多东西前人已经帮我们整理好了。<br>对了这东西在v4包里有ViewCompat.canScrollVertically，v4包除了方法数有点多(10k+好像)这点不好以外，一直都很好用<br>附上supportLibrary各个包的方法数，如果对65536这个数字熟悉的话，还是会注意点的。<br><img src=\"http://odzl05jxx.bkt.clouddn.com/support_lib_methods_summary.jpg\" alt=\"pic\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>使用getLocalVisibleRect可以判断一个view是否完全可见</li>\n<li>scrollBy,setScrollX等内部都是调用了scrollTo方法，ScrollTo方法传参数与实际效果是相反的</li>\n</ul>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"http://blog.csdn.net/yanbober/article/details/50419117\" target=\"_blank\" rel=\"external\">Android应用坐标系统全面详解</a></li>\n<li>​[如何取得View的位置之View.getLocationInWindow()的小秘密](<a href=\"http://blog.csdn.net/imyfriend/article/details/8564781\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/imyfriend/article/details/8564781</a></li>\n<li><a href=\"http://www.cnblogs.com/absfree/p/5352258.html\" target=\"_blank\" rel=\"external\">详解实现Android中实现View滑动的几种方式</a></li>\n</ol>\n","excerpt":"<p>记录一些Android系统坐标系的常用方法，因为日常开发中难免会碰到需要单独计算View系统坐标的情况。</p>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/minion.jpg?imageView2/2/w/400\" alt=\"\"><br>","more":"</p>\n<p>ScrollTo，ScrollBy，getVisibleRect这些方法平时想要用的时候总要去网上查找，这里记录下来，方便今后直接参考<br>首先是一张很多人都见过的图<br><img src=\"http://odzl05jxx.bkt.clouddn.com/android_screen_coordinate_system.png?imageView2/2/w/500\" alt=\"\"><br>中间的蓝色的点是TouchEvent发生时，获得的MotionEvent.getX()、getY()。</p>\n<h3 id=\"1-坐标原点和坐标轴方向\"><a href=\"#1-坐标原点和坐标轴方向\" class=\"headerlink\" title=\"1. 坐标原点和坐标轴方向\"></a>1. 坐标原点和坐标轴方向</h3><p>坐标原点有两种，屏幕左上角（statusBar也包含其中）和父控件左上角<br>坐标轴方向：X轴向右，Y轴向下，Z轴(5.0增加)向上。</p>\n<h3 id=\"2-Left-Top-Right-Bottom\"><a href=\"#2-Left-Top-Right-Bottom\" class=\"headerlink\" title=\"2. Left,Top,Right,Bottom\"></a>2. Left,Top,Right,Bottom</h3><p>而Top，left，bottom,down分别对应着其其相对于父控件的距离，由此可以计算得到View的宽度width = getRight()-getLeft() ,View的高度 height = getBottom()-getTop()<br>而实际上view.getHeight()方法的实现也就是mBottom-mTop.</p>\n<h3 id=\"3-X-Y\"><a href=\"#3-X-Y\" class=\"headerlink\" title=\"3. X , Y\"></a>3. X , Y</h3><p>X代表的是当前View的左上角那个点的横坐标，Y代表的是纵坐标。<br>X = left + getTranslationX<br>Y = Top + getTranslationY<br>通常在动画中使用setTranslationX来实现偏移效果，注意，这是不会改变left的。在滑动过程中，x, y会随着改变。</p>\n<h3 id=\"4-几个跟Rect相关的\"><a href=\"#4-几个跟Rect相关的\" class=\"headerlink\" title=\"4. 几个跟Rect相关的\"></a>4. 几个跟Rect相关的</h3><p>获得的是当前View左上角距离屏幕左上角的位置，为此我专门测试了一下</p>\n<blockquote>\n<p> W/ViewAnimationActivity.java: [32 | onWindowFocusChanged]statusBarHeight = 75<br> W/ViewAnimationActivity.java: [35 | onWindowFocusChanged]getLocationInWindow  x = 0 y = 75<br> W/ViewAnimationActivity.java: [38 | onWindowFocusChanged]getLocationOnScreen x = 0 y = 75<br>可以看到返回的就是View左上角的坐标，一般情况下两者区别不重要，stackoverFlow上有<a href=\"http://stackoverflow.com/questions/17672891/getlocationonscreen-vs-getlocationinwindow\">讨论</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">View.getLocationInWindow(pos); <span class=\"comment\">//获取在当前window内的绝对坐标</span></div><div class=\"line\">View.getLocationOnScreen(pos); <span class=\"comment\">//包括statusBar，以屏幕左上角为坐标原点</span></div><div class=\"line\">View.getLocalVisibleRect()  </div><div class=\"line\"><span class=\"comment\">//以view自身的左上角为坐标原点，这个很有用，</span></div><div class=\"line\"><span class=\"comment\">//返回的坐标一定是(0,0,xxx,xxx)这样的，可以判断当前View是否完全可见</span></div><div class=\"line\">View.getGlobalVisibleRect()  <span class=\"comment\">// 以屏幕左上角为坐标原点</span></div></pre></td></tr></table></figure>\n<p>以上四个方法在onCreate里面返回的值都是0，需要在Activity的onWindowFocusChanged(true)中去获得<br>这里需要扯一点关于window的问题，根据大部分博客的介绍：DecorView是FrameLayout的子类，是View视图层级树的根节点。<br>一般会有一个LinearLayout的child</p>\n<p>为此，我在setContentView里面放了一个CoordinateLayout,使用Hierarchy View截图的到这样的结果。<br>图片有点大<br><img src=\"http://odzl05jxx.bkt.clouddn.com/view_hirearchy_1013.png\" alt=\"\"></p>\n<p>在ViewHirearchy中可以看到，Activity中View视图层级从上到下依次为：</p>\n<blockquote>\n<p>PhoneWindow$DecorView（有三个child,分别是LinearLayout，View(id/statusBarBackground)和View(id/navigationBarBackground)）<br>LinearLayout<br>FrameLayout<br>FitWindowsLinearLayout<br>ContentFrameLayout(id/android.R.id.content) //这在开发过程中有时会用到<br>setContentView设置的view</p>\n</blockquote>\n<p>关于window，DecorWindow的文章网上有很多，仔细研究下会对理解View的测量机制有一定好处，这对于View的工作原理也能够更彻底的理解。<br><a href=\"http://blog.csdn.net/qibin0506/article/details/49245601\">参考文章</a><br>日常开发中，setContentView这个方法只是将我们自己写的activiy_main.xml布局文件inflate出来的view添加到<br>android.R.id.content这个ViewGroup中，实践下来发现这是一个ContentFrameLayout的实例，它的child只有一个，就是我们通过setContentView添加的View</p>\n<h3 id=\"5-让View滑动起来\"><a href=\"#5-让View滑动起来\" class=\"headerlink\" title=\"5. 让View滑动起来\"></a>5. 让View滑动起来</h3><blockquote>\n<p>offsetLeftAndRight(int offset) //给left和right加上一个值，改变的是View的位置<br>offsetTopAndBottom(int offset) </p>\n<p>scrollTo(int x,int y)  // 将View中的内容移动，坐标原点为parentView左上角，注意，参数为正，效果为反<br>例如scrollTo(-100,0) 在手机上看效果是往右移动了</p>\n<p>scrollBy(int x, int y)</p>\n</blockquote>\n<p>scrollBy的源码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">      scrollTo(mScrollX + x, mScrollY + y);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>还有一些不常用的：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setScrollX</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</div><div class=\"line\">        scrollTo(value, mScrollY);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"6-改变LayoutParams的margin让View移动\"><a href=\"#6-改变LayoutParams的margin让View移动\" class=\"headerlink\" title=\"6. 改变LayoutParams的margin让View移动\"></a>6. 改变LayoutParams的margin让View移动</h3><p>这是一种很生硬的方式，不常用<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">MarginLayoutParams params = (MarginLayoutParams)mTextView.getLayoutParams(); <span class=\"comment\">//可能为null</span></div><div class=\"line\">params.leftMargin + = <span class=\"number\">100</span>;</div><div class=\"line\">mTextView.setLayoutParams();<span class=\"comment\">// 这里面调用了requestLayout</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"7-使用Animation让View动起来\"><a href=\"#7-使用Animation让View动起来\" class=\"headerlink\" title=\"7.使用Animation让View动起来\"></a>7.使用Animation让View动起来</h3><p>根据官方文档的<a href=\"https://developer.android.com/guide/topics/graphics/overview.html\">定义</a>Android中一共两种Animation: </p>\n<blockquote>\n<p>Property Animation<br>View Animation(包括Tween animation, Frame animation)</p>\n</blockquote>\n<p>首先从package的位置来看<br>属性动画都位于android.animation这个package下面，常见的如ObjectAnimator继承自ValueAnimator<br>View动画则位于android.view.animation这个package下，常见的如TranslateA,AlphaAnimation等</p>\n<p>View Animation可以代码创建，也可以写在R.anim文件夹下,用法很简单<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ImageView image = (ImageView) findViewById(R.id.image);</div><div class=\"line\">Animation hyperspaceJump = AnimationUtils.loadAnimation(<span class=\"keyword\">this</span>, R.anim.hyperspace_jump);</div><div class=\"line\">image.startAnimation(hyperspaceJump);</div></pre></td></tr></table></figure></p>\n<p>属性动画可以代码创建，也可以写在R.animator文件夹下,用法:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,</div><div class=\"line\">    R.anim.property_animator);</div><div class=\"line\">set.setTarget(myObject);</div><div class=\"line\">set.start();</div></pre></td></tr></table></figure></p>\n<p>推荐使用ViewPropertyAnimator，这是一个位于android.view下面的class，感觉更像是一个Util,大部分的方法都是在API 12 ,API 14引入的，<br>实际开发中推荐使用ViewCompat.animate() 返回一个ViewPropertyAnimator对象，省去了开发者版本判断的麻烦<br>语法更为简单：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewCompat.animate(view).x(<span class=\"number\">500</span>).y(<span class=\"number\">500</span>).setDuration(<span class=\"number\">5000</span>).setInterpolator(<span class=\"keyword\">new</span> DecelaratorInterpolator());  <span class=\"comment\">//不需要调用start()</span></div></pre></td></tr></table></figure></p>\n<p>据说这种方式性能最好，Google官方强烈推荐,参考DevByte。<br>另外，据说大部分Google的App使用的都是DecelaratorInterpolator，当然这跟设计有关。</p>\n<h3 id=\"8-使用Scroller实现smoothScroll\"><a href=\"#8-使用Scroller实现smoothScroll\" class=\"headerlink\" title=\"8.使用Scroller实现smoothScroll\"></a>8.使用Scroller实现smoothScroll</h3><p>View有一个方法computeScroll(),复写，像这样就可以了<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Scroller scroller = <span class=\"keyword\">new</span> Scroller(mContext);</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> dstX, <span class=\"keyword\">int</span> dstY)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">int</span> scrollX = getScrollX();</div><div class=\"line\">      <span class=\"keyword\">int</span> delta = dstX - scrollX;</div><div class=\"line\">      scroller.startScroll(scrollX, <span class=\"number\">0</span>, delta, <span class=\"number\">0</span>, <span class=\"number\">1000</span>);</div><div class=\"line\">      invalidate();</div><div class=\"line\"> &#125;</div><div class=\"line\">  </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">if</span> (scroller.computeScrollOffset()) &#123;</div><div class=\"line\">         scrollTo(scroller.getCurrX(), scroller.getCurY());</div><div class=\"line\">         postInvalidate();</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"9-补充几个好玩的函数\"><a href=\"#9-补充几个好玩的函数\" class=\"headerlink\" title=\"9. 补充几个好玩的函数\"></a>9. 补充几个好玩的函数</h3><p>View.canScrollVertically(int)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canChildScrollUp</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">if</span> (android.os.Build.VERSION.SDK_INT &lt; <span class=\"number\">14</span>) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> AbsListView) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> AbsListView absListView = (AbsListView) view;</div><div class=\"line\">               <span class=\"keyword\">return</span> absListView.getChildCount() &gt; <span class=\"number\">0</span></div><div class=\"line\">                       &amp;&amp; (absListView.getFirstVisiblePosition() &gt; <span class=\"number\">0</span> || absListView.getChildAt(<span class=\"number\">0</span>)</div><div class=\"line\">                       .getTop() &lt; absListView.getPaddingTop());</div><div class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">return</span> view.getScrollY() &gt; <span class=\"number\">0</span>;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> view.canScrollVertically(-<span class=\"number\">1</span>);</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这段是我在秋百万的android-ultra-pulltorefresh里面找到的，想当初为了自己写下拉刷新，一遍一遍的打Log，最后甚至用上getVisibleRect才算搞定。<br>其实很多东西前人已经帮我们整理好了。<br>对了这东西在v4包里有ViewCompat.canScrollVertically，v4包除了方法数有点多(10k+好像)这点不好以外，一直都很好用<br>附上supportLibrary各个包的方法数，如果对65536这个数字熟悉的话，还是会注意点的。<br><img src=\"http://odzl05jxx.bkt.clouddn.com/support_lib_methods_summary.jpg\" alt=\"pic\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>使用getLocalVisibleRect可以判断一个view是否完全可见</li>\n<li>scrollBy,setScrollX等内部都是调用了scrollTo方法，ScrollTo方法传参数与实际效果是相反的</li>\n</ul>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"http://blog.csdn.net/yanbober/article/details/50419117\">Android应用坐标系统全面详解</a></li>\n<li>​[如何取得View的位置之View.getLocationInWindow()的小秘密](<a href=\"http://blog.csdn.net/imyfriend/article/details/8564781\">http://blog.csdn.net/imyfriend/article/details/8564781</a></li>\n<li><a href=\"http://www.cnblogs.com/absfree/p/5352258.html\">详解实现Android中实现View滑动的几种方式</a></li>\n</ol>"},{"title":"fitSystemWindow和沉浸式状态栏的一些总结","date":"2016-10-14T09:15:47.000Z","_content":"沉浸式状态栏是api 19之后引入的，KitKat应该算是一次比较大的更新了，像是Transition，art runtime,storage access FrameWork(这个有空研究下)，另外就是这个被官方称为Full-screen immersive mode的特性了。具体来说，App可以将展示的区域拓展到statusBar的位置了。我觉得直接叫statusBar就好了，大部分人应该也能理解这就是手机上显示\"中国移动\"还有显示手机电量那一块的长条，宽度是match_parent。高度的话，据说是25dp，然后6.0上给改成了24dp。不过这不是重点<!--more-->\n\n### 1.最初的做法\n看到有人推荐使用[SystemBarTint](https://github.com/jgilfelt/SystemBarTint)这个class,刚上来觉得也挺好用的，就是一个java class，直接复制粘贴到项目里，改一下package name，无脑使用即可。原理的话，看过源码后，大致明白是在statusBar的位置添加一个new View，然后持有这个view的引用，接下来就可以做常规的setBackground或者setBackgroundColor了。初始化时的关键代码如下\n```java\nprivate void setupStatusBarView(Context context, ViewGroup decorViewGroup) {//这个decorViewGroup指的是activity.getWindow()\n        mStatusBarTintView = new View(context);\n        LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, mConfig.getStatusBarHeight());\n        params.gravity = Gravity.TOP;\n        if (mNavBarAvailable && !mConfig.isNavigationAtBottom()) {\n            params.rightMargin = mConfig.getNavigationBarWidth();\n        }\n        mStatusBarTintView.setLayoutParams(params);\n        mStatusBarTintView.setBackgroundColor(DEFAULT_TINT_COLOR);\n        mStatusBarTintView.setVisibility(View.GONE);\n        decorViewGroup.addView(mStatusBarTintView);\n    }\n```\n一切看起来都很美好\n\n### 2. 直到碰到了fitSystemWindow = ture\n几个月前曾经在项目里写过一个普通的Coordinatelayout内部CollapingToolbarLayout的沉浸式状态栏实现，当时为了赶进度一直试到夜里2点才尝试出在4.4和5.0以上手机都能满意的效果。现在想想有些事还是能够事先搞清楚的好，被动学习的代价实在太大。当时的方法是给Toolbar添加了一个顶部的padding，具体原理也不大清楚。\n但实际上并不总能一直</br>  \n  ![trying stuff utill it work](http://odzl05jxx.bkt.clouddn.com/Trying%20stuff%20Untill%20it%20work.jpg?imageView2/2/w/600)\n\n### 3. 使用CollapsingToolbarLayout时的问题\n1. 5.0以上的手机似乎很简单\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <android.support.design.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/coordinateLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@android:color/background_light\"\n        android:fitsSystemWindows=\"true\"\n        >\n\n        <android.support.design.widget.AppBarLayout\n            android:id=\"@+id/appbarLayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"300dp\"\n            android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n            android:fitsSystemWindows=\"true\"\n            >\n\n            <android.support.design.widget.CollapsingToolbarLayout\n                android:id=\"@+id/collapsingToolbarLayout\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                app:contentScrim=\"?attr/colorPrimary\"\n                app:expandedTitleMarginEnd=\"64dp\"\n                app:expandedTitleMarginStart=\"48dp\"\n                app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"\n                >\n\n                <ImageView\n                    android:id=\"@+id/backdrop\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"match_parent\"\n                    android:scaleType=\"centerCrop\"\n                    android:src=\"@drawable/image_19\"\n                    app:layout_collapseMode=\"parallax\"\n                    android:fitsSystemWindows=\"true\"\n                    />\n\n                <android.support.v7.widget.Toolbar\n                    android:id=\"@+id/toolbar\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"?attr/actionBarSize\"\n                    app:layout_collapseMode=\"pin\"\n                    app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                    />\n            </android.support.design.widget.CollapsingToolbarLayout>\n        </android.support.design.widget.AppBarLayout>\n\n        <android.support.v4.widget.NestedScrollView\n            android:id=\"@+id/nestedScrollView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n            >\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:lineSpacingExtra=\"8dp\"\n                android:padding=\"@dimen/activity_horizontal_margin\"\n                android:text=\"@string/newsBody\"\n                android:textSize=\"20sp\"\n                />\n        </android.support.v4.widget.NestedScrollView>\n\n        <android.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"@dimen/activity_horizontal_margin\"\n            android:src=\"@android:drawable/ic_menu_slideshow\"\n            app:layout_anchor=\"@id/appbarLayout\"\n            app:layout_anchorGravity=\"bottom|right|end\"\n            />\n    </android.support.design.widget.CoordinatorLayout>\n```\n只要分别在CoordinateLayout，AppBarLayout和CollapsingToolbarLayout的xml属性中加上android:fitSystemWindow = \"true\"\njava代码里添加一句\n> getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); //注意下版本判断\n\n或者在当前Activity的values-v19 styles中添加 <item name=\"android:windowTranslucentStatus\">true</item>\n就行了。实际效果就是图片完全展开时可以扩展到statusBar下面，图片收缩起来后可以让Toolbar停在statusBar下面。但同样的代码在4.4的手机上会使得实际绘图区域落到statusBar以下，statusBar位置变成带灰色遮罩的白色背景。\n\n### 4. fitSystemWindow是什么意思\nfitSystemWindows属性： \n官方描述: \nBoolean internal attribute to adjust view layout based on system windows such as the status bar. If true, adjusts the padding of this view to leave space for the system windows. Will only take effect if this view is in a non-embedded activity. \n简单来说就是如果设置为true,机会根据statusbar来添加一个padding.\n假定:\n布局文件只是一个普通的LinearLayout(fitSystemWindow = false（默认情况）),顶部include一个toolbar(fitSystemWindow = true )\n就已经可以实现4.4以下，4.4-5.0，5.0以上的各种场景了,(前提，使用Appcompat 的Theme，因为它会使用colorPrimaryDark为statusBar着色)\n\n但我的问题在于布局文件是\nCoordinateLayout>  AppBarLyout>  CollapsingToolbarLayout>  Toolbar & ImageView\n这种情况下，照理说Toolbar应该顶部留有25dp的padding，也就是fitSystemWindow = true（假设就只是这么简单）[然而事实是，fitSystemWindow会让你设置的padding失效](https://medium.com/google-developers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec#.vx75v2c9p),而ImageView需要侵入到statusBar下面，也就是fitSystemWindow = false。\n那就只要在toolbar的xml中添加fitSystemWindow这个属性好了。编译，运行，5.1手机，Toolbar的小箭头一部分跑到statusBar下面了，感觉就像Toolbar往上移动了25dp(这个目测的哈)，不可取。\n\n### 5. 查找到的一些解决方案\n 主要介绍原理了:\n\n 1. 类似于SystemBarTint，在android.R.id.content的View中添加一个 View\n ```java\n ViewGroup.LayoutParams statusViewLp = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,\n                    getStatusBarHeight());\ncontentView.addView(statusBarView,layoutParams)\n ```\n Activity持有一个PhoneWindow，PhoneWindow持有一个根View，叫DecorView（是一个FrameLayout），DecorView持有一个LinearLayout，在LinearLayout下分配两个FrameLayout，一个给ActionBar（当设置主题为NoActionBar是为ViewStub），一个给ContentView。不管如何，只要我们在LinearLayout的第一个位置插入一个View就可以让ContentView下移了。[简书作者](http://www.jianshu.com/p/140be70b84cd?utm_source=tuicool&utm_medium=referral)\n 这种方式其实已经无所谓是否需要在xml中fitSystemWindow了，因为都会通过添加最后一个View的方式把状态栏那块给遮住了。用来着色其实挺好的。\n\n\n2. 往android.R.id.content这个View里面添加一个假View,xml中fitSystemWindows\n\n3. 往android.R.id.content这个View的parent里面添加一个假View,xml中fitSystemWindows\n\n\n### 6.我最后实现的解决方案（4.4,5.1均通过）\n**其实整个问题的关键就是你是否想要在statusBar那一块长条的位置画画。。。。**\n一整张imageView的话，当然希望能够把图片延伸到statusBar以下\n而Toolbar则不需要延伸到statusBar以下。\n我尝试了给toolbar加上padding  >>失败\n我尝试了给toolbar加上margin   >>>> 问题终于解决\n\n所以最后，我的xml文件中删除了所有的fitSystemWindow，在style-v19中添加了该加的东西\n最后只在onCreate里面添加几段话\n```java\nsetSupportActionBar(binding.toolbar);\ngetSupportActionBar().setDisplayHomeAsUpEnabled(true);  //这个用于显示返回的小箭头，还得指明parentActivity\ngetSupportActionBar().setTitle(\"\");\nCollapsingToolbarLayout.LayoutParams params = (CollapsingToolbarLayout.LayoutParams) binding.toolbar.getLayoutParams();\nparams.setMargins(0, Utils.getStatusBarHeight(), 0, 0); //顶部加个margin就好了\nbinding.toolbar.setLayoutParams(params);\n```\n实际操作可能还要判断非空什么的，但大致意思如此\n看起来像这样\n5.1图片展开:  \n  ![5.1模拟器，图片展开](http://odzl05jxx.bkt.clouddn.com/statusbar_5.0_expanded.png?imageView2/2/w/300)  \n\n5.1图片收起:  \n  ![5.1模拟器，图片收起](http://odzl05jxx.bkt.clouddn.com/statusbar_5.0_collapsed.png?imageView2/2/w/300)  \n\n4.4图片展开:  \n  ![4.4模拟器，图片展开](http://odzl05jxx.bkt.clouddn.com/statusbar_4.4_expanded.png?imageView2/2/w/300)  \n\n4.4图片收起:\n  ![4.4模拟器，图片收起](http://odzl05jxx.bkt.clouddn.com/statusbar_4.4_collapsed.png?imageView2/2/w/300)  \n\n\n原理就是让整个布局占据statusBar的位置，但把Toolbar往下挪一点（其实也就是[这篇文章](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0330/4104.html)中所推荐的给contentView的给第一个childView添加marginTop的方法）\n\n\n### 7.在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪.\n自己测试了一下，在根布局里添加fitSystemWindows = true之后，在Activity的onCreate里面是可以使用ViewCompat.setfitSystems(rootView,false)设置起作用的。但也只限于onCreate的时候。例如添加一个点击事件，在onClick里面setFitSystemWindows，是不会把RootView往下挪的。这种情况就需要一开始就确保fitSystem = false，然后需要往下挪的时候，给设置一个FrameLayout.LayoutParams的TopMargin就可以了。注意来回切换(全屏模式和着色模式之间切换)的时候要看下rootView的getTop,因为MarginTop设置了之后会导致Top!=0。\n其实fitSystemWindows是在FitSystemWindowLinearLayout中添加Padding起效的，后期操作的Margin只是对其Child ContentFrameLayout进行操作。\n所以，这种情况下我觉得直接全部弄成fitSystemWindows = false，先把statusBar后面的空间占据了再说，后面再通过手动设置Margin上下挪动。\n\n\n\n\n### 8. 一些不要犯的小错误\n- 在Theme中添加\n```xml\n<item name=\"android:fitsSystemWindows\">true</item>\n```\n这会导致Toast的文字往上偏移，所以，如果需要使用fitSystemWinow = true的话，请老老实实去xml中写\n\n- 状态栏那一块如果你不去占据的话，而你又声明了windowTranslucentStatus，v21上默认的颜色应该是colorPrimaryDark(是的，AppCompat帮你照顾好了)v19上就是一片带阴影的白色(AppCompat不会在这个版本上帮你着色statusBar)。\n\n- 6.0以上可以设置statusBar字体的颜色了，这个随便找找就有了\n\n- Ian Lake在medium上给出了对于fitSystemWindow的权威解释，非常有价值。\n\n\n### 9. 下面这段话可能对于理解window有一定帮助\nfitsSystemWindows, 该属性可以设置是否为系统 View 预留出空间, 当设置为 true 时,会预留出状态栏的空间.\nContentView, 实质为 ContentFrameLayout, 但是重写了 dispatchFitSystemWindows 方法, 所以对其设置 fitsSystemWindows 无效.\nContentParent, 实质为 FitWindowsLinearLayout, 里面第一个 View 是 ViewStubCompat, 如果主题没有设置 title ,它就不会 inflate .第二个 View 就是 ContentView.\n最后感谢网上各位博主不辞辛苦写出来的干货，让我能够比较简单的复制粘贴他们的代码来检验，写博客真的很累。\n\n### Reference\n1. [Android-transulcent-status-bar总结](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0330/4104.html)\n2. [由沉浸式状态栏引发的血案](http://www.jianshu.com/p/140be70b84cd?utm_source=tuicool&utm_medium=referral)\n3. [Android开发：Translucent System Bar 的最佳实践](http://www.jianshu.com/p/0acc12c29c1b)\n4. [Why would I want to fitsSystemWindows](https://medium.com/google-developers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec)","source":"_posts/2016-10-14-Android-translucent-status-bar.md","raw":"---\ntitle: fitSystemWindow和沉浸式状态栏的一些总结\ndate: 2016-10-14 17:15:47\ncategories: [技术]\ntags: [Android,Window,statusBar]\n---\n沉浸式状态栏是api 19之后引入的，KitKat应该算是一次比较大的更新了，像是Transition，art runtime,storage access FrameWork(这个有空研究下)，另外就是这个被官方称为Full-screen immersive mode的特性了。具体来说，App可以将展示的区域拓展到statusBar的位置了。我觉得直接叫statusBar就好了，大部分人应该也能理解这就是手机上显示\"中国移动\"还有显示手机电量那一块的长条，宽度是match_parent。高度的话，据说是25dp，然后6.0上给改成了24dp。不过这不是重点<!--more-->\n\n### 1.最初的做法\n看到有人推荐使用[SystemBarTint](https://github.com/jgilfelt/SystemBarTint)这个class,刚上来觉得也挺好用的，就是一个java class，直接复制粘贴到项目里，改一下package name，无脑使用即可。原理的话，看过源码后，大致明白是在statusBar的位置添加一个new View，然后持有这个view的引用，接下来就可以做常规的setBackground或者setBackgroundColor了。初始化时的关键代码如下\n```java\nprivate void setupStatusBarView(Context context, ViewGroup decorViewGroup) {//这个decorViewGroup指的是activity.getWindow()\n        mStatusBarTintView = new View(context);\n        LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, mConfig.getStatusBarHeight());\n        params.gravity = Gravity.TOP;\n        if (mNavBarAvailable && !mConfig.isNavigationAtBottom()) {\n            params.rightMargin = mConfig.getNavigationBarWidth();\n        }\n        mStatusBarTintView.setLayoutParams(params);\n        mStatusBarTintView.setBackgroundColor(DEFAULT_TINT_COLOR);\n        mStatusBarTintView.setVisibility(View.GONE);\n        decorViewGroup.addView(mStatusBarTintView);\n    }\n```\n一切看起来都很美好\n\n### 2. 直到碰到了fitSystemWindow = ture\n几个月前曾经在项目里写过一个普通的Coordinatelayout内部CollapingToolbarLayout的沉浸式状态栏实现，当时为了赶进度一直试到夜里2点才尝试出在4.4和5.0以上手机都能满意的效果。现在想想有些事还是能够事先搞清楚的好，被动学习的代价实在太大。当时的方法是给Toolbar添加了一个顶部的padding，具体原理也不大清楚。\n但实际上并不总能一直</br>  \n  ![trying stuff utill it work](http://odzl05jxx.bkt.clouddn.com/Trying%20stuff%20Untill%20it%20work.jpg?imageView2/2/w/600)\n\n### 3. 使用CollapsingToolbarLayout时的问题\n1. 5.0以上的手机似乎很简单\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <android.support.design.widget.CoordinatorLayout\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:id=\"@+id/coordinateLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@android:color/background_light\"\n        android:fitsSystemWindows=\"true\"\n        >\n\n        <android.support.design.widget.AppBarLayout\n            android:id=\"@+id/appbarLayout\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"300dp\"\n            android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n            android:fitsSystemWindows=\"true\"\n            >\n\n            <android.support.design.widget.CollapsingToolbarLayout\n                android:id=\"@+id/collapsingToolbarLayout\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"match_parent\"\n                app:contentScrim=\"?attr/colorPrimary\"\n                app:expandedTitleMarginEnd=\"64dp\"\n                app:expandedTitleMarginStart=\"48dp\"\n                app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"\n                >\n\n                <ImageView\n                    android:id=\"@+id/backdrop\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"match_parent\"\n                    android:scaleType=\"centerCrop\"\n                    android:src=\"@drawable/image_19\"\n                    app:layout_collapseMode=\"parallax\"\n                    android:fitsSystemWindows=\"true\"\n                    />\n\n                <android.support.v7.widget.Toolbar\n                    android:id=\"@+id/toolbar\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"?attr/actionBarSize\"\n                    app:layout_collapseMode=\"pin\"\n                    app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n                    />\n            </android.support.design.widget.CollapsingToolbarLayout>\n        </android.support.design.widget.AppBarLayout>\n\n        <android.support.v4.widget.NestedScrollView\n            android:id=\"@+id/nestedScrollView\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n            >\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:lineSpacingExtra=\"8dp\"\n                android:padding=\"@dimen/activity_horizontal_margin\"\n                android:text=\"@string/newsBody\"\n                android:textSize=\"20sp\"\n                />\n        </android.support.v4.widget.NestedScrollView>\n\n        <android.support.design.widget.FloatingActionButton\n            android:id=\"@+id/fab\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_margin=\"@dimen/activity_horizontal_margin\"\n            android:src=\"@android:drawable/ic_menu_slideshow\"\n            app:layout_anchor=\"@id/appbarLayout\"\n            app:layout_anchorGravity=\"bottom|right|end\"\n            />\n    </android.support.design.widget.CoordinatorLayout>\n```\n只要分别在CoordinateLayout，AppBarLayout和CollapsingToolbarLayout的xml属性中加上android:fitSystemWindow = \"true\"\njava代码里添加一句\n> getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); //注意下版本判断\n\n或者在当前Activity的values-v19 styles中添加 <item name=\"android:windowTranslucentStatus\">true</item>\n就行了。实际效果就是图片完全展开时可以扩展到statusBar下面，图片收缩起来后可以让Toolbar停在statusBar下面。但同样的代码在4.4的手机上会使得实际绘图区域落到statusBar以下，statusBar位置变成带灰色遮罩的白色背景。\n\n### 4. fitSystemWindow是什么意思\nfitSystemWindows属性： \n官方描述: \nBoolean internal attribute to adjust view layout based on system windows such as the status bar. If true, adjusts the padding of this view to leave space for the system windows. Will only take effect if this view is in a non-embedded activity. \n简单来说就是如果设置为true,机会根据statusbar来添加一个padding.\n假定:\n布局文件只是一个普通的LinearLayout(fitSystemWindow = false（默认情况）),顶部include一个toolbar(fitSystemWindow = true )\n就已经可以实现4.4以下，4.4-5.0，5.0以上的各种场景了,(前提，使用Appcompat 的Theme，因为它会使用colorPrimaryDark为statusBar着色)\n\n但我的问题在于布局文件是\nCoordinateLayout>  AppBarLyout>  CollapsingToolbarLayout>  Toolbar & ImageView\n这种情况下，照理说Toolbar应该顶部留有25dp的padding，也就是fitSystemWindow = true（假设就只是这么简单）[然而事实是，fitSystemWindow会让你设置的padding失效](https://medium.com/google-developers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec#.vx75v2c9p),而ImageView需要侵入到statusBar下面，也就是fitSystemWindow = false。\n那就只要在toolbar的xml中添加fitSystemWindow这个属性好了。编译，运行，5.1手机，Toolbar的小箭头一部分跑到statusBar下面了，感觉就像Toolbar往上移动了25dp(这个目测的哈)，不可取。\n\n### 5. 查找到的一些解决方案\n 主要介绍原理了:\n\n 1. 类似于SystemBarTint，在android.R.id.content的View中添加一个 View\n ```java\n ViewGroup.LayoutParams statusViewLp = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,\n                    getStatusBarHeight());\ncontentView.addView(statusBarView,layoutParams)\n ```\n Activity持有一个PhoneWindow，PhoneWindow持有一个根View，叫DecorView（是一个FrameLayout），DecorView持有一个LinearLayout，在LinearLayout下分配两个FrameLayout，一个给ActionBar（当设置主题为NoActionBar是为ViewStub），一个给ContentView。不管如何，只要我们在LinearLayout的第一个位置插入一个View就可以让ContentView下移了。[简书作者](http://www.jianshu.com/p/140be70b84cd?utm_source=tuicool&utm_medium=referral)\n 这种方式其实已经无所谓是否需要在xml中fitSystemWindow了，因为都会通过添加最后一个View的方式把状态栏那块给遮住了。用来着色其实挺好的。\n\n\n2. 往android.R.id.content这个View里面添加一个假View,xml中fitSystemWindows\n\n3. 往android.R.id.content这个View的parent里面添加一个假View,xml中fitSystemWindows\n\n\n### 6.我最后实现的解决方案（4.4,5.1均通过）\n**其实整个问题的关键就是你是否想要在statusBar那一块长条的位置画画。。。。**\n一整张imageView的话，当然希望能够把图片延伸到statusBar以下\n而Toolbar则不需要延伸到statusBar以下。\n我尝试了给toolbar加上padding  >>失败\n我尝试了给toolbar加上margin   >>>> 问题终于解决\n\n所以最后，我的xml文件中删除了所有的fitSystemWindow，在style-v19中添加了该加的东西\n最后只在onCreate里面添加几段话\n```java\nsetSupportActionBar(binding.toolbar);\ngetSupportActionBar().setDisplayHomeAsUpEnabled(true);  //这个用于显示返回的小箭头，还得指明parentActivity\ngetSupportActionBar().setTitle(\"\");\nCollapsingToolbarLayout.LayoutParams params = (CollapsingToolbarLayout.LayoutParams) binding.toolbar.getLayoutParams();\nparams.setMargins(0, Utils.getStatusBarHeight(), 0, 0); //顶部加个margin就好了\nbinding.toolbar.setLayoutParams(params);\n```\n实际操作可能还要判断非空什么的，但大致意思如此\n看起来像这样\n5.1图片展开:  \n  ![5.1模拟器，图片展开](http://odzl05jxx.bkt.clouddn.com/statusbar_5.0_expanded.png?imageView2/2/w/300)  \n\n5.1图片收起:  \n  ![5.1模拟器，图片收起](http://odzl05jxx.bkt.clouddn.com/statusbar_5.0_collapsed.png?imageView2/2/w/300)  \n\n4.4图片展开:  \n  ![4.4模拟器，图片展开](http://odzl05jxx.bkt.clouddn.com/statusbar_4.4_expanded.png?imageView2/2/w/300)  \n\n4.4图片收起:\n  ![4.4模拟器，图片收起](http://odzl05jxx.bkt.clouddn.com/statusbar_4.4_collapsed.png?imageView2/2/w/300)  \n\n\n原理就是让整个布局占据statusBar的位置，但把Toolbar往下挪一点（其实也就是[这篇文章](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0330/4104.html)中所推荐的给contentView的给第一个childView添加marginTop的方法）\n\n\n### 7.在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪.\n自己测试了一下，在根布局里添加fitSystemWindows = true之后，在Activity的onCreate里面是可以使用ViewCompat.setfitSystems(rootView,false)设置起作用的。但也只限于onCreate的时候。例如添加一个点击事件，在onClick里面setFitSystemWindows，是不会把RootView往下挪的。这种情况就需要一开始就确保fitSystem = false，然后需要往下挪的时候，给设置一个FrameLayout.LayoutParams的TopMargin就可以了。注意来回切换(全屏模式和着色模式之间切换)的时候要看下rootView的getTop,因为MarginTop设置了之后会导致Top!=0。\n其实fitSystemWindows是在FitSystemWindowLinearLayout中添加Padding起效的，后期操作的Margin只是对其Child ContentFrameLayout进行操作。\n所以，这种情况下我觉得直接全部弄成fitSystemWindows = false，先把statusBar后面的空间占据了再说，后面再通过手动设置Margin上下挪动。\n\n\n\n\n### 8. 一些不要犯的小错误\n- 在Theme中添加\n```xml\n<item name=\"android:fitsSystemWindows\">true</item>\n```\n这会导致Toast的文字往上偏移，所以，如果需要使用fitSystemWinow = true的话，请老老实实去xml中写\n\n- 状态栏那一块如果你不去占据的话，而你又声明了windowTranslucentStatus，v21上默认的颜色应该是colorPrimaryDark(是的，AppCompat帮你照顾好了)v19上就是一片带阴影的白色(AppCompat不会在这个版本上帮你着色statusBar)。\n\n- 6.0以上可以设置statusBar字体的颜色了，这个随便找找就有了\n\n- Ian Lake在medium上给出了对于fitSystemWindow的权威解释，非常有价值。\n\n\n### 9. 下面这段话可能对于理解window有一定帮助\nfitsSystemWindows, 该属性可以设置是否为系统 View 预留出空间, 当设置为 true 时,会预留出状态栏的空间.\nContentView, 实质为 ContentFrameLayout, 但是重写了 dispatchFitSystemWindows 方法, 所以对其设置 fitsSystemWindows 无效.\nContentParent, 实质为 FitWindowsLinearLayout, 里面第一个 View 是 ViewStubCompat, 如果主题没有设置 title ,它就不会 inflate .第二个 View 就是 ContentView.\n最后感谢网上各位博主不辞辛苦写出来的干货，让我能够比较简单的复制粘贴他们的代码来检验，写博客真的很累。\n\n### Reference\n1. [Android-transulcent-status-bar总结](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0330/4104.html)\n2. [由沉浸式状态栏引发的血案](http://www.jianshu.com/p/140be70b84cd?utm_source=tuicool&utm_medium=referral)\n3. [Android开发：Translucent System Bar 的最佳实践](http://www.jianshu.com/p/0acc12c29c1b)\n4. [Why would I want to fitsSystemWindows](https://medium.com/google-developers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec)","slug":"2016-10-14-Android-translucent-status-bar","published":1,"updated":"2016-12-18T09:16:31.426Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzlb00047gvr9i1qd2uy","content":"<p>沉浸式状态栏是api 19之后引入的，KitKat应该算是一次比较大的更新了，像是Transition，art runtime,storage access FrameWork(这个有空研究下)，另外就是这个被官方称为Full-screen immersive mode的特性了。具体来说，App可以将展示的区域拓展到statusBar的位置了。我觉得直接叫statusBar就好了，大部分人应该也能理解这就是手机上显示”中国移动”还有显示手机电量那一块的长条，宽度是match_parent。高度的话，据说是25dp，然后6.0上给改成了24dp。不过这不是重点<a id=\"more\"></a></p>\n<h3 id=\"1-最初的做法\"><a href=\"#1-最初的做法\" class=\"headerlink\" title=\"1.最初的做法\"></a>1.最初的做法</h3><p>看到有人推荐使用<a href=\"https://github.com/jgilfelt/SystemBarTint\" target=\"_blank\" rel=\"external\">SystemBarTint</a>这个class,刚上来觉得也挺好用的，就是一个java class，直接复制粘贴到项目里，改一下package name，无脑使用即可。原理的话，看过源码后，大致明白是在statusBar的位置添加一个new View，然后持有这个view的引用，接下来就可以做常规的setBackground或者setBackgroundColor了。初始化时的关键代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupStatusBarView</span><span class=\"params\">(Context context, ViewGroup decorViewGroup)</span> </span>&#123;<span class=\"comment\">//这个decorViewGroup指的是activity.getWindow()</span></div><div class=\"line\">        mStatusBarTintView = <span class=\"keyword\">new</span> View(context);</div><div class=\"line\">        LayoutParams params = <span class=\"keyword\">new</span> LayoutParams(LayoutParams.MATCH_PARENT, mConfig.getStatusBarHeight());</div><div class=\"line\">        params.gravity = Gravity.TOP;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNavBarAvailable &amp;&amp; !mConfig.isNavigationAtBottom()) &#123;</div><div class=\"line\">            params.rightMargin = mConfig.getNavigationBarWidth();</div><div class=\"line\">        &#125;</div><div class=\"line\">        mStatusBarTintView.setLayoutParams(params);</div><div class=\"line\">        mStatusBarTintView.setBackgroundColor(DEFAULT_TINT_COLOR);</div><div class=\"line\">        mStatusBarTintView.setVisibility(View.GONE);</div><div class=\"line\">        decorViewGroup.addView(mStatusBarTintView);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>一切看起来都很美好</p>\n<h3 id=\"2-直到碰到了fitSystemWindow-ture\"><a href=\"#2-直到碰到了fitSystemWindow-ture\" class=\"headerlink\" title=\"2. 直到碰到了fitSystemWindow = ture\"></a>2. 直到碰到了fitSystemWindow = ture</h3><p>几个月前曾经在项目里写过一个普通的Coordinatelayout内部CollapingToolbarLayout的沉浸式状态栏实现，当时为了赶进度一直试到夜里2点才尝试出在4.4和5.0以上手机都能满意的效果。现在想想有些事还是能够事先搞清楚的好，被动学习的代价实在太大。当时的方法是给Toolbar添加了一个顶部的padding，具体原理也不大清楚。<br>但实际上并不总能一直<br><br>  <img src=\"http://odzl05jxx.bkt.clouddn.com/Trying%20stuff%20Untill%20it%20work.jpg?imageView2/2/w/600\" alt=\"trying stuff utill it work\"></p>\n<h3 id=\"3-使用CollapsingToolbarLayout时的问题\"><a href=\"#3-使用CollapsingToolbarLayout时的问题\" class=\"headerlink\" title=\"3. 使用CollapsingToolbarLayout时的问题\"></a>3. 使用CollapsingToolbarLayout时的问题</h3><ol>\n<li>5.0以上的手机似乎很简单<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></span></div><div class=\"line\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/coordinateLayout\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/background_light\"</span></div><div class=\"line\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        &gt;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbarLayout\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></div><div class=\"line\">            <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            &gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/collapsingToolbarLayout\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">app:contentScrim</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">                <span class=\"attr\">app:expandedTitleMarginEnd</span>=<span class=\"string\">\"64dp\"</span></div><div class=\"line\">                <span class=\"attr\">app:expandedTitleMarginStart</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|exitUntilCollapsed\"</span></div><div class=\"line\">                &gt;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">                    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/backdrop\"</span></div><div class=\"line\">                    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                    <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">                    <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/image_19\"</span></div><div class=\"line\">                    <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"parallax\"</span></div><div class=\"line\">                    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">                    /&gt;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></span></div><div class=\"line\">                    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">                    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">                    <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"pin\"</span></div><div class=\"line\">                    <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></div><div class=\"line\">                    /&gt;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.NestedScrollView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nestedScrollView\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span></div><div class=\"line\">            &gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:lineSpacingExtra</span>=<span class=\"string\">\"8dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:padding</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newsBody\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20sp\"</span></div><div class=\"line\">                /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fab\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@android:drawable/ic_menu_slideshow\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_anchor</span>=<span class=\"string\">\"@id/appbarLayout\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_anchorGravity</span>=<span class=\"string\">\"bottom|right|end\"</span></div><div class=\"line\">            /&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>只要分别在CoordinateLayout，AppBarLayout和CollapsingToolbarLayout的xml属性中加上android:fitSystemWindow = “true”<br>java代码里添加一句</p>\n<blockquote>\n<p>getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); //注意下版本判断</p>\n</blockquote>\n<p>或者在当前Activity的values-v19 styles中添加 <item name=\"android:windowTranslucentStatus\">true</item><br>就行了。实际效果就是图片完全展开时可以扩展到statusBar下面，图片收缩起来后可以让Toolbar停在statusBar下面。但同样的代码在4.4的手机上会使得实际绘图区域落到statusBar以下，statusBar位置变成带灰色遮罩的白色背景。</p>\n<h3 id=\"4-fitSystemWindow是什么意思\"><a href=\"#4-fitSystemWindow是什么意思\" class=\"headerlink\" title=\"4. fitSystemWindow是什么意思\"></a>4. fitSystemWindow是什么意思</h3><p>fitSystemWindows属性：<br>官方描述:<br>Boolean internal attribute to adjust view layout based on system windows such as the status bar. If true, adjusts the padding of this view to leave space for the system windows. Will only take effect if this view is in a non-embedded activity.<br>简单来说就是如果设置为true,机会根据statusbar来添加一个padding.<br>假定:<br>布局文件只是一个普通的LinearLayout(fitSystemWindow = false（默认情况）),顶部include一个toolbar(fitSystemWindow = true )<br>就已经可以实现4.4以下，4.4-5.0，5.0以上的各种场景了,(前提，使用Appcompat 的Theme，因为它会使用colorPrimaryDark为statusBar着色)</p>\n<p>但我的问题在于布局文件是<br>CoordinateLayout&gt;  AppBarLyout&gt;  CollapsingToolbarLayout&gt;  Toolbar &amp; ImageView<br>这种情况下，照理说Toolbar应该顶部留有25dp的padding，也就是fitSystemWindow = true（假设就只是这么简单）<a href=\"https://medium.com/google-developers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec#.vx75v2c9p\" target=\"_blank\" rel=\"external\">然而事实是，fitSystemWindow会让你设置的padding失效</a>,而ImageView需要侵入到statusBar下面，也就是fitSystemWindow = false。<br>那就只要在toolbar的xml中添加fitSystemWindow这个属性好了。编译，运行，5.1手机，Toolbar的小箭头一部分跑到statusBar下面了，感觉就像Toolbar往上移动了25dp(这个目测的哈)，不可取。</p>\n<h3 id=\"5-查找到的一些解决方案\"><a href=\"#5-查找到的一些解决方案\" class=\"headerlink\" title=\"5. 查找到的一些解决方案\"></a>5. 查找到的一些解决方案</h3><p> 主要介绍原理了:</p>\n<ol>\n<li><p>类似于SystemBarTint，在android.R.id.content的View中添加一个 View</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ViewGroup.LayoutParams statusViewLp = <span class=\"keyword\">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,</div><div class=\"line\">                    getStatusBarHeight());</div><div class=\"line\">contentView.addView(statusBarView,layoutParams)</div></pre></td></tr></table></figure>\n<p>Activity持有一个PhoneWindow，PhoneWindow持有一个根View，叫DecorView（是一个FrameLayout），DecorView持有一个LinearLayout，在LinearLayout下分配两个FrameLayout，一个给ActionBar（当设置主题为NoActionBar是为ViewStub），一个给ContentView。不管如何，只要我们在LinearLayout的第一个位置插入一个View就可以让ContentView下移了。<a href=\"http://www.jianshu.com/p/140be70b84cd?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">简书作者</a><br>这种方式其实已经无所谓是否需要在xml中fitSystemWindow了，因为都会通过添加最后一个View的方式把状态栏那块给遮住了。用来着色其实挺好的。</p>\n</li>\n</ol>\n<ol>\n<li><p>往android.R.id.content这个View里面添加一个假View,xml中fitSystemWindows</p>\n</li>\n<li><p>往android.R.id.content这个View的parent里面添加一个假View,xml中fitSystemWindows</p>\n</li>\n</ol>\n<h3 id=\"6-我最后实现的解决方案（4-4-5-1均通过）\"><a href=\"#6-我最后实现的解决方案（4-4-5-1均通过）\" class=\"headerlink\" title=\"6.我最后实现的解决方案（4.4,5.1均通过）\"></a>6.我最后实现的解决方案（4.4,5.1均通过）</h3><p><strong>其实整个问题的关键就是你是否想要在statusBar那一块长条的位置画画。。。。</strong><br>一整张imageView的话，当然希望能够把图片延伸到statusBar以下<br>而Toolbar则不需要延伸到statusBar以下。<br>我尝试了给toolbar加上padding  &gt;&gt;失败<br>我尝试了给toolbar加上margin   &gt;&gt;&gt;&gt; 问题终于解决</p>\n<p>所以最后，我的xml文件中删除了所有的fitSystemWindow，在style-v19中添加了该加的东西<br>最后只在onCreate里面添加几段话<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">setSupportActionBar(binding.toolbar);</div><div class=\"line\">getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);  <span class=\"comment\">//这个用于显示返回的小箭头，还得指明parentActivity</span></div><div class=\"line\">getSupportActionBar().setTitle(<span class=\"string\">\"\"</span>);</div><div class=\"line\">CollapsingToolbarLayout.LayoutParams params = (CollapsingToolbarLayout.LayoutParams) binding.toolbar.getLayoutParams();</div><div class=\"line\">params.setMargins(<span class=\"number\">0</span>, Utils.getStatusBarHeight(), <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//顶部加个margin就好了</span></div><div class=\"line\">binding.toolbar.setLayoutParams(params);</div></pre></td></tr></table></figure></p>\n<p>实际操作可能还要判断非空什么的，但大致意思如此<br>看起来像这样<br>5.1图片展开:<br>  <img src=\"http://odzl05jxx.bkt.clouddn.com/statusbar_5.0_expanded.png?imageView2/2/w/300\" alt=\"5.1模拟器，图片展开\">  </p>\n<p>5.1图片收起:<br>  <img src=\"http://odzl05jxx.bkt.clouddn.com/statusbar_5.0_collapsed.png?imageView2/2/w/300\" alt=\"5.1模拟器，图片收起\">  </p>\n<p>4.4图片展开:<br>  <img src=\"http://odzl05jxx.bkt.clouddn.com/statusbar_4.4_expanded.png?imageView2/2/w/300\" alt=\"4.4模拟器，图片展开\">  </p>\n<p>4.4图片收起:<br>  <img src=\"http://odzl05jxx.bkt.clouddn.com/statusbar_4.4_collapsed.png?imageView2/2/w/300\" alt=\"4.4模拟器，图片收起\">  </p>\n<p>原理就是让整个布局占据statusBar的位置，但把Toolbar往下挪一点（其实也就是<a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0330/4104.html\" target=\"_blank\" rel=\"external\">这篇文章</a>中所推荐的给contentView的给第一个childView添加marginTop的方法）</p>\n<h3 id=\"7-在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪\"><a href=\"#7-在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪\" class=\"headerlink\" title=\"7.在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪.\"></a>7.在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪.</h3><p>自己测试了一下，在根布局里添加fitSystemWindows = true之后，在Activity的onCreate里面是可以使用ViewCompat.setfitSystems(rootView,false)设置起作用的。但也只限于onCreate的时候。例如添加一个点击事件，在onClick里面setFitSystemWindows，是不会把RootView往下挪的。这种情况就需要一开始就确保fitSystem = false，然后需要往下挪的时候，给设置一个FrameLayout.LayoutParams的TopMargin就可以了。注意来回切换(全屏模式和着色模式之间切换)的时候要看下rootView的getTop,因为MarginTop设置了之后会导致Top!=0。<br>其实fitSystemWindows是在FitSystemWindowLinearLayout中添加Padding起效的，后期操作的Margin只是对其Child ContentFrameLayout进行操作。<br>所以，这种情况下我觉得直接全部弄成fitSystemWindows = false，先把statusBar后面的空间占据了再说，后面再通过手动设置Margin上下挪动。</p>\n<h3 id=\"8-一些不要犯的小错误\"><a href=\"#8-一些不要犯的小错误\" class=\"headerlink\" title=\"8. 一些不要犯的小错误\"></a>8. 一些不要犯的小错误</h3><ul>\n<li>在Theme中添加<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:fitsSystemWindows\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这会导致Toast的文字往上偏移，所以，如果需要使用fitSystemWinow = true的话，请老老实实去xml中写</p>\n<ul>\n<li><p>状态栏那一块如果你不去占据的话，而你又声明了windowTranslucentStatus，v21上默认的颜色应该是colorPrimaryDark(是的，AppCompat帮你照顾好了)v19上就是一片带阴影的白色(AppCompat不会在这个版本上帮你着色statusBar)。</p>\n</li>\n<li><p>6.0以上可以设置statusBar字体的颜色了，这个随便找找就有了</p>\n</li>\n<li><p>Ian Lake在medium上给出了对于fitSystemWindow的权威解释，非常有价值。</p>\n</li>\n</ul>\n<h3 id=\"9-下面这段话可能对于理解window有一定帮助\"><a href=\"#9-下面这段话可能对于理解window有一定帮助\" class=\"headerlink\" title=\"9. 下面这段话可能对于理解window有一定帮助\"></a>9. 下面这段话可能对于理解window有一定帮助</h3><p>fitsSystemWindows, 该属性可以设置是否为系统 View 预留出空间, 当设置为 true 时,会预留出状态栏的空间.<br>ContentView, 实质为 ContentFrameLayout, 但是重写了 dispatchFitSystemWindows 方法, 所以对其设置 fitsSystemWindows 无效.<br>ContentParent, 实质为 FitWindowsLinearLayout, 里面第一个 View 是 ViewStubCompat, 如果主题没有设置 title ,它就不会 inflate .第二个 View 就是 ContentView.<br>最后感谢网上各位博主不辞辛苦写出来的干货，让我能够比较简单的复制粘贴他们的代码来检验，写博客真的很累。</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0330/4104.html\" target=\"_blank\" rel=\"external\">Android-transulcent-status-bar总结</a></li>\n<li><a href=\"http://www.jianshu.com/p/140be70b84cd?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">由沉浸式状态栏引发的血案</a></li>\n<li><a href=\"http://www.jianshu.com/p/0acc12c29c1b\" target=\"_blank\" rel=\"external\">Android开发：Translucent System Bar 的最佳实践</a></li>\n<li><a href=\"https://medium.com/google-developers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec\" target=\"_blank\" rel=\"external\">Why would I want to fitsSystemWindows</a></li>\n</ol>\n","excerpt":"<p>沉浸式状态栏是api 19之后引入的，KitKat应该算是一次比较大的更新了，像是Transition，art runtime,storage access FrameWork(这个有空研究下)，另外就是这个被官方称为Full-screen immersive mode的特性了。具体来说，App可以将展示的区域拓展到statusBar的位置了。我觉得直接叫statusBar就好了，大部分人应该也能理解这就是手机上显示”中国移动”还有显示手机电量那一块的长条，宽度是match_parent。高度的话，据说是25dp，然后6.0上给改成了24dp。不过这不是重点","more":"</p>\n<h3 id=\"1-最初的做法\"><a href=\"#1-最初的做法\" class=\"headerlink\" title=\"1.最初的做法\"></a>1.最初的做法</h3><p>看到有人推荐使用<a href=\"https://github.com/jgilfelt/SystemBarTint\">SystemBarTint</a>这个class,刚上来觉得也挺好用的，就是一个java class，直接复制粘贴到项目里，改一下package name，无脑使用即可。原理的话，看过源码后，大致明白是在statusBar的位置添加一个new View，然后持有这个view的引用，接下来就可以做常规的setBackground或者setBackgroundColor了。初始化时的关键代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setupStatusBarView</span><span class=\"params\">(Context context, ViewGroup decorViewGroup)</span> </span>&#123;<span class=\"comment\">//这个decorViewGroup指的是activity.getWindow()</span></div><div class=\"line\">        mStatusBarTintView = <span class=\"keyword\">new</span> View(context);</div><div class=\"line\">        LayoutParams params = <span class=\"keyword\">new</span> LayoutParams(LayoutParams.MATCH_PARENT, mConfig.getStatusBarHeight());</div><div class=\"line\">        params.gravity = Gravity.TOP;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mNavBarAvailable &amp;&amp; !mConfig.isNavigationAtBottom()) &#123;</div><div class=\"line\">            params.rightMargin = mConfig.getNavigationBarWidth();</div><div class=\"line\">        &#125;</div><div class=\"line\">        mStatusBarTintView.setLayoutParams(params);</div><div class=\"line\">        mStatusBarTintView.setBackgroundColor(DEFAULT_TINT_COLOR);</div><div class=\"line\">        mStatusBarTintView.setVisibility(View.GONE);</div><div class=\"line\">        decorViewGroup.addView(mStatusBarTintView);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>一切看起来都很美好</p>\n<h3 id=\"2-直到碰到了fitSystemWindow-ture\"><a href=\"#2-直到碰到了fitSystemWindow-ture\" class=\"headerlink\" title=\"2. 直到碰到了fitSystemWindow = ture\"></a>2. 直到碰到了fitSystemWindow = ture</h3><p>几个月前曾经在项目里写过一个普通的Coordinatelayout内部CollapingToolbarLayout的沉浸式状态栏实现，当时为了赶进度一直试到夜里2点才尝试出在4.4和5.0以上手机都能满意的效果。现在想想有些事还是能够事先搞清楚的好，被动学习的代价实在太大。当时的方法是给Toolbar添加了一个顶部的padding，具体原理也不大清楚。<br>但实际上并不总能一直</br><br>  <img src=\"http://odzl05jxx.bkt.clouddn.com/Trying%20stuff%20Untill%20it%20work.jpg?imageView2/2/w/600\" alt=\"trying stuff utill it work\"></p>\n<h3 id=\"3-使用CollapsingToolbarLayout时的问题\"><a href=\"#3-使用CollapsingToolbarLayout时的问题\" class=\"headerlink\" title=\"3. 使用CollapsingToolbarLayout时的问题\"></a>3. 使用CollapsingToolbarLayout时的问题</h3><ol>\n<li>5.0以上的手机似乎很简单<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CoordinatorLayout</span></div><div class=\"line\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">        <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/coordinateLayout\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/background_light\"</span></div><div class=\"line\">        <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        &gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.AppBarLayout</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/appbarLayout\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"300dp\"</span></div><div class=\"line\">            <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></div><div class=\"line\">            <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">            &gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/collapsingToolbarLayout\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">app:contentScrim</span>=<span class=\"string\">\"?attr/colorPrimary\"</span></div><div class=\"line\">                <span class=\"attr\">app:expandedTitleMarginEnd</span>=<span class=\"string\">\"64dp\"</span></div><div class=\"line\">                <span class=\"attr\">app:expandedTitleMarginStart</span>=<span class=\"string\">\"48dp\"</span></div><div class=\"line\">                <span class=\"attr\">app:layout_scrollFlags</span>=<span class=\"string\">\"scroll|exitUntilCollapsed\"</span></div><div class=\"line\">                &gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\">                    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/backdrop\"</span></div><div class=\"line\">                    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                    <span class=\"attr\">android:scaleType</span>=<span class=\"string\">\"centerCrop\"</span></div><div class=\"line\">                    <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/image_19\"</span></div><div class=\"line\">                    <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"parallax\"</span></div><div class=\"line\">                    <span class=\"attr\">android:fitsSystemWindows</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">                    /&gt;</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.Toolbar</span></div><div class=\"line\">                    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/toolbar\"</span></div><div class=\"line\">                    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?attr/actionBarSize\"</span></div><div class=\"line\">                    <span class=\"attr\">app:layout_collapseMode</span>=<span class=\"string\">\"pin\"</span></div><div class=\"line\">                    <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Light\"</span></div><div class=\"line\">                    /&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.AppBarLayout</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.v4.widget.NestedScrollView</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/nestedScrollView\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_behavior</span>=<span class=\"string\">\"@string/appbar_scrolling_view_behavior\"</span></div><div class=\"line\">            &gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TextView</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:lineSpacingExtra</span>=<span class=\"string\">\"8dp\"</span></div><div class=\"line\">                <span class=\"attr\">android:padding</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">                <span class=\"attr\">android:text</span>=<span class=\"string\">\"@string/newsBody\"</span></div><div class=\"line\">                <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20sp\"</span></div><div class=\"line\">                /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">android.support.v4.widget.NestedScrollView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">android.support.design.widget.FloatingActionButton</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fab\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"@dimen/activity_horizontal_margin\"</span></div><div class=\"line\">            <span class=\"attr\">android:src</span>=<span class=\"string\">\"@android:drawable/ic_menu_slideshow\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_anchor</span>=<span class=\"string\">\"@id/appbarLayout\"</span></div><div class=\"line\">            <span class=\"attr\">app:layout_anchorGravity</span>=<span class=\"string\">\"bottom|right|end\"</span></div><div class=\"line\">            /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>只要分别在CoordinateLayout，AppBarLayout和CollapsingToolbarLayout的xml属性中加上android:fitSystemWindow = “true”<br>java代码里添加一句</p>\n<blockquote>\n<p>getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); //注意下版本判断</p>\n</blockquote>\n<p>或者在当前Activity的values-v19 styles中添加 <item name=\"android:windowTranslucentStatus\">true</item><br>就行了。实际效果就是图片完全展开时可以扩展到statusBar下面，图片收缩起来后可以让Toolbar停在statusBar下面。但同样的代码在4.4的手机上会使得实际绘图区域落到statusBar以下，statusBar位置变成带灰色遮罩的白色背景。</p>\n<h3 id=\"4-fitSystemWindow是什么意思\"><a href=\"#4-fitSystemWindow是什么意思\" class=\"headerlink\" title=\"4. fitSystemWindow是什么意思\"></a>4. fitSystemWindow是什么意思</h3><p>fitSystemWindows属性：<br>官方描述:<br>Boolean internal attribute to adjust view layout based on system windows such as the status bar. If true, adjusts the padding of this view to leave space for the system windows. Will only take effect if this view is in a non-embedded activity.<br>简单来说就是如果设置为true,机会根据statusbar来添加一个padding.<br>假定:<br>布局文件只是一个普通的LinearLayout(fitSystemWindow = false（默认情况）),顶部include一个toolbar(fitSystemWindow = true )<br>就已经可以实现4.4以下，4.4-5.0，5.0以上的各种场景了,(前提，使用Appcompat 的Theme，因为它会使用colorPrimaryDark为statusBar着色)</p>\n<p>但我的问题在于布局文件是<br>CoordinateLayout&gt;  AppBarLyout&gt;  CollapsingToolbarLayout&gt;  Toolbar &amp; ImageView<br>这种情况下，照理说Toolbar应该顶部留有25dp的padding，也就是fitSystemWindow = true（假设就只是这么简单）<a href=\"https://medium.com/google-developers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec#.vx75v2c9p\">然而事实是，fitSystemWindow会让你设置的padding失效</a>,而ImageView需要侵入到statusBar下面，也就是fitSystemWindow = false。<br>那就只要在toolbar的xml中添加fitSystemWindow这个属性好了。编译，运行，5.1手机，Toolbar的小箭头一部分跑到statusBar下面了，感觉就像Toolbar往上移动了25dp(这个目测的哈)，不可取。</p>\n<h3 id=\"5-查找到的一些解决方案\"><a href=\"#5-查找到的一些解决方案\" class=\"headerlink\" title=\"5. 查找到的一些解决方案\"></a>5. 查找到的一些解决方案</h3><p> 主要介绍原理了:</p>\n<ol>\n<li><p>类似于SystemBarTint，在android.R.id.content的View中添加一个 View</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ViewGroup.LayoutParams statusViewLp = <span class=\"keyword\">new</span> ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,</div><div class=\"line\">                    getStatusBarHeight());</div><div class=\"line\">contentView.addView(statusBarView,layoutParams)</div></pre></td></tr></table></figure>\n<p>Activity持有一个PhoneWindow，PhoneWindow持有一个根View，叫DecorView（是一个FrameLayout），DecorView持有一个LinearLayout，在LinearLayout下分配两个FrameLayout，一个给ActionBar（当设置主题为NoActionBar是为ViewStub），一个给ContentView。不管如何，只要我们在LinearLayout的第一个位置插入一个View就可以让ContentView下移了。<a href=\"http://www.jianshu.com/p/140be70b84cd?utm_source=tuicool&amp;utm_medium=referral\">简书作者</a><br>这种方式其实已经无所谓是否需要在xml中fitSystemWindow了，因为都会通过添加最后一个View的方式把状态栏那块给遮住了。用来着色其实挺好的。</p>\n</li>\n</ol>\n<ol>\n<li><p>往android.R.id.content这个View里面添加一个假View,xml中fitSystemWindows</p>\n</li>\n<li><p>往android.R.id.content这个View的parent里面添加一个假View,xml中fitSystemWindows</p>\n</li>\n</ol>\n<h3 id=\"6-我最后实现的解决方案（4-4-5-1均通过）\"><a href=\"#6-我最后实现的解决方案（4-4-5-1均通过）\" class=\"headerlink\" title=\"6.我最后实现的解决方案（4.4,5.1均通过）\"></a>6.我最后实现的解决方案（4.4,5.1均通过）</h3><p><strong>其实整个问题的关键就是你是否想要在statusBar那一块长条的位置画画。。。。</strong><br>一整张imageView的话，当然希望能够把图片延伸到statusBar以下<br>而Toolbar则不需要延伸到statusBar以下。<br>我尝试了给toolbar加上padding  &gt;&gt;失败<br>我尝试了给toolbar加上margin   &gt;&gt;&gt;&gt; 问题终于解决</p>\n<p>所以最后，我的xml文件中删除了所有的fitSystemWindow，在style-v19中添加了该加的东西<br>最后只在onCreate里面添加几段话<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">setSupportActionBar(binding.toolbar);</div><div class=\"line\">getSupportActionBar().setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);  <span class=\"comment\">//这个用于显示返回的小箭头，还得指明parentActivity</span></div><div class=\"line\">getSupportActionBar().setTitle(<span class=\"string\">\"\"</span>);</div><div class=\"line\">CollapsingToolbarLayout.LayoutParams params = (CollapsingToolbarLayout.LayoutParams) binding.toolbar.getLayoutParams();</div><div class=\"line\">params.setMargins(<span class=\"number\">0</span>, Utils.getStatusBarHeight(), <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">//顶部加个margin就好了</span></div><div class=\"line\">binding.toolbar.setLayoutParams(params);</div></pre></td></tr></table></figure></p>\n<p>实际操作可能还要判断非空什么的，但大致意思如此<br>看起来像这样<br>5.1图片展开:<br>  <img src=\"http://odzl05jxx.bkt.clouddn.com/statusbar_5.0_expanded.png?imageView2/2/w/300\" alt=\"5.1模拟器，图片展开\">  </p>\n<p>5.1图片收起:<br>  <img src=\"http://odzl05jxx.bkt.clouddn.com/statusbar_5.0_collapsed.png?imageView2/2/w/300\" alt=\"5.1模拟器，图片收起\">  </p>\n<p>4.4图片展开:<br>  <img src=\"http://odzl05jxx.bkt.clouddn.com/statusbar_4.4_expanded.png?imageView2/2/w/300\" alt=\"4.4模拟器，图片展开\">  </p>\n<p>4.4图片收起:<br>  <img src=\"http://odzl05jxx.bkt.clouddn.com/statusbar_4.4_collapsed.png?imageView2/2/w/300\" alt=\"4.4模拟器，图片收起\">  </p>\n<p>原理就是让整个布局占据statusBar的位置，但把Toolbar往下挪一点（其实也就是<a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0330/4104.html\">这篇文章</a>中所推荐的给contentView的给第一个childView添加marginTop的方法）</p>\n<h3 id=\"7-在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪\"><a href=\"#7-在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪\" class=\"headerlink\" title=\"7.在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪.\"></a>7.在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪.</h3><p>自己测试了一下，在根布局里添加fitSystemWindows = true之后，在Activity的onCreate里面是可以使用ViewCompat.setfitSystems(rootView,false)设置起作用的。但也只限于onCreate的时候。例如添加一个点击事件，在onClick里面setFitSystemWindows，是不会把RootView往下挪的。这种情况就需要一开始就确保fitSystem = false，然后需要往下挪的时候，给设置一个FrameLayout.LayoutParams的TopMargin就可以了。注意来回切换(全屏模式和着色模式之间切换)的时候要看下rootView的getTop,因为MarginTop设置了之后会导致Top!=0。<br>其实fitSystemWindows是在FitSystemWindowLinearLayout中添加Padding起效的，后期操作的Margin只是对其Child ContentFrameLayout进行操作。<br>所以，这种情况下我觉得直接全部弄成fitSystemWindows = false，先把statusBar后面的空间占据了再说，后面再通过手动设置Margin上下挪动。</p>\n<h3 id=\"8-一些不要犯的小错误\"><a href=\"#8-一些不要犯的小错误\" class=\"headerlink\" title=\"8. 一些不要犯的小错误\"></a>8. 一些不要犯的小错误</h3><ul>\n<li>在Theme中添加<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:fitsSystemWindows\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这会导致Toast的文字往上偏移，所以，如果需要使用fitSystemWinow = true的话，请老老实实去xml中写</p>\n<ul>\n<li><p>状态栏那一块如果你不去占据的话，而你又声明了windowTranslucentStatus，v21上默认的颜色应该是colorPrimaryDark(是的，AppCompat帮你照顾好了)v19上就是一片带阴影的白色(AppCompat不会在这个版本上帮你着色statusBar)。</p>\n</li>\n<li><p>6.0以上可以设置statusBar字体的颜色了，这个随便找找就有了</p>\n</li>\n<li><p>Ian Lake在medium上给出了对于fitSystemWindow的权威解释，非常有价值。</p>\n</li>\n</ul>\n<h3 id=\"9-下面这段话可能对于理解window有一定帮助\"><a href=\"#9-下面这段话可能对于理解window有一定帮助\" class=\"headerlink\" title=\"9. 下面这段话可能对于理解window有一定帮助\"></a>9. 下面这段话可能对于理解window有一定帮助</h3><p>fitsSystemWindows, 该属性可以设置是否为系统 View 预留出空间, 当设置为 true 时,会预留出状态栏的空间.<br>ContentView, 实质为 ContentFrameLayout, 但是重写了 dispatchFitSystemWindows 方法, 所以对其设置 fitsSystemWindows 无效.<br>ContentParent, 实质为 FitWindowsLinearLayout, 里面第一个 View 是 ViewStubCompat, 如果主题没有设置 title ,它就不会 inflate .第二个 View 就是 ContentView.<br>最后感谢网上各位博主不辞辛苦写出来的干货，让我能够比较简单的复制粘贴他们的代码来检验，写博客真的很累。</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0330/4104.html\">Android-transulcent-status-bar总结</a></li>\n<li><a href=\"http://www.jianshu.com/p/140be70b84cd?utm_source=tuicool&amp;utm_medium=referral\">由沉浸式状态栏引发的血案</a></li>\n<li><a href=\"http://www.jianshu.com/p/0acc12c29c1b\">Android开发：Translucent System Bar 的最佳实践</a></li>\n<li><a href=\"https://medium.com/google-developers/why-would-i-want-to-fitssystemwindows-4e26d9ce1eec\">Why would I want to fitsSystemWindows</a></li>\n</ol>"},{"title":"使用Loader进行异步数据操作","date":"2016-10-15T11:12:22.000Z","_content":"App中经常有这样的需求:\n进入一个页面，首先查询数据库，如果数据库数据有效，直接使用数据库数据。否则去网络查询数据，网络数据返回后重新加载数据。\n很显然，这里的查询数据库和网络请求都需要放到子线程去操作，异步了。android推荐使用Loader进行数据查询，最大的好处就是Laoder会处理好与生命周期相关的事情，Android Developers推出过关于Loaders的[介绍视频](https://www.youtube.com/watch?v=s4eAtMHU5gI&index=8&list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE)，Loader就是为了解决这种问题而推出的，Loader具有几点好处\n1. 如果Activity挂掉了，Activity中启动了的线程怎么办，如果不处理好有可能导致leak。\n2. activity挂了，而子线程中持有View的强引用，此时再去更新View已经没有意义，View已经不可见了\n3. 这条线程所做的工作，加载的资源都白白浪费了，下次还需要重新加载一遍。\n<!--more-->\n\n### 1. 自定义一个Loader(加载数据类型，Cache处理等)\nLoader的使用就像一个AsyncTask一样，可以提前指定需要在异步线程中做的事情、数据类型以及完成加载后将数据推送到主线程。谷歌给出了一个使用Loader来查询手机上安装的App并显示在一个ListView中的DemoApp，虽然是好几年前的东西了，并且使用的是V4包里的Loader,但还是值得学习。\n首先来看自定义的AppListLoader\n\n```java\npublic class AppListLoader extends AsyncTaskLoader<List<AppEntry>> { //AsynTaskLoader支持泛型，AppEntry是已安装App信息的包装类。\n    private List<AppEntry> mApps;\n    //查询的App列表保存为成员变量\n    final PackageManager mPm;\n    private boolean DEBUG = true;\n    public static final String TAG = AppListLoader.class.getSimpleName();\n\n    //构造函数\n    public AppListLoader(Context ctx) {\n        // Loaders may be used across multiple Activitys (assuming they aren't\n        // bound to the LoaderManager), so NEVER hold a reference to the context\n        // directly. Doing so will cause you to leak an entire Activity's context.\n        // The superclass constructor will store a reference to the Application\n        // Context instead, and can be retrieved with a call to getContext().\n        super(ctx);\n        //第一，这里运行在主线程上；\n        //第二，传进来的context(一般是Activity只是为了获取ApplicationContext)\n        mPm = getContext().getPackageManager();//getContext()返回的是Application的Context。\n    }\n\n    @Override\n    public List<AppEntry> loadInBackground() {\n        if (DEBUG) Log.i(TAG, \"+++ loadInBackground() called! +++\");\n        LogUtil.p(\"\");// 子线程,耗时的工作放到这里\n        // Retrieve all installed applications.\n        List<ApplicationInfo> apps = mPm.getInstalledApplications(0);//PackageManager的方法\n        if (apps == null) {\n            apps = new ArrayList<ApplicationInfo>();\n        }\n        // Create corresponding array of entries and load their labels.\n        List<AppEntry> entries = new ArrayList<AppEntry>(apps.size());\n        for (int i = 0; i < apps.size(); i++) {\n            AppEntry entry = new AppEntry(this, apps.get(i));\n            entry.loadLabel(getContext());\n            entries.add(entry);\n        }\n        // Sort the list.\n        Collections.sort(entries, ALPHA_COMPARATOR);\n        return entries;\n    }\n\n    @Override\n    public void deliverResult(List<AppEntry> apps) {\n        //运行在主线程上\n        if (isReset()) {//这里就类似于AsyncTask的onPostExecute了，把子线程处理好的数据推送到主线程\n            if (DEBUG)\n                Log.w(TAG, \"+++ Warning! An async query came in while the Loader was reset! +++\");\n            // The Loader has been reset; ignore the result and invalidate the data.\n            // This can happen when the Loader is reset while an asynchronous query\n            // is working in the background. That is, when the background thread\n            // finishes its work and attempts to deliver the results to the client,\n            // it will see here that the Loader has been reset and discard any\n            // resources associated with the new data as necessary.\n            if (apps != null) {\n                releaseResources(apps);\n                return;\n            }\n        }//如果调用了reset()方法，说明子线程加载的数据是无效的，释放资源，处理无效数据\n        // Hold a reference to the old data so it doesn't get garbage collected.\n        // We must protect it until the new data has been delivered.\n        List<AppEntry> oldApps = mApps;\n        mApps = apps;\n        if (isStarted()) {// 如果一切正常，即调用了startLoading且stopLoading和reset均为被调用\n            if (DEBUG) Log.i(TAG, \"+++ Delivering results to the LoaderManager for\" +\n                    \" the ListFragment to display! +++\");\n            // If the Loader is in a started state, have the superclass deliver the\n            // results to the client.\n            super.deliverResult(apps);\n        }\n        // Invalidate the old data as we don't need it any more.\n        if (oldApps != null && oldApps != apps) {\n            if (DEBUG) Log.i(TAG, \"+++ Releasing any old data associated with this Loader. +++\");\n            releaseResources(oldApps);\n        }\n    }\n}\n```\n到此，数据加载的Server端算是完成，这里注意调用到了isReset()、isStarted()等方法，这些就是Server端在在处理Client端生命周期是需要注意的，这个后面再说。\n\n### 2. 使用LoaderManager管理Loader\n我们使用LoaderManager在Activity或Fragment中与Loader交互。通常在onCreate或者onActivityCreated中:\n> getSupportedLoaderManager.initLoader()//Activity中\n> getLoaderManager() //Fragment中\n\n这里介绍在Fragment中的使用，因为Loader处理好了与Activity,Fragment甚至Child Fragment的生命周期。\n推荐使用v4包里的Loader，Loader是在Android3.0引入FrameWork中的，但v4包让Loadder在更早的版本上也有相应的API。更重要的是，v4 包中的Loader是伴随着v4包新的release step，也就是说v4包会与时俱进修复其中的bug。\n这一点在medium上有[介绍](https://medium.com/google-developers/making-loading-data-on-android-lifecycle-aware-897e12760832#.wrh1ciyts) 。\n再看一下这个方法\n>  public abstract <D> Loader<D> initLoader(int id, Bundle args,\n            LoaderManager.LoaderCallbacks<D> callback);\n\t\t\t\n\nDemo中使用的是Fragment：\n>  // Initialize a Loader with id '1'. If the Loader with this id already\n            // exists, then the LoaderManager will reuse the existing Loader.\n            getLoaderManager().initLoader(LOADER_ID, null, this);\t\t\t\n\t\t\t\n相对应的Fragment需要implements  LoaderManager.LoaderCallbacks<List<AppEntry>> //注意泛型\n这个接口有三个方法\n```java\n public interface LoaderCallbacks<D> {\n       \n        public Loader<D> onCreateLoader(int id, Bundle args);\n\n       \n        public void onLoadFinished(Loader<D> loader, D data);\n\n       \n        public void onLoaderReset(Loader<D> loader);\n    }\n```\t\t\t\n看一下Demo中是如何实现的\n```java\n   @Override\n        public android.support.v4.content.Loader<List<AppEntry>> onCreateLoader(int id, Bundle args) {\n            if (DEBUG) Log.i(TAG, \"+++ onCreateLoader() called! +++\");\n            return new AppListLoader(getActivity());\n        }\n\n        @Override\n        public void onLoadFinished(android.support.v4.content.Loader<List<AppEntry>> loader, List<AppEntry> data) {\n            if (DEBUG) Log.i(TAG, \"+++ onLoadFinished() called! +++\");\n            mAdapter.setData(data);//加载数据到UI\n\n            if (isResumed()) {\n                setListShown(true);\n            } else {\n                setListShownNoAnimation(true);\n            } \n        }\n\n        @Override\n        public void onLoaderReset(android.support.v4.content.Loader<List<AppEntry>> loader) {\n            if (DEBUG) Log.i(TAG, \"+++ onLoadReset() called! +++\");\n            mAdapter.setData(null);//loader被reset，UI这边需要清除所有与Loader数据相关的引用，但清除数据的任务会由Loader处理好\n        }\n```\n在三个明显的回调中处理好数据绑定到UI及过期数据的清理即可。\n\n### 3. 处理Activity生命周期的问题\n回到server端(Loader),AsyncTaskLoader是一个abstract class，loadInBackground方法已经实现了，但还有几个方法强调必须要复写或者与生命周期相关\n```java\n @Override\n    protected void onStartLoading() {\n        /* Subclasses must implement this to take care of loading their data,\n          as per {@link #startLoading()}.  This is not called by clients directly,\n          but as a result of a call to {@link #startLoading()}.*/\n        //在这里检查一下成员变量中的数据是否不为空，有数据的话，deliverResults\n    }\n\n    @Override\n    protected void onStopLoading() {\n          /*Subclasses must implement this to take care of stopping their loader,\n          as per {@link #stopLoading()}.  This is not called by clients directly,\n          but as a result of a call to {@link #stopLoading()}.\n          This will always be called from the process's main thread.*/\n    }\n\n    @Override\n    protected void onReset() {\n        /* Subclasses must implement this to take care of resetting their loader,\n         as per {@link #reset()}.  This is not called by clients directly,\n         but as a result of a call to {@link #reset()}.\n         This will always be called from the process's main thread.\n         如果调用了destoryLoader或者Loader相关联的Activity/Fragment被destory了\n         所以在Demo中可以看到onReset里面调用了onStopLoading去取消当前任务，同时释放资源，取消广播注册*/\n    }\n\n    @Override\n    public void onCanceled(List<AppEntry> apps) {\n         /* Called if the task was canceled before it was completed.  Gives the class a chance\n          to clean up post-cancellation and to properly dispose of the result.\n         \n          @param data The value that was returned by {@link #loadInBackground}, or null\n          if the task threw {@link OperationCanceledException}.*/\n        //在这里释放资源\n    }\n\n    @Override\n    public void forceLoad() {\n        /*Force an asynchronous load. Unlike {@link #startLoading()} this will ignore a previously\n        loaded data set and load a new one.  This simply calls through to the\n        implementation's {@link #onForceLoad()}.  You generally should only call this\n        when the loader is started -- that is, {@link #isStarted()} returns true.\n        Must be called from the process's main thread.*/\n        //startLoading会直接使用onConfigurationchange之前的Activity中Loader加载的数据，但这里则放弃旧的数据，重新加载，所以isStarted会在这时返回true\n    }\n```\n考虑一下，如果在加载数据过程中数据源发生了变化，比如在扫描已安装App过程中又安装了新的App怎么办？所以这里又注册了两个广播，在onReceive的时候调用\n>     mLoader.onContentChanged();\n//这会直接调用forceLoad（Loader已经started）或者设置一个标志位，让takeContentChanged（）返回true\n> 在onStartLoading中发现这个为true，直接forceLoad\n//接下来进入loadInBackground,完成后进入deliverResult\ndeliverResult首先检查Activity是否destoryed(挂了直接释放资源),没挂的话判断下isStarted(是否一切正常，未调用过stopLoading或reset)，符合条件的话通过super.deliverResult把数据传递出去。接下来判断下之前的旧数据和新数据是否一致，否则释放掉旧数据\n\n整个过程考虑到了数据的有效性，资源的释放，在Loader这一端，通过isReset,isStarted等方法确保了不确定的数据加载过程能够和不确定的生命周期和谐共处。\n网上看到的关于Loader的文章大部分是关于CursorLoader的，也就是和数据库打交道的那一块，这里不细说。主要是目前没有看到太多App中使用这种加载模式，可能确实有点麻烦。在Medium上看到这篇文章，觉得还是有必要做一些记录的。\n\n### 4. 关于性能\n最后我想说的是，AsyncTaskLoader内部使用的还是AsyncTask那一套，关于AsyncTask的串行和并行的讨论网上有很多。于是我看了下AsyncTaskLoader中最终调用AsyncTask的execute方法:\n>  mTask.executeOnExecutor(mExecutor, (Void[]) null);\n\n至于这个mExecutor的本质:\n\n> public static final Executor THREAD_POOL_EXECUTOR\n            = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,\n                    TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory); \nCORE_POOL_SIZE = 5\n嗯，并行的线程池，性能应该还不错。\n学过rxjava，是否rxjava会是一种比loader更好的加载数据的方式呢\n\n### Reference\n\n1. [rxLoader](http://huxian99.github.io/2015/10/28/RxJava%E7%9A%84Android%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-RxJava%E5%AE%9E%E6%88%98-%E4%BA%8C/)\n2. [making loading data on android lifecycle aware](https://medium.com/google-developers/making-loading-data-on-android-lifecycle-aware-897e12760832#.btjs9ady6)\n3. [AppListLoader](https://github.com/alexjlockwood/adp-applistloader)","source":"_posts/2016-10-15-using-loader-in-android-app.md","raw":"---\ntitle: 使用Loader进行异步数据操作\ndate: 2016-10-15 19:12:22\ntags:\n---\nApp中经常有这样的需求:\n进入一个页面，首先查询数据库，如果数据库数据有效，直接使用数据库数据。否则去网络查询数据，网络数据返回后重新加载数据。\n很显然，这里的查询数据库和网络请求都需要放到子线程去操作，异步了。android推荐使用Loader进行数据查询，最大的好处就是Laoder会处理好与生命周期相关的事情，Android Developers推出过关于Loaders的[介绍视频](https://www.youtube.com/watch?v=s4eAtMHU5gI&index=8&list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE)，Loader就是为了解决这种问题而推出的，Loader具有几点好处\n1. 如果Activity挂掉了，Activity中启动了的线程怎么办，如果不处理好有可能导致leak。\n2. activity挂了，而子线程中持有View的强引用，此时再去更新View已经没有意义，View已经不可见了\n3. 这条线程所做的工作，加载的资源都白白浪费了，下次还需要重新加载一遍。\n<!--more-->\n\n### 1. 自定义一个Loader(加载数据类型，Cache处理等)\nLoader的使用就像一个AsyncTask一样，可以提前指定需要在异步线程中做的事情、数据类型以及完成加载后将数据推送到主线程。谷歌给出了一个使用Loader来查询手机上安装的App并显示在一个ListView中的DemoApp，虽然是好几年前的东西了，并且使用的是V4包里的Loader,但还是值得学习。\n首先来看自定义的AppListLoader\n\n```java\npublic class AppListLoader extends AsyncTaskLoader<List<AppEntry>> { //AsynTaskLoader支持泛型，AppEntry是已安装App信息的包装类。\n    private List<AppEntry> mApps;\n    //查询的App列表保存为成员变量\n    final PackageManager mPm;\n    private boolean DEBUG = true;\n    public static final String TAG = AppListLoader.class.getSimpleName();\n\n    //构造函数\n    public AppListLoader(Context ctx) {\n        // Loaders may be used across multiple Activitys (assuming they aren't\n        // bound to the LoaderManager), so NEVER hold a reference to the context\n        // directly. Doing so will cause you to leak an entire Activity's context.\n        // The superclass constructor will store a reference to the Application\n        // Context instead, and can be retrieved with a call to getContext().\n        super(ctx);\n        //第一，这里运行在主线程上；\n        //第二，传进来的context(一般是Activity只是为了获取ApplicationContext)\n        mPm = getContext().getPackageManager();//getContext()返回的是Application的Context。\n    }\n\n    @Override\n    public List<AppEntry> loadInBackground() {\n        if (DEBUG) Log.i(TAG, \"+++ loadInBackground() called! +++\");\n        LogUtil.p(\"\");// 子线程,耗时的工作放到这里\n        // Retrieve all installed applications.\n        List<ApplicationInfo> apps = mPm.getInstalledApplications(0);//PackageManager的方法\n        if (apps == null) {\n            apps = new ArrayList<ApplicationInfo>();\n        }\n        // Create corresponding array of entries and load their labels.\n        List<AppEntry> entries = new ArrayList<AppEntry>(apps.size());\n        for (int i = 0; i < apps.size(); i++) {\n            AppEntry entry = new AppEntry(this, apps.get(i));\n            entry.loadLabel(getContext());\n            entries.add(entry);\n        }\n        // Sort the list.\n        Collections.sort(entries, ALPHA_COMPARATOR);\n        return entries;\n    }\n\n    @Override\n    public void deliverResult(List<AppEntry> apps) {\n        //运行在主线程上\n        if (isReset()) {//这里就类似于AsyncTask的onPostExecute了，把子线程处理好的数据推送到主线程\n            if (DEBUG)\n                Log.w(TAG, \"+++ Warning! An async query came in while the Loader was reset! +++\");\n            // The Loader has been reset; ignore the result and invalidate the data.\n            // This can happen when the Loader is reset while an asynchronous query\n            // is working in the background. That is, when the background thread\n            // finishes its work and attempts to deliver the results to the client,\n            // it will see here that the Loader has been reset and discard any\n            // resources associated with the new data as necessary.\n            if (apps != null) {\n                releaseResources(apps);\n                return;\n            }\n        }//如果调用了reset()方法，说明子线程加载的数据是无效的，释放资源，处理无效数据\n        // Hold a reference to the old data so it doesn't get garbage collected.\n        // We must protect it until the new data has been delivered.\n        List<AppEntry> oldApps = mApps;\n        mApps = apps;\n        if (isStarted()) {// 如果一切正常，即调用了startLoading且stopLoading和reset均为被调用\n            if (DEBUG) Log.i(TAG, \"+++ Delivering results to the LoaderManager for\" +\n                    \" the ListFragment to display! +++\");\n            // If the Loader is in a started state, have the superclass deliver the\n            // results to the client.\n            super.deliverResult(apps);\n        }\n        // Invalidate the old data as we don't need it any more.\n        if (oldApps != null && oldApps != apps) {\n            if (DEBUG) Log.i(TAG, \"+++ Releasing any old data associated with this Loader. +++\");\n            releaseResources(oldApps);\n        }\n    }\n}\n```\n到此，数据加载的Server端算是完成，这里注意调用到了isReset()、isStarted()等方法，这些就是Server端在在处理Client端生命周期是需要注意的，这个后面再说。\n\n### 2. 使用LoaderManager管理Loader\n我们使用LoaderManager在Activity或Fragment中与Loader交互。通常在onCreate或者onActivityCreated中:\n> getSupportedLoaderManager.initLoader()//Activity中\n> getLoaderManager() //Fragment中\n\n这里介绍在Fragment中的使用，因为Loader处理好了与Activity,Fragment甚至Child Fragment的生命周期。\n推荐使用v4包里的Loader，Loader是在Android3.0引入FrameWork中的，但v4包让Loadder在更早的版本上也有相应的API。更重要的是，v4 包中的Loader是伴随着v4包新的release step，也就是说v4包会与时俱进修复其中的bug。\n这一点在medium上有[介绍](https://medium.com/google-developers/making-loading-data-on-android-lifecycle-aware-897e12760832#.wrh1ciyts) 。\n再看一下这个方法\n>  public abstract <D> Loader<D> initLoader(int id, Bundle args,\n            LoaderManager.LoaderCallbacks<D> callback);\n\t\t\t\n\nDemo中使用的是Fragment：\n>  // Initialize a Loader with id '1'. If the Loader with this id already\n            // exists, then the LoaderManager will reuse the existing Loader.\n            getLoaderManager().initLoader(LOADER_ID, null, this);\t\t\t\n\t\t\t\n相对应的Fragment需要implements  LoaderManager.LoaderCallbacks<List<AppEntry>> //注意泛型\n这个接口有三个方法\n```java\n public interface LoaderCallbacks<D> {\n       \n        public Loader<D> onCreateLoader(int id, Bundle args);\n\n       \n        public void onLoadFinished(Loader<D> loader, D data);\n\n       \n        public void onLoaderReset(Loader<D> loader);\n    }\n```\t\t\t\n看一下Demo中是如何实现的\n```java\n   @Override\n        public android.support.v4.content.Loader<List<AppEntry>> onCreateLoader(int id, Bundle args) {\n            if (DEBUG) Log.i(TAG, \"+++ onCreateLoader() called! +++\");\n            return new AppListLoader(getActivity());\n        }\n\n        @Override\n        public void onLoadFinished(android.support.v4.content.Loader<List<AppEntry>> loader, List<AppEntry> data) {\n            if (DEBUG) Log.i(TAG, \"+++ onLoadFinished() called! +++\");\n            mAdapter.setData(data);//加载数据到UI\n\n            if (isResumed()) {\n                setListShown(true);\n            } else {\n                setListShownNoAnimation(true);\n            } \n        }\n\n        @Override\n        public void onLoaderReset(android.support.v4.content.Loader<List<AppEntry>> loader) {\n            if (DEBUG) Log.i(TAG, \"+++ onLoadReset() called! +++\");\n            mAdapter.setData(null);//loader被reset，UI这边需要清除所有与Loader数据相关的引用，但清除数据的任务会由Loader处理好\n        }\n```\n在三个明显的回调中处理好数据绑定到UI及过期数据的清理即可。\n\n### 3. 处理Activity生命周期的问题\n回到server端(Loader),AsyncTaskLoader是一个abstract class，loadInBackground方法已经实现了，但还有几个方法强调必须要复写或者与生命周期相关\n```java\n @Override\n    protected void onStartLoading() {\n        /* Subclasses must implement this to take care of loading their data,\n          as per {@link #startLoading()}.  This is not called by clients directly,\n          but as a result of a call to {@link #startLoading()}.*/\n        //在这里检查一下成员变量中的数据是否不为空，有数据的话，deliverResults\n    }\n\n    @Override\n    protected void onStopLoading() {\n          /*Subclasses must implement this to take care of stopping their loader,\n          as per {@link #stopLoading()}.  This is not called by clients directly,\n          but as a result of a call to {@link #stopLoading()}.\n          This will always be called from the process's main thread.*/\n    }\n\n    @Override\n    protected void onReset() {\n        /* Subclasses must implement this to take care of resetting their loader,\n         as per {@link #reset()}.  This is not called by clients directly,\n         but as a result of a call to {@link #reset()}.\n         This will always be called from the process's main thread.\n         如果调用了destoryLoader或者Loader相关联的Activity/Fragment被destory了\n         所以在Demo中可以看到onReset里面调用了onStopLoading去取消当前任务，同时释放资源，取消广播注册*/\n    }\n\n    @Override\n    public void onCanceled(List<AppEntry> apps) {\n         /* Called if the task was canceled before it was completed.  Gives the class a chance\n          to clean up post-cancellation and to properly dispose of the result.\n         \n          @param data The value that was returned by {@link #loadInBackground}, or null\n          if the task threw {@link OperationCanceledException}.*/\n        //在这里释放资源\n    }\n\n    @Override\n    public void forceLoad() {\n        /*Force an asynchronous load. Unlike {@link #startLoading()} this will ignore a previously\n        loaded data set and load a new one.  This simply calls through to the\n        implementation's {@link #onForceLoad()}.  You generally should only call this\n        when the loader is started -- that is, {@link #isStarted()} returns true.\n        Must be called from the process's main thread.*/\n        //startLoading会直接使用onConfigurationchange之前的Activity中Loader加载的数据，但这里则放弃旧的数据，重新加载，所以isStarted会在这时返回true\n    }\n```\n考虑一下，如果在加载数据过程中数据源发生了变化，比如在扫描已安装App过程中又安装了新的App怎么办？所以这里又注册了两个广播，在onReceive的时候调用\n>     mLoader.onContentChanged();\n//这会直接调用forceLoad（Loader已经started）或者设置一个标志位，让takeContentChanged（）返回true\n> 在onStartLoading中发现这个为true，直接forceLoad\n//接下来进入loadInBackground,完成后进入deliverResult\ndeliverResult首先检查Activity是否destoryed(挂了直接释放资源),没挂的话判断下isStarted(是否一切正常，未调用过stopLoading或reset)，符合条件的话通过super.deliverResult把数据传递出去。接下来判断下之前的旧数据和新数据是否一致，否则释放掉旧数据\n\n整个过程考虑到了数据的有效性，资源的释放，在Loader这一端，通过isReset,isStarted等方法确保了不确定的数据加载过程能够和不确定的生命周期和谐共处。\n网上看到的关于Loader的文章大部分是关于CursorLoader的，也就是和数据库打交道的那一块，这里不细说。主要是目前没有看到太多App中使用这种加载模式，可能确实有点麻烦。在Medium上看到这篇文章，觉得还是有必要做一些记录的。\n\n### 4. 关于性能\n最后我想说的是，AsyncTaskLoader内部使用的还是AsyncTask那一套，关于AsyncTask的串行和并行的讨论网上有很多。于是我看了下AsyncTaskLoader中最终调用AsyncTask的execute方法:\n>  mTask.executeOnExecutor(mExecutor, (Void[]) null);\n\n至于这个mExecutor的本质:\n\n> public static final Executor THREAD_POOL_EXECUTOR\n            = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,\n                    TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory); \nCORE_POOL_SIZE = 5\n嗯，并行的线程池，性能应该还不错。\n学过rxjava，是否rxjava会是一种比loader更好的加载数据的方式呢\n\n### Reference\n\n1. [rxLoader](http://huxian99.github.io/2015/10/28/RxJava%E7%9A%84Android%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-RxJava%E5%AE%9E%E6%88%98-%E4%BA%8C/)\n2. [making loading data on android lifecycle aware](https://medium.com/google-developers/making-loading-data-on-android-lifecycle-aware-897e12760832#.btjs9ady6)\n3. [AppListLoader](https://github.com/alexjlockwood/adp-applistloader)","slug":"2016-10-15-using-loader-in-android-app","published":1,"updated":"2016-10-23T10:39:34.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzlb00057gvrhvekilgn","content":"<p>App中经常有这样的需求:<br>进入一个页面，首先查询数据库，如果数据库数据有效，直接使用数据库数据。否则去网络查询数据，网络数据返回后重新加载数据。<br>很显然，这里的查询数据库和网络请求都需要放到子线程去操作，异步了。android推荐使用Loader进行数据查询，最大的好处就是Laoder会处理好与生命周期相关的事情，Android Developers推出过关于Loaders的<a href=\"https://www.youtube.com/watch?v=s4eAtMHU5gI&amp;index=8&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\" target=\"_blank\" rel=\"external\">介绍视频</a>，Loader就是为了解决这种问题而推出的，Loader具有几点好处</p>\n<ol>\n<li>如果Activity挂掉了，Activity中启动了的线程怎么办，如果不处理好有可能导致leak。</li>\n<li>activity挂了，而子线程中持有View的强引用，此时再去更新View已经没有意义，View已经不可见了</li>\n<li>这条线程所做的工作，加载的资源都白白浪费了，下次还需要重新加载一遍。<a id=\"more\"></a>\n</li>\n</ol>\n<h3 id=\"1-自定义一个Loader-加载数据类型，Cache处理等\"><a href=\"#1-自定义一个Loader-加载数据类型，Cache处理等\" class=\"headerlink\" title=\"1. 自定义一个Loader(加载数据类型，Cache处理等)\"></a>1. 自定义一个Loader(加载数据类型，Cache处理等)</h3><p>Loader的使用就像一个AsyncTask一样，可以提前指定需要在异步线程中做的事情、数据类型以及完成加载后将数据推送到主线程。谷歌给出了一个使用Loader来查询手机上安装的App并显示在一个ListView中的DemoApp，虽然是好几年前的东西了，并且使用的是V4包里的Loader,但还是值得学习。<br>首先来看自定义的AppListLoader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppListLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTaskLoader</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">AppEntry</span>&gt;&gt; </span>&#123; <span class=\"comment\">//AsynTaskLoader支持泛型，AppEntry是已安装App信息的包装类。</span></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;AppEntry&gt; mApps;</div><div class=\"line\">    <span class=\"comment\">//查询的App列表保存为成员变量</span></div><div class=\"line\">    <span class=\"keyword\">final</span> PackageManager mPm;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = AppListLoader.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AppListLoader</span><span class=\"params\">(Context ctx)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Loaders may be used across multiple Activitys (assuming they aren't</span></div><div class=\"line\">        <span class=\"comment\">// bound to the LoaderManager), so NEVER hold a reference to the context</span></div><div class=\"line\">        <span class=\"comment\">// directly. Doing so will cause you to leak an entire Activity's context.</span></div><div class=\"line\">        <span class=\"comment\">// The superclass constructor will store a reference to the Application</span></div><div class=\"line\">        <span class=\"comment\">// Context instead, and can be retrieved with a call to getContext().</span></div><div class=\"line\">        <span class=\"keyword\">super</span>(ctx);</div><div class=\"line\">        <span class=\"comment\">//第一，这里运行在主线程上；</span></div><div class=\"line\">        <span class=\"comment\">//第二，传进来的context(一般是Activity只是为了获取ApplicationContext)</span></div><div class=\"line\">        mPm = getContext().getPackageManager();<span class=\"comment\">//getContext()返回的是Application的Context。</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;AppEntry&gt; <span class=\"title\">loadInBackground</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ loadInBackground() called! +++\"</span>);</div><div class=\"line\">        LogUtil.p(<span class=\"string\">\"\"</span>);<span class=\"comment\">// 子线程,耗时的工作放到这里</span></div><div class=\"line\">        <span class=\"comment\">// Retrieve all installed applications.</span></div><div class=\"line\">        List&lt;ApplicationInfo&gt; apps = mPm.getInstalledApplications(<span class=\"number\">0</span>);<span class=\"comment\">//PackageManager的方法</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (apps == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            apps = <span class=\"keyword\">new</span> ArrayList&lt;ApplicationInfo&gt;();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// Create corresponding array of entries and load their labels.</span></div><div class=\"line\">        List&lt;AppEntry&gt; entries = <span class=\"keyword\">new</span> ArrayList&lt;AppEntry&gt;(apps.size());</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; apps.size(); i++) &#123;</div><div class=\"line\">            AppEntry entry = <span class=\"keyword\">new</span> AppEntry(<span class=\"keyword\">this</span>, apps.get(i));</div><div class=\"line\">            entry.loadLabel(getContext());</div><div class=\"line\">            entries.add(entry);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// Sort the list.</span></div><div class=\"line\">        Collections.sort(entries, ALPHA_COMPARATOR);</div><div class=\"line\">        <span class=\"keyword\">return</span> entries;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverResult</span><span class=\"params\">(List&lt;AppEntry&gt; apps)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//运行在主线程上</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (isReset()) &#123;<span class=\"comment\">//这里就类似于AsyncTask的onPostExecute了，把子线程处理好的数据推送到主线程</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG)</div><div class=\"line\">                Log.w(TAG, <span class=\"string\">\"+++ Warning! An async query came in while the Loader was reset! +++\"</span>);</div><div class=\"line\">            <span class=\"comment\">// The Loader has been reset; ignore the result and invalidate the data.</span></div><div class=\"line\">            <span class=\"comment\">// This can happen when the Loader is reset while an asynchronous query</span></div><div class=\"line\">            <span class=\"comment\">// is working in the background. That is, when the background thread</span></div><div class=\"line\">            <span class=\"comment\">// finishes its work and attempts to deliver the results to the client,</span></div><div class=\"line\">            <span class=\"comment\">// it will see here that the Loader has been reset and discard any</span></div><div class=\"line\">            <span class=\"comment\">// resources associated with the new data as necessary.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (apps != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                releaseResources(apps);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"comment\">//如果调用了reset()方法，说明子线程加载的数据是无效的，释放资源，处理无效数据</span></div><div class=\"line\">        <span class=\"comment\">// Hold a reference to the old data so it doesn't get garbage collected.</span></div><div class=\"line\">        <span class=\"comment\">// We must protect it until the new data has been delivered.</span></div><div class=\"line\">        List&lt;AppEntry&gt; oldApps = mApps;</div><div class=\"line\">        mApps = apps;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isStarted()) &#123;<span class=\"comment\">// 如果一切正常，即调用了startLoading且stopLoading和reset均为被调用</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ Delivering results to the LoaderManager for\"</span> +</div><div class=\"line\">                    <span class=\"string\">\" the ListFragment to display! +++\"</span>);</div><div class=\"line\">            <span class=\"comment\">// If the Loader is in a started state, have the superclass deliver the</span></div><div class=\"line\">            <span class=\"comment\">// results to the client.</span></div><div class=\"line\">            <span class=\"keyword\">super</span>.deliverResult(apps);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// Invalidate the old data as we don't need it any more.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (oldApps != <span class=\"keyword\">null</span> &amp;&amp; oldApps != apps) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ Releasing any old data associated with this Loader. +++\"</span>);</div><div class=\"line\">            releaseResources(oldApps);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到此，数据加载的Server端算是完成，这里注意调用到了isReset()、isStarted()等方法，这些就是Server端在在处理Client端生命周期是需要注意的，这个后面再说。</p>\n<h3 id=\"2-使用LoaderManager管理Loader\"><a href=\"#2-使用LoaderManager管理Loader\" class=\"headerlink\" title=\"2. 使用LoaderManager管理Loader\"></a>2. 使用LoaderManager管理Loader</h3><p>我们使用LoaderManager在Activity或Fragment中与Loader交互。通常在onCreate或者onActivityCreated中:</p>\n<blockquote>\n<p>getSupportedLoaderManager.initLoader()//Activity中<br>getLoaderManager() //Fragment中</p>\n</blockquote>\n<p>这里介绍在Fragment中的使用，因为Loader处理好了与Activity,Fragment甚至Child Fragment的生命周期。<br>推荐使用v4包里的Loader，Loader是在Android3.0引入FrameWork中的，但v4包让Loadder在更早的版本上也有相应的API。更重要的是，v4 包中的Loader是伴随着v4包新的release step，也就是说v4包会与时俱进修复其中的bug。<br>这一点在medium上有<a href=\"https://medium.com/google-developers/making-loading-data-on-android-lifecycle-aware-897e12760832#.wrh1ciyts\" target=\"_blank\" rel=\"external\">介绍</a> 。<br>再看一下这个方法</p>\n<blockquote>\n<p> public abstract <d> Loader<d> initLoader(int id, Bundle args,<br>            LoaderManager.LoaderCallbacks<d> callback);</d></d></d></p>\n</blockquote>\n<p>Demo中使用的是Fragment：</p>\n<blockquote>\n<p> // Initialize a Loader with id ‘1’. If the Loader with this id already<br>            // exists, then the LoaderManager will reuse the existing Loader.<br>            getLoaderManager().initLoader(LOADER_ID, null, this);            </p>\n</blockquote>\n<p>相对应的Fragment需要implements  LoaderManager.LoaderCallbacks<list<appentry>&gt; //注意泛型<br>这个接口有三个方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoaderCallbacks</span>&lt;<span class=\"title\">D</span>&gt; </span>&#123;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Loader&lt;D&gt; <span class=\"title\">onCreateLoader</span><span class=\"params\">(<span class=\"keyword\">int</span> id, Bundle args)</span></span>;</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFinished</span><span class=\"params\">(Loader&lt;D&gt; loader, D data)</span></span>;</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoaderReset</span><span class=\"params\">(Loader&lt;D&gt; loader)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">```\t\t\t</div><div class=\"line\">看一下Demo中是如何实现的</div><div class=\"line\">```java</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> android.support.v4.content.Loader&lt;List&lt;AppEntry&gt;&gt; onCreateLoader(<span class=\"keyword\">int</span> id, Bundle args) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ onCreateLoader() called! +++\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AppListLoader(getActivity());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFinished</span><span class=\"params\">(android.support.v4.content.Loader&lt;List&lt;AppEntry&gt;&gt; loader, List&lt;AppEntry&gt; data)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ onLoadFinished() called! +++\"</span>);</div><div class=\"line\">            mAdapter.setData(data);<span class=\"comment\">//加载数据到UI</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (isResumed()) &#123;</div><div class=\"line\">                setListShown(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                setListShownNoAnimation(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; </div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoaderReset</span><span class=\"params\">(android.support.v4.content.Loader&lt;List&lt;AppEntry&gt;&gt; loader)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ onLoadReset() called! +++\"</span>);</div><div class=\"line\">            mAdapter.setData(<span class=\"keyword\">null</span>);<span class=\"comment\">//loader被reset，UI这边需要清除所有与Loader数据相关的引用，但清除数据的任务会由Loader处理好</span></div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></list<appentry></p>\n<p>在三个明显的回调中处理好数据绑定到UI及过期数据的清理即可。</p>\n<h3 id=\"3-处理Activity生命周期的问题\"><a href=\"#3-处理Activity生命周期的问题\" class=\"headerlink\" title=\"3. 处理Activity生命周期的问题\"></a>3. 处理Activity生命周期的问题</h3><p>回到server端(Loader),AsyncTaskLoader是一个abstract class，loadInBackground方法已经实现了，但还有几个方法强调必须要复写或者与生命周期相关<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartLoading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">/* Subclasses must implement this to take care of loading their data,</span></div><div class=\"line\">         as per &#123;@link #startLoading()&#125;.  This is not called by clients directly,</div><div class=\"line\">         but as a result of a call to &#123;@link #startLoading()&#125;.*/</div><div class=\"line\">       <span class=\"comment\">//在这里检查一下成员变量中的数据是否不为空，有数据的话，deliverResults</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStopLoading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         <span class=\"comment\">/*Subclasses must implement this to take care of stopping their loader,</span></div><div class=\"line\">         as per &#123;@link #stopLoading()&#125;.  This is not called by clients directly,</div><div class=\"line\">         but as a result of a call to &#123;@link #stopLoading()&#125;.</div><div class=\"line\">         This will always be called from the process's main thread.*/</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onReset</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">/* Subclasses must implement this to take care of resetting their loader,</span></div><div class=\"line\">        as per &#123;@link #reset()&#125;.  This is not called by clients directly,</div><div class=\"line\">        but as a result of a call to &#123;@link #reset()&#125;.</div><div class=\"line\">        This will always be called from the process's main thread.</div><div class=\"line\">        如果调用了destoryLoader或者Loader相关联的Activity/Fragment被destory了</div><div class=\"line\">        所以在Demo中可以看到onReset里面调用了onStopLoading去取消当前任务，同时释放资源，取消广播注册*/</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCanceled</span><span class=\"params\">(List&lt;AppEntry&gt; apps)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/* Called if the task was canceled before it was completed.  Gives the class a chance</span></div><div class=\"line\">         to clean up post-cancellation and to properly dispose of the result.</div><div class=\"line\">        </div><div class=\"line\">         @param data The value that was returned by &#123;@link #loadInBackground&#125;, or null</div><div class=\"line\">         if the task threw &#123;@link OperationCanceledException&#125;.*/</div><div class=\"line\">       <span class=\"comment\">//在这里释放资源</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forceLoad</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">/*Force an asynchronous load. Unlike &#123;@link #startLoading()&#125; this will ignore a previously</span></div><div class=\"line\">       loaded data set and load a new one.  This simply calls through to the</div><div class=\"line\">       implementation's &#123;@link #onForceLoad()&#125;.  You generally should only call this</div><div class=\"line\">       when the loader is started -- that is, &#123;@link #isStarted()&#125; returns true.</div><div class=\"line\">       Must be called from the process's main thread.*/</div><div class=\"line\">       <span class=\"comment\">//startLoading会直接使用onConfigurationchange之前的Activity中Loader加载的数据，但这里则放弃旧的数据，重新加载，所以isStarted会在这时返回true</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>考虑一下，如果在加载数据过程中数据源发生了变化，比如在扫描已安装App过程中又安装了新的App怎么办？所以这里又注册了两个广播，在onReceive的时候调用</p>\n<blockquote>\n<pre><code>mLoader.onContentChanged();\n</code></pre><p>//这会直接调用forceLoad（Loader已经started）或者设置一个标志位，让takeContentChanged（）返回true<br>在onStartLoading中发现这个为true，直接forceLoad<br>//接下来进入loadInBackground,完成后进入deliverResult<br>deliverResult首先检查Activity是否destoryed(挂了直接释放资源),没挂的话判断下isStarted(是否一切正常，未调用过stopLoading或reset)，符合条件的话通过super.deliverResult把数据传递出去。接下来判断下之前的旧数据和新数据是否一致，否则释放掉旧数据</p>\n</blockquote>\n<p>整个过程考虑到了数据的有效性，资源的释放，在Loader这一端，通过isReset,isStarted等方法确保了不确定的数据加载过程能够和不确定的生命周期和谐共处。<br>网上看到的关于Loader的文章大部分是关于CursorLoader的，也就是和数据库打交道的那一块，这里不细说。主要是目前没有看到太多App中使用这种加载模式，可能确实有点麻烦。在Medium上看到这篇文章，觉得还是有必要做一些记录的。</p>\n<h3 id=\"4-关于性能\"><a href=\"#4-关于性能\" class=\"headerlink\" title=\"4. 关于性能\"></a>4. 关于性能</h3><p>最后我想说的是，AsyncTaskLoader内部使用的还是AsyncTask那一套，关于AsyncTask的串行和并行的讨论网上有很多。于是我看了下AsyncTaskLoader中最终调用AsyncTask的execute方法:</p>\n<blockquote>\n<p> mTask.executeOnExecutor(mExecutor, (Void[]) null);</p>\n</blockquote>\n<p>至于这个mExecutor的本质:</p>\n<blockquote>\n<p>public static final Executor THREAD_POOL_EXECUTOR<br>            = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,<br>                    TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);<br>CORE_POOL_SIZE = 5<br>嗯，并行的线程池，性能应该还不错。<br>学过rxjava，是否rxjava会是一种比loader更好的加载数据的方式呢</p>\n</blockquote>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"http://huxian99.github.io/2015/10/28/RxJava%E7%9A%84Android%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-RxJava%E5%AE%9E%E6%88%98-%E4%BA%8C/\" target=\"_blank\" rel=\"external\">rxLoader</a></li>\n<li><a href=\"https://medium.com/google-developers/making-loading-data-on-android-lifecycle-aware-897e12760832#.btjs9ady6\" target=\"_blank\" rel=\"external\">making loading data on android lifecycle aware</a></li>\n<li><a href=\"https://github.com/alexjlockwood/adp-applistloader\" target=\"_blank\" rel=\"external\">AppListLoader</a></li>\n</ol>\n","excerpt":"<p>App中经常有这样的需求:<br>进入一个页面，首先查询数据库，如果数据库数据有效，直接使用数据库数据。否则去网络查询数据，网络数据返回后重新加载数据。<br>很显然，这里的查询数据库和网络请求都需要放到子线程去操作，异步了。android推荐使用Loader进行数据查询，最大的好处就是Laoder会处理好与生命周期相关的事情，Android Developers推出过关于Loaders的<a href=\"https://www.youtube.com/watch?v=s4eAtMHU5gI&amp;index=8&amp;list=PLWz5rJ2EKKc9CBxr3BVjPTPoDPLdPIFCE\">介绍视频</a>，Loader就是为了解决这种问题而推出的，Loader具有几点好处</p>\n<ol>\n<li>如果Activity挂掉了，Activity中启动了的线程怎么办，如果不处理好有可能导致leak。</li>\n<li>activity挂了，而子线程中持有View的强引用，此时再去更新View已经没有意义，View已经不可见了</li>\n<li>这条线程所做的工作，加载的资源都白白浪费了，下次还需要重新加载一遍。","more":"</li>\n</ol>\n<h3 id=\"1-自定义一个Loader-加载数据类型，Cache处理等\"><a href=\"#1-自定义一个Loader-加载数据类型，Cache处理等\" class=\"headerlink\" title=\"1. 自定义一个Loader(加载数据类型，Cache处理等)\"></a>1. 自定义一个Loader(加载数据类型，Cache处理等)</h3><p>Loader的使用就像一个AsyncTask一样，可以提前指定需要在异步线程中做的事情、数据类型以及完成加载后将数据推送到主线程。谷歌给出了一个使用Loader来查询手机上安装的App并显示在一个ListView中的DemoApp，虽然是好几年前的东西了，并且使用的是V4包里的Loader,但还是值得学习。<br>首先来看自定义的AppListLoader</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppListLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTaskLoader</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">AppEntry</span>&gt;&gt; </span>&#123; <span class=\"comment\">//AsynTaskLoader支持泛型，AppEntry是已安装App信息的包装类。</span></div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;AppEntry&gt; mApps;</div><div class=\"line\">    <span class=\"comment\">//查询的App列表保存为成员变量</span></div><div class=\"line\">    <span class=\"keyword\">final</span> PackageManager mPm;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = AppListLoader.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AppListLoader</span><span class=\"params\">(Context ctx)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Loaders may be used across multiple Activitys (assuming they aren't</span></div><div class=\"line\">        <span class=\"comment\">// bound to the LoaderManager), so NEVER hold a reference to the context</span></div><div class=\"line\">        <span class=\"comment\">// directly. Doing so will cause you to leak an entire Activity's context.</span></div><div class=\"line\">        <span class=\"comment\">// The superclass constructor will store a reference to the Application</span></div><div class=\"line\">        <span class=\"comment\">// Context instead, and can be retrieved with a call to getContext().</span></div><div class=\"line\">        <span class=\"keyword\">super</span>(ctx);</div><div class=\"line\">        <span class=\"comment\">//第一，这里运行在主线程上；</span></div><div class=\"line\">        <span class=\"comment\">//第二，传进来的context(一般是Activity只是为了获取ApplicationContext)</span></div><div class=\"line\">        mPm = getContext().getPackageManager();<span class=\"comment\">//getContext()返回的是Application的Context。</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;AppEntry&gt; <span class=\"title\">loadInBackground</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ loadInBackground() called! +++\"</span>);</div><div class=\"line\">        LogUtil.p(<span class=\"string\">\"\"</span>);<span class=\"comment\">// 子线程,耗时的工作放到这里</span></div><div class=\"line\">        <span class=\"comment\">// Retrieve all installed applications.</span></div><div class=\"line\">        List&lt;ApplicationInfo&gt; apps = mPm.getInstalledApplications(<span class=\"number\">0</span>);<span class=\"comment\">//PackageManager的方法</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (apps == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            apps = <span class=\"keyword\">new</span> ArrayList&lt;ApplicationInfo&gt;();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// Create corresponding array of entries and load their labels.</span></div><div class=\"line\">        List&lt;AppEntry&gt; entries = <span class=\"keyword\">new</span> ArrayList&lt;AppEntry&gt;(apps.size());</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; apps.size(); i++) &#123;</div><div class=\"line\">            AppEntry entry = <span class=\"keyword\">new</span> AppEntry(<span class=\"keyword\">this</span>, apps.get(i));</div><div class=\"line\">            entry.loadLabel(getContext());</div><div class=\"line\">            entries.add(entry);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// Sort the list.</span></div><div class=\"line\">        Collections.sort(entries, ALPHA_COMPARATOR);</div><div class=\"line\">        <span class=\"keyword\">return</span> entries;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deliverResult</span><span class=\"params\">(List&lt;AppEntry&gt; apps)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//运行在主线程上</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (isReset()) &#123;<span class=\"comment\">//这里就类似于AsyncTask的onPostExecute了，把子线程处理好的数据推送到主线程</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG)</div><div class=\"line\">                Log.w(TAG, <span class=\"string\">\"+++ Warning! An async query came in while the Loader was reset! +++\"</span>);</div><div class=\"line\">            <span class=\"comment\">// The Loader has been reset; ignore the result and invalidate the data.</span></div><div class=\"line\">            <span class=\"comment\">// This can happen when the Loader is reset while an asynchronous query</span></div><div class=\"line\">            <span class=\"comment\">// is working in the background. That is, when the background thread</span></div><div class=\"line\">            <span class=\"comment\">// finishes its work and attempts to deliver the results to the client,</span></div><div class=\"line\">            <span class=\"comment\">// it will see here that the Loader has been reset and discard any</span></div><div class=\"line\">            <span class=\"comment\">// resources associated with the new data as necessary.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (apps != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                releaseResources(apps);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;<span class=\"comment\">//如果调用了reset()方法，说明子线程加载的数据是无效的，释放资源，处理无效数据</span></div><div class=\"line\">        <span class=\"comment\">// Hold a reference to the old data so it doesn't get garbage collected.</span></div><div class=\"line\">        <span class=\"comment\">// We must protect it until the new data has been delivered.</span></div><div class=\"line\">        List&lt;AppEntry&gt; oldApps = mApps;</div><div class=\"line\">        mApps = apps;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isStarted()) &#123;<span class=\"comment\">// 如果一切正常，即调用了startLoading且stopLoading和reset均为被调用</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ Delivering results to the LoaderManager for\"</span> +</div><div class=\"line\">                    <span class=\"string\">\" the ListFragment to display! +++\"</span>);</div><div class=\"line\">            <span class=\"comment\">// If the Loader is in a started state, have the superclass deliver the</span></div><div class=\"line\">            <span class=\"comment\">// results to the client.</span></div><div class=\"line\">            <span class=\"keyword\">super</span>.deliverResult(apps);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// Invalidate the old data as we don't need it any more.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (oldApps != <span class=\"keyword\">null</span> &amp;&amp; oldApps != apps) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ Releasing any old data associated with this Loader. +++\"</span>);</div><div class=\"line\">            releaseResources(oldApps);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到此，数据加载的Server端算是完成，这里注意调用到了isReset()、isStarted()等方法，这些就是Server端在在处理Client端生命周期是需要注意的，这个后面再说。</p>\n<h3 id=\"2-使用LoaderManager管理Loader\"><a href=\"#2-使用LoaderManager管理Loader\" class=\"headerlink\" title=\"2. 使用LoaderManager管理Loader\"></a>2. 使用LoaderManager管理Loader</h3><p>我们使用LoaderManager在Activity或Fragment中与Loader交互。通常在onCreate或者onActivityCreated中:</p>\n<blockquote>\n<p>getSupportedLoaderManager.initLoader()//Activity中<br>getLoaderManager() //Fragment中</p>\n</blockquote>\n<p>这里介绍在Fragment中的使用，因为Loader处理好了与Activity,Fragment甚至Child Fragment的生命周期。<br>推荐使用v4包里的Loader，Loader是在Android3.0引入FrameWork中的，但v4包让Loadder在更早的版本上也有相应的API。更重要的是，v4 包中的Loader是伴随着v4包新的release step，也就是说v4包会与时俱进修复其中的bug。<br>这一点在medium上有<a href=\"https://medium.com/google-developers/making-loading-data-on-android-lifecycle-aware-897e12760832#.wrh1ciyts\">介绍</a> 。<br>再看一下这个方法</p>\n<blockquote>\n<p> public abstract <D> Loader<D> initLoader(int id, Bundle args,<br>            LoaderManager.LoaderCallbacks<D> callback);</p>\n</blockquote>\n<p>Demo中使用的是Fragment：</p>\n<blockquote>\n<p> // Initialize a Loader with id ‘1’. If the Loader with this id already<br>            // exists, then the LoaderManager will reuse the existing Loader.<br>            getLoaderManager().initLoader(LOADER_ID, null, this);            </p>\n</blockquote>\n<p>相对应的Fragment需要implements  LoaderManager.LoaderCallbacks<List<AppEntry>&gt; //注意泛型<br>这个接口有三个方法<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">LoaderCallbacks</span>&lt;<span class=\"title\">D</span>&gt; </span>&#123;</div><div class=\"line\">       </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Loader&lt;D&gt; <span class=\"title\">onCreateLoader</span><span class=\"params\">(<span class=\"keyword\">int</span> id, Bundle args)</span></span>;</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFinished</span><span class=\"params\">(Loader&lt;D&gt; loader, D data)</span></span>;</div><div class=\"line\"></div><div class=\"line\">       </div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoaderReset</span><span class=\"params\">(Loader&lt;D&gt; loader)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">```\t\t\t</div><div class=\"line\">看一下Demo中是如何实现的</div><div class=\"line\">```java</div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"keyword\">public</span> android.support.v4.content.Loader&lt;List&lt;AppEntry&gt;&gt; onCreateLoader(<span class=\"keyword\">int</span> id, Bundle args) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ onCreateLoader() called! +++\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AppListLoader(getActivity());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFinished</span><span class=\"params\">(android.support.v4.content.Loader&lt;List&lt;AppEntry&gt;&gt; loader, List&lt;AppEntry&gt; data)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ onLoadFinished() called! +++\"</span>);</div><div class=\"line\">            mAdapter.setData(data);<span class=\"comment\">//加载数据到UI</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (isResumed()) &#123;</div><div class=\"line\">                setListShown(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                setListShownNoAnimation(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; </div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoaderReset</span><span class=\"params\">(android.support.v4.content.Loader&lt;List&lt;AppEntry&gt;&gt; loader)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) Log.i(TAG, <span class=\"string\">\"+++ onLoadReset() called! +++\"</span>);</div><div class=\"line\">            mAdapter.setData(<span class=\"keyword\">null</span>);<span class=\"comment\">//loader被reset，UI这边需要清除所有与Loader数据相关的引用，但清除数据的任务会由Loader处理好</span></div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>在三个明显的回调中处理好数据绑定到UI及过期数据的清理即可。</p>\n<h3 id=\"3-处理Activity生命周期的问题\"><a href=\"#3-处理Activity生命周期的问题\" class=\"headerlink\" title=\"3. 处理Activity生命周期的问题\"></a>3. 处理Activity生命周期的问题</h3><p>回到server端(Loader),AsyncTaskLoader是一个abstract class，loadInBackground方法已经实现了，但还有几个方法强调必须要复写或者与生命周期相关<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartLoading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">/* Subclasses must implement this to take care of loading their data,</div><div class=\"line\">         as per &#123;@link #startLoading()&#125;.  This is not called by clients directly,</div><div class=\"line\">         but as a result of a call to &#123;@link #startLoading()&#125;.*/</span></div><div class=\"line\">       <span class=\"comment\">//在这里检查一下成员变量中的数据是否不为空，有数据的话，deliverResults</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStopLoading</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">         <span class=\"comment\">/*Subclasses must implement this to take care of stopping their loader,</div><div class=\"line\">         as per &#123;@link #stopLoading()&#125;.  This is not called by clients directly,</div><div class=\"line\">         but as a result of a call to &#123;@link #stopLoading()&#125;.</div><div class=\"line\">         This will always be called from the process's main thread.*/</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onReset</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">/* Subclasses must implement this to take care of resetting their loader,</div><div class=\"line\">        as per &#123;@link #reset()&#125;.  This is not called by clients directly,</div><div class=\"line\">        but as a result of a call to &#123;@link #reset()&#125;.</div><div class=\"line\">        This will always be called from the process's main thread.</div><div class=\"line\">        如果调用了destoryLoader或者Loader相关联的Activity/Fragment被destory了</div><div class=\"line\">        所以在Demo中可以看到onReset里面调用了onStopLoading去取消当前任务，同时释放资源，取消广播注册*/</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCanceled</span><span class=\"params\">(List&lt;AppEntry&gt; apps)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">/* Called if the task was canceled before it was completed.  Gives the class a chance</div><div class=\"line\">         to clean up post-cancellation and to properly dispose of the result.</div><div class=\"line\">        </div><div class=\"line\">         @param data The value that was returned by &#123;@link #loadInBackground&#125;, or null</div><div class=\"line\">         if the task threw &#123;@link OperationCanceledException&#125;.*/</span></div><div class=\"line\">       <span class=\"comment\">//在这里释放资源</span></div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   <span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">forceLoad</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">/*Force an asynchronous load. Unlike &#123;@link #startLoading()&#125; this will ignore a previously</div><div class=\"line\">       loaded data set and load a new one.  This simply calls through to the</div><div class=\"line\">       implementation's &#123;@link #onForceLoad()&#125;.  You generally should only call this</div><div class=\"line\">       when the loader is started -- that is, &#123;@link #isStarted()&#125; returns true.</div><div class=\"line\">       Must be called from the process's main thread.*/</span></div><div class=\"line\">       <span class=\"comment\">//startLoading会直接使用onConfigurationchange之前的Activity中Loader加载的数据，但这里则放弃旧的数据，重新加载，所以isStarted会在这时返回true</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>考虑一下，如果在加载数据过程中数据源发生了变化，比如在扫描已安装App过程中又安装了新的App怎么办？所以这里又注册了两个广播，在onReceive的时候调用</p>\n<blockquote>\n<pre><code>mLoader.onContentChanged();\n</code></pre><p>//这会直接调用forceLoad（Loader已经started）或者设置一个标志位，让takeContentChanged（）返回true<br>在onStartLoading中发现这个为true，直接forceLoad<br>//接下来进入loadInBackground,完成后进入deliverResult<br>deliverResult首先检查Activity是否destoryed(挂了直接释放资源),没挂的话判断下isStarted(是否一切正常，未调用过stopLoading或reset)，符合条件的话通过super.deliverResult把数据传递出去。接下来判断下之前的旧数据和新数据是否一致，否则释放掉旧数据</p>\n</blockquote>\n<p>整个过程考虑到了数据的有效性，资源的释放，在Loader这一端，通过isReset,isStarted等方法确保了不确定的数据加载过程能够和不确定的生命周期和谐共处。<br>网上看到的关于Loader的文章大部分是关于CursorLoader的，也就是和数据库打交道的那一块，这里不细说。主要是目前没有看到太多App中使用这种加载模式，可能确实有点麻烦。在Medium上看到这篇文章，觉得还是有必要做一些记录的。</p>\n<h3 id=\"4-关于性能\"><a href=\"#4-关于性能\" class=\"headerlink\" title=\"4. 关于性能\"></a>4. 关于性能</h3><p>最后我想说的是，AsyncTaskLoader内部使用的还是AsyncTask那一套，关于AsyncTask的串行和并行的讨论网上有很多。于是我看了下AsyncTaskLoader中最终调用AsyncTask的execute方法:</p>\n<blockquote>\n<p> mTask.executeOnExecutor(mExecutor, (Void[]) null);</p>\n</blockquote>\n<p>至于这个mExecutor的本质:</p>\n<blockquote>\n<p>public static final Executor THREAD_POOL_EXECUTOR<br>            = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,<br>                    TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);<br>CORE_POOL_SIZE = 5<br>嗯，并行的线程池，性能应该还不错。<br>学过rxjava，是否rxjava会是一种比loader更好的加载数据的方式呢</p>\n</blockquote>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"http://huxian99.github.io/2015/10/28/RxJava%E7%9A%84Android%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-RxJava%E5%AE%9E%E6%88%98-%E4%BA%8C/\">rxLoader</a></li>\n<li><a href=\"https://medium.com/google-developers/making-loading-data-on-android-lifecycle-aware-897e12760832#.btjs9ady6\">making loading data on android lifecycle aware</a></li>\n<li><a href=\"https://github.com/alexjlockwood/adp-applistloader\">AppListLoader</a></li>\n</ol>"},{"title":"使用RecyclerView的Animation","date":"2016-10-20T08:16:49.000Z","_content":"\nFrom the talk \nRecyclerView Animations and Behind the Scenes\nYigit Biyar & Chet Haase\non Anroid Dev Summit 2015\n\n### 1. RecyclerView架构\n\nRecyclerView is Flexible , Pluggable and Customizeable\n内部很多功能都交给了各个组件去完成\n![](http://odzl05jxx.bkt.clouddn.com/snapshot20161020135353.jpg?imageView2/2/w/600)\nChildHelper 、AdapterHelper 、Recycler对于开发者来说并不常用，但它们在内部负责了许多针对Child View的管理。<!--more-->\n\n\n- ViewHolder的创建\n![](http://odzl05jxx.bkt.clouddn.com/viewHolder_step_1.jpg?imageView2/2/w/600)\n1 .LayoutManager首先检查getViewForPosition，RecyclerView查找Cache(getViewForPosition)，如果找到了。直接交给LayoutManager,这一过程甚至不需要与Adapter接触。\n2. 如果Cache中未找到，RecyclerView调用Adpter的getViewType，并去Recycled Pool中getViewHolderByType。\n3. 如果在Pool中未找到，RecyclerView将调用Adapter的createViewHolder。\n4. 如果在Pool中这种Type的ViewHolder已经有了，或者步骤3中创建了一个新的viewHolder，bindViewHolder并交给LayoutManager。\n![](http://odzl05jxx.bkt.clouddn.com/viewHolder_step_2.jpg?imageView2/2/w/600)\n5. 最终LayoutManager将把这个View添加到UI，这时会调用RecyclerView的onViewAttachedToWindow回调（生命周期）。\n\n\n- ViewHolder的回收(Reserves)\n![](http://odzl05jxx.bkt.clouddn.com/viewHolder_step_3.jpg?imageView2/2/w/600)\n1. LayoutManager调用removeAndRecycleView，RecyclerView会在这里收到回调onViewDetachedFromWindow\n2. 检查这个View.isValid。这一点很重要，在scroll过程中，如果一个View是Valid的话，可以将View添加到Cache中，随后可以简单将其复用。Cache将会invalidate oldest one，并告诉Adapter(onViewRecycled)。\n3. 如果不是Valid的View，将会被添加到Pool中，Adapter会收到onViewRecycled回调。\n\n- ViewHolder的另一种更好的回收方式(Fancy Reserves!)\n![](http://odzl05jxx.bkt.clouddn.com/snapshot20161020124442.jpg?imageView2/2/w/600)\n1. LayoutManager调用onLayoutChildren\n2. Layout完成后，RecyclerView检查那些之前已经被layout了的但不再存在于屏幕上了。RecyclerView将这些View重新添加到ViewGroup中，这些View此时对LayoutManager不可见。重新添加的目的在于动画。\n3. RecyclerView这时候把这些本不该add的View交给ItemAnimator，后者调用动画效果，300ms(安卓中大部分默认动画时间是300ms)之后，调用onAnimationFinished，告诉RecyclerView.\n4. 接着RecyclerView通知Adapter(onViewDetachedFromWindow)\n5. 最后将这些View添加到Cache或者Recycled Pool。\n\n- ViewHolder的销毁\n![](http://odzl05jxx.bkt.clouddn.com/snapshot20161020124836.jpg?imageView2/2/w/600)\n1. LayoutManager调用removeAndRecycleView，RecyclerView检查View是否valid\n2. 如果不是Valid，添加到RecycledPool中，但在这之前先检查是否 hasTransientState（例如正在运行动画）\n3. 如果这个View正好处在Animation中，一些属性被Animating， Pool会调用Adapter的onFailedToRecycle(Adapter中应该复写这个方法，取消动画)\n4. onFailedToRecycle(ViewHolder)返回true的话，Pool将无视View的TransientState并回收这个View(可能处在动画中)\n\n- 另一种可能导致ViewHolder被销毁的方式\n![](http://odzl05jxx.bkt.clouddn.com/snapshot20161020143554.jpg?imageView2/2/w/600)\nRecyclerView将View添加到Pool中(实际调用的是addViewHolderToRecycledViewPool(ViewHolder))，Pool会检查这种type的ViewHolder是否还放得下（例如type x的ViewHolder已经有5个了，实在太多了），这种情况下就会Kill这种View,这种情况是我们希望避免的。开发者可以调用pool.setMaxRecycledViews(type,count)来让Pool放更多的Holder per type。\n\n一些需要注意的，Pool是基于一个Activity Context的。\n\n### 2. 使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤\n\nperdictiveItemAnimation的关键在于RecyclerView的list并不局限于屏幕。\n在LayoutManager中复写\n> supportPredictiveItemAnimations()，返回true。\n\nLinearLayoutManger的实现\n\n```java\n @Override\n    public boolean supportsPredictiveItemAnimations() {\n        return mPendingSavedState == null && mLastStackFromEnd == mStackFromEnd;\n    }\n```\n可以认为返回值就是true\n\nonLayoutChildern在这种情况下会被调用两次，(之前提到本该被移除的View需要重新添加到ViewGroup中，实现就在这里)\n参考LinearLayoutManager的实现，源代码实在太长，只复制一些注释\n```java\n @Override\n    public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {\n        // layout algorithm:\n        // 1) by checking children and other variables, find an anchor coordinate and an anchor\n        //  item position.\n        // 2) fill towards start, stacking from bottom\n        // 3) fill towards end, stacking from top\n        // 4) scroll to fulfill requirements like stack from bottom.\n        // create layout state\n        //omitted....\n        }\n```\n简单来说一共三步:\n\n1. detach and Scrap Views\n2. layout那些需要出现在list中的View(包括将要消失的View)\n3. 接下来进入第二步layout，在这里确定那些将出现在屏幕外的View的实际位置。\n\n这样LayoutManager就能将必要的信息传递给ItemAnimator\n\n- 进入ItemAnimator\n大部分的需要实现的函数在SimpleItemAnimator或者DefaultItemAnimator里面都已经实现好了，所以大部分人的选择就是：\n1. 使用DefaultItemAnimator(默认已经设置好了)\n2. Implement SimpleItemAnimator(或者DeafaultItemAnimator)，复写一些必要的方法\n\nAnimator需要做的一些事\n```java\nrecord[Pre|Post]LayoutInformation//记录动画开始和结束的layout信息\nanimate[Appearance|Disappearance]\nanimatePersistence()//不会改变位置\nanimateChange()//实际的动画添加位置\n```\n这些在DefaultItemAnimator中都有默认的实现\n动画完成后一定要调用\n> DispatchAnimationFinished(ViewHolder)\n\n记录动画开始前和结束后的信息，实例代码:\n```java\n  @NonNull\n        @Override\n        public ItemHolderInfo recordPreLayoutInformation(RecyclerView.State state,\n                RecyclerView.ViewHolder viewHolder, int changeFlags, List<Object> payloads) {\n            ColorTextInfo info = (ColorTextInfo) super.recordPreLayoutInformation(state, viewHolder,\n                    changeFlags, payloads);\n            return getItemHolderInfo((MyViewHolder) viewHolder, info);\n        }\n\n        @NonNull\n        @Override\n        public ItemHolderInfo recordPostLayoutInformation(@NonNull RecyclerView.State state,\n                @NonNull RecyclerView.ViewHolder viewHolder) {\n            ColorTextInfo info = (ColorTextInfo) super.recordPostLayoutInformation(state, viewHolder);\n            return getItemHolderInfo((MyViewHolder) viewHolder, info);\n        }\n\n        @Override\n        public ItemHolderInfo obtainHolderInfo() {\n            return new ColorTextInfo();\n        }\n\n```\n\n\n- canReuseViewHolder的作用:\n例如notifyItemChanged(position)后，只是某个位置的viewHolder发生了信息改变，那就没有必要创建一个新的ViewHolder，直接提供原有的ViewHolder，提升性能。\n\n### 3. 常见错误\n1. mAdapter.notifyItemMoved(1,5)\n不会调用onBindViewHolder，不会invalidate \n\n2. 不要在onBindViewHolder中添加onClickListener(以匿名内部类的方式,这会使得position变成final),想象一下，mAdapter.notifyItemMoved(1,5)调用后不会调用onBindViewHolder，这使得点击pos 1时实际传递给listener的是pos 5。\n\n3. 检查RecyclerView.NO_POSITION\n这个Int值为-1，其实就是itemView被removed，但用户手够快，在View被移除前点击了这个View，那这个onClickListener还是会被调用。\n\n4. mAdapter.notifyItemChanged(position,payload)\n如果某个ViewHolder中只是一部分信息改变，将更新内容丢到payload中，最终会调用到onBindViewHolder(ViewHolder,position,List Payloads)，在这里只需要把ViewHolder中的一小部分改变就可以了，这有助于优化新能。\n\n5. onCreateViewHolder*必须*返回一个new ViewHolder，不能在本地作为成员变量返回。\n\n6. RecyclerView.setRecycledViewPool(pool)\n一个pool只能为为同一个context(Activity)中的RecyclerView使用，因为这些View是与Context相关的，而不同的Activity可能有不同的Theme，Style。\n\n\n\n### 4 . 一些参考资料\n- [RecyclerView Animations and Behind the Scenes (Android Dev Summit 2015)](https://www.youtube.com/watch?v=imsr8NrIAMs)\n- [ItemAnimator模板](https://github.com/wasabeef/recyclerview-animators)\n- [UI ToolKit Demo](https://github.com/google/android-ui-toolkit-demos)","source":"_posts/2016-10-20-RecyclerViewAnimationStuff.md","raw":"---\ntitle: 使用RecyclerView的Animation\ndate: 2016-10-20 16:16:49\ntags: RecyclerView\n---\n\nFrom the talk \nRecyclerView Animations and Behind the Scenes\nYigit Biyar & Chet Haase\non Anroid Dev Summit 2015\n\n### 1. RecyclerView架构\n\nRecyclerView is Flexible , Pluggable and Customizeable\n内部很多功能都交给了各个组件去完成\n![](http://odzl05jxx.bkt.clouddn.com/snapshot20161020135353.jpg?imageView2/2/w/600)\nChildHelper 、AdapterHelper 、Recycler对于开发者来说并不常用，但它们在内部负责了许多针对Child View的管理。<!--more-->\n\n\n- ViewHolder的创建\n![](http://odzl05jxx.bkt.clouddn.com/viewHolder_step_1.jpg?imageView2/2/w/600)\n1 .LayoutManager首先检查getViewForPosition，RecyclerView查找Cache(getViewForPosition)，如果找到了。直接交给LayoutManager,这一过程甚至不需要与Adapter接触。\n2. 如果Cache中未找到，RecyclerView调用Adpter的getViewType，并去Recycled Pool中getViewHolderByType。\n3. 如果在Pool中未找到，RecyclerView将调用Adapter的createViewHolder。\n4. 如果在Pool中这种Type的ViewHolder已经有了，或者步骤3中创建了一个新的viewHolder，bindViewHolder并交给LayoutManager。\n![](http://odzl05jxx.bkt.clouddn.com/viewHolder_step_2.jpg?imageView2/2/w/600)\n5. 最终LayoutManager将把这个View添加到UI，这时会调用RecyclerView的onViewAttachedToWindow回调（生命周期）。\n\n\n- ViewHolder的回收(Reserves)\n![](http://odzl05jxx.bkt.clouddn.com/viewHolder_step_3.jpg?imageView2/2/w/600)\n1. LayoutManager调用removeAndRecycleView，RecyclerView会在这里收到回调onViewDetachedFromWindow\n2. 检查这个View.isValid。这一点很重要，在scroll过程中，如果一个View是Valid的话，可以将View添加到Cache中，随后可以简单将其复用。Cache将会invalidate oldest one，并告诉Adapter(onViewRecycled)。\n3. 如果不是Valid的View，将会被添加到Pool中，Adapter会收到onViewRecycled回调。\n\n- ViewHolder的另一种更好的回收方式(Fancy Reserves!)\n![](http://odzl05jxx.bkt.clouddn.com/snapshot20161020124442.jpg?imageView2/2/w/600)\n1. LayoutManager调用onLayoutChildren\n2. Layout完成后，RecyclerView检查那些之前已经被layout了的但不再存在于屏幕上了。RecyclerView将这些View重新添加到ViewGroup中，这些View此时对LayoutManager不可见。重新添加的目的在于动画。\n3. RecyclerView这时候把这些本不该add的View交给ItemAnimator，后者调用动画效果，300ms(安卓中大部分默认动画时间是300ms)之后，调用onAnimationFinished，告诉RecyclerView.\n4. 接着RecyclerView通知Adapter(onViewDetachedFromWindow)\n5. 最后将这些View添加到Cache或者Recycled Pool。\n\n- ViewHolder的销毁\n![](http://odzl05jxx.bkt.clouddn.com/snapshot20161020124836.jpg?imageView2/2/w/600)\n1. LayoutManager调用removeAndRecycleView，RecyclerView检查View是否valid\n2. 如果不是Valid，添加到RecycledPool中，但在这之前先检查是否 hasTransientState（例如正在运行动画）\n3. 如果这个View正好处在Animation中，一些属性被Animating， Pool会调用Adapter的onFailedToRecycle(Adapter中应该复写这个方法，取消动画)\n4. onFailedToRecycle(ViewHolder)返回true的话，Pool将无视View的TransientState并回收这个View(可能处在动画中)\n\n- 另一种可能导致ViewHolder被销毁的方式\n![](http://odzl05jxx.bkt.clouddn.com/snapshot20161020143554.jpg?imageView2/2/w/600)\nRecyclerView将View添加到Pool中(实际调用的是addViewHolderToRecycledViewPool(ViewHolder))，Pool会检查这种type的ViewHolder是否还放得下（例如type x的ViewHolder已经有5个了，实在太多了），这种情况下就会Kill这种View,这种情况是我们希望避免的。开发者可以调用pool.setMaxRecycledViews(type,count)来让Pool放更多的Holder per type。\n\n一些需要注意的，Pool是基于一个Activity Context的。\n\n### 2. 使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤\n\nperdictiveItemAnimation的关键在于RecyclerView的list并不局限于屏幕。\n在LayoutManager中复写\n> supportPredictiveItemAnimations()，返回true。\n\nLinearLayoutManger的实现\n\n```java\n @Override\n    public boolean supportsPredictiveItemAnimations() {\n        return mPendingSavedState == null && mLastStackFromEnd == mStackFromEnd;\n    }\n```\n可以认为返回值就是true\n\nonLayoutChildern在这种情况下会被调用两次，(之前提到本该被移除的View需要重新添加到ViewGroup中，实现就在这里)\n参考LinearLayoutManager的实现，源代码实在太长，只复制一些注释\n```java\n @Override\n    public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {\n        // layout algorithm:\n        // 1) by checking children and other variables, find an anchor coordinate and an anchor\n        //  item position.\n        // 2) fill towards start, stacking from bottom\n        // 3) fill towards end, stacking from top\n        // 4) scroll to fulfill requirements like stack from bottom.\n        // create layout state\n        //omitted....\n        }\n```\n简单来说一共三步:\n\n1. detach and Scrap Views\n2. layout那些需要出现在list中的View(包括将要消失的View)\n3. 接下来进入第二步layout，在这里确定那些将出现在屏幕外的View的实际位置。\n\n这样LayoutManager就能将必要的信息传递给ItemAnimator\n\n- 进入ItemAnimator\n大部分的需要实现的函数在SimpleItemAnimator或者DefaultItemAnimator里面都已经实现好了，所以大部分人的选择就是：\n1. 使用DefaultItemAnimator(默认已经设置好了)\n2. Implement SimpleItemAnimator(或者DeafaultItemAnimator)，复写一些必要的方法\n\nAnimator需要做的一些事\n```java\nrecord[Pre|Post]LayoutInformation//记录动画开始和结束的layout信息\nanimate[Appearance|Disappearance]\nanimatePersistence()//不会改变位置\nanimateChange()//实际的动画添加位置\n```\n这些在DefaultItemAnimator中都有默认的实现\n动画完成后一定要调用\n> DispatchAnimationFinished(ViewHolder)\n\n记录动画开始前和结束后的信息，实例代码:\n```java\n  @NonNull\n        @Override\n        public ItemHolderInfo recordPreLayoutInformation(RecyclerView.State state,\n                RecyclerView.ViewHolder viewHolder, int changeFlags, List<Object> payloads) {\n            ColorTextInfo info = (ColorTextInfo) super.recordPreLayoutInformation(state, viewHolder,\n                    changeFlags, payloads);\n            return getItemHolderInfo((MyViewHolder) viewHolder, info);\n        }\n\n        @NonNull\n        @Override\n        public ItemHolderInfo recordPostLayoutInformation(@NonNull RecyclerView.State state,\n                @NonNull RecyclerView.ViewHolder viewHolder) {\n            ColorTextInfo info = (ColorTextInfo) super.recordPostLayoutInformation(state, viewHolder);\n            return getItemHolderInfo((MyViewHolder) viewHolder, info);\n        }\n\n        @Override\n        public ItemHolderInfo obtainHolderInfo() {\n            return new ColorTextInfo();\n        }\n\n```\n\n\n- canReuseViewHolder的作用:\n例如notifyItemChanged(position)后，只是某个位置的viewHolder发生了信息改变，那就没有必要创建一个新的ViewHolder，直接提供原有的ViewHolder，提升性能。\n\n### 3. 常见错误\n1. mAdapter.notifyItemMoved(1,5)\n不会调用onBindViewHolder，不会invalidate \n\n2. 不要在onBindViewHolder中添加onClickListener(以匿名内部类的方式,这会使得position变成final),想象一下，mAdapter.notifyItemMoved(1,5)调用后不会调用onBindViewHolder，这使得点击pos 1时实际传递给listener的是pos 5。\n\n3. 检查RecyclerView.NO_POSITION\n这个Int值为-1，其实就是itemView被removed，但用户手够快，在View被移除前点击了这个View，那这个onClickListener还是会被调用。\n\n4. mAdapter.notifyItemChanged(position,payload)\n如果某个ViewHolder中只是一部分信息改变，将更新内容丢到payload中，最终会调用到onBindViewHolder(ViewHolder,position,List Payloads)，在这里只需要把ViewHolder中的一小部分改变就可以了，这有助于优化新能。\n\n5. onCreateViewHolder*必须*返回一个new ViewHolder，不能在本地作为成员变量返回。\n\n6. RecyclerView.setRecycledViewPool(pool)\n一个pool只能为为同一个context(Activity)中的RecyclerView使用，因为这些View是与Context相关的，而不同的Activity可能有不同的Theme，Style。\n\n\n\n### 4 . 一些参考资料\n- [RecyclerView Animations and Behind the Scenes (Android Dev Summit 2015)](https://www.youtube.com/watch?v=imsr8NrIAMs)\n- [ItemAnimator模板](https://github.com/wasabeef/recyclerview-animators)\n- [UI ToolKit Demo](https://github.com/google/android-ui-toolkit-demos)","slug":"2016-10-20-RecyclerViewAnimationStuff","published":1,"updated":"2016-10-20T08:33:54.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzlr00067gvrwha4x70r","content":"<p>From the talk<br>RecyclerView Animations and Behind the Scenes<br>Yigit Biyar &amp; Chet Haase<br>on Anroid Dev Summit 2015</p>\n<h3 id=\"1-RecyclerView架构\"><a href=\"#1-RecyclerView架构\" class=\"headerlink\" title=\"1. RecyclerView架构\"></a>1. RecyclerView架构</h3><p>RecyclerView is Flexible , Pluggable and Customizeable<br>内部很多功能都交给了各个组件去完成<br><img src=\"http://odzl05jxx.bkt.clouddn.com/snapshot20161020135353.jpg?imageView2/2/w/600\" alt=\"\"><br>ChildHelper 、AdapterHelper 、Recycler对于开发者来说并不常用，但它们在内部负责了许多针对Child View的管理。<a id=\"more\"></a></p>\n<ul>\n<li>ViewHolder的创建<br><img src=\"http://odzl05jxx.bkt.clouddn.com/viewHolder_step_1.jpg?imageView2/2/w/600\" alt=\"\"><br>1 .LayoutManager首先检查getViewForPosition，RecyclerView查找Cache(getViewForPosition)，如果找到了。直接交给LayoutManager,这一过程甚至不需要与Adapter接触。</li>\n</ul>\n<ol>\n<li>如果Cache中未找到，RecyclerView调用Adpter的getViewType，并去Recycled Pool中getViewHolderByType。</li>\n<li>如果在Pool中未找到，RecyclerView将调用Adapter的createViewHolder。</li>\n<li>如果在Pool中这种Type的ViewHolder已经有了，或者步骤3中创建了一个新的viewHolder，bindViewHolder并交给LayoutManager。<br><img src=\"http://odzl05jxx.bkt.clouddn.com/viewHolder_step_2.jpg?imageView2/2/w/600\" alt=\"\"></li>\n<li>最终LayoutManager将把这个View添加到UI，这时会调用RecyclerView的onViewAttachedToWindow回调（生命周期）。</li>\n</ol>\n<ul>\n<li>ViewHolder的回收(Reserves)<br><img src=\"http://odzl05jxx.bkt.clouddn.com/viewHolder_step_3.jpg?imageView2/2/w/600\" alt=\"\"></li>\n</ul>\n<ol>\n<li>LayoutManager调用removeAndRecycleView，RecyclerView会在这里收到回调onViewDetachedFromWindow</li>\n<li>检查这个View.isValid。这一点很重要，在scroll过程中，如果一个View是Valid的话，可以将View添加到Cache中，随后可以简单将其复用。Cache将会invalidate oldest one，并告诉Adapter(onViewRecycled)。</li>\n<li>如果不是Valid的View，将会被添加到Pool中，Adapter会收到onViewRecycled回调。</li>\n</ol>\n<ul>\n<li>ViewHolder的另一种更好的回收方式(Fancy Reserves!)<br><img src=\"http://odzl05jxx.bkt.clouddn.com/snapshot20161020124442.jpg?imageView2/2/w/600\" alt=\"\"></li>\n</ul>\n<ol>\n<li>LayoutManager调用onLayoutChildren</li>\n<li>Layout完成后，RecyclerView检查那些之前已经被layout了的但不再存在于屏幕上了。RecyclerView将这些View重新添加到ViewGroup中，这些View此时对LayoutManager不可见。重新添加的目的在于动画。</li>\n<li>RecyclerView这时候把这些本不该add的View交给ItemAnimator，后者调用动画效果，300ms(安卓中大部分默认动画时间是300ms)之后，调用onAnimationFinished，告诉RecyclerView.</li>\n<li>接着RecyclerView通知Adapter(onViewDetachedFromWindow)</li>\n<li>最后将这些View添加到Cache或者Recycled Pool。</li>\n</ol>\n<ul>\n<li>ViewHolder的销毁<br><img src=\"http://odzl05jxx.bkt.clouddn.com/snapshot20161020124836.jpg?imageView2/2/w/600\" alt=\"\"></li>\n</ul>\n<ol>\n<li>LayoutManager调用removeAndRecycleView，RecyclerView检查View是否valid</li>\n<li>如果不是Valid，添加到RecycledPool中，但在这之前先检查是否 hasTransientState（例如正在运行动画）</li>\n<li>如果这个View正好处在Animation中，一些属性被Animating， Pool会调用Adapter的onFailedToRecycle(Adapter中应该复写这个方法，取消动画)</li>\n<li>onFailedToRecycle(ViewHolder)返回true的话，Pool将无视View的TransientState并回收这个View(可能处在动画中)</li>\n</ol>\n<ul>\n<li>另一种可能导致ViewHolder被销毁的方式<br><img src=\"http://odzl05jxx.bkt.clouddn.com/snapshot20161020143554.jpg?imageView2/2/w/600\" alt=\"\"><br>RecyclerView将View添加到Pool中(实际调用的是addViewHolderToRecycledViewPool(ViewHolder))，Pool会检查这种type的ViewHolder是否还放得下（例如type x的ViewHolder已经有5个了，实在太多了），这种情况下就会Kill这种View,这种情况是我们希望避免的。开发者可以调用pool.setMaxRecycledViews(type,count)来让Pool放更多的Holder per type。</li>\n</ul>\n<p>一些需要注意的，Pool是基于一个Activity Context的。</p>\n<h3 id=\"2-使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤\"><a href=\"#2-使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤\" class=\"headerlink\" title=\"2. 使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤\"></a>2. 使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤</h3><p>perdictiveItemAnimation的关键在于RecyclerView的list并不局限于屏幕。<br>在LayoutManager中复写</p>\n<blockquote>\n<p>supportPredictiveItemAnimations()，返回true。</p>\n</blockquote>\n<p>LinearLayoutManger的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supportsPredictiveItemAnimations</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mPendingSavedState == <span class=\"keyword\">null</span> &amp;&amp; mLastStackFromEnd == mStackFromEnd;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>可以认为返回值就是true</p>\n<p>onLayoutChildern在这种情况下会被调用两次，(之前提到本该被移除的View需要重新添加到ViewGroup中，实现就在这里)<br>参考LinearLayoutManager的实现，源代码实在太长，只复制一些注释<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayoutChildren</span><span class=\"params\">(RecyclerView.Recycler recycler, RecyclerView.State state)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// layout algorithm:</span></div><div class=\"line\">       <span class=\"comment\">// 1) by checking children and other variables, find an anchor coordinate and an anchor</span></div><div class=\"line\">       <span class=\"comment\">//  item position.</span></div><div class=\"line\">       <span class=\"comment\">// 2) fill towards start, stacking from bottom</span></div><div class=\"line\">       <span class=\"comment\">// 3) fill towards end, stacking from top</span></div><div class=\"line\">       <span class=\"comment\">// 4) scroll to fulfill requirements like stack from bottom.</span></div><div class=\"line\">       <span class=\"comment\">// create layout state</span></div><div class=\"line\">       <span class=\"comment\">//omitted....</span></div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>简单来说一共三步:</p>\n<ol>\n<li>detach and Scrap Views</li>\n<li>layout那些需要出现在list中的View(包括将要消失的View)</li>\n<li>接下来进入第二步layout，在这里确定那些将出现在屏幕外的View的实际位置。</li>\n</ol>\n<p>这样LayoutManager就能将必要的信息传递给ItemAnimator</p>\n<ul>\n<li>进入ItemAnimator<br>大部分的需要实现的函数在SimpleItemAnimator或者DefaultItemAnimator里面都已经实现好了，所以大部分人的选择就是：</li>\n</ul>\n<ol>\n<li>使用DefaultItemAnimator(默认已经设置好了)</li>\n<li>Implement SimpleItemAnimator(或者DeafaultItemAnimator)，复写一些必要的方法</li>\n</ol>\n<p>Animator需要做的一些事<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">record[Pre|Post]LayoutInformation<span class=\"comment\">//记录动画开始和结束的layout信息</span></div><div class=\"line\">animate[Appearance|Disappearance]</div><div class=\"line\">animatePersistence()<span class=\"comment\">//不会改变位置</span></div><div class=\"line\">animateChange()<span class=\"comment\">//实际的动画添加位置</span></div></pre></td></tr></table></figure></p>\n<p>这些在DefaultItemAnimator中都有默认的实现<br>动画完成后一定要调用</p>\n<blockquote>\n<p>DispatchAnimationFinished(ViewHolder)</p>\n</blockquote>\n<p>记录动画开始前和结束后的信息，实例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NonNull</span></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> ItemHolderInfo <span class=\"title\">recordPreLayoutInformation</span><span class=\"params\">(RecyclerView.State state,</span></span></div><div class=\"line\">              RecyclerView.ViewHolder viewHolder, <span class=\"keyword\">int</span> changeFlags, List&lt;Object&gt; payloads) &#123;</div><div class=\"line\">          ColorTextInfo info = (ColorTextInfo) <span class=\"keyword\">super</span>.recordPreLayoutInformation(state, viewHolder,</div><div class=\"line\">                  changeFlags, payloads);</div><div class=\"line\">          <span class=\"keyword\">return</span> getItemHolderInfo((MyViewHolder) viewHolder, info);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@NonNull</span></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> ItemHolderInfo <span class=\"title\">recordPostLayoutInformation</span><span class=\"params\">(@NonNull RecyclerView.State state,</span></span></div><div class=\"line\">              @NonNull RecyclerView.ViewHolder viewHolder) &#123;</div><div class=\"line\">          ColorTextInfo info = (ColorTextInfo) <span class=\"keyword\">super</span>.recordPostLayoutInformation(state, viewHolder);</div><div class=\"line\">          <span class=\"keyword\">return</span> getItemHolderInfo((MyViewHolder) viewHolder, info);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> ItemHolderInfo <span class=\"title\">obtainHolderInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ColorTextInfo();</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>canReuseViewHolder的作用:<br>例如notifyItemChanged(position)后，只是某个位置的viewHolder发生了信息改变，那就没有必要创建一个新的ViewHolder，直接提供原有的ViewHolder，提升性能。</li>\n</ul>\n<h3 id=\"3-常见错误\"><a href=\"#3-常见错误\" class=\"headerlink\" title=\"3. 常见错误\"></a>3. 常见错误</h3><ol>\n<li><p>mAdapter.notifyItemMoved(1,5)<br>不会调用onBindViewHolder，不会invalidate </p>\n</li>\n<li><p>不要在onBindViewHolder中添加onClickListener(以匿名内部类的方式,这会使得position变成final),想象一下，mAdapter.notifyItemMoved(1,5)调用后不会调用onBindViewHolder，这使得点击pos 1时实际传递给listener的是pos 5。</p>\n</li>\n<li><p>检查RecyclerView.NO_POSITION<br>这个Int值为-1，其实就是itemView被removed，但用户手够快，在View被移除前点击了这个View，那这个onClickListener还是会被调用。</p>\n</li>\n<li><p>mAdapter.notifyItemChanged(position,payload)<br>如果某个ViewHolder中只是一部分信息改变，将更新内容丢到payload中，最终会调用到onBindViewHolder(ViewHolder,position,List Payloads)，在这里只需要把ViewHolder中的一小部分改变就可以了，这有助于优化新能。</p>\n</li>\n<li><p>onCreateViewHolder<em>必须</em>返回一个new ViewHolder，不能在本地作为成员变量返回。</p>\n</li>\n<li><p>RecyclerView.setRecycledViewPool(pool)<br>一个pool只能为为同一个context(Activity)中的RecyclerView使用，因为这些View是与Context相关的，而不同的Activity可能有不同的Theme，Style。</p>\n</li>\n</ol>\n<h3 id=\"4-一些参考资料\"><a href=\"#4-一些参考资料\" class=\"headerlink\" title=\"4 . 一些参考资料\"></a>4 . 一些参考资料</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=imsr8NrIAMs\" target=\"_blank\" rel=\"external\">RecyclerView Animations and Behind the Scenes (Android Dev Summit 2015)</a></li>\n<li><a href=\"https://github.com/wasabeef/recyclerview-animators\" target=\"_blank\" rel=\"external\">ItemAnimator模板</a></li>\n<li><a href=\"https://github.com/google/android-ui-toolkit-demos\" target=\"_blank\" rel=\"external\">UI ToolKit Demo</a></li>\n</ul>\n","excerpt":"<p>From the talk<br>RecyclerView Animations and Behind the Scenes<br>Yigit Biyar &amp; Chet Haase<br>on Anroid Dev Summit 2015</p>\n<h3 id=\"1-RecyclerView架构\"><a href=\"#1-RecyclerView架构\" class=\"headerlink\" title=\"1. RecyclerView架构\"></a>1. RecyclerView架构</h3><p>RecyclerView is Flexible , Pluggable and Customizeable<br>内部很多功能都交给了各个组件去完成<br><img src=\"http://odzl05jxx.bkt.clouddn.com/snapshot20161020135353.jpg?imageView2/2/w/600\" alt=\"\"><br>ChildHelper 、AdapterHelper 、Recycler对于开发者来说并不常用，但它们在内部负责了许多针对Child View的管理。","more":"</p>\n<ul>\n<li>ViewHolder的创建<br><img src=\"http://odzl05jxx.bkt.clouddn.com/viewHolder_step_1.jpg?imageView2/2/w/600\" alt=\"\"><br>1 .LayoutManager首先检查getViewForPosition，RecyclerView查找Cache(getViewForPosition)，如果找到了。直接交给LayoutManager,这一过程甚至不需要与Adapter接触。</li>\n</ul>\n<ol>\n<li>如果Cache中未找到，RecyclerView调用Adpter的getViewType，并去Recycled Pool中getViewHolderByType。</li>\n<li>如果在Pool中未找到，RecyclerView将调用Adapter的createViewHolder。</li>\n<li>如果在Pool中这种Type的ViewHolder已经有了，或者步骤3中创建了一个新的viewHolder，bindViewHolder并交给LayoutManager。<br><img src=\"http://odzl05jxx.bkt.clouddn.com/viewHolder_step_2.jpg?imageView2/2/w/600\" alt=\"\"></li>\n<li>最终LayoutManager将把这个View添加到UI，这时会调用RecyclerView的onViewAttachedToWindow回调（生命周期）。</li>\n</ol>\n<ul>\n<li>ViewHolder的回收(Reserves)<br><img src=\"http://odzl05jxx.bkt.clouddn.com/viewHolder_step_3.jpg?imageView2/2/w/600\" alt=\"\"></li>\n</ul>\n<ol>\n<li>LayoutManager调用removeAndRecycleView，RecyclerView会在这里收到回调onViewDetachedFromWindow</li>\n<li>检查这个View.isValid。这一点很重要，在scroll过程中，如果一个View是Valid的话，可以将View添加到Cache中，随后可以简单将其复用。Cache将会invalidate oldest one，并告诉Adapter(onViewRecycled)。</li>\n<li>如果不是Valid的View，将会被添加到Pool中，Adapter会收到onViewRecycled回调。</li>\n</ol>\n<ul>\n<li>ViewHolder的另一种更好的回收方式(Fancy Reserves!)<br><img src=\"http://odzl05jxx.bkt.clouddn.com/snapshot20161020124442.jpg?imageView2/2/w/600\" alt=\"\"></li>\n</ul>\n<ol>\n<li>LayoutManager调用onLayoutChildren</li>\n<li>Layout完成后，RecyclerView检查那些之前已经被layout了的但不再存在于屏幕上了。RecyclerView将这些View重新添加到ViewGroup中，这些View此时对LayoutManager不可见。重新添加的目的在于动画。</li>\n<li>RecyclerView这时候把这些本不该add的View交给ItemAnimator，后者调用动画效果，300ms(安卓中大部分默认动画时间是300ms)之后，调用onAnimationFinished，告诉RecyclerView.</li>\n<li>接着RecyclerView通知Adapter(onViewDetachedFromWindow)</li>\n<li>最后将这些View添加到Cache或者Recycled Pool。</li>\n</ol>\n<ul>\n<li>ViewHolder的销毁<br><img src=\"http://odzl05jxx.bkt.clouddn.com/snapshot20161020124836.jpg?imageView2/2/w/600\" alt=\"\"></li>\n</ul>\n<ol>\n<li>LayoutManager调用removeAndRecycleView，RecyclerView检查View是否valid</li>\n<li>如果不是Valid，添加到RecycledPool中，但在这之前先检查是否 hasTransientState（例如正在运行动画）</li>\n<li>如果这个View正好处在Animation中，一些属性被Animating， Pool会调用Adapter的onFailedToRecycle(Adapter中应该复写这个方法，取消动画)</li>\n<li>onFailedToRecycle(ViewHolder)返回true的话，Pool将无视View的TransientState并回收这个View(可能处在动画中)</li>\n</ol>\n<ul>\n<li>另一种可能导致ViewHolder被销毁的方式<br><img src=\"http://odzl05jxx.bkt.clouddn.com/snapshot20161020143554.jpg?imageView2/2/w/600\" alt=\"\"><br>RecyclerView将View添加到Pool中(实际调用的是addViewHolderToRecycledViewPool(ViewHolder))，Pool会检查这种type的ViewHolder是否还放得下（例如type x的ViewHolder已经有5个了，实在太多了），这种情况下就会Kill这种View,这种情况是我们希望避免的。开发者可以调用pool.setMaxRecycledViews(type,count)来让Pool放更多的Holder per type。</li>\n</ul>\n<p>一些需要注意的，Pool是基于一个Activity Context的。</p>\n<h3 id=\"2-使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤\"><a href=\"#2-使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤\" class=\"headerlink\" title=\"2. 使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤\"></a>2. 使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤</h3><p>perdictiveItemAnimation的关键在于RecyclerView的list并不局限于屏幕。<br>在LayoutManager中复写</p>\n<blockquote>\n<p>supportPredictiveItemAnimations()，返回true。</p>\n</blockquote>\n<p>LinearLayoutManger的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supportsPredictiveItemAnimations</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> mPendingSavedState == <span class=\"keyword\">null</span> &amp;&amp; mLastStackFromEnd == mStackFromEnd;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>可以认为返回值就是true</p>\n<p>onLayoutChildern在这种情况下会被调用两次，(之前提到本该被移除的View需要重新添加到ViewGroup中，实现就在这里)<br>参考LinearLayoutManager的实现，源代码实在太长，只复制一些注释<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayoutChildren</span><span class=\"params\">(RecyclerView.Recycler recycler, RecyclerView.State state)</span> </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// layout algorithm:</span></div><div class=\"line\">       <span class=\"comment\">// 1) by checking children and other variables, find an anchor coordinate and an anchor</span></div><div class=\"line\">       <span class=\"comment\">//  item position.</span></div><div class=\"line\">       <span class=\"comment\">// 2) fill towards start, stacking from bottom</span></div><div class=\"line\">       <span class=\"comment\">// 3) fill towards end, stacking from top</span></div><div class=\"line\">       <span class=\"comment\">// 4) scroll to fulfill requirements like stack from bottom.</span></div><div class=\"line\">       <span class=\"comment\">// create layout state</span></div><div class=\"line\">       <span class=\"comment\">//omitted....</span></div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure></p>\n<p>简单来说一共三步:</p>\n<ol>\n<li>detach and Scrap Views</li>\n<li>layout那些需要出现在list中的View(包括将要消失的View)</li>\n<li>接下来进入第二步layout，在这里确定那些将出现在屏幕外的View的实际位置。</li>\n</ol>\n<p>这样LayoutManager就能将必要的信息传递给ItemAnimator</p>\n<ul>\n<li>进入ItemAnimator<br>大部分的需要实现的函数在SimpleItemAnimator或者DefaultItemAnimator里面都已经实现好了，所以大部分人的选择就是：</li>\n</ul>\n<ol>\n<li>使用DefaultItemAnimator(默认已经设置好了)</li>\n<li>Implement SimpleItemAnimator(或者DeafaultItemAnimator)，复写一些必要的方法</li>\n</ol>\n<p>Animator需要做的一些事<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">record[Pre|Post]LayoutInformation<span class=\"comment\">//记录动画开始和结束的layout信息</span></div><div class=\"line\">animate[Appearance|Disappearance]</div><div class=\"line\">animatePersistence()<span class=\"comment\">//不会改变位置</span></div><div class=\"line\">animateChange()<span class=\"comment\">//实际的动画添加位置</span></div></pre></td></tr></table></figure></p>\n<p>这些在DefaultItemAnimator中都有默认的实现<br>动画完成后一定要调用</p>\n<blockquote>\n<p>DispatchAnimationFinished(ViewHolder)</p>\n</blockquote>\n<p>记录动画开始前和结束后的信息，实例代码:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@NonNull</span></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> ItemHolderInfo <span class=\"title\">recordPreLayoutInformation</span><span class=\"params\">(RecyclerView.State state,</div><div class=\"line\">              RecyclerView.ViewHolder viewHolder, <span class=\"keyword\">int</span> changeFlags, List&lt;Object&gt; payloads)</span> </span>&#123;</div><div class=\"line\">          ColorTextInfo info = (ColorTextInfo) <span class=\"keyword\">super</span>.recordPreLayoutInformation(state, viewHolder,</div><div class=\"line\">                  changeFlags, payloads);</div><div class=\"line\">          <span class=\"keyword\">return</span> getItemHolderInfo((MyViewHolder) viewHolder, info);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@NonNull</span></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> ItemHolderInfo <span class=\"title\">recordPostLayoutInformation</span><span class=\"params\">(@NonNull RecyclerView.State state,</div><div class=\"line\">              @NonNull RecyclerView.ViewHolder viewHolder)</span> </span>&#123;</div><div class=\"line\">          ColorTextInfo info = (ColorTextInfo) <span class=\"keyword\">super</span>.recordPostLayoutInformation(state, viewHolder);</div><div class=\"line\">          <span class=\"keyword\">return</span> getItemHolderInfo((MyViewHolder) viewHolder, info);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"meta\">@Override</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> ItemHolderInfo <span class=\"title\">obtainHolderInfo</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ColorTextInfo();</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>canReuseViewHolder的作用:<br>例如notifyItemChanged(position)后，只是某个位置的viewHolder发生了信息改变，那就没有必要创建一个新的ViewHolder，直接提供原有的ViewHolder，提升性能。</li>\n</ul>\n<h3 id=\"3-常见错误\"><a href=\"#3-常见错误\" class=\"headerlink\" title=\"3. 常见错误\"></a>3. 常见错误</h3><ol>\n<li><p>mAdapter.notifyItemMoved(1,5)<br>不会调用onBindViewHolder，不会invalidate </p>\n</li>\n<li><p>不要在onBindViewHolder中添加onClickListener(以匿名内部类的方式,这会使得position变成final),想象一下，mAdapter.notifyItemMoved(1,5)调用后不会调用onBindViewHolder，这使得点击pos 1时实际传递给listener的是pos 5。</p>\n</li>\n<li><p>检查RecyclerView.NO_POSITION<br>这个Int值为-1，其实就是itemView被removed，但用户手够快，在View被移除前点击了这个View，那这个onClickListener还是会被调用。</p>\n</li>\n<li><p>mAdapter.notifyItemChanged(position,payload)<br>如果某个ViewHolder中只是一部分信息改变，将更新内容丢到payload中，最终会调用到onBindViewHolder(ViewHolder,position,List Payloads)，在这里只需要把ViewHolder中的一小部分改变就可以了，这有助于优化新能。</p>\n</li>\n<li><p>onCreateViewHolder<em>必须</em>返回一个new ViewHolder，不能在本地作为成员变量返回。</p>\n</li>\n<li><p>RecyclerView.setRecycledViewPool(pool)<br>一个pool只能为为同一个context(Activity)中的RecyclerView使用，因为这些View是与Context相关的，而不同的Activity可能有不同的Theme，Style。</p>\n</li>\n</ol>\n<h3 id=\"4-一些参考资料\"><a href=\"#4-一些参考资料\" class=\"headerlink\" title=\"4 . 一些参考资料\"></a>4 . 一些参考资料</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=imsr8NrIAMs\">RecyclerView Animations and Behind the Scenes (Android Dev Summit 2015)</a></li>\n<li><a href=\"https://github.com/wasabeef/recyclerview-animators\">ItemAnimator模板</a></li>\n<li><a href=\"https://github.com/google/android-ui-toolkit-demos\">UI ToolKit Demo</a></li>\n</ul>"},{"title":"一些脏代码","date":"2016-10-20T13:35:10.000Z","_content":"\n今天在V2EX上看到有人提到Notification有漏洞，好奇也就查了一下，结果发现有人专门针对这个问题进行了[分析](http://zhoujianghua.com/2015/07/28/black_technology_in_alipay/)。本身的技术分析并不多，写在这里只是为了作为今后的一个参考。<!--more-->\n\n### 1. 问题的由来\nAndroid对后台应用是有一个权重区分的，最直观的就是查看最近使用的应用，这里每一个应用可能有一个或者多个Process，而系统在资源紧张时会干掉一些Process，而决定后台应用生死的是一个Lru List，也就是least recently used 会被干掉。显然大家都不希望自己被干掉，DAU对于很多应用来说是优先于系统资源和用户体验的。\n根据[官方文档](https://developer.android.com/guide/components/processes-and-threads.html),Android Process有五种，根据优先级从高到低为:\n- 前台进程\n- 可见进程\n- 服务进程\n- 后台进程\n- 空进程\n\n越靠前的进程就越不容易被系统干掉，所以大家都希望能够成为前台进程。成为前台进程的条件:\n```\n用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：\n托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）\n托管某个 Service，后者绑定到用户正在交互的 Activity\n托管正在“前台”运行的 Service（服务已调用 startForeground()）\n托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）\n托管正执行其 onReceive() 方法的 BroadcastReceiver\n通常，在任意给定时间前台进程都为数不多。只有在内在不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。 此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。\n```\n以上条件只有startForeground满足条件了，但大家都知道startForeground会在通知栏常驻一个Notification，且用户取消不了。对于我这种强迫症来说实在是太丑。\n\n\n### 2. startForeground一定会在系统状态栏显示一个通知，真的吗?\n```java\nvoid startForeground (int id, \n                Notification notification)\n```\n我找到了G+上的Chris Banes的一篇[post](https://plus.google.com/+AndroidDevelopers/posts/NEPWzPwSruR)，这其中明确指出\n```\nUnfortunately there are a number of applications on Google Play which are using the startForeground() API without passing a valid notification. While this worked in previous versions of Android, it is a loophole which has been fixed in Android 4.3. The system now displays a notifications for you automatically if you do not provide a valid one.\n```\n也就是说，API 18以前，只需要提供一个无效的Notification就可以让Notification不显示了。所以，判断下API<18的时候，直接new Notification()就可以得到一个不完整的Notification.\n文章也指出了这是一个Loophole（已经是个贬义词了）。\nApi 18之后的修复措施，看[ServiceRecord的源码](https://android.googlesource.com/platform/frameworks/base.git/+/android-4.3_r2.1/services/java/com/android/server/am/ServiceRecord.java):\n\n```java\npublic void postNotification() {\n        final int appUid = appInfo.uid;\n        final int appPid = app.pid;\n        if (foregroundId != 0 && foregroundNoti != null) {\n            // Do asynchronous communication with notification manager to\n            // avoid deadlocks.\n            final String localPackageName = packageName;\n            final int localForegroundId = foregroundId;\n            final Notification localForegroundNoti = foregroundNoti;\n            ams.mHandler.post(new Runnable() {\n                public void run() {\n                    NotificationManagerService nm =\n                            (NotificationManagerService) NotificationManager.getService();\n                    if (nm == null) {\n                        return;\n                    }\n                    try {\n                        if (localForegroundNoti.icon == 0) {\n                            // It is not correct for the caller to supply a notification\n                            // icon, but this used to be able to slip through, so for\n                            // those dirty apps give it the app's icon.\n                            localForegroundNoti.icon = appInfo.icon;\n                            // Do not allow apps to present a sneaky invisible content view either.\n                            localForegroundNoti.contentView = null;\n                            localForegroundNoti.bigContentView = null;\n                            CharSequence appName = appInfo.loadLabel(\n                                    ams.mContext.getPackageManager());\n                            if (appName == null) {\n                                appName = appInfo.packageName;\n                            }\n                            Context ctx = null;\n                            try {\n                                ctx = ams.mContext.createPackageContext(\n                                        appInfo.packageName, 0);\n                                Intent runningIntent = new Intent(\n                                        Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n                                runningIntent.setData(Uri.fromParts(\"package\",\n                                        appInfo.packageName, null));\n                                PendingIntent pi = PendingIntent.getActivity(ams.mContext, 0,\n                                        runningIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n                                localForegroundNoti.setLatestEventInfo(ctx,\n                                        ams.mContext.getString(\n                                                com.android.internal.R.string\n                                                        .app_running_notification_title,\n                                                appName),\n                                        ams.mContext.getString(\n                                                com.android.internal.R.string\n                                                        .app_running_notification_text,\n                                                appName),\n                                        pi);\n                            } catch (PackageManager.NameNotFoundException e) {\n                                localForegroundNoti.icon = 0;\n                            }\n                        }\n                        if (localForegroundNoti.icon == 0) {\n                            // Notifications whose icon is 0 are defined to not show\n                            // a notification, silently ignoring it.  We don't want to\n                            // just ignore it, we want to prevent the service from\n                            // being foreground.\n                            throw new RuntimeException(\"icon must be non-zero\");\n                        }\n                        int[] outId = new int[1];\n                        nm.enqueueNotificationInternal(localPackageName, localPackageName,\n                                appUid, appPid, null, localForegroundId, localForegroundNoti,\n                                outId, userId);\n                    } catch (RuntimeException e) {\n                        Slog.w(ActivityManagerService.TAG,\n                                \"Error showing notification for service\", e);\n                        // If it gave us a garbage notification, it doesn't\n                        // get to be foreground.\n                        ams.setServiceForeground(name, ServiceRecord.this,\n                                0, null, true);\n                        ams.crashApplication(appUid, appPid, localPackageName,\n                                \"Bad notification for startForeground: \" + e);\n                    }\n                }\n            });\n        }\n    }\n```\n单单是看注释大概能看出来Android团队对于这种做法的不满。所以如果不提供有效Notification，则显示你的App的Icon。所以Api 18以上一定会显示一个Notification。\n\n然而套路还是太深。。。。又有人给出了API 18以上的解决办法:\n我在[这里](http://blog.csdn.net/wxx614817/article/details/50669420)找到了新的方法，简单来说就是起两个Service，两个Service都在一个进程里。\n先Start A Service ，onCreate里面 bind B Service，\n在onServiceConnected的时候A service startForeground(processId,notification)\nB service startForeground(processId,notification)\n随后立即调用B service stopForeGround(true)\n由于两个Notification具有相同的id，所以A service最终成为Foreground Service，Notification也被清除掉了。\n\n\n### 3.最后\n整个过程看下来，API 18以下，给一个不完整的Notification(比如new Notification())，就不会出现在通知栏；API 18以上，起两个Service，B Service负责取消Notification就可以了。\n目前看来，国内很多App为了保活，都采取了类似的方式。\n而整体技术层面的实现并不难，只是利用了一个又一个小漏洞罢了。\n所谓脏代码不过是技术上做的一些欺骗系统的手段，作为开发者，理应明白谷歌设计这一套系统是为了更好的提升用户体验（占据市场）。然而在当前国内应用开发环境下，我们真的能够为用户考虑考虑吗，或者说，我们提交的代码能吗？\n\n![](http://odzl05jxx.bkt.clouddn.com/blamingtheuser-big.png?imageView2/2/w/600)\n\n\n\n### Reference\n- [支付宝后台不死的黑科技](http://zhoujianghua.com/2015/07/28/black_technology_in_alipay/)\n- [Android的startForeground前台Service如何去掉通知显示](http://blog.csdn.net/wxx614817/article/details/50669420)\n\n\n","source":"_posts/2016-10-20-android-dirty-code.md","raw":"---\ntitle: 一些脏代码\ndate: 2016-10-20 21:35:10\ntags:\n---\n\n今天在V2EX上看到有人提到Notification有漏洞，好奇也就查了一下，结果发现有人专门针对这个问题进行了[分析](http://zhoujianghua.com/2015/07/28/black_technology_in_alipay/)。本身的技术分析并不多，写在这里只是为了作为今后的一个参考。<!--more-->\n\n### 1. 问题的由来\nAndroid对后台应用是有一个权重区分的，最直观的就是查看最近使用的应用，这里每一个应用可能有一个或者多个Process，而系统在资源紧张时会干掉一些Process，而决定后台应用生死的是一个Lru List，也就是least recently used 会被干掉。显然大家都不希望自己被干掉，DAU对于很多应用来说是优先于系统资源和用户体验的。\n根据[官方文档](https://developer.android.com/guide/components/processes-and-threads.html),Android Process有五种，根据优先级从高到低为:\n- 前台进程\n- 可见进程\n- 服务进程\n- 后台进程\n- 空进程\n\n越靠前的进程就越不容易被系统干掉，所以大家都希望能够成为前台进程。成为前台进程的条件:\n```\n用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：\n托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）\n托管某个 Service，后者绑定到用户正在交互的 Activity\n托管正在“前台”运行的 Service（服务已调用 startForeground()）\n托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）\n托管正执行其 onReceive() 方法的 BroadcastReceiver\n通常，在任意给定时间前台进程都为数不多。只有在内在不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。 此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。\n```\n以上条件只有startForeground满足条件了，但大家都知道startForeground会在通知栏常驻一个Notification，且用户取消不了。对于我这种强迫症来说实在是太丑。\n\n\n### 2. startForeground一定会在系统状态栏显示一个通知，真的吗?\n```java\nvoid startForeground (int id, \n                Notification notification)\n```\n我找到了G+上的Chris Banes的一篇[post](https://plus.google.com/+AndroidDevelopers/posts/NEPWzPwSruR)，这其中明确指出\n```\nUnfortunately there are a number of applications on Google Play which are using the startForeground() API without passing a valid notification. While this worked in previous versions of Android, it is a loophole which has been fixed in Android 4.3. The system now displays a notifications for you automatically if you do not provide a valid one.\n```\n也就是说，API 18以前，只需要提供一个无效的Notification就可以让Notification不显示了。所以，判断下API<18的时候，直接new Notification()就可以得到一个不完整的Notification.\n文章也指出了这是一个Loophole（已经是个贬义词了）。\nApi 18之后的修复措施，看[ServiceRecord的源码](https://android.googlesource.com/platform/frameworks/base.git/+/android-4.3_r2.1/services/java/com/android/server/am/ServiceRecord.java):\n\n```java\npublic void postNotification() {\n        final int appUid = appInfo.uid;\n        final int appPid = app.pid;\n        if (foregroundId != 0 && foregroundNoti != null) {\n            // Do asynchronous communication with notification manager to\n            // avoid deadlocks.\n            final String localPackageName = packageName;\n            final int localForegroundId = foregroundId;\n            final Notification localForegroundNoti = foregroundNoti;\n            ams.mHandler.post(new Runnable() {\n                public void run() {\n                    NotificationManagerService nm =\n                            (NotificationManagerService) NotificationManager.getService();\n                    if (nm == null) {\n                        return;\n                    }\n                    try {\n                        if (localForegroundNoti.icon == 0) {\n                            // It is not correct for the caller to supply a notification\n                            // icon, but this used to be able to slip through, so for\n                            // those dirty apps give it the app's icon.\n                            localForegroundNoti.icon = appInfo.icon;\n                            // Do not allow apps to present a sneaky invisible content view either.\n                            localForegroundNoti.contentView = null;\n                            localForegroundNoti.bigContentView = null;\n                            CharSequence appName = appInfo.loadLabel(\n                                    ams.mContext.getPackageManager());\n                            if (appName == null) {\n                                appName = appInfo.packageName;\n                            }\n                            Context ctx = null;\n                            try {\n                                ctx = ams.mContext.createPackageContext(\n                                        appInfo.packageName, 0);\n                                Intent runningIntent = new Intent(\n                                        Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n                                runningIntent.setData(Uri.fromParts(\"package\",\n                                        appInfo.packageName, null));\n                                PendingIntent pi = PendingIntent.getActivity(ams.mContext, 0,\n                                        runningIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n                                localForegroundNoti.setLatestEventInfo(ctx,\n                                        ams.mContext.getString(\n                                                com.android.internal.R.string\n                                                        .app_running_notification_title,\n                                                appName),\n                                        ams.mContext.getString(\n                                                com.android.internal.R.string\n                                                        .app_running_notification_text,\n                                                appName),\n                                        pi);\n                            } catch (PackageManager.NameNotFoundException e) {\n                                localForegroundNoti.icon = 0;\n                            }\n                        }\n                        if (localForegroundNoti.icon == 0) {\n                            // Notifications whose icon is 0 are defined to not show\n                            // a notification, silently ignoring it.  We don't want to\n                            // just ignore it, we want to prevent the service from\n                            // being foreground.\n                            throw new RuntimeException(\"icon must be non-zero\");\n                        }\n                        int[] outId = new int[1];\n                        nm.enqueueNotificationInternal(localPackageName, localPackageName,\n                                appUid, appPid, null, localForegroundId, localForegroundNoti,\n                                outId, userId);\n                    } catch (RuntimeException e) {\n                        Slog.w(ActivityManagerService.TAG,\n                                \"Error showing notification for service\", e);\n                        // If it gave us a garbage notification, it doesn't\n                        // get to be foreground.\n                        ams.setServiceForeground(name, ServiceRecord.this,\n                                0, null, true);\n                        ams.crashApplication(appUid, appPid, localPackageName,\n                                \"Bad notification for startForeground: \" + e);\n                    }\n                }\n            });\n        }\n    }\n```\n单单是看注释大概能看出来Android团队对于这种做法的不满。所以如果不提供有效Notification，则显示你的App的Icon。所以Api 18以上一定会显示一个Notification。\n\n然而套路还是太深。。。。又有人给出了API 18以上的解决办法:\n我在[这里](http://blog.csdn.net/wxx614817/article/details/50669420)找到了新的方法，简单来说就是起两个Service，两个Service都在一个进程里。\n先Start A Service ，onCreate里面 bind B Service，\n在onServiceConnected的时候A service startForeground(processId,notification)\nB service startForeground(processId,notification)\n随后立即调用B service stopForeGround(true)\n由于两个Notification具有相同的id，所以A service最终成为Foreground Service，Notification也被清除掉了。\n\n\n### 3.最后\n整个过程看下来，API 18以下，给一个不完整的Notification(比如new Notification())，就不会出现在通知栏；API 18以上，起两个Service，B Service负责取消Notification就可以了。\n目前看来，国内很多App为了保活，都采取了类似的方式。\n而整体技术层面的实现并不难，只是利用了一个又一个小漏洞罢了。\n所谓脏代码不过是技术上做的一些欺骗系统的手段，作为开发者，理应明白谷歌设计这一套系统是为了更好的提升用户体验（占据市场）。然而在当前国内应用开发环境下，我们真的能够为用户考虑考虑吗，或者说，我们提交的代码能吗？\n\n![](http://odzl05jxx.bkt.clouddn.com/blamingtheuser-big.png?imageView2/2/w/600)\n\n\n\n### Reference\n- [支付宝后台不死的黑科技](http://zhoujianghua.com/2015/07/28/black_technology_in_alipay/)\n- [Android的startForeground前台Service如何去掉通知显示](http://blog.csdn.net/wxx614817/article/details/50669420)\n\n\n","slug":"2016-10-20-android-dirty-code","published":1,"updated":"2016-10-23T10:42:29.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzm8000a7gvr4kl8jpfy","content":"<p>今天在V2EX上看到有人提到Notification有漏洞，好奇也就查了一下，结果发现有人专门针对这个问题进行了<a href=\"http://zhoujianghua.com/2015/07/28/black_technology_in_alipay/\" target=\"_blank\" rel=\"external\">分析</a>。本身的技术分析并不多，写在这里只是为了作为今后的一个参考。<a id=\"more\"></a></p>\n<h3 id=\"1-问题的由来\"><a href=\"#1-问题的由来\" class=\"headerlink\" title=\"1. 问题的由来\"></a>1. 问题的由来</h3><p>Android对后台应用是有一个权重区分的，最直观的就是查看最近使用的应用，这里每一个应用可能有一个或者多个Process，而系统在资源紧张时会干掉一些Process，而决定后台应用生死的是一个Lru List，也就是least recently used 会被干掉。显然大家都不希望自己被干掉，DAU对于很多应用来说是优先于系统资源和用户体验的。<br>根据<a href=\"https://developer.android.com/guide/components/processes-and-threads.html\" target=\"_blank\" rel=\"external\">官方文档</a>,Android Process有五种，根据优先级从高到低为:</p>\n<ul>\n<li>前台进程</li>\n<li>可见进程</li>\n<li>服务进程</li>\n<li>后台进程</li>\n<li>空进程</li>\n</ul>\n<p>越靠前的进程就越不容易被系统干掉，所以大家都希望能够成为前台进程。成为前台进程的条件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：</div><div class=\"line\">托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）</div><div class=\"line\">托管某个 Service，后者绑定到用户正在交互的 Activity</div><div class=\"line\">托管正在“前台”运行的 Service（服务已调用 startForeground()）</div><div class=\"line\">托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）</div><div class=\"line\">托管正执行其 onReceive() 方法的 BroadcastReceiver</div><div class=\"line\">通常，在任意给定时间前台进程都为数不多。只有在内在不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。 此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。</div></pre></td></tr></table></figure></p>\n<p>以上条件只有startForeground满足条件了，但大家都知道startForeground会在通知栏常驻一个Notification，且用户取消不了。对于我这种强迫症来说实在是太丑。</p>\n<h3 id=\"2-startForeground一定会在系统状态栏显示一个通知，真的吗\"><a href=\"#2-startForeground一定会在系统状态栏显示一个通知，真的吗\" class=\"headerlink\" title=\"2. startForeground一定会在系统状态栏显示一个通知，真的吗?\"></a>2. startForeground一定会在系统状态栏显示一个通知，真的吗?</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startForeground</span> <span class=\"params\">(<span class=\"keyword\">int</span> id, </span></span></div><div class=\"line\">                Notification notification)</div></pre></td></tr></table></figure>\n<p>我找到了G+上的Chris Banes的一篇<a href=\"https://plus.google.com/+AndroidDevelopers/posts/NEPWzPwSruR\" target=\"_blank\" rel=\"external\">post</a>，这其中明确指出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Unfortunately there are a number of applications on Google Play which are using the startForeground() API without passing a valid notification. While this worked in previous versions of Android, it is a loophole which has been fixed in Android 4.3. The system now displays a notifications for you automatically if you do not provide a valid one.</div></pre></td></tr></table></figure></p>\n<p>也就是说，API 18以前，只需要提供一个无效的Notification就可以让Notification不显示了。所以，判断下API&lt;18的时候，直接new Notification()就可以得到一个不完整的Notification.<br>文章也指出了这是一个Loophole（已经是个贬义词了）。<br>Api 18之后的修复措施，看<a href=\"https://android.googlesource.com/platform/frameworks/base.git/+/android-4.3_r2.1/services/java/com/android/server/am/ServiceRecord.java\" target=\"_blank\" rel=\"external\">ServiceRecord的源码</a>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postNotification</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> appUid = appInfo.uid;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> appPid = app.pid;</div><div class=\"line\">        <span class=\"keyword\">if</span> (foregroundId != <span class=\"number\">0</span> &amp;&amp; foregroundNoti != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Do asynchronous communication with notification manager to</span></div><div class=\"line\">            <span class=\"comment\">// avoid deadlocks.</span></div><div class=\"line\">            <span class=\"keyword\">final</span> String localPackageName = packageName;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> localForegroundId = foregroundId;</div><div class=\"line\">            <span class=\"keyword\">final</span> Notification localForegroundNoti = foregroundNoti;</div><div class=\"line\">            ams.mHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    NotificationManagerService nm =</div><div class=\"line\">                            (NotificationManagerService) NotificationManager.getService();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (nm == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (localForegroundNoti.icon == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"comment\">// It is not correct for the caller to supply a notification</span></div><div class=\"line\">                            <span class=\"comment\">// icon, but this used to be able to slip through, so for</span></div><div class=\"line\">                            <span class=\"comment\">// those dirty apps give it the app's icon.</span></div><div class=\"line\">                            localForegroundNoti.icon = appInfo.icon;</div><div class=\"line\">                            <span class=\"comment\">// Do not allow apps to present a sneaky invisible content view either.</span></div><div class=\"line\">                            localForegroundNoti.contentView = <span class=\"keyword\">null</span>;</div><div class=\"line\">                            localForegroundNoti.bigContentView = <span class=\"keyword\">null</span>;</div><div class=\"line\">                            CharSequence appName = appInfo.loadLabel(</div><div class=\"line\">                                    ams.mContext.getPackageManager());</div><div class=\"line\">                            <span class=\"keyword\">if</span> (appName == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                appName = appInfo.packageName;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            Context ctx = <span class=\"keyword\">null</span>;</div><div class=\"line\">                            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                                ctx = ams.mContext.createPackageContext(</div><div class=\"line\">                                        appInfo.packageName, <span class=\"number\">0</span>);</div><div class=\"line\">                                Intent runningIntent = <span class=\"keyword\">new</span> Intent(</div><div class=\"line\">                                        Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</div><div class=\"line\">                                runningIntent.setData(Uri.fromParts(<span class=\"string\">\"package\"</span>,</div><div class=\"line\">                                        appInfo.packageName, <span class=\"keyword\">null</span>));</div><div class=\"line\">                                PendingIntent pi = PendingIntent.getActivity(ams.mContext, <span class=\"number\">0</span>,</div><div class=\"line\">                                        runningIntent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class=\"line\">                                localForegroundNoti.setLatestEventInfo(ctx,</div><div class=\"line\">                                        ams.mContext.getString(</div><div class=\"line\">                                                com.android.internal.R.string</div><div class=\"line\">                                                        .app_running_notification_title,</div><div class=\"line\">                                                appName),</div><div class=\"line\">                                        ams.mContext.getString(</div><div class=\"line\">                                                com.android.internal.R.string</div><div class=\"line\">                                                        .app_running_notification_text,</div><div class=\"line\">                                                appName),</div><div class=\"line\">                                        pi);</div><div class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class=\"line\">                                localForegroundNoti.icon = <span class=\"number\">0</span>;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (localForegroundNoti.icon == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"comment\">// Notifications whose icon is 0 are defined to not show</span></div><div class=\"line\">                            <span class=\"comment\">// a notification, silently ignoring it.  We don't want to</span></div><div class=\"line\">                            <span class=\"comment\">// just ignore it, we want to prevent the service from</span></div><div class=\"line\">                            <span class=\"comment\">// being foreground.</span></div><div class=\"line\">                            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"icon must be non-zero\"</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">int</span>[] outId = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1</span>];</div><div class=\"line\">                        nm.enqueueNotificationInternal(localPackageName, localPackageName,</div><div class=\"line\">                                appUid, appPid, <span class=\"keyword\">null</span>, localForegroundId, localForegroundNoti,</div><div class=\"line\">                                outId, userId);</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">                        Slog.w(ActivityManagerService.TAG,</div><div class=\"line\">                                <span class=\"string\">\"Error showing notification for service\"</span>, e);</div><div class=\"line\">                        <span class=\"comment\">// If it gave us a garbage notification, it doesn't</span></div><div class=\"line\">                        <span class=\"comment\">// get to be foreground.</span></div><div class=\"line\">                        ams.setServiceForeground(name, ServiceRecord.<span class=\"keyword\">this</span>,</div><div class=\"line\">                                <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">                        ams.crashApplication(appUid, appPid, localPackageName,</div><div class=\"line\">                                <span class=\"string\">\"Bad notification for startForeground: \"</span> + e);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>单单是看注释大概能看出来Android团队对于这种做法的不满。所以如果不提供有效Notification，则显示你的App的Icon。所以Api 18以上一定会显示一个Notification。</p>\n<p>然而套路还是太深。。。。又有人给出了API 18以上的解决办法:<br>我在<a href=\"http://blog.csdn.net/wxx614817/article/details/50669420\" target=\"_blank\" rel=\"external\">这里</a>找到了新的方法，简单来说就是起两个Service，两个Service都在一个进程里。<br>先Start A Service ，onCreate里面 bind B Service，<br>在onServiceConnected的时候A service startForeground(processId,notification)<br>B service startForeground(processId,notification)<br>随后立即调用B service stopForeGround(true)<br>由于两个Notification具有相同的id，所以A service最终成为Foreground Service，Notification也被清除掉了。</p>\n<h3 id=\"3-最后\"><a href=\"#3-最后\" class=\"headerlink\" title=\"3.最后\"></a>3.最后</h3><p>整个过程看下来，API 18以下，给一个不完整的Notification(比如new Notification())，就不会出现在通知栏；API 18以上，起两个Service，B Service负责取消Notification就可以了。<br>目前看来，国内很多App为了保活，都采取了类似的方式。<br>而整体技术层面的实现并不难，只是利用了一个又一个小漏洞罢了。<br>所谓脏代码不过是技术上做的一些欺骗系统的手段，作为开发者，理应明白谷歌设计这一套系统是为了更好的提升用户体验（占据市场）。然而在当前国内应用开发环境下，我们真的能够为用户考虑考虑吗，或者说，我们提交的代码能吗？</p>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/blamingtheuser-big.png?imageView2/2/w/600\" alt=\"\"></p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ul>\n<li><a href=\"http://zhoujianghua.com/2015/07/28/black_technology_in_alipay/\" target=\"_blank\" rel=\"external\">支付宝后台不死的黑科技</a></li>\n<li><a href=\"http://blog.csdn.net/wxx614817/article/details/50669420\" target=\"_blank\" rel=\"external\">Android的startForeground前台Service如何去掉通知显示</a></li>\n</ul>\n","excerpt":"<p>今天在V2EX上看到有人提到Notification有漏洞，好奇也就查了一下，结果发现有人专门针对这个问题进行了<a href=\"http://zhoujianghua.com/2015/07/28/black_technology_in_alipay/\">分析</a>。本身的技术分析并不多，写在这里只是为了作为今后的一个参考。","more":"</p>\n<h3 id=\"1-问题的由来\"><a href=\"#1-问题的由来\" class=\"headerlink\" title=\"1. 问题的由来\"></a>1. 问题的由来</h3><p>Android对后台应用是有一个权重区分的，最直观的就是查看最近使用的应用，这里每一个应用可能有一个或者多个Process，而系统在资源紧张时会干掉一些Process，而决定后台应用生死的是一个Lru List，也就是least recently used 会被干掉。显然大家都不希望自己被干掉，DAU对于很多应用来说是优先于系统资源和用户体验的。<br>根据<a href=\"https://developer.android.com/guide/components/processes-and-threads.html\">官方文档</a>,Android Process有五种，根据优先级从高到低为:</p>\n<ul>\n<li>前台进程</li>\n<li>可见进程</li>\n<li>服务进程</li>\n<li>后台进程</li>\n<li>空进程</li>\n</ul>\n<p>越靠前的进程就越不容易被系统干掉，所以大家都希望能够成为前台进程。成为前台进程的条件:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：</div><div class=\"line\">托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）</div><div class=\"line\">托管某个 Service，后者绑定到用户正在交互的 Activity</div><div class=\"line\">托管正在“前台”运行的 Service（服务已调用 startForeground()）</div><div class=\"line\">托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）</div><div class=\"line\">托管正执行其 onReceive() 方法的 BroadcastReceiver</div><div class=\"line\">通常，在任意给定时间前台进程都为数不多。只有在内在不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。 此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。</div></pre></td></tr></table></figure></p>\n<p>以上条件只有startForeground满足条件了，但大家都知道startForeground会在通知栏常驻一个Notification，且用户取消不了。对于我这种强迫症来说实在是太丑。</p>\n<h3 id=\"2-startForeground一定会在系统状态栏显示一个通知，真的吗\"><a href=\"#2-startForeground一定会在系统状态栏显示一个通知，真的吗\" class=\"headerlink\" title=\"2. startForeground一定会在系统状态栏显示一个通知，真的吗?\"></a>2. startForeground一定会在系统状态栏显示一个通知，真的吗?</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">startForeground</span> <span class=\"params\">(<span class=\"keyword\">int</span> id, </div><div class=\"line\">                Notification notification)</span></span></div></pre></td></tr></table></figure>\n<p>我找到了G+上的Chris Banes的一篇<a href=\"https://plus.google.com/+AndroidDevelopers/posts/NEPWzPwSruR\">post</a>，这其中明确指出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Unfortunately there are a number of applications on Google Play which are using the startForeground() API without passing a valid notification. While this worked in previous versions of Android, it is a loophole which has been fixed in Android 4.3. The system now displays a notifications for you automatically if you do not provide a valid one.</div></pre></td></tr></table></figure></p>\n<p>也就是说，API 18以前，只需要提供一个无效的Notification就可以让Notification不显示了。所以，判断下API&lt;18的时候，直接new Notification()就可以得到一个不完整的Notification.<br>文章也指出了这是一个Loophole（已经是个贬义词了）。<br>Api 18之后的修复措施，看<a href=\"https://android.googlesource.com/platform/frameworks/base.git/+/android-4.3_r2.1/services/java/com/android/server/am/ServiceRecord.java\">ServiceRecord的源码</a>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postNotification</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> appUid = appInfo.uid;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> appPid = app.pid;</div><div class=\"line\">        <span class=\"keyword\">if</span> (foregroundId != <span class=\"number\">0</span> &amp;&amp; foregroundNoti != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">// Do asynchronous communication with notification manager to</span></div><div class=\"line\">            <span class=\"comment\">// avoid deadlocks.</span></div><div class=\"line\">            <span class=\"keyword\">final</span> String localPackageName = packageName;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> localForegroundId = foregroundId;</div><div class=\"line\">            <span class=\"keyword\">final</span> Notification localForegroundNoti = foregroundNoti;</div><div class=\"line\">            ams.mHandler.post(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    NotificationManagerService nm =</div><div class=\"line\">                            (NotificationManagerService) NotificationManager.getService();</div><div class=\"line\">                    <span class=\"keyword\">if</span> (nm == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span>;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (localForegroundNoti.icon == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"comment\">// It is not correct for the caller to supply a notification</span></div><div class=\"line\">                            <span class=\"comment\">// icon, but this used to be able to slip through, so for</span></div><div class=\"line\">                            <span class=\"comment\">// those dirty apps give it the app's icon.</span></div><div class=\"line\">                            localForegroundNoti.icon = appInfo.icon;</div><div class=\"line\">                            <span class=\"comment\">// Do not allow apps to present a sneaky invisible content view either.</span></div><div class=\"line\">                            localForegroundNoti.contentView = <span class=\"keyword\">null</span>;</div><div class=\"line\">                            localForegroundNoti.bigContentView = <span class=\"keyword\">null</span>;</div><div class=\"line\">                            CharSequence appName = appInfo.loadLabel(</div><div class=\"line\">                                    ams.mContext.getPackageManager());</div><div class=\"line\">                            <span class=\"keyword\">if</span> (appName == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                appName = appInfo.packageName;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            Context ctx = <span class=\"keyword\">null</span>;</div><div class=\"line\">                            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                                ctx = ams.mContext.createPackageContext(</div><div class=\"line\">                                        appInfo.packageName, <span class=\"number\">0</span>);</div><div class=\"line\">                                Intent runningIntent = <span class=\"keyword\">new</span> Intent(</div><div class=\"line\">                                        Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</div><div class=\"line\">                                runningIntent.setData(Uri.fromParts(<span class=\"string\">\"package\"</span>,</div><div class=\"line\">                                        appInfo.packageName, <span class=\"keyword\">null</span>));</div><div class=\"line\">                                PendingIntent pi = PendingIntent.getActivity(ams.mContext, <span class=\"number\">0</span>,</div><div class=\"line\">                                        runningIntent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class=\"line\">                                localForegroundNoti.setLatestEventInfo(ctx,</div><div class=\"line\">                                        ams.mContext.getString(</div><div class=\"line\">                                                com.android.internal.R.string</div><div class=\"line\">                                                        .app_running_notification_title,</div><div class=\"line\">                                                appName),</div><div class=\"line\">                                        ams.mContext.getString(</div><div class=\"line\">                                                com.android.internal.R.string</div><div class=\"line\">                                                        .app_running_notification_text,</div><div class=\"line\">                                                appName),</div><div class=\"line\">                                        pi);</div><div class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class=\"line\">                                localForegroundNoti.icon = <span class=\"number\">0</span>;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (localForegroundNoti.icon == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                            <span class=\"comment\">// Notifications whose icon is 0 are defined to not show</span></div><div class=\"line\">                            <span class=\"comment\">// a notification, silently ignoring it.  We don't want to</span></div><div class=\"line\">                            <span class=\"comment\">// just ignore it, we want to prevent the service from</span></div><div class=\"line\">                            <span class=\"comment\">// being foreground.</span></div><div class=\"line\">                            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"icon must be non-zero\"</span>);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        <span class=\"keyword\">int</span>[] outId = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">1</span>];</div><div class=\"line\">                        nm.enqueueNotificationInternal(localPackageName, localPackageName,</div><div class=\"line\">                                appUid, appPid, <span class=\"keyword\">null</span>, localForegroundId, localForegroundNoti,</div><div class=\"line\">                                outId, userId);</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RuntimeException e) &#123;</div><div class=\"line\">                        Slog.w(ActivityManagerService.TAG,</div><div class=\"line\">                                <span class=\"string\">\"Error showing notification for service\"</span>, e);</div><div class=\"line\">                        <span class=\"comment\">// If it gave us a garbage notification, it doesn't</span></div><div class=\"line\">                        <span class=\"comment\">// get to be foreground.</span></div><div class=\"line\">                        ams.setServiceForeground(name, ServiceRecord.<span class=\"keyword\">this</span>,</div><div class=\"line\">                                <span class=\"number\">0</span>, <span class=\"keyword\">null</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">                        ams.crashApplication(appUid, appPid, localPackageName,</div><div class=\"line\">                                <span class=\"string\">\"Bad notification for startForeground: \"</span> + e);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>单单是看注释大概能看出来Android团队对于这种做法的不满。所以如果不提供有效Notification，则显示你的App的Icon。所以Api 18以上一定会显示一个Notification。</p>\n<p>然而套路还是太深。。。。又有人给出了API 18以上的解决办法:<br>我在<a href=\"http://blog.csdn.net/wxx614817/article/details/50669420\">这里</a>找到了新的方法，简单来说就是起两个Service，两个Service都在一个进程里。<br>先Start A Service ，onCreate里面 bind B Service，<br>在onServiceConnected的时候A service startForeground(processId,notification)<br>B service startForeground(processId,notification)<br>随后立即调用B service stopForeGround(true)<br>由于两个Notification具有相同的id，所以A service最终成为Foreground Service，Notification也被清除掉了。</p>\n<h3 id=\"3-最后\"><a href=\"#3-最后\" class=\"headerlink\" title=\"3.最后\"></a>3.最后</h3><p>整个过程看下来，API 18以下，给一个不完整的Notification(比如new Notification())，就不会出现在通知栏；API 18以上，起两个Service，B Service负责取消Notification就可以了。<br>目前看来，国内很多App为了保活，都采取了类似的方式。<br>而整体技术层面的实现并不难，只是利用了一个又一个小漏洞罢了。<br>所谓脏代码不过是技术上做的一些欺骗系统的手段，作为开发者，理应明白谷歌设计这一套系统是为了更好的提升用户体验（占据市场）。然而在当前国内应用开发环境下，我们真的能够为用户考虑考虑吗，或者说，我们提交的代码能吗？</p>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/blamingtheuser-big.png?imageView2/2/w/600\" alt=\"\"></p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ul>\n<li><a href=\"http://zhoujianghua.com/2015/07/28/black_technology_in_alipay/\">支付宝后台不死的黑科技</a></li>\n<li><a href=\"http://blog.csdn.net/wxx614817/article/details/50669420\">Android的startForeground前台Service如何去掉通知显示</a></li>\n</ul>"},{"title":"自定义LayoutManager","date":"2016-10-20T08:37:42.000Z","_content":"\n### 1. 系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。\n基本用法都很简单，这里记录一些重要的用法\n\n![](http://odzl05jxx.bkt.clouddn.com/Googling%20the%20Error%20Message.jpg?imageView2/2/w/600)\n<!--more-->\n\n- GridLayoutManager可以设置某个Item在某一行占据的Column num（VERTICAL的情况下）\n代码如下:\n```java\nGridLayoutManager manager = new GridLayoutManager(\n   this,2 ,GridLayoutManager.VERTICAL,false)\n   \nmanager.setSpanSizeLookup(){\n        new GridLayoutManager.SpanSizeLookup(){\n        @override\n        public int getSpanSize(int position){\n                return (position % 3 == 0 ? 2 : 1)\n            }\n        }\n    }   \n```\n所以，一开始可以把这个2设置大一点，后面可以动态设置，看上去就会造成一种多种格子的错觉。\n\n- GridLayoutManger的同一行的ItemView的itemHeight必须一致，否则同一行的ItemView底部会出现空隙。这种情况请使用StaggeredGridLayoutManager\n\n#### 2. LayoutManager <-------> Recycler <--------> Adapter\nLayoutManager永远永远永远不要碰Adapter!!!\n\n### 3.Recycler构造\nRecycler内部有两个集合:\n1. Scrap Heap ： detachAndScrapView() 暂时不用的View丢到这里，随时取回使用\n2. Recycle Pool: removeAndRecycleView() 确定不需要的View丢到这里，拿回来时position或者data变了\n\n### 4.FillGaps,最重要的方法\n1. Discover firstVisible position/location\n2. 找到layout Gaps\n```java\nfindFirstVisiblePosition\n```\n\n3. Scrap everything(丢到ScrapHeap)\n```java\n /**\n         * Temporarily detach and scrap all currently attached child views. Views will be scrapped\n         * into the given Recycler. The Recycler may prefer to reuse scrap views before\n         * other views that were previously recycled.\n         *\n         * @param recycler Recycler to scrap views into\n         */\n        public void detachAndScrapAttachedViews(Recycler recycler) {\n            final int childCount = getChildCount();\n            for (int i = childCount - 1; i >= 0; i--) {\n                final View v = getChildAt(i);\n                scrapOrRecycleView(recycler, i, v);\n            }\n        }\n```\n4. Lay out all visible positions\n\n```java\nfor(...){\n    int nextPosition = ...;\n    View view = recycler.getViewForPosition(nextPosition);\n    addView(view);\n    \n    //注意这里的Measure和Layout不是平时使用的measureChild和layout方法，原因是ItemDecoration\n    measureChildWithMargin(view,...) \n    layoutDecorated(view,....)\n    }\n```\n5. Recycle remaining views\n```java\nfinal List<RecyclerView.ViewHolder> scrapList =\n    recycler.getScrapList();\nfor(int i=0;i<scrapList.size;i++){\n    final View removingView = scrapList.get(i);\n    recycler.recycleView(removingView);\n    }    \n```\n\n注意: 丢到RecyclerPool的View的viewHolder、LayoutParams都被清除掉\n\n\n### 4. Scroll事件\n```java\n   public int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state) {\n   \n   //dx 表示系统根据传入的TouchEvent告诉你应该滑动多少\n   dx <0 内容向右滑动\n   dx > 0内容向左滑动\n   //这个正负号和ScrollBy那个是一样的邪门\n   //返回值是你告诉系统你实际滑动了多少\n   offsetChildrenHorizontal(delta);//调用该方法会帮助你移动所有的ChildView，比一个个Iterate方便多了\n   }\n```\n### 5.notifyDataSetChanged()调用了什么函数\n最终会走到onLayoutChildren这里面，就跟重新走一遍layout就可以了\n\n### 6.ScrollToPosition()和SmoothScrollToPosition()\n两者的实现的不同:\nscrollToPosition:Track Requested Position、Trigger requestLayout\nSmoothscrollToPosition: Create a SmoothScroller instance、Set the Target Position、invoke startSmoothScroll\nSmoothScroller是一个接口，在里面实现computeScrollVectorForPosition返回需要到达的位置\n\n### 7. supportPredictiveItemAnimation主要用于ItemChange Animation\n主要在发生变化时展示动画。如果想要在滑动过程中展示动画的话，可以考虑在onViewAttachedToWindow或者onBindViewHolder里面给View添加TranslationX（从左边出来），Alpha(透明度从0变成1)，或者ScaleX等等\n\n\n\n### Reference\n1. [Dave Smith](https://github.com/devunwired/recyclerview-playground)\n2. [500px](https://github.com/500px/greedo-layout-for-android.git)","source":"_posts/2016-10-20-write-your-own-layoutmanager.md","raw":"---\ntitle: 自定义LayoutManager\ndate: 2016-10-20 16:37:42\ntags:\n---\n\n### 1. 系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。\n基本用法都很简单，这里记录一些重要的用法\n\n![](http://odzl05jxx.bkt.clouddn.com/Googling%20the%20Error%20Message.jpg?imageView2/2/w/600)\n<!--more-->\n\n- GridLayoutManager可以设置某个Item在某一行占据的Column num（VERTICAL的情况下）\n代码如下:\n```java\nGridLayoutManager manager = new GridLayoutManager(\n   this,2 ,GridLayoutManager.VERTICAL,false)\n   \nmanager.setSpanSizeLookup(){\n        new GridLayoutManager.SpanSizeLookup(){\n        @override\n        public int getSpanSize(int position){\n                return (position % 3 == 0 ? 2 : 1)\n            }\n        }\n    }   \n```\n所以，一开始可以把这个2设置大一点，后面可以动态设置，看上去就会造成一种多种格子的错觉。\n\n- GridLayoutManger的同一行的ItemView的itemHeight必须一致，否则同一行的ItemView底部会出现空隙。这种情况请使用StaggeredGridLayoutManager\n\n#### 2. LayoutManager <-------> Recycler <--------> Adapter\nLayoutManager永远永远永远不要碰Adapter!!!\n\n### 3.Recycler构造\nRecycler内部有两个集合:\n1. Scrap Heap ： detachAndScrapView() 暂时不用的View丢到这里，随时取回使用\n2. Recycle Pool: removeAndRecycleView() 确定不需要的View丢到这里，拿回来时position或者data变了\n\n### 4.FillGaps,最重要的方法\n1. Discover firstVisible position/location\n2. 找到layout Gaps\n```java\nfindFirstVisiblePosition\n```\n\n3. Scrap everything(丢到ScrapHeap)\n```java\n /**\n         * Temporarily detach and scrap all currently attached child views. Views will be scrapped\n         * into the given Recycler. The Recycler may prefer to reuse scrap views before\n         * other views that were previously recycled.\n         *\n         * @param recycler Recycler to scrap views into\n         */\n        public void detachAndScrapAttachedViews(Recycler recycler) {\n            final int childCount = getChildCount();\n            for (int i = childCount - 1; i >= 0; i--) {\n                final View v = getChildAt(i);\n                scrapOrRecycleView(recycler, i, v);\n            }\n        }\n```\n4. Lay out all visible positions\n\n```java\nfor(...){\n    int nextPosition = ...;\n    View view = recycler.getViewForPosition(nextPosition);\n    addView(view);\n    \n    //注意这里的Measure和Layout不是平时使用的measureChild和layout方法，原因是ItemDecoration\n    measureChildWithMargin(view,...) \n    layoutDecorated(view,....)\n    }\n```\n5. Recycle remaining views\n```java\nfinal List<RecyclerView.ViewHolder> scrapList =\n    recycler.getScrapList();\nfor(int i=0;i<scrapList.size;i++){\n    final View removingView = scrapList.get(i);\n    recycler.recycleView(removingView);\n    }    \n```\n\n注意: 丢到RecyclerPool的View的viewHolder、LayoutParams都被清除掉\n\n\n### 4. Scroll事件\n```java\n   public int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state) {\n   \n   //dx 表示系统根据传入的TouchEvent告诉你应该滑动多少\n   dx <0 内容向右滑动\n   dx > 0内容向左滑动\n   //这个正负号和ScrollBy那个是一样的邪门\n   //返回值是你告诉系统你实际滑动了多少\n   offsetChildrenHorizontal(delta);//调用该方法会帮助你移动所有的ChildView，比一个个Iterate方便多了\n   }\n```\n### 5.notifyDataSetChanged()调用了什么函数\n最终会走到onLayoutChildren这里面，就跟重新走一遍layout就可以了\n\n### 6.ScrollToPosition()和SmoothScrollToPosition()\n两者的实现的不同:\nscrollToPosition:Track Requested Position、Trigger requestLayout\nSmoothscrollToPosition: Create a SmoothScroller instance、Set the Target Position、invoke startSmoothScroll\nSmoothScroller是一个接口，在里面实现computeScrollVectorForPosition返回需要到达的位置\n\n### 7. supportPredictiveItemAnimation主要用于ItemChange Animation\n主要在发生变化时展示动画。如果想要在滑动过程中展示动画的话，可以考虑在onViewAttachedToWindow或者onBindViewHolder里面给View添加TranslationX（从左边出来），Alpha(透明度从0变成1)，或者ScaleX等等\n\n\n\n### Reference\n1. [Dave Smith](https://github.com/devunwired/recyclerview-playground)\n2. [500px](https://github.com/500px/greedo-layout-for-android.git)","slug":"2016-10-20-write-your-own-layoutmanager","published":1,"updated":"2016-11-01T04:03:11.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzmb000c7gvr69f197vz","content":"<h3 id=\"1-系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。\"><a href=\"#1-系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。\" class=\"headerlink\" title=\"1. 系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。\"></a>1. 系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。</h3><p>基本用法都很简单，这里记录一些重要的用法</p>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/Googling%20the%20Error%20Message.jpg?imageView2/2/w/600\" alt=\"\"><br><a id=\"more\"></a></p>\n<ul>\n<li>GridLayoutManager可以设置某个Item在某一行占据的Column num（VERTICAL的情况下）<br>代码如下:<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">GridLayoutManager manager = <span class=\"keyword\">new</span> GridLayoutManager(</div><div class=\"line\">   <span class=\"keyword\">this</span>,<span class=\"number\">2</span> ,GridLayoutManager.VERTICAL,<span class=\"keyword\">false</span>)</div><div class=\"line\">   </div><div class=\"line\">manager.setSpanSizeLookup()&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> GridLayoutManager.SpanSizeLookup()&#123;</div><div class=\"line\">        <span class=\"meta\">@override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSpanSize</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> (position % <span class=\"number\">3</span> == <span class=\"number\">0</span> ? <span class=\"number\">2</span> : <span class=\"number\">1</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>所以，一开始可以把这个2设置大一点，后面可以动态设置，看上去就会造成一种多种格子的错觉。</p>\n<ul>\n<li>GridLayoutManger的同一行的ItemView的itemHeight必须一致，否则同一行的ItemView底部会出现空隙。这种情况请使用StaggeredGridLayoutManager</li>\n</ul>\n<h4 id=\"2-LayoutManager-lt-——-gt-Recycler-lt-——–-gt-Adapter\"><a href=\"#2-LayoutManager-lt-——-gt-Recycler-lt-——–-gt-Adapter\" class=\"headerlink\" title=\"2. LayoutManager &lt;——-&gt; Recycler &lt;——–&gt; Adapter\"></a>2. LayoutManager &lt;——-&gt; Recycler &lt;——–&gt; Adapter</h4><p>LayoutManager永远永远永远不要碰Adapter!!!</p>\n<h3 id=\"3-Recycler构造\"><a href=\"#3-Recycler构造\" class=\"headerlink\" title=\"3.Recycler构造\"></a>3.Recycler构造</h3><p>Recycler内部有两个集合:</p>\n<ol>\n<li>Scrap Heap ： detachAndScrapView() 暂时不用的View丢到这里，随时取回使用</li>\n<li>Recycle Pool: removeAndRecycleView() 确定不需要的View丢到这里，拿回来时position或者data变了</li>\n</ol>\n<h3 id=\"4-FillGaps-最重要的方法\"><a href=\"#4-FillGaps-最重要的方法\" class=\"headerlink\" title=\"4.FillGaps,最重要的方法\"></a>4.FillGaps,最重要的方法</h3><ol>\n<li>Discover firstVisible position/location</li>\n<li><p>找到layout Gaps</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">findFirstVisiblePosition</div></pre></td></tr></table></figure>\n</li>\n<li><p>Scrap everything(丢到ScrapHeap)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">        * Temporarily detach and scrap all currently attached child views. Views will be scrapped</div><div class=\"line\">        * into the given Recycler. The Recycler may prefer to reuse scrap views before</div><div class=\"line\">        * other views that were previously recycled.</div><div class=\"line\">        *</div><div class=\"line\">        * <span class=\"doctag\">@param</span> recycler Recycler to scrap views into</div><div class=\"line\">        */</div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">detachAndScrapAttachedViews</span><span class=\"params\">(Recycler recycler)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = childCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> View v = getChildAt(i);</div><div class=\"line\">               scrapOrRecycleView(recycler, i, v);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Lay out all visible positions</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(...)&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> nextPosition = ...;</div><div class=\"line\">    View view = recycler.getViewForPosition(nextPosition);</div><div class=\"line\">    addView(view);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//注意这里的Measure和Layout不是平时使用的measureChild和layout方法，原因是ItemDecoration</span></div><div class=\"line\">    measureChildWithMargin(view,...) </div><div class=\"line\">    layoutDecorated(view,....)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>Recycle remaining views<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> List&lt;RecyclerView.ViewHolder&gt; scrapList =</div><div class=\"line\">    recycler.getScrapList();</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;scrapList.size;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> View removingView = scrapList.get(i);</div><div class=\"line\">    recycler.recycleView(removingView);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意: 丢到RecyclerPool的View的viewHolder、LayoutParams都被清除掉</p>\n<h3 id=\"4-Scroll事件\"><a href=\"#4-Scroll事件\" class=\"headerlink\" title=\"4. Scroll事件\"></a>4. Scroll事件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">scrollHorizontallyBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx, RecyclerView.Recycler recycler, RecyclerView.State state)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//dx 表示系统根据传入的TouchEvent告诉你应该滑动多少</span></div><div class=\"line\">dx &lt;<span class=\"number\">0</span> 内容向右滑动</div><div class=\"line\">dx &gt; <span class=\"number\">0</span>内容向左滑动</div><div class=\"line\"><span class=\"comment\">//这个正负号和ScrollBy那个是一样的邪门</span></div><div class=\"line\"><span class=\"comment\">//返回值是你告诉系统你实际滑动了多少</span></div><div class=\"line\">offsetChildrenHorizontal(delta);<span class=\"comment\">//调用该方法会帮助你移动所有的ChildView，比一个个Iterate方便多了</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"5-notifyDataSetChanged-调用了什么函数\"><a href=\"#5-notifyDataSetChanged-调用了什么函数\" class=\"headerlink\" title=\"5.notifyDataSetChanged()调用了什么函数\"></a>5.notifyDataSetChanged()调用了什么函数</h3><p>最终会走到onLayoutChildren这里面，就跟重新走一遍layout就可以了</p>\n<h3 id=\"6-ScrollToPosition-和SmoothScrollToPosition\"><a href=\"#6-ScrollToPosition-和SmoothScrollToPosition\" class=\"headerlink\" title=\"6.ScrollToPosition()和SmoothScrollToPosition()\"></a>6.ScrollToPosition()和SmoothScrollToPosition()</h3><p>两者的实现的不同:<br>scrollToPosition:Track Requested Position、Trigger requestLayout<br>SmoothscrollToPosition: Create a SmoothScroller instance、Set the Target Position、invoke startSmoothScroll<br>SmoothScroller是一个接口，在里面实现computeScrollVectorForPosition返回需要到达的位置</p>\n<h3 id=\"7-supportPredictiveItemAnimation主要用于ItemChange-Animation\"><a href=\"#7-supportPredictiveItemAnimation主要用于ItemChange-Animation\" class=\"headerlink\" title=\"7. supportPredictiveItemAnimation主要用于ItemChange Animation\"></a>7. supportPredictiveItemAnimation主要用于ItemChange Animation</h3><p>主要在发生变化时展示动画。如果想要在滑动过程中展示动画的话，可以考虑在onViewAttachedToWindow或者onBindViewHolder里面给View添加TranslationX（从左边出来），Alpha(透明度从0变成1)，或者ScaleX等等</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"https://github.com/devunwired/recyclerview-playground\" target=\"_blank\" rel=\"external\">Dave Smith</a></li>\n<li><a href=\"https://github.com/500px/greedo-layout-for-android.git\" target=\"_blank\" rel=\"external\">500px</a></li>\n</ol>\n","excerpt":"<h3 id=\"1-系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。\"><a href=\"#1-系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。\" class=\"headerlink\" title=\"1. 系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。\"></a>1. 系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。</h3><p>基本用法都很简单，这里记录一些重要的用法</p>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/Googling%20the%20Error%20Message.jpg?imageView2/2/w/600\" alt=\"\"><br>","more":"</p>\n<ul>\n<li>GridLayoutManager可以设置某个Item在某一行占据的Column num（VERTICAL的情况下）<br>代码如下:<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">GridLayoutManager manager = <span class=\"keyword\">new</span> GridLayoutManager(</div><div class=\"line\">   <span class=\"keyword\">this</span>,<span class=\"number\">2</span> ,GridLayoutManager.VERTICAL,<span class=\"keyword\">false</span>)</div><div class=\"line\">   </div><div class=\"line\">manager.setSpanSizeLookup()&#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> GridLayoutManager.SpanSizeLookup()&#123;</div><div class=\"line\">        <span class=\"meta\">@override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSpanSize</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> (position % <span class=\"number\">3</span> == <span class=\"number\">0</span> ? <span class=\"number\">2</span> : <span class=\"number\">1</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>所以，一开始可以把这个2设置大一点，后面可以动态设置，看上去就会造成一种多种格子的错觉。</p>\n<ul>\n<li>GridLayoutManger的同一行的ItemView的itemHeight必须一致，否则同一行的ItemView底部会出现空隙。这种情况请使用StaggeredGridLayoutManager</li>\n</ul>\n<h4 id=\"2-LayoutManager-lt-——-gt-Recycler-lt-——–-gt-Adapter\"><a href=\"#2-LayoutManager-lt-——-gt-Recycler-lt-——–-gt-Adapter\" class=\"headerlink\" title=\"2. LayoutManager &lt;——-&gt; Recycler &lt;——–&gt; Adapter\"></a>2. LayoutManager &lt;——-&gt; Recycler &lt;——–&gt; Adapter</h4><p>LayoutManager永远永远永远不要碰Adapter!!!</p>\n<h3 id=\"3-Recycler构造\"><a href=\"#3-Recycler构造\" class=\"headerlink\" title=\"3.Recycler构造\"></a>3.Recycler构造</h3><p>Recycler内部有两个集合:</p>\n<ol>\n<li>Scrap Heap ： detachAndScrapView() 暂时不用的View丢到这里，随时取回使用</li>\n<li>Recycle Pool: removeAndRecycleView() 确定不需要的View丢到这里，拿回来时position或者data变了</li>\n</ol>\n<h3 id=\"4-FillGaps-最重要的方法\"><a href=\"#4-FillGaps-最重要的方法\" class=\"headerlink\" title=\"4.FillGaps,最重要的方法\"></a>4.FillGaps,最重要的方法</h3><ol>\n<li>Discover firstVisible position/location</li>\n<li><p>找到layout Gaps</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">findFirstVisiblePosition</div></pre></td></tr></table></figure>\n</li>\n<li><p>Scrap everything(丢到ScrapHeap)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">        * Temporarily detach and scrap all currently attached child views. Views will be scrapped</div><div class=\"line\">        * into the given Recycler. The Recycler may prefer to reuse scrap views before</div><div class=\"line\">        * other views that were previously recycled.</div><div class=\"line\">        *</div><div class=\"line\">        * <span class=\"doctag\">@param</span> recycler Recycler to scrap views into</div><div class=\"line\">        */</span></div><div class=\"line\">       <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">detachAndScrapAttachedViews</span><span class=\"params\">(Recycler recycler)</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = childCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</div><div class=\"line\">               <span class=\"keyword\">final</span> View v = getChildAt(i);</div><div class=\"line\">               scrapOrRecycleView(recycler, i, v);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Lay out all visible positions</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(...)&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> nextPosition = ...;</div><div class=\"line\">    View view = recycler.getViewForPosition(nextPosition);</div><div class=\"line\">    addView(view);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">//注意这里的Measure和Layout不是平时使用的measureChild和layout方法，原因是ItemDecoration</span></div><div class=\"line\">    measureChildWithMargin(view,...) </div><div class=\"line\">    layoutDecorated(view,....)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>Recycle remaining views<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> List&lt;RecyclerView.ViewHolder&gt; scrapList =</div><div class=\"line\">    recycler.getScrapList();</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;scrapList.size;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> View removingView = scrapList.get(i);</div><div class=\"line\">    recycler.recycleView(removingView);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>注意: 丢到RecyclerPool的View的viewHolder、LayoutParams都被清除掉</p>\n<h3 id=\"4-Scroll事件\"><a href=\"#4-Scroll事件\" class=\"headerlink\" title=\"4. Scroll事件\"></a>4. Scroll事件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">scrollHorizontallyBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx, RecyclerView.Recycler recycler, RecyclerView.State state)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//dx 表示系统根据传入的TouchEvent告诉你应该滑动多少</span></div><div class=\"line\">dx &lt;<span class=\"number\">0</span> 内容向右滑动</div><div class=\"line\">dx &gt; <span class=\"number\">0</span>内容向左滑动</div><div class=\"line\"><span class=\"comment\">//这个正负号和ScrollBy那个是一样的邪门</span></div><div class=\"line\"><span class=\"comment\">//返回值是你告诉系统你实际滑动了多少</span></div><div class=\"line\">offsetChildrenHorizontal(delta);<span class=\"comment\">//调用该方法会帮助你移动所有的ChildView，比一个个Iterate方便多了</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"5-notifyDataSetChanged-调用了什么函数\"><a href=\"#5-notifyDataSetChanged-调用了什么函数\" class=\"headerlink\" title=\"5.notifyDataSetChanged()调用了什么函数\"></a>5.notifyDataSetChanged()调用了什么函数</h3><p>最终会走到onLayoutChildren这里面，就跟重新走一遍layout就可以了</p>\n<h3 id=\"6-ScrollToPosition-和SmoothScrollToPosition\"><a href=\"#6-ScrollToPosition-和SmoothScrollToPosition\" class=\"headerlink\" title=\"6.ScrollToPosition()和SmoothScrollToPosition()\"></a>6.ScrollToPosition()和SmoothScrollToPosition()</h3><p>两者的实现的不同:<br>scrollToPosition:Track Requested Position、Trigger requestLayout<br>SmoothscrollToPosition: Create a SmoothScroller instance、Set the Target Position、invoke startSmoothScroll<br>SmoothScroller是一个接口，在里面实现computeScrollVectorForPosition返回需要到达的位置</p>\n<h3 id=\"7-supportPredictiveItemAnimation主要用于ItemChange-Animation\"><a href=\"#7-supportPredictiveItemAnimation主要用于ItemChange-Animation\" class=\"headerlink\" title=\"7. supportPredictiveItemAnimation主要用于ItemChange Animation\"></a>7. supportPredictiveItemAnimation主要用于ItemChange Animation</h3><p>主要在发生变化时展示动画。如果想要在滑动过程中展示动画的话，可以考虑在onViewAttachedToWindow或者onBindViewHolder里面给View添加TranslationX（从左边出来），Alpha(透明度从0变成1)，或者ScaleX等等</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><ol>\n<li><a href=\"https://github.com/devunwired/recyclerview-playground\">Dave Smith</a></li>\n<li><a href=\"https://github.com/500px/greedo-layout-for-android.git\">500px</a></li>\n</ol>"},{"title":"android-Ultra-pull-to-refresh分析","date":"2016-10-24T02:25:35.000Z","_content":" 最早开始接触安卓的时候就知道有Chris Banes的[Pull-To-Refresh](https://github.com/chrisbanes/Android-PullToRefresh)，当时这个库已经被标记被Deprecated了，后来出于寻找替代品的目的找到了秋百万的[android-Ultra-pull-toRefresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh)，直接\n\n ![fork](http://odzl05jxx.bkt.clouddn.com/687474703a2f2f692e696d6775722e636f6d2f4766746846417a2e706e67.png)\n\n 当时甚至没有能力把一个Demo跑起来。之后的项目中，直接使用swipeRefreshLayout了。现在回头看，终于觉得可以尝试着分析一遍整个下拉刷新的过程。本文只针对[android-Ultra-pulltoRefresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh)部分源码进行分析。拆一个轮子可能只需要花一天时间，但能够从无到有构思出这个框架，将项目搭建起来并且坚持长期维护真的是一件需要很强毅力的事情，向为开源社区贡献优秀代码的秋百万和众多做出贡献的开发者致敬。\n <!--more-->\n\n ### 1. 从Demo开始吧\n从github clone下来之后，改一下gradle版本，compile sdk version什么的就可以运行项目自带的Demo了.\nMainActivity 添加了一个PtrDemoHomeFragment,onCreateView里面返回的View对应的xml文件为\nfragment_ptr_home.xml\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <in.srain.cube.views.ptr.PtrFrameLayout\n        android:id=\"@+id/fragment_ptr_home_ptr_frame\"\n        xmlns:cube_ptr=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        cube_ptr:ptr_duration_to_close=\"200\"\n        cube_ptr:ptr_duration_to_close_header=\"1000\"\n        cube_ptr:ptr_keep_header_when_refresh=\"true\"\n        cube_ptr:ptr_pull_to_fresh=\"false\"\n        cube_ptr:ptr_ratio_of_header_height_to_refresh=\"1.2\"\n        cube_ptr:ptr_resistance=\"1.7\">\n        <ScrollView\n            android:id=\"@+id/fragment_block_menu_scroll_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:background=\"@color/cube_mints_white\">\n\n            <in.srain.cube.views.block.BlockListView\n                android:id=\"@+id/fragment_block_menu_block_list\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:padding=\"@dimen/cube_mints_content_view_padding\" />\n        </ScrollView>\n    </in.srain.cube.views.ptr.PtrFrameLayout>\n</LinearLayout>\n```\n默认主页已经可以下拉刷新了，那么主要的事件拦截操作应该就在这个ptrFrameLayout里面\n\n\n### 2. PtrFrameLayout源码\n从注释来看 \n> This layout view for \"Pull to Refresh(Ptr)\" support all of the view, you can contain everything you want.\n  support: pull to refresh / release to refresh / auto refresh / keep header view while refreshing / hide header view while refreshing\n  It defines {@link in.srain.cube.views.ptr.PtrUIHandler}, which allows you customize the UI easily.\n\n能够容纳各种View，同时支持下拉刷新，下拉释放刷新，自动刷新，刷新时保留刷新动画，刷新时隐藏刷新动画\n\n一步步来看\n\n1. **构造函数**\n\n```java\npublic class PtrFrameLayout extends ViewGroup {\n\n public PtrFrameLayout(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        //删除无关代码\n        TypedArray arr = context.obtainStyledAttributes(attrs, R.styleable.PtrFrameLayout, 0, 0);\n        if (arr != null) {\n            mHeaderId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_header, mHeaderId); // HeaderView的layout文件id\n            mContainerId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_content, mContainerId); // contentView的layout文件id\n            mDurationToClose = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close, mDurationToClose);// 维持刷新动画多久开始关闭HeaderView\n            mDurationToCloseHeader = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close_header, mDurationToCloseHeader);\n            float ratio = mPtrIndicator.getRatioOfHeaderToHeightRefresh();\n            ratio = arr.getFloat(R.styleable.PtrFrameLayout_ptr_ratio_of_header_height_to_refresh, ratio);\n            mKeepHeaderWhenRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_keep_header_when_refresh, mKeepHeaderWhenRefresh);\n            mPullToRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_pull_to_fresh, mPullToRefresh);\n            arr.recycle();\n        }\n        //ViewConfiguration很常见了，mTouchSlop用于判断用户操作手势是否有效\n        final ViewConfiguration conf = ViewConfiguration.get(getContext());\n        mPagingTouchSlop = conf.getScaledTouchSlop() * 2;\n    }\n\n}\n```\n\n构造函数里面主要就是获得在xml中设定的一些自定义属性的值并保存为成员变量，实际用途后面再看。\n\n2. **onFinishInflate**\n 这个方法在inflate xml文件结束，所有的childView都已经添加之后调用\n PtrFrameLayout复写了这个方法，\n- 首先检查ChildView数量，如果childCount >2 会报错\n- 然后检查两个child(这里主要看childCount=2的情况下)\n```java\n//省略若干\nif (child1 instanceof PtrUIHandler) {\n                    mHeaderView = child1;\n                    mContent = child2;\n                } else if (child2 instanceof PtrUIHandler) {\n                    mHeaderView = child2;\n                    mContent = child1;\n                } \n//省略若干                \n```\n来看一下这个ptrUIHandler\n```java\npublic interface PtrUIHandler {\n\n    /**\n     * When the content view has reached top and refresh has been completed, view will be reset.\n     *\n     * @param frame\n     */\n    public void onUIReset(PtrFrameLayout frame);\n\n    /**\n     * prepare for loading\n     *\n     * @param frame\n     */\n    public void onUIRefreshPrepare(PtrFrameLayout frame);\n\n    /**\n     * perform refreshing UI\n     */\n    public void onUIRefreshBegin(PtrFrameLayout frame);\n\n    /**\n     * perform UI after refresh\n     */\n    public void onUIRefreshComplete(PtrFrameLayout frame);\n\n    public void onUIPositionChange(PtrFrameLayout frame, boolean isUnderTouch, byte status, PtrIndicator ptrIndicator);\n}\n```\n大概可以猜到这货是用来指定下拉过程中的刷新开始，刷新结束，刷新结束后复位等过程的实现者，具体的下拉过程中的动画，位移等特效都应该由这接口的实例(View)来完成。\n\n3. **onMeasure**\n```java\n @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        //省略...\n         measureContentView(mContent, widthMeasureSpec, heightMeasureSpec);\n    }\n\n\n     private void measureContentView(View child,\n                                    int parentWidthMeasureSpec,\n                                    int parentHeightMeasureSpec) {\n        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n                getPaddingLeft() + getPaddingRight() + lp.leftMargin + lp.rightMargin, lp.width);\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n                getPaddingTop() + getPaddingBottom() + lp.topMargin, lp.height);\n\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    }\n```\n主要就是调用了measureContentView方法，都是很中规中矩的实现\n\n4. **onLayout**\n代码就不贴了，根据LayoutParams计算出需要的margin,最主要的Top是由\n>  int offset = mPtrIndicator.getCurrentPosY();\n\n获得的，mPterIndicator是一个单独的组件，用于保存一些实时状态。\n滑动过程中如果有动画效果，会走到这个方法里，所以及时更新最新的位置很重要，ptr将这一功能剥离出来，这大概就是我所理解的解耦吧。\n\n\n5. **dispatchTouchEvent**\n主要的手势处理逻辑都在这里，关于TouchEvent的分发处理，这里不再赘述。\n简单列出执行顺序:\n> ViewGroup.dispatchTouchEvent----ViewGroup.onInterceptTouchEvent---View.dispatchTouchEvent----- etc 、、、、\n\n简书上有作者写出了非常好的关于TouchEvent分发的[文章](http://www.jianshu.com/p/e99b5e8bd67b)，忘记了的话可以去看看。\n来看这部分的实现，有删节\n```java\n @Override\n    public boolean dispatchTouchEvent(MotionEvent e) {\n    \t//.....\n        switch (action) {\n            case MotionEvent.ACTION_UP:\n            case MotionEvent.ACTION_CANCEL:\n                if (mPtrIndicator.hasLeftStartPosition()) {\n                    onRelease(false); //手指抬起后的操作\n                    // ......\n                    return dispatchTouchEventSupper(e);\n                } else {\n                    return dispatchTouchEventSupper(e);\n                }\n\n            case MotionEvent.ACTION_DOWN:\n            \t//取消之前还在运行的Scroller等等。。\n                // The cancel event will be sent once the position is moved.\n                // So let the event pass to children.\n                // fix #93, #102\n                dispatchTouchEventSupper(e);\n                return true;//这里返回true，child将会受到ACTION_CANCEL\n\n            case MotionEvent.ACTION_MOVE:\n                mLastMoveEvent = e; //这里实时更新装填\n                mPtrIndicator.onMove(e.getX(), e.getY());\n                float offsetX = mPtrIndicator.getOffsetX();\n                float offsetY = mPtrIndicator.getOffsetY();\n               \n\n                boolean moveDown = offsetY > 0;\n                boolean moveUp = !moveDown;\n                boolean canMoveUp = mPtrIndicator.hasLeftStartPosition();\n\n                // disable move when header not reach top\n                if (moveDown && mPtrHandler != null && !mPtrHandler.checkCanDoRefresh(this, mContent, mHeaderView)) {\n                    return dispatchTouchEventSupper(e);\n                }\n\n                if ((moveUp && canMoveUp) || moveDown) {\n                    movePos(offsetY); //实现滑动操作的代码\n                    return true;// 后续事件将只会走到此方法，不会再往下传递，直到ACTION_UP，本次手势结束\n                }\n        }\n        return dispatchTouchEventSupper(e);\n    }\n\n```\n用户手指按下。。。。。手指滑动。。。。。手指抬起\n\n**ACTION_DOWN** : 手指按下后将TouchEvent交给mPtrIndicator处理，后者保留了当前ptr的位置，高度等信息。在执行ACTION_DOWN时，并没有简单地使用Event.getY，而是保留了当前position的一个备份(这是必要的，因为对于下拉刷新来说，最终需要回到的位置是0，而用户按下的位置可能在contentView比较靠下面的位置。ACTION_DOWN的getY并没有太大意义)。随后调用Scroller的 mScroller.forceFinished(true)方法停止滑动，如果定义了页面自动刷新(就是进来会下拉刷新一次)，还会调用onRelease(true)方法，onRelease方法与ACTION_UP相关。\n\n**ACTION_MOVE** : 手指开始在屏幕上滑动，首先将滑动距离的改变保留到mPtrIndicator中，这里作者将很多坐标计算的方法都拆出来放到这个mPtrIndicator中，暴露出get方法，也使得代码更清晰。在开始滑动之前，先检查下是否是横向滑动，以及是否在(mDisableWhenHorizontalMove，ViewPager需要消费横向手势，这个标志符是为了return super)。\n往下走，来看这一段\n```java\n\tboolean moveDown = offsetY > 0; 新的Event中的y值和mptrIndicator中保留的当前y的差值，所以手指往下拉的话，offset >0,也就是这里的moveDown\n\tboolean moveUp = !moveDown;\n\tboolean canMoveUp = mPtrIndicator.hasLeftStartPosition()// 检查下当前Event中的y是否大于0，即内容区域是否已经往下走了一点了\n```\n接下来，再次询问mPtrHandler能否DoRefresh,将自身和ChildView都交出去，所以可操作性很大\n大部分的情况下，直接使用一个\n>  return PtrDefaultHandler.checkContentCanBePulledDown(frame, content, header);\n\n使用了一个类似于ViewCompat.canScollVertically的方法，但判断下如果是AbstractListView的话，会调用getFirstVisiblePosition等方法，因为AdapterView能否滑动应该是由其内容能否滑动来决定的。\n如果这个方法返回true。接着往下走，开始执行View的滑动方法:\n判断下是否手指在往上拉(moveUp && canMoveUp)或者往下拉(moveDown),return true，首先事件就不会再往下走，另外后续的ACTION_MOVE_ACTION_UP都只会传递到这个dispatchTouchEvent中\n实现滑动操作的代码最后会执行这里\n```java\n  private void updatePos(int change) {\n       \n\n        boolean isUnderTouch = mPtrIndicator.isUnderTouch();\n\n        // once moved, cancel event will be sent to child\n        if (isUnderTouch && !mHasSendCancelEvent && mPtrIndicator.hasMovedAfterPressedDown()) {\n            mHasSendCancelEvent = true;\n            sendCancelEvent();\n        }\n\n        // leave initiated position or just refresh complete\n        if ((mPtrIndicator.hasJustLeftStartPosition() && mStatus == PTR_STATUS_INIT) ||\n                (mPtrIndicator.goDownCrossFinishPosition() && mStatus == PTR_STATUS_COMPLETE && isEnabledNextPtrAtOnce())) {\n\n            mStatus = PTR_STATUS_PREPARE;\n            mPtrUIHandlerHolder.onUIRefreshPrepare(this);//刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。这个Holder的结构类似于一个链表，一个Holder里面有UIHandler，以及下一个Holder(next)。作用类似于一个集合，等于作者自己实现了这样一个不断循环的消息列表(看起来挺像Message的)。这个Holder的作用在于可以动态添加UIHanlder，相对应的方法都做好了(addHandler)。\n            //再次强调，这里表示**刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。此时的状态为STATUS_PREPARED**\n        }\n\n        // back to initiated position\n        if (mPtrIndicator.hasJustBackToStartPosition()) {\n            tryToNotifyReset();\n            //**刚刚从下面回到0的位置，通知UIHandler的onUIReset()方法,此时的状态为STATUS_INIT**\n            //将整个过程划分的真详细\n            // recover event to children，虽然手指还在屏幕上，处于ACTION_MOVE，但这里由于已经复位，需要把ACTION_DOWN传递下去，这一段比较复杂。\n            if (isUnderTouch) {\n                sendDownEvent();\n            }\n        }\n\n        // Pull to Refresh\n        if (mStatus == PTR_STATUS_PREPARE) {//从上到下依次为0 ， 出现动画临界值， HeadView高度\n            // reach fresh height while moving from top to bottom\n            if (isUnderTouch && !isAutoRefresh() && mPullToRefresh  // 手指还在屏幕上，不是自动刷新且允许ptr且到达了下滑出现动画效果的临界值，条件还是比较苛刻的\n                    && mPtrIndicator.crossRefreshLineFromTopToBottom()) {\n                tryToPerformRefresh();\n            }\n            // reach header height while auto refresh\n            if (performAutoRefreshButLater() && mPtrIndicator.hasJustReachedHeaderHeightFromTopToBottom()) {//刚刚超过headerView高度一丁点\n                tryToPerformRefresh();\n            }\n        }\n        //tryToPerformRefresh()方法判断mPtrIndicator.isOverOffsetToRefresh()，满足条件的话进入STATUS_LOADING，这个时候就要开始让动画run了。所以这里调用的是 mPtrUIHandlerHolder.onUIRefreshBegin(this);和mPtrHandler.onRefreshBegin(this);前者是后来手动添加的UIHandler，后者则是在onInFlateFinish中自行判断的，这两个都会被执行。这里扯一句，这个Holder就像一个中间层，持有了UIHandler,所有方法都调用的是后者HanldleUI的方法。facade模式？\n\n\n        // 终于看到实际调用View滑动的代码了，让一个View滑动的方式有很多种，这里采用的是改变X,Y的方式(X = left+translationX;Y = top+translationY) \n        mHeaderView.offsetTopAndBottom(change);\n        if (!isPinContent()) {\n            mContent.offsetTopAndBottom(change);\n        }\n        invalidate();??我觉得这里好像没有必要这么频繁的调这一句话\n\n        //移动完成之后通知UIHandlerHolder位置改变了，没有通知mUIHandler是因为后者就是mContent和mHeaderView。\n        if (mPtrUIHandlerHolder.hasHandler()) {\n            mPtrUIHandlerHolder.onUIPositionChange(this, isUnderTouch, mStatus, mPtrIndicator);\n        }\n        onPositionChange(isUnderTouch, mStatus, mPtrIndicator);//最后还预留了一个onPositionChange的空方法，子类可能会有点用吧\n    }\n```\n到这里，ACTION_MOVE已经研究完毕，大部分的分析都在注释里面，只要分清楚滑动过程中的各种STATUS，我觉得还是比较好理解的。MOVE过程中伴随着距离的变化，ptr也进入不同的status，ptr本身其实只做了移动headrView和childView的工作，实际的动画效果等等都是由UIHanlder拿着ptr的实例去做的。关于能够滑动多少距离的问题，由于这里并没有判断，所以，这个contentView的下滑是没有下限的，不过在xml里面有一个自定义的resistance，相当于阻力系数了，设置大一点的话就不会出事。**目前手指还在屏幕上，status等于STATUS_PREPARED或者STATUS_LOADING。借用手机评测那帮人的话来说，跟手**\n\n\n**ACTION_UP**： mPtrIndicator中的mPressed设置为false，标示下当前手指已经不按在屏幕上了。如果这时候的位置>0，就是contentView还没有复位，需要想办法让它\"弹回来\"，这部分工作交给了onRelease(false)，这个false我猜肯定是后面加上去的(查了下git log果然。。。)。来看OnRelease:\n```java\n  private void onRelease(boolean stayForLoading) {\n\n        tryToPerformRefresh();//会检查下当前status!=STATUS_PREPARED的话直接return false，就是不是在刚开始或刚复位的情况下不做；否则继续执行performRefresh操作，其实这样想也符合常理，手指离开了屏幕，ptr应该能够自我判断是否还需要执行动画\n\n        if (mStatus == PTR_STATUS_LOADING) {\n            // keep header for fresh\n            if (mKeepHeaderWhenRefresh) {\n                // scroll header back\n                if (mPtrIndicator.isOverOffsetToKeepHeaderWhileLoading() && !stayForLoading) {//已经过了需要加载动画的位置，statyForLoading这里传进来的是false\n                    mScrollChecker.tryToScrollTo(mPtrIndicator.getOffsetToKeepHeaderWhileLoading(), mDurationToClose);//滑动到加载动画的位置，这里面是不断地post一个runnable，在run方法里面调用之前和ACTION_MOVE里面一样的那个movePos方法，所以重用性还好。也会通知相应的UIHandler或者UIHandlerHolder\n                } else {\n                    // do nothing\n                }\n            } else {\n                tryScrollBackToTopWhileLoading();//这里会一直滑动到0的位置，其实也是不断调用updatPos方法，会将STATUS重置为STATUS_INIT或者STATUS_PREPARED\n            }\n        } else {\n            if (mStatus == PTR_STATUS_COMPLETE) {//STATUS_COMPLETE通常由外部调用者调用refreshComplete public 方法设置，相当于SwipeRefreshLayout的setRefreshing()，否则将一直停留在加载状态。也就是说需要调用者手动设置关闭，这也符合常理，因为加载本身是需要时间的，把这个设置的时机交给开发者来手动设置几乎是唯一的选择。\n                notifyUIRefreshComplete(false);\n            } else {\n                tryScrollBackToTopAbortRefresh();\n            }\n        }\n    }\n```\n\n到此，ptr内部只剩下一些getter和setter了，不再解释，结合Demo使用就会有所体会。\n\n\n### 3. 总结\nptr的本质就是通过ViewGroup的dispatchTouchEvent将事件拦截在内部进行处理，并将事件过程分发给几个自定义的接口。而内部又添加了一些自定义的变量，并给出getter和setter，使得外部调用者使用起来十分轻松。只要掌握好事件分发处理和View的绘制流程，拆起来还算简单。当然，如果在实际项目中碰到了类似的需求，我倾向于定制一个简单一点的小工具。\n\n\n\n\n\n","source":"_posts/2016-10-24-a-peek-on-pull-to-refresh.md","raw":"---\ntitle: android-Ultra-pull-to-refresh分析\ndate: 2016-10-24 10:25:35\ncategories: Android  \ntags: [置顶]\n\n\n---\n 最早开始接触安卓的时候就知道有Chris Banes的[Pull-To-Refresh](https://github.com/chrisbanes/Android-PullToRefresh)，当时这个库已经被标记被Deprecated了，后来出于寻找替代品的目的找到了秋百万的[android-Ultra-pull-toRefresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh)，直接\n\n ![fork](http://odzl05jxx.bkt.clouddn.com/687474703a2f2f692e696d6775722e636f6d2f4766746846417a2e706e67.png)\n\n 当时甚至没有能力把一个Demo跑起来。之后的项目中，直接使用swipeRefreshLayout了。现在回头看，终于觉得可以尝试着分析一遍整个下拉刷新的过程。本文只针对[android-Ultra-pulltoRefresh](https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh)部分源码进行分析。拆一个轮子可能只需要花一天时间，但能够从无到有构思出这个框架，将项目搭建起来并且坚持长期维护真的是一件需要很强毅力的事情，向为开源社区贡献优秀代码的秋百万和众多做出贡献的开发者致敬。\n <!--more-->\n\n ### 1. 从Demo开始吧\n从github clone下来之后，改一下gradle版本，compile sdk version什么的就可以运行项目自带的Demo了.\nMainActivity 添加了一个PtrDemoHomeFragment,onCreateView里面返回的View对应的xml文件为\nfragment_ptr_home.xml\n```xml\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <in.srain.cube.views.ptr.PtrFrameLayout\n        android:id=\"@+id/fragment_ptr_home_ptr_frame\"\n        xmlns:cube_ptr=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        cube_ptr:ptr_duration_to_close=\"200\"\n        cube_ptr:ptr_duration_to_close_header=\"1000\"\n        cube_ptr:ptr_keep_header_when_refresh=\"true\"\n        cube_ptr:ptr_pull_to_fresh=\"false\"\n        cube_ptr:ptr_ratio_of_header_height_to_refresh=\"1.2\"\n        cube_ptr:ptr_resistance=\"1.7\">\n        <ScrollView\n            android:id=\"@+id/fragment_block_menu_scroll_view\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:background=\"@color/cube_mints_white\">\n\n            <in.srain.cube.views.block.BlockListView\n                android:id=\"@+id/fragment_block_menu_block_list\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:padding=\"@dimen/cube_mints_content_view_padding\" />\n        </ScrollView>\n    </in.srain.cube.views.ptr.PtrFrameLayout>\n</LinearLayout>\n```\n默认主页已经可以下拉刷新了，那么主要的事件拦截操作应该就在这个ptrFrameLayout里面\n\n\n### 2. PtrFrameLayout源码\n从注释来看 \n> This layout view for \"Pull to Refresh(Ptr)\" support all of the view, you can contain everything you want.\n  support: pull to refresh / release to refresh / auto refresh / keep header view while refreshing / hide header view while refreshing\n  It defines {@link in.srain.cube.views.ptr.PtrUIHandler}, which allows you customize the UI easily.\n\n能够容纳各种View，同时支持下拉刷新，下拉释放刷新，自动刷新，刷新时保留刷新动画，刷新时隐藏刷新动画\n\n一步步来看\n\n1. **构造函数**\n\n```java\npublic class PtrFrameLayout extends ViewGroup {\n\n public PtrFrameLayout(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        //删除无关代码\n        TypedArray arr = context.obtainStyledAttributes(attrs, R.styleable.PtrFrameLayout, 0, 0);\n        if (arr != null) {\n            mHeaderId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_header, mHeaderId); // HeaderView的layout文件id\n            mContainerId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_content, mContainerId); // contentView的layout文件id\n            mDurationToClose = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close, mDurationToClose);// 维持刷新动画多久开始关闭HeaderView\n            mDurationToCloseHeader = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close_header, mDurationToCloseHeader);\n            float ratio = mPtrIndicator.getRatioOfHeaderToHeightRefresh();\n            ratio = arr.getFloat(R.styleable.PtrFrameLayout_ptr_ratio_of_header_height_to_refresh, ratio);\n            mKeepHeaderWhenRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_keep_header_when_refresh, mKeepHeaderWhenRefresh);\n            mPullToRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_pull_to_fresh, mPullToRefresh);\n            arr.recycle();\n        }\n        //ViewConfiguration很常见了，mTouchSlop用于判断用户操作手势是否有效\n        final ViewConfiguration conf = ViewConfiguration.get(getContext());\n        mPagingTouchSlop = conf.getScaledTouchSlop() * 2;\n    }\n\n}\n```\n\n构造函数里面主要就是获得在xml中设定的一些自定义属性的值并保存为成员变量，实际用途后面再看。\n\n2. **onFinishInflate**\n 这个方法在inflate xml文件结束，所有的childView都已经添加之后调用\n PtrFrameLayout复写了这个方法，\n- 首先检查ChildView数量，如果childCount >2 会报错\n- 然后检查两个child(这里主要看childCount=2的情况下)\n```java\n//省略若干\nif (child1 instanceof PtrUIHandler) {\n                    mHeaderView = child1;\n                    mContent = child2;\n                } else if (child2 instanceof PtrUIHandler) {\n                    mHeaderView = child2;\n                    mContent = child1;\n                } \n//省略若干                \n```\n来看一下这个ptrUIHandler\n```java\npublic interface PtrUIHandler {\n\n    /**\n     * When the content view has reached top and refresh has been completed, view will be reset.\n     *\n     * @param frame\n     */\n    public void onUIReset(PtrFrameLayout frame);\n\n    /**\n     * prepare for loading\n     *\n     * @param frame\n     */\n    public void onUIRefreshPrepare(PtrFrameLayout frame);\n\n    /**\n     * perform refreshing UI\n     */\n    public void onUIRefreshBegin(PtrFrameLayout frame);\n\n    /**\n     * perform UI after refresh\n     */\n    public void onUIRefreshComplete(PtrFrameLayout frame);\n\n    public void onUIPositionChange(PtrFrameLayout frame, boolean isUnderTouch, byte status, PtrIndicator ptrIndicator);\n}\n```\n大概可以猜到这货是用来指定下拉过程中的刷新开始，刷新结束，刷新结束后复位等过程的实现者，具体的下拉过程中的动画，位移等特效都应该由这接口的实例(View)来完成。\n\n3. **onMeasure**\n```java\n @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        //省略...\n         measureContentView(mContent, widthMeasureSpec, heightMeasureSpec);\n    }\n\n\n     private void measureContentView(View child,\n                                    int parentWidthMeasureSpec,\n                                    int parentHeightMeasureSpec) {\n        final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();\n\n        final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,\n                getPaddingLeft() + getPaddingRight() + lp.leftMargin + lp.rightMargin, lp.width);\n        final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,\n                getPaddingTop() + getPaddingBottom() + lp.topMargin, lp.height);\n\n        child.measure(childWidthMeasureSpec, childHeightMeasureSpec);\n    }\n```\n主要就是调用了measureContentView方法，都是很中规中矩的实现\n\n4. **onLayout**\n代码就不贴了，根据LayoutParams计算出需要的margin,最主要的Top是由\n>  int offset = mPtrIndicator.getCurrentPosY();\n\n获得的，mPterIndicator是一个单独的组件，用于保存一些实时状态。\n滑动过程中如果有动画效果，会走到这个方法里，所以及时更新最新的位置很重要，ptr将这一功能剥离出来，这大概就是我所理解的解耦吧。\n\n\n5. **dispatchTouchEvent**\n主要的手势处理逻辑都在这里，关于TouchEvent的分发处理，这里不再赘述。\n简单列出执行顺序:\n> ViewGroup.dispatchTouchEvent----ViewGroup.onInterceptTouchEvent---View.dispatchTouchEvent----- etc 、、、、\n\n简书上有作者写出了非常好的关于TouchEvent分发的[文章](http://www.jianshu.com/p/e99b5e8bd67b)，忘记了的话可以去看看。\n来看这部分的实现，有删节\n```java\n @Override\n    public boolean dispatchTouchEvent(MotionEvent e) {\n    \t//.....\n        switch (action) {\n            case MotionEvent.ACTION_UP:\n            case MotionEvent.ACTION_CANCEL:\n                if (mPtrIndicator.hasLeftStartPosition()) {\n                    onRelease(false); //手指抬起后的操作\n                    // ......\n                    return dispatchTouchEventSupper(e);\n                } else {\n                    return dispatchTouchEventSupper(e);\n                }\n\n            case MotionEvent.ACTION_DOWN:\n            \t//取消之前还在运行的Scroller等等。。\n                // The cancel event will be sent once the position is moved.\n                // So let the event pass to children.\n                // fix #93, #102\n                dispatchTouchEventSupper(e);\n                return true;//这里返回true，child将会受到ACTION_CANCEL\n\n            case MotionEvent.ACTION_MOVE:\n                mLastMoveEvent = e; //这里实时更新装填\n                mPtrIndicator.onMove(e.getX(), e.getY());\n                float offsetX = mPtrIndicator.getOffsetX();\n                float offsetY = mPtrIndicator.getOffsetY();\n               \n\n                boolean moveDown = offsetY > 0;\n                boolean moveUp = !moveDown;\n                boolean canMoveUp = mPtrIndicator.hasLeftStartPosition();\n\n                // disable move when header not reach top\n                if (moveDown && mPtrHandler != null && !mPtrHandler.checkCanDoRefresh(this, mContent, mHeaderView)) {\n                    return dispatchTouchEventSupper(e);\n                }\n\n                if ((moveUp && canMoveUp) || moveDown) {\n                    movePos(offsetY); //实现滑动操作的代码\n                    return true;// 后续事件将只会走到此方法，不会再往下传递，直到ACTION_UP，本次手势结束\n                }\n        }\n        return dispatchTouchEventSupper(e);\n    }\n\n```\n用户手指按下。。。。。手指滑动。。。。。手指抬起\n\n**ACTION_DOWN** : 手指按下后将TouchEvent交给mPtrIndicator处理，后者保留了当前ptr的位置，高度等信息。在执行ACTION_DOWN时，并没有简单地使用Event.getY，而是保留了当前position的一个备份(这是必要的，因为对于下拉刷新来说，最终需要回到的位置是0，而用户按下的位置可能在contentView比较靠下面的位置。ACTION_DOWN的getY并没有太大意义)。随后调用Scroller的 mScroller.forceFinished(true)方法停止滑动，如果定义了页面自动刷新(就是进来会下拉刷新一次)，还会调用onRelease(true)方法，onRelease方法与ACTION_UP相关。\n\n**ACTION_MOVE** : 手指开始在屏幕上滑动，首先将滑动距离的改变保留到mPtrIndicator中，这里作者将很多坐标计算的方法都拆出来放到这个mPtrIndicator中，暴露出get方法，也使得代码更清晰。在开始滑动之前，先检查下是否是横向滑动，以及是否在(mDisableWhenHorizontalMove，ViewPager需要消费横向手势，这个标志符是为了return super)。\n往下走，来看这一段\n```java\n\tboolean moveDown = offsetY > 0; 新的Event中的y值和mptrIndicator中保留的当前y的差值，所以手指往下拉的话，offset >0,也就是这里的moveDown\n\tboolean moveUp = !moveDown;\n\tboolean canMoveUp = mPtrIndicator.hasLeftStartPosition()// 检查下当前Event中的y是否大于0，即内容区域是否已经往下走了一点了\n```\n接下来，再次询问mPtrHandler能否DoRefresh,将自身和ChildView都交出去，所以可操作性很大\n大部分的情况下，直接使用一个\n>  return PtrDefaultHandler.checkContentCanBePulledDown(frame, content, header);\n\n使用了一个类似于ViewCompat.canScollVertically的方法，但判断下如果是AbstractListView的话，会调用getFirstVisiblePosition等方法，因为AdapterView能否滑动应该是由其内容能否滑动来决定的。\n如果这个方法返回true。接着往下走，开始执行View的滑动方法:\n判断下是否手指在往上拉(moveUp && canMoveUp)或者往下拉(moveDown),return true，首先事件就不会再往下走，另外后续的ACTION_MOVE_ACTION_UP都只会传递到这个dispatchTouchEvent中\n实现滑动操作的代码最后会执行这里\n```java\n  private void updatePos(int change) {\n       \n\n        boolean isUnderTouch = mPtrIndicator.isUnderTouch();\n\n        // once moved, cancel event will be sent to child\n        if (isUnderTouch && !mHasSendCancelEvent && mPtrIndicator.hasMovedAfterPressedDown()) {\n            mHasSendCancelEvent = true;\n            sendCancelEvent();\n        }\n\n        // leave initiated position or just refresh complete\n        if ((mPtrIndicator.hasJustLeftStartPosition() && mStatus == PTR_STATUS_INIT) ||\n                (mPtrIndicator.goDownCrossFinishPosition() && mStatus == PTR_STATUS_COMPLETE && isEnabledNextPtrAtOnce())) {\n\n            mStatus = PTR_STATUS_PREPARE;\n            mPtrUIHandlerHolder.onUIRefreshPrepare(this);//刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。这个Holder的结构类似于一个链表，一个Holder里面有UIHandler，以及下一个Holder(next)。作用类似于一个集合，等于作者自己实现了这样一个不断循环的消息列表(看起来挺像Message的)。这个Holder的作用在于可以动态添加UIHanlder，相对应的方法都做好了(addHandler)。\n            //再次强调，这里表示**刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。此时的状态为STATUS_PREPARED**\n        }\n\n        // back to initiated position\n        if (mPtrIndicator.hasJustBackToStartPosition()) {\n            tryToNotifyReset();\n            //**刚刚从下面回到0的位置，通知UIHandler的onUIReset()方法,此时的状态为STATUS_INIT**\n            //将整个过程划分的真详细\n            // recover event to children，虽然手指还在屏幕上，处于ACTION_MOVE，但这里由于已经复位，需要把ACTION_DOWN传递下去，这一段比较复杂。\n            if (isUnderTouch) {\n                sendDownEvent();\n            }\n        }\n\n        // Pull to Refresh\n        if (mStatus == PTR_STATUS_PREPARE) {//从上到下依次为0 ， 出现动画临界值， HeadView高度\n            // reach fresh height while moving from top to bottom\n            if (isUnderTouch && !isAutoRefresh() && mPullToRefresh  // 手指还在屏幕上，不是自动刷新且允许ptr且到达了下滑出现动画效果的临界值，条件还是比较苛刻的\n                    && mPtrIndicator.crossRefreshLineFromTopToBottom()) {\n                tryToPerformRefresh();\n            }\n            // reach header height while auto refresh\n            if (performAutoRefreshButLater() && mPtrIndicator.hasJustReachedHeaderHeightFromTopToBottom()) {//刚刚超过headerView高度一丁点\n                tryToPerformRefresh();\n            }\n        }\n        //tryToPerformRefresh()方法判断mPtrIndicator.isOverOffsetToRefresh()，满足条件的话进入STATUS_LOADING，这个时候就要开始让动画run了。所以这里调用的是 mPtrUIHandlerHolder.onUIRefreshBegin(this);和mPtrHandler.onRefreshBegin(this);前者是后来手动添加的UIHandler，后者则是在onInFlateFinish中自行判断的，这两个都会被执行。这里扯一句，这个Holder就像一个中间层，持有了UIHandler,所有方法都调用的是后者HanldleUI的方法。facade模式？\n\n\n        // 终于看到实际调用View滑动的代码了，让一个View滑动的方式有很多种，这里采用的是改变X,Y的方式(X = left+translationX;Y = top+translationY) \n        mHeaderView.offsetTopAndBottom(change);\n        if (!isPinContent()) {\n            mContent.offsetTopAndBottom(change);\n        }\n        invalidate();??我觉得这里好像没有必要这么频繁的调这一句话\n\n        //移动完成之后通知UIHandlerHolder位置改变了，没有通知mUIHandler是因为后者就是mContent和mHeaderView。\n        if (mPtrUIHandlerHolder.hasHandler()) {\n            mPtrUIHandlerHolder.onUIPositionChange(this, isUnderTouch, mStatus, mPtrIndicator);\n        }\n        onPositionChange(isUnderTouch, mStatus, mPtrIndicator);//最后还预留了一个onPositionChange的空方法，子类可能会有点用吧\n    }\n```\n到这里，ACTION_MOVE已经研究完毕，大部分的分析都在注释里面，只要分清楚滑动过程中的各种STATUS，我觉得还是比较好理解的。MOVE过程中伴随着距离的变化，ptr也进入不同的status，ptr本身其实只做了移动headrView和childView的工作，实际的动画效果等等都是由UIHanlder拿着ptr的实例去做的。关于能够滑动多少距离的问题，由于这里并没有判断，所以，这个contentView的下滑是没有下限的，不过在xml里面有一个自定义的resistance，相当于阻力系数了，设置大一点的话就不会出事。**目前手指还在屏幕上，status等于STATUS_PREPARED或者STATUS_LOADING。借用手机评测那帮人的话来说，跟手**\n\n\n**ACTION_UP**： mPtrIndicator中的mPressed设置为false，标示下当前手指已经不按在屏幕上了。如果这时候的位置>0，就是contentView还没有复位，需要想办法让它\"弹回来\"，这部分工作交给了onRelease(false)，这个false我猜肯定是后面加上去的(查了下git log果然。。。)。来看OnRelease:\n```java\n  private void onRelease(boolean stayForLoading) {\n\n        tryToPerformRefresh();//会检查下当前status!=STATUS_PREPARED的话直接return false，就是不是在刚开始或刚复位的情况下不做；否则继续执行performRefresh操作，其实这样想也符合常理，手指离开了屏幕，ptr应该能够自我判断是否还需要执行动画\n\n        if (mStatus == PTR_STATUS_LOADING) {\n            // keep header for fresh\n            if (mKeepHeaderWhenRefresh) {\n                // scroll header back\n                if (mPtrIndicator.isOverOffsetToKeepHeaderWhileLoading() && !stayForLoading) {//已经过了需要加载动画的位置，statyForLoading这里传进来的是false\n                    mScrollChecker.tryToScrollTo(mPtrIndicator.getOffsetToKeepHeaderWhileLoading(), mDurationToClose);//滑动到加载动画的位置，这里面是不断地post一个runnable，在run方法里面调用之前和ACTION_MOVE里面一样的那个movePos方法，所以重用性还好。也会通知相应的UIHandler或者UIHandlerHolder\n                } else {\n                    // do nothing\n                }\n            } else {\n                tryScrollBackToTopWhileLoading();//这里会一直滑动到0的位置，其实也是不断调用updatPos方法，会将STATUS重置为STATUS_INIT或者STATUS_PREPARED\n            }\n        } else {\n            if (mStatus == PTR_STATUS_COMPLETE) {//STATUS_COMPLETE通常由外部调用者调用refreshComplete public 方法设置，相当于SwipeRefreshLayout的setRefreshing()，否则将一直停留在加载状态。也就是说需要调用者手动设置关闭，这也符合常理，因为加载本身是需要时间的，把这个设置的时机交给开发者来手动设置几乎是唯一的选择。\n                notifyUIRefreshComplete(false);\n            } else {\n                tryScrollBackToTopAbortRefresh();\n            }\n        }\n    }\n```\n\n到此，ptr内部只剩下一些getter和setter了，不再解释，结合Demo使用就会有所体会。\n\n\n### 3. 总结\nptr的本质就是通过ViewGroup的dispatchTouchEvent将事件拦截在内部进行处理，并将事件过程分发给几个自定义的接口。而内部又添加了一些自定义的变量，并给出getter和setter，使得外部调用者使用起来十分轻松。只要掌握好事件分发处理和View的绘制流程，拆起来还算简单。当然，如果在实际项目中碰到了类似的需求，我倾向于定制一个简单一点的小工具。\n\n\n\n\n\n","slug":"2016-10-24-a-peek-on-pull-to-refresh","published":1,"updated":"2017-01-08T10:06:13.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzmd000f7gvr7sgf1vbi","content":"<p> 最早开始接触安卓的时候就知道有Chris Banes的<a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"external\">Pull-To-Refresh</a>，当时这个库已经被标记被Deprecated了，后来出于寻找替代品的目的找到了秋百万的<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\" target=\"_blank\" rel=\"external\">android-Ultra-pull-toRefresh</a>，直接</p>\n<p> <img src=\"http://odzl05jxx.bkt.clouddn.com/687474703a2f2f692e696d6775722e636f6d2f4766746846417a2e706e67.png\" alt=\"fork\"></p>\n<p> 当时甚至没有能力把一个Demo跑起来。之后的项目中，直接使用swipeRefreshLayout了。现在回头看，终于觉得可以尝试着分析一遍整个下拉刷新的过程。本文只针对<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\" target=\"_blank\" rel=\"external\">android-Ultra-pulltoRefresh</a>部分源码进行分析。拆一个轮子可能只需要花一天时间，但能够从无到有构思出这个框架，将项目搭建起来并且坚持长期维护真的是一件需要很强毅力的事情，向为开源社区贡献优秀代码的秋百万和众多做出贡献的开发者致敬。<br> <a id=\"more\"></a></p>\n<h3 id=\"1-从Demo开始吧\"><a href=\"#1-从Demo开始吧\" class=\"headerlink\" title=\"1. 从Demo开始吧\"></a>1. 从Demo开始吧</h3><p>从github clone下来之后，改一下gradle版本，compile sdk version什么的就可以运行项目自带的Demo了.<br>MainActivity 添加了一个PtrDemoHomeFragment,onCreateView里面返回的View对应的xml文件为<br>fragment_ptr_home.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">in.srain.cube.views.ptr.PtrFrameLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment_ptr_home_ptr_frame\"</span></div><div class=\"line\">        <span class=\"attr\">xmlns:cube_ptr</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_duration_to_close</span>=<span class=\"string\">\"200\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_duration_to_close_header</span>=<span class=\"string\">\"1000\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_keep_header_when_refresh</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_pull_to_fresh</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_ratio_of_header_height_to_refresh</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_resistance</span>=<span class=\"string\">\"1.7\"</span>&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span></span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment_block_menu_scroll_view\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/cube_mints_white\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">in.srain.cube.views.block.BlockListView</span></span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment_block_menu_block_list\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:padding</span>=<span class=\"string\">\"@dimen/cube_mints_content_view_padding\"</span> /&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">in.srain.cube.views.ptr.PtrFrameLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>默认主页已经可以下拉刷新了，那么主要的事件拦截操作应该就在这个ptrFrameLayout里面</p>\n<h3 id=\"2-PtrFrameLayout源码\"><a href=\"#2-PtrFrameLayout源码\" class=\"headerlink\" title=\"2. PtrFrameLayout源码\"></a>2. PtrFrameLayout源码</h3><p>从注释来看 </p>\n<blockquote>\n<p>This layout view for “Pull to Refresh(Ptr)” support all of the view, you can contain everything you want.<br>  support: pull to refresh / release to refresh / auto refresh / keep header view while refreshing / hide header view while refreshing<br>  It defines {@link in.srain.cube.views.ptr.PtrUIHandler}, which allows you customize the UI easily.</p>\n</blockquote>\n<p>能够容纳各种View，同时支持下拉刷新，下拉释放刷新，自动刷新，刷新时保留刷新动画，刷新时隐藏刷新动画</p>\n<p>一步步来看</p>\n<ol>\n<li><strong>构造函数</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PtrFrameLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PtrFrameLayout</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</div><div class=\"line\">        <span class=\"comment\">//删除无关代码</span></div><div class=\"line\">        TypedArray arr = context.obtainStyledAttributes(attrs, R.styleable.PtrFrameLayout, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mHeaderId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_header, mHeaderId); <span class=\"comment\">// HeaderView的layout文件id</span></div><div class=\"line\">            mContainerId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_content, mContainerId); <span class=\"comment\">// contentView的layout文件id</span></div><div class=\"line\">            mDurationToClose = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close, mDurationToClose);<span class=\"comment\">// 维持刷新动画多久开始关闭HeaderView</span></div><div class=\"line\">            mDurationToCloseHeader = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close_header, mDurationToCloseHeader);</div><div class=\"line\">            <span class=\"keyword\">float</span> ratio = mPtrIndicator.getRatioOfHeaderToHeightRefresh();</div><div class=\"line\">            ratio = arr.getFloat(R.styleable.PtrFrameLayout_ptr_ratio_of_header_height_to_refresh, ratio);</div><div class=\"line\">            mKeepHeaderWhenRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_keep_header_when_refresh, mKeepHeaderWhenRefresh);</div><div class=\"line\">            mPullToRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_pull_to_fresh, mPullToRefresh);</div><div class=\"line\">            arr.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//ViewConfiguration很常见了，mTouchSlop用于判断用户操作手势是否有效</span></div><div class=\"line\">        <span class=\"keyword\">final</span> ViewConfiguration conf = ViewConfiguration.get(getContext());</div><div class=\"line\">        mPagingTouchSlop = conf.getScaledTouchSlop() * <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>构造函数里面主要就是获得在xml中设定的一些自定义属性的值并保存为成员变量，实际用途后面再看。</p>\n<ol>\n<li><strong>onFinishInflate</strong><br>这个方法在inflate xml文件结束，所有的childView都已经添加之后调用<br>PtrFrameLayout复写了这个方法，</li>\n</ol>\n<ul>\n<li>首先检查ChildView数量，如果childCount &gt;2 会报错</li>\n<li>然后检查两个child(这里主要看childCount=2的情况下)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//省略若干</span></div><div class=\"line\"><span class=\"keyword\">if</span> (child1 <span class=\"keyword\">instanceof</span> PtrUIHandler) &#123;</div><div class=\"line\">                    mHeaderView = child1;</div><div class=\"line\">                    mContent = child2;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child2 <span class=\"keyword\">instanceof</span> PtrUIHandler) &#123;</div><div class=\"line\">                    mHeaderView = child2;</div><div class=\"line\">                    mContent = child1;</div><div class=\"line\">                &#125; </div><div class=\"line\"><span class=\"comment\">//省略若干</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>来看一下这个ptrUIHandler<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PtrUIHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * When the content view has reached top and refresh has been completed, view will be reset.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> frame</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUIReset</span><span class=\"params\">(PtrFrameLayout frame)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * prepare for loading</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> frame</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUIRefreshPrepare</span><span class=\"params\">(PtrFrameLayout frame)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * perform refreshing UI</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUIRefreshBegin</span><span class=\"params\">(PtrFrameLayout frame)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * perform UI after refresh</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUIRefreshComplete</span><span class=\"params\">(PtrFrameLayout frame)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUIPositionChange</span><span class=\"params\">(PtrFrameLayout frame, <span class=\"keyword\">boolean</span> isUnderTouch, <span class=\"keyword\">byte</span> status, PtrIndicator ptrIndicator)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大概可以猜到这货是用来指定下拉过程中的刷新开始，刷新结束，刷新结束后复位等过程的实现者，具体的下拉过程中的动画，位移等特效都应该由这接口的实例(View)来完成。</p>\n<ol>\n<li><strong>onMeasure</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">       <span class=\"comment\">//省略...</span></div><div class=\"line\">        measureContentView(mContent, widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">measureContentView</span><span class=\"params\">(View child,</span></span></div><div class=\"line\">                                   <span class=\"keyword\">int</span> parentWidthMeasureSpec,</div><div class=\"line\">                                   <span class=\"keyword\">int</span> parentHeightMeasureSpec) &#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">               getPaddingLeft() + getPaddingRight() + lp.leftMargin + lp.rightMargin, lp.width);</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">               getPaddingTop() + getPaddingBottom() + lp.topMargin, lp.height);</div><div class=\"line\"></div><div class=\"line\">       child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>主要就是调用了measureContentView方法，都是很中规中矩的实现</p>\n<ol>\n<li><strong>onLayout</strong><br>代码就不贴了，根据LayoutParams计算出需要的margin,最主要的Top是由<blockquote>\n<p> int offset = mPtrIndicator.getCurrentPosY();</p>\n</blockquote>\n</li>\n</ol>\n<p>获得的，mPterIndicator是一个单独的组件，用于保存一些实时状态。<br>滑动过程中如果有动画效果，会走到这个方法里，所以及时更新最新的位置很重要，ptr将这一功能剥离出来，这大概就是我所理解的解耦吧。</p>\n<ol>\n<li><strong>dispatchTouchEvent</strong><br>主要的手势处理逻辑都在这里，关于TouchEvent的分发处理，这里不再赘述。<br>简单列出执行顺序:<blockquote>\n<p>ViewGroup.dispatchTouchEvent—-ViewGroup.onInterceptTouchEvent—View.dispatchTouchEvent—– etc 、、、、</p>\n</blockquote>\n</li>\n</ol>\n<p>简书上有作者写出了非常好的关于TouchEvent分发的<a href=\"http://www.jianshu.com/p/e99b5e8bd67b\" target=\"_blank\" rel=\"external\">文章</a>，忘记了的话可以去看看。<br>来看这部分的实现，有删节<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">   \t<span class=\"comment\">//.....</span></div><div class=\"line\">       <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</div><div class=\"line\">               <span class=\"keyword\">if</span> (mPtrIndicator.hasLeftStartPosition()) &#123;</div><div class=\"line\">                   onRelease(<span class=\"keyword\">false</span>); <span class=\"comment\">//手指抬起后的操作</span></div><div class=\"line\">                   <span class=\"comment\">// ......</span></div><div class=\"line\">                   <span class=\"keyword\">return</span> dispatchTouchEventSupper(e);</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">return</span> dispatchTouchEventSupper(e);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">           \t<span class=\"comment\">//取消之前还在运行的Scroller等等。。</span></div><div class=\"line\">               <span class=\"comment\">// The cancel event will be sent once the position is moved.</span></div><div class=\"line\">               <span class=\"comment\">// So let the event pass to children.</span></div><div class=\"line\">               <span class=\"comment\">// fix #93, #102</span></div><div class=\"line\">               dispatchTouchEventSupper(e);</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;<span class=\"comment\">//这里返回true，child将会受到ACTION_CANCEL</span></div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">               mLastMoveEvent = e; <span class=\"comment\">//这里实时更新装填</span></div><div class=\"line\">               mPtrIndicator.onMove(e.getX(), e.getY());</div><div class=\"line\">               <span class=\"keyword\">float</span> offsetX = mPtrIndicator.getOffsetX();</div><div class=\"line\">               <span class=\"keyword\">float</span> offsetY = mPtrIndicator.getOffsetY();</div><div class=\"line\">              </div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">boolean</span> moveDown = offsetY &gt; <span class=\"number\">0</span>;</div><div class=\"line\">               <span class=\"keyword\">boolean</span> moveUp = !moveDown;</div><div class=\"line\">               <span class=\"keyword\">boolean</span> canMoveUp = mPtrIndicator.hasLeftStartPosition();</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">// disable move when header not reach top</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (moveDown &amp;&amp; mPtrHandler != <span class=\"keyword\">null</span> &amp;&amp; !mPtrHandler.checkCanDoRefresh(<span class=\"keyword\">this</span>, mContent, mHeaderView)) &#123;</div><div class=\"line\">                   <span class=\"keyword\">return</span> dispatchTouchEventSupper(e);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> ((moveUp &amp;&amp; canMoveUp) || moveDown) &#123;</div><div class=\"line\">                   movePos(offsetY); <span class=\"comment\">//实现滑动操作的代码</span></div><div class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;<span class=\"comment\">// 后续事件将只会走到此方法，不会再往下传递，直到ACTION_UP，本次手势结束</span></div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> dispatchTouchEventSupper(e);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>用户手指按下。。。。。手指滑动。。。。。手指抬起</p>\n<p><strong>ACTION_DOWN</strong> : 手指按下后将TouchEvent交给mPtrIndicator处理，后者保留了当前ptr的位置，高度等信息。在执行ACTION_DOWN时，并没有简单地使用Event.getY，而是保留了当前position的一个备份(这是必要的，因为对于下拉刷新来说，最终需要回到的位置是0，而用户按下的位置可能在contentView比较靠下面的位置。ACTION_DOWN的getY并没有太大意义)。随后调用Scroller的 mScroller.forceFinished(true)方法停止滑动，如果定义了页面自动刷新(就是进来会下拉刷新一次)，还会调用onRelease(true)方法，onRelease方法与ACTION_UP相关。</p>\n<p><strong>ACTION_MOVE</strong> : 手指开始在屏幕上滑动，首先将滑动距离的改变保留到mPtrIndicator中，这里作者将很多坐标计算的方法都拆出来放到这个mPtrIndicator中，暴露出get方法，也使得代码更清晰。在开始滑动之前，先检查下是否是横向滑动，以及是否在(mDisableWhenHorizontalMove，ViewPager需要消费横向手势，这个标志符是为了return super)。<br>往下走，来看这一段<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boolean</span> moveDown = offsetY &gt; <span class=\"number\">0</span>; 新的Event中的y值和mptrIndicator中保留的当前y的差值，所以手指往下拉的话，offset &gt;<span class=\"number\">0</span>,也就是这里的moveDown</div><div class=\"line\"><span class=\"keyword\">boolean</span> moveUp = !moveDown;</div><div class=\"line\"><span class=\"keyword\">boolean</span> canMoveUp = mPtrIndicator.hasLeftStartPosition()<span class=\"comment\">// 检查下当前Event中的y是否大于0，即内容区域是否已经往下走了一点了</span></div></pre></td></tr></table></figure></p>\n<p>接下来，再次询问mPtrHandler能否DoRefresh,将自身和ChildView都交出去，所以可操作性很大<br>大部分的情况下，直接使用一个</p>\n<blockquote>\n<p> return PtrDefaultHandler.checkContentCanBePulledDown(frame, content, header);</p>\n</blockquote>\n<p>使用了一个类似于ViewCompat.canScollVertically的方法，但判断下如果是AbstractListView的话，会调用getFirstVisiblePosition等方法，因为AdapterView能否滑动应该是由其内容能否滑动来决定的。<br>如果这个方法返回true。接着往下走，开始执行View的滑动方法:<br>判断下是否手指在往上拉(moveUp &amp;&amp; canMoveUp)或者往下拉(moveDown),return true，首先事件就不会再往下走，另外后续的ACTION_MOVE_ACTION_UP都只会传递到这个dispatchTouchEvent中<br>实现滑动操作的代码最后会执行这里<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updatePos</span><span class=\"params\">(<span class=\"keyword\">int</span> change)</span> </span>&#123;</div><div class=\"line\">     </div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">boolean</span> isUnderTouch = mPtrIndicator.isUnderTouch();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// once moved, cancel event will be sent to child</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (isUnderTouch &amp;&amp; !mHasSendCancelEvent &amp;&amp; mPtrIndicator.hasMovedAfterPressedDown()) &#123;</div><div class=\"line\">          mHasSendCancelEvent = <span class=\"keyword\">true</span>;</div><div class=\"line\">          sendCancelEvent();</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// leave initiated position or just refresh complete</span></div><div class=\"line\">      <span class=\"keyword\">if</span> ((mPtrIndicator.hasJustLeftStartPosition() &amp;&amp; mStatus == PTR_STATUS_INIT) ||</div><div class=\"line\">              (mPtrIndicator.goDownCrossFinishPosition() &amp;&amp; mStatus == PTR_STATUS_COMPLETE &amp;&amp; isEnabledNextPtrAtOnce())) &#123;</div><div class=\"line\"></div><div class=\"line\">          mStatus = PTR_STATUS_PREPARE;</div><div class=\"line\">          mPtrUIHandlerHolder.onUIRefreshPrepare(<span class=\"keyword\">this</span>);<span class=\"comment\">//刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。这个Holder的结构类似于一个链表，一个Holder里面有UIHandler，以及下一个Holder(next)。作用类似于一个集合，等于作者自己实现了这样一个不断循环的消息列表(看起来挺像Message的)。这个Holder的作用在于可以动态添加UIHanlder，相对应的方法都做好了(addHandler)。</span></div><div class=\"line\">          <span class=\"comment\">//再次强调，这里表示**刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。此时的状态为STATUS_PREPARED**</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// back to initiated position</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mPtrIndicator.hasJustBackToStartPosition()) &#123;</div><div class=\"line\">          tryToNotifyReset();</div><div class=\"line\">          <span class=\"comment\">//**刚刚从下面回到0的位置，通知UIHandler的onUIReset()方法,此时的状态为STATUS_INIT**</span></div><div class=\"line\">          <span class=\"comment\">//将整个过程划分的真详细</span></div><div class=\"line\">          <span class=\"comment\">// recover event to children，虽然手指还在屏幕上，处于ACTION_MOVE，但这里由于已经复位，需要把ACTION_DOWN传递下去，这一段比较复杂。</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (isUnderTouch) &#123;</div><div class=\"line\">              sendDownEvent();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Pull to Refresh</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mStatus == PTR_STATUS_PREPARE) &#123;<span class=\"comment\">//从上到下依次为0 ， 出现动画临界值， HeadView高度</span></div><div class=\"line\">          <span class=\"comment\">// reach fresh height while moving from top to bottom</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (isUnderTouch &amp;&amp; !isAutoRefresh() &amp;&amp; mPullToRefresh  <span class=\"comment\">// 手指还在屏幕上，不是自动刷新且允许ptr且到达了下滑出现动画效果的临界值，条件还是比较苛刻的</span></div><div class=\"line\">                  &amp;&amp; mPtrIndicator.crossRefreshLineFromTopToBottom()) &#123;</div><div class=\"line\">              tryToPerformRefresh();</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">// reach header height while auto refresh</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (performAutoRefreshButLater() &amp;&amp; mPtrIndicator.hasJustReachedHeaderHeightFromTopToBottom()) &#123;<span class=\"comment\">//刚刚超过headerView高度一丁点</span></div><div class=\"line\">              tryToPerformRefresh();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//tryToPerformRefresh()方法判断mPtrIndicator.isOverOffsetToRefresh()，满足条件的话进入STATUS_LOADING，这个时候就要开始让动画run了。所以这里调用的是 mPtrUIHandlerHolder.onUIRefreshBegin(this);和mPtrHandler.onRefreshBegin(this);前者是后来手动添加的UIHandler，后者则是在onInFlateFinish中自行判断的，这两个都会被执行。这里扯一句，这个Holder就像一个中间层，持有了UIHandler,所有方法都调用的是后者HanldleUI的方法。facade模式？</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 终于看到实际调用View滑动的代码了，让一个View滑动的方式有很多种，这里采用的是改变X,Y的方式(X = left+translationX;Y = top+translationY) </span></div><div class=\"line\">      mHeaderView.offsetTopAndBottom(change);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!isPinContent()) &#123;</div><div class=\"line\">          mContent.offsetTopAndBottom(change);</div><div class=\"line\">      &#125;</div><div class=\"line\">      invalidate();??我觉得这里好像没有必要这么频繁的调这一句话</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//移动完成之后通知UIHandlerHolder位置改变了，没有通知mUIHandler是因为后者就是mContent和mHeaderView。</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mPtrUIHandlerHolder.hasHandler()) &#123;</div><div class=\"line\">          mPtrUIHandlerHolder.onUIPositionChange(<span class=\"keyword\">this</span>, isUnderTouch, mStatus, mPtrIndicator);</div><div class=\"line\">      &#125;</div><div class=\"line\">      onPositionChange(isUnderTouch, mStatus, mPtrIndicator);<span class=\"comment\">//最后还预留了一个onPositionChange的空方法，子类可能会有点用吧</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>到这里，ACTION_MOVE已经研究完毕，大部分的分析都在注释里面，只要分清楚滑动过程中的各种STATUS，我觉得还是比较好理解的。MOVE过程中伴随着距离的变化，ptr也进入不同的status，ptr本身其实只做了移动headrView和childView的工作，实际的动画效果等等都是由UIHanlder拿着ptr的实例去做的。关于能够滑动多少距离的问题，由于这里并没有判断，所以，这个contentView的下滑是没有下限的，不过在xml里面有一个自定义的resistance，相当于阻力系数了，设置大一点的话就不会出事。<strong>目前手指还在屏幕上，status等于STATUS_PREPARED或者STATUS_LOADING。借用手机评测那帮人的话来说，跟手</strong></p>\n<p><strong>ACTION_UP</strong>： mPtrIndicator中的mPressed设置为false，标示下当前手指已经不按在屏幕上了。如果这时候的位置&gt;0，就是contentView还没有复位，需要想办法让它”弹回来”，这部分工作交给了onRelease(false)，这个false我猜肯定是后面加上去的(查了下git log果然。。。)。来看OnRelease:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onRelease</span><span class=\"params\">(<span class=\"keyword\">boolean</span> stayForLoading)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">      tryToPerformRefresh();<span class=\"comment\">//会检查下当前status!=STATUS_PREPARED的话直接return false，就是不是在刚开始或刚复位的情况下不做；否则继续执行performRefresh操作，其实这样想也符合常理，手指离开了屏幕，ptr应该能够自我判断是否还需要执行动画</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (mStatus == PTR_STATUS_LOADING) &#123;</div><div class=\"line\">          <span class=\"comment\">// keep header for fresh</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (mKeepHeaderWhenRefresh) &#123;</div><div class=\"line\">              <span class=\"comment\">// scroll header back</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (mPtrIndicator.isOverOffsetToKeepHeaderWhileLoading() &amp;&amp; !stayForLoading) &#123;<span class=\"comment\">//已经过了需要加载动画的位置，statyForLoading这里传进来的是false</span></div><div class=\"line\">                  mScrollChecker.tryToScrollTo(mPtrIndicator.getOffsetToKeepHeaderWhileLoading(), mDurationToClose);<span class=\"comment\">//滑动到加载动画的位置，这里面是不断地post一个runnable，在run方法里面调用之前和ACTION_MOVE里面一样的那个movePos方法，所以重用性还好。也会通知相应的UIHandler或者UIHandlerHolder</span></div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  <span class=\"comment\">// do nothing</span></div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              tryScrollBackToTopWhileLoading();<span class=\"comment\">//这里会一直滑动到0的位置，其实也是不断调用updatPos方法，会将STATUS重置为STATUS_INIT或者STATUS_PREPARED</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (mStatus == PTR_STATUS_COMPLETE) &#123;<span class=\"comment\">//STATUS_COMPLETE通常由外部调用者调用refreshComplete public 方法设置，相当于SwipeRefreshLayout的setRefreshing()，否则将一直停留在加载状态。也就是说需要调用者手动设置关闭，这也符合常理，因为加载本身是需要时间的，把这个设置的时机交给开发者来手动设置几乎是唯一的选择。</span></div><div class=\"line\">              notifyUIRefreshComplete(<span class=\"keyword\">false</span>);</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              tryScrollBackToTopAbortRefresh();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>到此，ptr内部只剩下一些getter和setter了，不再解释，结合Demo使用就会有所体会。</p>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><p>ptr的本质就是通过ViewGroup的dispatchTouchEvent将事件拦截在内部进行处理，并将事件过程分发给几个自定义的接口。而内部又添加了一些自定义的变量，并给出getter和setter，使得外部调用者使用起来十分轻松。只要掌握好事件分发处理和View的绘制流程，拆起来还算简单。当然，如果在实际项目中碰到了类似的需求，我倾向于定制一个简单一点的小工具。</p>\n","excerpt":"<p> 最早开始接触安卓的时候就知道有Chris Banes的<a href=\"https://github.com/chrisbanes/Android-PullToRefresh\">Pull-To-Refresh</a>，当时这个库已经被标记被Deprecated了，后来出于寻找替代品的目的找到了秋百万的<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\">android-Ultra-pull-toRefresh</a>，直接</p>\n<p> <img src=\"http://odzl05jxx.bkt.clouddn.com/687474703a2f2f692e696d6775722e636f6d2f4766746846417a2e706e67.png\" alt=\"fork\"></p>\n<p> 当时甚至没有能力把一个Demo跑起来。之后的项目中，直接使用swipeRefreshLayout了。现在回头看，终于觉得可以尝试着分析一遍整个下拉刷新的过程。本文只针对<a href=\"https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh\">android-Ultra-pulltoRefresh</a>部分源码进行分析。拆一个轮子可能只需要花一天时间，但能够从无到有构思出这个框架，将项目搭建起来并且坚持长期维护真的是一件需要很强毅力的事情，向为开源社区贡献优秀代码的秋百万和众多做出贡献的开发者致敬。<br>","more":"</p>\n<h3 id=\"1-从Demo开始吧\"><a href=\"#1-从Demo开始吧\" class=\"headerlink\" title=\"1. 从Demo开始吧\"></a>1. 从Demo开始吧</h3><p>从github clone下来之后，改一下gradle版本，compile sdk version什么的就可以运行项目自带的Demo了.<br>MainActivity 添加了一个PtrDemoHomeFragment,onCreateView里面返回的View对应的xml文件为<br>fragment_ptr_home.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">in.srain.cube.views.ptr.PtrFrameLayout</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment_ptr_home_ptr_frame\"</span></div><div class=\"line\">        <span class=\"attr\">xmlns:cube_ptr</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_duration_to_close</span>=<span class=\"string\">\"200\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_duration_to_close_header</span>=<span class=\"string\">\"1000\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_keep_header_when_refresh</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_pull_to_fresh</span>=<span class=\"string\">\"false\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_ratio_of_header_height_to_refresh</span>=<span class=\"string\">\"1.2\"</span></div><div class=\"line\">        <span class=\"attr\">cube_ptr:ptr_resistance</span>=<span class=\"string\">\"1.7\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ScrollView</span></div><div class=\"line\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment_block_menu_scroll_view\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/cube_mints_white\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">in.srain.cube.views.block.BlockListView</span></div><div class=\"line\">                <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/fragment_block_menu_block_list\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">                <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">                <span class=\"attr\">android:padding</span>=<span class=\"string\">\"@dimen/cube_mints_content_view_padding\"</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ScrollView</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">in.srain.cube.views.ptr.PtrFrameLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>默认主页已经可以下拉刷新了，那么主要的事件拦截操作应该就在这个ptrFrameLayout里面</p>\n<h3 id=\"2-PtrFrameLayout源码\"><a href=\"#2-PtrFrameLayout源码\" class=\"headerlink\" title=\"2. PtrFrameLayout源码\"></a>2. PtrFrameLayout源码</h3><p>从注释来看 </p>\n<blockquote>\n<p>This layout view for “Pull to Refresh(Ptr)” support all of the view, you can contain everything you want.<br>  support: pull to refresh / release to refresh / auto refresh / keep header view while refreshing / hide header view while refreshing<br>  It defines {@link in.srain.cube.views.ptr.PtrUIHandler}, which allows you customize the UI easily.</p>\n</blockquote>\n<p>能够容纳各种View，同时支持下拉刷新，下拉释放刷新，自动刷新，刷新时保留刷新动画，刷新时隐藏刷新动画</p>\n<p>一步步来看</p>\n<ol>\n<li><strong>构造函数</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PtrFrameLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PtrFrameLayout</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</div><div class=\"line\">        <span class=\"comment\">//删除无关代码</span></div><div class=\"line\">        TypedArray arr = context.obtainStyledAttributes(attrs, R.styleable.PtrFrameLayout, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mHeaderId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_header, mHeaderId); <span class=\"comment\">// HeaderView的layout文件id</span></div><div class=\"line\">            mContainerId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_content, mContainerId); <span class=\"comment\">// contentView的layout文件id</span></div><div class=\"line\">            mDurationToClose = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close, mDurationToClose);<span class=\"comment\">// 维持刷新动画多久开始关闭HeaderView</span></div><div class=\"line\">            mDurationToCloseHeader = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close_header, mDurationToCloseHeader);</div><div class=\"line\">            <span class=\"keyword\">float</span> ratio = mPtrIndicator.getRatioOfHeaderToHeightRefresh();</div><div class=\"line\">            ratio = arr.getFloat(R.styleable.PtrFrameLayout_ptr_ratio_of_header_height_to_refresh, ratio);</div><div class=\"line\">            mKeepHeaderWhenRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_keep_header_when_refresh, mKeepHeaderWhenRefresh);</div><div class=\"line\">            mPullToRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_pull_to_fresh, mPullToRefresh);</div><div class=\"line\">            arr.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//ViewConfiguration很常见了，mTouchSlop用于判断用户操作手势是否有效</span></div><div class=\"line\">        <span class=\"keyword\">final</span> ViewConfiguration conf = ViewConfiguration.get(getContext());</div><div class=\"line\">        mPagingTouchSlop = conf.getScaledTouchSlop() * <span class=\"number\">2</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>构造函数里面主要就是获得在xml中设定的一些自定义属性的值并保存为成员变量，实际用途后面再看。</p>\n<ol>\n<li><strong>onFinishInflate</strong><br>这个方法在inflate xml文件结束，所有的childView都已经添加之后调用<br>PtrFrameLayout复写了这个方法，</li>\n</ol>\n<ul>\n<li>首先检查ChildView数量，如果childCount &gt;2 会报错</li>\n<li>然后检查两个child(这里主要看childCount=2的情况下)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//省略若干</span></div><div class=\"line\"><span class=\"keyword\">if</span> (child1 <span class=\"keyword\">instanceof</span> PtrUIHandler) &#123;</div><div class=\"line\">                    mHeaderView = child1;</div><div class=\"line\">                    mContent = child2;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (child2 <span class=\"keyword\">instanceof</span> PtrUIHandler) &#123;</div><div class=\"line\">                    mHeaderView = child2;</div><div class=\"line\">                    mContent = child1;</div><div class=\"line\">                &#125; </div><div class=\"line\"><span class=\"comment\">//省略若干</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>来看一下这个ptrUIHandler<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PtrUIHandler</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * When the content view has reached top and refresh has been completed, view will be reset.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> frame</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUIReset</span><span class=\"params\">(PtrFrameLayout frame)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * prepare for loading</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> frame</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUIRefreshPrepare</span><span class=\"params\">(PtrFrameLayout frame)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * perform refreshing UI</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUIRefreshBegin</span><span class=\"params\">(PtrFrameLayout frame)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * perform UI after refresh</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUIRefreshComplete</span><span class=\"params\">(PtrFrameLayout frame)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUIPositionChange</span><span class=\"params\">(PtrFrameLayout frame, <span class=\"keyword\">boolean</span> isUnderTouch, <span class=\"keyword\">byte</span> status, PtrIndicator ptrIndicator)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>大概可以猜到这货是用来指定下拉过程中的刷新开始，刷新结束，刷新结束后复位等过程的实现者，具体的下拉过程中的动画，位移等特效都应该由这接口的实例(View)来完成。</p>\n<ol>\n<li><strong>onMeasure</strong><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">       <span class=\"comment\">//省略...</span></div><div class=\"line\">        measureContentView(mContent, widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">measureContentView</span><span class=\"params\">(View child,</div><div class=\"line\">                                   <span class=\"keyword\">int</span> parentWidthMeasureSpec,</div><div class=\"line\">                                   <span class=\"keyword\">int</span> parentHeightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class=\"line\">               getPaddingLeft() + getPaddingRight() + lp.leftMargin + lp.rightMargin, lp.width);</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class=\"line\">               getPaddingTop() + getPaddingBottom() + lp.topMargin, lp.height);</div><div class=\"line\"></div><div class=\"line\">       child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>主要就是调用了measureContentView方法，都是很中规中矩的实现</p>\n<ol>\n<li><strong>onLayout</strong><br>代码就不贴了，根据LayoutParams计算出需要的margin,最主要的Top是由<blockquote>\n<p> int offset = mPtrIndicator.getCurrentPosY();</p>\n</blockquote>\n</li>\n</ol>\n<p>获得的，mPterIndicator是一个单独的组件，用于保存一些实时状态。<br>滑动过程中如果有动画效果，会走到这个方法里，所以及时更新最新的位置很重要，ptr将这一功能剥离出来，这大概就是我所理解的解耦吧。</p>\n<ol>\n<li><strong>dispatchTouchEvent</strong><br>主要的手势处理逻辑都在这里，关于TouchEvent的分发处理，这里不再赘述。<br>简单列出执行顺序:<blockquote>\n<p>ViewGroup.dispatchTouchEvent—-ViewGroup.onInterceptTouchEvent—View.dispatchTouchEvent—– etc 、、、、</p>\n</blockquote>\n</li>\n</ol>\n<p>简书上有作者写出了非常好的关于TouchEvent分发的<a href=\"http://www.jianshu.com/p/e99b5e8bd67b\">文章</a>，忘记了的话可以去看看。<br>来看这部分的实现，有删节<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">   \t<span class=\"comment\">//.....</span></div><div class=\"line\">       <span class=\"keyword\">switch</span> (action) &#123;</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</div><div class=\"line\">               <span class=\"keyword\">if</span> (mPtrIndicator.hasLeftStartPosition()) &#123;</div><div class=\"line\">                   onRelease(<span class=\"keyword\">false</span>); <span class=\"comment\">//手指抬起后的操作</span></div><div class=\"line\">                   <span class=\"comment\">// ......</span></div><div class=\"line\">                   <span class=\"keyword\">return</span> dispatchTouchEventSupper(e);</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">return</span> dispatchTouchEventSupper(e);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">           \t<span class=\"comment\">//取消之前还在运行的Scroller等等。。</span></div><div class=\"line\">               <span class=\"comment\">// The cancel event will be sent once the position is moved.</span></div><div class=\"line\">               <span class=\"comment\">// So let the event pass to children.</span></div><div class=\"line\">               <span class=\"comment\">// fix #93, #102</span></div><div class=\"line\">               dispatchTouchEventSupper(e);</div><div class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;<span class=\"comment\">//这里返回true，child将会受到ACTION_CANCEL</span></div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</div><div class=\"line\">               mLastMoveEvent = e; <span class=\"comment\">//这里实时更新装填</span></div><div class=\"line\">               mPtrIndicator.onMove(e.getX(), e.getY());</div><div class=\"line\">               <span class=\"keyword\">float</span> offsetX = mPtrIndicator.getOffsetX();</div><div class=\"line\">               <span class=\"keyword\">float</span> offsetY = mPtrIndicator.getOffsetY();</div><div class=\"line\">              </div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">boolean</span> moveDown = offsetY &gt; <span class=\"number\">0</span>;</div><div class=\"line\">               <span class=\"keyword\">boolean</span> moveUp = !moveDown;</div><div class=\"line\">               <span class=\"keyword\">boolean</span> canMoveUp = mPtrIndicator.hasLeftStartPosition();</div><div class=\"line\"></div><div class=\"line\">               <span class=\"comment\">// disable move when header not reach top</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (moveDown &amp;&amp; mPtrHandler != <span class=\"keyword\">null</span> &amp;&amp; !mPtrHandler.checkCanDoRefresh(<span class=\"keyword\">this</span>, mContent, mHeaderView)) &#123;</div><div class=\"line\">                   <span class=\"keyword\">return</span> dispatchTouchEventSupper(e);</div><div class=\"line\">               &#125;</div><div class=\"line\"></div><div class=\"line\">               <span class=\"keyword\">if</span> ((moveUp &amp;&amp; canMoveUp) || moveDown) &#123;</div><div class=\"line\">                   movePos(offsetY); <span class=\"comment\">//实现滑动操作的代码</span></div><div class=\"line\">                   <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;<span class=\"comment\">// 后续事件将只会走到此方法，不会再往下传递，直到ACTION_UP，本次手势结束</span></div><div class=\"line\">               &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> dispatchTouchEventSupper(e);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>用户手指按下。。。。。手指滑动。。。。。手指抬起</p>\n<p><strong>ACTION_DOWN</strong> : 手指按下后将TouchEvent交给mPtrIndicator处理，后者保留了当前ptr的位置，高度等信息。在执行ACTION_DOWN时，并没有简单地使用Event.getY，而是保留了当前position的一个备份(这是必要的，因为对于下拉刷新来说，最终需要回到的位置是0，而用户按下的位置可能在contentView比较靠下面的位置。ACTION_DOWN的getY并没有太大意义)。随后调用Scroller的 mScroller.forceFinished(true)方法停止滑动，如果定义了页面自动刷新(就是进来会下拉刷新一次)，还会调用onRelease(true)方法，onRelease方法与ACTION_UP相关。</p>\n<p><strong>ACTION_MOVE</strong> : 手指开始在屏幕上滑动，首先将滑动距离的改变保留到mPtrIndicator中，这里作者将很多坐标计算的方法都拆出来放到这个mPtrIndicator中，暴露出get方法，也使得代码更清晰。在开始滑动之前，先检查下是否是横向滑动，以及是否在(mDisableWhenHorizontalMove，ViewPager需要消费横向手势，这个标志符是为了return super)。<br>往下走，来看这一段<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">boolean</span> moveDown = offsetY &gt; <span class=\"number\">0</span>; 新的Event中的y值和mptrIndicator中保留的当前y的差值，所以手指往下拉的话，offset &gt;<span class=\"number\">0</span>,也就是这里的moveDown</div><div class=\"line\"><span class=\"keyword\">boolean</span> moveUp = !moveDown;</div><div class=\"line\"><span class=\"keyword\">boolean</span> canMoveUp = mPtrIndicator.hasLeftStartPosition()<span class=\"comment\">// 检查下当前Event中的y是否大于0，即内容区域是否已经往下走了一点了</span></div></pre></td></tr></table></figure></p>\n<p>接下来，再次询问mPtrHandler能否DoRefresh,将自身和ChildView都交出去，所以可操作性很大<br>大部分的情况下，直接使用一个</p>\n<blockquote>\n<p> return PtrDefaultHandler.checkContentCanBePulledDown(frame, content, header);</p>\n</blockquote>\n<p>使用了一个类似于ViewCompat.canScollVertically的方法，但判断下如果是AbstractListView的话，会调用getFirstVisiblePosition等方法，因为AdapterView能否滑动应该是由其内容能否滑动来决定的。<br>如果这个方法返回true。接着往下走，开始执行View的滑动方法:<br>判断下是否手指在往上拉(moveUp &amp;&amp; canMoveUp)或者往下拉(moveDown),return true，首先事件就不会再往下走，另外后续的ACTION_MOVE_ACTION_UP都只会传递到这个dispatchTouchEvent中<br>实现滑动操作的代码最后会执行这里<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updatePos</span><span class=\"params\">(<span class=\"keyword\">int</span> change)</span> </span>&#123;</div><div class=\"line\">     </div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">boolean</span> isUnderTouch = mPtrIndicator.isUnderTouch();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// once moved, cancel event will be sent to child</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (isUnderTouch &amp;&amp; !mHasSendCancelEvent &amp;&amp; mPtrIndicator.hasMovedAfterPressedDown()) &#123;</div><div class=\"line\">          mHasSendCancelEvent = <span class=\"keyword\">true</span>;</div><div class=\"line\">          sendCancelEvent();</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// leave initiated position or just refresh complete</span></div><div class=\"line\">      <span class=\"keyword\">if</span> ((mPtrIndicator.hasJustLeftStartPosition() &amp;&amp; mStatus == PTR_STATUS_INIT) ||</div><div class=\"line\">              (mPtrIndicator.goDownCrossFinishPosition() &amp;&amp; mStatus == PTR_STATUS_COMPLETE &amp;&amp; isEnabledNextPtrAtOnce())) &#123;</div><div class=\"line\"></div><div class=\"line\">          mStatus = PTR_STATUS_PREPARE;</div><div class=\"line\">          mPtrUIHandlerHolder.onUIRefreshPrepare(<span class=\"keyword\">this</span>);<span class=\"comment\">//刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。这个Holder的结构类似于一个链表，一个Holder里面有UIHandler，以及下一个Holder(next)。作用类似于一个集合，等于作者自己实现了这样一个不断循环的消息列表(看起来挺像Message的)。这个Holder的作用在于可以动态添加UIHanlder，相对应的方法都做好了(addHandler)。</span></div><div class=\"line\">          <span class=\"comment\">//再次强调，这里表示**刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。此时的状态为STATUS_PREPARED**</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// back to initiated position</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mPtrIndicator.hasJustBackToStartPosition()) &#123;</div><div class=\"line\">          tryToNotifyReset();</div><div class=\"line\">          <span class=\"comment\">//**刚刚从下面回到0的位置，通知UIHandler的onUIReset()方法,此时的状态为STATUS_INIT**</span></div><div class=\"line\">          <span class=\"comment\">//将整个过程划分的真详细</span></div><div class=\"line\">          <span class=\"comment\">// recover event to children，虽然手指还在屏幕上，处于ACTION_MOVE，但这里由于已经复位，需要把ACTION_DOWN传递下去，这一段比较复杂。</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (isUnderTouch) &#123;</div><div class=\"line\">              sendDownEvent();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// Pull to Refresh</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mStatus == PTR_STATUS_PREPARE) &#123;<span class=\"comment\">//从上到下依次为0 ， 出现动画临界值， HeadView高度</span></div><div class=\"line\">          <span class=\"comment\">// reach fresh height while moving from top to bottom</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (isUnderTouch &amp;&amp; !isAutoRefresh() &amp;&amp; mPullToRefresh  <span class=\"comment\">// 手指还在屏幕上，不是自动刷新且允许ptr且到达了下滑出现动画效果的临界值，条件还是比较苛刻的</span></div><div class=\"line\">                  &amp;&amp; mPtrIndicator.crossRefreshLineFromTopToBottom()) &#123;</div><div class=\"line\">              tryToPerformRefresh();</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"comment\">// reach header height while auto refresh</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (performAutoRefreshButLater() &amp;&amp; mPtrIndicator.hasJustReachedHeaderHeightFromTopToBottom()) &#123;<span class=\"comment\">//刚刚超过headerView高度一丁点</span></div><div class=\"line\">              tryToPerformRefresh();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//tryToPerformRefresh()方法判断mPtrIndicator.isOverOffsetToRefresh()，满足条件的话进入STATUS_LOADING，这个时候就要开始让动画run了。所以这里调用的是 mPtrUIHandlerHolder.onUIRefreshBegin(this);和mPtrHandler.onRefreshBegin(this);前者是后来手动添加的UIHandler，后者则是在onInFlateFinish中自行判断的，这两个都会被执行。这里扯一句，这个Holder就像一个中间层，持有了UIHandler,所有方法都调用的是后者HanldleUI的方法。facade模式？</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// 终于看到实际调用View滑动的代码了，让一个View滑动的方式有很多种，这里采用的是改变X,Y的方式(X = left+translationX;Y = top+translationY) </span></div><div class=\"line\">      mHeaderView.offsetTopAndBottom(change);</div><div class=\"line\">      <span class=\"keyword\">if</span> (!isPinContent()) &#123;</div><div class=\"line\">          mContent.offsetTopAndBottom(change);</div><div class=\"line\">      &#125;</div><div class=\"line\">      invalidate();??我觉得这里好像没有必要这么频繁的调这一句话</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">//移动完成之后通知UIHandlerHolder位置改变了，没有通知mUIHandler是因为后者就是mContent和mHeaderView。</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (mPtrUIHandlerHolder.hasHandler()) &#123;</div><div class=\"line\">          mPtrUIHandlerHolder.onUIPositionChange(<span class=\"keyword\">this</span>, isUnderTouch, mStatus, mPtrIndicator);</div><div class=\"line\">      &#125;</div><div class=\"line\">      onPositionChange(isUnderTouch, mStatus, mPtrIndicator);<span class=\"comment\">//最后还预留了一个onPositionChange的空方法，子类可能会有点用吧</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>到这里，ACTION_MOVE已经研究完毕，大部分的分析都在注释里面，只要分清楚滑动过程中的各种STATUS，我觉得还是比较好理解的。MOVE过程中伴随着距离的变化，ptr也进入不同的status，ptr本身其实只做了移动headrView和childView的工作，实际的动画效果等等都是由UIHanlder拿着ptr的实例去做的。关于能够滑动多少距离的问题，由于这里并没有判断，所以，这个contentView的下滑是没有下限的，不过在xml里面有一个自定义的resistance，相当于阻力系数了，设置大一点的话就不会出事。<strong>目前手指还在屏幕上，status等于STATUS_PREPARED或者STATUS_LOADING。借用手机评测那帮人的话来说，跟手</strong></p>\n<p><strong>ACTION_UP</strong>： mPtrIndicator中的mPressed设置为false，标示下当前手指已经不按在屏幕上了。如果这时候的位置&gt;0，就是contentView还没有复位，需要想办法让它”弹回来”，这部分工作交给了onRelease(false)，这个false我猜肯定是后面加上去的(查了下git log果然。。。)。来看OnRelease:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onRelease</span><span class=\"params\">(<span class=\"keyword\">boolean</span> stayForLoading)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">      tryToPerformRefresh();<span class=\"comment\">//会检查下当前status!=STATUS_PREPARED的话直接return false，就是不是在刚开始或刚复位的情况下不做；否则继续执行performRefresh操作，其实这样想也符合常理，手指离开了屏幕，ptr应该能够自我判断是否还需要执行动画</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">if</span> (mStatus == PTR_STATUS_LOADING) &#123;</div><div class=\"line\">          <span class=\"comment\">// keep header for fresh</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (mKeepHeaderWhenRefresh) &#123;</div><div class=\"line\">              <span class=\"comment\">// scroll header back</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (mPtrIndicator.isOverOffsetToKeepHeaderWhileLoading() &amp;&amp; !stayForLoading) &#123;<span class=\"comment\">//已经过了需要加载动画的位置，statyForLoading这里传进来的是false</span></div><div class=\"line\">                  mScrollChecker.tryToScrollTo(mPtrIndicator.getOffsetToKeepHeaderWhileLoading(), mDurationToClose);<span class=\"comment\">//滑动到加载动画的位置，这里面是不断地post一个runnable，在run方法里面调用之前和ACTION_MOVE里面一样的那个movePos方法，所以重用性还好。也会通知相应的UIHandler或者UIHandlerHolder</span></div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  <span class=\"comment\">// do nothing</span></div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              tryScrollBackToTopWhileLoading();<span class=\"comment\">//这里会一直滑动到0的位置，其实也是不断调用updatPos方法，会将STATUS重置为STATUS_INIT或者STATUS_PREPARED</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (mStatus == PTR_STATUS_COMPLETE) &#123;<span class=\"comment\">//STATUS_COMPLETE通常由外部调用者调用refreshComplete public 方法设置，相当于SwipeRefreshLayout的setRefreshing()，否则将一直停留在加载状态。也就是说需要调用者手动设置关闭，这也符合常理，因为加载本身是需要时间的，把这个设置的时机交给开发者来手动设置几乎是唯一的选择。</span></div><div class=\"line\">              notifyUIRefreshComplete(<span class=\"keyword\">false</span>);</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">              tryScrollBackToTopAbortRefresh();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>到此，ptr内部只剩下一些getter和setter了，不再解释，结合Demo使用就会有所体会。</p>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><p>ptr的本质就是通过ViewGroup的dispatchTouchEvent将事件拦截在内部进行处理，并将事件过程分发给几个自定义的接口。而内部又添加了一些自定义的变量，并给出getter和setter，使得外部调用者使用起来十分轻松。只要掌握好事件分发处理和View的绘制流程，拆起来还算简单。当然，如果在实际项目中碰到了类似的需求，我倾向于定制一个简单一点的小工具。</p>"},{"title":"Windows10平台安装lxml记录","date":"2016-10-31T07:49:38.000Z","_content":"\n\n前几天尝试使用一个简单的微博爬虫进行操作，导包的时候遇到lxml缺失的问题，找了好久最终在百度知道上找到个能用的，(⊙﹏⊙)b。\n\n###  1. 环境\n1. python2.7, win10 64位\n2. pip 环境变量配置 <!--more-->\n\n### 2. 开始\n1. cmd 命令行敲入\n> pip install wheel\n\n2. 准备lxml安装文件\n   下载[地址](https://pypi.python.org/pypi/lxml/3.4.2)\n   我的是win10 64位，选择 lxml-3.4.2-cp27-none-win_amd54.xhl\n\n3. 下载完成后放到 c:\\python27\\文件夹下\n4. 命令行敲入\n> pip install c:\\python27\\lxml...(刚才的文件名)\n\n5. 最后会提示\n> successfully installeed lxml-3.4.2\n\n这时候关闭pycharm project，重新打开就可以看到导入成功了。\n\n### ref\n- [百度有时候也是挺管用的](http://jingyan.baidu.com/article/cbcede07177b8702f40b4df9.html)\n","source":"_posts/2016-10-31-install-lxml-on-windows.md","raw":"---\ntitle: Windows10平台安装lxml记录\ndate: 2016-10-31 15:49:38\ntags: Python\n---\n\n\n前几天尝试使用一个简单的微博爬虫进行操作，导包的时候遇到lxml缺失的问题，找了好久最终在百度知道上找到个能用的，(⊙﹏⊙)b。\n\n###  1. 环境\n1. python2.7, win10 64位\n2. pip 环境变量配置 <!--more-->\n\n### 2. 开始\n1. cmd 命令行敲入\n> pip install wheel\n\n2. 准备lxml安装文件\n   下载[地址](https://pypi.python.org/pypi/lxml/3.4.2)\n   我的是win10 64位，选择 lxml-3.4.2-cp27-none-win_amd54.xhl\n\n3. 下载完成后放到 c:\\python27\\文件夹下\n4. 命令行敲入\n> pip install c:\\python27\\lxml...(刚才的文件名)\n\n5. 最后会提示\n> successfully installeed lxml-3.4.2\n\n这时候关闭pycharm project，重新打开就可以看到导入成功了。\n\n### ref\n- [百度有时候也是挺管用的](http://jingyan.baidu.com/article/cbcede07177b8702f40b4df9.html)\n","slug":"2016-10-31-install-lxml-on-windows","published":1,"updated":"2016-10-31T08:26:35.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzmd000g7gvre597s0vk","content":"<p>前几天尝试使用一个简单的微博爬虫进行操作，导包的时候遇到lxml缺失的问题，找了好久最终在百度知道上找到个能用的，(⊙﹏⊙)b。</p>\n<h3 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1. 环境\"></a>1. 环境</h3><ol>\n<li>python2.7, win10 64位</li>\n<li>pip 环境变量配置 <a id=\"more\"></a></li>\n</ol>\n<h3 id=\"2-开始\"><a href=\"#2-开始\" class=\"headerlink\" title=\"2. 开始\"></a>2. 开始</h3><ol>\n<li><p>cmd 命令行敲入</p>\n<blockquote>\n<p>pip install wheel</p>\n</blockquote>\n</li>\n<li><p>准备lxml安装文件<br>下载<a href=\"https://pypi.python.org/pypi/lxml/3.4.2\" target=\"_blank\" rel=\"external\">地址</a><br>我的是win10 64位，选择 lxml-3.4.2-cp27-none-win_amd54.xhl</p>\n</li>\n<li><p>下载完成后放到 c:\\python27\\文件夹下</p>\n</li>\n<li><p>命令行敲入</p>\n<blockquote>\n<p>pip install c:\\python27\\lxml…(刚才的文件名)</p>\n</blockquote>\n</li>\n<li><p>最后会提示</p>\n<blockquote>\n<p>successfully installeed lxml-3.4.2</p>\n</blockquote>\n</li>\n</ol>\n<p>这时候关闭pycharm project，重新打开就可以看到导入成功了。</p>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><a href=\"http://jingyan.baidu.com/article/cbcede07177b8702f40b4df9.html\" target=\"_blank\" rel=\"external\">百度有时候也是挺管用的</a></li>\n</ul>\n","excerpt":"<p>前几天尝试使用一个简单的微博爬虫进行操作，导包的时候遇到lxml缺失的问题，找了好久最终在百度知道上找到个能用的，(⊙﹏⊙)b。</p>\n<h3 id=\"1-环境\"><a href=\"#1-环境\" class=\"headerlink\" title=\"1. 环境\"></a>1. 环境</h3><ol>\n<li>python2.7, win10 64位</li>\n<li>pip 环境变量配置","more":"</li>\n</ol>\n<h3 id=\"2-开始\"><a href=\"#2-开始\" class=\"headerlink\" title=\"2. 开始\"></a>2. 开始</h3><ol>\n<li><p>cmd 命令行敲入</p>\n<blockquote>\n<p>pip install wheel</p>\n</blockquote>\n</li>\n<li><p>准备lxml安装文件<br>下载<a href=\"https://pypi.python.org/pypi/lxml/3.4.2\">地址</a><br>我的是win10 64位，选择 lxml-3.4.2-cp27-none-win_amd54.xhl</p>\n</li>\n<li><p>下载完成后放到 c:\\python27\\文件夹下</p>\n</li>\n<li><p>命令行敲入</p>\n<blockquote>\n<p>pip install c:\\python27\\lxml…(刚才的文件名)</p>\n</blockquote>\n</li>\n<li><p>最后会提示</p>\n<blockquote>\n<p>successfully installeed lxml-3.4.2</p>\n</blockquote>\n</li>\n</ol>\n<p>这时候关闭pycharm project，重新打开就可以看到导入成功了。</p>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><a href=\"http://jingyan.baidu.com/article/cbcede07177b8702f40b4df9.html\">百度有时候也是挺管用的</a></li>\n</ul>"},{"title":"wrap_content到底多大","date":"2016-11-27T08:46:44.000Z","_content":"\n转眼就十一月了，java的分析越来越少，虽然常常在业务上碰到不少坑。。。\n\n#### 问题的由来\n这周碰到一个需要画时间轴样式的自定义View的需求，大概像这样(图片来自网络)：\n![](http://odzl05jxx.bkt.clouddn.com/timelineView.png)\n\n要求，左侧的圆形节点可以自定义Drawable，右侧的文字高度随文字数量变化自适应。\n\n想想也就是自定义ViewGroup的那一套老样子。抄起键盘就开始研(Copy)究(Paste)，写着写着发现不对劲，主要的问题包括: \n\n> 1. 在onMeasure里面拿到的height == 0 , 具体一点就是:\n整个ViewGroup包含多个Item，每个Item包括左侧的自定义View(CustomView)，高度是wrap_content，右边的TextView高度是wrap_content(自适应嘛)。可是debug时发现左侧的自定义View拿到的高度是0，简直日了哈士奇了。随后拿着关键词去Google搜索，还是没有什么收获。\n\n\n```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        final int heightMode = MeasureSpec.getMode(heightMeasureSpec);// 这里是UNSPECIFIED, 常规概念里wrap_content对应的应该是AT_MOST\n        final int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        final int heightSize = MeasureSpec.getSize(heightMeasureSpec); // 居然等于0\n    }\n\n```\n回顾这个Item的实现，Item继承自RelativeLayout，左边的View是调用addView(view,RelativeLayout.Layoutparams)加进去的,params设置了一些rules，像是AlignParentLeft这种，记得给左边的View和右边的TextView都设置一个id就好。TextView也是这样addView进去的。后来查到了秋百万对于MeasureSpec的介绍，我想到RelativeLayout的onMeasure会调用两次，在第一次测量的时候，左边的View和右边的TextView都把高度设置为wrap_content了。要命的是这个Item本身添加到UI的方式也是类似的addView(view,RelativeLayout.Layoutparams)方式，这里的height也是wrap_content。即Item本身高度需要由其child决定，左边的child决定不了，只有右边的TextView才能决定。所以第一轮测量下来，左边的View的高度只能是0，右边的TextView高度倒是确定了。这时候Item本身的高度也就能确定了。在第二遍测量的时候，就能顺利拿到高度了。\n\n> 2. 左侧的每个节点上的drawable不画出来\n后来查了下，原因在于我对传进来的drawable检查了大小，太大的话用一个ScaleDrawable转一下。但是，scaleDrawable需要调用setLevel方法才会draw，我这里偷懒直接设置为1了。\n\n\n> 3. Item本身是继承自RelativeLayout，想要使onDraw方法被调用需要在构造函数里设置\nsetWillNotDraw(false) \n这个boolean值默认是true，主要是顾及到性能的原因。\n\n\n\n### ref \n- [How Android caculates view size](https://www.liaohuqiu.net/posts/how-does-android-caculate-the-size-of-child-view/)","source":"_posts/2016-11-27-the-size-of-wrap-content.md","raw":"---\ntitle: wrap_content到底多大\ndate: 2016-11-27 16:46:44\ntags: android\n---\n\n转眼就十一月了，java的分析越来越少，虽然常常在业务上碰到不少坑。。。\n\n#### 问题的由来\n这周碰到一个需要画时间轴样式的自定义View的需求，大概像这样(图片来自网络)：\n![](http://odzl05jxx.bkt.clouddn.com/timelineView.png)\n\n要求，左侧的圆形节点可以自定义Drawable，右侧的文字高度随文字数量变化自适应。\n\n想想也就是自定义ViewGroup的那一套老样子。抄起键盘就开始研(Copy)究(Paste)，写着写着发现不对劲，主要的问题包括: \n\n> 1. 在onMeasure里面拿到的height == 0 , 具体一点就是:\n整个ViewGroup包含多个Item，每个Item包括左侧的自定义View(CustomView)，高度是wrap_content，右边的TextView高度是wrap_content(自适应嘛)。可是debug时发现左侧的自定义View拿到的高度是0，简直日了哈士奇了。随后拿着关键词去Google搜索，还是没有什么收获。\n\n\n```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        final int widthMode = MeasureSpec.getMode(widthMeasureSpec);\n        final int heightMode = MeasureSpec.getMode(heightMeasureSpec);// 这里是UNSPECIFIED, 常规概念里wrap_content对应的应该是AT_MOST\n        final int widthSize = MeasureSpec.getSize(widthMeasureSpec);\n        final int heightSize = MeasureSpec.getSize(heightMeasureSpec); // 居然等于0\n    }\n\n```\n回顾这个Item的实现，Item继承自RelativeLayout，左边的View是调用addView(view,RelativeLayout.Layoutparams)加进去的,params设置了一些rules，像是AlignParentLeft这种，记得给左边的View和右边的TextView都设置一个id就好。TextView也是这样addView进去的。后来查到了秋百万对于MeasureSpec的介绍，我想到RelativeLayout的onMeasure会调用两次，在第一次测量的时候，左边的View和右边的TextView都把高度设置为wrap_content了。要命的是这个Item本身添加到UI的方式也是类似的addView(view,RelativeLayout.Layoutparams)方式，这里的height也是wrap_content。即Item本身高度需要由其child决定，左边的child决定不了，只有右边的TextView才能决定。所以第一轮测量下来，左边的View的高度只能是0，右边的TextView高度倒是确定了。这时候Item本身的高度也就能确定了。在第二遍测量的时候，就能顺利拿到高度了。\n\n> 2. 左侧的每个节点上的drawable不画出来\n后来查了下，原因在于我对传进来的drawable检查了大小，太大的话用一个ScaleDrawable转一下。但是，scaleDrawable需要调用setLevel方法才会draw，我这里偷懒直接设置为1了。\n\n\n> 3. Item本身是继承自RelativeLayout，想要使onDraw方法被调用需要在构造函数里设置\nsetWillNotDraw(false) \n这个boolean值默认是true，主要是顾及到性能的原因。\n\n\n\n### ref \n- [How Android caculates view size](https://www.liaohuqiu.net/posts/how-does-android-caculate-the-size-of-child-view/)","slug":"2016-11-27-the-size-of-wrap-content","published":1,"updated":"2016-11-27T09:39:06.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzmd000j7gvrs0rug9tt","content":"<p>转眼就十一月了，java的分析越来越少，虽然常常在业务上碰到不少坑。。。</p>\n<h4 id=\"问题的由来\"><a href=\"#问题的由来\" class=\"headerlink\" title=\"问题的由来\"></a>问题的由来</h4><p>这周碰到一个需要画时间轴样式的自定义View的需求，大概像这样(图片来自网络)：<br><img src=\"http://odzl05jxx.bkt.clouddn.com/timelineView.png\" alt=\"\"></p>\n<p>要求，左侧的圆形节点可以自定义Drawable，右侧的文字高度随文字数量变化自适应。</p>\n<p>想想也就是自定义ViewGroup的那一套老样子。抄起键盘就开始研(Copy)究(Paste)，写着写着发现不对劲，主要的问题包括: </p>\n<blockquote>\n<ol>\n<li>在onMeasure里面拿到的height == 0 , 具体一点就是:<br>整个ViewGroup包含多个Item，每个Item包括左侧的自定义View(CustomView)，高度是wrap_content，右边的TextView高度是wrap_content(自适应嘛)。可是debug时发现左侧的自定义View拿到的高度是0，简直日了哈士奇了。随后拿着关键词去Google搜索，还是没有什么收获。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);<span class=\"comment\">// 这里是UNSPECIFIED, 常规概念里wrap_content对应的应该是AT_MOST</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec); <span class=\"comment\">// 居然等于0</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>回顾这个Item的实现，Item继承自RelativeLayout，左边的View是调用addView(view,RelativeLayout.Layoutparams)加进去的,params设置了一些rules，像是AlignParentLeft这种，记得给左边的View和右边的TextView都设置一个id就好。TextView也是这样addView进去的。后来查到了秋百万对于MeasureSpec的介绍，我想到RelativeLayout的onMeasure会调用两次，在第一次测量的时候，左边的View和右边的TextView都把高度设置为wrap_content了。要命的是这个Item本身添加到UI的方式也是类似的addView(view,RelativeLayout.Layoutparams)方式，这里的height也是wrap_content。即Item本身高度需要由其child决定，左边的child决定不了，只有右边的TextView才能决定。所以第一轮测量下来，左边的View的高度只能是0，右边的TextView高度倒是确定了。这时候Item本身的高度也就能确定了。在第二遍测量的时候，就能顺利拿到高度了。</p>\n<blockquote>\n<ol>\n<li>左侧的每个节点上的drawable不画出来<br>后来查了下，原因在于我对传进来的drawable检查了大小，太大的话用一个ScaleDrawable转一下。但是，scaleDrawable需要调用setLevel方法才会draw，我这里偷懒直接设置为1了。</li>\n</ol>\n<ol>\n<li>Item本身是继承自RelativeLayout，想要使onDraw方法被调用需要在构造函数里设置<br>setWillNotDraw(false)<br>这个boolean值默认是true，主要是顾及到性能的原因。</li>\n</ol>\n</blockquote>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><a href=\"https://www.liaohuqiu.net/posts/how-does-android-caculate-the-size-of-child-view/\" target=\"_blank\" rel=\"external\">How Android caculates view size</a></li>\n</ul>\n","excerpt":"","more":"<p>转眼就十一月了，java的分析越来越少，虽然常常在业务上碰到不少坑。。。</p>\n<h4 id=\"问题的由来\"><a href=\"#问题的由来\" class=\"headerlink\" title=\"问题的由来\"></a>问题的由来</h4><p>这周碰到一个需要画时间轴样式的自定义View的需求，大概像这样(图片来自网络)：<br><img src=\"http://odzl05jxx.bkt.clouddn.com/timelineView.png\" alt=\"\"></p>\n<p>要求，左侧的圆形节点可以自定义Drawable，右侧的文字高度随文字数量变化自适应。</p>\n<p>想想也就是自定义ViewGroup的那一套老样子。抄起键盘就开始研(Copy)究(Paste)，写着写着发现不对劲，主要的问题包括: </p>\n<blockquote>\n<ol>\n<li>在onMeasure里面拿到的height == 0 , 具体一点就是:<br>整个ViewGroup包含多个Item，每个Item包括左侧的自定义View(CustomView)，高度是wrap_content，右边的TextView高度是wrap_content(自适应嘛)。可是debug时发现左侧的自定义View拿到的高度是0，简直日了哈士奇了。随后拿着关键词去Google搜索，还是没有什么收获。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);<span class=\"comment\">// 这里是UNSPECIFIED, 常规概念里wrap_content对应的应该是AT_MOST</span></div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">       <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec); <span class=\"comment\">// 居然等于0</span></div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>回顾这个Item的实现，Item继承自RelativeLayout，左边的View是调用addView(view,RelativeLayout.Layoutparams)加进去的,params设置了一些rules，像是AlignParentLeft这种，记得给左边的View和右边的TextView都设置一个id就好。TextView也是这样addView进去的。后来查到了秋百万对于MeasureSpec的介绍，我想到RelativeLayout的onMeasure会调用两次，在第一次测量的时候，左边的View和右边的TextView都把高度设置为wrap_content了。要命的是这个Item本身添加到UI的方式也是类似的addView(view,RelativeLayout.Layoutparams)方式，这里的height也是wrap_content。即Item本身高度需要由其child决定，左边的child决定不了，只有右边的TextView才能决定。所以第一轮测量下来，左边的View的高度只能是0，右边的TextView高度倒是确定了。这时候Item本身的高度也就能确定了。在第二遍测量的时候，就能顺利拿到高度了。</p>\n<blockquote>\n<ol>\n<li>左侧的每个节点上的drawable不画出来<br>后来查了下，原因在于我对传进来的drawable检查了大小，太大的话用一个ScaleDrawable转一下。但是，scaleDrawable需要调用setLevel方法才会draw，我这里偷懒直接设置为1了。</li>\n</ol>\n<ol>\n<li>Item本身是继承自RelativeLayout，想要使onDraw方法被调用需要在构造函数里设置<br>setWillNotDraw(false)<br>这个boolean值默认是true，主要是顾及到性能的原因。</li>\n</ol>\n</blockquote>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><a href=\"https://www.liaohuqiu.net/posts/how-does-android-caculate-the-size-of-child-view/\">How Android caculates view size</a></li>\n</ul>\n"},{"title":"Python编码遇到的UnicodeEncodeError解决方案","date":"2016-12-24T14:06:37.000Z","_content":"\n先占坑，明日在写","source":"_posts/2016-12-24-Python-UnicodeEncodeError.md","raw":"---\ntitle: Python编码遇到的UnicodeEncodeError解决方案\ndate: 2016-12-24 22:06:37\ntags:\n---\n\n先占坑，明日在写","slug":"2016-12-24-Python-UnicodeEncodeError","published":1,"updated":"2016-12-24T14:09:32.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzmd000m7gvrh9qd376g","content":"<p>先占坑，明日在写</p>\n","excerpt":"","more":"<p>先占坑，明日在写</p>\n"},{"title":"使用AnnotationProcessor自动生成代码","date":"2016-12-31T14:42:15.000Z","_content":"\n\n![](http://odzl05jxx.bkt.clouddn.com/apt_01.JPG)\n记得Romain Guy在一次DroidCon上曾说过:\n\n> As I understand, modern java development are all about wrting annaotation Processors and not wrting code anymore...\n\n全场观众大笑。。。\n\n这之后经常看到Jack Wharton在演讲中提到\"My Hypothetical Annotation Processor...\" ，后来才意识到像Retrofit，ButterKnife这些都是使用了注解的方式。\n <!--more-->\n\n\n\n### 1. 原理介绍\nAnnotation Processoring Tool是javac的一部分，它会在编译期生成新的.java文件（不是class文件）\n定义一个Annotation的语法如下：\n```java\n@Documented\n@Target(ElementType.TYPE)  //这说明生成的注解能够放在class,interface,enum等类型上。不能放在method上\n@Retention(RetentionPolicy.SOURCE)  //指明在编译器有效\npublic @interface Builder {  //@interface就像class,interface,enum一样\n}\n```\n\n### 2.Annotation Processor是生成新代码的实现类\n大致的实现例如：\n```java\npublic class PojoStringProcessor extends AbstractProcessor {\n    private static final String ANNOTATION = \"@\" + PojoString.class.getSimpleName();\n    private static final String CLASS_NAME = \"StringUtil\";\n    private Messager messager; //有点像Logger,用于输出信息\n    private Filer filer //可以获得Build Path，用于生成文件\n\n    //public构造函数不写也会自动加上\n\n    // init做一些初始化操作\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n        messager = processingEnv.getMessager();\n        this.filer = processingEnv.getFiler();\n    }\n\n    //apt在检查被注解的class时，会返回你需要的注解类型\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        return immutableSet.of(Builder.class.getCanonicalName());\n    }\n\n\t //java7,java8 有点像android的targetSdk Version\n    @Override\n    public SourceVersion getSupportedSourceVersion() {\n        return SourceVersion.latestSupported();\n    }\n\n\n\n    //重点\n    @Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n        ArrayList<AnnotatedClass> annotatedClasses = new ArrayList<>();\n        for (Element element : roundEnv.getElementsAnnotatedWith(PojoString.class)) {\n            TypeElement typeElement = (TypeElement) element;\n            if (!isValidClass(typeElement)) {\n                return true; //apt找到的所有被注解的class\n            }\n\n            try {\n                annotatedClasses.add(buildAnnotatedClass(typeElement));\n            } catch (IOException e) {\n                String message = String.format(\"Couldn't process class %s: %s\", typeElement,\n                        e.getMessage());\n                messager.printMessage(Diagnostic.Kind.ERROR, message, element);\n                e.printStackTrace();\n            }\n\n\n        }\n        try {\n            generate(annotatedClasses);\n        } catch (IOException e) {\n            messager.printMessage(Diagnostic.Kind.ERROR, \"Couldn't generate class\");\n        }\n\n        return true;\n    }\n\n\n}\n\n```\n几个重要的方法解释下：\n- roundEnv: apt分两步：1. apt发现被注解的代码，提供给我们写的processor，后者生成新的java代码(apt还未处理这部分新代码)。\n2. apt发现新代码，提供给我们的Processor，不生成新代码。完成processing。（后面提供给编译）\n\n\nServiceLoader Discovery File（这货在jar中）\n//META-INFO/services/javax.annotations.processing.Processor文件中写入\ncom.example.annotation.BuilderProcessor// class包名\n//这里声明所有的processor，这里可以include别的processor\n\n语法：\n```java\napp/build.gradle\n\ndependencies{\n\tcompile project(': annotation')\n\n\tapt project (':processor')\n}\n//apt 表示processor中的方法不会带到distributed apk中,方法数不用担心了\n//https://bitbucket.org/hvisser/android-apt\n//https://github.com/tbroyer/gradle-apt-plugin\n```\n\n\n\n继承AbstractProcessor，必须要有一个无参public构造函数\n\n\n### 3. 生成新的java方法\n首先添加依赖，square的javaPoet\n\n假设想生成的代码是这样的\n```java\npublic final class UserBuilder{\n\t\n\tprivate String userName;\n\n\tpublic UserBuilder username(String username){\n\t\tthis.username = username;\n\t\treturen this;\n\t}\n\n}\n\n```\n- 生成变量\n![](http://odzl05jxx.bkt.clouddn.com/apt_field.JPG)\n\n- 生成方法\n![](http://odzl05jxx.bkt.clouddn.com/apt_methods.JPG)\n\n- 生成class:\n![](http://odzl05jxx.bkt.clouddn.com/apt_class.JPG)\n\n直接截图了\n- 主要步骤\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_steps.JPG)\n\nmeta_data\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_meta_data.JPG)\n\n- 生成private field和public setter:\n> FiledSpec username = FiledSpec.builder(String.class,\"username\",Modifier.PRIVATE).build();\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_fields.JPG)\n\n\n- 生成build method\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_build_method.JPG)\n\n- 生成builder\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_create_builder.JPG)\n\n- 写java文件：\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_write_java_file.JPG)\n\n\n\n\n### 4. 注意的地方\ndnot't put annotation processors in a compile configuration, use the Android Apt plugin。 \n\nif you using jack, jack has support for annotation processors.\n\nif it's only a java, could use the Gradle Apt Plugin\n\n我们写的processor不会带到生成的apk中，但生成的代码会。这也正是想要的目的。\n\n\n### ref\n - [android gradle plugin 2.3的兼容问题](https://code.google.com/p/android/issues/detail?id=227612)\n - [Android沉思录](http://yeungeek.com/2016/04/27/Android%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%E4%BA%8C-Annotation-Processing-Tool)\n - [Droidcon NYC 2016 - @Eliminate(\"Boilerplate\")](https://www.youtube.com/watch?v=NBkl_SIHUr8)\n - [Gradle Apt Plugin](https://github.com/tbroyer/gradle-apt-plugin)\n - [Andorid Apt Plugin](https://bitbucket.org/hvisser/android-apt)","source":"_posts/2016-12-31-Eliminating-BoilPlate-AnnotationProcessor.md","raw":"---\ntitle: 使用AnnotationProcessor自动生成代码\ndate: 2016-12-31 22:42:15\ntags:\n---\n\n\n![](http://odzl05jxx.bkt.clouddn.com/apt_01.JPG)\n记得Romain Guy在一次DroidCon上曾说过:\n\n> As I understand, modern java development are all about wrting annaotation Processors and not wrting code anymore...\n\n全场观众大笑。。。\n\n这之后经常看到Jack Wharton在演讲中提到\"My Hypothetical Annotation Processor...\" ，后来才意识到像Retrofit，ButterKnife这些都是使用了注解的方式。\n <!--more-->\n\n\n\n### 1. 原理介绍\nAnnotation Processoring Tool是javac的一部分，它会在编译期生成新的.java文件（不是class文件）\n定义一个Annotation的语法如下：\n```java\n@Documented\n@Target(ElementType.TYPE)  //这说明生成的注解能够放在class,interface,enum等类型上。不能放在method上\n@Retention(RetentionPolicy.SOURCE)  //指明在编译器有效\npublic @interface Builder {  //@interface就像class,interface,enum一样\n}\n```\n\n### 2.Annotation Processor是生成新代码的实现类\n大致的实现例如：\n```java\npublic class PojoStringProcessor extends AbstractProcessor {\n    private static final String ANNOTATION = \"@\" + PojoString.class.getSimpleName();\n    private static final String CLASS_NAME = \"StringUtil\";\n    private Messager messager; //有点像Logger,用于输出信息\n    private Filer filer //可以获得Build Path，用于生成文件\n\n    //public构造函数不写也会自动加上\n\n    // init做一些初始化操作\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {\n        super.init(processingEnv);\n        messager = processingEnv.getMessager();\n        this.filer = processingEnv.getFiler();\n    }\n\n    //apt在检查被注解的class时，会返回你需要的注解类型\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        return immutableSet.of(Builder.class.getCanonicalName());\n    }\n\n\t //java7,java8 有点像android的targetSdk Version\n    @Override\n    public SourceVersion getSupportedSourceVersion() {\n        return SourceVersion.latestSupported();\n    }\n\n\n\n    //重点\n    @Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n        ArrayList<AnnotatedClass> annotatedClasses = new ArrayList<>();\n        for (Element element : roundEnv.getElementsAnnotatedWith(PojoString.class)) {\n            TypeElement typeElement = (TypeElement) element;\n            if (!isValidClass(typeElement)) {\n                return true; //apt找到的所有被注解的class\n            }\n\n            try {\n                annotatedClasses.add(buildAnnotatedClass(typeElement));\n            } catch (IOException e) {\n                String message = String.format(\"Couldn't process class %s: %s\", typeElement,\n                        e.getMessage());\n                messager.printMessage(Diagnostic.Kind.ERROR, message, element);\n                e.printStackTrace();\n            }\n\n\n        }\n        try {\n            generate(annotatedClasses);\n        } catch (IOException e) {\n            messager.printMessage(Diagnostic.Kind.ERROR, \"Couldn't generate class\");\n        }\n\n        return true;\n    }\n\n\n}\n\n```\n几个重要的方法解释下：\n- roundEnv: apt分两步：1. apt发现被注解的代码，提供给我们写的processor，后者生成新的java代码(apt还未处理这部分新代码)。\n2. apt发现新代码，提供给我们的Processor，不生成新代码。完成processing。（后面提供给编译）\n\n\nServiceLoader Discovery File（这货在jar中）\n//META-INFO/services/javax.annotations.processing.Processor文件中写入\ncom.example.annotation.BuilderProcessor// class包名\n//这里声明所有的processor，这里可以include别的processor\n\n语法：\n```java\napp/build.gradle\n\ndependencies{\n\tcompile project(': annotation')\n\n\tapt project (':processor')\n}\n//apt 表示processor中的方法不会带到distributed apk中,方法数不用担心了\n//https://bitbucket.org/hvisser/android-apt\n//https://github.com/tbroyer/gradle-apt-plugin\n```\n\n\n\n继承AbstractProcessor，必须要有一个无参public构造函数\n\n\n### 3. 生成新的java方法\n首先添加依赖，square的javaPoet\n\n假设想生成的代码是这样的\n```java\npublic final class UserBuilder{\n\t\n\tprivate String userName;\n\n\tpublic UserBuilder username(String username){\n\t\tthis.username = username;\n\t\treturen this;\n\t}\n\n}\n\n```\n- 生成变量\n![](http://odzl05jxx.bkt.clouddn.com/apt_field.JPG)\n\n- 生成方法\n![](http://odzl05jxx.bkt.clouddn.com/apt_methods.JPG)\n\n- 生成class:\n![](http://odzl05jxx.bkt.clouddn.com/apt_class.JPG)\n\n直接截图了\n- 主要步骤\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_steps.JPG)\n\nmeta_data\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_meta_data.JPG)\n\n- 生成private field和public setter:\n> FiledSpec username = FiledSpec.builder(String.class,\"username\",Modifier.PRIVATE).build();\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_fields.JPG)\n\n\n- 生成build method\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_build_method.JPG)\n\n- 生成builder\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_create_builder.JPG)\n\n- 写java文件：\n![](http://odzl05jxx.bkt.clouddn.com/apt_process_write_java_file.JPG)\n\n\n\n\n### 4. 注意的地方\ndnot't put annotation processors in a compile configuration, use the Android Apt plugin。 \n\nif you using jack, jack has support for annotation processors.\n\nif it's only a java, could use the Gradle Apt Plugin\n\n我们写的processor不会带到生成的apk中，但生成的代码会。这也正是想要的目的。\n\n\n### ref\n - [android gradle plugin 2.3的兼容问题](https://code.google.com/p/android/issues/detail?id=227612)\n - [Android沉思录](http://yeungeek.com/2016/04/27/Android%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%E4%BA%8C-Annotation-Processing-Tool)\n - [Droidcon NYC 2016 - @Eliminate(\"Boilerplate\")](https://www.youtube.com/watch?v=NBkl_SIHUr8)\n - [Gradle Apt Plugin](https://github.com/tbroyer/gradle-apt-plugin)\n - [Andorid Apt Plugin](https://bitbucket.org/hvisser/android-apt)","slug":"2016-12-31-Eliminating-BoilPlate-AnnotationProcessor","published":1,"updated":"2017-01-01T13:33:04.779Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzmt000q7gvrgldj50g9","content":"<p><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_01.JPG\" alt=\"\"><br>记得Romain Guy在一次DroidCon上曾说过:</p>\n<blockquote>\n<p>As I understand, modern java development are all about wrting annaotation Processors and not wrting code anymore…</p>\n</blockquote>\n<p>全场观众大笑。。。</p>\n<p>这之后经常看到Jack Wharton在演讲中提到”My Hypothetical Annotation Processor…” ，后来才意识到像Retrofit，ButterKnife这些都是使用了注解的方式。<br> <a id=\"more\"></a></p>\n<h3 id=\"1-原理介绍\"><a href=\"#1-原理介绍\" class=\"headerlink\" title=\"1. 原理介绍\"></a>1. 原理介绍</h3><p>Annotation Processoring Tool是javac的一部分，它会在编译期生成新的.java文件（不是class文件）<br>定义一个Annotation的语法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)  <span class=\"comment\">//这说明生成的注解能够放在class,interface,enum等类型上。不能放在method上</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.SOURCE)  <span class=\"comment\">//指明在编译器有效</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Builder &#123;  <span class=\"comment\">//@interface就像class,interface,enum一样</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-Annotation-Processor是生成新代码的实现类\"><a href=\"#2-Annotation-Processor是生成新代码的实现类\" class=\"headerlink\" title=\"2.Annotation Processor是生成新代码的实现类\"></a>2.Annotation Processor是生成新代码的实现类</h3><p>大致的实现例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PojoStringProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ANNOTATION = <span class=\"string\">\"@\"</span> + PojoString.class.getSimpleName();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CLASS_NAME = <span class=\"string\">\"StringUtil\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Messager messager; <span class=\"comment\">//有点像Logger,用于输出信息</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Filer filer <span class=\"comment\">//可以获得Build Path，用于生成文件</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//public构造函数不写也会自动加上</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// init做一些初始化操作</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ProcessingEnvironment processingEnv)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.init(processingEnv);</div><div class=\"line\">        messager = processingEnv.getMessager();</div><div class=\"line\">        <span class=\"keyword\">this</span>.filer = processingEnv.getFiler();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//apt在检查被注解的class时，会返回你需要的注解类型</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getSupportedAnnotationTypes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> immutableSet.of(Builder.class.getCanonicalName());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">true <span class=\"comment\">//java7,java8 有点像android的targetSdk Version</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SourceVersion <span class=\"title\">getSupportedSourceVersion</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SourceVersion.latestSupported();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//重点</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</div><div class=\"line\">        ArrayList&lt;AnnotatedClass&gt; annotatedClasses = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Element element : roundEnv.getElementsAnnotatedWith(PojoString.class)) &#123;</div><div class=\"line\">            TypeElement typeElement = (TypeElement) element;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!isValidClass(typeElement)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; <span class=\"comment\">//apt找到的所有被注解的class</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                annotatedClasses.add(buildAnnotatedClass(typeElement));</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                String message = String.format(<span class=\"string\">\"Couldn't process class %s: %s\"</span>, typeElement,</div><div class=\"line\">                        e.getMessage());</div><div class=\"line\">                messager.printMessage(Diagnostic.Kind.ERROR, message, element);</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            generate(annotatedClasses);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            messager.printMessage(Diagnostic.Kind.ERROR, <span class=\"string\">\"Couldn't generate class\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>几个重要的方法解释下：</p>\n<ul>\n<li>roundEnv: apt分两步：1. apt发现被注解的代码，提供给我们写的processor，后者生成新的java代码(apt还未处理这部分新代码)。</li>\n</ul>\n<ol>\n<li>apt发现新代码，提供给我们的Processor，不生成新代码。完成processing。（后面提供给编译）</li>\n</ol>\n<p>ServiceLoader Discovery File（这货在jar中）<br>//META-INFO/services/javax.annotations.processing.Processor文件中写入<br>com.example.annotation.BuilderProcessor// class包名<br>//这里声明所有的processor，这里可以include别的processor</p>\n<p>语法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/build.gradle</div><div class=\"line\"></div><div class=\"line\">dependencies&#123;</div><div class=\"line\">true<span class=\"function\">compile <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">': annotation'</span>)</span></span></div><div class=\"line\"></div><div class=\"line\">trueapt <span class=\"title\">project</span> <span class=\"params\">(<span class=\"string\">':processor'</span>)</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//apt 表示processor中的方法不会带到distributed apk中,方法数不用担心了</span></div><div class=\"line\"><span class=\"comment\">//https://bitbucket.org/hvisser/android-apt</span></div><div class=\"line\"><span class=\"comment\">//https://github.com/tbroyer/gradle-apt-plugin</span></div></pre></td></tr></table></figure></p>\n<p>继承AbstractProcessor，必须要有一个无参public构造函数</p>\n<h3 id=\"3-生成新的java方法\"><a href=\"#3-生成新的java方法\" class=\"headerlink\" title=\"3. 生成新的java方法\"></a>3. 生成新的java方法</h3><p>首先添加依赖，square的javaPoet</p>\n<p>假设想生成的代码是这样的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserBuilder</span></span>&#123;</div><div class=\"line\">true</div><div class=\"line\">true<span class=\"keyword\">private</span> String userName;</div><div class=\"line\"></div><div class=\"line\">true<span class=\"function\"><span class=\"keyword\">public</span> UserBuilder <span class=\"title\">username</span><span class=\"params\">(String username)</span></span>&#123;</div><div class=\"line\">truetrue<span class=\"keyword\">this</span>.username = username;</div><div class=\"line\">truetruereturen <span class=\"keyword\">this</span>;</div><div class=\"line\">true&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>生成变量<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_field.JPG\" alt=\"\"></p>\n</li>\n<li><p>生成方法<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_methods.JPG\" alt=\"\"></p>\n</li>\n<li><p>生成class:<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_class.JPG\" alt=\"\"></p>\n</li>\n</ul>\n<p>直接截图了</p>\n<ul>\n<li>主要步骤<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_steps.JPG\" alt=\"\"></li>\n</ul>\n<p>meta_data<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_meta_data.JPG\" alt=\"\"></p>\n<ul>\n<li>生成private field和public setter:<blockquote>\n<p>FiledSpec username = FiledSpec.builder(String.class,”username”,Modifier.PRIVATE).build();<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_fields.JPG\" alt=\"\"></p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>生成build method<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_build_method.JPG\" alt=\"\"></p>\n</li>\n<li><p>生成builder<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_create_builder.JPG\" alt=\"\"></p>\n</li>\n<li><p>写java文件：<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_write_java_file.JPG\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"4-注意的地方\"><a href=\"#4-注意的地方\" class=\"headerlink\" title=\"4. 注意的地方\"></a>4. 注意的地方</h3><p>dnot’t put annotation processors in a compile configuration, use the Android Apt plugin。 </p>\n<p>if you using jack, jack has support for annotation processors.</p>\n<p>if it’s only a java, could use the Gradle Apt Plugin</p>\n<p>我们写的processor不会带到生成的apk中，但生成的代码会。这也正是想要的目的。</p>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><a href=\"https://code.google.com/p/android/issues/detail?id=227612\" target=\"_blank\" rel=\"external\">android gradle plugin 2.3的兼容问题</a></li>\n<li><a href=\"http://yeungeek.com/2016/04/27/Android%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%E4%BA%8C-Annotation-Processing-Tool\" target=\"_blank\" rel=\"external\">Android沉思录</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=NBkl_SIHUr8\" target=\"_blank\" rel=\"external\">Droidcon NYC 2016 - @Eliminate(“Boilerplate”)</a></li>\n<li><a href=\"https://github.com/tbroyer/gradle-apt-plugin\" target=\"_blank\" rel=\"external\">Gradle Apt Plugin</a></li>\n<li><a href=\"https://bitbucket.org/hvisser/android-apt\" target=\"_blank\" rel=\"external\">Andorid Apt Plugin</a></li>\n</ul>\n","excerpt":"<p><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_01.JPG\" alt=\"\"><br>记得Romain Guy在一次DroidCon上曾说过:</p>\n<blockquote>\n<p>As I understand, modern java development are all about wrting annaotation Processors and not wrting code anymore…</p>\n</blockquote>\n<p>全场观众大笑。。。</p>\n<p>这之后经常看到Jack Wharton在演讲中提到”My Hypothetical Annotation Processor…” ，后来才意识到像Retrofit，ButterKnife这些都是使用了注解的方式。<br>","more":"</p>\n<h3 id=\"1-原理介绍\"><a href=\"#1-原理介绍\" class=\"headerlink\" title=\"1. 原理介绍\"></a>1. 原理介绍</h3><p>Annotation Processoring Tool是javac的一部分，它会在编译期生成新的.java文件（不是class文件）<br>定义一个Annotation的语法如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)  <span class=\"comment\">//这说明生成的注解能够放在class,interface,enum等类型上。不能放在method上</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.SOURCE)  <span class=\"comment\">//指明在编译器有效</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Builder &#123;  <span class=\"comment\">//@interface就像class,interface,enum一样</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-Annotation-Processor是生成新代码的实现类\"><a href=\"#2-Annotation-Processor是生成新代码的实现类\" class=\"headerlink\" title=\"2.Annotation Processor是生成新代码的实现类\"></a>2.Annotation Processor是生成新代码的实现类</h3><p>大致的实现例如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PojoStringProcessor</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractProcessor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ANNOTATION = <span class=\"string\">\"@\"</span> + PojoString.class.getSimpleName();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String CLASS_NAME = <span class=\"string\">\"StringUtil\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> Messager messager; <span class=\"comment\">//有点像Logger,用于输出信息</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Filer filer <span class=\"comment\">//可以获得Build Path，用于生成文件</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//public构造函数不写也会自动加上</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// init做一些初始化操作</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ProcessingEnvironment processingEnv)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.init(processingEnv);</div><div class=\"line\">        messager = processingEnv.getMessager();</div><div class=\"line\">        <span class=\"keyword\">this</span>.filer = processingEnv.getFiler();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//apt在检查被注解的class时，会返回你需要的注解类型</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">getSupportedAnnotationTypes</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> immutableSet.of(Builder.class.getCanonicalName());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">true <span class=\"comment\">//java7,java8 有点像android的targetSdk Version</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SourceVersion <span class=\"title\">getSupportedSourceVersion</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> SourceVersion.latestSupported();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//重点</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">process</span><span class=\"params\">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</div><div class=\"line\">        ArrayList&lt;AnnotatedClass&gt; annotatedClasses = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (Element element : roundEnv.getElementsAnnotatedWith(PojoString.class)) &#123;</div><div class=\"line\">            TypeElement typeElement = (TypeElement) element;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!isValidClass(typeElement)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; <span class=\"comment\">//apt找到的所有被注解的class</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                annotatedClasses.add(buildAnnotatedClass(typeElement));</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">                String message = String.format(<span class=\"string\">\"Couldn't process class %s: %s\"</span>, typeElement,</div><div class=\"line\">                        e.getMessage());</div><div class=\"line\">                messager.printMessage(Diagnostic.Kind.ERROR, message, element);</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            generate(annotatedClasses);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            messager.printMessage(Diagnostic.Kind.ERROR, <span class=\"string\">\"Couldn't generate class\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>几个重要的方法解释下：</p>\n<ul>\n<li>roundEnv: apt分两步：1. apt发现被注解的代码，提供给我们写的processor，后者生成新的java代码(apt还未处理这部分新代码)。</li>\n</ul>\n<ol>\n<li>apt发现新代码，提供给我们的Processor，不生成新代码。完成processing。（后面提供给编译）</li>\n</ol>\n<p>ServiceLoader Discovery File（这货在jar中）<br>//META-INFO/services/javax.annotations.processing.Processor文件中写入<br>com.example.annotation.BuilderProcessor// class包名<br>//这里声明所有的processor，这里可以include别的processor</p>\n<p>语法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">app/build.gradle</div><div class=\"line\"></div><div class=\"line\">dependencies&#123;</div><div class=\"line\">true<span class=\"function\">compile <span class=\"title\">project</span><span class=\"params\">(<span class=\"string\">': annotation'</span>)</span></div><div class=\"line\"></div><div class=\"line\">trueapt <span class=\"title\">project</span> <span class=\"params\">(<span class=\"string\">':processor'</span>)</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//apt 表示processor中的方法不会带到distributed apk中,方法数不用担心了</span></div><div class=\"line\"><span class=\"comment\">//https://bitbucket.org/hvisser/android-apt</span></div><div class=\"line\"><span class=\"comment\">//https://github.com/tbroyer/gradle-apt-plugin</span></span></div></pre></td></tr></table></figure></p>\n<p>继承AbstractProcessor，必须要有一个无参public构造函数</p>\n<h3 id=\"3-生成新的java方法\"><a href=\"#3-生成新的java方法\" class=\"headerlink\" title=\"3. 生成新的java方法\"></a>3. 生成新的java方法</h3><p>首先添加依赖，square的javaPoet</p>\n<p>假设想生成的代码是这样的<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserBuilder</span></span>&#123;</div><div class=\"line\">true</div><div class=\"line\">true<span class=\"keyword\">private</span> String userName;</div><div class=\"line\"></div><div class=\"line\">true<span class=\"function\"><span class=\"keyword\">public</span> UserBuilder <span class=\"title\">username</span><span class=\"params\">(String username)</span></span>&#123;</div><div class=\"line\">truetrue<span class=\"keyword\">this</span>.username = username;</div><div class=\"line\">truetruereturen <span class=\"keyword\">this</span>;</div><div class=\"line\">true&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>生成变量<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_field.JPG\" alt=\"\"></p>\n</li>\n<li><p>生成方法<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_methods.JPG\" alt=\"\"></p>\n</li>\n<li><p>生成class:<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_class.JPG\" alt=\"\"></p>\n</li>\n</ul>\n<p>直接截图了</p>\n<ul>\n<li>主要步骤<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_steps.JPG\" alt=\"\"></li>\n</ul>\n<p>meta_data<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_meta_data.JPG\" alt=\"\"></p>\n<ul>\n<li>生成private field和public setter:<blockquote>\n<p>FiledSpec username = FiledSpec.builder(String.class,”username”,Modifier.PRIVATE).build();<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_fields.JPG\" alt=\"\"></p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>生成build method<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_build_method.JPG\" alt=\"\"></p>\n</li>\n<li><p>生成builder<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_create_builder.JPG\" alt=\"\"></p>\n</li>\n<li><p>写java文件：<br><img src=\"http://odzl05jxx.bkt.clouddn.com/apt_process_write_java_file.JPG\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"4-注意的地方\"><a href=\"#4-注意的地方\" class=\"headerlink\" title=\"4. 注意的地方\"></a>4. 注意的地方</h3><p>dnot’t put annotation processors in a compile configuration, use the Android Apt plugin。 </p>\n<p>if you using jack, jack has support for annotation processors.</p>\n<p>if it’s only a java, could use the Gradle Apt Plugin</p>\n<p>我们写的processor不会带到生成的apk中，但生成的代码会。这也正是想要的目的。</p>\n<h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><a href=\"https://code.google.com/p/android/issues/detail?id=227612\">android gradle plugin 2.3的兼容问题</a></li>\n<li><a href=\"http://yeungeek.com/2016/04/27/Android%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%E4%BA%8C-Annotation-Processing-Tool\">Android沉思录</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=NBkl_SIHUr8\">Droidcon NYC 2016 - @Eliminate(“Boilerplate”)</a></li>\n<li><a href=\"https://github.com/tbroyer/gradle-apt-plugin\">Gradle Apt Plugin</a></li>\n<li><a href=\"https://bitbucket.org/hvisser/android-apt\">Andorid Apt Plugin</a></li>\n</ul>"},{"title":"linux基本命令介绍","date":"2017-01-07T07:38:43.000Z","top":1,"_content":"\n把经常会用到的一些linux基本命令罗列在这里，这其中配上一些自己的图，希望作为今后工作中的参考。</br>\n![](http://odzl05jxx.bkt.clouddn.com/fork_you_git.jpg)\n <!--more-->\n\n\n### 1. 文件操作常用命令\n\n```shell\n- > cd //进入目录\n- > cd /  返回根目录\n- > pwd // 显示当前目录\n- > ls // 显示当前目录下内容 \n\n- > mkdir //新建目录\n- > rmdir //删除目录,如果目录不为空，\n- >使用 rm -r //递归删除\n- > rm -rf //强制删除\n\n- > touch filename //创建文件，后缀在linux下没意义\n\n\n```\n\n\n\n复制粘贴：\n```shell\n- > cp a b //把a复制一份，命名为b\n\n- > cp d1 d2 // 这样是不行的，复制目录需要加上-r ，即\n- > cp -r d1 d2\n\n移动(左边是被移动的文件或目录，右边是目标路径)： \n\n- > mv d1 /  把d1移动到相对路径，也就是根目录下\n- > mv d1 ../把d1往上移动一层\n- > mv d1 ../../\n\n```\n\n\n\n### 2. Vi文本编辑器\n```shell\n- > vi 3.txt // 如果有则编辑，没有则直接创建\n\nVi分为命令模式和编辑模式，一进来是命令模式，输入'a'进入编辑模式\n切换回命令模式按'esc' \n命令模式下 :w 表示存盘\n- :q 退出\n- :!q 不保存退出\n- :wq 保存并退出\n```\n\n\n在编辑模式下,输入 'dd'删除一行 ，输入'dw'删除一个词\n输入'o'插入一行。。。。。。\n```shell\n- > more filename//查看文件内容\n\n- > cat filename //正序查看文件内容\n\n- > tac filename //逆序查看文件内容\n\n- > head - 3 filename //只查看文件前面三行\n- > tail - 3 filename //只查看倒数后三行 \n```\n\n\n更多命令如 find 、 whereis 、 Li(Link)\n查找：\n```shell\nfind / -name filename  //在根目录下查找文件\nfind /etc -name filename //在etc目录下查找文件\n\ngrep stringtofind filename //在指定的文本文件中查找指定的字符串\n\nwhereis ls //查看ls命令所执行的是哪个文件及其位置(查看系统文件所在路径)\n\n```\n\n### 3. linux下shell脚本语句的语法\nlinux大小写敏感\neg: \n```shell\n#!/bin/sh\nmyPath=\"/var/log/httpd/\"\nmyFile=\"/var /log/httpd/access.log\"\n#这里的-x 参数判断$myPath是否存在并且是否具有可执行权限\nif [ ! -x \"$myPath\"]; then\nmkdir \"$myPath\"\nfi\n#这里的-d 参数判断$myPath是否存在\nif [ ! -d \"$myPath\"]; then\nmkdir \"$myPath\"\nfi\n#这里的-f参数判断$myFile是否存在\nif [ ! -f \"$myFile\" ]; then\ntouch \"$myFile\"\nfi\n#其他参数还有-n,-n是判断一个变量是否是否有值\nif [ ! -n \"$myVar\" ]; then\necho \"$myVar is empty\"\nexit 0\nfi\n#两个变量判断是否相等\nif [ \"$var1\" == \"$var2\" ]; then  //if 后面必须加then\necho '$var1 eq $var2'\nelse\necho '$var1 not eq $var2'\nfi //else后面必须加fi\n \n\n       if list then\n           do something here\n       elif list then\n           do another thing here\n       else\n         do something else here\n       fi  \n```\n\neg: echo类似于print\n```shell\n例：myvar=“Hi there！”\n\n    echo $myvar\n\n    echo \"$myvar\"\n\n    echo ' $myvar'\n\n    echo \\$myvar\n\n将会输出如下：Hi there！\n\n              Hi there!\n\n              $myvar\n\n              $myvar\n```\n\n\n### 4. 用户和用户组的问题\n```shell\nuseradd user //添加用户，(-g 指定用户所在用户组)/home目录下会多一个user的目录，作为该用户的主目录\n\npasswd user //设置user的密码，会提示输入密码，密码不会显示在窗口中\n\ncd /etc >>> more passwd  ，这里面会显示所有的用户\nmore group ,显示用户组的信息\ngroupadd groupname //添加一个用户组\n\n//删除用户\nuserdel user //删除一个用户 \n还需要删除该用户的主目录(rm -rf user) \n\n重启机器，登录页面选择新用户即可完成用户切换\n\n或者使用 su testuser 切换到testuser身份\nexit就回到root用户的身份\n\n新用户登录时，默认的pwd是该用户的主目录\n```\n\n\n### 5. 文件权限的问题\nls命令执行显示的文件前一般带有一串信息\n第一位：\n- 代表文件\nl代表链接\nd代表目录\n\n后面九位划分为三块，可能的权限有这么几种\nr(read权限)w(写权限)-(无权限)x(执行权限)\n\n第一组代表所有者权限，第二组代表与所有者一个用户组的用户的权限，第三组代表其他用户的权限\n\n更改文件权限命令: chmod\n```shell\nchmod +x filename //加上可执行权限，所有用户都加上了\nchmod u+x filename //给当前用户加上可执行权限\n//其他命令不一一列举\n\nchmod 755 filename  \nchmod 777 filename //全部权限都有了，其实上面的9位就是这三位数每一位的二进制拼起来的\n755 就是 111101101,也就对应上面的权限九位字母\n\n\n```\n\n更改文件所有者\n\n- > chown username filename\n\n\n### 6. 管道\n将一个命令的输出传送给另一个命令，作为另一个命令的输入\neg: 中间那条竖线叫做管道连接符\n```shell\n$ cat /etc/passwd | grep usernametofind\n$ ls -l | grep \"^d\"\n$ ls -l * | grep \"^-\" | wc -|   //\"^-\"表示不列出目录或链接，只展示目录；wc是数行数\n$ ls -l | grep \"^d\" //只列出目录\n```\n\n\n### 7. 磁盘分区的问题\n\n### 8. 配置sql,Tomcat\n\n\n## ref \n鸟哥\n","source":"_posts/2017-01-07-Linux-Basic-Commands.md","raw":"---\ntitle: linux基本命令介绍\ndate: 2017-01-07 15:38:43\ncategories: [linux]\ntags: [置顶]\ntop : 1\n---\n\n把经常会用到的一些linux基本命令罗列在这里，这其中配上一些自己的图，希望作为今后工作中的参考。</br>\n![](http://odzl05jxx.bkt.clouddn.com/fork_you_git.jpg)\n <!--more-->\n\n\n### 1. 文件操作常用命令\n\n```shell\n- > cd //进入目录\n- > cd /  返回根目录\n- > pwd // 显示当前目录\n- > ls // 显示当前目录下内容 \n\n- > mkdir //新建目录\n- > rmdir //删除目录,如果目录不为空，\n- >使用 rm -r //递归删除\n- > rm -rf //强制删除\n\n- > touch filename //创建文件，后缀在linux下没意义\n\n\n```\n\n\n\n复制粘贴：\n```shell\n- > cp a b //把a复制一份，命名为b\n\n- > cp d1 d2 // 这样是不行的，复制目录需要加上-r ，即\n- > cp -r d1 d2\n\n移动(左边是被移动的文件或目录，右边是目标路径)： \n\n- > mv d1 /  把d1移动到相对路径，也就是根目录下\n- > mv d1 ../把d1往上移动一层\n- > mv d1 ../../\n\n```\n\n\n\n### 2. Vi文本编辑器\n```shell\n- > vi 3.txt // 如果有则编辑，没有则直接创建\n\nVi分为命令模式和编辑模式，一进来是命令模式，输入'a'进入编辑模式\n切换回命令模式按'esc' \n命令模式下 :w 表示存盘\n- :q 退出\n- :!q 不保存退出\n- :wq 保存并退出\n```\n\n\n在编辑模式下,输入 'dd'删除一行 ，输入'dw'删除一个词\n输入'o'插入一行。。。。。。\n```shell\n- > more filename//查看文件内容\n\n- > cat filename //正序查看文件内容\n\n- > tac filename //逆序查看文件内容\n\n- > head - 3 filename //只查看文件前面三行\n- > tail - 3 filename //只查看倒数后三行 \n```\n\n\n更多命令如 find 、 whereis 、 Li(Link)\n查找：\n```shell\nfind / -name filename  //在根目录下查找文件\nfind /etc -name filename //在etc目录下查找文件\n\ngrep stringtofind filename //在指定的文本文件中查找指定的字符串\n\nwhereis ls //查看ls命令所执行的是哪个文件及其位置(查看系统文件所在路径)\n\n```\n\n### 3. linux下shell脚本语句的语法\nlinux大小写敏感\neg: \n```shell\n#!/bin/sh\nmyPath=\"/var/log/httpd/\"\nmyFile=\"/var /log/httpd/access.log\"\n#这里的-x 参数判断$myPath是否存在并且是否具有可执行权限\nif [ ! -x \"$myPath\"]; then\nmkdir \"$myPath\"\nfi\n#这里的-d 参数判断$myPath是否存在\nif [ ! -d \"$myPath\"]; then\nmkdir \"$myPath\"\nfi\n#这里的-f参数判断$myFile是否存在\nif [ ! -f \"$myFile\" ]; then\ntouch \"$myFile\"\nfi\n#其他参数还有-n,-n是判断一个变量是否是否有值\nif [ ! -n \"$myVar\" ]; then\necho \"$myVar is empty\"\nexit 0\nfi\n#两个变量判断是否相等\nif [ \"$var1\" == \"$var2\" ]; then  //if 后面必须加then\necho '$var1 eq $var2'\nelse\necho '$var1 not eq $var2'\nfi //else后面必须加fi\n \n\n       if list then\n           do something here\n       elif list then\n           do another thing here\n       else\n         do something else here\n       fi  \n```\n\neg: echo类似于print\n```shell\n例：myvar=“Hi there！”\n\n    echo $myvar\n\n    echo \"$myvar\"\n\n    echo ' $myvar'\n\n    echo \\$myvar\n\n将会输出如下：Hi there！\n\n              Hi there!\n\n              $myvar\n\n              $myvar\n```\n\n\n### 4. 用户和用户组的问题\n```shell\nuseradd user //添加用户，(-g 指定用户所在用户组)/home目录下会多一个user的目录，作为该用户的主目录\n\npasswd user //设置user的密码，会提示输入密码，密码不会显示在窗口中\n\ncd /etc >>> more passwd  ，这里面会显示所有的用户\nmore group ,显示用户组的信息\ngroupadd groupname //添加一个用户组\n\n//删除用户\nuserdel user //删除一个用户 \n还需要删除该用户的主目录(rm -rf user) \n\n重启机器，登录页面选择新用户即可完成用户切换\n\n或者使用 su testuser 切换到testuser身份\nexit就回到root用户的身份\n\n新用户登录时，默认的pwd是该用户的主目录\n```\n\n\n### 5. 文件权限的问题\nls命令执行显示的文件前一般带有一串信息\n第一位：\n- 代表文件\nl代表链接\nd代表目录\n\n后面九位划分为三块，可能的权限有这么几种\nr(read权限)w(写权限)-(无权限)x(执行权限)\n\n第一组代表所有者权限，第二组代表与所有者一个用户组的用户的权限，第三组代表其他用户的权限\n\n更改文件权限命令: chmod\n```shell\nchmod +x filename //加上可执行权限，所有用户都加上了\nchmod u+x filename //给当前用户加上可执行权限\n//其他命令不一一列举\n\nchmod 755 filename  \nchmod 777 filename //全部权限都有了，其实上面的9位就是这三位数每一位的二进制拼起来的\n755 就是 111101101,也就对应上面的权限九位字母\n\n\n```\n\n更改文件所有者\n\n- > chown username filename\n\n\n### 6. 管道\n将一个命令的输出传送给另一个命令，作为另一个命令的输入\neg: 中间那条竖线叫做管道连接符\n```shell\n$ cat /etc/passwd | grep usernametofind\n$ ls -l | grep \"^d\"\n$ ls -l * | grep \"^-\" | wc -|   //\"^-\"表示不列出目录或链接，只展示目录；wc是数行数\n$ ls -l | grep \"^d\" //只列出目录\n```\n\n\n### 7. 磁盘分区的问题\n\n### 8. 配置sql,Tomcat\n\n\n## ref \n鸟哥\n","slug":"2017-01-07-Linux-Basic-Commands","published":1,"updated":"2017-01-08T13:41:07.420Z","_id":"cixohzzmt000r7gvrnnd97tv1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>把经常会用到的一些linux基本命令罗列在这里，这其中配上一些自己的图，希望作为今后工作中的参考。<br><br><img src=\"http://odzl05jxx.bkt.clouddn.com/fork_you_git.jpg\" alt=\"\"><br> <a id=\"more\"></a></p>\n<h3 id=\"1-文件操作常用命令\"><a href=\"#1-文件操作常用命令\" class=\"headerlink\" title=\"1. 文件操作常用命令\"></a>1. 文件操作常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- &gt; cd //进入目录</div><div class=\"line\">- &gt; cd /  返回根目录</div><div class=\"line\">- &gt; pwd // 显示当前目录</div><div class=\"line\">- &gt; ls // 显示当前目录下内容 </div><div class=\"line\"></div><div class=\"line\">- &gt; mkdir //新建目录</div><div class=\"line\">- &gt; rmdir //删除目录,如果目录不为空，</div><div class=\"line\">- &gt;使用 rm -r //递归删除</div><div class=\"line\">- &gt; rm -rf //强制删除</div><div class=\"line\"></div><div class=\"line\">- &gt; touch filename //创建文件，后缀在linux下没意义</div></pre></td></tr></table></figure>\n<p>复制粘贴：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- &gt; cp a b //把a复制一份，命名为b</div><div class=\"line\"></div><div class=\"line\">- &gt; cp d1 d2 // 这样是不行的，复制目录需要加上-r ，即</div><div class=\"line\">- &gt; cp -r d1 d2</div><div class=\"line\"></div><div class=\"line\">移动(左边是被移动的文件或目录，右边是目标路径)： </div><div class=\"line\"></div><div class=\"line\">- &gt; mv d1 /  把d1移动到相对路径，也就是根目录下</div><div class=\"line\">- &gt; mv d1 ../把d1往上移动一层</div><div class=\"line\">- &gt; mv d1 ../../</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-Vi文本编辑器\"><a href=\"#2-Vi文本编辑器\" class=\"headerlink\" title=\"2. Vi文本编辑器\"></a>2. Vi文本编辑器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- &gt; vi 3.txt // 如果有则编辑，没有则直接创建</div><div class=\"line\"></div><div class=\"line\">Vi分为命令模式和编辑模式，一进来是命令模式，输入&apos;a&apos;进入编辑模式</div><div class=\"line\">切换回命令模式按&apos;esc&apos; </div><div class=\"line\">命令模式下 :w 表示存盘</div><div class=\"line\">- :q 退出</div><div class=\"line\">- :!q 不保存退出</div><div class=\"line\">- :wq 保存并退出</div></pre></td></tr></table></figure>\n<p>在编辑模式下,输入 ‘dd’删除一行 ，输入’dw’删除一个词<br>输入’o’插入一行。。。。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- &gt; more filename//查看文件内容</div><div class=\"line\"></div><div class=\"line\">- &gt; cat filename //正序查看文件内容</div><div class=\"line\"></div><div class=\"line\">- &gt; tac filename //逆序查看文件内容</div><div class=\"line\"></div><div class=\"line\">- &gt; head - 3 filename //只查看文件前面三行</div><div class=\"line\">- &gt; tail - 3 filename //只查看倒数后三行</div></pre></td></tr></table></figure></p>\n<p>更多命令如 find 、 whereis 、 Li(Link)<br>查找：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">find / -name filename  //在根目录下查找文件</div><div class=\"line\">find /etc -name filename //在etc目录下查找文件</div><div class=\"line\"></div><div class=\"line\">grep stringtofind filename //在指定的文本文件中查找指定的字符串</div><div class=\"line\"></div><div class=\"line\">whereis ls //查看ls命令所执行的是哪个文件及其位置(查看系统文件所在路径)</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-linux下shell脚本语句的语法\"><a href=\"#3-linux下shell脚本语句的语法\" class=\"headerlink\" title=\"3. linux下shell脚本语句的语法\"></a>3. linux下shell脚本语句的语法</h3><p>linux大小写敏感<br>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">myPath=&quot;/var/log/httpd/&quot;</div><div class=\"line\">myFile=&quot;/var /log/httpd/access.log&quot;</div><div class=\"line\">#这里的-x 参数判断$myPath是否存在并且是否具有可执行权限</div><div class=\"line\">if [ ! -x &quot;$myPath&quot;]; then</div><div class=\"line\">mkdir &quot;$myPath&quot;</div><div class=\"line\">fi</div><div class=\"line\">#这里的-d 参数判断$myPath是否存在</div><div class=\"line\">if [ ! -d &quot;$myPath&quot;]; then</div><div class=\"line\">mkdir &quot;$myPath&quot;</div><div class=\"line\">fi</div><div class=\"line\">#这里的-f参数判断$myFile是否存在</div><div class=\"line\">if [ ! -f &quot;$myFile&quot; ]; then</div><div class=\"line\">touch &quot;$myFile&quot;</div><div class=\"line\">fi</div><div class=\"line\">#其他参数还有-n,-n是判断一个变量是否是否有值</div><div class=\"line\">if [ ! -n &quot;$myVar&quot; ]; then</div><div class=\"line\">echo &quot;$myVar is empty&quot;</div><div class=\"line\">exit 0</div><div class=\"line\">fi</div><div class=\"line\">#两个变量判断是否相等</div><div class=\"line\">if [ &quot;$var1&quot; == &quot;$var2&quot; ]; then  //if 后面必须加then</div><div class=\"line\">echo &apos;$var1 eq $var2&apos;</div><div class=\"line\">else</div><div class=\"line\">echo &apos;$var1 not eq $var2&apos;</div><div class=\"line\">fi //else后面必须加fi</div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">       if list then</div><div class=\"line\">           do something here</div><div class=\"line\">       elif list then</div><div class=\"line\">           do another thing here</div><div class=\"line\">       else</div><div class=\"line\">         do something else here</div><div class=\"line\">       fi</div></pre></td></tr></table></figure></p>\n<p>eg: echo类似于print<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">例：myvar=“Hi there！”</div><div class=\"line\"></div><div class=\"line\">    echo $myvar</div><div class=\"line\"></div><div class=\"line\">    echo &quot;$myvar&quot;</div><div class=\"line\"></div><div class=\"line\">    echo &apos; $myvar&apos;</div><div class=\"line\"></div><div class=\"line\">    echo \\$myvar</div><div class=\"line\"></div><div class=\"line\">将会输出如下：Hi there！</div><div class=\"line\"></div><div class=\"line\">              Hi there!</div><div class=\"line\"></div><div class=\"line\">              $myvar</div><div class=\"line\"></div><div class=\"line\">              $myvar</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-用户和用户组的问题\"><a href=\"#4-用户和用户组的问题\" class=\"headerlink\" title=\"4. 用户和用户组的问题\"></a>4. 用户和用户组的问题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd user //添加用户，(-g 指定用户所在用户组)/home目录下会多一个user的目录，作为该用户的主目录</div><div class=\"line\"></div><div class=\"line\">passwd user //设置user的密码，会提示输入密码，密码不会显示在窗口中</div><div class=\"line\"></div><div class=\"line\">cd /etc &gt;&gt;&gt; more passwd  ，这里面会显示所有的用户</div><div class=\"line\">more group ,显示用户组的信息</div><div class=\"line\">groupadd groupname //添加一个用户组</div><div class=\"line\"></div><div class=\"line\">//删除用户</div><div class=\"line\">userdel user //删除一个用户 </div><div class=\"line\">还需要删除该用户的主目录(rm -rf user) </div><div class=\"line\"></div><div class=\"line\">重启机器，登录页面选择新用户即可完成用户切换</div><div class=\"line\"></div><div class=\"line\">或者使用 su testuser 切换到testuser身份</div><div class=\"line\">exit就回到root用户的身份</div><div class=\"line\"></div><div class=\"line\">新用户登录时，默认的pwd是该用户的主目录</div></pre></td></tr></table></figure>\n<h3 id=\"5-文件权限的问题\"><a href=\"#5-文件权限的问题\" class=\"headerlink\" title=\"5. 文件权限的问题\"></a>5. 文件权限的问题</h3><p>ls命令执行显示的文件前一般带有一串信息<br>第一位：</p>\n<ul>\n<li>代表文件<br>l代表链接<br>d代表目录</li>\n</ul>\n<p>后面九位划分为三块，可能的权限有这么几种<br>r(read权限)w(写权限)-(无权限)x(执行权限)</p>\n<p>第一组代表所有者权限，第二组代表与所有者一个用户组的用户的权限，第三组代表其他用户的权限</p>\n<p>更改文件权限命令: chmod<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x filename //加上可执行权限，所有用户都加上了</div><div class=\"line\">chmod u+x filename //给当前用户加上可执行权限</div><div class=\"line\">//其他命令不一一列举</div><div class=\"line\"></div><div class=\"line\">chmod 755 filename  </div><div class=\"line\">chmod 777 filename //全部权限都有了，其实上面的9位就是这三位数每一位的二进制拼起来的</div><div class=\"line\">755 就是 111101101,也就对应上面的权限九位字母</div></pre></td></tr></table></figure></p>\n<p>更改文件所有者</p>\n<ul>\n<li><blockquote>\n<p>chown username filename</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"6-管道\"><a href=\"#6-管道\" class=\"headerlink\" title=\"6. 管道\"></a>6. 管道</h3><p>将一个命令的输出传送给另一个命令，作为另一个命令的输入<br>eg: 中间那条竖线叫做管道连接符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat /etc/passwd | grep usernametofind</div><div class=\"line\">$ ls -l | grep &quot;^d&quot;</div><div class=\"line\">$ ls -l * | grep &quot;^-&quot; | wc -|   //&quot;^-&quot;表示不列出目录或链接，只展示目录；wc是数行数</div><div class=\"line\">$ ls -l | grep &quot;^d&quot; //只列出目录</div></pre></td></tr></table></figure></p>\n<h3 id=\"7-磁盘分区的问题\"><a href=\"#7-磁盘分区的问题\" class=\"headerlink\" title=\"7. 磁盘分区的问题\"></a>7. 磁盘分区的问题</h3><h3 id=\"8-配置sql-Tomcat\"><a href=\"#8-配置sql-Tomcat\" class=\"headerlink\" title=\"8. 配置sql,Tomcat\"></a>8. 配置sql,Tomcat</h3><h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><p>鸟哥</p>\n","excerpt":"<p>把经常会用到的一些linux基本命令罗列在这里，这其中配上一些自己的图，希望作为今后工作中的参考。</br><br><img src=\"http://odzl05jxx.bkt.clouddn.com/fork_you_git.jpg\" alt=\"\"><br>","more":"</p>\n<h3 id=\"1-文件操作常用命令\"><a href=\"#1-文件操作常用命令\" class=\"headerlink\" title=\"1. 文件操作常用命令\"></a>1. 文件操作常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- &gt; cd //进入目录</div><div class=\"line\">- &gt; cd /  返回根目录</div><div class=\"line\">- &gt; pwd // 显示当前目录</div><div class=\"line\">- &gt; ls // 显示当前目录下内容 </div><div class=\"line\"></div><div class=\"line\">- &gt; mkdir //新建目录</div><div class=\"line\">- &gt; rmdir //删除目录,如果目录不为空，</div><div class=\"line\">- &gt;使用 rm -r //递归删除</div><div class=\"line\">- &gt; rm -rf //强制删除</div><div class=\"line\"></div><div class=\"line\">- &gt; touch filename //创建文件，后缀在linux下没意义</div></pre></td></tr></table></figure>\n<p>复制粘贴：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">- &gt; cp a b //把a复制一份，命名为b</div><div class=\"line\"></div><div class=\"line\">- &gt; cp d1 d2 // 这样是不行的，复制目录需要加上-r ，即</div><div class=\"line\">- &gt; cp -r d1 d2</div><div class=\"line\"></div><div class=\"line\">移动(左边是被移动的文件或目录，右边是目标路径)： </div><div class=\"line\"></div><div class=\"line\">- &gt; mv d1 /  把d1移动到相对路径，也就是根目录下</div><div class=\"line\">- &gt; mv d1 ../把d1往上移动一层</div><div class=\"line\">- &gt; mv d1 ../../</div></pre></td></tr></table></figure></p>\n<h3 id=\"2-Vi文本编辑器\"><a href=\"#2-Vi文本编辑器\" class=\"headerlink\" title=\"2. Vi文本编辑器\"></a>2. Vi文本编辑器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- &gt; vi 3.txt // 如果有则编辑，没有则直接创建</div><div class=\"line\"></div><div class=\"line\">Vi分为命令模式和编辑模式，一进来是命令模式，输入&apos;a&apos;进入编辑模式</div><div class=\"line\">切换回命令模式按&apos;esc&apos; </div><div class=\"line\">命令模式下 :w 表示存盘</div><div class=\"line\">- :q 退出</div><div class=\"line\">- :!q 不保存退出</div><div class=\"line\">- :wq 保存并退出</div></pre></td></tr></table></figure>\n<p>在编辑模式下,输入 ‘dd’删除一行 ，输入’dw’删除一个词<br>输入’o’插入一行。。。。。。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">- &gt; more filename//查看文件内容</div><div class=\"line\"></div><div class=\"line\">- &gt; cat filename //正序查看文件内容</div><div class=\"line\"></div><div class=\"line\">- &gt; tac filename //逆序查看文件内容</div><div class=\"line\"></div><div class=\"line\">- &gt; head - 3 filename //只查看文件前面三行</div><div class=\"line\">- &gt; tail - 3 filename //只查看倒数后三行</div></pre></td></tr></table></figure></p>\n<p>更多命令如 find 、 whereis 、 Li(Link)<br>查找：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">find / -name filename  //在根目录下查找文件</div><div class=\"line\">find /etc -name filename //在etc目录下查找文件</div><div class=\"line\"></div><div class=\"line\">grep stringtofind filename //在指定的文本文件中查找指定的字符串</div><div class=\"line\"></div><div class=\"line\">whereis ls //查看ls命令所执行的是哪个文件及其位置(查看系统文件所在路径)</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-linux下shell脚本语句的语法\"><a href=\"#3-linux下shell脚本语句的语法\" class=\"headerlink\" title=\"3. linux下shell脚本语句的语法\"></a>3. linux下shell脚本语句的语法</h3><p>linux大小写敏感<br>eg:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">myPath=&quot;/var/log/httpd/&quot;</div><div class=\"line\">myFile=&quot;/var /log/httpd/access.log&quot;</div><div class=\"line\">#这里的-x 参数判断$myPath是否存在并且是否具有可执行权限</div><div class=\"line\">if [ ! -x &quot;$myPath&quot;]; then</div><div class=\"line\">mkdir &quot;$myPath&quot;</div><div class=\"line\">fi</div><div class=\"line\">#这里的-d 参数判断$myPath是否存在</div><div class=\"line\">if [ ! -d &quot;$myPath&quot;]; then</div><div class=\"line\">mkdir &quot;$myPath&quot;</div><div class=\"line\">fi</div><div class=\"line\">#这里的-f参数判断$myFile是否存在</div><div class=\"line\">if [ ! -f &quot;$myFile&quot; ]; then</div><div class=\"line\">touch &quot;$myFile&quot;</div><div class=\"line\">fi</div><div class=\"line\">#其他参数还有-n,-n是判断一个变量是否是否有值</div><div class=\"line\">if [ ! -n &quot;$myVar&quot; ]; then</div><div class=\"line\">echo &quot;$myVar is empty&quot;</div><div class=\"line\">exit 0</div><div class=\"line\">fi</div><div class=\"line\">#两个变量判断是否相等</div><div class=\"line\">if [ &quot;$var1&quot; == &quot;$var2&quot; ]; then  //if 后面必须加then</div><div class=\"line\">echo &apos;$var1 eq $var2&apos;</div><div class=\"line\">else</div><div class=\"line\">echo &apos;$var1 not eq $var2&apos;</div><div class=\"line\">fi //else后面必须加fi</div><div class=\"line\"> </div><div class=\"line\"></div><div class=\"line\">       if list then</div><div class=\"line\">           do something here</div><div class=\"line\">       elif list then</div><div class=\"line\">           do another thing here</div><div class=\"line\">       else</div><div class=\"line\">         do something else here</div><div class=\"line\">       fi</div></pre></td></tr></table></figure></p>\n<p>eg: echo类似于print<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">例：myvar=“Hi there！”</div><div class=\"line\"></div><div class=\"line\">    echo $myvar</div><div class=\"line\"></div><div class=\"line\">    echo &quot;$myvar&quot;</div><div class=\"line\"></div><div class=\"line\">    echo &apos; $myvar&apos;</div><div class=\"line\"></div><div class=\"line\">    echo \\$myvar</div><div class=\"line\"></div><div class=\"line\">将会输出如下：Hi there！</div><div class=\"line\"></div><div class=\"line\">              Hi there!</div><div class=\"line\"></div><div class=\"line\">              $myvar</div><div class=\"line\"></div><div class=\"line\">              $myvar</div></pre></td></tr></table></figure></p>\n<h3 id=\"4-用户和用户组的问题\"><a href=\"#4-用户和用户组的问题\" class=\"headerlink\" title=\"4. 用户和用户组的问题\"></a>4. 用户和用户组的问题</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">useradd user //添加用户，(-g 指定用户所在用户组)/home目录下会多一个user的目录，作为该用户的主目录</div><div class=\"line\"></div><div class=\"line\">passwd user //设置user的密码，会提示输入密码，密码不会显示在窗口中</div><div class=\"line\"></div><div class=\"line\">cd /etc &gt;&gt;&gt; more passwd  ，这里面会显示所有的用户</div><div class=\"line\">more group ,显示用户组的信息</div><div class=\"line\">groupadd groupname //添加一个用户组</div><div class=\"line\"></div><div class=\"line\">//删除用户</div><div class=\"line\">userdel user //删除一个用户 </div><div class=\"line\">还需要删除该用户的主目录(rm -rf user) </div><div class=\"line\"></div><div class=\"line\">重启机器，登录页面选择新用户即可完成用户切换</div><div class=\"line\"></div><div class=\"line\">或者使用 su testuser 切换到testuser身份</div><div class=\"line\">exit就回到root用户的身份</div><div class=\"line\"></div><div class=\"line\">新用户登录时，默认的pwd是该用户的主目录</div></pre></td></tr></table></figure>\n<h3 id=\"5-文件权限的问题\"><a href=\"#5-文件权限的问题\" class=\"headerlink\" title=\"5. 文件权限的问题\"></a>5. 文件权限的问题</h3><p>ls命令执行显示的文件前一般带有一串信息<br>第一位：</p>\n<ul>\n<li>代表文件<br>l代表链接<br>d代表目录</li>\n</ul>\n<p>后面九位划分为三块，可能的权限有这么几种<br>r(read权限)w(写权限)-(无权限)x(执行权限)</p>\n<p>第一组代表所有者权限，第二组代表与所有者一个用户组的用户的权限，第三组代表其他用户的权限</p>\n<p>更改文件权限命令: chmod<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x filename //加上可执行权限，所有用户都加上了</div><div class=\"line\">chmod u+x filename //给当前用户加上可执行权限</div><div class=\"line\">//其他命令不一一列举</div><div class=\"line\"></div><div class=\"line\">chmod 755 filename  </div><div class=\"line\">chmod 777 filename //全部权限都有了，其实上面的9位就是这三位数每一位的二进制拼起来的</div><div class=\"line\">755 就是 111101101,也就对应上面的权限九位字母</div></pre></td></tr></table></figure></p>\n<p>更改文件所有者</p>\n<ul>\n<li><blockquote>\n<p>chown username filename</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"6-管道\"><a href=\"#6-管道\" class=\"headerlink\" title=\"6. 管道\"></a>6. 管道</h3><p>将一个命令的输出传送给另一个命令，作为另一个命令的输入<br>eg: 中间那条竖线叫做管道连接符<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cat /etc/passwd | grep usernametofind</div><div class=\"line\">$ ls -l | grep &quot;^d&quot;</div><div class=\"line\">$ ls -l * | grep &quot;^-&quot; | wc -|   //&quot;^-&quot;表示不列出目录或链接，只展示目录；wc是数行数</div><div class=\"line\">$ ls -l | grep &quot;^d&quot; //只列出目录</div></pre></td></tr></table></figure></p>\n<h3 id=\"7-磁盘分区的问题\"><a href=\"#7-磁盘分区的问题\" class=\"headerlink\" title=\"7. 磁盘分区的问题\"></a>7. 磁盘分区的问题</h3><h3 id=\"8-配置sql-Tomcat\"><a href=\"#8-配置sql-Tomcat\" class=\"headerlink\" title=\"8. 配置sql,Tomcat\"></a>8. 配置sql,Tomcat</h3><h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><p>鸟哥</p>"},{"title":"activity transition pre and post lollipop","date":"2016-09-27T06:53:25.000Z","_content":"\nLollipop开始引入了新的Activity Transition动画效果，比起常用的overridePendingTransaction() 效果要强大许多\n\n测试环境\nsupportLibVersion = \"24.2.1\"\ngradle plugin version : \"classpath 'com.android.tools.build:gradle:2.2.0'\"\ngradle version : 3.1\ncompileSdkVersion 24\nbuildToolsVersion \"24.0.2\"\n\n<!--more-->\n\n- 常规用法:\n\nA activity >>>> B activity\n\nA activity中:\n\n```java\n intent = new Intent(getActivity(), PictureDetailSubActivity2.class);\n                intent.putExtra(EXTRA_IMAGE_URL, R.drawable.b2);\n                intent.putExtra(EXTRA_IMAGE_TITLE, \"使用ActivityCompat动画\");\n                ActivityOptionsCompat optionsCompat = ActivityOptionsCompat.\n                        makeSceneTransitionAnimation(getActivity(), view, TRANSIT_PIC);\n                try {\n                    ActivityCompat.startActivity(getActivity(), intent, optionsCompat.toBundle()); //据说部分三星手机上会失效\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    ToastUtils.showTextShort(getActivity(), \"ActivityCompat出错！！\");\n                    startActivity(intent);\n                }\n```\n\nPair这个class是v4包里的一个Util类，用来装载一组(pair)对象，支持泛型，很好用。由于都是v4包里的方法，省去了做API版本判断，在API 16以下，就只会调用普通的startActivity方法。上面加了try catch是避免部分手机上出现问题\n\nB activity中onCreate调用\n\n```java\n ViewCompat.setTransitionName(binding.imageDetail, TRANSIT_PIC);\n```\n\n就可实现普通的转场动画。\n\n- 兼容方式(将连续的Transition带到API16以下)\n\n  主要的原理: 在A activity中记录要带到B activity中的View的当前位置，在B activity中添加onPredrawListener(measure完毕，layout完毕，即将开始Draw的时候)，此时开始进行动画，将SharedView从原位置animate到B Activty中的位置\n\n  原理及详细代码在这里:\n\n   [Dev Bytes Activity Animations Youtube](https://www.youtube.com/watch?v=CPxkoe2MraA) 我照着写了一些关于Activity Transition的模板，[gitHub](https://github.com/Haldir65/CustomActivityTransition) 基本能实现兼容到API 16以下的效果\n\n- 最后是这几天遇到的天坑\n\n```java\n@Override\npublic void onCreate(Bundle savedInstanceState, PersistableBundle persistentState) {\n    super.onCreate(savedInstanceState, persistentState);\n}\n```\n\n这样的Activity绝对会出ClassNotFoundException , 而且并不会主动出现在logcat中\n\n- overridePendingTransaction要在startActivity以及finish之后才能调用\n\n\n\ngitHub上有一个比较好的[兼容库](https://github.com/takahirom/PreLollipopTransition)，大致原理也是使用onPreDrawListener\n\n\n\n","source":"_posts/activity-transition-pre-and-post-lollipop.md","raw":"---\ntitle: activity transition pre and post lollipop\ndate: 2016-09-27 14:53:25\ncategories: [技术]\ntags: [transition,android]\n---\n\nLollipop开始引入了新的Activity Transition动画效果，比起常用的overridePendingTransaction() 效果要强大许多\n\n测试环境\nsupportLibVersion = \"24.2.1\"\ngradle plugin version : \"classpath 'com.android.tools.build:gradle:2.2.0'\"\ngradle version : 3.1\ncompileSdkVersion 24\nbuildToolsVersion \"24.0.2\"\n\n<!--more-->\n\n- 常规用法:\n\nA activity >>>> B activity\n\nA activity中:\n\n```java\n intent = new Intent(getActivity(), PictureDetailSubActivity2.class);\n                intent.putExtra(EXTRA_IMAGE_URL, R.drawable.b2);\n                intent.putExtra(EXTRA_IMAGE_TITLE, \"使用ActivityCompat动画\");\n                ActivityOptionsCompat optionsCompat = ActivityOptionsCompat.\n                        makeSceneTransitionAnimation(getActivity(), view, TRANSIT_PIC);\n                try {\n                    ActivityCompat.startActivity(getActivity(), intent, optionsCompat.toBundle()); //据说部分三星手机上会失效\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    ToastUtils.showTextShort(getActivity(), \"ActivityCompat出错！！\");\n                    startActivity(intent);\n                }\n```\n\nPair这个class是v4包里的一个Util类，用来装载一组(pair)对象，支持泛型，很好用。由于都是v4包里的方法，省去了做API版本判断，在API 16以下，就只会调用普通的startActivity方法。上面加了try catch是避免部分手机上出现问题\n\nB activity中onCreate调用\n\n```java\n ViewCompat.setTransitionName(binding.imageDetail, TRANSIT_PIC);\n```\n\n就可实现普通的转场动画。\n\n- 兼容方式(将连续的Transition带到API16以下)\n\n  主要的原理: 在A activity中记录要带到B activity中的View的当前位置，在B activity中添加onPredrawListener(measure完毕，layout完毕，即将开始Draw的时候)，此时开始进行动画，将SharedView从原位置animate到B Activty中的位置\n\n  原理及详细代码在这里:\n\n   [Dev Bytes Activity Animations Youtube](https://www.youtube.com/watch?v=CPxkoe2MraA) 我照着写了一些关于Activity Transition的模板，[gitHub](https://github.com/Haldir65/CustomActivityTransition) 基本能实现兼容到API 16以下的效果\n\n- 最后是这几天遇到的天坑\n\n```java\n@Override\npublic void onCreate(Bundle savedInstanceState, PersistableBundle persistentState) {\n    super.onCreate(savedInstanceState, persistentState);\n}\n```\n\n这样的Activity绝对会出ClassNotFoundException , 而且并不会主动出现在logcat中\n\n- overridePendingTransaction要在startActivity以及finish之后才能调用\n\n\n\ngitHub上有一个比较好的[兼容库](https://github.com/takahirom/PreLollipopTransition)，大致原理也是使用onPreDrawListener\n\n\n\n","slug":"activity-transition-pre-and-post-lollipop","published":1,"updated":"2016-10-06T09:04:53.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzmt000s7gvrx9bwe3ps","content":"<p>Lollipop开始引入了新的Activity Transition动画效果，比起常用的overridePendingTransaction() 效果要强大许多</p>\n<p>测试环境<br>supportLibVersion = “24.2.1”<br>gradle plugin version : “classpath ‘com.android.tools.build:gradle:2.2.0’”<br>gradle version : 3.1<br>compileSdkVersion 24<br>buildToolsVersion “24.0.2”</p>\n<a id=\"more\"></a>\n<ul>\n<li>常规用法:</li>\n</ul>\n<p>A activity &gt;&gt;&gt;&gt; B activity</p>\n<p>A activity中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent = <span class=\"keyword\">new</span> Intent(getActivity(), PictureDetailSubActivity2.class);</div><div class=\"line\">               intent.putExtra(EXTRA_IMAGE_URL, R.drawable.b2);</div><div class=\"line\">               intent.putExtra(EXTRA_IMAGE_TITLE, <span class=\"string\">\"使用ActivityCompat动画\"</span>);</div><div class=\"line\">               ActivityOptionsCompat optionsCompat = ActivityOptionsCompat.</div><div class=\"line\">                       makeSceneTransitionAnimation(getActivity(), view, TRANSIT_PIC);</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   ActivityCompat.startActivity(getActivity(), intent, optionsCompat.toBundle()); <span class=\"comment\">//据说部分三星手机上会失效</span></div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">                   ToastUtils.showTextShort(getActivity(), <span class=\"string\">\"ActivityCompat出错！！\"</span>);</div><div class=\"line\">                   startActivity(intent);</div><div class=\"line\">               &#125;</div></pre></td></tr></table></figure>\n<p>Pair这个class是v4包里的一个Util类，用来装载一组(pair)对象，支持泛型，很好用。由于都是v4包里的方法，省去了做API版本判断，在API 16以下，就只会调用普通的startActivity方法。上面加了try catch是避免部分手机上出现问题</p>\n<p>B activity中onCreate调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewCompat.setTransitionName(binding.imageDetail, TRANSIT_PIC);</div></pre></td></tr></table></figure>\n<p>就可实现普通的转场动画。</p>\n<ul>\n<li><p>兼容方式(将连续的Transition带到API16以下)</p>\n<p>主要的原理: 在A activity中记录要带到B activity中的View的当前位置，在B activity中添加onPredrawListener(measure完毕，layout完毕，即将开始Draw的时候)，此时开始进行动画，将SharedView从原位置animate到B Activty中的位置</p>\n<p>原理及详细代码在这里:</p>\n<p> <a href=\"https://www.youtube.com/watch?v=CPxkoe2MraA\" target=\"_blank\" rel=\"external\">Dev Bytes Activity Animations Youtube</a> 我照着写了一些关于Activity Transition的模板，<a href=\"https://github.com/Haldir65/CustomActivityTransition\" target=\"_blank\" rel=\"external\">gitHub</a> 基本能实现兼容到API 16以下的效果</p>\n</li>\n<li><p>最后是这几天遇到的天坑</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState, PersistableBundle persistentState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState, persistentState);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样的Activity绝对会出ClassNotFoundException , 而且并不会主动出现在logcat中</p>\n<ul>\n<li>overridePendingTransaction要在startActivity以及finish之后才能调用</li>\n</ul>\n<p>gitHub上有一个比较好的<a href=\"https://github.com/takahirom/PreLollipopTransition\" target=\"_blank\" rel=\"external\">兼容库</a>，大致原理也是使用onPreDrawListener</p>\n","excerpt":"<p>Lollipop开始引入了新的Activity Transition动画效果，比起常用的overridePendingTransaction() 效果要强大许多</p>\n<p>测试环境<br>supportLibVersion = “24.2.1”<br>gradle plugin version : “classpath ‘com.android.tools.build:gradle:2.2.0’”<br>gradle version : 3.1<br>compileSdkVersion 24<br>buildToolsVersion “24.0.2”</p>","more":"<ul>\n<li>常规用法:</li>\n</ul>\n<p>A activity &gt;&gt;&gt;&gt; B activity</p>\n<p>A activity中:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent = <span class=\"keyword\">new</span> Intent(getActivity(), PictureDetailSubActivity2.class);</div><div class=\"line\">               intent.putExtra(EXTRA_IMAGE_URL, R.drawable.b2);</div><div class=\"line\">               intent.putExtra(EXTRA_IMAGE_TITLE, <span class=\"string\">\"使用ActivityCompat动画\"</span>);</div><div class=\"line\">               ActivityOptionsCompat optionsCompat = ActivityOptionsCompat.</div><div class=\"line\">                       makeSceneTransitionAnimation(getActivity(), view, TRANSIT_PIC);</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   ActivityCompat.startActivity(getActivity(), intent, optionsCompat.toBundle()); <span class=\"comment\">//据说部分三星手机上会失效</span></div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">                   e.printStackTrace();</div><div class=\"line\">                   ToastUtils.showTextShort(getActivity(), <span class=\"string\">\"ActivityCompat出错！！\"</span>);</div><div class=\"line\">                   startActivity(intent);</div><div class=\"line\">               &#125;</div></pre></td></tr></table></figure>\n<p>Pair这个class是v4包里的一个Util类，用来装载一组(pair)对象，支持泛型，很好用。由于都是v4包里的方法，省去了做API版本判断，在API 16以下，就只会调用普通的startActivity方法。上面加了try catch是避免部分手机上出现问题</p>\n<p>B activity中onCreate调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ViewCompat.setTransitionName(binding.imageDetail, TRANSIT_PIC);</div></pre></td></tr></table></figure>\n<p>就可实现普通的转场动画。</p>\n<ul>\n<li><p>兼容方式(将连续的Transition带到API16以下)</p>\n<p>主要的原理: 在A activity中记录要带到B activity中的View的当前位置，在B activity中添加onPredrawListener(measure完毕，layout完毕，即将开始Draw的时候)，此时开始进行动画，将SharedView从原位置animate到B Activty中的位置</p>\n<p>原理及详细代码在这里:</p>\n<p> <a href=\"https://www.youtube.com/watch?v=CPxkoe2MraA\">Dev Bytes Activity Animations Youtube</a> 我照着写了一些关于Activity Transition的模板，<a href=\"https://github.com/Haldir65/CustomActivityTransition\">gitHub</a> 基本能实现兼容到API 16以下的效果</p>\n</li>\n<li><p>最后是这几天遇到的天坑</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState, PersistableBundle persistentState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState, persistentState);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样的Activity绝对会出ClassNotFoundException , 而且并不会主动出现在logcat中</p>\n<ul>\n<li>overridePendingTransaction要在startActivity以及finish之后才能调用</li>\n</ul>\n<p>gitHub上有一个比较好的<a href=\"https://github.com/takahirom/PreLollipopTransition\">兼容库</a>，大致原理也是使用onPreDrawListener</p>"},{"title":"android 7.0一些新特性介绍及适配方案","date":"2016-10-07T19:02:26.000Z","_content":"\nGoogle I/O 2016上的[What's new in Android](https://www.youtube.com/watch?v=B08iLAtS3AQ)介绍的比较全面，MultiWindow、Notification、ConstraintLayout等都比较简单。这里拎出来开发者不得不注意的几点来介绍。\n<!--more-->\n\n### 1. BackGround Optimization\n\n~~CONNECTIVITY_CHANGE~~(很多应用喜欢在Manifest里注册这个BroadcastReceiver，导致网络变化时，一大堆应用都被唤醒，而ram中无法同时存在这么多process，系统不得不kill old process，由此导致memory thrashing)\n\n同时被移除的还有~~NEW_PICTURE~~,~~NEW_VIDEO~~.\n\n具体来说: 对于**targeting N**的应用，在manifest文件中声明 static broadcastReceiver，监听~~CONNECTIVITY_CHANGE~~将不会唤醒应用。如果应用正在运行，使用context.registerReceiver，将仍能够接受到broadcast。但不会被唤醒。\n\n解决方案: 使用JobScheduler或firebase jobDispatcher。\n举个例子:\n```java\n  public static final int MY_BACKGROUND_JOB = 0;\n    public static void scheduleJob(Context context){\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            JobScheduler js =\n                    (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);\n            JobInfo job = new JobInfo.Builder(\n                    MY_BACKGROUND_JOB,\n                    new ComponentName(context,MyJobService.class)).\n                    setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED).\n                    setRequiresCharging(true).\n                    build();\n            js.schedule(job);\n        }\n      \n    }\n```\n\n\n对于~~NEW_PICTURE~~,~~NEW_VIDEO~~.\n\n所有在7.0 Nuget以上设备运行的应用(无论是否 target N) 都不会收到这些broadcast。简单来说，fully deprecated  !!!\n\n解决方案：使用JobScheduler(可以监听contentProvider change)\n~~NEW_PICTURE~~的处理(这段代码只在API24以上存在，所以加了版本判断)\n```java\n    public static void scheduleJob(Context context){\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            JobScheduler js =\n                    context.getSystemService(JobScheduler.class);\n            JobInfo.Builder builder = new JobInfo.Builder(\n                    R.id.schedule_photo_jobs,\n                    new ComponentName(context,PhotoContentJob.class));\n\n            builder.addTriggerContentUri(\n                    new JobInfo.TriggerContentUri(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\n                            JobInfo.TriggerContentUri.FLAG_NOTIFY_FOR_DESCENDANTS)\n            );\n            js.schedule(builder.build());\n        }\n    }\n```\n参考[youtube上谷歌员工的演讲](https://www.youtube.com/watch?v=3ZX0CfVfVP8)\n\n### 2. 文件系统的权限更改(FileProvider)\n\n File storage permission change \n 简单来说就是Uri.fromFile(file://URI)不能再用了，需要使用FileProvider，这主要是为了6.0开始引进的permission model 考虑的，storage permission例如WRITE_EXTERNAL_STORAGE这种都已经属于Dangerous permission了。\n 一个常见的场景就是调用系统相机拍照，给Intent设置一个uri，在7.0上直接用Uri.FromFile会崩\n 需要通过FileProvider提供Uri,写了一个[Demo](https://github.com/Haldir65/FileProviderDmo)，使用FileProvider传递文件给另一个App。\n 另一个需要注意的就是DownloadManager访问COLUMN_LOCAL_FILENAME会报错，这个不常见。\n\n\n\n\n\n## Reference\n\n1. [Docs](https://developer.android.com/topic/performance/background-optimization.html?utm_campaign=adp_series__100616&utm_source=anddev&utm_medium=yt-desc)\n2. [youtube](https://www.youtube.com/watch?v=vBjTXKpaFj8)\n3. [Andrioid 7.0适配心得](http://gold.xitu.io/entry/57ff7e14a0bb9f005860c805)\n4. [Android 7.0 Behavior Changes](https://developer.android.com/about/versions/nougat/android-7.0-changes.html)","source":"_posts/android-7-0-new-features.md","raw":"---\ntitle: android 7.0一些新特性介绍及适配方案\ndate: 2016-10-08 03:02:26\ntags: android 7\n---\n\nGoogle I/O 2016上的[What's new in Android](https://www.youtube.com/watch?v=B08iLAtS3AQ)介绍的比较全面，MultiWindow、Notification、ConstraintLayout等都比较简单。这里拎出来开发者不得不注意的几点来介绍。\n<!--more-->\n\n### 1. BackGround Optimization\n\n~~CONNECTIVITY_CHANGE~~(很多应用喜欢在Manifest里注册这个BroadcastReceiver，导致网络变化时，一大堆应用都被唤醒，而ram中无法同时存在这么多process，系统不得不kill old process，由此导致memory thrashing)\n\n同时被移除的还有~~NEW_PICTURE~~,~~NEW_VIDEO~~.\n\n具体来说: 对于**targeting N**的应用，在manifest文件中声明 static broadcastReceiver，监听~~CONNECTIVITY_CHANGE~~将不会唤醒应用。如果应用正在运行，使用context.registerReceiver，将仍能够接受到broadcast。但不会被唤醒。\n\n解决方案: 使用JobScheduler或firebase jobDispatcher。\n举个例子:\n```java\n  public static final int MY_BACKGROUND_JOB = 0;\n    public static void scheduleJob(Context context){\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n            JobScheduler js =\n                    (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);\n            JobInfo job = new JobInfo.Builder(\n                    MY_BACKGROUND_JOB,\n                    new ComponentName(context,MyJobService.class)).\n                    setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED).\n                    setRequiresCharging(true).\n                    build();\n            js.schedule(job);\n        }\n      \n    }\n```\n\n\n对于~~NEW_PICTURE~~,~~NEW_VIDEO~~.\n\n所有在7.0 Nuget以上设备运行的应用(无论是否 target N) 都不会收到这些broadcast。简单来说，fully deprecated  !!!\n\n解决方案：使用JobScheduler(可以监听contentProvider change)\n~~NEW_PICTURE~~的处理(这段代码只在API24以上存在，所以加了版本判断)\n```java\n    public static void scheduleJob(Context context){\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            JobScheduler js =\n                    context.getSystemService(JobScheduler.class);\n            JobInfo.Builder builder = new JobInfo.Builder(\n                    R.id.schedule_photo_jobs,\n                    new ComponentName(context,PhotoContentJob.class));\n\n            builder.addTriggerContentUri(\n                    new JobInfo.TriggerContentUri(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\n                            JobInfo.TriggerContentUri.FLAG_NOTIFY_FOR_DESCENDANTS)\n            );\n            js.schedule(builder.build());\n        }\n    }\n```\n参考[youtube上谷歌员工的演讲](https://www.youtube.com/watch?v=3ZX0CfVfVP8)\n\n### 2. 文件系统的权限更改(FileProvider)\n\n File storage permission change \n 简单来说就是Uri.fromFile(file://URI)不能再用了，需要使用FileProvider，这主要是为了6.0开始引进的permission model 考虑的，storage permission例如WRITE_EXTERNAL_STORAGE这种都已经属于Dangerous permission了。\n 一个常见的场景就是调用系统相机拍照，给Intent设置一个uri，在7.0上直接用Uri.FromFile会崩\n 需要通过FileProvider提供Uri,写了一个[Demo](https://github.com/Haldir65/FileProviderDmo)，使用FileProvider传递文件给另一个App。\n 另一个需要注意的就是DownloadManager访问COLUMN_LOCAL_FILENAME会报错，这个不常见。\n\n\n\n\n\n## Reference\n\n1. [Docs](https://developer.android.com/topic/performance/background-optimization.html?utm_campaign=adp_series__100616&utm_source=anddev&utm_medium=yt-desc)\n2. [youtube](https://www.youtube.com/watch?v=vBjTXKpaFj8)\n3. [Andrioid 7.0适配心得](http://gold.xitu.io/entry/57ff7e14a0bb9f005860c805)\n4. [Android 7.0 Behavior Changes](https://developer.android.com/about/versions/nougat/android-7.0-changes.html)","slug":"android-7-0-new-features","published":1,"updated":"2016-11-02T10:45:16.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzmt000v7gvrw6bi85mk","content":"<p>Google I/O 2016上的<a href=\"https://www.youtube.com/watch?v=B08iLAtS3AQ\" target=\"_blank\" rel=\"external\">What’s new in Android</a>介绍的比较全面，MultiWindow、Notification、ConstraintLayout等都比较简单。这里拎出来开发者不得不注意的几点来介绍。<br><a id=\"more\"></a></p>\n<h3 id=\"1-BackGround-Optimization\"><a href=\"#1-BackGround-Optimization\" class=\"headerlink\" title=\"1. BackGround Optimization\"></a>1. BackGround Optimization</h3><p><del>CONNECTIVITY_CHANGE</del>(很多应用喜欢在Manifest里注册这个BroadcastReceiver，导致网络变化时，一大堆应用都被唤醒，而ram中无法同时存在这么多process，系统不得不kill old process，由此导致memory thrashing)</p>\n<p>同时被移除的还有<del>NEW_PICTURE</del>,<del>NEW_VIDEO</del>.</p>\n<p>具体来说: 对于<strong>targeting N</strong>的应用，在manifest文件中声明 static broadcastReceiver，监听<del>CONNECTIVITY_CHANGE</del>将不会唤醒应用。如果应用正在运行，使用context.registerReceiver，将仍能够接受到broadcast。但不会被唤醒。</p>\n<p>解决方案: 使用JobScheduler或firebase jobDispatcher。<br>举个例子:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MY_BACKGROUND_JOB = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleJob</span><span class=\"params\">(Context context)</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">          JobScheduler js =</div><div class=\"line\">                  (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);</div><div class=\"line\">          JobInfo job = <span class=\"keyword\">new</span> JobInfo.Builder(</div><div class=\"line\">                  MY_BACKGROUND_JOB,</div><div class=\"line\">                  <span class=\"keyword\">new</span> ComponentName(context,MyJobService.class)).</div><div class=\"line\">                  setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED).</div><div class=\"line\">                  setRequiresCharging(<span class=\"keyword\">true</span>).</div><div class=\"line\">                  build();</div><div class=\"line\">          js.schedule(job);</div><div class=\"line\">      &#125;</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>对于<del>NEW_PICTURE</del>,<del>NEW_VIDEO</del>.</p>\n<p>所有在7.0 Nuget以上设备运行的应用(无论是否 target N) 都不会收到这些broadcast。简单来说，fully deprecated  !!!</p>\n<p>解决方案：使用JobScheduler(可以监听contentProvider change)<br><del>NEW_PICTURE</del>的处理(这段代码只在API24以上存在，所以加了版本判断)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleJob</span><span class=\"params\">(Context context)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class=\"line\">        JobScheduler js =</div><div class=\"line\">                context.getSystemService(JobScheduler.class);</div><div class=\"line\">        JobInfo.Builder builder = <span class=\"keyword\">new</span> JobInfo.Builder(</div><div class=\"line\">                R.id.schedule_photo_jobs,</div><div class=\"line\">                <span class=\"keyword\">new</span> ComponentName(context,PhotoContentJob.class));</div><div class=\"line\"></div><div class=\"line\">        builder.addTriggerContentUri(</div><div class=\"line\">                <span class=\"keyword\">new</span> JobInfo.TriggerContentUri(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</div><div class=\"line\">                        JobInfo.TriggerContentUri.FLAG_NOTIFY_FOR_DESCENDANTS)</div><div class=\"line\">        );</div><div class=\"line\">        js.schedule(builder.build());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参考<a href=\"https://www.youtube.com/watch?v=3ZX0CfVfVP8\" target=\"_blank\" rel=\"external\">youtube上谷歌员工的演讲</a></p>\n<h3 id=\"2-文件系统的权限更改-FileProvider\"><a href=\"#2-文件系统的权限更改-FileProvider\" class=\"headerlink\" title=\"2. 文件系统的权限更改(FileProvider)\"></a>2. 文件系统的权限更改(FileProvider)</h3><p> File storage permission change<br> 简单来说就是Uri.fromFile(file://URI)不能再用了，需要使用FileProvider，这主要是为了6.0开始引进的permission model 考虑的，storage permission例如WRITE_EXTERNAL_STORAGE这种都已经属于Dangerous permission了。<br> 一个常见的场景就是调用系统相机拍照，给Intent设置一个uri，在7.0上直接用Uri.FromFile会崩<br> 需要通过FileProvider提供Uri,写了一个<a href=\"https://github.com/Haldir65/FileProviderDmo\" target=\"_blank\" rel=\"external\">Demo</a>，使用FileProvider传递文件给另一个App。<br> 另一个需要注意的就是DownloadManager访问COLUMN_LOCAL_FILENAME会报错，这个不常见。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://developer.android.com/topic/performance/background-optimization.html?utm_campaign=adp_series__100616&amp;utm_source=anddev&amp;utm_medium=yt-desc\" target=\"_blank\" rel=\"external\">Docs</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=vBjTXKpaFj8\" target=\"_blank\" rel=\"external\">youtube</a></li>\n<li><a href=\"http://gold.xitu.io/entry/57ff7e14a0bb9f005860c805\" target=\"_blank\" rel=\"external\">Andrioid 7.0适配心得</a></li>\n<li><a href=\"https://developer.android.com/about/versions/nougat/android-7.0-changes.html\" target=\"_blank\" rel=\"external\">Android 7.0 Behavior Changes</a></li>\n</ol>\n","excerpt":"<p>Google I/O 2016上的<a href=\"https://www.youtube.com/watch?v=B08iLAtS3AQ\">What’s new in Android</a>介绍的比较全面，MultiWindow、Notification、ConstraintLayout等都比较简单。这里拎出来开发者不得不注意的几点来介绍。<br>","more":"</p>\n<h3 id=\"1-BackGround-Optimization\"><a href=\"#1-BackGround-Optimization\" class=\"headerlink\" title=\"1. BackGround Optimization\"></a>1. BackGround Optimization</h3><p><del>CONNECTIVITY_CHANGE</del>(很多应用喜欢在Manifest里注册这个BroadcastReceiver，导致网络变化时，一大堆应用都被唤醒，而ram中无法同时存在这么多process，系统不得不kill old process，由此导致memory thrashing)</p>\n<p>同时被移除的还有<del>NEW_PICTURE</del>,<del>NEW_VIDEO</del>.</p>\n<p>具体来说: 对于<strong>targeting N</strong>的应用，在manifest文件中声明 static broadcastReceiver，监听<del>CONNECTIVITY_CHANGE</del>将不会唤醒应用。如果应用正在运行，使用context.registerReceiver，将仍能够接受到broadcast。但不会被唤醒。</p>\n<p>解决方案: 使用JobScheduler或firebase jobDispatcher。<br>举个例子:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MY_BACKGROUND_JOB = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleJob</span><span class=\"params\">(Context context)</span></span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class=\"line\">          JobScheduler js =</div><div class=\"line\">                  (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);</div><div class=\"line\">          JobInfo job = <span class=\"keyword\">new</span> JobInfo.Builder(</div><div class=\"line\">                  MY_BACKGROUND_JOB,</div><div class=\"line\">                  <span class=\"keyword\">new</span> ComponentName(context,MyJobService.class)).</div><div class=\"line\">                  setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED).</div><div class=\"line\">                  setRequiresCharging(<span class=\"keyword\">true</span>).</div><div class=\"line\">                  build();</div><div class=\"line\">          js.schedule(job);</div><div class=\"line\">      &#125;</div><div class=\"line\">    </div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>对于<del>NEW_PICTURE</del>,<del>NEW_VIDEO</del>.</p>\n<p>所有在7.0 Nuget以上设备运行的应用(无论是否 target N) 都不会收到这些broadcast。简单来说，fully deprecated  !!!</p>\n<p>解决方案：使用JobScheduler(可以监听contentProvider change)<br><del>NEW_PICTURE</del>的处理(这段代码只在API24以上存在，所以加了版本判断)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleJob</span><span class=\"params\">(Context context)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class=\"line\">        JobScheduler js =</div><div class=\"line\">                context.getSystemService(JobScheduler.class);</div><div class=\"line\">        JobInfo.Builder builder = <span class=\"keyword\">new</span> JobInfo.Builder(</div><div class=\"line\">                R.id.schedule_photo_jobs,</div><div class=\"line\">                <span class=\"keyword\">new</span> ComponentName(context,PhotoContentJob.class));</div><div class=\"line\"></div><div class=\"line\">        builder.addTriggerContentUri(</div><div class=\"line\">                <span class=\"keyword\">new</span> JobInfo.TriggerContentUri(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</div><div class=\"line\">                        JobInfo.TriggerContentUri.FLAG_NOTIFY_FOR_DESCENDANTS)</div><div class=\"line\">        );</div><div class=\"line\">        js.schedule(builder.build());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>参考<a href=\"https://www.youtube.com/watch?v=3ZX0CfVfVP8\">youtube上谷歌员工的演讲</a></p>\n<h3 id=\"2-文件系统的权限更改-FileProvider\"><a href=\"#2-文件系统的权限更改-FileProvider\" class=\"headerlink\" title=\"2. 文件系统的权限更改(FileProvider)\"></a>2. 文件系统的权限更改(FileProvider)</h3><p> File storage permission change<br> 简单来说就是Uri.fromFile(file://URI)不能再用了，需要使用FileProvider，这主要是为了6.0开始引进的permission model 考虑的，storage permission例如WRITE_EXTERNAL_STORAGE这种都已经属于Dangerous permission了。<br> 一个常见的场景就是调用系统相机拍照，给Intent设置一个uri，在7.0上直接用Uri.FromFile会崩<br> 需要通过FileProvider提供Uri,写了一个<a href=\"https://github.com/Haldir65/FileProviderDmo\">Demo</a>，使用FileProvider传递文件给另一个App。<br> 另一个需要注意的就是DownloadManager访问COLUMN_LOCAL_FILENAME会报错，这个不常见。</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://developer.android.com/topic/performance/background-optimization.html?utm_campaign=adp_series__100616&amp;utm_source=anddev&amp;utm_medium=yt-desc\">Docs</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=vBjTXKpaFj8\">youtube</a></li>\n<li><a href=\"http://gold.xitu.io/entry/57ff7e14a0bb9f005860c805\">Andrioid 7.0适配心得</a></li>\n<li><a href=\"https://developer.android.com/about/versions/nougat/android-7.0-changes.html\">Android 7.0 Behavior Changes</a></li>\n</ol>"},{"title":"android内部类导致leak模板","date":"2016-09-18T02:23:42.000Z","_content":"\n\n----------\n\n通常我们在一个class里面写内部类时，不是一定要用static声明为静态类，但是推荐作为内部静态类，因为内部类会隐式持有外部类的引用，有些时候如果代码处理不对容易造成内存泄漏\n下面就是个内存泄漏的例子\n<!--more-->\n```java\npublic class MainActivity extends Activity {\n\n\tpublic class MyHandler extends Handler{\n\t@Override\n\tpublic void handleMessage(Message msg) {\n\t\tif(msg.what==1){\n\t\t\tnew Thread(){\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile(true){\n\t\t\t\t\t\t//do something\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.start();\n\t\t}\n\t}\n\t}\n\tpublic MyHandler handler;\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_main);\n\t\t\n\t\t//...\n\t\thandler.sendEmptyMessage(1);\n\t\tfinish();\n\t    }\n}\n```\n\n\n如上面代码所示，在onCreate方法里发送了一条消息给handler处理然后finish方法关闭activity，但是代码并不能如愿，因为在handler收到消息启动了一个线程并且是**死循环**，\n这时候Thread持有handler的引用，而handler又持有activity的引用，这就导致了handler不能回收和activty也不能回收，所以推荐使用静态内部类，因为静态内部类不持有外部类的引用，可以避免这些不必要的麻烦。\n\n除此之外，在Activity里面创建一个AsyncTask的子类也容易导致leak\n例如 [stackoverFlow上的这个问题](http://stackoverflow.com/questions/24679383/memory-leak-using-asynctask-as-a-inner-class)\n\n对于这类问题的比较常用的方式:\nWeakReference\n例如,写这样一个的静态内部类\n    \n```java\nprivate static class IncomingHandler extends Handler {\n    private final WeakReference<MessagingService> mReference;\n\n    IncomingHandler(MessagingService service) {\n        mReference = new WeakReference<>(service);\n    }\n\n    @Override\n    public void handleMessage(Message msg) {\n        MessagingService service = mReference.get();\n        switch (msg.what) {\n            case MSG_SEND_NOTIFICATION:\n                int howManyConversations = msg.arg1 <= 0 ? 1 : msg.arg1;\n                int messagesPerConversation = msg.arg2 <= 0 ? 1 : msg.arg2;\n                if (service != null) {\n                    service.sendNotification(howManyConversations,\n                    messagesPerConversation);\n                }\n                break;\n            default:\n                super.handleMessage(msg);\n        }\n    }\n}\n```    \n//handler通过弱引用持有service对象，外加static内部类不持有外部类引用，应该不会leak了\n\n\n\n\n\n\n","source":"_posts/android-inner-class-leak.md","raw":"---\ntitle: \"android内部类导致leak模板\"\ndate: 2016-09-18 10:23:42\ncategories: blog\ntags: [android]\n---\n\n\n----------\n\n通常我们在一个class里面写内部类时，不是一定要用static声明为静态类，但是推荐作为内部静态类，因为内部类会隐式持有外部类的引用，有些时候如果代码处理不对容易造成内存泄漏\n下面就是个内存泄漏的例子\n<!--more-->\n```java\npublic class MainActivity extends Activity {\n\n\tpublic class MyHandler extends Handler{\n\t@Override\n\tpublic void handleMessage(Message msg) {\n\t\tif(msg.what==1){\n\t\t\tnew Thread(){\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\twhile(true){\n\t\t\t\t\t\t//do something\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.start();\n\t\t}\n\t}\n\t}\n\tpublic MyHandler handler;\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_main);\n\t\t\n\t\t//...\n\t\thandler.sendEmptyMessage(1);\n\t\tfinish();\n\t    }\n}\n```\n\n\n如上面代码所示，在onCreate方法里发送了一条消息给handler处理然后finish方法关闭activity，但是代码并不能如愿，因为在handler收到消息启动了一个线程并且是**死循环**，\n这时候Thread持有handler的引用，而handler又持有activity的引用，这就导致了handler不能回收和activty也不能回收，所以推荐使用静态内部类，因为静态内部类不持有外部类的引用，可以避免这些不必要的麻烦。\n\n除此之外，在Activity里面创建一个AsyncTask的子类也容易导致leak\n例如 [stackoverFlow上的这个问题](http://stackoverflow.com/questions/24679383/memory-leak-using-asynctask-as-a-inner-class)\n\n对于这类问题的比较常用的方式:\nWeakReference\n例如,写这样一个的静态内部类\n    \n```java\nprivate static class IncomingHandler extends Handler {\n    private final WeakReference<MessagingService> mReference;\n\n    IncomingHandler(MessagingService service) {\n        mReference = new WeakReference<>(service);\n    }\n\n    @Override\n    public void handleMessage(Message msg) {\n        MessagingService service = mReference.get();\n        switch (msg.what) {\n            case MSG_SEND_NOTIFICATION:\n                int howManyConversations = msg.arg1 <= 0 ? 1 : msg.arg1;\n                int messagesPerConversation = msg.arg2 <= 0 ? 1 : msg.arg2;\n                if (service != null) {\n                    service.sendNotification(howManyConversations,\n                    messagesPerConversation);\n                }\n                break;\n            default:\n                super.handleMessage(msg);\n        }\n    }\n}\n```    \n//handler通过弱引用持有service对象，外加static内部类不持有外部类引用，应该不会leak了\n\n\n\n\n\n\n","slug":"android-inner-class-leak","published":1,"updated":"2016-10-06T09:04:53.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzmt000w7gvrcz8l07at","content":"<hr>\n<p>通常我们在一个class里面写内部类时，不是一定要用static声明为静态类，但是推荐作为内部静态类，因为内部类会隐式持有外部类的引用，有些时候如果代码处理不对容易造成内存泄漏<br>下面就是个内存泄漏的例子<br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">true<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</div><div class=\"line\">true<span class=\"meta\">@Override</span></div><div class=\"line\">true<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">truetrue<span class=\"keyword\">if</span>(msg.what==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">truetruetrue<span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">truetruetruetrue<span class=\"meta\">@Override</span></div><div class=\"line\">truetruetruetrue<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">truetruetruetruetrue<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">truetruetruetruetruetrue<span class=\"comment\">//do something</span></div><div class=\"line\">truetruetruetruetrue&#125;</div><div class=\"line\">truetruetruetrue&#125;</div><div class=\"line\">truetruetrue&#125;.start();</div><div class=\"line\">truetrue&#125;</div><div class=\"line\">true&#125;</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">public</span> MyHandler handler;</div><div class=\"line\">true<span class=\"meta\">@Override</span></div><div class=\"line\">true<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">truetrue<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">truetruesetContentView(R.layout.activity_main);</div><div class=\"line\">truetrue</div><div class=\"line\">truetrue<span class=\"comment\">//...</span></div><div class=\"line\">truetruehandler.sendEmptyMessage(<span class=\"number\">1</span>);</div><div class=\"line\">truetruefinish();</div><div class=\"line\">true    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上面代码所示，在onCreate方法里发送了一条消息给handler处理然后finish方法关闭activity，但是代码并不能如愿，因为在handler收到消息启动了一个线程并且是<strong>死循环</strong>，<br>这时候Thread持有handler的引用，而handler又持有activity的引用，这就导致了handler不能回收和activty也不能回收，所以推荐使用静态内部类，因为静态内部类不持有外部类的引用，可以避免这些不必要的麻烦。</p>\n<p>除此之外，在Activity里面创建一个AsyncTask的子类也容易导致leak<br>例如 <a href=\"http://stackoverflow.com/questions/24679383/memory-leak-using-asynctask-as-a-inner-class\" target=\"_blank\" rel=\"external\">stackoverFlow上的这个问题</a></p>\n<p>对于这类问题的比较常用的方式:<br>WeakReference<br>例如,写这样一个的静态内部类</p>\n<pre><code class=\"java\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IncomingHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>{\n    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;MessagingService&gt; mReference;\n\n    IncomingHandler(MessagingService service) {\n        mReference = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(service);\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>{\n        MessagingService service = mReference.get();\n        <span class=\"keyword\">switch</span> (msg.what) {\n            <span class=\"keyword\">case</span> MSG_SEND_NOTIFICATION:\n                <span class=\"keyword\">int</span> howManyConversations = msg.arg1 &lt;= <span class=\"number\">0</span> ? <span class=\"number\">1</span> : msg.arg1;\n                <span class=\"keyword\">int</span> messagesPerConversation = msg.arg2 &lt;= <span class=\"number\">0</span> ? <span class=\"number\">1</span> : msg.arg2;\n                <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span>) {\n                    service.sendNotification(howManyConversations,\n                    messagesPerConversation);\n                }\n                <span class=\"keyword\">break</span>;\n            <span class=\"keyword\">default</span>:\n                <span class=\"keyword\">super</span>.handleMessage(msg);\n        }\n    }\n}\n</code></pre>\n<p>//handler通过弱引用持有service对象，外加static内部类不持有外部类引用，应该不会leak了</p>\n","excerpt":"<hr>\n<p>通常我们在一个class里面写内部类时，不是一定要用static声明为静态类，但是推荐作为内部静态类，因为内部类会隐式持有外部类的引用，有些时候如果代码处理不对容易造成内存泄漏<br>下面就是个内存泄漏的例子<br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">true<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</div><div class=\"line\">true<span class=\"meta\">@Override</span></div><div class=\"line\">true<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">truetrue<span class=\"keyword\">if</span>(msg.what==<span class=\"number\">1</span>)&#123;</div><div class=\"line\">truetruetrue<span class=\"keyword\">new</span> Thread()&#123;</div><div class=\"line\">truetruetruetrue<span class=\"meta\">@Override</span></div><div class=\"line\">truetruetruetrue<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">truetruetruetruetrue<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</div><div class=\"line\">truetruetruetruetruetrue<span class=\"comment\">//do something</span></div><div class=\"line\">truetruetruetruetrue&#125;</div><div class=\"line\">truetruetruetrue&#125;</div><div class=\"line\">truetruetrue&#125;.start();</div><div class=\"line\">truetrue&#125;</div><div class=\"line\">true&#125;</div><div class=\"line\">true&#125;</div><div class=\"line\">true<span class=\"keyword\">public</span> MyHandler handler;</div><div class=\"line\">true<span class=\"meta\">@Override</span></div><div class=\"line\">true<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">truetrue<span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">truetruesetContentView(R.layout.activity_main);</div><div class=\"line\">truetrue</div><div class=\"line\">truetrue<span class=\"comment\">//...</span></div><div class=\"line\">truetruehandler.sendEmptyMessage(<span class=\"number\">1</span>);</div><div class=\"line\">truetruefinish();</div><div class=\"line\">true    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如上面代码所示，在onCreate方法里发送了一条消息给handler处理然后finish方法关闭activity，但是代码并不能如愿，因为在handler收到消息启动了一个线程并且是<strong>死循环</strong>，<br>这时候Thread持有handler的引用，而handler又持有activity的引用，这就导致了handler不能回收和activty也不能回收，所以推荐使用静态内部类，因为静态内部类不持有外部类的引用，可以避免这些不必要的麻烦。</p>\n<p>除此之外，在Activity里面创建一个AsyncTask的子类也容易导致leak<br>例如 <a href=\"http://stackoverflow.com/questions/24679383/memory-leak-using-asynctask-as-a-inner-class\">stackoverFlow上的这个问题</a></p>\n<p>对于这类问题的比较常用的方式:<br>WeakReference<br>例如,写这样一个的静态内部类</p>\n<pre><code class=\"java\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IncomingHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>{\n    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WeakReference&lt;MessagingService&gt; mReference;\n\n    IncomingHandler(MessagingService service) {\n        mReference = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(service);\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>{\n        MessagingService service = mReference.get();\n        <span class=\"keyword\">switch</span> (msg.what) {\n            <span class=\"keyword\">case</span> MSG_SEND_NOTIFICATION:\n                <span class=\"keyword\">int</span> howManyConversations = msg.arg1 &lt;= <span class=\"number\">0</span> ? <span class=\"number\">1</span> : msg.arg1;\n                <span class=\"keyword\">int</span> messagesPerConversation = msg.arg2 &lt;= <span class=\"number\">0</span> ? <span class=\"number\">1</span> : msg.arg2;\n                <span class=\"keyword\">if</span> (service != <span class=\"keyword\">null</span>) {\n                    service.sendNotification(howManyConversations,\n                    messagesPerConversation);\n                }\n                <span class=\"keyword\">break</span>;\n            <span class=\"keyword\">default</span>:\n                <span class=\"keyword\">super</span>.handleMessage(msg);\n        }\n    }\n}\n</code></pre>\n<p>//handler通过弱引用持有service对象，外加static内部类不持有外部类引用，应该不会leak了</p>"},{"title":"git常用操作手册","date":"2016-09-27T09:24:51.000Z","_content":"\n## 记录一下常用git的命令，作为日常使用的参考手册\n\n### 1. 在本地创建一个项目并同步到github的过程\n\n```java\n$ mkdir ~/hello-world    //创建一个项目hello-world\n$ cd ~/hello-world       //打开这个项目\n$ git init             //初始化 \n$ touch README   \t\t//创建文件\n$ git add README        //更新README文件\n$ git commit -m 'first commit'     //提交更新，并注释信息“first commit”\n$ git remote add origin git@github.test/hellotest.git     //连接远程github项目  \n$ git push -u origin master     //将本地项目更新到github项目上去\n```\n\n### 2.  将本地git branch和远程github repository同步\n\n```python\ngit branch --set-upstream local_branch origin/remote_branch\n```\n\n<!--more-->\n\n### 3. git处理大小写字母的问题\n\n> git默认对大小写不敏感，所以，新建一个文件adapter.java，上传到github之后说不定就给变成了Adapter.java。在windows下面将已经push到远端的文件，改变其文件名的大小写时，git默认会认为文件没有发生任何改动，从而拒绝提交和推送，原因是其默认配置为大小写不敏感，故须在bash下修改配置：\n\n```java\ngit config core.ignorecase false \n```\n\n### 4. git设置用户名\n\n```java\n$ git config --global user.name \"name\"\n$ git config --global user.email xxx@163.com\n```\n这样可以为git所有的仓库设置用户名，如果想为指定仓库设置用户名:\n\n```java\n$ git config user.name \"name\"\n```\n查看当前用户名\n```\n$ git config user.name \n```\n\n### 5. 设置代理\n\n设置全局代理\n```java\ngit config --global http.proxy socks5://127.0.0.1:1080\n```\n\n对指定url设置代理\n```java\ngit config --global http.<要设置代理的URL>.proxy socks5://127.0.0.1:1080\n \ngit config --global http.https://github.com.proxy socks5://127.0.0.1:1080\n```\n\n### 6. 对上一次commit进行修改(在不添加新的commit的基础上)\n```java\ngit commit --amend\n```\n\n### 7. git revert和reset的区别\n> reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的. 即reset是通过一次反向的commit操作撤销之前的commit，而reset则会直接从提交历史里删除commit。如果还没有push，用reset可以在本地解决问题，之后重新commit再push。如果已经push，可以考虑通过一次revert来实现“撤销”的效果。\n\n\n语法：\n#### reset\n```java\ngit reset --hard HEAD //本地仓库文件修改也会消失\ngit reset --soft HEAD //本地文件修改不会消失，类似于回到git add 之前的状态\ngit reset --hard HEAD~3 //最近的三次提交全部撤销\n```\n\n#### revert\n```java\ngit revert c011eb3c20ba6fb38cc94fe //之后在分支图上就能看到一个新的反向的commit，push即可。\n```\n\n### 8. 切分支, 删除分支\n本地新建分支\n```java\ngit checkout -b <branchName>\n```\n将这条分支与远程同步的方式\n```java\ngit branch --set-upstream <laocalBranchName> origin/<RemoteBranchName>\n// 或者\ngit branch -u origin/dev\n```\n直接从远程仓库切一个分支出来并保持同步的方式\n```java\ngit checkout -b <branchName> origin/<branchName>\n\ngit checkout --track origin/dev\n```\n\n\n删除远程分支:\n```java\ngit push origin --delete <branchName>\n```\n删除远程tag\n```java\ngit push origin --delete tag <tagName>\n```\n\n\n### 9. pull和rebase的区别\npull = fetch +merge ，会生成新的提交\n\n> Merge好在它是一个安全的操作。现有的分支不会被更改，避免了rebase潜在的缺点\n\n### 10. rebase和cherry-pick \nrebase不会生成新的提交，而且会使得项目提交历史呈现出完美的线性。但注意[不要在公共的分支上使用](https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase%E7%9A%84%E9%80%89%E6%8B%A9)\n\n\n\n### 11. gitignore文件写法\n参考[repo](https://github.com/suzeyu1992/repo/tree/master/project/git)\n```java\n# 忽略所有以 .c结尾的文件\n*.c\n\n# 但是 stream.c 会被git追踪\n!stream.c\n\n# 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO\n/TODO\n\n# 忽略所有在build文件夹下的文件\nbuild/\n\n# 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txt\ndoc/*.txt\n\n# 忽略所有在doc目录下的.pdf文件\ndoc/**/*.pdf\n```\n\n### 12. git stash \n常用命令\n```java\ngit stash  //保存下来，压进一个栈，基本上就是先进后出了\ngit stash pop //推出一个栈\n\ngit stash save -a \"message to add\" // 添加一次stash，打上标记\n\ngit stash list  //展示当前仓库所有的被stash的变更以及对应的id，记得这个不是跟着branch走的\ngit stash drop stah@{id} // 从stash的List中删除指定的某一次stash\ngit stash apply <stash@{id}> //应用某一次的stash\n\ngit stash clear// 一次性删除stash List中所有的item\n\n```\n\n### 13. 强推\n谨慎使用\n```java\n# Be very careful with this command!\ngit push --force\n```\n\n## Reference\n-[git reset和revert](http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html) \n-[git recipes](https://github.com/geeeeeeeeek/git-recipes)","source":"_posts/git-manual.md","raw":"---\ntitle: git常用操作手册\ndate: 2016-09-27 17:24:51\ncategories: [技术]\ntags: [git]\n---\n\n## 记录一下常用git的命令，作为日常使用的参考手册\n\n### 1. 在本地创建一个项目并同步到github的过程\n\n```java\n$ mkdir ~/hello-world    //创建一个项目hello-world\n$ cd ~/hello-world       //打开这个项目\n$ git init             //初始化 \n$ touch README   \t\t//创建文件\n$ git add README        //更新README文件\n$ git commit -m 'first commit'     //提交更新，并注释信息“first commit”\n$ git remote add origin git@github.test/hellotest.git     //连接远程github项目  \n$ git push -u origin master     //将本地项目更新到github项目上去\n```\n\n### 2.  将本地git branch和远程github repository同步\n\n```python\ngit branch --set-upstream local_branch origin/remote_branch\n```\n\n<!--more-->\n\n### 3. git处理大小写字母的问题\n\n> git默认对大小写不敏感，所以，新建一个文件adapter.java，上传到github之后说不定就给变成了Adapter.java。在windows下面将已经push到远端的文件，改变其文件名的大小写时，git默认会认为文件没有发生任何改动，从而拒绝提交和推送，原因是其默认配置为大小写不敏感，故须在bash下修改配置：\n\n```java\ngit config core.ignorecase false \n```\n\n### 4. git设置用户名\n\n```java\n$ git config --global user.name \"name\"\n$ git config --global user.email xxx@163.com\n```\n这样可以为git所有的仓库设置用户名，如果想为指定仓库设置用户名:\n\n```java\n$ git config user.name \"name\"\n```\n查看当前用户名\n```\n$ git config user.name \n```\n\n### 5. 设置代理\n\n设置全局代理\n```java\ngit config --global http.proxy socks5://127.0.0.1:1080\n```\n\n对指定url设置代理\n```java\ngit config --global http.<要设置代理的URL>.proxy socks5://127.0.0.1:1080\n \ngit config --global http.https://github.com.proxy socks5://127.0.0.1:1080\n```\n\n### 6. 对上一次commit进行修改(在不添加新的commit的基础上)\n```java\ngit commit --amend\n```\n\n### 7. git revert和reset的区别\n> reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的. 即reset是通过一次反向的commit操作撤销之前的commit，而reset则会直接从提交历史里删除commit。如果还没有push，用reset可以在本地解决问题，之后重新commit再push。如果已经push，可以考虑通过一次revert来实现“撤销”的效果。\n\n\n语法：\n#### reset\n```java\ngit reset --hard HEAD //本地仓库文件修改也会消失\ngit reset --soft HEAD //本地文件修改不会消失，类似于回到git add 之前的状态\ngit reset --hard HEAD~3 //最近的三次提交全部撤销\n```\n\n#### revert\n```java\ngit revert c011eb3c20ba6fb38cc94fe //之后在分支图上就能看到一个新的反向的commit，push即可。\n```\n\n### 8. 切分支, 删除分支\n本地新建分支\n```java\ngit checkout -b <branchName>\n```\n将这条分支与远程同步的方式\n```java\ngit branch --set-upstream <laocalBranchName> origin/<RemoteBranchName>\n// 或者\ngit branch -u origin/dev\n```\n直接从远程仓库切一个分支出来并保持同步的方式\n```java\ngit checkout -b <branchName> origin/<branchName>\n\ngit checkout --track origin/dev\n```\n\n\n删除远程分支:\n```java\ngit push origin --delete <branchName>\n```\n删除远程tag\n```java\ngit push origin --delete tag <tagName>\n```\n\n\n### 9. pull和rebase的区别\npull = fetch +merge ，会生成新的提交\n\n> Merge好在它是一个安全的操作。现有的分支不会被更改，避免了rebase潜在的缺点\n\n### 10. rebase和cherry-pick \nrebase不会生成新的提交，而且会使得项目提交历史呈现出完美的线性。但注意[不要在公共的分支上使用](https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase%E7%9A%84%E9%80%89%E6%8B%A9)\n\n\n\n### 11. gitignore文件写法\n参考[repo](https://github.com/suzeyu1992/repo/tree/master/project/git)\n```java\n# 忽略所有以 .c结尾的文件\n*.c\n\n# 但是 stream.c 会被git追踪\n!stream.c\n\n# 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO\n/TODO\n\n# 忽略所有在build文件夹下的文件\nbuild/\n\n# 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txt\ndoc/*.txt\n\n# 忽略所有在doc目录下的.pdf文件\ndoc/**/*.pdf\n```\n\n### 12. git stash \n常用命令\n```java\ngit stash  //保存下来，压进一个栈，基本上就是先进后出了\ngit stash pop //推出一个栈\n\ngit stash save -a \"message to add\" // 添加一次stash，打上标记\n\ngit stash list  //展示当前仓库所有的被stash的变更以及对应的id，记得这个不是跟着branch走的\ngit stash drop stah@{id} // 从stash的List中删除指定的某一次stash\ngit stash apply <stash@{id}> //应用某一次的stash\n\ngit stash clear// 一次性删除stash List中所有的item\n\n```\n\n### 13. 强推\n谨慎使用\n```java\n# Be very careful with this command!\ngit push --force\n```\n\n## Reference\n-[git reset和revert](http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html) \n-[git recipes](https://github.com/geeeeeeeeek/git-recipes)","slug":"git-manual","published":1,"updated":"2017-01-07T16:02:18.830Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzmt000z7gvrvj7b3cox","content":"<h2 id=\"记录一下常用git的命令，作为日常使用的参考手册\"><a href=\"#记录一下常用git的命令，作为日常使用的参考手册\" class=\"headerlink\" title=\"记录一下常用git的命令，作为日常使用的参考手册\"></a>记录一下常用git的命令，作为日常使用的参考手册</h2><h3 id=\"1-在本地创建一个项目并同步到github的过程\"><a href=\"#1-在本地创建一个项目并同步到github的过程\" class=\"headerlink\" title=\"1. 在本地创建一个项目并同步到github的过程\"></a>1. 在本地创建一个项目并同步到github的过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir ~/hello-world    <span class=\"comment\">//创建一个项目hello-world</span></div><div class=\"line\">$ cd ~/hello-world       <span class=\"comment\">//打开这个项目</span></div><div class=\"line\">$ git init             <span class=\"comment\">//初始化 </span></div><div class=\"line\">$ touch README   \t\t<span class=\"comment\">//创建文件</span></div><div class=\"line\">$ git add README        <span class=\"comment\">//更新README文件</span></div><div class=\"line\">$ git commit -m <span class=\"string\">'first commit'</span>     <span class=\"comment\">//提交更新，并注释信息“first commit”</span></div><div class=\"line\">$ git remote add origin git<span class=\"meta\">@github</span>.test/hellotest.git     <span class=\"comment\">//连接远程github项目  </span></div><div class=\"line\">$ git push -u origin master     <span class=\"comment\">//将本地项目更新到github项目上去</span></div></pre></td></tr></table></figure>\n<h3 id=\"2-将本地git-branch和远程github-repository同步\"><a href=\"#2-将本地git-branch和远程github-repository同步\" class=\"headerlink\" title=\"2.  将本地git branch和远程github repository同步\"></a>2.  将本地git branch和远程github repository同步</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch --set-upstream local_branch origin/remote_branch</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"3-git处理大小写字母的问题\"><a href=\"#3-git处理大小写字母的问题\" class=\"headerlink\" title=\"3. git处理大小写字母的问题\"></a>3. git处理大小写字母的问题</h3><blockquote>\n<p>git默认对大小写不敏感，所以，新建一个文件adapter.java，上传到github之后说不定就给变成了Adapter.java。在windows下面将已经push到远端的文件，改变其文件名的大小写时，git默认会认为文件没有发生任何改动，从而拒绝提交和推送，原因是其默认配置为大小写不敏感，故须在bash下修改配置：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config core.ignorecase <span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-git设置用户名\"><a href=\"#4-git设置用户名\" class=\"headerlink\" title=\"4. git设置用户名\"></a>4. git设置用户名</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"name\"</span></div><div class=\"line\">$ git config --global user.email xxx@<span class=\"number\">163</span>.com</div></pre></td></tr></table></figure>\n<p>这样可以为git所有的仓库设置用户名，如果想为指定仓库设置用户名:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config user.name <span class=\"string\">\"name\"</span></div></pre></td></tr></table></figure>\n<p>查看当前用户名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config user.name</div></pre></td></tr></table></figure></p>\n<h3 id=\"5-设置代理\"><a href=\"#5-设置代理\" class=\"headerlink\" title=\"5. 设置代理\"></a>5. 设置代理</h3><p>设置全局代理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.proxy socks5:<span class=\"comment\">//127.0.0.1:1080</span></div></pre></td></tr></table></figure></p>\n<p>对指定url设置代理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.&lt;要设置代理的URL&gt;.proxy socks5:<span class=\"comment\">//127.0.0.1:1080</span></div><div class=\"line\"> </div><div class=\"line\">git config --global http.https:<span class=\"comment\">//github.com.proxy socks5://127.0.0.1:1080</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"6-对上一次commit进行修改-在不添加新的commit的基础上\"><a href=\"#6-对上一次commit进行修改-在不添加新的commit的基础上\" class=\"headerlink\" title=\"6. 对上一次commit进行修改(在不添加新的commit的基础上)\"></a>6. 对上一次commit进行修改(在不添加新的commit的基础上)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --amend</div></pre></td></tr></table></figure>\n<h3 id=\"7-git-revert和reset的区别\"><a href=\"#7-git-revert和reset的区别\" class=\"headerlink\" title=\"7. git revert和reset的区别\"></a>7. git revert和reset的区别</h3><blockquote>\n<p>reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的. 即reset是通过一次反向的commit操作撤销之前的commit，而reset则会直接从提交历史里删除commit。如果还没有push，用reset可以在本地解决问题，之后重新commit再push。如果已经push，可以考虑通过一次revert来实现“撤销”的效果。</p>\n</blockquote>\n<p>语法：</p>\n<h4 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard HEAD <span class=\"comment\">//本地仓库文件修改也会消失</span></div><div class=\"line\">git reset --soft HEAD <span class=\"comment\">//本地文件修改不会消失，类似于回到git add 之前的状态</span></div><div class=\"line\">git reset --hard HEAD~<span class=\"number\">3</span> <span class=\"comment\">//最近的三次提交全部撤销</span></div></pre></td></tr></table></figure>\n<h4 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git revert c011eb3c20ba6fb38cc94fe <span class=\"comment\">//之后在分支图上就能看到一个新的反向的commit，push即可。</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-切分支-删除分支\"><a href=\"#8-切分支-删除分支\" class=\"headerlink\" title=\"8. 切分支, 删除分支\"></a>8. 切分支, 删除分支</h3><p>本地新建分支<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b &lt;branchName&gt;</div></pre></td></tr></table></figure></p>\n<p>将这条分支与远程同步的方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch --set-upstream &lt;laocalBranchName&gt; origin/&lt;RemoteBranchName&gt;</div><div class=\"line\"><span class=\"comment\">// 或者</span></div><div class=\"line\">git branch -u origin/dev</div></pre></td></tr></table></figure></p>\n<p>直接从远程仓库切一个分支出来并保持同步的方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b &lt;branchName&gt; origin/&lt;branchName&gt;</div><div class=\"line\"></div><div class=\"line\">git checkout --track origin/dev</div></pre></td></tr></table></figure></p>\n<p>删除远程分支:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin --delete &lt;branchName&gt;</div></pre></td></tr></table></figure></p>\n<p>删除远程tag<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin --delete tag &lt;tagName&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"9-pull和rebase的区别\"><a href=\"#9-pull和rebase的区别\" class=\"headerlink\" title=\"9. pull和rebase的区别\"></a>9. pull和rebase的区别</h3><p>pull = fetch +merge ，会生成新的提交</p>\n<blockquote>\n<p>Merge好在它是一个安全的操作。现有的分支不会被更改，避免了rebase潜在的缺点</p>\n</blockquote>\n<h3 id=\"10-rebase和cherry-pick\"><a href=\"#10-rebase和cherry-pick\" class=\"headerlink\" title=\"10. rebase和cherry-pick\"></a>10. rebase和cherry-pick</h3><p>rebase不会生成新的提交，而且会使得项目提交历史呈现出完美的线性。但注意<a href=\"https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase%E7%9A%84%E9%80%89%E6%8B%A9\" target=\"_blank\" rel=\"external\">不要在公共的分支上使用</a></p>\n<h3 id=\"11-gitignore文件写法\"><a href=\"#11-gitignore文件写法\" class=\"headerlink\" title=\"11. gitignore文件写法\"></a>11. gitignore文件写法</h3><p>参考<a href=\"https://github.com/suzeyu1992/repo/tree/master/project/git\" target=\"_blank\" rel=\"external\">repo</a><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 忽略所有以 .c结尾的文件</div><div class=\"line\">*.c</div><div class=\"line\"></div><div class=\"line\"># 但是 stream.c 会被git追踪</div><div class=\"line\">!stream.c</div><div class=\"line\"></div><div class=\"line\"># 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO</div><div class=\"line\">/TODO</div><div class=\"line\"></div><div class=\"line\"># 忽略所有在build文件夹下的文件</div><div class=\"line\">build/</div><div class=\"line\"></div><div class=\"line\"># 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txt</div><div class=\"line\">doc/*.txt</div><div class=\"line\"></div><div class=\"line\"># 忽略所有在doc目录下的.pdf文件</div><div class=\"line\">doc/**/*.pdf</div></pre></td></tr></table></figure></p>\n<h3 id=\"12-git-stash\"><a href=\"#12-git-stash\" class=\"headerlink\" title=\"12. git stash\"></a>12. git stash</h3><p>常用命令<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash  <span class=\"comment\">//保存下来，压进一个栈，基本上就是先进后出了</span></div><div class=\"line\">git stash pop <span class=\"comment\">//推出一个栈</span></div><div class=\"line\"></div><div class=\"line\">git stash save -a <span class=\"string\">\"message to add\"</span> <span class=\"comment\">// 添加一次stash，打上标记</span></div><div class=\"line\"></div><div class=\"line\">git stash list  <span class=\"comment\">//展示当前仓库所有的被stash的变更以及对应的id，记得这个不是跟着branch走的</span></div><div class=\"line\">git stash drop stah@&#123;id&#125; <span class=\"comment\">// 从stash的List中删除指定的某一次stash</span></div><div class=\"line\">git stash apply &lt;stash@&#123;id&#125;&gt; <span class=\"comment\">//应用某一次的stash</span></div><div class=\"line\"></div><div class=\"line\">git stash clear<span class=\"comment\">// 一次性删除stash List中所有的item</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"13-强推\"><a href=\"#13-强推\" class=\"headerlink\" title=\"13. 强推\"></a>13. 强推</h3><p>谨慎使用<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Be very careful with this command!</div><div class=\"line\">git push --force</div></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>-<a href=\"http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html\" target=\"_blank\" rel=\"external\">git reset和revert</a><br>-<a href=\"https://github.com/geeeeeeeeek/git-recipes\" target=\"_blank\" rel=\"external\">git recipes</a></p>\n","excerpt":"<h2 id=\"记录一下常用git的命令，作为日常使用的参考手册\"><a href=\"#记录一下常用git的命令，作为日常使用的参考手册\" class=\"headerlink\" title=\"记录一下常用git的命令，作为日常使用的参考手册\"></a>记录一下常用git的命令，作为日常使用的参考手册</h2><h3 id=\"1-在本地创建一个项目并同步到github的过程\"><a href=\"#1-在本地创建一个项目并同步到github的过程\" class=\"headerlink\" title=\"1. 在本地创建一个项目并同步到github的过程\"></a>1. 在本地创建一个项目并同步到github的过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir ~/hello-world    <span class=\"comment\">//创建一个项目hello-world</span></div><div class=\"line\">$ cd ~/hello-world       <span class=\"comment\">//打开这个项目</span></div><div class=\"line\">$ git init             <span class=\"comment\">//初始化 </span></div><div class=\"line\">$ touch README   \t\t<span class=\"comment\">//创建文件</span></div><div class=\"line\">$ git add README        <span class=\"comment\">//更新README文件</span></div><div class=\"line\">$ git commit -m <span class=\"string\">'first commit'</span>     <span class=\"comment\">//提交更新，并注释信息“first commit”</span></div><div class=\"line\">$ git remote add origin git<span class=\"meta\">@github</span>.test/hellotest.git     <span class=\"comment\">//连接远程github项目  </span></div><div class=\"line\">$ git push -u origin master     <span class=\"comment\">//将本地项目更新到github项目上去</span></div></pre></td></tr></table></figure>\n<h3 id=\"2-将本地git-branch和远程github-repository同步\"><a href=\"#2-将本地git-branch和远程github-repository同步\" class=\"headerlink\" title=\"2.  将本地git branch和远程github repository同步\"></a>2.  将本地git branch和远程github repository同步</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch --set-upstream local_branch origin/remote_branch</div></pre></td></tr></table></figure>","more":"<h3 id=\"3-git处理大小写字母的问题\"><a href=\"#3-git处理大小写字母的问题\" class=\"headerlink\" title=\"3. git处理大小写字母的问题\"></a>3. git处理大小写字母的问题</h3><blockquote>\n<p>git默认对大小写不敏感，所以，新建一个文件adapter.java，上传到github之后说不定就给变成了Adapter.java。在windows下面将已经push到远端的文件，改变其文件名的大小写时，git默认会认为文件没有发生任何改动，从而拒绝提交和推送，原因是其默认配置为大小写不敏感，故须在bash下修改配置：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config core.ignorecase <span class=\"keyword\">false</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-git设置用户名\"><a href=\"#4-git设置用户名\" class=\"headerlink\" title=\"4. git设置用户名\"></a>4. git设置用户名</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name <span class=\"string\">\"name\"</span></div><div class=\"line\">$ git config --global user.email xxx@<span class=\"number\">163</span>.com</div></pre></td></tr></table></figure>\n<p>这样可以为git所有的仓库设置用户名，如果想为指定仓库设置用户名:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config user.name <span class=\"string\">\"name\"</span></div></pre></td></tr></table></figure>\n<p>查看当前用户名<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config user.name</div></pre></td></tr></table></figure></p>\n<h3 id=\"5-设置代理\"><a href=\"#5-设置代理\" class=\"headerlink\" title=\"5. 设置代理\"></a>5. 设置代理</h3><p>设置全局代理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.proxy socks5:<span class=\"comment\">//127.0.0.1:1080</span></div></pre></td></tr></table></figure></p>\n<p>对指定url设置代理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global http.&lt;要设置代理的URL&gt;.proxy socks5:<span class=\"comment\">//127.0.0.1:1080</span></div><div class=\"line\"> </div><div class=\"line\">git config --global http.https:<span class=\"comment\">//github.com.proxy socks5://127.0.0.1:1080</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"6-对上一次commit进行修改-在不添加新的commit的基础上\"><a href=\"#6-对上一次commit进行修改-在不添加新的commit的基础上\" class=\"headerlink\" title=\"6. 对上一次commit进行修改(在不添加新的commit的基础上)\"></a>6. 对上一次commit进行修改(在不添加新的commit的基础上)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit --amend</div></pre></td></tr></table></figure>\n<h3 id=\"7-git-revert和reset的区别\"><a href=\"#7-git-revert和reset的区别\" class=\"headerlink\" title=\"7. git revert和reset的区别\"></a>7. git revert和reset的区别</h3><blockquote>\n<p>reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的. 即reset是通过一次反向的commit操作撤销之前的commit，而reset则会直接从提交历史里删除commit。如果还没有push，用reset可以在本地解决问题，之后重新commit再push。如果已经push，可以考虑通过一次revert来实现“撤销”的效果。</p>\n</blockquote>\n<p>语法：</p>\n<h4 id=\"reset\"><a href=\"#reset\" class=\"headerlink\" title=\"reset\"></a>reset</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset --hard HEAD <span class=\"comment\">//本地仓库文件修改也会消失</span></div><div class=\"line\">git reset --soft HEAD <span class=\"comment\">//本地文件修改不会消失，类似于回到git add 之前的状态</span></div><div class=\"line\">git reset --hard HEAD~<span class=\"number\">3</span> <span class=\"comment\">//最近的三次提交全部撤销</span></div></pre></td></tr></table></figure>\n<h4 id=\"revert\"><a href=\"#revert\" class=\"headerlink\" title=\"revert\"></a>revert</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git revert c011eb3c20ba6fb38cc94fe <span class=\"comment\">//之后在分支图上就能看到一个新的反向的commit，push即可。</span></div></pre></td></tr></table></figure>\n<h3 id=\"8-切分支-删除分支\"><a href=\"#8-切分支-删除分支\" class=\"headerlink\" title=\"8. 切分支, 删除分支\"></a>8. 切分支, 删除分支</h3><p>本地新建分支<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b &lt;branchName&gt;</div></pre></td></tr></table></figure></p>\n<p>将这条分支与远程同步的方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch --set-upstream &lt;laocalBranchName&gt; origin/&lt;RemoteBranchName&gt;</div><div class=\"line\"><span class=\"comment\">// 或者</span></div><div class=\"line\">git branch -u origin/dev</div></pre></td></tr></table></figure></p>\n<p>直接从远程仓库切一个分支出来并保持同步的方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b &lt;branchName&gt; origin/&lt;branchName&gt;</div><div class=\"line\"></div><div class=\"line\">git checkout --track origin/dev</div></pre></td></tr></table></figure></p>\n<p>删除远程分支:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin --delete &lt;branchName&gt;</div></pre></td></tr></table></figure></p>\n<p>删除远程tag<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin --delete tag &lt;tagName&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"9-pull和rebase的区别\"><a href=\"#9-pull和rebase的区别\" class=\"headerlink\" title=\"9. pull和rebase的区别\"></a>9. pull和rebase的区别</h3><p>pull = fetch +merge ，会生成新的提交</p>\n<blockquote>\n<p>Merge好在它是一个安全的操作。现有的分支不会被更改，避免了rebase潜在的缺点</p>\n</blockquote>\n<h3 id=\"10-rebase和cherry-pick\"><a href=\"#10-rebase和cherry-pick\" class=\"headerlink\" title=\"10. rebase和cherry-pick\"></a>10. rebase和cherry-pick</h3><p>rebase不会生成新的提交，而且会使得项目提交历史呈现出完美的线性。但注意<a href=\"https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase%E7%9A%84%E9%80%89%E6%8B%A9\">不要在公共的分支上使用</a></p>\n<h3 id=\"11-gitignore文件写法\"><a href=\"#11-gitignore文件写法\" class=\"headerlink\" title=\"11. gitignore文件写法\"></a>11. gitignore文件写法</h3><p>参考<a href=\"https://github.com/suzeyu1992/repo/tree/master/project/git\">repo</a><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 忽略所有以 .c结尾的文件</div><div class=\"line\">*.c</div><div class=\"line\"></div><div class=\"line\"># 但是 stream.c 会被git追踪</div><div class=\"line\">!stream.c</div><div class=\"line\"></div><div class=\"line\"># 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO</div><div class=\"line\">/TODO</div><div class=\"line\"></div><div class=\"line\"># 忽略所有在build文件夹下的文件</div><div class=\"line\">build/</div><div class=\"line\"></div><div class=\"line\"># 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txt</div><div class=\"line\">doc/*.txt</div><div class=\"line\"></div><div class=\"line\"># 忽略所有在doc目录下的.pdf文件</div><div class=\"line\">doc/**/*.pdf</div></pre></td></tr></table></figure></p>\n<h3 id=\"12-git-stash\"><a href=\"#12-git-stash\" class=\"headerlink\" title=\"12. git stash\"></a>12. git stash</h3><p>常用命令<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash  <span class=\"comment\">//保存下来，压进一个栈，基本上就是先进后出了</span></div><div class=\"line\">git stash pop <span class=\"comment\">//推出一个栈</span></div><div class=\"line\"></div><div class=\"line\">git stash save -a <span class=\"string\">\"message to add\"</span> <span class=\"comment\">// 添加一次stash，打上标记</span></div><div class=\"line\"></div><div class=\"line\">git stash list  <span class=\"comment\">//展示当前仓库所有的被stash的变更以及对应的id，记得这个不是跟着branch走的</span></div><div class=\"line\">git stash drop stah@&#123;id&#125; <span class=\"comment\">// 从stash的List中删除指定的某一次stash</span></div><div class=\"line\">git stash apply &lt;stash@&#123;id&#125;&gt; <span class=\"comment\">//应用某一次的stash</span></div><div class=\"line\"></div><div class=\"line\">git stash clear<span class=\"comment\">// 一次性删除stash List中所有的item</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"13-强推\"><a href=\"#13-强推\" class=\"headerlink\" title=\"13. 强推\"></a>13. 强推</h3><p>谨慎使用<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Be very careful with this command!</div><div class=\"line\">git push --force</div></pre></td></tr></table></figure></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p>-<a href=\"http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html\">git reset和revert</a><br>-<a href=\"https://github.com/geeeeeeeeek/git-recipes\">git recipes</a></p>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-09-18T00:44:19.677Z","updated":"2016-10-06T09:04:53.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzn800127gvridfozxp7","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"Hexo部署个人博客记录","date":"2017-01-08T10:01:01.000Z","top":2,"_content":"\n去年九月份之前还觉得写个人blog是一件很奢侈的事情，现在几个月过去了，很多问题都能够自己在网上找到答案。记录下来的问题也越来越多，如果想要给自己的blog一个值得置顶的文章的话，我觉得一篇记录使用hexo过程中的一些解决问题的方法的文章是再合适不过的了。</br>\n![](http://odzl05jxx.bkt.clouddn.com/163216sn1ziyyaef4zaeps.jpg?imageView2/2/w/600)\n\n<!--more-->\n\n### 1. 经常更新yilia的theme\n[yilia](https://github.com/litten/hexo-theme-yilia)主题经常会更新，及时更新theme会发现很多新的特性及bug fix\n\n### 2. 部署相关\n- 部署到github\n```javascript\nhexo clean //清除缓存\nhexo g -d //一步到位 = hexo g + hexo d\n```\n\n- 部署过程中出现的一些错误\n```java\n$ hexo g -d\nINFO  Start processing\nERROR Process failed: _posts/2016-12-10-adb-command.md\nYAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 3, column 11:\n    categories:  [技术]\n              ^\n    at generateError (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:162:10)\n    at throwError (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:168:9)\n    at readBlockMapping (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1040:9)\n    at composeNode (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1326:12)\n    at readDocument (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1488:3)\n    at loadDocuments (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1544:5)\n    at Object.load (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1561:19)\n    at parseYAML (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:80:21)\n    at parse (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:56:12)\n    at D:\\Blog\\github\\node_modules\\hexo\\lib\\plugins\\processor\\post.js:52:18\n    at tryCatcher (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:507:35)\n    at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at PromiseArray._resolve (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:125:19)\n    at PromiseArray._promiseFulfilled (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:143:14)\n    at PromiseArray._iterate (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:113:31)\n    at PromiseArray.init [as _init] (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:77:10)\n    at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:564:21)\n    at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at PromiseArray._resolve (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:125:19)\n    at PromiseArray._promiseFulfilled (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:143:14)\n    at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:572:26)\n    at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at Promise._resolveCallback (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:431:57)\n    at Promise._settlePromiseFromHandler (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:522:17)\n    at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21\n    at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-fs\\node_modules\\graceful-fs\\graceful-fs.js:78:16\n    at tryToString (fs.js:455:3)\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:442:12)\nINFO  Files loaded in 1.48 s\nINFO  Generated: sitemap.xml\nINFO  Generated: atom.xml\nINFO  Generated: 2017/01/08/2017-01-08-trouble-shooting-with-my-blog/index.html\nINFO  Generated: index.html\nINFO  4 files generated in 2.26 s\nINFO  Deploying: git\n\n```\n\n\n### 3. 一些功能的实现\n\n- 置顶功能\n    将node_modules/hexo-generator-index/lib/generator.js的文件内容替换成一下内容\n\n```javascript\n'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) { // 两篇文章top都有定义\n            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n            else return b.top - a.top; // 否则按照top值降序排\n        }\n        else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date; // 都没定义按照文章日期降序排\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n    __index: true\n    }\n  });\n};\n\n```\n\n- 同时在文章开头添加top : 1即可 ，实际排序按照这个数字从大到小排序\n```java\n title: Hexo置顶文章\ndate: 2016-11-11 23:26:22\ntags:[置顶]\ncategories: Hexo\ntop: 0 # 0或者1\n```\n\n\n\n\n\n### 4. markdown语法\n\n\n### ref\n- [Hexo博文置顶技巧](http://yanhuili.github.io/2016/11/21/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%8A%80%E5%B7%A7/)","source":"_posts/2017-01-08-trouble-shooting-with-my-blog.md","raw":"---\ntitle: Hexo部署个人博客记录\ndate: 2017-01-08 18:01:01\ntags: hexo \ntop : 2\n---\n\n去年九月份之前还觉得写个人blog是一件很奢侈的事情，现在几个月过去了，很多问题都能够自己在网上找到答案。记录下来的问题也越来越多，如果想要给自己的blog一个值得置顶的文章的话，我觉得一篇记录使用hexo过程中的一些解决问题的方法的文章是再合适不过的了。</br>\n![](http://odzl05jxx.bkt.clouddn.com/163216sn1ziyyaef4zaeps.jpg?imageView2/2/w/600)\n\n<!--more-->\n\n### 1. 经常更新yilia的theme\n[yilia](https://github.com/litten/hexo-theme-yilia)主题经常会更新，及时更新theme会发现很多新的特性及bug fix\n\n### 2. 部署相关\n- 部署到github\n```javascript\nhexo clean //清除缓存\nhexo g -d //一步到位 = hexo g + hexo d\n```\n\n- 部署过程中出现的一些错误\n```java\n$ hexo g -d\nINFO  Start processing\nERROR Process failed: _posts/2016-12-10-adb-command.md\nYAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 3, column 11:\n    categories:  [技术]\n              ^\n    at generateError (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:162:10)\n    at throwError (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:168:9)\n    at readBlockMapping (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1040:9)\n    at composeNode (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1326:12)\n    at readDocument (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1488:3)\n    at loadDocuments (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1544:5)\n    at Object.load (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1561:19)\n    at parseYAML (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:80:21)\n    at parse (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:56:12)\n    at D:\\Blog\\github\\node_modules\\hexo\\lib\\plugins\\processor\\post.js:52:18\n    at tryCatcher (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23)\n    at Promise._settlePromiseFromHandler (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:507:35)\n    at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at PromiseArray._resolve (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:125:19)\n    at PromiseArray._promiseFulfilled (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:143:14)\n    at PromiseArray._iterate (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:113:31)\n    at PromiseArray.init [as _init] (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:77:10)\n    at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:564:21)\n    at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at PromiseArray._resolve (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:125:19)\n    at PromiseArray._promiseFulfilled (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:143:14)\n    at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:572:26)\n    at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at Promise._resolveCallback (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:431:57)\n    at Promise._settlePromiseFromHandler (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:522:17)\n    at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18)\n    at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10)\n    at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18)\n    at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18)\n    at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21\n    at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-fs\\node_modules\\graceful-fs\\graceful-fs.js:78:16\n    at tryToString (fs.js:455:3)\n    at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:442:12)\nINFO  Files loaded in 1.48 s\nINFO  Generated: sitemap.xml\nINFO  Generated: atom.xml\nINFO  Generated: 2017/01/08/2017-01-08-trouble-shooting-with-my-blog/index.html\nINFO  Generated: index.html\nINFO  4 files generated in 2.26 s\nINFO  Deploying: git\n\n```\n\n\n### 3. 一些功能的实现\n\n- 置顶功能\n    将node_modules/hexo-generator-index/lib/generator.js的文件内容替换成一下内容\n\n```javascript\n'use strict';\nvar pagination = require('hexo-pagination');\nmodule.exports = function(locals){\n  var config = this.config;\n  var posts = locals.posts;\n    posts.data = posts.data.sort(function(a, b) {\n        if(a.top && b.top) { // 两篇文章top都有定义\n            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排\n            else return b.top - a.top; // 否则按照top值降序排\n        }\n        else if(a.top && !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）\n            return -1;\n        }\n        else if(!a.top && b.top) {\n            return 1;\n        }\n        else return b.date - a.date; // 都没定义按照文章日期降序排\n    });\n  var paginationDir = config.pagination_dir || 'page';\n  return pagination('', posts, {\n    perPage: config.index_generator.per_page,\n    layout: ['index', 'archive'],\n    format: paginationDir + '/%d/',\n    data: {\n    __index: true\n    }\n  });\n};\n\n```\n\n- 同时在文章开头添加top : 1即可 ，实际排序按照这个数字从大到小排序\n```java\n title: Hexo置顶文章\ndate: 2016-11-11 23:26:22\ntags:[置顶]\ncategories: Hexo\ntop: 0 # 0或者1\n```\n\n\n\n\n\n### 4. markdown语法\n\n\n### ref\n- [Hexo博文置顶技巧](http://yanhuili.github.io/2016/11/21/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%8A%80%E5%B7%A7/)","slug":"2017-01-08-trouble-shooting-with-my-blog","published":1,"updated":"2017-01-08T13:37:46.784Z","_id":"cixohzzn800167gvroz5hmnao","comments":1,"layout":"post","photos":[],"link":"","content":"<p>去年九月份之前还觉得写个人blog是一件很奢侈的事情，现在几个月过去了，很多问题都能够自己在网上找到答案。记录下来的问题也越来越多，如果想要给自己的blog一个值得置顶的文章的话，我觉得一篇记录使用hexo过程中的一些解决问题的方法的文章是再合适不过的了。<br><br><img src=\"http://odzl05jxx.bkt.clouddn.com/163216sn1ziyyaef4zaeps.jpg?imageView2/2/w/600\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h3 id=\"1-经常更新yilia的theme\"><a href=\"#1-经常更新yilia的theme\" class=\"headerlink\" title=\"1. 经常更新yilia的theme\"></a>1. 经常更新yilia的theme</h3><p><a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"external\">yilia</a>主题经常会更新，及时更新theme会发现很多新的特性及bug fix</p>\n<h3 id=\"2-部署相关\"><a href=\"#2-部署相关\" class=\"headerlink\" title=\"2. 部署相关\"></a>2. 部署相关</h3><ul>\n<li><p>部署到github</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean <span class=\"comment\">//清除缓存</span></div><div class=\"line\">hexo g -d <span class=\"comment\">//一步到位 = hexo g + hexo d</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>部署过程中出现的一些错误</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g -d</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">ERROR Process failed: _posts/<span class=\"number\">2016</span>-<span class=\"number\">12</span>-<span class=\"number\">10</span>-adb-command.md</div><div class=\"line\">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line <span class=\"number\">3</span>, column <span class=\"number\">11</span>:</div><div class=\"line\">    categories:  [技术]</div><div class=\"line\">              ^</div><div class=\"line\">    <span class=\"function\">at <span class=\"title\">generateError</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">162</span>:<span class=\"number\">10</span>)</span></span></div><div class=\"line\">    at <span class=\"title\">throwError</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">168</span>:<span class=\"number\">9</span>)</span></div><div class=\"line\">    at <span class=\"title\">readBlockMapping</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">1040</span>:<span class=\"number\">9</span>)</span></div><div class=\"line\">    at <span class=\"title\">composeNode</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">1326</span>:<span class=\"number\">12</span>)</span></div><div class=\"line\">    at <span class=\"title\">readDocument</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">1488</span>:<span class=\"number\">3</span>)</span></div><div class=\"line\">    at <span class=\"title\">loadDocuments</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">1544</span>:<span class=\"number\">5</span>)</span></div><div class=\"line\">    at Object.<span class=\"title\">load</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">1561</span>:<span class=\"number\">19</span>)</span></div><div class=\"line\">    at <span class=\"title\">parseYAML</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:<span class=\"number\">80</span>:<span class=\"number\">21</span>)</span></div><div class=\"line\">    at <span class=\"title\">parse</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:<span class=\"number\">56</span>:<span class=\"number\">12</span>)</span></div><div class=\"line\">    at D:\\Blog\\github\\node_modules\\hexo\\lib\\plugins\\processor\\post.js:52:18</div><div class=\"line\">    at <span class=\"title\">tryCatcher</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\util.js:<span class=\"number\">16</span>:<span class=\"number\">23</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromiseFromHandler</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">507</span>:<span class=\"number\">35</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">567</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise0</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">612</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromises</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">691</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_fulfill</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">636</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at PromiseArray.<span class=\"title\">_resolve</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">125</span>:<span class=\"number\">19</span>)</span></div><div class=\"line\">    at PromiseArray.<span class=\"title\">_promiseFulfilled</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">143</span>:<span class=\"number\">14</span>)</span></div><div class=\"line\">    at PromiseArray.<span class=\"title\">_iterate</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">113</span>:<span class=\"number\">31</span>)</span></div><div class=\"line\">    at PromiseArray.init [as _init] <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">77</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">564</span>:<span class=\"number\">21</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise0</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">612</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromises</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">691</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_fulfill</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">636</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at PromiseArray.<span class=\"title\">_resolve</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">125</span>:<span class=\"number\">19</span>)</span></div><div class=\"line\">    at PromiseArray.<span class=\"title\">_promiseFulfilled</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">143</span>:<span class=\"number\">14</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">572</span>:<span class=\"number\">26</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise0</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">612</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromises</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">691</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_fulfill</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">636</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_resolveCallback</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">431</span>:<span class=\"number\">57</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromiseFromHandler</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">522</span>:<span class=\"number\">17</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">567</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise0</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">612</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromises</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">691</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_fulfill</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">636</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21</div><div class=\"line\">    at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-fs\\node_modules\\graceful-fs\\graceful-fs.js:78:16</div><div class=\"line\">    at <span class=\"title\">tryToString</span> <span class=\"params\">(fs.js:<span class=\"number\">455</span>:<span class=\"number\">3</span>)</span></div><div class=\"line\">    at FSReqWrap.readFileAfterClose [as oncomplete] <span class=\"params\">(fs.js:<span class=\"number\">442</span>:<span class=\"number\">12</span>)</span></div><div class=\"line\">INFO  Files loaded in 1.48 s</div><div class=\"line\">INFO  Generated: sitemap.xml</div><div class=\"line\">INFO  Generated: atom.xml</div><div class=\"line\">INFO  Generated: 2017/01/08/2017-01-08-trouble-shooting-with-my-blog/index.html</div><div class=\"line\">INFO  Generated: index.html</div><div class=\"line\">INFO  4 files generated in 2.26 s</div><div class=\"line\">INFO  Deploying: git</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-一些功能的实现\"><a href=\"#3-一些功能的实现\" class=\"headerlink\" title=\"3. 一些功能的实现\"></a>3. 一些功能的实现</h3><ul>\n<li>置顶功能<br>  将node_modules/hexo-generator-index/lib/generator.js的文件内容替换成一下内容</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> pagination = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-pagination'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">locals</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> config = <span class=\"keyword\">this</span>.config;</div><div class=\"line\">  <span class=\"keyword\">var</span> posts = locals.posts;</div><div class=\"line\">    posts.data = posts.data.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a.top &amp;&amp; b.top) &#123; <span class=\"comment\">// 两篇文章top都有定义</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(a.top == b.top) <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 若top值一样则按照文章日期降序排</span></div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.top - a.top; <span class=\"comment\">// 否则按照top值降序排</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.top &amp;&amp; !b.top) &#123; <span class=\"comment\">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!a.top &amp;&amp; b.top) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 都没定义按照文章日期降序排</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"keyword\">var</span> paginationDir = config.pagination_dir || <span class=\"string\">'page'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> pagination(<span class=\"string\">''</span>, posts, &#123;</div><div class=\"line\">    perPage: config.index_generator.per_page,</div><div class=\"line\">    layout: [<span class=\"string\">'index'</span>, <span class=\"string\">'archive'</span>],</div><div class=\"line\">    format: paginationDir + <span class=\"string\">'/%d/'</span>,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">    __index: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>同时在文章开头添加top : 1即可 ，实际排序按照这个数字从大到小排序<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> title: Hexo置顶文章</div><div class=\"line\">date: 2016-11-11 23:26:22</div><div class=\"line\">tags:[置顶]</div><div class=\"line\">categories: Hexo</div><div class=\"line\">top: 0 # 0或者1</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4-markdown语法\"><a href=\"#4-markdown语法\" class=\"headerlink\" title=\"4. markdown语法\"></a>4. markdown语法</h3><h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><a href=\"http://yanhuili.github.io/2016/11/21/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%8A%80%E5%B7%A7/\" target=\"_blank\" rel=\"external\">Hexo博文置顶技巧</a></li>\n</ul>\n","excerpt":"<p>去年九月份之前还觉得写个人blog是一件很奢侈的事情，现在几个月过去了，很多问题都能够自己在网上找到答案。记录下来的问题也越来越多，如果想要给自己的blog一个值得置顶的文章的话，我觉得一篇记录使用hexo过程中的一些解决问题的方法的文章是再合适不过的了。</br><br><img src=\"http://odzl05jxx.bkt.clouddn.com/163216sn1ziyyaef4zaeps.jpg?imageView2/2/w/600\" alt=\"\"></p>","more":"<h3 id=\"1-经常更新yilia的theme\"><a href=\"#1-经常更新yilia的theme\" class=\"headerlink\" title=\"1. 经常更新yilia的theme\"></a>1. 经常更新yilia的theme</h3><p><a href=\"https://github.com/litten/hexo-theme-yilia\">yilia</a>主题经常会更新，及时更新theme会发现很多新的特性及bug fix</p>\n<h3 id=\"2-部署相关\"><a href=\"#2-部署相关\" class=\"headerlink\" title=\"2. 部署相关\"></a>2. 部署相关</h3><ul>\n<li><p>部署到github</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean <span class=\"comment\">//清除缓存</span></div><div class=\"line\">hexo g -d <span class=\"comment\">//一步到位 = hexo g + hexo d</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>部署过程中出现的一些错误</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g -d</div><div class=\"line\">INFO  Start processing</div><div class=\"line\">ERROR Process failed: _posts/<span class=\"number\">2016</span>-<span class=\"number\">12</span>-<span class=\"number\">10</span>-adb-command.md</div><div class=\"line\">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line <span class=\"number\">3</span>, column <span class=\"number\">11</span>:</div><div class=\"line\">    categories:  [技术]</div><div class=\"line\">              ^</div><div class=\"line\">    <span class=\"function\">at <span class=\"title\">generateError</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">162</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at <span class=\"title\">throwError</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">168</span>:<span class=\"number\">9</span>)</span></div><div class=\"line\">    at <span class=\"title\">readBlockMapping</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">1040</span>:<span class=\"number\">9</span>)</span></div><div class=\"line\">    at <span class=\"title\">composeNode</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">1326</span>:<span class=\"number\">12</span>)</span></div><div class=\"line\">    at <span class=\"title\">readDocument</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">1488</span>:<span class=\"number\">3</span>)</span></div><div class=\"line\">    at <span class=\"title\">loadDocuments</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">1544</span>:<span class=\"number\">5</span>)</span></div><div class=\"line\">    at Object.<span class=\"title\">load</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:<span class=\"number\">1561</span>:<span class=\"number\">19</span>)</span></div><div class=\"line\">    at <span class=\"title\">parseYAML</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:<span class=\"number\">80</span>:<span class=\"number\">21</span>)</span></div><div class=\"line\">    at <span class=\"title\">parse</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:<span class=\"number\">56</span>:<span class=\"number\">12</span>)</span></div><div class=\"line\">    at D:\\Blog\\github\\node_modules\\hexo\\lib\\plugins\\processor\\post.js:52:18</div><div class=\"line\">    at <span class=\"title\">tryCatcher</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\util.js:<span class=\"number\">16</span>:<span class=\"number\">23</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromiseFromHandler</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">507</span>:<span class=\"number\">35</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">567</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise0</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">612</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromises</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">691</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_fulfill</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">636</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at PromiseArray.<span class=\"title\">_resolve</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">125</span>:<span class=\"number\">19</span>)</span></div><div class=\"line\">    at PromiseArray.<span class=\"title\">_promiseFulfilled</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">143</span>:<span class=\"number\">14</span>)</span></div><div class=\"line\">    at PromiseArray.<span class=\"title\">_iterate</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">113</span>:<span class=\"number\">31</span>)</span></div><div class=\"line\">    at PromiseArray.init [as _init] <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">77</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">564</span>:<span class=\"number\">21</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise0</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">612</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromises</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">691</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_fulfill</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">636</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at PromiseArray.<span class=\"title\">_resolve</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">125</span>:<span class=\"number\">19</span>)</span></div><div class=\"line\">    at PromiseArray.<span class=\"title\">_promiseFulfilled</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:<span class=\"number\">143</span>:<span class=\"number\">14</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">572</span>:<span class=\"number\">26</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise0</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">612</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromises</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">691</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_fulfill</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">636</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_resolveCallback</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">431</span>:<span class=\"number\">57</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromiseFromHandler</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">522</span>:<span class=\"number\">17</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">567</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromise0</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">612</span>:<span class=\"number\">10</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_settlePromises</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">691</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at Promise.<span class=\"title\">_fulfill</span> <span class=\"params\">(D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:<span class=\"number\">636</span>:<span class=\"number\">18</span>)</span></div><div class=\"line\">    at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21</div><div class=\"line\">    at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-fs\\node_modules\\graceful-fs\\graceful-fs.js:78:16</div><div class=\"line\">    at <span class=\"title\">tryToString</span> <span class=\"params\">(fs.js:<span class=\"number\">455</span>:<span class=\"number\">3</span>)</span></div><div class=\"line\">    at FSReqWrap.readFileAfterClose [as oncomplete] <span class=\"params\">(fs.js:<span class=\"number\">442</span>:<span class=\"number\">12</span>)</span></div><div class=\"line\">INFO  Files loaded in 1.48 s</div><div class=\"line\">INFO  Generated: sitemap.xml</div><div class=\"line\">INFO  Generated: atom.xml</div><div class=\"line\">INFO  Generated: 2017/01/08/2017-01-08-trouble-shooting-with-my-blog/index.html</div><div class=\"line\">INFO  Generated: index.html</div><div class=\"line\">INFO  4 files generated in 2.26 s</div><div class=\"line\">INFO  Deploying: git</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"3-一些功能的实现\"><a href=\"#3-一些功能的实现\" class=\"headerlink\" title=\"3. 一些功能的实现\"></a>3. 一些功能的实现</h3><ul>\n<li>置顶功能<br>  将node_modules/hexo-generator-index/lib/generator.js的文件内容替换成一下内容</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> pagination = <span class=\"built_in\">require</span>(<span class=\"string\">'hexo-pagination'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">locals</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> config = <span class=\"keyword\">this</span>.config;</div><div class=\"line\">  <span class=\"keyword\">var</span> posts = locals.posts;</div><div class=\"line\">    posts.data = posts.data.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a.top &amp;&amp; b.top) &#123; <span class=\"comment\">// 两篇文章top都有定义</span></div><div class=\"line\">            <span class=\"keyword\">if</span>(a.top == b.top) <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 若top值一样则按照文章日期降序排</span></div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.top - a.top; <span class=\"comment\">// 否则按照top值降序排</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a.top &amp;&amp; !b.top) &#123; <span class=\"comment\">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!a.top &amp;&amp; b.top) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> b.date - a.date; <span class=\"comment\">// 都没定义按照文章日期降序排</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">  <span class=\"keyword\">var</span> paginationDir = config.pagination_dir || <span class=\"string\">'page'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> pagination(<span class=\"string\">''</span>, posts, &#123;</div><div class=\"line\">    perPage: config.index_generator.per_page,</div><div class=\"line\">    layout: [<span class=\"string\">'index'</span>, <span class=\"string\">'archive'</span>],</div><div class=\"line\">    format: paginationDir + <span class=\"string\">'/%d/'</span>,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">    __index: <span class=\"literal\">true</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>同时在文章开头添加top : 1即可 ，实际排序按照这个数字从大到小排序<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> title: Hexo置顶文章</div><div class=\"line\">date: 2016-11-11 23:26:22</div><div class=\"line\">tags:[置顶]</div><div class=\"line\">categories: Hexo</div><div class=\"line\">top: 0 # 0或者1</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"4-markdown语法\"><a href=\"#4-markdown语法\" class=\"headerlink\" title=\"4. markdown语法\"></a>4. markdown语法</h3><h3 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h3><ul>\n<li><a href=\"http://yanhuili.github.io/2016/11/21/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%8A%80%E5%B7%A7/\">Hexo博文置顶技巧</a></li>\n</ul>"},{"title":"replace butterKnife with databinding","date":"2016-09-22T07:17:39.000Z","_content":"\n\nYigit Boyar 在2015年的android Dev summit上介绍了Databinding，当时好像提到一句:\n\"no binding libraries will be created from now on \"，大意如此。\n本文介绍使用Databinding替代ButterKnife的用法\n## 本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。\n<!--more-->\n\n# 1.在Activity中使用\n*before*\n```java\nclass ExampleActivity extends Activity {\n  @Bind(R.id.title) TextView title;\n  @Bind(R.id.subtitle) TextView subtitle;\n  @Bind(R.id.footer) TextView footer;\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.simple_activity);\n    ButterKnife.bind(this);\n  }\n}\n```\n*after*\n首先需要将xml文件添加 **Layout** tag \n`R.layout.smple_activity`\n```xml\n<layout>\n  <LinearLayout>\n    <TextView android:id=\"@+id/title\">\n    <TextView android:id=\"@+id/subtitle\">\n    <TextView android:id=\"@+id/footer\">\n  </LinearLayout>\n</layout>\n```\n```java\nclass ExampleActivity extends Activity {\n  private ActivitySampleBinding binding;\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    binding = DataBindingUtils.setContentView(this, R.layout.simple_activity);\n    binding.title.setText(\"I am Title\");\n    //no more findViewById!!!\n  }\n}\n```\n\n# 2.在Fragment中使用\n*before*\n```java\npublic class FancyFragment extends Fragment {\n  @Bind(R.id.button1) Button button1;\n  @Bind(R.id.button2) Button button2;\n  @Override\n  public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.fancy_fragment, container, false);\n    ButterKnife.bind(this, view);\n    // TODO Use fields...\n    return view;\n  }\n}\n```\n\n*after*\n```java\npublic class FancyFragment extends Fragment {\n  private FragmentFancyBinding binding;\n\n  @Override\n  public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    binding = DataBindingUtil.inflate(inflater,R.layout.fragment_fancy, container, false);\n\t  return binding.getRoot();\n  }\n\n}\n```\n\n# 3.在ViewHolder中使用\n\n*before*\n```java\npublic class MyAdapter extends BaseAdapter {\n  @Override\n  public View getView(int position, View view, ViewGroup parent) {\n    ViewHolder holder;\n    if (view != null) {\n      holder = (ViewHolder) view.getTag();\n    } else {\n      view = inflater.inflate(R.layout.list_item_sample, parent, false);\n      holder = new ViewHolder(view);\n      view.setTag(holder);\n    }\n\n    holder.name.setText(\"John Doe\");\n    // etc...\n\n    return view;\n  }\n\n  static class ViewHolder {\n    @Bind(R.id.title) TextView name;\n    @Bind(R.id.job_title) TextView jobTitle;\n    public ViewHolder(View view) {\n      ButterKnife.bind(this, view);\n    }\n  }\n}\n```\n\n*after*\n### ListView \n```java\npublic class MyAdapter extends BaseAdapter {\n  @Override\n  public View getView(int position, View convertView, ViewGroup parent) {\n      ListItemSampleBinding binding;\n      if (convertView == null) {\n          binding = DataBindingUtil.inflate(inflater, R.layout.list_item_sample, parent, false);\n          convertView = binding.getRoot();\n          convertView.setTag(binding);\n      } else {\n          binding = (ListItemSampleBinding) convertView.getTag();\n      }\n      binding.setUser(getItem(position));\n      // binding.name.setText(\"John Doe\");\n\n      return convertView;\n  }\n}\n```\n\n### recyclerView\n```java\npublic class SampleRecyclerAdapter extends RecyclerView.Adapter<SampleRecyclerAdapter.BindingHolder> {\n\n    @Override\n    public RegisterableDeviceListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n      final View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_sample, parent, false);\n      return new BindingHolder(v);\n    }\n\n  @Override\n  public void onBindViewHolder(BindingHolder holder, int position) {\n    holder.getBinding().setVariable(BR.user, getItem(position));\n  }\n\n  static class BindingHolder extends RecyclerView.ViewHolder {\n    private final ViewDataBinding binding;\n\n    public BindingHolder(View itemView) {\n      super(itemView);\n      binding = DataBindingUtil.bind(itemView)\n    }\n\n    public ViewDataBinding getBinding() {\n      return binding;\n    }\n  }\n}\n```\n\n# 4.在CustomView中使用\n在自定义View(ViewGroup)的时候，可以用ButterKnife减少自定义ViewGroup中的findViewById,使用Databinding之后是这样的。\n```java\npublic class Pagination extends RelativeLayout {\n  private ViewPaginationBinding binding;\n\n  public Pagination(Context context) {\n    this(context, null);\n  }\n\n  public Pagination(Context context, AttributeSet attrs) {\n    super(context, attrs);\n    binding = DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.view_pagination, this, true);\n  }\n\n  public static void setListener(Pagination paginate, View target, OnPaginationClickListener listener) {\n    if (listener != null) {\n      target.setOnClickListener(_v -> listener.onClick(paginate));\n    }\n  }\n\n  @BindingAdapter({\"android:onPrevButtonClicked\"})\n  public static void setPrevClickListener(Pagination view, OnPaginationClickListener listener) {\n    setListener(view, view.binding.btnPrevPage, listener);\n  }\n\n  @BindingAdapter({\"android:onNextButtonClicked\"})\n  public static void setNextClickListener(Pagination view, OnPaginationClickListener listener) {\n    setListener(view, view.binding.btnNextPage, listener);\n  }\n\n  public interface OnPaginationClickListener {\n    void onClick(Pagination pagination);\n  }\n}\n```\n\n# 5.EventHandler, setDefaultComponent...</br>\nDatabinding还有很多高级用法，目前给我带来的好处就是明显减少了boilerplate code </br>\nSo ,感谢ButterKnife给我们带来的便利，Googbye ButterKnife，Hello DataBinding!\n\n# Reference\n\n 1. [Data Binding Library](https://developer.android.com/topic/libraries/data-binding/index.html)\n 2. [data-binding-android-boyar-mount](https://realm.io/cn/news/data-binding-android-boyar-mount/) \n 3. [Advanced Data Bindinding](https://www.youtube.com/watch?v=DAmMN7m3wLU) Two-Way Data Binding at google io 2016\n 4. [Android Dev Summit 2015](https://www.youtube.com/watch?v=NBbeQMOcnZ0)\n 5. [Goodbye Butter Knife](http://qiita.com/izumin5210/items/2784576d86ce6b9b51e6)\n 6. [Google Sample](https://github.com/google/android-ui-toolkit-demos)\n \n","source":"_posts/replace-butterKnife-with-databinding.md","raw":"---\ntitle: replace butterKnife with databinding\ndate: 2016-09-22 15:17:39\ncategories: blog  \ntags: [databinding, Butterknife,android]\n---\n\n\nYigit Boyar 在2015年的android Dev summit上介绍了Databinding，当时好像提到一句:\n\"no binding libraries will be created from now on \"，大意如此。\n本文介绍使用Databinding替代ButterKnife的用法\n## 本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。\n<!--more-->\n\n# 1.在Activity中使用\n*before*\n```java\nclass ExampleActivity extends Activity {\n  @Bind(R.id.title) TextView title;\n  @Bind(R.id.subtitle) TextView subtitle;\n  @Bind(R.id.footer) TextView footer;\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.simple_activity);\n    ButterKnife.bind(this);\n  }\n}\n```\n*after*\n首先需要将xml文件添加 **Layout** tag \n`R.layout.smple_activity`\n```xml\n<layout>\n  <LinearLayout>\n    <TextView android:id=\"@+id/title\">\n    <TextView android:id=\"@+id/subtitle\">\n    <TextView android:id=\"@+id/footer\">\n  </LinearLayout>\n</layout>\n```\n```java\nclass ExampleActivity extends Activity {\n  private ActivitySampleBinding binding;\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    binding = DataBindingUtils.setContentView(this, R.layout.simple_activity);\n    binding.title.setText(\"I am Title\");\n    //no more findViewById!!!\n  }\n}\n```\n\n# 2.在Fragment中使用\n*before*\n```java\npublic class FancyFragment extends Fragment {\n  @Bind(R.id.button1) Button button1;\n  @Bind(R.id.button2) Button button2;\n  @Override\n  public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.fancy_fragment, container, false);\n    ButterKnife.bind(this, view);\n    // TODO Use fields...\n    return view;\n  }\n}\n```\n\n*after*\n```java\npublic class FancyFragment extends Fragment {\n  private FragmentFancyBinding binding;\n\n  @Override\n  public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    binding = DataBindingUtil.inflate(inflater,R.layout.fragment_fancy, container, false);\n\t  return binding.getRoot();\n  }\n\n}\n```\n\n# 3.在ViewHolder中使用\n\n*before*\n```java\npublic class MyAdapter extends BaseAdapter {\n  @Override\n  public View getView(int position, View view, ViewGroup parent) {\n    ViewHolder holder;\n    if (view != null) {\n      holder = (ViewHolder) view.getTag();\n    } else {\n      view = inflater.inflate(R.layout.list_item_sample, parent, false);\n      holder = new ViewHolder(view);\n      view.setTag(holder);\n    }\n\n    holder.name.setText(\"John Doe\");\n    // etc...\n\n    return view;\n  }\n\n  static class ViewHolder {\n    @Bind(R.id.title) TextView name;\n    @Bind(R.id.job_title) TextView jobTitle;\n    public ViewHolder(View view) {\n      ButterKnife.bind(this, view);\n    }\n  }\n}\n```\n\n*after*\n### ListView \n```java\npublic class MyAdapter extends BaseAdapter {\n  @Override\n  public View getView(int position, View convertView, ViewGroup parent) {\n      ListItemSampleBinding binding;\n      if (convertView == null) {\n          binding = DataBindingUtil.inflate(inflater, R.layout.list_item_sample, parent, false);\n          convertView = binding.getRoot();\n          convertView.setTag(binding);\n      } else {\n          binding = (ListItemSampleBinding) convertView.getTag();\n      }\n      binding.setUser(getItem(position));\n      // binding.name.setText(\"John Doe\");\n\n      return convertView;\n  }\n}\n```\n\n### recyclerView\n```java\npublic class SampleRecyclerAdapter extends RecyclerView.Adapter<SampleRecyclerAdapter.BindingHolder> {\n\n    @Override\n    public RegisterableDeviceListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n      final View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_sample, parent, false);\n      return new BindingHolder(v);\n    }\n\n  @Override\n  public void onBindViewHolder(BindingHolder holder, int position) {\n    holder.getBinding().setVariable(BR.user, getItem(position));\n  }\n\n  static class BindingHolder extends RecyclerView.ViewHolder {\n    private final ViewDataBinding binding;\n\n    public BindingHolder(View itemView) {\n      super(itemView);\n      binding = DataBindingUtil.bind(itemView)\n    }\n\n    public ViewDataBinding getBinding() {\n      return binding;\n    }\n  }\n}\n```\n\n# 4.在CustomView中使用\n在自定义View(ViewGroup)的时候，可以用ButterKnife减少自定义ViewGroup中的findViewById,使用Databinding之后是这样的。\n```java\npublic class Pagination extends RelativeLayout {\n  private ViewPaginationBinding binding;\n\n  public Pagination(Context context) {\n    this(context, null);\n  }\n\n  public Pagination(Context context, AttributeSet attrs) {\n    super(context, attrs);\n    binding = DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.view_pagination, this, true);\n  }\n\n  public static void setListener(Pagination paginate, View target, OnPaginationClickListener listener) {\n    if (listener != null) {\n      target.setOnClickListener(_v -> listener.onClick(paginate));\n    }\n  }\n\n  @BindingAdapter({\"android:onPrevButtonClicked\"})\n  public static void setPrevClickListener(Pagination view, OnPaginationClickListener listener) {\n    setListener(view, view.binding.btnPrevPage, listener);\n  }\n\n  @BindingAdapter({\"android:onNextButtonClicked\"})\n  public static void setNextClickListener(Pagination view, OnPaginationClickListener listener) {\n    setListener(view, view.binding.btnNextPage, listener);\n  }\n\n  public interface OnPaginationClickListener {\n    void onClick(Pagination pagination);\n  }\n}\n```\n\n# 5.EventHandler, setDefaultComponent...</br>\nDatabinding还有很多高级用法，目前给我带来的好处就是明显减少了boilerplate code </br>\nSo ,感谢ButterKnife给我们带来的便利，Googbye ButterKnife，Hello DataBinding!\n\n# Reference\n\n 1. [Data Binding Library](https://developer.android.com/topic/libraries/data-binding/index.html)\n 2. [data-binding-android-boyar-mount](https://realm.io/cn/news/data-binding-android-boyar-mount/) \n 3. [Advanced Data Bindinding](https://www.youtube.com/watch?v=DAmMN7m3wLU) Two-Way Data Binding at google io 2016\n 4. [Android Dev Summit 2015](https://www.youtube.com/watch?v=NBbeQMOcnZ0)\n 5. [Goodbye Butter Knife](http://qiita.com/izumin5210/items/2784576d86ce6b9b51e6)\n 6. [Google Sample](https://github.com/google/android-ui-toolkit-demos)\n \n","slug":"replace-butterKnife-with-databinding","published":1,"updated":"2016-10-06T09:04:53.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzn800197gvrj0nmy1rs","content":"<p>Yigit Boyar 在2015年的android Dev summit上介绍了Databinding，当时好像提到一句:<br>“no binding libraries will be created from now on “，大意如此。<br>本文介绍使用Databinding替代ButterKnife的用法</p>\n<h2 id=\"本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。\"><a href=\"#本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。\" class=\"headerlink\" title=\"本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。\"></a>本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。</h2><a id=\"more\"></a>\n<h1 id=\"1-在Activity中使用\"><a href=\"#1-在Activity中使用\" class=\"headerlink\" title=\"1.在Activity中使用\"></a>1.在Activity中使用</h1><p><em>before</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Bind</span>(R.id.title) TextView title;</div><div class=\"line\">  <span class=\"meta\">@Bind</span>(R.id.subtitle) TextView subtitle;</div><div class=\"line\">  <span class=\"meta\">@Bind</span>(R.id.footer) TextView footer;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.simple_activity);</div><div class=\"line\">    ButterKnife.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><em>after</em><br>首先需要将xml文件添加 <strong>Layout</strong> tag<br><code>R.layout.smple_activity</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/subtitle\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/footer\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ActivitySampleBinding binding;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    binding = DataBindingUtils.setContentView(<span class=\"keyword\">this</span>, R.layout.simple_activity);</div><div class=\"line\">    binding.title.setText(<span class=\"string\">\"I am Title\"</span>);</div><div class=\"line\">    <span class=\"comment\">//no more findViewById!!!</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"2-在Fragment中使用\"><a href=\"#2-在Fragment中使用\" class=\"headerlink\" title=\"2.在Fragment中使用\"></a>2.在Fragment中使用</h1><p><em>before</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FancyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Bind</span>(R.id.button1) Button button1;</div><div class=\"line\">  <span class=\"meta\">@Bind</span>(R.id.button2) Button button2;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">    ButterKnife.bind(<span class=\"keyword\">this</span>, view);</div><div class=\"line\">    <span class=\"comment\">// TODO Use fields...</span></div><div class=\"line\">    <span class=\"keyword\">return</span> view;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><em>after</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FancyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> FragmentFancyBinding binding;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    binding = DataBindingUtil.inflate(inflater,R.layout.fragment_fancy, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">true  <span class=\"keyword\">return</span> binding.getRoot();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-在ViewHolder中使用\"><a href=\"#3-在ViewHolder中使用\" class=\"headerlink\" title=\"3.在ViewHolder中使用\"></a>3.在ViewHolder中使用</h1><p><em>before</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View view, ViewGroup parent)</span> </span>&#123;</div><div class=\"line\">    ViewHolder holder;</div><div class=\"line\">    <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      holder = (ViewHolder) view.getTag();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      view = inflater.inflate(R.layout.list_item_sample, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">      holder = <span class=\"keyword\">new</span> ViewHolder(view);</div><div class=\"line\">      view.setTag(holder);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    holder.name.setText(<span class=\"string\">\"John Doe\"</span>);</div><div class=\"line\">    <span class=\"comment\">// etc...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> view;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.title) TextView name;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.job_title) TextView jobTitle;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">      ButterKnife.bind(<span class=\"keyword\">this</span>, view);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><em>after</em></p>\n<h3 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class=\"line\">      ListItemSampleBinding binding;</div><div class=\"line\">      <span class=\"keyword\">if</span> (convertView == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          binding = DataBindingUtil.inflate(inflater, R.layout.list_item_sample, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">          convertView = binding.getRoot();</div><div class=\"line\">          convertView.setTag(binding);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          binding = (ListItemSampleBinding) convertView.getTag();</div><div class=\"line\">      &#125;</div><div class=\"line\">      binding.setUser(getItem(position));</div><div class=\"line\">      <span class=\"comment\">// binding.name.setText(\"John Doe\");</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> convertView;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"recyclerView\"><a href=\"#recyclerView\" class=\"headerlink\" title=\"recyclerView\"></a>recyclerView</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleRecyclerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">SampleRecyclerAdapter</span>.<span class=\"title\">BindingHolder</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> RegisterableDeviceListAdapter.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_sample, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BindingHolder(v);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(BindingHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    holder.getBinding().setVariable(BR.user, getItem(position));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BindingHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ViewDataBinding binding;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BindingHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\">      binding = DataBindingUtil.bind(itemView)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ViewDataBinding <span class=\"title\">getBinding</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> binding;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"4-在CustomView中使用\"><a href=\"#4-在CustomView中使用\" class=\"headerlink\" title=\"4.在CustomView中使用\"></a>4.在CustomView中使用</h1><p>在自定义View(ViewGroup)的时候，可以用ButterKnife减少自定义ViewGroup中的findViewById,使用Databinding之后是这样的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pagination</span> <span class=\"keyword\">extends</span> <span class=\"title\">RelativeLayout</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ViewPaginationBinding binding;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pagination</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(context, <span class=\"keyword\">null</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pagination</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">    binding = DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.view_pagination, <span class=\"keyword\">this</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">(Pagination paginate, View target, OnPaginationClickListener listener)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      target.setOnClickListener(_v -&gt; listener.onClick(paginate));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@BindingAdapter</span>(&#123;<span class=\"string\">\"android:onPrevButtonClicked\"</span>&#125;)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrevClickListener</span><span class=\"params\">(Pagination view, OnPaginationClickListener listener)</span> </span>&#123;</div><div class=\"line\">    setListener(view, view.binding.btnPrevPage, listener);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@BindingAdapter</span>(&#123;<span class=\"string\">\"android:onNextButtonClicked\"</span>&#125;)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setNextClickListener</span><span class=\"params\">(Pagination view, OnPaginationClickListener listener)</span> </span>&#123;</div><div class=\"line\">    setListener(view, view.binding.btnNextPage, listener);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnPaginationClickListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(Pagination pagination)</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-EventHandler-setDefaultComponent…\"><a href=\"#5-EventHandler-setDefaultComponent…\" class=\"headerlink\" title=\"5.EventHandler, setDefaultComponent…\"></a>5.EventHandler, setDefaultComponent…<br></h1><p>Databinding还有很多高级用法，目前给我带来的好处就是明显减少了boilerplate code <br><br>So ,感谢ButterKnife给我们带来的便利，Googbye ButterKnife，Hello DataBinding!</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ol>\n<li><a href=\"https://developer.android.com/topic/libraries/data-binding/index.html\" target=\"_blank\" rel=\"external\">Data Binding Library</a></li>\n<li><a href=\"https://realm.io/cn/news/data-binding-android-boyar-mount/\" target=\"_blank\" rel=\"external\">data-binding-android-boyar-mount</a> </li>\n<li><a href=\"https://www.youtube.com/watch?v=DAmMN7m3wLU\" target=\"_blank\" rel=\"external\">Advanced Data Bindinding</a> Two-Way Data Binding at google io 2016</li>\n<li><a href=\"https://www.youtube.com/watch?v=NBbeQMOcnZ0\" target=\"_blank\" rel=\"external\">Android Dev Summit 2015</a></li>\n<li><a href=\"http://qiita.com/izumin5210/items/2784576d86ce6b9b51e6\" target=\"_blank\" rel=\"external\">Goodbye Butter Knife</a></li>\n<li><a href=\"https://github.com/google/android-ui-toolkit-demos\" target=\"_blank\" rel=\"external\">Google Sample</a></li>\n</ol>\n","excerpt":"<p>Yigit Boyar 在2015年的android Dev summit上介绍了Databinding，当时好像提到一句:<br>“no binding libraries will be created from now on “，大意如此。<br>本文介绍使用Databinding替代ButterKnife的用法</p>\n<h2 id=\"本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。\"><a href=\"#本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。\" class=\"headerlink\" title=\"本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。\"></a>本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。</h2>","more":"<h1 id=\"1-在Activity中使用\"><a href=\"#1-在Activity中使用\" class=\"headerlink\" title=\"1.在Activity中使用\"></a>1.在Activity中使用</h1><p><em>before</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Bind</span>(R.id.title) TextView title;</div><div class=\"line\">  <span class=\"meta\">@Bind</span>(R.id.subtitle) TextView subtitle;</div><div class=\"line\">  <span class=\"meta\">@Bind</span>(R.id.footer) TextView footer;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.simple_activity);</div><div class=\"line\">    ButterKnife.bind(<span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><em>after</em><br>首先需要将xml文件添加 <strong>Layout</strong> tag<br><code>R.layout.smple_activity</code><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layout</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/title\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/subtitle\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/footer\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layout</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ActivitySampleBinding binding;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    binding = DataBindingUtils.setContentView(<span class=\"keyword\">this</span>, R.layout.simple_activity);</div><div class=\"line\">    binding.title.setText(<span class=\"string\">\"I am Title\"</span>);</div><div class=\"line\">    <span class=\"comment\">//no more findViewById!!!</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"2-在Fragment中使用\"><a href=\"#2-在Fragment中使用\" class=\"headerlink\" title=\"2.在Fragment中使用\"></a>2.在Fragment中使用</h1><p><em>before</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FancyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Bind</span>(R.id.button1) Button button1;</div><div class=\"line\">  <span class=\"meta\">@Bind</span>(R.id.button2) Button button2;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">    ButterKnife.bind(<span class=\"keyword\">this</span>, view);</div><div class=\"line\">    <span class=\"comment\">// TODO Use fields...</span></div><div class=\"line\">    <span class=\"keyword\">return</span> view;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><em>after</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FancyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> FragmentFancyBinding binding;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    binding = DataBindingUtil.inflate(inflater,R.layout.fragment_fancy, container, <span class=\"keyword\">false</span>);</div><div class=\"line\">true  <span class=\"keyword\">return</span> binding.getRoot();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-在ViewHolder中使用\"><a href=\"#3-在ViewHolder中使用\" class=\"headerlink\" title=\"3.在ViewHolder中使用\"></a>3.在ViewHolder中使用</h1><p><em>before</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View view, ViewGroup parent)</span> </span>&#123;</div><div class=\"line\">    ViewHolder holder;</div><div class=\"line\">    <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      holder = (ViewHolder) view.getTag();</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      view = inflater.inflate(R.layout.list_item_sample, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">      holder = <span class=\"keyword\">new</span> ViewHolder(view);</div><div class=\"line\">      view.setTag(holder);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    holder.name.setText(<span class=\"string\">\"John Doe\"</span>);</div><div class=\"line\">    <span class=\"comment\">// etc...</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> view;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.title) TextView name;</div><div class=\"line\">    <span class=\"meta\">@Bind</span>(R.id.job_title) TextView jobTitle;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">      ButterKnife.bind(<span class=\"keyword\">this</span>, view);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><em>after</em></p>\n<h3 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class=\"line\">      ListItemSampleBinding binding;</div><div class=\"line\">      <span class=\"keyword\">if</span> (convertView == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">          binding = DataBindingUtil.inflate(inflater, R.layout.list_item_sample, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">          convertView = binding.getRoot();</div><div class=\"line\">          convertView.setTag(binding);</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          binding = (ListItemSampleBinding) convertView.getTag();</div><div class=\"line\">      &#125;</div><div class=\"line\">      binding.setUser(getItem(position));</div><div class=\"line\">      <span class=\"comment\">// binding.name.setText(\"John Doe\");</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> convertView;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"recyclerView\"><a href=\"#recyclerView\" class=\"headerlink\" title=\"recyclerView\"></a>recyclerView</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SampleRecyclerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">SampleRecyclerAdapter</span>.<span class=\"title\">BindingHolder</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> RegisterableDeviceListAdapter.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">final</span> View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_sample, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BindingHolder(v);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(BindingHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">    holder.getBinding().setVariable(BR.user, getItem(position));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BindingHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ViewDataBinding binding;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BindingHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\">      binding = DataBindingUtil.bind(itemView)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ViewDataBinding <span class=\"title\">getBinding</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> binding;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"4-在CustomView中使用\"><a href=\"#4-在CustomView中使用\" class=\"headerlink\" title=\"4.在CustomView中使用\"></a>4.在CustomView中使用</h1><p>在自定义View(ViewGroup)的时候，可以用ButterKnife减少自定义ViewGroup中的findViewById,使用Databinding之后是这样的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pagination</span> <span class=\"keyword\">extends</span> <span class=\"title\">RelativeLayout</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> ViewPaginationBinding binding;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pagination</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(context, <span class=\"keyword\">null</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pagination</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">    binding = DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.view_pagination, <span class=\"keyword\">this</span>, <span class=\"keyword\">true</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">(Pagination paginate, View target, OnPaginationClickListener listener)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      target.setOnClickListener(_v -&gt; listener.onClick(paginate));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@BindingAdapter</span>(&#123;<span class=\"string\">\"android:onPrevButtonClicked\"</span>&#125;)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setPrevClickListener</span><span class=\"params\">(Pagination view, OnPaginationClickListener listener)</span> </span>&#123;</div><div class=\"line\">    setListener(view, view.binding.btnPrevPage, listener);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@BindingAdapter</span>(&#123;<span class=\"string\">\"android:onNextButtonClicked\"</span>&#125;)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setNextClickListener</span><span class=\"params\">(Pagination view, OnPaginationClickListener listener)</span> </span>&#123;</div><div class=\"line\">    setListener(view, view.binding.btnNextPage, listener);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">OnPaginationClickListener</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(Pagination pagination)</span></span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"5-EventHandler-setDefaultComponent…\"><a href=\"#5-EventHandler-setDefaultComponent…\" class=\"headerlink\" title=\"5.EventHandler, setDefaultComponent…\"></a>5.EventHandler, setDefaultComponent…</br></h1><p>Databinding还有很多高级用法，目前给我带来的好处就是明显减少了boilerplate code </br><br>So ,感谢ButterKnife给我们带来的便利，Googbye ButterKnife，Hello DataBinding!</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ol>\n<li><a href=\"https://developer.android.com/topic/libraries/data-binding/index.html\">Data Binding Library</a></li>\n<li><a href=\"https://realm.io/cn/news/data-binding-android-boyar-mount/\">data-binding-android-boyar-mount</a> </li>\n<li><a href=\"https://www.youtube.com/watch?v=DAmMN7m3wLU\">Advanced Data Bindinding</a> Two-Way Data Binding at google io 2016</li>\n<li><a href=\"https://www.youtube.com/watch?v=NBbeQMOcnZ0\">Android Dev Summit 2015</a></li>\n<li><a href=\"http://qiita.com/izumin5210/items/2784576d86ce6b9b51e6\">Goodbye Butter Knife</a></li>\n<li><a href=\"https://github.com/google/android-ui-toolkit-demos\">Google Sample</a></li>\n</ol>"},{"title":"android使用selectableItemBackground的一些坑","date":"2016-09-23T11:56:39.000Z","_content":"\n> android:foreground=\"?android:attr/selectableItemBackground\"\n\n或是\n> android:background=\"?android:attr/selectableItemBackground\"\n\n这个xml属性最早是我学着写recyclerVeiw的item xml的时候接触到的，简单来说就是，在API 21及以上，用户点击这个itemView时候会出现一个Ripple效果\n非常好看，而在API 21以下则会表现为MonoChrome的类似按压色的效果![](https://cloud.githubusercontent.com/assets/12274855/18787855/2a6d93f2-81d7-11e6-8026-58cdbd8583d4.JPG) </br> \n而这个点击时的水波纹颜色也是可以Customize的\n```\n<item name=\"android:colorControlHighlight\">@color/my_ripple_color</item>\n```\n//这个要写在自己的Activity的Theme(style-v21)里，注意，当前Activity的Theme必须继承自Appcompat!!\n于是，我写了这样的xml\n```xml\n<LinearLayout\n        android:id=\"@+id/item_root\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"?android:attr/listPreferredItemHeight\"\n        android:orientation=\"vertical\"\n        android:gravity=\"center\"\n        android:onClick=\"@{(view) -> callback.onClick(view,data)}\"\n        android:elevation=\"2dp\"\n        android:background=\"@color/md_amber_200\"\n        android:foreground=\"?android:attr/selectableItemBackground\"\n        />\n```\n然而，点击之后并没有出现水波纹(模拟器 API 21)，换成CardView或是将foreground改为background之后才有效。查了很多博客，最后得出结论:\nandroid:foreground在API 23之前只对FrameLayout有效(CardView继承自FrameLayout当然有效)。\n<!--more-->\n\n##所以正确的做法是\n\n> android:foreground=\"?android:attr/selectableItemBackground\"\n\n改为\n> android:background=\"?android:attr/selectableItemBackground\"\n\n或者使用FrameLayout。\n\n- 关于foreground \n 之前看google io2016时，[Chris Banes](https://github.com/chrisbanes)给了这样的解释。\n ![](https://cloud.githubusercontent.com/assets/12274855/18787841/1d0b2d82-81d7-11e6-916e-b4113772c3a2.JPG),\nandroid:foreground在API 1 的FrameLayout中就有了，但直到API 23才将这个属性添加到View中。\n所以，换成API 23的手机上面那段代码foreground也是可以出现Ripple的,至于23之前为什么foreground无效，并不清楚为什么\n\n- 首先是一种简单的模拟这种视觉效果的尝试：[如何创建兼容的Forefround drawable selector](http://effmx.com/articles/ru-he-chuang-jian-jian-rong-de-foreground-drawable-selectorshi-xian-layoutdian-ji-xiao-guo/) 这篇文章提到了:\n    > 简单来讲，Foreground 定义了绘制于当前内容之上的 Drawable，类似一层覆盖物。所以我们可以为设置 Foreground 的值为 drawable或者color， 那如果将 Froeground 设置为 drawable selector，自然就可以为控件实现点击响应效果了。 比较奇怪的是在 sdk 23 以前，foregrond 属性只对 Framelayout 生效，但这个问题现在得到了解决，所以也请确保你的 compileSdkVersion 大于等于23\n    这篇文章的做法是针对21以下的版本使用slelector Drawable实现类似的效果\n\n- 如何真正实现为API23之前的View,ViewGroup添加foreground?\n随后我找到了[这篇博客](https://dzone.com/articles/adding-foreground-selector)，具体的逻辑并不太多。\n这里插一句，任何Drawable对象，在你调用setDrawable之后，该Drawable都会保留一个最后一个调用对象的callback\n> Drawable->View->Context //leak!\n//所以Drawable也有可能导致Activity leak\n\n- 随后我发现了更多有意思的讨论\n首先是[Chris Banes](https://github.com/chrisbanes)在G+上的Post : [Foreground Doge](https://plus.google.com/+ChrisBanes/posts/DRerZ8wEFuF)\n他给出了两种方案,Chris作为Google员工，给出的解决方案应该是比较官方的了\n1. 如果想利用FrameLayout的foreground特性来实现点击特效的话，完全可以在自己的xml外面再包裹一层FrameLayout\n2. 自己动手写一个实现foreground的Viewgroup , [代码](https://gist.github.com/chrisbanes/9091754)\n- attrs:\n```<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <declare-styleable name=\"ForegroundLinearLayout\">\n        <attr name=\"android:foreground\" />\n        <attr name=\"android:foregroundInsidePadding\" />\n        <attr name=\"android:foregroundGravity\" />\n    </declare-styleable>\n</resources>```\n\n```java\n/* \n * Copyright (C) 2006 The Android Open Source Project \n * \n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n *      http://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */ \n \npackage your.package; \n \nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.util.AttributeSet;\nimport android.view.Gravity;\nimport android.widget.LinearLayout;\n \nimport your.package.R; \n \npublic class ForegroundLinearLayout extends LinearLayout {\n \n    private Drawable mForeground;\n \n    private final Rect mSelfBounds = new Rect();\n    private final Rect mOverlayBounds = new Rect();\n \n    private int mForegroundGravity = Gravity.FILL;\n \n    protected boolean mForegroundInPadding = true;\n \n    boolean mForegroundBoundsChanged = false;\n \n    public ForegroundLinearLayout(Context context) {\n        super(context);\n    } \n \n    public ForegroundLinearLayout(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    } \n \n    public ForegroundLinearLayout(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n \n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundLinearLayout,\n                defStyle, 0);\n \n        mForegroundGravity = a.getInt(\n                R.styleable.ForegroundLinearLayout_android_foregroundGravity, mForegroundGravity);\n \n        final Drawable d = a.getDrawable(R.styleable.ForegroundLinearLayout_android_foreground);\n        if (d != null) {\n            setForeground(d);\n        } \n \n        mForegroundInPadding = a.getBoolean(\n                R.styleable.ForegroundLinearLayout_android_foregroundInsidePadding, true);\n \n        a.recycle();\n    } \n \n    /** \n     * Describes how the foreground is positioned. \n     * \n     * @return foreground gravity. \n     * \n     * @see #setForegroundGravity(int) \n     */ \n    public int getForegroundGravity() { \n        return mForegroundGravity;\n    } \n \n    /** \n     * Describes how the foreground is positioned. Defaults to START and TOP. \n     * \n     * @param foregroundGravity See {@link android.view.Gravity} \n     * \n     * @see #getForegroundGravity() \n     */ \n    public void setForegroundGravity(int foregroundGravity) {\n        if (mForegroundGravity != foregroundGravity) {\n            if ((foregroundGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) {\n                foregroundGravity |= Gravity.START;\n            } \n \n            if ((foregroundGravity & Gravity.VERTICAL_GRAVITY_MASK) == 0) {\n                foregroundGravity |= Gravity.TOP;\n            } \n \n            mForegroundGravity = foregroundGravity;\n \n \n            if (mForegroundGravity == Gravity.FILL && mForeground != null) {\n                Rect padding = new Rect();\n                mForeground.getPadding(padding);\n            } \n \n            requestLayout();\n        } \n    } \n \n    @Override \n    protected boolean verifyDrawable(Drawable who) {\n        return super.verifyDrawable(who) || (who == mForeground);\n    } \n \n    @Override \n    public void jumpDrawablesToCurrentState() { \n        super.jumpDrawablesToCurrentState(); \n        if (mForeground != null) mForeground.jumpToCurrentState();\n    } \n \n    @Override \n    protected void drawableStateChanged() { \n        super.drawableStateChanged(); \n        if (mForeground != null && mForeground.isStateful()) {\n            mForeground.setState(getDrawableState());\n        } \n    } \n \n    /** \n     * Supply a Drawable that is to be rendered on top of all of the child \n     * views in the frame layout.  Any padding in the Drawable will be taken \n     * into account by ensuring that the children are inset to be placed \n     * inside of the padding area. \n     * \n     * @param drawable The Drawable to be drawn on top of the children. \n     */ \n    public void setForeground(Drawable drawable) {\n        if (mForeground != drawable) {\n            if (mForeground != null) {\n                mForeground.setCallback(null);\n                unscheduleDrawable(mForeground);\n            } \n \n            mForeground = drawable;\n \n            if (drawable != null) {\n                setWillNotDraw(false);\n                drawable.setCallback(this);\n                if (drawable.isStateful()) {\n                    drawable.setState(getDrawableState());\n                } \n                if (mForegroundGravity == Gravity.FILL) {\n                    Rect padding = new Rect();\n                    drawable.getPadding(padding);\n                } \n            }  else { \n                setWillNotDraw(true);\n            } \n            requestLayout();\n            invalidate();\n        } \n    } \n \n    /** \n     * Returns the drawable used as the foreground of this FrameLayout. The \n     * foreground drawable, if non-null, is always drawn on top of the children. \n     * \n     * @return A Drawable or null if no foreground was set. \n     */ \n    public Drawable getForeground() {\n        return mForeground;\n    } \n \n    @Override \n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n        super.onLayout(changed, left, top, right, bottom);\n        mForegroundBoundsChanged = changed;\n    } \n \n    @Override \n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        mForegroundBoundsChanged = true;\n    } \n \n    @Override \n    public void draw(Canvas canvas) {\n        super.draw(canvas);\n \n        if (mForeground != null) {\n            final Drawable foreground = mForeground;\n \n            if (mForegroundBoundsChanged) {\n                mForegroundBoundsChanged = false;\n                final Rect selfBounds = mSelfBounds;\n                final Rect overlayBounds = mOverlayBounds;\n \n                final int w = getRight() - getLeft();\n                final int h = getBottom() - getTop();\n \n                if (mForegroundInPadding) {\n                    selfBounds.set(0, 0, w, h);\n                } else { \n                    selfBounds.set(getPaddingLeft(), getPaddingTop(),\n                            w - getPaddingRight(), h - getPaddingBottom());\n                } \n \n                Gravity.apply(mForegroundGravity, foreground.getIntrinsicWidth(),\n                        foreground.getIntrinsicHeight(), selfBounds, overlayBounds);\n                foreground.setBounds(overlayBounds);\n            } \n \n            foreground.draw(canvas);\n        } \n    } \n} \n```\n- 使用方式\n``` xml \n<your.package.ForegroundLinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:foreground=\"?android:selectableItemBackground\">\n\n    <ImageView\n        android:id=”@+id/imageview_opaque”\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    ... other views ...\n/>\n```\n\n- 接着是[Jack Wharton](https://github.com/JakeWharton)的[ForegroundImageView](https://gist.github.com/JakeWharton/0a251d67649305d84e8a)</br>\n\n- attrs\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <declare-styleable name=\"ForegroundImageView\">\n    <attr name=\"android:foreground\"/>\n  </declare-styleable>\n</resources>\n```\n\n```java\n    import android.content.Context;\n    import android.content.res.TypedArray;\n    import android.graphics.Canvas;\n    import android.graphics.drawable.Drawable;\n    import android.util.AttributeSet;\n    import android.widget.ImageView;\n     \n    public class ForegroundImageView extends ImageView {\n      private Drawable foreground;\n     \n      public ForegroundImageView(Context context) {\n        this(context, null);\n      } \n     \n      public ForegroundImageView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n     \n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundImageView);\n        Drawable foreground = a.getDrawable(R.styleable.ForegroundImageView_android_foreground);\n        if (foreground != null) {\n          setForeground(foreground);\n        } \n        a.recycle();\n      } \n     \n      /** \n       * Supply a drawable resource that is to be rendered on top of all of the child \n       * views in the frame layout. \n       * \n       * @param drawableResId The drawable resource to be drawn on top of the children. \n       */ \n      public void setForegroundResource(int drawableResId) {\n        setForeground(getContext().getResources().getDrawable(drawableResId));\n      } \n     \n      /** \n       * Supply a Drawable that is to be rendered on top of all of the child \n       * views in the frame layout. \n       * \n       * @param drawable The Drawable to be drawn on top of the children. \n       */ \n      public void setForeground(Drawable drawable) {\n        if (foreground == drawable) {\n          return; \n        } \n        if (foreground != null) {\n          foreground.setCallback(null);\n          unscheduleDrawable(foreground);\n        } \n     \n        foreground = drawable;\n     \n        if (drawable != null) {\n          drawable.setCallback(this);\n          if (drawable.isStateful()) {\n            drawable.setState(getDrawableState());\n          } \n        } \n        requestLayout();\n        invalidate();\n      } \n     \n      @Override protected boolean verifyDrawable(Drawable who) {\n        return super.verifyDrawable(who) || who == foreground;\n      } \n     \n      @Override public void jumpDrawablesToCurrentState() { \n        super.jumpDrawablesToCurrentState(); \n        if (foreground != null) foreground.jumpToCurrentState();\n      } \n     \n      @Override protected void drawableStateChanged() { \n        super.drawableStateChanged(); \n        if (foreground != null && foreground.isStateful()) {\n          foreground.setState(getDrawableState());\n        } \n      } \n     \n      @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        if (foreground != null) {\n          foreground.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());\n          invalidate();\n        } \n      } \n     \n      @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        if (foreground != null) {\n          foreground.setBounds(0, 0, w, h);\n          invalidate();\n        } \n      } \n     \n      @Override public void draw(Canvas canvas) {\n        super.draw(canvas);\n     \n        if (foreground != null) {\n          foreground.draw(canvas);\n        } \n      } \n    } \n```\n\n\n----------\n\n最后，还有人给出据说更好的[解决方案](https://github.com/cesards/ForegroundViews)\n没有测试过，不了解\n\n##reference\n - [Android themes and styles demisfied](https://www.youtube.com/watch?v=TIHXGwRTMWI) 关于Theme和Style的区别的很好的学习资料\n - [Chris Banes G+ post](https://plus.google.com/108967384991768947849/posts/aHPVDtr6mcp) 评论很精彩\n - [RelativeLayout with foreGround](https://gist.github.com/shakalaca/6199283) 没测试过\n - [Ripple Effect](https://github.com/traex/RippleEffect) 将Ripple的动画兼容到API 9+ ，很出色的一个库。之前项目中用过，就是一个继承自RelativeLayout的自定义ViewGroup。\n\n \n","source":"_posts/selectableItemBackground-foreground.md","raw":"---\ntitle: android使用selectableItemBackground的一些坑\ndate: 2016-09-23 19:56:39\ncategories: [技术]\ntags: [随笔,foreground,android]\n---\n\n> android:foreground=\"?android:attr/selectableItemBackground\"\n\n或是\n> android:background=\"?android:attr/selectableItemBackground\"\n\n这个xml属性最早是我学着写recyclerVeiw的item xml的时候接触到的，简单来说就是，在API 21及以上，用户点击这个itemView时候会出现一个Ripple效果\n非常好看，而在API 21以下则会表现为MonoChrome的类似按压色的效果![](https://cloud.githubusercontent.com/assets/12274855/18787855/2a6d93f2-81d7-11e6-8026-58cdbd8583d4.JPG) </br> \n而这个点击时的水波纹颜色也是可以Customize的\n```\n<item name=\"android:colorControlHighlight\">@color/my_ripple_color</item>\n```\n//这个要写在自己的Activity的Theme(style-v21)里，注意，当前Activity的Theme必须继承自Appcompat!!\n于是，我写了这样的xml\n```xml\n<LinearLayout\n        android:id=\"@+id/item_root\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"?android:attr/listPreferredItemHeight\"\n        android:orientation=\"vertical\"\n        android:gravity=\"center\"\n        android:onClick=\"@{(view) -> callback.onClick(view,data)}\"\n        android:elevation=\"2dp\"\n        android:background=\"@color/md_amber_200\"\n        android:foreground=\"?android:attr/selectableItemBackground\"\n        />\n```\n然而，点击之后并没有出现水波纹(模拟器 API 21)，换成CardView或是将foreground改为background之后才有效。查了很多博客，最后得出结论:\nandroid:foreground在API 23之前只对FrameLayout有效(CardView继承自FrameLayout当然有效)。\n<!--more-->\n\n##所以正确的做法是\n\n> android:foreground=\"?android:attr/selectableItemBackground\"\n\n改为\n> android:background=\"?android:attr/selectableItemBackground\"\n\n或者使用FrameLayout。\n\n- 关于foreground \n 之前看google io2016时，[Chris Banes](https://github.com/chrisbanes)给了这样的解释。\n ![](https://cloud.githubusercontent.com/assets/12274855/18787841/1d0b2d82-81d7-11e6-916e-b4113772c3a2.JPG),\nandroid:foreground在API 1 的FrameLayout中就有了，但直到API 23才将这个属性添加到View中。\n所以，换成API 23的手机上面那段代码foreground也是可以出现Ripple的,至于23之前为什么foreground无效，并不清楚为什么\n\n- 首先是一种简单的模拟这种视觉效果的尝试：[如何创建兼容的Forefround drawable selector](http://effmx.com/articles/ru-he-chuang-jian-jian-rong-de-foreground-drawable-selectorshi-xian-layoutdian-ji-xiao-guo/) 这篇文章提到了:\n    > 简单来讲，Foreground 定义了绘制于当前内容之上的 Drawable，类似一层覆盖物。所以我们可以为设置 Foreground 的值为 drawable或者color， 那如果将 Froeground 设置为 drawable selector，自然就可以为控件实现点击响应效果了。 比较奇怪的是在 sdk 23 以前，foregrond 属性只对 Framelayout 生效，但这个问题现在得到了解决，所以也请确保你的 compileSdkVersion 大于等于23\n    这篇文章的做法是针对21以下的版本使用slelector Drawable实现类似的效果\n\n- 如何真正实现为API23之前的View,ViewGroup添加foreground?\n随后我找到了[这篇博客](https://dzone.com/articles/adding-foreground-selector)，具体的逻辑并不太多。\n这里插一句，任何Drawable对象，在你调用setDrawable之后，该Drawable都会保留一个最后一个调用对象的callback\n> Drawable->View->Context //leak!\n//所以Drawable也有可能导致Activity leak\n\n- 随后我发现了更多有意思的讨论\n首先是[Chris Banes](https://github.com/chrisbanes)在G+上的Post : [Foreground Doge](https://plus.google.com/+ChrisBanes/posts/DRerZ8wEFuF)\n他给出了两种方案,Chris作为Google员工，给出的解决方案应该是比较官方的了\n1. 如果想利用FrameLayout的foreground特性来实现点击特效的话，完全可以在自己的xml外面再包裹一层FrameLayout\n2. 自己动手写一个实现foreground的Viewgroup , [代码](https://gist.github.com/chrisbanes/9091754)\n- attrs:\n```<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <declare-styleable name=\"ForegroundLinearLayout\">\n        <attr name=\"android:foreground\" />\n        <attr name=\"android:foregroundInsidePadding\" />\n        <attr name=\"android:foregroundGravity\" />\n    </declare-styleable>\n</resources>```\n\n```java\n/* \n * Copyright (C) 2006 The Android Open Source Project \n * \n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n *      http://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */ \n \npackage your.package; \n \nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.graphics.Canvas;\nimport android.graphics.Rect;\nimport android.graphics.drawable.Drawable;\nimport android.util.AttributeSet;\nimport android.view.Gravity;\nimport android.widget.LinearLayout;\n \nimport your.package.R; \n \npublic class ForegroundLinearLayout extends LinearLayout {\n \n    private Drawable mForeground;\n \n    private final Rect mSelfBounds = new Rect();\n    private final Rect mOverlayBounds = new Rect();\n \n    private int mForegroundGravity = Gravity.FILL;\n \n    protected boolean mForegroundInPadding = true;\n \n    boolean mForegroundBoundsChanged = false;\n \n    public ForegroundLinearLayout(Context context) {\n        super(context);\n    } \n \n    public ForegroundLinearLayout(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    } \n \n    public ForegroundLinearLayout(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n \n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundLinearLayout,\n                defStyle, 0);\n \n        mForegroundGravity = a.getInt(\n                R.styleable.ForegroundLinearLayout_android_foregroundGravity, mForegroundGravity);\n \n        final Drawable d = a.getDrawable(R.styleable.ForegroundLinearLayout_android_foreground);\n        if (d != null) {\n            setForeground(d);\n        } \n \n        mForegroundInPadding = a.getBoolean(\n                R.styleable.ForegroundLinearLayout_android_foregroundInsidePadding, true);\n \n        a.recycle();\n    } \n \n    /** \n     * Describes how the foreground is positioned. \n     * \n     * @return foreground gravity. \n     * \n     * @see #setForegroundGravity(int) \n     */ \n    public int getForegroundGravity() { \n        return mForegroundGravity;\n    } \n \n    /** \n     * Describes how the foreground is positioned. Defaults to START and TOP. \n     * \n     * @param foregroundGravity See {@link android.view.Gravity} \n     * \n     * @see #getForegroundGravity() \n     */ \n    public void setForegroundGravity(int foregroundGravity) {\n        if (mForegroundGravity != foregroundGravity) {\n            if ((foregroundGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) {\n                foregroundGravity |= Gravity.START;\n            } \n \n            if ((foregroundGravity & Gravity.VERTICAL_GRAVITY_MASK) == 0) {\n                foregroundGravity |= Gravity.TOP;\n            } \n \n            mForegroundGravity = foregroundGravity;\n \n \n            if (mForegroundGravity == Gravity.FILL && mForeground != null) {\n                Rect padding = new Rect();\n                mForeground.getPadding(padding);\n            } \n \n            requestLayout();\n        } \n    } \n \n    @Override \n    protected boolean verifyDrawable(Drawable who) {\n        return super.verifyDrawable(who) || (who == mForeground);\n    } \n \n    @Override \n    public void jumpDrawablesToCurrentState() { \n        super.jumpDrawablesToCurrentState(); \n        if (mForeground != null) mForeground.jumpToCurrentState();\n    } \n \n    @Override \n    protected void drawableStateChanged() { \n        super.drawableStateChanged(); \n        if (mForeground != null && mForeground.isStateful()) {\n            mForeground.setState(getDrawableState());\n        } \n    } \n \n    /** \n     * Supply a Drawable that is to be rendered on top of all of the child \n     * views in the frame layout.  Any padding in the Drawable will be taken \n     * into account by ensuring that the children are inset to be placed \n     * inside of the padding area. \n     * \n     * @param drawable The Drawable to be drawn on top of the children. \n     */ \n    public void setForeground(Drawable drawable) {\n        if (mForeground != drawable) {\n            if (mForeground != null) {\n                mForeground.setCallback(null);\n                unscheduleDrawable(mForeground);\n            } \n \n            mForeground = drawable;\n \n            if (drawable != null) {\n                setWillNotDraw(false);\n                drawable.setCallback(this);\n                if (drawable.isStateful()) {\n                    drawable.setState(getDrawableState());\n                } \n                if (mForegroundGravity == Gravity.FILL) {\n                    Rect padding = new Rect();\n                    drawable.getPadding(padding);\n                } \n            }  else { \n                setWillNotDraw(true);\n            } \n            requestLayout();\n            invalidate();\n        } \n    } \n \n    /** \n     * Returns the drawable used as the foreground of this FrameLayout. The \n     * foreground drawable, if non-null, is always drawn on top of the children. \n     * \n     * @return A Drawable or null if no foreground was set. \n     */ \n    public Drawable getForeground() {\n        return mForeground;\n    } \n \n    @Override \n    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n        super.onLayout(changed, left, top, right, bottom);\n        mForegroundBoundsChanged = changed;\n    } \n \n    @Override \n    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        mForegroundBoundsChanged = true;\n    } \n \n    @Override \n    public void draw(Canvas canvas) {\n        super.draw(canvas);\n \n        if (mForeground != null) {\n            final Drawable foreground = mForeground;\n \n            if (mForegroundBoundsChanged) {\n                mForegroundBoundsChanged = false;\n                final Rect selfBounds = mSelfBounds;\n                final Rect overlayBounds = mOverlayBounds;\n \n                final int w = getRight() - getLeft();\n                final int h = getBottom() - getTop();\n \n                if (mForegroundInPadding) {\n                    selfBounds.set(0, 0, w, h);\n                } else { \n                    selfBounds.set(getPaddingLeft(), getPaddingTop(),\n                            w - getPaddingRight(), h - getPaddingBottom());\n                } \n \n                Gravity.apply(mForegroundGravity, foreground.getIntrinsicWidth(),\n                        foreground.getIntrinsicHeight(), selfBounds, overlayBounds);\n                foreground.setBounds(overlayBounds);\n            } \n \n            foreground.draw(canvas);\n        } \n    } \n} \n```\n- 使用方式\n``` xml \n<your.package.ForegroundLinearLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:foreground=\"?android:selectableItemBackground\">\n\n    <ImageView\n        android:id=”@+id/imageview_opaque”\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    ... other views ...\n/>\n```\n\n- 接着是[Jack Wharton](https://github.com/JakeWharton)的[ForegroundImageView](https://gist.github.com/JakeWharton/0a251d67649305d84e8a)</br>\n\n- attrs\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n  <declare-styleable name=\"ForegroundImageView\">\n    <attr name=\"android:foreground\"/>\n  </declare-styleable>\n</resources>\n```\n\n```java\n    import android.content.Context;\n    import android.content.res.TypedArray;\n    import android.graphics.Canvas;\n    import android.graphics.drawable.Drawable;\n    import android.util.AttributeSet;\n    import android.widget.ImageView;\n     \n    public class ForegroundImageView extends ImageView {\n      private Drawable foreground;\n     \n      public ForegroundImageView(Context context) {\n        this(context, null);\n      } \n     \n      public ForegroundImageView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n     \n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundImageView);\n        Drawable foreground = a.getDrawable(R.styleable.ForegroundImageView_android_foreground);\n        if (foreground != null) {\n          setForeground(foreground);\n        } \n        a.recycle();\n      } \n     \n      /** \n       * Supply a drawable resource that is to be rendered on top of all of the child \n       * views in the frame layout. \n       * \n       * @param drawableResId The drawable resource to be drawn on top of the children. \n       */ \n      public void setForegroundResource(int drawableResId) {\n        setForeground(getContext().getResources().getDrawable(drawableResId));\n      } \n     \n      /** \n       * Supply a Drawable that is to be rendered on top of all of the child \n       * views in the frame layout. \n       * \n       * @param drawable The Drawable to be drawn on top of the children. \n       */ \n      public void setForeground(Drawable drawable) {\n        if (foreground == drawable) {\n          return; \n        } \n        if (foreground != null) {\n          foreground.setCallback(null);\n          unscheduleDrawable(foreground);\n        } \n     \n        foreground = drawable;\n     \n        if (drawable != null) {\n          drawable.setCallback(this);\n          if (drawable.isStateful()) {\n            drawable.setState(getDrawableState());\n          } \n        } \n        requestLayout();\n        invalidate();\n      } \n     \n      @Override protected boolean verifyDrawable(Drawable who) {\n        return super.verifyDrawable(who) || who == foreground;\n      } \n     \n      @Override public void jumpDrawablesToCurrentState() { \n        super.jumpDrawablesToCurrentState(); \n        if (foreground != null) foreground.jumpToCurrentState();\n      } \n     \n      @Override protected void drawableStateChanged() { \n        super.drawableStateChanged(); \n        if (foreground != null && foreground.isStateful()) {\n          foreground.setState(getDrawableState());\n        } \n      } \n     \n      @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        if (foreground != null) {\n          foreground.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());\n          invalidate();\n        } \n      } \n     \n      @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) {\n        super.onSizeChanged(w, h, oldw, oldh);\n        if (foreground != null) {\n          foreground.setBounds(0, 0, w, h);\n          invalidate();\n        } \n      } \n     \n      @Override public void draw(Canvas canvas) {\n        super.draw(canvas);\n     \n        if (foreground != null) {\n          foreground.draw(canvas);\n        } \n      } \n    } \n```\n\n\n----------\n\n最后，还有人给出据说更好的[解决方案](https://github.com/cesards/ForegroundViews)\n没有测试过，不了解\n\n##reference\n - [Android themes and styles demisfied](https://www.youtube.com/watch?v=TIHXGwRTMWI) 关于Theme和Style的区别的很好的学习资料\n - [Chris Banes G+ post](https://plus.google.com/108967384991768947849/posts/aHPVDtr6mcp) 评论很精彩\n - [RelativeLayout with foreGround](https://gist.github.com/shakalaca/6199283) 没测试过\n - [Ripple Effect](https://github.com/traex/RippleEffect) 将Ripple的动画兼容到API 9+ ，很出色的一个库。之前项目中用过，就是一个继承自RelativeLayout的自定义ViewGroup。\n\n \n","slug":"selectableItemBackground-foreground","published":1,"updated":"2016-10-06T09:04:53.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzn8001c7gvrxg1d779g","content":"<blockquote>\n<p>android:foreground=”?android:attr/selectableItemBackground”</p>\n</blockquote>\n<p>或是</p>\n<blockquote>\n<p>android:background=”?android:attr/selectableItemBackground”</p>\n</blockquote>\n<p>这个xml属性最早是我学着写recyclerVeiw的item xml的时候接触到的，简单来说就是，在API 21及以上，用户点击这个itemView时候会出现一个Ripple效果<br>非常好看，而在API 21以下则会表现为MonoChrome的类似按压色的效果<img src=\"https://cloud.githubusercontent.com/assets/12274855/18787855/2a6d93f2-81d7-11e6-8026-58cdbd8583d4.JPG\" alt=\"\"> <br><br>而这个点击时的水波纹颜色也是可以Customize的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;item name=&quot;android:colorControlHighlight&quot;&gt;@color/my_ripple_color&lt;/item&gt;</div></pre></td></tr></table></figure></p>\n<p>//这个要写在自己的Activity的Theme(style-v21)里，注意，当前Activity的Theme必须继承自Appcompat!!<br>于是，我写了这样的xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/item_root\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?android:attr/listPreferredItemHeight\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">        <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"@&#123;(view) -&gt; callback.onClick(view,data)&#125;\"</span></div><div class=\"line\">        <span class=\"attr\">android:elevation</span>=<span class=\"string\">\"2dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/md_amber_200\"</span></div><div class=\"line\">        <span class=\"attr\">android:foreground</span>=<span class=\"string\">\"?android:attr/selectableItemBackground\"</span></div><div class=\"line\">        /&gt;</div></pre></td></tr></table></figure></p>\n<p>然而，点击之后并没有出现水波纹(模拟器 API 21)，换成CardView或是将foreground改为background之后才有效。查了很多博客，最后得出结论:<br>android:foreground在API 23之前只对FrameLayout有效(CardView继承自FrameLayout当然有效)。<br><a id=\"more\"></a></p>\n<p>##所以正确的做法是</p>\n<blockquote>\n<p>android:foreground=”?android:attr/selectableItemBackground”</p>\n</blockquote>\n<p>改为</p>\n<blockquote>\n<p>android:background=”?android:attr/selectableItemBackground”</p>\n</blockquote>\n<p>或者使用FrameLayout。</p>\n<ul>\n<li><p>关于foreground<br>之前看google io2016时，<a href=\"https://github.com/chrisbanes\" target=\"_blank\" rel=\"external\">Chris Banes</a>给了这样的解释。<br><img src=\"https://cloud.githubusercontent.com/assets/12274855/18787841/1d0b2d82-81d7-11e6-916e-b4113772c3a2.JPG\" alt=\"\">,<br>android:foreground在API 1 的FrameLayout中就有了，但直到API 23才将这个属性添加到View中。<br>所以，换成API 23的手机上面那段代码foreground也是可以出现Ripple的,至于23之前为什么foreground无效，并不清楚为什么</p>\n</li>\n<li><p>首先是一种简单的模拟这种视觉效果的尝试：<a href=\"http://effmx.com/articles/ru-he-chuang-jian-jian-rong-de-foreground-drawable-selectorshi-xian-layoutdian-ji-xiao-guo/\" target=\"_blank\" rel=\"external\">如何创建兼容的Forefround drawable selector</a> 这篇文章提到了:</p>\n<blockquote>\n<p>简单来讲，Foreground 定义了绘制于当前内容之上的 Drawable，类似一层覆盖物。所以我们可以为设置 Foreground 的值为 drawable或者color， 那如果将 Froeground 设置为 drawable selector，自然就可以为控件实现点击响应效果了。 比较奇怪的是在 sdk 23 以前，foregrond 属性只对 Framelayout 生效，但这个问题现在得到了解决，所以也请确保你的 compileSdkVersion 大于等于23<br>  这篇文章的做法是针对21以下的版本使用slelector Drawable实现类似的效果</p>\n</blockquote>\n</li>\n<li><p>如何真正实现为API23之前的View,ViewGroup添加foreground?<br>随后我找到了<a href=\"https://dzone.com/articles/adding-foreground-selector\" target=\"_blank\" rel=\"external\">这篇博客</a>，具体的逻辑并不太多。<br>这里插一句，任何Drawable对象，在你调用setDrawable之后，该Drawable都会保留一个最后一个调用对象的callback</p>\n<blockquote>\n<p>Drawable-&gt;View-&gt;Context //leak!<br>//所以Drawable也有可能导致Activity leak</p>\n</blockquote>\n</li>\n<li><p>随后我发现了更多有意思的讨论<br>首先是<a href=\"https://github.com/chrisbanes\" target=\"_blank\" rel=\"external\">Chris Banes</a>在G+上的Post : <a href=\"https://plus.google.com/+ChrisBanes/posts/DRerZ8wEFuF\" target=\"_blank\" rel=\"external\">Foreground Doge</a><br>他给出了两种方案,Chris作为Google员工，给出的解决方案应该是比较官方的了</p>\n</li>\n</ul>\n<ol>\n<li>如果想利用FrameLayout的foreground特性来实现点击特效的话，完全可以在自己的xml外面再包裹一层FrameLayout</li>\n<li>自己动手写一个实现foreground的Viewgroup , <a href=\"https://gist.github.com/chrisbanes/9091754\" target=\"_blank\" rel=\"external\">代码</a></li>\n</ol>\n<ul>\n<li>attrs:<figure class=\"highlight plain\"><figcaption><span>version=\"1.0\" encoding=\"utf-8\"?></span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resources&gt;</div><div class=\"line\">    &lt;declare-styleable name=&quot;ForegroundLinearLayout&quot;&gt;</div><div class=\"line\">        &lt;attr name=&quot;android:foreground&quot; /&gt;</div><div class=\"line\">        &lt;attr name=&quot;android:foregroundInsidePadding&quot; /&gt;</div><div class=\"line\">        &lt;attr name=&quot;android:foregroundGravity&quot; /&gt;</div><div class=\"line\">    &lt;/declare-styleable&gt;</div><div class=\"line\">&lt;/resources&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\"> * Copyright (C) 2006 The Android Open Source Project </div><div class=\"line\"> * </div><div class=\"line\"> * Licensed under the Apache License, Version 2.0 (the \"License\"); </div><div class=\"line\"> * you may not use this file except in compliance with the License. </div><div class=\"line\"> * You may obtain a copy of the License at </div><div class=\"line\"> * </div><div class=\"line\"> *      http://www.apache.org/licenses/LICENSE-2.0 </div><div class=\"line\"> * </div><div class=\"line\"> * Unless required by applicable law or agreed to in writing, software </div><div class=\"line\"> * distributed under the License is distributed on an \"AS IS\" BASIS, </div><div class=\"line\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. </div><div class=\"line\"> * See the License for the specific language governing permissions and </div><div class=\"line\"> * limitations under the License. </div><div class=\"line\"> */ </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">package</span> your.<span class=\"keyword\">package</span>; </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.res.TypedArray;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Rect;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Gravity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.LinearLayout;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> your.<span class=\"keyword\">package</span>.R; </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForegroundLinearLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">LinearLayout</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Drawable mForeground;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Rect mSelfBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Rect mOverlayBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mForegroundGravity = Gravity.FILL;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> mForegroundInPadding = <span class=\"keyword\">true</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">boolean</span> mForegroundBoundsChanged = <span class=\"keyword\">false</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForegroundLinearLayout</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForegroundLinearLayout</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForegroundLinearLayout</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</div><div class=\"line\"> </div><div class=\"line\">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundLinearLayout,</div><div class=\"line\">                defStyle, <span class=\"number\">0</span>);</div><div class=\"line\"> </div><div class=\"line\">        mForegroundGravity = a.getInt(</div><div class=\"line\">                R.styleable.ForegroundLinearLayout_android_foregroundGravity, mForegroundGravity);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">final</span> Drawable d = a.getDrawable(R.styleable.ForegroundLinearLayout_android_foreground);</div><div class=\"line\">        <span class=\"keyword\">if</span> (d != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            setForeground(d);</div><div class=\"line\">        &#125; </div><div class=\"line\"> </div><div class=\"line\">        mForegroundInPadding = a.getBoolean(</div><div class=\"line\">                R.styleable.ForegroundLinearLayout_android_foregroundInsidePadding, <span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        a.recycle();</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * Describes how the foreground is positioned. </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@return</span> foreground gravity. </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@see</span> #setForegroundGravity(int) </div><div class=\"line\">     */ </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getForegroundGravity</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> mForegroundGravity;</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * Describes how the foreground is positioned. Defaults to START and TOP. </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> foregroundGravity See &#123;<span class=\"doctag\">@link</span> android.view.Gravity&#125; </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@see</span> #getForegroundGravity() </div><div class=\"line\">     */ </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setForegroundGravity</span><span class=\"params\">(<span class=\"keyword\">int</span> foregroundGravity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mForegroundGravity != foregroundGravity) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((foregroundGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                foregroundGravity |= Gravity.START;</div><div class=\"line\">            &#125; </div><div class=\"line\"> </div><div class=\"line\">            <span class=\"keyword\">if</span> ((foregroundGravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                foregroundGravity |= Gravity.TOP;</div><div class=\"line\">            &#125; </div><div class=\"line\"> </div><div class=\"line\">            mForegroundGravity = foregroundGravity;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">            <span class=\"keyword\">if</span> (mForegroundGravity == Gravity.FILL &amp;&amp; mForeground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                Rect padding = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">                mForeground.getPadding(padding);</div><div class=\"line\">            &#125; </div><div class=\"line\"> </div><div class=\"line\">            requestLayout();</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verifyDrawable</span><span class=\"params\">(Drawable who)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.verifyDrawable(who) || (who == mForeground);</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jumpDrawablesToCurrentState</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">super</span>.jumpDrawablesToCurrentState(); </div><div class=\"line\">        <span class=\"keyword\">if</span> (mForeground != <span class=\"keyword\">null</span>) mForeground.jumpToCurrentState();</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">drawableStateChanged</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">super</span>.drawableStateChanged(); </div><div class=\"line\">        <span class=\"keyword\">if</span> (mForeground != <span class=\"keyword\">null</span> &amp;&amp; mForeground.isStateful()) &#123;</div><div class=\"line\">            mForeground.setState(getDrawableState());</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * Supply a Drawable that is to be rendered on top of all of the child </div><div class=\"line\">     * views in the frame layout.  Any padding in the Drawable will be taken </div><div class=\"line\">     * into account by ensuring that the children are inset to be placed </div><div class=\"line\">     * inside of the padding area. </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> drawable The Drawable to be drawn on top of the children. </div><div class=\"line\">     */ </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setForeground</span><span class=\"params\">(Drawable drawable)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mForeground != drawable) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mForeground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mForeground.setCallback(<span class=\"keyword\">null</span>);</div><div class=\"line\">                unscheduleDrawable(mForeground);</div><div class=\"line\">            &#125; </div><div class=\"line\"> </div><div class=\"line\">            mForeground = drawable;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"keyword\">if</span> (drawable != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                setWillNotDraw(<span class=\"keyword\">false</span>);</div><div class=\"line\">                drawable.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (drawable.isStateful()) &#123;</div><div class=\"line\">                    drawable.setState(getDrawableState());</div><div class=\"line\">                &#125; </div><div class=\"line\">                <span class=\"keyword\">if</span> (mForegroundGravity == Gravity.FILL) &#123;</div><div class=\"line\">                    Rect padding = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">                    drawable.getPadding(padding);</div><div class=\"line\">                &#125; </div><div class=\"line\">            &#125;  <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">                setWillNotDraw(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; </div><div class=\"line\">            requestLayout();</div><div class=\"line\">            invalidate();</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/** </span></div><div class=\"line\">     * Returns the drawable used as the foreground of this FrameLayout. The </div><div class=\"line\">     * foreground drawable, if non-null, is always drawn on top of the children. </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@return</span> A Drawable or null if no foreground was set. </div><div class=\"line\">     */ </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Drawable <span class=\"title\">getForeground</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mForeground;</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onLayout(changed, left, top, right, bottom);</div><div class=\"line\">        mForegroundBoundsChanged = changed;</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSizeChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> oldw, <span class=\"keyword\">int</span> oldh)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class=\"line\">        mForegroundBoundsChanged = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.draw(canvas);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (mForeground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Drawable foreground = mForeground;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"keyword\">if</span> (mForegroundBoundsChanged) &#123;</div><div class=\"line\">                mForegroundBoundsChanged = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">final</span> Rect selfBounds = mSelfBounds;</div><div class=\"line\">                <span class=\"keyword\">final</span> Rect overlayBounds = mOverlayBounds;</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> w = getRight() - getLeft();</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> h = getBottom() - getTop();</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"keyword\">if</span> (mForegroundInPadding) &#123;</div><div class=\"line\">                    selfBounds.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">                    selfBounds.set(getPaddingLeft(), getPaddingTop(),</div><div class=\"line\">                            w - getPaddingRight(), h - getPaddingBottom());</div><div class=\"line\">                &#125; </div><div class=\"line\"> </div><div class=\"line\">                Gravity.apply(mForegroundGravity, foreground.getIntrinsicWidth(),</div><div class=\"line\">                        foreground.getIntrinsicHeight(), selfBounds, overlayBounds);</div><div class=\"line\">                foreground.setBounds(overlayBounds);</div><div class=\"line\">            &#125; </div><div class=\"line\"> </div><div class=\"line\">            foreground.draw(canvas);</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>使用方式</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">your.package.ForegroundLinearLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:foreground</span>=<span class=\"string\">\"?android:selectableItemBackground\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">”@+id/imageview_opaque”</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">    ... other views ...</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>接着是<a href=\"https://github.com/JakeWharton\" target=\"_blank\" rel=\"external\">Jack Wharton</a>的<a href=\"https://gist.github.com/JakeWharton/0a251d67649305d84e8a\" target=\"_blank\" rel=\"external\">ForegroundImageView</a><br></p>\n</li>\n<li><p>attrs</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ForegroundImageView\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:foreground\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.res.TypedArray;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForegroundImageView</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImageView</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Drawable foreground;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForegroundImageView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(context, <span class=\"keyword\">null</span>);</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForegroundImageView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\"> </div><div class=\"line\">    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundImageView);</div><div class=\"line\">    Drawable foreground = a.getDrawable(R.styleable.ForegroundImageView_android_foreground);</div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      setForeground(foreground);</div><div class=\"line\">    &#125; </div><div class=\"line\">    a.recycle();</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/** </span></div><div class=\"line\">   * Supply a drawable resource that is to be rendered on top of all of the child </div><div class=\"line\">   * views in the frame layout. </div><div class=\"line\">   * </div><div class=\"line\">   * <span class=\"doctag\">@param</span> drawableResId The drawable resource to be drawn on top of the children. </div><div class=\"line\">   */ </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setForegroundResource</span><span class=\"params\">(<span class=\"keyword\">int</span> drawableResId)</span> </span>&#123;</div><div class=\"line\">    setForeground(getContext().getResources().getDrawable(drawableResId));</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/** </span></div><div class=\"line\">   * Supply a Drawable that is to be rendered on top of all of the child </div><div class=\"line\">   * views in the frame layout. </div><div class=\"line\">   * </div><div class=\"line\">   * <span class=\"doctag\">@param</span> drawable The Drawable to be drawn on top of the children. </div><div class=\"line\">   */ </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setForeground</span><span class=\"params\">(Drawable drawable)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground == drawable) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>; </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      foreground.setCallback(<span class=\"keyword\">null</span>);</div><div class=\"line\">      unscheduleDrawable(foreground);</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    foreground = drawable;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> (drawable != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      drawable.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> (drawable.isStateful()) &#123;</div><div class=\"line\">        drawable.setState(getDrawableState());</div><div class=\"line\">      &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\">    requestLayout();</div><div class=\"line\">    invalidate();</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verifyDrawable</span><span class=\"params\">(Drawable who)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.verifyDrawable(who) || who == foreground;</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jumpDrawablesToCurrentState</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">super</span>.jumpDrawablesToCurrentState(); </div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) foreground.jumpToCurrentState();</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">drawableStateChanged</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">super</span>.drawableStateChanged(); </div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span> &amp;&amp; foreground.isStateful()) &#123;</div><div class=\"line\">      foreground.setState(getDrawableState());</div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      foreground.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getMeasuredWidth(), getMeasuredHeight());</div><div class=\"line\">      invalidate();</div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSizeChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> oldw, <span class=\"keyword\">int</span> oldh)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      foreground.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</div><div class=\"line\">      invalidate();</div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.draw(canvas);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      foreground.draw(canvas);</div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>最后，还有人给出据说更好的<a href=\"https://github.com/cesards/ForegroundViews\" target=\"_blank\" rel=\"external\">解决方案</a><br>没有测试过，不了解</p>\n<p>##reference</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=TIHXGwRTMWI\" target=\"_blank\" rel=\"external\">Android themes and styles demisfied</a> 关于Theme和Style的区别的很好的学习资料</li>\n<li><a href=\"https://plus.google.com/108967384991768947849/posts/aHPVDtr6mcp\" target=\"_blank\" rel=\"external\">Chris Banes G+ post</a> 评论很精彩</li>\n<li><a href=\"https://gist.github.com/shakalaca/6199283\" target=\"_blank\" rel=\"external\">RelativeLayout with foreGround</a> 没测试过</li>\n<li><a href=\"https://github.com/traex/RippleEffect\" target=\"_blank\" rel=\"external\">Ripple Effect</a> 将Ripple的动画兼容到API 9+ ，很出色的一个库。之前项目中用过，就是一个继承自RelativeLayout的自定义ViewGroup。</li>\n</ul>\n","excerpt":"<blockquote>\n<p>android:foreground=”?android:attr/selectableItemBackground”</p>\n</blockquote>\n<p>或是</p>\n<blockquote>\n<p>android:background=”?android:attr/selectableItemBackground”</p>\n</blockquote>\n<p>这个xml属性最早是我学着写recyclerVeiw的item xml的时候接触到的，简单来说就是，在API 21及以上，用户点击这个itemView时候会出现一个Ripple效果<br>非常好看，而在API 21以下则会表现为MonoChrome的类似按压色的效果<img src=\"https://cloud.githubusercontent.com/assets/12274855/18787855/2a6d93f2-81d7-11e6-8026-58cdbd8583d4.JPG\" alt=\"\"> </br><br>而这个点击时的水波纹颜色也是可以Customize的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;item name=&quot;android:colorControlHighlight&quot;&gt;@color/my_ripple_color&lt;/item&gt;</div></pre></td></tr></table></figure></p>\n<p>//这个要写在自己的Activity的Theme(style-v21)里，注意，当前Activity的Theme必须继承自Appcompat!!<br>于是，我写了这样的xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/item_root\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"?android:attr/listPreferredItemHeight\"</span></div><div class=\"line\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></div><div class=\"line\">        <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">        <span class=\"attr\">android:onClick</span>=<span class=\"string\">\"@&#123;(view) -&gt; callback.onClick(view,data)&#125;\"</span></div><div class=\"line\">        <span class=\"attr\">android:elevation</span>=<span class=\"string\">\"2dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/md_amber_200\"</span></div><div class=\"line\">        <span class=\"attr\">android:foreground</span>=<span class=\"string\">\"?android:attr/selectableItemBackground\"</span></div><div class=\"line\">        /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>然而，点击之后并没有出现水波纹(模拟器 API 21)，换成CardView或是将foreground改为background之后才有效。查了很多博客，最后得出结论:<br>android:foreground在API 23之前只对FrameLayout有效(CardView继承自FrameLayout当然有效)。<br>","more":"</p>\n<p>##所以正确的做法是</p>\n<blockquote>\n<p>android:foreground=”?android:attr/selectableItemBackground”</p>\n</blockquote>\n<p>改为</p>\n<blockquote>\n<p>android:background=”?android:attr/selectableItemBackground”</p>\n</blockquote>\n<p>或者使用FrameLayout。</p>\n<ul>\n<li><p>关于foreground<br>之前看google io2016时，<a href=\"https://github.com/chrisbanes\">Chris Banes</a>给了这样的解释。<br><img src=\"https://cloud.githubusercontent.com/assets/12274855/18787841/1d0b2d82-81d7-11e6-916e-b4113772c3a2.JPG\" alt=\"\">,<br>android:foreground在API 1 的FrameLayout中就有了，但直到API 23才将这个属性添加到View中。<br>所以，换成API 23的手机上面那段代码foreground也是可以出现Ripple的,至于23之前为什么foreground无效，并不清楚为什么</p>\n</li>\n<li><p>首先是一种简单的模拟这种视觉效果的尝试：<a href=\"http://effmx.com/articles/ru-he-chuang-jian-jian-rong-de-foreground-drawable-selectorshi-xian-layoutdian-ji-xiao-guo/\">如何创建兼容的Forefround drawable selector</a> 这篇文章提到了:</p>\n<blockquote>\n<p>简单来讲，Foreground 定义了绘制于当前内容之上的 Drawable，类似一层覆盖物。所以我们可以为设置 Foreground 的值为 drawable或者color， 那如果将 Froeground 设置为 drawable selector，自然就可以为控件实现点击响应效果了。 比较奇怪的是在 sdk 23 以前，foregrond 属性只对 Framelayout 生效，但这个问题现在得到了解决，所以也请确保你的 compileSdkVersion 大于等于23<br>  这篇文章的做法是针对21以下的版本使用slelector Drawable实现类似的效果</p>\n</blockquote>\n</li>\n<li><p>如何真正实现为API23之前的View,ViewGroup添加foreground?<br>随后我找到了<a href=\"https://dzone.com/articles/adding-foreground-selector\">这篇博客</a>，具体的逻辑并不太多。<br>这里插一句，任何Drawable对象，在你调用setDrawable之后，该Drawable都会保留一个最后一个调用对象的callback</p>\n<blockquote>\n<p>Drawable-&gt;View-&gt;Context //leak!<br>//所以Drawable也有可能导致Activity leak</p>\n</blockquote>\n</li>\n<li><p>随后我发现了更多有意思的讨论<br>首先是<a href=\"https://github.com/chrisbanes\">Chris Banes</a>在G+上的Post : <a href=\"https://plus.google.com/+ChrisBanes/posts/DRerZ8wEFuF\">Foreground Doge</a><br>他给出了两种方案,Chris作为Google员工，给出的解决方案应该是比较官方的了</p>\n</li>\n</ul>\n<ol>\n<li>如果想利用FrameLayout的foreground特性来实现点击特效的话，完全可以在自己的xml外面再包裹一层FrameLayout</li>\n<li>自己动手写一个实现foreground的Viewgroup , <a href=\"https://gist.github.com/chrisbanes/9091754\">代码</a></li>\n</ol>\n<ul>\n<li>attrs:<figure class=\"highlight plain\"><figcaption><span>version=\"1.0\" encoding=\"utf-8\"?></span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;resources&gt;</div><div class=\"line\">    &lt;declare-styleable name=&quot;ForegroundLinearLayout&quot;&gt;</div><div class=\"line\">        &lt;attr name=&quot;android:foreground&quot; /&gt;</div><div class=\"line\">        &lt;attr name=&quot;android:foregroundInsidePadding&quot; /&gt;</div><div class=\"line\">        &lt;attr name=&quot;android:foregroundGravity&quot; /&gt;</div><div class=\"line\">    &lt;/declare-styleable&gt;</div><div class=\"line\">&lt;/resources&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\"> * Copyright (C) 2006 The Android Open Source Project </div><div class=\"line\"> * </div><div class=\"line\"> * Licensed under the Apache License, Version 2.0 (the \"License\"); </div><div class=\"line\"> * you may not use this file except in compliance with the License. </div><div class=\"line\"> * You may obtain a copy of the License at </div><div class=\"line\"> * </div><div class=\"line\"> *      http://www.apache.org/licenses/LICENSE-2.0 </div><div class=\"line\"> * </div><div class=\"line\"> * Unless required by applicable law or agreed to in writing, software </div><div class=\"line\"> * distributed under the License is distributed on an \"AS IS\" BASIS, </div><div class=\"line\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. </div><div class=\"line\"> * See the License for the specific language governing permissions and </div><div class=\"line\"> * limitations under the License. </div><div class=\"line\"> */</span> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">package</span> your.<span class=\"keyword\">package</span>; </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.res.TypedArray;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Rect;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.view.Gravity;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.LinearLayout;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">import</span> your.<span class=\"keyword\">package</span>.R; </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForegroundLinearLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">LinearLayout</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> Drawable mForeground;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Rect mSelfBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Rect mOverlayBounds = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mForegroundGravity = Gravity.FILL;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> mForegroundInPadding = <span class=\"keyword\">true</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">boolean</span> mForegroundBoundsChanged = <span class=\"keyword\">false</span>;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForegroundLinearLayout</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForegroundLinearLayout</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForegroundLinearLayout</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</div><div class=\"line\"> </div><div class=\"line\">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundLinearLayout,</div><div class=\"line\">                defStyle, <span class=\"number\">0</span>);</div><div class=\"line\"> </div><div class=\"line\">        mForegroundGravity = a.getInt(</div><div class=\"line\">                R.styleable.ForegroundLinearLayout_android_foregroundGravity, mForegroundGravity);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">final</span> Drawable d = a.getDrawable(R.styleable.ForegroundLinearLayout_android_foreground);</div><div class=\"line\">        <span class=\"keyword\">if</span> (d != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            setForeground(d);</div><div class=\"line\">        &#125; </div><div class=\"line\"> </div><div class=\"line\">        mForegroundInPadding = a.getBoolean(</div><div class=\"line\">                R.styleable.ForegroundLinearLayout_android_foregroundInsidePadding, <span class=\"keyword\">true</span>);</div><div class=\"line\"> </div><div class=\"line\">        a.recycle();</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * Describes how the foreground is positioned. </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@return</span> foreground gravity. </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@see</span> #setForegroundGravity(int) </div><div class=\"line\">     */</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getForegroundGravity</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">return</span> mForegroundGravity;</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * Describes how the foreground is positioned. Defaults to START and TOP. </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> foregroundGravity See &#123;<span class=\"doctag\">@link</span> android.view.Gravity&#125; </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@see</span> #getForegroundGravity() </div><div class=\"line\">     */</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setForegroundGravity</span><span class=\"params\">(<span class=\"keyword\">int</span> foregroundGravity)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mForegroundGravity != foregroundGravity) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((foregroundGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                foregroundGravity |= Gravity.START;</div><div class=\"line\">            &#125; </div><div class=\"line\"> </div><div class=\"line\">            <span class=\"keyword\">if</span> ((foregroundGravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                foregroundGravity |= Gravity.TOP;</div><div class=\"line\">            &#125; </div><div class=\"line\"> </div><div class=\"line\">            mForegroundGravity = foregroundGravity;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">            <span class=\"keyword\">if</span> (mForegroundGravity == Gravity.FILL &amp;&amp; mForeground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                Rect padding = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">                mForeground.getPadding(padding);</div><div class=\"line\">            &#125; </div><div class=\"line\"> </div><div class=\"line\">            requestLayout();</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verifyDrawable</span><span class=\"params\">(Drawable who)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.verifyDrawable(who) || (who == mForeground);</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jumpDrawablesToCurrentState</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">super</span>.jumpDrawablesToCurrentState(); </div><div class=\"line\">        <span class=\"keyword\">if</span> (mForeground != <span class=\"keyword\">null</span>) mForeground.jumpToCurrentState();</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">drawableStateChanged</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">        <span class=\"keyword\">super</span>.drawableStateChanged(); </div><div class=\"line\">        <span class=\"keyword\">if</span> (mForeground != <span class=\"keyword\">null</span> &amp;&amp; mForeground.isStateful()) &#123;</div><div class=\"line\">            mForeground.setState(getDrawableState());</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * Supply a Drawable that is to be rendered on top of all of the child </div><div class=\"line\">     * views in the frame layout.  Any padding in the Drawable will be taken </div><div class=\"line\">     * into account by ensuring that the children are inset to be placed </div><div class=\"line\">     * inside of the padding area. </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@param</span> drawable The Drawable to be drawn on top of the children. </div><div class=\"line\">     */</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setForeground</span><span class=\"params\">(Drawable drawable)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mForeground != drawable) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mForeground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                mForeground.setCallback(<span class=\"keyword\">null</span>);</div><div class=\"line\">                unscheduleDrawable(mForeground);</div><div class=\"line\">            &#125; </div><div class=\"line\"> </div><div class=\"line\">            mForeground = drawable;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"keyword\">if</span> (drawable != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                setWillNotDraw(<span class=\"keyword\">false</span>);</div><div class=\"line\">                drawable.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (drawable.isStateful()) &#123;</div><div class=\"line\">                    drawable.setState(getDrawableState());</div><div class=\"line\">                &#125; </div><div class=\"line\">                <span class=\"keyword\">if</span> (mForegroundGravity == Gravity.FILL) &#123;</div><div class=\"line\">                    Rect padding = <span class=\"keyword\">new</span> Rect();</div><div class=\"line\">                    drawable.getPadding(padding);</div><div class=\"line\">                &#125; </div><div class=\"line\">            &#125;  <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">                setWillNotDraw(<span class=\"keyword\">true</span>);</div><div class=\"line\">            &#125; </div><div class=\"line\">            requestLayout();</div><div class=\"line\">            invalidate();</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">/** </div><div class=\"line\">     * Returns the drawable used as the foreground of this FrameLayout. The </div><div class=\"line\">     * foreground drawable, if non-null, is always drawn on top of the children. </div><div class=\"line\">     * </div><div class=\"line\">     * <span class=\"doctag\">@return</span> A Drawable or null if no foreground was set. </div><div class=\"line\">     */</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Drawable <span class=\"title\">getForeground</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mForeground;</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onLayout(changed, left, top, right, bottom);</div><div class=\"line\">        mForegroundBoundsChanged = changed;</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSizeChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> oldw, <span class=\"keyword\">int</span> oldh)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class=\"line\">        mForegroundBoundsChanged = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.draw(canvas);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">if</span> (mForeground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> Drawable foreground = mForeground;</div><div class=\"line\"> </div><div class=\"line\">            <span class=\"keyword\">if</span> (mForegroundBoundsChanged) &#123;</div><div class=\"line\">                mForegroundBoundsChanged = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">final</span> Rect selfBounds = mSelfBounds;</div><div class=\"line\">                <span class=\"keyword\">final</span> Rect overlayBounds = mOverlayBounds;</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> w = getRight() - getLeft();</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> h = getBottom() - getTop();</div><div class=\"line\"> </div><div class=\"line\">                <span class=\"keyword\">if</span> (mForegroundInPadding) &#123;</div><div class=\"line\">                    selfBounds.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">                    selfBounds.set(getPaddingLeft(), getPaddingTop(),</div><div class=\"line\">                            w - getPaddingRight(), h - getPaddingBottom());</div><div class=\"line\">                &#125; </div><div class=\"line\"> </div><div class=\"line\">                Gravity.apply(mForegroundGravity, foreground.getIntrinsicWidth(),</div><div class=\"line\">                        foreground.getIntrinsicHeight(), selfBounds, overlayBounds);</div><div class=\"line\">                foreground.setBounds(overlayBounds);</div><div class=\"line\">            &#125; </div><div class=\"line\"> </div><div class=\"line\">            foreground.draw(canvas);</div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>使用方式</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">your.package.ForegroundLinearLayout</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">    <span class=\"attr\">android:foreground</span>=<span class=\"string\">\"?android:selectableItemBackground\"</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">”@+id/imageview_opaque”</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">    ... other views ...</div><div class=\"line\">/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>接着是<a href=\"https://github.com/JakeWharton\">Jack Wharton</a>的<a href=\"https://gist.github.com/JakeWharton/0a251d67649305d84e8a\">ForegroundImageView</a></br></p>\n</li>\n<li><p>attrs</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ForegroundImageView\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:foreground\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</div><div class=\"line\"><span class=\"keyword\">import</span> android.content.res.TypedArray;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</div><div class=\"line\"><span class=\"keyword\">import</span> android.graphics.drawable.Drawable;</div><div class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</div><div class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ForegroundImageView</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImageView</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> Drawable foreground;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForegroundImageView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>(context, <span class=\"keyword\">null</span>);</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ForegroundImageView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\"> </div><div class=\"line\">    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundImageView);</div><div class=\"line\">    Drawable foreground = a.getDrawable(R.styleable.ForegroundImageView_android_foreground);</div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      setForeground(foreground);</div><div class=\"line\">    &#125; </div><div class=\"line\">    a.recycle();</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/** </div><div class=\"line\">   * Supply a drawable resource that is to be rendered on top of all of the child </div><div class=\"line\">   * views in the frame layout. </div><div class=\"line\">   * </div><div class=\"line\">   * <span class=\"doctag\">@param</span> drawableResId The drawable resource to be drawn on top of the children. </div><div class=\"line\">   */</span> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setForegroundResource</span><span class=\"params\">(<span class=\"keyword\">int</span> drawableResId)</span> </span>&#123;</div><div class=\"line\">    setForeground(getContext().getResources().getDrawable(drawableResId));</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">/** </div><div class=\"line\">   * Supply a Drawable that is to be rendered on top of all of the child </div><div class=\"line\">   * views in the frame layout. </div><div class=\"line\">   * </div><div class=\"line\">   * <span class=\"doctag\">@param</span> drawable The Drawable to be drawn on top of the children. </div><div class=\"line\">   */</span> </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setForeground</span><span class=\"params\">(Drawable drawable)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground == drawable) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span>; </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      foreground.setCallback(<span class=\"keyword\">null</span>);</div><div class=\"line\">      unscheduleDrawable(foreground);</div><div class=\"line\">    &#125; </div><div class=\"line\"> </div><div class=\"line\">    foreground = drawable;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> (drawable != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      drawable.setCallback(<span class=\"keyword\">this</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> (drawable.isStateful()) &#123;</div><div class=\"line\">        drawable.setState(getDrawableState());</div><div class=\"line\">      &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\">    requestLayout();</div><div class=\"line\">    invalidate();</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">verifyDrawable</span><span class=\"params\">(Drawable who)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.verifyDrawable(who) || who == foreground;</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">jumpDrawablesToCurrentState</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">super</span>.jumpDrawablesToCurrentState(); </div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) foreground.jumpToCurrentState();</div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">drawableStateChanged</span><span class=\"params\">()</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">super</span>.drawableStateChanged(); </div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span> &amp;&amp; foreground.isStateful()) &#123;</div><div class=\"line\">      foreground.setState(getDrawableState());</div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      foreground.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, getMeasuredWidth(), getMeasuredHeight());</div><div class=\"line\">      invalidate();</div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSizeChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> w, <span class=\"keyword\">int</span> h, <span class=\"keyword\">int</span> oldw, <span class=\"keyword\">int</span> oldh)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      foreground.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</div><div class=\"line\">      invalidate();</div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\"> </div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.draw(canvas);</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> (foreground != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">      foreground.draw(canvas);</div><div class=\"line\">    &#125; </div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<p>最后，还有人给出据说更好的<a href=\"https://github.com/cesards/ForegroundViews\">解决方案</a><br>没有测试过，不了解</p>\n<p>##reference</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=TIHXGwRTMWI\">Android themes and styles demisfied</a> 关于Theme和Style的区别的很好的学习资料</li>\n<li><a href=\"https://plus.google.com/108967384991768947849/posts/aHPVDtr6mcp\">Chris Banes G+ post</a> 评论很精彩</li>\n<li><a href=\"https://gist.github.com/shakalaca/6199283\">RelativeLayout with foreGround</a> 没测试过</li>\n<li><a href=\"https://github.com/traex/RippleEffect\">Ripple Effect</a> 将Ripple的动画兼容到API 9+ ，很出色的一个库。之前项目中用过，就是一个继承自RelativeLayout的自定义ViewGroup。</li>\n</ul>"},{"title":"service和activity的通信方式","date":"2016-09-30T07:25:28.000Z","_content":"\n![](http://odzl05jxx.bkt.clouddn.com/service_lifecycle.png)\n\n一年以前写过一篇关于service和Activity相互通信的很详细的博客，当时真的是费了很大心思在上面。现在回过头来看，还是有些不完善的地方，比如aidl没有给，demo不够全面。现在补上。\n\n<!--more-->\n\n1. 关于Android的Service，[官方文档](https://developer.android.com/guide/components/services.html)是这样描述的\n\n> `Service` 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。\n\n这其中也能看出Android对于Service角色的定位，后台工作，不涉及UI。\n\nService本身包含started Service和Binded Service\n\n对于Binded Service 使用\n\n![](http://odzl05jxx.bkt.clouddn.com/service_binding_tree_lifecycle.png)\n\n\n\n## 待续\n\n### reference\n\n[csdn](http://blog.csdn.net/javazejian/article/details/52709857)\n\n\n\n","source":"_posts/service-activity-communication.md","raw":"---\ntitle: service和activity的通信方式\ndate: 2016-09-30 15:25:28\ncategories: [技术]\ntags: [service,android]\n---\n\n![](http://odzl05jxx.bkt.clouddn.com/service_lifecycle.png)\n\n一年以前写过一篇关于service和Activity相互通信的很详细的博客，当时真的是费了很大心思在上面。现在回过头来看，还是有些不完善的地方，比如aidl没有给，demo不够全面。现在补上。\n\n<!--more-->\n\n1. 关于Android的Service，[官方文档](https://developer.android.com/guide/components/services.html)是这样描述的\n\n> `Service` 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。\n\n这其中也能看出Android对于Service角色的定位，后台工作，不涉及UI。\n\nService本身包含started Service和Binded Service\n\n对于Binded Service 使用\n\n![](http://odzl05jxx.bkt.clouddn.com/service_binding_tree_lifecycle.png)\n\n\n\n## 待续\n\n### reference\n\n[csdn](http://blog.csdn.net/javazejian/article/details/52709857)\n\n\n\n","slug":"service-activity-communication","published":1,"updated":"2016-10-08T14:29:00.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzno001f7gvrr9aqgmst","content":"<p><img src=\"http://odzl05jxx.bkt.clouddn.com/service_lifecycle.png\" alt=\"\"></p>\n<p>一年以前写过一篇关于service和Activity相互通信的很详细的博客，当时真的是费了很大心思在上面。现在回过头来看，还是有些不完善的地方，比如aidl没有给，demo不够全面。现在补上。</p>\n<a id=\"more\"></a>\n<ol>\n<li>关于Android的Service，<a href=\"https://developer.android.com/guide/components/services.html\" target=\"_blank\" rel=\"external\">官方文档</a>是这样描述的</li>\n</ol>\n<blockquote>\n<p><code>Service</code> 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。</p>\n</blockquote>\n<p>这其中也能看出Android对于Service角色的定位，后台工作，不涉及UI。</p>\n<p>Service本身包含started Service和Binded Service</p>\n<p>对于Binded Service 使用</p>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/service_binding_tree_lifecycle.png\" alt=\"\"></p>\n<h2 id=\"待续\"><a href=\"#待续\" class=\"headerlink\" title=\"待续\"></a>待续</h2><h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><p><a href=\"http://blog.csdn.net/javazejian/article/details/52709857\" target=\"_blank\" rel=\"external\">csdn</a></p>\n","excerpt":"<p><img src=\"http://odzl05jxx.bkt.clouddn.com/service_lifecycle.png\" alt=\"\"></p>\n<p>一年以前写过一篇关于service和Activity相互通信的很详细的博客，当时真的是费了很大心思在上面。现在回过头来看，还是有些不完善的地方，比如aidl没有给，demo不够全面。现在补上。</p>","more":"<ol>\n<li>关于Android的Service，<a href=\"https://developer.android.com/guide/components/services.html\">官方文档</a>是这样描述的</li>\n</ol>\n<blockquote>\n<p><code>Service</code> 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。</p>\n</blockquote>\n<p>这其中也能看出Android对于Service角色的定位，后台工作，不涉及UI。</p>\n<p>Service本身包含started Service和Binded Service</p>\n<p>对于Binded Service 使用</p>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/service_binding_tree_lifecycle.png\" alt=\"\"></p>\n<h2 id=\"待续\"><a href=\"#待续\" class=\"headerlink\" title=\"待续\"></a>待续</h2><h3 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h3><p><a href=\"http://blog.csdn.net/javazejian/article/details/52709857\">csdn</a></p>"},{"title":"Theme和Style的区别","date":"2016-10-10T11:35:32.000Z","_content":"\n\n\n认识Theme和Styles\n\n重新看一遍Using Themes and styles without going crazy，大部分属于直接翻译\n\n#### 1. Styles\n\n##### 1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来\n\n```xml\n<View android:background= \"#ff0000\" />\n```\n\n变成\n\n```xml\n<View style= \"@Style/MyStyle\" />\n\n<Style name = \"MyStyle\">\n\t<item name = \"android:background\">#ff0000</item>\n</Style>\n```\n\n这种形式，对于大量的具有相同属性的且具有*共性*的View，可以直接使用对应的Style，这能够让layout文件更加整洁。前提是确信layout文件中使用的View具有相同的属性。\n\n<!--more-->\n\n##### 1.2 Style Inheritance\n\nStyle可以继承，两种方式：\n\n假设有parent style ，一种在name中使用前缀的方式指明parent，另一种在后面显式的声明parent\n\n```xml\n<style name = \"Parent\"/>\n```\n\nExplicit child\n\n```xml\n<style name = \"Child\" parent = \"Parent\">\n```\n\n  Implicit Child\n\n```xml\n<style name = \"Parent.Child\"/>\n```\n\n同时使用两种方式时，默认使用Explicit Parent  \n\n为避免混淆，推荐使用Explicit Child且Child name不带前缀  \n\nView不能拥有两个Style,除了TextView及其子类，例如\n\n```xml\n<TextView>\n  android:textColor = \"#ffffff\"\n\tstyle=\"@style/SomeStyle\"\n  android:textAppearance = \"@style/MyText\"\n</TextView>\n```\n\n如上所示，TextView中可以定义TextAppearance，后者包含了常见的textColor，textSize等attributes，而在一个View中可以同时定义两个Style。如果出现冲突，styles之间相同attributes的应用优先级为：\n\n> android:textColor >> SomeStyle中的android:textColor>>MyText中的android:textColor\n\n> 使用TextAppearance 时一定要有一个parent\n\n```xml\n<style name = \"MyText\" parent=\"TextAppearance.Appcompat\">\n\t<item name = \"android:TextColor\">#F08</item>\n</style>\n```\n\n因为使用style时，系统将把style中定义的attribute和当前View的默认attribute融合起来，而TextView默认attribute 中什么也没有，造成textSize = 0的情况，所以务必选择parent，在parent style已经定义好大多数属性的情况下再去修改小部分属性将简单得多。TextAppearance可以在Theme中定义，也可以写在单一的TextView上。\n\n- ####2. Themes\n  在Android中，Theme名字以\"Theme.\"开头，查看源码会发现只是定义了一大堆color attributes 和Window attributes。Themes比Styles的作用范围更广，themes可以在Application,Activity层面管理Widget外观，Theme还可以实现夜间模式切换\n\n  来看如何定义一个Theme\n\n  ```xml\n  <style name = \"Theme\">\n  \t<item name = android:statusBarColor>#ff0000</item>\n  </style>\n  ```\n\n  回头看一下Style\n\n  ```xml\n  <Style name = \"Style\">\n  \t<item name = \"android:background\">#ff0000</item>\n  </Style>\n  ```\n\n  语法看起来完全一样。\n\n  区别：styles中的属性被直接送到View的构造函数中，记得在自定义View时写的那些attrs吗，其实就是两个参数的构造函数中的AttributeSets\n\n  Theme应用范围更广，定义的属性和Style也不尽相同。\n\n  两者之间有一些联系：例如Theme中可以定义default widget style，Style可以引用Theme中定义的属性(?attr:selectableItemBackground还记得吗)\n  上面提到了Theme中可以定义default widget style，具体做法无非就是这样:\n\n  ```xml\n  <style name= \"MyTheme\" parent=\"Theme.AppCompat.Light\">\n    <item name=\"android:editTextStyle\">@style/MyEditTextStyle</item>\n  </style>\n  ```\n  所以，只要在AppTheme中点进去，找一下这个键对应的值就可以了\n\n\n  2.1 使用Theme\n\n  两种方式:\n\n  1.在Manifest中，例如\n\n```xml\n  <application\n    android:theme=\"@style/Theme.AppCompat\" />\n\n  或者\n  <activity\n    android:theme=\"@style/Theme.AppCompat.Light\"        />\n```\n\n  activty中Theme override Application的Theme\n\n  2. 应用于View\n\n  Lollipop开始引入View Theming的概念\n\n```xml\n  <Toolbar\n     android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n     app:popupTheme=\"@style/ThemeOverlay.AppCompa.Light\"/>      \n```\n\n  应用在View上的Theme将能够作用在该View及其所有的Children，这样做的好处在于没有必要专门为了一个View而去选择其他的Theme。\n\n  例如在Holo中有Holo.Light.DarkActionBar，为了专门适配ActionBar需要一个专门的Theme。目前看来主要应用在Toolbar上。\n\n  ### 3 .墙裂推荐使用AppCompat\n\n  好处: \n\n- Material on all devices ,记得以前听说AppCompat在21以上继承自Theme.Material。\n- Baseline themes/styles AppCompat 预设了一系列样式标准，只需要继承AppCompat，改动一小部分样式就能完成设计\n    - Enable View theming pre-Lollipop \n    - 使用ColorPrimary , ColorAccent等attributes(backPorted by AppCompat)设置Widget样式\n    - 在Theme中可以定义默认的Widget样式，例如\n```xml\n<style name=\"AppTheme\" parent = \"Theme.AppCompat\">\n<item name=\"android:spinnerItemStyle\">@sytle/MySpinnerStyle</item>\n</style>\n```\n\n- 还可以更改默认样式：\n\n```xml\n<style name = \"AttrTheme\" parent =\"Theme.AppCompat\">\n<item name =\"selectableItemBackground\">@drawable/bg</item>\n</style>\n\n使用时\n<Button android:background=?attr/selectableItemBackground\"/>\n```\n\n这样就可以自定义点击时的Drawable了。\n\n- 支持android:theme: API 7+(只应用于该View)，API 11+(View及其子View) \n\nView theming原本只是API 21才引入的概念，AppCompat实现了向前兼容\n\n### 4 .  ?attr的问题\n\n> ?android:attr/selectableItemBackground\n\n一个个来解释：\n\n?  :  we're doing a theme lookup\n\nandroid:  we’re looking up something within the android namespace\n\nattr/  : we're looking for an attribute(可省略)\n\nselectableItemBackground: The name of the atribute we're looking up\n\n把attr/省略掉后变成\n\n> ?android:selectableItemBackground\n\n效果完全一样\n\n```xml\n<style name=\"MyTheme\">\n\t<item name = \"android:colorPrimary\">@color/red</item>\n</style>\n```\n\n问题在于android:ColorPromary是Lollipop才引入的，解决方案\n\n```xml\n<syle name = \"MyTheme\" parent=\"Theme.AppCompat\">\n\t<item name = \"colorPrimary\">@color/red</item>\n</syle>\n```\n\n注意这里没有android: 前缀，AppCompat针对API21之前的版本定义了自己的一套资源。\n\n再举个例子\n\n```xml\n在values/attrs.xml中\n<attr name:\"myAttribute\" format=\"dimension\"/>\n\n在values/themes.xml中\n<style name = \"MyTheme\" parent = \"Theme.AppCompat\">\n\t<item name=\"myAttribute\">4dp</item>  这就是实际使用的Theme\n</style>\n\n在values/styles.xml中\n<style name=\"MyStyle\">\n\t<item name=\"android:padding\">?attr/myAttribute</item>\n</style>\n\n实际操作中\n在layout文件中，通过将一个长度，颜色定义为?attr的方式，就会去当前的Theme中寻找相对应的attribute，这就是黑夜模式切换的原理\n```\n\n要注意的是，所有非android nameSpace的attribute Name都是global的，所以如果两个library定义了相同的attribute Name，将无法编译通过。\n\nStyle可以通过?attr的方式引用Theme中的资源\n\n\n\n### 5 .获取Theme\n\n```java\ncontext.getTheme().resolveAttribute(R.attr.dialogTheme,outValue,true)\n  \n在View中\n  TypedArray a = context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.ImageView,defStyleAttr,defStyleRes)\n  \nint alpha = a.getInt(\n  com.android.internal.R.styleable.ImageView_drawableAlpha,255)   \n```\n\nActivity有一个setTheme(int themeResId)方法，注意，这个方法并不是取代原先的Theme,只是在原有的Theme上apply了。所以这个命名不算太好。Activity内部会在onCreate()前调用setTheme(你写在manifest里面的Theme)\n\n\n\n### 6. v21的问题\n\n```xml\n在values/styles.xml中\n<style name=\"BaseToolbar\"/>\n\n在values-v21/styles.xml中\n<style name= \"BaseToolbar\">\n\t<item name = \"android:elevation\">4dp</item>\n</style>\nelevation是21以上api才有的属性，lint会提示问题\n这样，在values/styles.xml中\n<style name = \"Toolbar\" parent = \"BaseToolbar\"/>\nlint就不会飙黄了，直接引用Toolbar即可\n```\n\n通过这种继承的方式能够在自己的Theme中使用统一的theme，针对不同的运行时版本确定最终运行的Theme。\n\n### 7 . ThemeOverlay\n\n```JAVA\nThemeOverlay.Material.Light\nThemeOverlay.Material.Dark\n//etc ...   \n```\n\n用于添加到现有的Theme上，例如Theme.Material.Light只包含color relevant to a light Theme，不会改变原有Theme的window Attributes。查看源码，只是完整的Theme中的一小部分attribute。\n\n### 8. 常见错误\n\n1. 作为Theme中引用的style必须要有一个parent\n\n例如\n```xml\n在AppTheme中\n<item name = \"android:editTextStyle\">@style/MyEditTextStyle</item>\n\n<style name= \"MyEditTextStyle\">\n\t<item name= \"android:fontFamily\">\n  sans-serif-medium\n  </item>\n</style>\n```\n这样做的结果将是所有的EditText都会失去基本的属性\n\n2. defStyleAttr vs defStyleRes\n\n常见于 \n\n```java\nObtainStyledAttributes(AttributeSet set,int []attrs,\n int defStyleAttr,int defStyleRes)\n```\n\n直接解释：\n\n>  defStyleAttr: The attr in your theme which points to the default style\n>\n>  eg: R.attr.editTextStyle\n>\n>  defStyleRes: The resource ID of the default style\n>\n>  eg:R.style.Widget_Material_EditText\n\nObtainStyledAttributes查找Value时读取的顺序如下\n\n```java\n1. Value in the AttributeSet\n2. Value in the explicit style\n3. Default style specified in defStyleRes\n4. Default style specified in defStyleAttr\n5. Base value in this theme     \n```\n注意最后一条，万一在Manifest中出现这种东西\n\n```xml\n<Style name = \"AppTheme\" parent = \"Theme.AppCompat\">\n\t<item name = \"android:background\">...</item>\n</Style>\n```\n\n这意味着\n\n> Any View which doesn't have a background set ,will use the theme's value ,  SHIT!\n\n### 9. 最后，一点好玩的\n\n```java\nContext themedContext = \n  new ContextThemeWrapper(baseContext,R.style.MyTheme);\n\nView view = LayoutInflator.form(themedContext)\n  \t\t.inflate(R.layout.some_layout,null);\n//或者\nView view = new View(themedContext);\n//生成的View就会带有MyTheme中的属性，动态设置。\n```\n\n而这也是AppComPat对于API 21以下版本进行兼容的原理 \n翻了一下文档：\nContextThemeWrapper : Added in API level 1\n\n这一点AppCompat的作者也在2014年的一篇 [博客](https://chris.banes.me/2014/11/12/theme-vs-style/)中提到了。\n\n## reference\n\n- [Daniel Lew](https://www.youtube.com/watch?v=Jr8hJdVGHAk)\n- [View Constructor](http://blog.danlew.net/2016/07/19/a-deep-dive-into-android-view-constructors/)\n- [IO 2016](https://www.youtube.com/watch?v=TIHXGwRTMWI)\n\n\n\n\n\n\n","source":"_posts/theme-versus-style.md","raw":"---\ntitle: Theme和Style的区别\ndate: 2016-10-10 19:35:32\ntags:\n---\n\n\n\n认识Theme和Styles\n\n重新看一遍Using Themes and styles without going crazy，大部分属于直接翻译\n\n#### 1. Styles\n\n##### 1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来\n\n```xml\n<View android:background= \"#ff0000\" />\n```\n\n变成\n\n```xml\n<View style= \"@Style/MyStyle\" />\n\n<Style name = \"MyStyle\">\n\t<item name = \"android:background\">#ff0000</item>\n</Style>\n```\n\n这种形式，对于大量的具有相同属性的且具有*共性*的View，可以直接使用对应的Style，这能够让layout文件更加整洁。前提是确信layout文件中使用的View具有相同的属性。\n\n<!--more-->\n\n##### 1.2 Style Inheritance\n\nStyle可以继承，两种方式：\n\n假设有parent style ，一种在name中使用前缀的方式指明parent，另一种在后面显式的声明parent\n\n```xml\n<style name = \"Parent\"/>\n```\n\nExplicit child\n\n```xml\n<style name = \"Child\" parent = \"Parent\">\n```\n\n  Implicit Child\n\n```xml\n<style name = \"Parent.Child\"/>\n```\n\n同时使用两种方式时，默认使用Explicit Parent  \n\n为避免混淆，推荐使用Explicit Child且Child name不带前缀  \n\nView不能拥有两个Style,除了TextView及其子类，例如\n\n```xml\n<TextView>\n  android:textColor = \"#ffffff\"\n\tstyle=\"@style/SomeStyle\"\n  android:textAppearance = \"@style/MyText\"\n</TextView>\n```\n\n如上所示，TextView中可以定义TextAppearance，后者包含了常见的textColor，textSize等attributes，而在一个View中可以同时定义两个Style。如果出现冲突，styles之间相同attributes的应用优先级为：\n\n> android:textColor >> SomeStyle中的android:textColor>>MyText中的android:textColor\n\n> 使用TextAppearance 时一定要有一个parent\n\n```xml\n<style name = \"MyText\" parent=\"TextAppearance.Appcompat\">\n\t<item name = \"android:TextColor\">#F08</item>\n</style>\n```\n\n因为使用style时，系统将把style中定义的attribute和当前View的默认attribute融合起来，而TextView默认attribute 中什么也没有，造成textSize = 0的情况，所以务必选择parent，在parent style已经定义好大多数属性的情况下再去修改小部分属性将简单得多。TextAppearance可以在Theme中定义，也可以写在单一的TextView上。\n\n- ####2. Themes\n  在Android中，Theme名字以\"Theme.\"开头，查看源码会发现只是定义了一大堆color attributes 和Window attributes。Themes比Styles的作用范围更广，themes可以在Application,Activity层面管理Widget外观，Theme还可以实现夜间模式切换\n\n  来看如何定义一个Theme\n\n  ```xml\n  <style name = \"Theme\">\n  \t<item name = android:statusBarColor>#ff0000</item>\n  </style>\n  ```\n\n  回头看一下Style\n\n  ```xml\n  <Style name = \"Style\">\n  \t<item name = \"android:background\">#ff0000</item>\n  </Style>\n  ```\n\n  语法看起来完全一样。\n\n  区别：styles中的属性被直接送到View的构造函数中，记得在自定义View时写的那些attrs吗，其实就是两个参数的构造函数中的AttributeSets\n\n  Theme应用范围更广，定义的属性和Style也不尽相同。\n\n  两者之间有一些联系：例如Theme中可以定义default widget style，Style可以引用Theme中定义的属性(?attr:selectableItemBackground还记得吗)\n  上面提到了Theme中可以定义default widget style，具体做法无非就是这样:\n\n  ```xml\n  <style name= \"MyTheme\" parent=\"Theme.AppCompat.Light\">\n    <item name=\"android:editTextStyle\">@style/MyEditTextStyle</item>\n  </style>\n  ```\n  所以，只要在AppTheme中点进去，找一下这个键对应的值就可以了\n\n\n  2.1 使用Theme\n\n  两种方式:\n\n  1.在Manifest中，例如\n\n```xml\n  <application\n    android:theme=\"@style/Theme.AppCompat\" />\n\n  或者\n  <activity\n    android:theme=\"@style/Theme.AppCompat.Light\"        />\n```\n\n  activty中Theme override Application的Theme\n\n  2. 应用于View\n\n  Lollipop开始引入View Theming的概念\n\n```xml\n  <Toolbar\n     android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n     app:popupTheme=\"@style/ThemeOverlay.AppCompa.Light\"/>      \n```\n\n  应用在View上的Theme将能够作用在该View及其所有的Children，这样做的好处在于没有必要专门为了一个View而去选择其他的Theme。\n\n  例如在Holo中有Holo.Light.DarkActionBar，为了专门适配ActionBar需要一个专门的Theme。目前看来主要应用在Toolbar上。\n\n  ### 3 .墙裂推荐使用AppCompat\n\n  好处: \n\n- Material on all devices ,记得以前听说AppCompat在21以上继承自Theme.Material。\n- Baseline themes/styles AppCompat 预设了一系列样式标准，只需要继承AppCompat，改动一小部分样式就能完成设计\n    - Enable View theming pre-Lollipop \n    - 使用ColorPrimary , ColorAccent等attributes(backPorted by AppCompat)设置Widget样式\n    - 在Theme中可以定义默认的Widget样式，例如\n```xml\n<style name=\"AppTheme\" parent = \"Theme.AppCompat\">\n<item name=\"android:spinnerItemStyle\">@sytle/MySpinnerStyle</item>\n</style>\n```\n\n- 还可以更改默认样式：\n\n```xml\n<style name = \"AttrTheme\" parent =\"Theme.AppCompat\">\n<item name =\"selectableItemBackground\">@drawable/bg</item>\n</style>\n\n使用时\n<Button android:background=?attr/selectableItemBackground\"/>\n```\n\n这样就可以自定义点击时的Drawable了。\n\n- 支持android:theme: API 7+(只应用于该View)，API 11+(View及其子View) \n\nView theming原本只是API 21才引入的概念，AppCompat实现了向前兼容\n\n### 4 .  ?attr的问题\n\n> ?android:attr/selectableItemBackground\n\n一个个来解释：\n\n?  :  we're doing a theme lookup\n\nandroid:  we’re looking up something within the android namespace\n\nattr/  : we're looking for an attribute(可省略)\n\nselectableItemBackground: The name of the atribute we're looking up\n\n把attr/省略掉后变成\n\n> ?android:selectableItemBackground\n\n效果完全一样\n\n```xml\n<style name=\"MyTheme\">\n\t<item name = \"android:colorPrimary\">@color/red</item>\n</style>\n```\n\n问题在于android:ColorPromary是Lollipop才引入的，解决方案\n\n```xml\n<syle name = \"MyTheme\" parent=\"Theme.AppCompat\">\n\t<item name = \"colorPrimary\">@color/red</item>\n</syle>\n```\n\n注意这里没有android: 前缀，AppCompat针对API21之前的版本定义了自己的一套资源。\n\n再举个例子\n\n```xml\n在values/attrs.xml中\n<attr name:\"myAttribute\" format=\"dimension\"/>\n\n在values/themes.xml中\n<style name = \"MyTheme\" parent = \"Theme.AppCompat\">\n\t<item name=\"myAttribute\">4dp</item>  这就是实际使用的Theme\n</style>\n\n在values/styles.xml中\n<style name=\"MyStyle\">\n\t<item name=\"android:padding\">?attr/myAttribute</item>\n</style>\n\n实际操作中\n在layout文件中，通过将一个长度，颜色定义为?attr的方式，就会去当前的Theme中寻找相对应的attribute，这就是黑夜模式切换的原理\n```\n\n要注意的是，所有非android nameSpace的attribute Name都是global的，所以如果两个library定义了相同的attribute Name，将无法编译通过。\n\nStyle可以通过?attr的方式引用Theme中的资源\n\n\n\n### 5 .获取Theme\n\n```java\ncontext.getTheme().resolveAttribute(R.attr.dialogTheme,outValue,true)\n  \n在View中\n  TypedArray a = context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.ImageView,defStyleAttr,defStyleRes)\n  \nint alpha = a.getInt(\n  com.android.internal.R.styleable.ImageView_drawableAlpha,255)   \n```\n\nActivity有一个setTheme(int themeResId)方法，注意，这个方法并不是取代原先的Theme,只是在原有的Theme上apply了。所以这个命名不算太好。Activity内部会在onCreate()前调用setTheme(你写在manifest里面的Theme)\n\n\n\n### 6. v21的问题\n\n```xml\n在values/styles.xml中\n<style name=\"BaseToolbar\"/>\n\n在values-v21/styles.xml中\n<style name= \"BaseToolbar\">\n\t<item name = \"android:elevation\">4dp</item>\n</style>\nelevation是21以上api才有的属性，lint会提示问题\n这样，在values/styles.xml中\n<style name = \"Toolbar\" parent = \"BaseToolbar\"/>\nlint就不会飙黄了，直接引用Toolbar即可\n```\n\n通过这种继承的方式能够在自己的Theme中使用统一的theme，针对不同的运行时版本确定最终运行的Theme。\n\n### 7 . ThemeOverlay\n\n```JAVA\nThemeOverlay.Material.Light\nThemeOverlay.Material.Dark\n//etc ...   \n```\n\n用于添加到现有的Theme上，例如Theme.Material.Light只包含color relevant to a light Theme，不会改变原有Theme的window Attributes。查看源码，只是完整的Theme中的一小部分attribute。\n\n### 8. 常见错误\n\n1. 作为Theme中引用的style必须要有一个parent\n\n例如\n```xml\n在AppTheme中\n<item name = \"android:editTextStyle\">@style/MyEditTextStyle</item>\n\n<style name= \"MyEditTextStyle\">\n\t<item name= \"android:fontFamily\">\n  sans-serif-medium\n  </item>\n</style>\n```\n这样做的结果将是所有的EditText都会失去基本的属性\n\n2. defStyleAttr vs defStyleRes\n\n常见于 \n\n```java\nObtainStyledAttributes(AttributeSet set,int []attrs,\n int defStyleAttr,int defStyleRes)\n```\n\n直接解释：\n\n>  defStyleAttr: The attr in your theme which points to the default style\n>\n>  eg: R.attr.editTextStyle\n>\n>  defStyleRes: The resource ID of the default style\n>\n>  eg:R.style.Widget_Material_EditText\n\nObtainStyledAttributes查找Value时读取的顺序如下\n\n```java\n1. Value in the AttributeSet\n2. Value in the explicit style\n3. Default style specified in defStyleRes\n4. Default style specified in defStyleAttr\n5. Base value in this theme     \n```\n注意最后一条，万一在Manifest中出现这种东西\n\n```xml\n<Style name = \"AppTheme\" parent = \"Theme.AppCompat\">\n\t<item name = \"android:background\">...</item>\n</Style>\n```\n\n这意味着\n\n> Any View which doesn't have a background set ,will use the theme's value ,  SHIT!\n\n### 9. 最后，一点好玩的\n\n```java\nContext themedContext = \n  new ContextThemeWrapper(baseContext,R.style.MyTheme);\n\nView view = LayoutInflator.form(themedContext)\n  \t\t.inflate(R.layout.some_layout,null);\n//或者\nView view = new View(themedContext);\n//生成的View就会带有MyTheme中的属性，动态设置。\n```\n\n而这也是AppComPat对于API 21以下版本进行兼容的原理 \n翻了一下文档：\nContextThemeWrapper : Added in API level 1\n\n这一点AppCompat的作者也在2014年的一篇 [博客](https://chris.banes.me/2014/11/12/theme-vs-style/)中提到了。\n\n## reference\n\n- [Daniel Lew](https://www.youtube.com/watch?v=Jr8hJdVGHAk)\n- [View Constructor](http://blog.danlew.net/2016/07/19/a-deep-dive-into-android-view-constructors/)\n- [IO 2016](https://www.youtube.com/watch?v=TIHXGwRTMWI)\n\n\n\n\n\n\n","slug":"theme-versus-style","published":1,"updated":"2016-10-10T19:51:17.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzno001h7gvruqzgr0lm","content":"<p>认识Theme和Styles</p>\n<p>重新看一遍Using Themes and styles without going crazy，大部分属于直接翻译</p>\n<h4 id=\"1-Styles\"><a href=\"#1-Styles\" class=\"headerlink\" title=\"1. Styles\"></a>1. Styles</h4><h5 id=\"1-1-首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来\"><a href=\"#1-1-首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来\" class=\"headerlink\" title=\"1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来\"></a>1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">android:background</span>= <span class=\"string\">\"#ff0000\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>变成</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>= <span class=\"string\">\"@Style/MyStyle\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"MyStyle\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:background\"</span>&gt;</span>#ff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这种形式，对于大量的具有相同属性的且具有<em>共性</em>的View，可以直接使用对应的Style，这能够让layout文件更加整洁。前提是确信layout文件中使用的View具有相同的属性。</p>\n<a id=\"more\"></a>\n<h5 id=\"1-2-Style-Inheritance\"><a href=\"#1-2-Style-Inheritance\" class=\"headerlink\" title=\"1.2 Style Inheritance\"></a>1.2 Style Inheritance</h5><p>Style可以继承，两种方式：</p>\n<p>假设有parent style ，一种在name中使用前缀的方式指明parent，另一种在后面显式的声明parent</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Parent\"</span>/&gt;</span><span class=\"undefined\"></span></div></pre></td></tr></table></figure>\n<p>Explicit child</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Child\"</span> <span class=\"attr\">parent</span> = <span class=\"string\">\"Parent\"</span>&gt;</span><span class=\"undefined\"></span></div></pre></td></tr></table></figure>\n<p>  Implicit Child</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Parent.Child\"</span>/&gt;</span><span class=\"undefined\"></span></div></pre></td></tr></table></figure>\n<p>同时使用两种方式时，默认使用Explicit Parent  </p>\n<p>为避免混淆，推荐使用Explicit Child且Child name不带前缀  </p>\n<p>View不能拥有两个Style,除了TextView及其子类，例如</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span>&gt;</span></div><div class=\"line\">  android:textColor = \"#ffffff\"</div><div class=\"line\">truestyle=\"@style/SomeStyle\"</div><div class=\"line\">  android:textAppearance = \"@style/MyText\"</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如上所示，TextView中可以定义TextAppearance，后者包含了常见的textColor，textSize等attributes，而在一个View中可以同时定义两个Style。如果出现冲突，styles之间相同attributes的应用优先级为：</p>\n<blockquote>\n<p>android:textColor &gt;&gt; SomeStyle中的android:textColor&gt;&gt;MyText中的android:textColor</p>\n<p>使用TextAppearance 时一定要有一个parent</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"MyText\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"TextAppearance.Appcompat\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:TextColor\"</span>&gt;</span>#F08<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>因为使用style时，系统将把style中定义的attribute和当前View的默认attribute融合起来，而TextView默认attribute 中什么也没有，造成textSize = 0的情况，所以务必选择parent，在parent style已经定义好大多数属性的情况下再去修改小部分属性将简单得多。TextAppearance可以在Theme中定义，也可以写在单一的TextView上。</p>\n<ul>\n<li><p>####2. Themes<br>在Android中，Theme名字以”Theme.”开头，查看源码会发现只是定义了一大堆color attributes 和Window attributes。Themes比Styles的作用范围更广，themes可以在Application,Activity层面管理Widget外观，Theme还可以实现夜间模式切换</p>\n<p>来看如何定义一个Theme</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Theme\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">android:statusBarColor</span>&gt;</span>#ff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>回头看一下Style</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Style\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:background\"</span>&gt;</span>#ff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>语法看起来完全一样。</p>\n<p>区别：styles中的属性被直接送到View的构造函数中，记得在自定义View时写的那些attrs吗，其实就是两个参数的构造函数中的AttributeSets</p>\n<p>Theme应用范围更广，定义的属性和Style也不尽相同。</p>\n<p>两者之间有一些联系：例如Theme中可以定义default widget style，Style可以引用Theme中定义的属性(?attr:selectableItemBackground还记得吗)<br>上面提到了Theme中可以定义default widget style，具体做法无非就是这样:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>= <span class=\"string\">\"MyTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:editTextStyle\"</span>&gt;</span>@style/MyEditTextStyle<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>所以，只要在AppTheme中点进去，找一下这个键对应的值就可以了</p>\n</li>\n</ul>\n<p>  2.1 使用Theme</p>\n<p>  两种方式:</p>\n<p>  1.在Manifest中，例如</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span></span></div><div class=\"line\">  <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\">或者</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></div><div class=\"line\">  <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat.Light\"</span>        /&gt;</div></pre></td></tr></table></figure>\n<p>  activty中Theme override Application的Theme</p>\n<ol>\n<li><p>应用于View</p>\n<p>Lollipop开始引入View Theming的概念</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Toolbar</span></span></div><div class=\"line\">   <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></div><div class=\"line\">   <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompa.Light\"</span>/&gt;</div></pre></td></tr></table></figure>\n<p>  应用在View上的Theme将能够作用在该View及其所有的Children，这样做的好处在于没有必要专门为了一个View而去选择其他的Theme。</p>\n<p>  例如在Holo中有Holo.Light.DarkActionBar，为了专门适配ActionBar需要一个专门的Theme。目前看来主要应用在Toolbar上。</p>\n<h3 id=\"3-墙裂推荐使用AppCompat\"><a href=\"#3-墙裂推荐使用AppCompat\" class=\"headerlink\" title=\"3 .墙裂推荐使用AppCompat\"></a>3 .墙裂推荐使用AppCompat</h3><p>  好处: </p>\n<ul>\n<li>Material on all devices ,记得以前听说AppCompat在21以上继承自Theme.Material。</li>\n<li><p>Baseline themes/styles AppCompat 预设了一系列样式标准，只需要继承AppCompat，改动一小部分样式就能完成设计</p>\n<ul>\n<li>Enable View theming pre-Lollipop </li>\n<li>使用ColorPrimary , ColorAccent等attributes(backPorted by AppCompat)设置Widget样式</li>\n<li>在Theme中可以定义默认的Widget样式，例如<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span> = <span class=\"string\">\"Theme.AppCompat\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:spinnerItemStyle\"</span>&gt;</span>@sytle/MySpinnerStyle<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>还可以更改默认样式：</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"AttrTheme\"</span> <span class=\"attr\">parent</span> =<span class=\"string\">\"Theme.AppCompat\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> =<span class=\"string\">\"selectableItemBackground\"</span>&gt;</span>@drawable/bg<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">使用时</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:background</span>=<span class=\"string\">?attr/selectableItemBackground</span>\"/&gt;</span></div></pre></td></tr></table></figure>\n<p>这样就可以自定义点击时的Drawable了。</p>\n<ul>\n<li>支持android:theme: API 7+(只应用于该View)，API 11+(View及其子View) </li>\n</ul>\n<p>View theming原本只是API 21才引入的概念，AppCompat实现了向前兼容</p>\n<h3 id=\"4-attr的问题\"><a href=\"#4-attr的问题\" class=\"headerlink\" title=\"4 .  ?attr的问题\"></a>4 .  ?attr的问题</h3><blockquote>\n<p>?android:attr/selectableItemBackground</p>\n</blockquote>\n<p>一个个来解释：</p>\n<p>?  :  we’re doing a theme lookup</p>\n<p>android:  we’re looking up something within the android namespace</p>\n<p>attr/  : we’re looking for an attribute(可省略)</p>\n<p>selectableItemBackground: The name of the atribute we’re looking up</p>\n<p>把attr/省略掉后变成</p>\n<blockquote>\n<p>?android:selectableItemBackground</p>\n</blockquote>\n<p>效果完全一样</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyTheme\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:colorPrimary\"</span>&gt;</span>@color/red<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>问题在于android:ColorPromary是Lollipop才引入的，解决方案</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">syle</span> <span class=\"attr\">name</span> = <span class=\"string\">\"MyTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat\"</span>&gt;</span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/red<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">syle</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意这里没有android: 前缀，AppCompat针对API21之前的版本定义了自己的一套资源。</p>\n<p>再举个例子</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">在values/attrs.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name:</span>\"<span class=\"attr\">myAttribute</span>\" <span class=\"attr\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">在values/themes.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"MyTheme\"</span> <span class=\"attr\">parent</span> = <span class=\"string\">\"Theme.AppCompat\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myAttribute\"</span>&gt;</span>4dp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span>  这就是实际使用的Theme</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">在values/styles.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyStyle\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:padding\"</span>&gt;</span>?attr/myAttribute<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">实际操作中</div><div class=\"line\">在layout文件中，通过将一个长度，颜色定义为?attr的方式，就会去当前的Theme中寻找相对应的attribute，这就是黑夜模式切换的原理</div></pre></td></tr></table></figure>\n<p>要注意的是，所有非android nameSpace的attribute Name都是global的，所以如果两个library定义了相同的attribute Name，将无法编译通过。</p>\n<p>Style可以通过?attr的方式引用Theme中的资源</p>\n<h3 id=\"5-获取Theme\"><a href=\"#5-获取Theme\" class=\"headerlink\" title=\"5 .获取Theme\"></a>5 .获取Theme</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.getTheme().resolveAttribute(R.attr.dialogTheme,outValue,<span class=\"keyword\">true</span>)</div><div class=\"line\">  </div><div class=\"line\">在View中</div><div class=\"line\">  TypedArray a = context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.ImageView,defStyleAttr,defStyleRes)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">int</span> alpha = a.getInt(</div><div class=\"line\">  com.android.internal.R.styleable.ImageView_drawableAlpha,<span class=\"number\">255</span>)</div></pre></td></tr></table></figure>\n<p>Activity有一个setTheme(int themeResId)方法，注意，这个方法并不是取代原先的Theme,只是在原有的Theme上apply了。所以这个命名不算太好。Activity内部会在onCreate()前调用setTheme(你写在manifest里面的Theme)</p>\n<h3 id=\"6-v21的问题\"><a href=\"#6-v21的问题\" class=\"headerlink\" title=\"6. v21的问题\"></a>6. v21的问题</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">在values/styles.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"BaseToolbar\"</span>/&gt;</span><span class=\"xml\"></span></div><div class=\"line\"></div><div class=\"line\">在values-v21/styles.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>= <span class=\"string\">\"BaseToolbar\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:elevation\"</span>&gt;</span>4dp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">elevation是21以上api才有的属性，lint会提示问题</div><div class=\"line\">这样，在values/styles.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Toolbar\"</span> <span class=\"attr\">parent</span> = <span class=\"string\">\"BaseToolbar\"</span>/&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">lint就不会飙黄了，直接引用Toolbar即可</div></pre></td></tr></table></figure>\n<p>通过这种继承的方式能够在自己的Theme中使用统一的theme，针对不同的运行时版本确定最终运行的Theme。</p>\n<h3 id=\"7-ThemeOverlay\"><a href=\"#7-ThemeOverlay\" class=\"headerlink\" title=\"7 . ThemeOverlay\"></a>7 . ThemeOverlay</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ThemeOverlay.Material.Light</div><div class=\"line\">ThemeOverlay.Material.Dark</div><div class=\"line\"><span class=\"comment\">//etc ...</span></div></pre></td></tr></table></figure>\n<p>用于添加到现有的Theme上，例如Theme.Material.Light只包含color relevant to a light Theme，不会改变原有Theme的window Attributes。查看源码，只是完整的Theme中的一小部分attribute。</p>\n<h3 id=\"8-常见错误\"><a href=\"#8-常见错误\" class=\"headerlink\" title=\"8. 常见错误\"></a>8. 常见错误</h3><ol>\n<li>作为Theme中引用的style必须要有一个parent</li>\n</ol>\n<p>例如<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">在AppTheme中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:editTextStyle\"</span>&gt;</span>@style/MyEditTextStyle<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>= <span class=\"string\">\"MyEditTextStyle\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>= <span class=\"string\">\"android:fontFamily\"</span>&gt;</span></div><div class=\"line\">  sans-serif-medium</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样做的结果将是所有的EditText都会失去基本的属性</p>\n<ol>\n<li>defStyleAttr vs defStyleRes</li>\n</ol>\n<p>常见于 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObtainStyledAttributes(AttributeSet set,<span class=\"keyword\">int</span> []attrs,</div><div class=\"line\"> <span class=\"keyword\">int</span> defStyleAttr,<span class=\"keyword\">int</span> defStyleRes)</div></pre></td></tr></table></figure>\n<p>直接解释：</p>\n<blockquote>\n<p> defStyleAttr: The attr in your theme which points to the default style</p>\n<p> eg: R.attr.editTextStyle</p>\n<p> defStyleRes: The resource ID of the default style</p>\n<p> eg:R.style.Widget_Material_EditText</p>\n</blockquote>\n<p>ObtainStyledAttributes查找Value时读取的顺序如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>. Value in the AttributeSet</div><div class=\"line\"><span class=\"number\">2</span>. Value in the explicit style</div><div class=\"line\"><span class=\"number\">3</span>. Default style specified in defStyleRes</div><div class=\"line\"><span class=\"number\">4</span>. Default style specified in defStyleAttr</div><div class=\"line\"><span class=\"number\">5</span>. Base value in <span class=\"keyword\">this</span> theme</div></pre></td></tr></table></figure>\n<p>注意最后一条，万一在Manifest中出现这种东西</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span> = <span class=\"string\">\"Theme.AppCompat\"</span>&gt;</span><span class=\"xml\"></span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:background\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这意味着</p>\n<blockquote>\n<p>Any View which doesn’t have a background set ,will use the theme’s value ,  SHIT!</p>\n</blockquote>\n<h3 id=\"9-最后，一点好玩的\"><a href=\"#9-最后，一点好玩的\" class=\"headerlink\" title=\"9. 最后，一点好玩的\"></a>9. 最后，一点好玩的</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Context themedContext = </div><div class=\"line\">  <span class=\"keyword\">new</span> ContextThemeWrapper(baseContext,R.style.MyTheme);</div><div class=\"line\"></div><div class=\"line\">View view = LayoutInflator.form(themedContext)</div><div class=\"line\">  \t\t.inflate(R.layout.some_layout,<span class=\"keyword\">null</span>);</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\">View view = <span class=\"keyword\">new</span> View(themedContext);</div><div class=\"line\"><span class=\"comment\">//生成的View就会带有MyTheme中的属性，动态设置。</span></div></pre></td></tr></table></figure>\n<p>而这也是AppComPat对于API 21以下版本进行兼容的原理<br>翻了一下文档：<br>ContextThemeWrapper : Added in API level 1</p>\n<p>这一点AppCompat的作者也在2014年的一篇 <a href=\"https://chris.banes.me/2014/11/12/theme-vs-style/\" target=\"_blank\" rel=\"external\">博客</a>中提到了。</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><ul>\n<li><a href=\"https://www.youtube.com/watch?v=Jr8hJdVGHAk\" target=\"_blank\" rel=\"external\">Daniel Lew</a></li>\n<li><a href=\"http://blog.danlew.net/2016/07/19/a-deep-dive-into-android-view-constructors/\" target=\"_blank\" rel=\"external\">View Constructor</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=TIHXGwRTMWI\" target=\"_blank\" rel=\"external\">IO 2016</a></li>\n</ul>\n","excerpt":"<p>认识Theme和Styles</p>\n<p>重新看一遍Using Themes and styles without going crazy，大部分属于直接翻译</p>\n<h4 id=\"1-Styles\"><a href=\"#1-Styles\" class=\"headerlink\" title=\"1. Styles\"></a>1. Styles</h4><h5 id=\"1-1-首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来\"><a href=\"#1-1-首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来\" class=\"headerlink\" title=\"1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来\"></a>1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">android:background</span>= <span class=\"string\">\"#ff0000\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>变成</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>= <span class=\"string\">\"@Style/MyStyle\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"MyStyle\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:background\"</span>&gt;</span>#ff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这种形式，对于大量的具有相同属性的且具有<em>共性</em>的View，可以直接使用对应的Style，这能够让layout文件更加整洁。前提是确信layout文件中使用的View具有相同的属性。</p>","more":"<h5 id=\"1-2-Style-Inheritance\"><a href=\"#1-2-Style-Inheritance\" class=\"headerlink\" title=\"1.2 Style Inheritance\"></a>1.2 Style Inheritance</h5><p>Style可以继承，两种方式：</p>\n<p>假设有parent style ，一种在name中使用前缀的方式指明parent，另一种在后面显式的声明parent</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Parent\"</span>/&gt;</span><span class=\"undefined\"></span></div></pre></td></tr></table></figure>\n<p>Explicit child</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Child\"</span> <span class=\"attr\">parent</span> = <span class=\"string\">\"Parent\"</span>&gt;</span><span class=\"undefined\"></span></div></pre></td></tr></table></figure>\n<p>  Implicit Child</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Parent.Child\"</span>/&gt;</span><span class=\"undefined\"></span></div></pre></td></tr></table></figure>\n<p>同时使用两种方式时，默认使用Explicit Parent  </p>\n<p>为避免混淆，推荐使用Explicit Child且Child name不带前缀  </p>\n<p>View不能拥有两个Style,除了TextView及其子类，例如</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span>&gt;</span></div><div class=\"line\">  android:textColor = \"#ffffff\"</div><div class=\"line\">truestyle=\"@style/SomeStyle\"</div><div class=\"line\">  android:textAppearance = \"@style/MyText\"</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>如上所示，TextView中可以定义TextAppearance，后者包含了常见的textColor，textSize等attributes，而在一个View中可以同时定义两个Style。如果出现冲突，styles之间相同attributes的应用优先级为：</p>\n<blockquote>\n<p>android:textColor &gt;&gt; SomeStyle中的android:textColor&gt;&gt;MyText中的android:textColor</p>\n<p>使用TextAppearance 时一定要有一个parent</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"MyText\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"TextAppearance.Appcompat\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:TextColor\"</span>&gt;</span>#F08<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>因为使用style时，系统将把style中定义的attribute和当前View的默认attribute融合起来，而TextView默认attribute 中什么也没有，造成textSize = 0的情况，所以务必选择parent，在parent style已经定义好大多数属性的情况下再去修改小部分属性将简单得多。TextAppearance可以在Theme中定义，也可以写在单一的TextView上。</p>\n<ul>\n<li><p>####2. Themes<br>在Android中，Theme名字以”Theme.”开头，查看源码会发现只是定义了一大堆color attributes 和Window attributes。Themes比Styles的作用范围更广，themes可以在Application,Activity层面管理Widget外观，Theme还可以实现夜间模式切换</p>\n<p>来看如何定义一个Theme</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Theme\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">android:statusBarColor</span>&gt;</span>#ff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>回头看一下Style</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Style\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:background\"</span>&gt;</span>#ff0000<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>语法看起来完全一样。</p>\n<p>区别：styles中的属性被直接送到View的构造函数中，记得在自定义View时写的那些attrs吗，其实就是两个参数的构造函数中的AttributeSets</p>\n<p>Theme应用范围更广，定义的属性和Style也不尽相同。</p>\n<p>两者之间有一些联系：例如Theme中可以定义default widget style，Style可以引用Theme中定义的属性(?attr:selectableItemBackground还记得吗)<br>上面提到了Theme中可以定义default widget style，具体做法无非就是这样:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>= <span class=\"string\">\"MyTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:editTextStyle\"</span>&gt;</span>@style/MyEditTextStyle<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>所以，只要在AppTheme中点进去，找一下这个键对应的值就可以了</p>\n</li>\n</ul>\n<p>  2.1 使用Theme</p>\n<p>  两种方式:</p>\n<p>  1.在Manifest中，例如</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">application</span></div><div class=\"line\">  <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat\"</span> /&gt;</span></div><div class=\"line\"></div><div class=\"line\">或者</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></div><div class=\"line\">  <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppCompat.Light\"</span>        /&gt;</span></div></pre></td></tr></table></figure>\n<p>  activty中Theme override Application的Theme</p>\n<ol>\n<li><p>应用于View</p>\n<p>Lollipop开始引入View Theming的概念</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Toolbar</span></div><div class=\"line\">   <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"</span></div><div class=\"line\">   <span class=\"attr\">app:popupTheme</span>=<span class=\"string\">\"@style/ThemeOverlay.AppCompa.Light\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<p>  应用在View上的Theme将能够作用在该View及其所有的Children，这样做的好处在于没有必要专门为了一个View而去选择其他的Theme。</p>\n<p>  例如在Holo中有Holo.Light.DarkActionBar，为了专门适配ActionBar需要一个专门的Theme。目前看来主要应用在Toolbar上。</p>\n<h3 id=\"3-墙裂推荐使用AppCompat\"><a href=\"#3-墙裂推荐使用AppCompat\" class=\"headerlink\" title=\"3 .墙裂推荐使用AppCompat\"></a>3 .墙裂推荐使用AppCompat</h3><p>  好处: </p>\n<ul>\n<li>Material on all devices ,记得以前听说AppCompat在21以上继承自Theme.Material。</li>\n<li><p>Baseline themes/styles AppCompat 预设了一系列样式标准，只需要继承AppCompat，改动一小部分样式就能完成设计</p>\n<ul>\n<li>Enable View theming pre-Lollipop </li>\n<li>使用ColorPrimary , ColorAccent等attributes(backPorted by AppCompat)设置Widget样式</li>\n<li>在Theme中可以定义默认的Widget样式，例如<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span> = <span class=\"string\">\"Theme.AppCompat\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:spinnerItemStyle\"</span>&gt;</span>@sytle/MySpinnerStyle<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>还可以更改默认样式：</p>\n</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"AttrTheme\"</span> <span class=\"attr\">parent</span> =<span class=\"string\">\"Theme.AppCompat\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> =<span class=\"string\">\"selectableItemBackground\"</span>&gt;</span>@drawable/bg<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">使用时</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">android:background</span>=<span class=\"string\">?attr/selectableItemBackground</span>\"/&gt;</span></div></pre></td></tr></table></figure>\n<p>这样就可以自定义点击时的Drawable了。</p>\n<ul>\n<li>支持android:theme: API 7+(只应用于该View)，API 11+(View及其子View) </li>\n</ul>\n<p>View theming原本只是API 21才引入的概念，AppCompat实现了向前兼容</p>\n<h3 id=\"4-attr的问题\"><a href=\"#4-attr的问题\" class=\"headerlink\" title=\"4 .  ?attr的问题\"></a>4 .  ?attr的问题</h3><blockquote>\n<p>?android:attr/selectableItemBackground</p>\n</blockquote>\n<p>一个个来解释：</p>\n<p>?  :  we’re doing a theme lookup</p>\n<p>android:  we’re looking up something within the android namespace</p>\n<p>attr/  : we’re looking for an attribute(可省略)</p>\n<p>selectableItemBackground: The name of the atribute we’re looking up</p>\n<p>把attr/省略掉后变成</p>\n<blockquote>\n<p>?android:selectableItemBackground</p>\n</blockquote>\n<p>效果完全一样</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyTheme\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:colorPrimary\"</span>&gt;</span>@color/red<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>问题在于android:ColorPromary是Lollipop才引入的，解决方案</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">syle</span> <span class=\"attr\">name</span> = <span class=\"string\">\"MyTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat\"</span>&gt;</span></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/red<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">syle</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>注意这里没有android: 前缀，AppCompat针对API21之前的版本定义了自己的一套资源。</p>\n<p>再举个例子</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">在values/attrs.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name:</span>\"<span class=\"attr\">myAttribute</span>\" <span class=\"attr\">format</span>=<span class=\"string\">\"dimension\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\">在values/themes.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"MyTheme\"</span> <span class=\"attr\">parent</span> = <span class=\"string\">\"Theme.AppCompat\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"myAttribute\"</span>&gt;</span>4dp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span>  这就是实际使用的Theme</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">在values/styles.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyStyle\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:padding\"</span>&gt;</span>?attr/myAttribute<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">实际操作中</div><div class=\"line\">在layout文件中，通过将一个长度，颜色定义为?attr的方式，就会去当前的Theme中寻找相对应的attribute，这就是黑夜模式切换的原理</div></pre></td></tr></table></figure>\n<p>要注意的是，所有非android nameSpace的attribute Name都是global的，所以如果两个library定义了相同的attribute Name，将无法编译通过。</p>\n<p>Style可以通过?attr的方式引用Theme中的资源</p>\n<h3 id=\"5-获取Theme\"><a href=\"#5-获取Theme\" class=\"headerlink\" title=\"5 .获取Theme\"></a>5 .获取Theme</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.getTheme().resolveAttribute(R.attr.dialogTheme,outValue,<span class=\"keyword\">true</span>)</div><div class=\"line\">  </div><div class=\"line\">在View中</div><div class=\"line\">  TypedArray a = context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.ImageView,defStyleAttr,defStyleRes)</div><div class=\"line\">  </div><div class=\"line\"><span class=\"keyword\">int</span> alpha = a.getInt(</div><div class=\"line\">  com.android.internal.R.styleable.ImageView_drawableAlpha,<span class=\"number\">255</span>)</div></pre></td></tr></table></figure>\n<p>Activity有一个setTheme(int themeResId)方法，注意，这个方法并不是取代原先的Theme,只是在原有的Theme上apply了。所以这个命名不算太好。Activity内部会在onCreate()前调用setTheme(你写在manifest里面的Theme)</p>\n<h3 id=\"6-v21的问题\"><a href=\"#6-v21的问题\" class=\"headerlink\" title=\"6. v21的问题\"></a>6. v21的问题</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">在values/styles.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"BaseToolbar\"</span>/&gt;</span><span class=\"xml\"></div><div class=\"line\"></div><div class=\"line\">在values-v21/styles.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>= <span class=\"string\">\"BaseToolbar\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:elevation\"</span>&gt;</span>4dp<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">elevation是21以上api才有的属性，lint会提示问题</div><div class=\"line\">这样，在values/styles.xml中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"Toolbar\"</span> <span class=\"attr\">parent</span> = <span class=\"string\">\"BaseToolbar\"</span>/&gt;</span><span class=\"undefined\"></div><div class=\"line\">lint就不会飙黄了，直接引用Toolbar即可</span></div></pre></td></tr></table></figure>\n<p>通过这种继承的方式能够在自己的Theme中使用统一的theme，针对不同的运行时版本确定最终运行的Theme。</p>\n<h3 id=\"7-ThemeOverlay\"><a href=\"#7-ThemeOverlay\" class=\"headerlink\" title=\"7 . ThemeOverlay\"></a>7 . ThemeOverlay</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ThemeOverlay.Material.Light</div><div class=\"line\">ThemeOverlay.Material.Dark</div><div class=\"line\"><span class=\"comment\">//etc ...</span></div></pre></td></tr></table></figure>\n<p>用于添加到现有的Theme上，例如Theme.Material.Light只包含color relevant to a light Theme，不会改变原有Theme的window Attributes。查看源码，只是完整的Theme中的一小部分attribute。</p>\n<h3 id=\"8-常见错误\"><a href=\"#8-常见错误\" class=\"headerlink\" title=\"8. 常见错误\"></a>8. 常见错误</h3><ol>\n<li>作为Theme中引用的style必须要有一个parent</li>\n</ol>\n<p>例如<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">在AppTheme中</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:editTextStyle\"</span>&gt;</span>@style/MyEditTextStyle<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>= <span class=\"string\">\"MyEditTextStyle\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>= <span class=\"string\">\"android:fontFamily\"</span>&gt;</span></div><div class=\"line\">  sans-serif-medium</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样做的结果将是所有的EditText都会失去基本的属性</p>\n<ol>\n<li>defStyleAttr vs defStyleRes</li>\n</ol>\n<p>常见于 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObtainStyledAttributes(AttributeSet set,<span class=\"keyword\">int</span> []attrs,</div><div class=\"line\"> <span class=\"keyword\">int</span> defStyleAttr,<span class=\"keyword\">int</span> defStyleRes)</div></pre></td></tr></table></figure>\n<p>直接解释：</p>\n<blockquote>\n<p> defStyleAttr: The attr in your theme which points to the default style</p>\n<p> eg: R.attr.editTextStyle</p>\n<p> defStyleRes: The resource ID of the default style</p>\n<p> eg:R.style.Widget_Material_EditText</p>\n</blockquote>\n<p>ObtainStyledAttributes查找Value时读取的顺序如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>. Value in the AttributeSet</div><div class=\"line\"><span class=\"number\">2</span>. Value in the explicit style</div><div class=\"line\"><span class=\"number\">3</span>. Default style specified in defStyleRes</div><div class=\"line\"><span class=\"number\">4</span>. Default style specified in defStyleAttr</div><div class=\"line\"><span class=\"number\">5</span>. Base value in <span class=\"keyword\">this</span> theme</div></pre></td></tr></table></figure>\n<p>注意最后一条，万一在Manifest中出现这种东西</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">name</span> = <span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span> = <span class=\"string\">\"Theme.AppCompat\"</span>&gt;</span><span class=\"xml\"></div><div class=\"line\">true<span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span> = <span class=\"string\">\"android:background\"</span>&gt;</span>...<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这意味着</p>\n<blockquote>\n<p>Any View which doesn’t have a background set ,will use the theme’s value ,  SHIT!</p>\n</blockquote>\n<h3 id=\"9-最后，一点好玩的\"><a href=\"#9-最后，一点好玩的\" class=\"headerlink\" title=\"9. 最后，一点好玩的\"></a>9. 最后，一点好玩的</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Context themedContext = </div><div class=\"line\">  <span class=\"keyword\">new</span> ContextThemeWrapper(baseContext,R.style.MyTheme);</div><div class=\"line\"></div><div class=\"line\">View view = LayoutInflator.form(themedContext)</div><div class=\"line\">  \t\t.inflate(R.layout.some_layout,<span class=\"keyword\">null</span>);</div><div class=\"line\"><span class=\"comment\">//或者</span></div><div class=\"line\">View view = <span class=\"keyword\">new</span> View(themedContext);</div><div class=\"line\"><span class=\"comment\">//生成的View就会带有MyTheme中的属性，动态设置。</span></div></pre></td></tr></table></figure>\n<p>而这也是AppComPat对于API 21以下版本进行兼容的原理<br>翻了一下文档：<br>ContextThemeWrapper : Added in API level 1</p>\n<p>这一点AppCompat的作者也在2014年的一篇 <a href=\"https://chris.banes.me/2014/11/12/theme-vs-style/\">博客</a>中提到了。</p>\n<h2 id=\"reference\"><a href=\"#reference\" class=\"headerlink\" title=\"reference\"></a>reference</h2><ul>\n<li><a href=\"https://www.youtube.com/watch?v=Jr8hJdVGHAk\">Daniel Lew</a></li>\n<li><a href=\"http://blog.danlew.net/2016/07/19/a-deep-dive-into-android-view-constructors/\">View Constructor</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=TIHXGwRTMWI\">IO 2016</a></li>\n</ul>"},{"title":"安卓事件分发流程","date":"2016-10-06T15:32:30.000Z","_content":"\n![](http://odzl05jxx.bkt.clouddn.com/dispatch_touch_event_video.JPG)\n\n图1 默认情况下事件传递的路径 \n\n> Touch事件始于ACTION_DOWN, 终止于ACTION_UP, 这其中可能会伴随着ACTION_MOVE,ACTION_CANCEL等等。\n<!--more-->\n\n- 首先来关注ACTION_DOWN，用户触摸屏幕，MotionEvent开始传递：\n\n> 1. Activity.dispatchTouchEvent\n>\n> 2. ViewGroup.dispatchTouchEvent\n>\n> 3. ViewGroup.onInterceptTouchEvent\n>\n>    .....中间省略n个视图层级 ....>>>\n>\n> 4. View.dispatchTouchEvent\n>\n> 5. View.onTouchEvent\n>\n> ​      ....中间省略n个视图层级....>>>\n>\n> 6. ViewGroup.onTouchEvent\n> 7. Activity.onTouchEvent\n\n这也就是本文最开始的图1内描述的内容，注意，在默认情况下(各个函数都返回super的情况下)才能将这个从上到下，再从下到上的循环走完整。这里讨论的还只是ACTION_DOWN。\n\n- 接下来看ACTION_DOWN下发过程中各个函数返回值对于整个传递链走向的影响，我们在override这些函数的时候，返回值无非三种：\n\n  > true , false ,super\n\n  - return true：ACTION_DOWN事件分发到此结束(消费掉)，这里有一个要注意的是onInterceptTouchEvent,返回true表示该ViewGroup打算将事件拦截下来，底层View将接收到一个ACTION_CANCEL，事件传递给该ViewGroup的onTouchEvent\n  - return false: 对于dispatchTouchEvent，返回false表明不再向下分发，ACTION_DOWN发送到上一层ViewGroup(Activity)的OnTouchEvent；对于onInterceptTouchEvent,返回false表明该ViewGroup不打算拦截，继续下发，对于onTouchEvent，返回false，事件继续上传至上一层级ViewGroup的OnTouchEvent 。\n  - return super : 完成整个传递链，就像图1中展示的一样。\n\n![](http://odzl05jxx.bkt.clouddn.com/touch_event_1.png)\n\n图2 来自[图解安卓事件分发机制](http://www.jianshu.com/p/e99b5e8bd67b)  完美地解释了事件分发各个流程中返回值对于事件传递的影响。\n\n![](http://odzl05jxx.bkt.clouddn.com/touch_event_2.png)\n\n图3 来自[图解安卓事件分发机制](http://www.jianshu.com/p/e99b5e8bd67b) \n\n接下来看ACTION_DOWN时返回值对于后续ACTION_MOVE,ACTION_UP等传递路径的影响：\n\n首先介绍概念：\n\n> gesture = ACTION_DOWN+ a bounch of ACTIONS +ACTION_UP\n\n一个gesture(手势)即从手指按下到手指离开这段过程中所有的事件的集合,swipe,click,fling等等\n\nACTION_DWON发生时，android将会在当前touch区域所有的View中确定一个Touch Target,后者将接管此次gesture中的所有ACTION_MOVE,ACTION_UP。（这样做有两点好处：1.一旦确定了Touch Target，系统将会把所有的后续事件全部传递到这个target为止，这就避免了复杂的view traversing，有助于提升性能; 2：传递链中第一个能够成为Touch Target的View将独立处理后续事件，不需要考虑其他View受到影响）。在在一个gesture开始时，OnTouchEvent（ACTION_DOWN）返回true,就意味着成为TouchTarget。借用简书[作者](http://www.jianshu.com/p/e99b5e8bd67b)的总结:\n\n> ACTION_DOWN事件在哪个控件消费了（return true），  那么ACTION_MOVE和ACTION_UP就会从上往下（通过dispatchTouchEvent）做事件分发往下传，就只会传到这个控件，不会继续往下传，如果ACTION_DOWN事件是在dispatchTouchEvent消费，那么事件到此为止停止传递，如果ACTION_DOWN事件是在onTouchEvent消费的，那么会把ACTION_MOVE或ACTION_UP事件传给该控件的onTouchEvent处理并结束传递。\n\n这里可以看到，事件依旧是从上往下一直分发到TouchTarget这一层，只是在TouchTarget这一层被消费了，***且不再往上传递***(有助于性能提升)。父ViewGroup的dispatchTouchEvent和onInterceptTouchEvent依旧会先于TouchTarget接收到ACTION_MOVE等事件。所以此时如果父ViewGroup在onInterceptTouchEvent中返回true，父ViewGroup将取代原有的子View成为新的ViewTarget,后续事件(ACTION_MOVE等)将传递到该父ViewGroup中，而子View将收到ACTION_CANCEL(可以在这里做一些恢复状态的工作，比如从foucused变成unfocused)。举一个例子：在ScrollView(不是Android自带的那个)中放一个Button，ACTION_DOWN时，BUTTON表示可以处理ACTION_DOWN,因为这可能会是一次click，于是Button就成了TouchTarget，后续事件将不会传递到ScrollView中，ScrollView也就无法滑动。为解决这个问题，在ScrollView的onInterceptTouchEvent中，如果看到ACTION_DWON，返回false(点击事件对于滑动毫无意义)，但如果看到ACTION_MOVE(滑动事件),返回true并成为新的TouchTarget。注意是在OnInterceptTouchEvent中拦截而不是dispatchTouchEvent中拦截，后者会将事件传递到上层ViewGroup的onTouchEvent中。想想看，不去dispatch了、、、android这种Api起名还是可以的。\n\n### #onClick事件\n\n接下来看onClick和onLongClick，onTouchListener这类事件何时触发\n\n首先是View的dispatchTouchEvent源码部分\n\n```java\ncase MotionEvent.ACTION_UP:\n                    boolean prepressed = (mPrivateFlags & PFLAG_PREPRESSED) != 0;\n                    if ((mPrivateFlags & PFLAG_PRESSED) != 0 || prepressed) {\n                        // take focus if we don't have it already and we should in\n                        // touch mode.\n                        boolean focusTaken = false;\n                        if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {\n                            focusTaken = requestFocus();\n                        }\n\n                        if (prepressed) {\n                            // The button is being released before we actually\n                            // showed it as pressed.  Make it show the pressed\n                            // state now (before scheduling the click) to ensure\n                            // the user sees it.\n                            setPressed(true, x, y);\n                       }\n\n                        if (!mHasPerformedLongPress && !mIgnoreNextUpEvent) {\n                            // This is a tap, so remove the longpress check\n                            removeLongPressCallback();\n\n                            // Only perform take click actions if we were in the pressed state\n                            if (!focusTaken) {\n                                // Use a Runnable and post this rather than calling\n                                // performClick directly. This lets other visual state\n                                // of the view update before click actions start.\n                                if (mPerformClick == null) {\n                                    mPerformClick = new PerformClick();\n                                }\n                                if (!post(mPerformClick)) {\n                                    performClick();\n                                }\n                            }\n                        }\n\n                        if (mUnsetPressedState == null) {\n                            mUnsetPressedState = new UnsetPressedState();\n                        }\n\n                        if (prepressed) {\n                            postDelayed(mUnsetPressedState,\n                                    ViewConfiguration.getPressedStateDuration());\n                        } else if (!post(mUnsetPressedState)) {\n                            // If the post failed, unpress right now\n                            mUnsetPressedState.run();\n                        }\n\n                        removeTapCallback();\n                    }\n                    mIgnoreNextUpEvent = false;\n                    break;\n```\n\n所以onClick事件是在ACTION_UP中执行的\n\n而LongClick事件要看ACTION_DOWN了\n\n```java\n  case MotionEvent.ACTION_DOWN:\n                    mHasPerformedLongPress = false;\n\n                    if (performButtonActionOnTouchDown(event)) {\n                        break;\n                    }\n\n                    // Walk up the hierarchy to determine if we're inside a scrolling container.\n                    boolean isInScrollingContainer = isInScrollingContainer();\n\n                    // For views inside a scrolling container, delay the pressed feedback for\n                    // a short period in case this is a scroll.\n                    if (isInScrollingContainer) {\n                        mPrivateFlags |= PFLAG_PREPRESSED;\n                        if (mPendingCheckForTap == null) {\n                            mPendingCheckForTap = new CheckForTap();\n                        }\n                        mPendingCheckForTap.x = event.getX();\n                        mPendingCheckForTap.y = event.getY();\n                        postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());\n                    } else {\n                        // Not inside a scrolling container, so show the feedback right away\n                        setPressed(true, x, y);\n                        checkForLongClick(0, x, y);\n                    }\n                    break;\n```\n\n关键看checkForLongClick, 不贴代码了，结论是：在ACTION_DOWN事件被捕捉后，系统会开始触发一个postDelayed操作，delay的时间为\n\n> ```\n> ViewConfiguration.getLongPressTimeout() - delayOffset\n> ```\n\n（这个值在Eclair2.1上为500ms），500ms后会触发CheckForLongPress线程的执行：\n\n想想看，LongClick事件是在DOWN时开始计时，500ms假设，OnClick是在UP是发生，所以完全有可能同时发生OnClick和OnLongClick。这里看到当onLongClick的返回值为true时， *mHasPerformedLongPress* = true ,仔细看ACTION_UP中，如果HasPerformLongPress==true，就不会走到onClick事件里。所以在onLongClickListener里需要返回一个boolean值的原因就这么简单。\n\n```java\n if (!mHasPerformedLongPress && !mIgnoreNextUpEvent) {\n                            // This is a tap, so remove the longpress check\n                            removeLongPressCallback();\n\n                            // Only perform take click actions if we were in the pressed state\n                            if (!focusTaken) {\n                                // Use a Runnable and post this rather than calling\n                                // performClick directly. This lets other visual state\n                                // of the view update before click actions start.\n                                if (mPerformClick == null) {\n                                    mPerformClick = new PerformClick();\n                                }\n                                if (!post(mPerformClick)) {\n                                    performClick();\n                                }\n                            }\n                        }\n```\n\n接下来是OnTouchListener，直接上结论: onTouchListener里面的方法是在dispatchTouchEvent里面调用的，并且如果listener里面的onTouch返回true，事件将不会发送给onTouchEvent，因此OnTouchListener势必会优先级高于onClick和onLongClick。\n\n## VelocityTracker\n\n```java\nvelocityTracker = VelocityTracker.obtain()；\nvelocityTracker.addMovement(event);\nvelocityTracker.computeCurrentVelocity(1);  \nvelocityTracker.getXVelocity();\nvelocityTracker.recycle();\n```\n\n值得注意的是，VelocityTracker内部使用了大量的native方法，所以执行速度比java要快很多。\n\n### 实现Fling效果 \n\n```java\nprivate void onFling(float velocityX,float velocityY){\n  scroller.fling(getScrollX(),getScrollY(),(int)-velocityX\n                (int)-velocityY,minScrollX,maxScrollX,\n                minScrollY,maxScrollY);\n  invalidate();\n}\n@overdide// 这是每个View都有的方法\nprivate void computeScroll(){\n  if(scroller.isFinished()){\n    scroller.computeScrollOffset();\n    scrollTo(scroller.getCurrX(),scroller.getCurrY());\n    postInvalidateOnAnimation();\n  }\n}\n\n\n```\n\n### 捕获双击事件\n\n```java\npublic class MyView extends View {\n \nGestureDetector gestureDetector;\n \npublic MyView(Context context, AttributeSet attrs) {\n    super(context, attrs);\n            // creating new gesture detector \n    gestureDetector = new GestureDetector(context, new GestureListener());\n} \n \n// skipping measure calculation and drawing \n \n    // delegate the event to the gesture detector \n@Override \npublic boolean onTouchEvent(MotionEvent e) {\n    return gestureDetector.onTouchEvent(e);\n} \n \n \nprivate class GestureListener extends GestureDetector.SimpleOnGestureListener {\n \n    @Override \n    public boolean onDown(MotionEvent e) {\n        return true; \n    } \n    // event when double tap occurs \n    @Override \n    public boolean onDoubleTap(MotionEvent e) {\n        float x = e.getX();\n        float y = e.getY();\n \n        Log.d(\"Double Tap\", \"Tapped at: (\" + x + \",\" + y + \")\");\n \n        return true; \n    } \n} \n} \n```\n\n 最后是关于ViewConfiguration的一些常量获取的静态方法：\n\nint getScaledTouchSlop(); (if Math.abs(x*x+y*y)>mTouchSlop 就可以认为是滑动事件了)\n\n```java\n/**    \n  * 包含了方法和标准的常量用来设置UI的超时、大小和距离    \n  */ \n public class ViewConfiguration {     \n     // 设定水平滚动条的宽度和垂直滚动条的高度，单位是像素px     \n     private static final int SCROLL_BAR_SIZE = 10;     \n          \n     //定义滚动条逐渐消失的时间，单位是毫秒     \n     private static final int SCROLL_BAR_FADE_DURATION = 250;     \n          \n     // 默认的滚动条多少秒之后消失，单位是毫秒     \n     private static final int SCROLL_BAR_DEFAULT_DELAY = 300;     \n          \n     // 定义边缘地方褪色的长度     \n     private static final int FADING_EDGE_LENGTH = 12;     \n          \n     //定义子控件按下状态的持续事件     \n     private static final int PRESSED_STATE_DURATION = 125;     \n              \n     //定义一个按下状态转变成长按状态的转变时间     \n     private static final int LONG_PRESS_TIMEOUT = 500;     \n              \n     //定义用户在按住适当按钮，弹出全局的对话框的持续时间     \n     private static final int GLOBAL_ACTIONS_KEY_TIMEOUT = 500;     \n              \n     //定义一个touch事件中是点击事件还是一个滑动事件所需的时间，如果用户在这个时间之内滑动，那么就认为是一个点击事件     \n     private static final int TAP_TIMEOUT = 115;     \n              \n     /**    \n      * Defines the duration in milliseconds we will wait to see if a touch event     \n      * is a jump tap. If the user does not complete the jump tap within this interval, it is    \n      * considered to be a tap.     \n      */ \n     //定义一个touch事件时候是一个点击事件。如果用户在这个时间内没有完成这个点击，那么就认为是一个点击事件     \n     private static final int JUMP_TAP_TIMEOUT = 500;     \n          \n     //定义双击事件的间隔时间     \n     private static final int DOUBLE_TAP_TIMEOUT = 300;     \n              \n     //定义一个缩放控制反馈到用户界面的时间     \n     private static final int ZOOM_CONTROLS_TIMEOUT = 3000;     \n          \n     /**    \n      * Inset in pixels to look for touchable content when the user touches the edge of the screen    \n      */ \n     private static final int EDGE_SLOP = 12;     \n              \n     /**    \n      * Distance a touch can wander before we think the user is scrolling in pixels    \n      */ \n     private static final int TOUCH_SLOP = 16;     \n              \n     /**    \n      * Distance a touch can wander before we think the user is attempting a paged scroll    \n      * (in dips)    \n      */ \n     private static final int PAGING_TOUCH_SLOP = TOUCH_SLOP * 2;     \n              \n     /**    \n      * Distance between the first touch and second touch to still be considered a double tap    \n      */ \n     private static final int DOUBLE_TAP_SLOP = 100;     \n              \n     /**    \n      * Distance a touch needs to be outside of a window's bounds for it to    \n      * count as outside for purposes of dismissing the window.    \n      */ \n     private static final int WINDOW_TOUCH_SLOP = 16;     \n          \n    //用来初始化fling的最小速度，单位是每秒多少像素     \n     private static final int MINIMUM_FLING_VELOCITY = 50;     \n              \n     //用来初始化fling的最大速度，单位是每秒多少像素     \n     private static final int MAXIMUM_FLING_VELOCITY = 4000;     \n          \n     //视图绘图缓存的最大尺寸，以字节表示。在ARGB888格式下，这个尺寸应至少等于屏幕的大小     \n     @Deprecated     \n     private static final int MAXIMUM_DRAWING_CACHE_SIZE = 320 * 480 * 4; // HVGA screen, ARGB8888     \n          \n     //flings和scrolls摩擦力度大小的系数     \n     private static float SCROLL_FRICTION = 0.015f;     \n          \n     /**    \n      * Max distance to over scroll for edge effects    \n      */ \n     private static final int OVERSCROLL_DISTANCE = 0;     \n          \n     /**    \n      * Max distance to over fling for edge effects    \n      */ \n     private static final int OVERFLING_DISTANCE = 4;     \n          \n }\n```\n\n\n\n\n\n- ## Reference\n\n1. [图解安卓事件分发机制](http://www.jianshu.com/p/e99b5e8bd67b)\n2. [making sense of the touch system](https://www.youtube.com/watch?v=usBaTHZdXSI)\n3. [Android onTouchEvent, onClick及onLongClick的调用机制](http://blog.csdn.net/ddna/article/details/5451722)\n4. [Android触摸事件机制(三)](http://wangkuiwu.github.io/2015/01/03/TouchEvent-View/)\n5. [ViewConfiguration用法](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2013/0225/907.html)\n6. [触摸事件的分析与总结](http://glblong.blog.51cto.com/3058613/1559320)\n\n   ​","source":"_posts/touch-event-distribution.md","raw":"---\ntitle: 安卓事件分发流程\ndate: 2016-10-06 23:32:30\ntags: TouchEvent\n---\n\n![](http://odzl05jxx.bkt.clouddn.com/dispatch_touch_event_video.JPG)\n\n图1 默认情况下事件传递的路径 \n\n> Touch事件始于ACTION_DOWN, 终止于ACTION_UP, 这其中可能会伴随着ACTION_MOVE,ACTION_CANCEL等等。\n<!--more-->\n\n- 首先来关注ACTION_DOWN，用户触摸屏幕，MotionEvent开始传递：\n\n> 1. Activity.dispatchTouchEvent\n>\n> 2. ViewGroup.dispatchTouchEvent\n>\n> 3. ViewGroup.onInterceptTouchEvent\n>\n>    .....中间省略n个视图层级 ....>>>\n>\n> 4. View.dispatchTouchEvent\n>\n> 5. View.onTouchEvent\n>\n> ​      ....中间省略n个视图层级....>>>\n>\n> 6. ViewGroup.onTouchEvent\n> 7. Activity.onTouchEvent\n\n这也就是本文最开始的图1内描述的内容，注意，在默认情况下(各个函数都返回super的情况下)才能将这个从上到下，再从下到上的循环走完整。这里讨论的还只是ACTION_DOWN。\n\n- 接下来看ACTION_DOWN下发过程中各个函数返回值对于整个传递链走向的影响，我们在override这些函数的时候，返回值无非三种：\n\n  > true , false ,super\n\n  - return true：ACTION_DOWN事件分发到此结束(消费掉)，这里有一个要注意的是onInterceptTouchEvent,返回true表示该ViewGroup打算将事件拦截下来，底层View将接收到一个ACTION_CANCEL，事件传递给该ViewGroup的onTouchEvent\n  - return false: 对于dispatchTouchEvent，返回false表明不再向下分发，ACTION_DOWN发送到上一层ViewGroup(Activity)的OnTouchEvent；对于onInterceptTouchEvent,返回false表明该ViewGroup不打算拦截，继续下发，对于onTouchEvent，返回false，事件继续上传至上一层级ViewGroup的OnTouchEvent 。\n  - return super : 完成整个传递链，就像图1中展示的一样。\n\n![](http://odzl05jxx.bkt.clouddn.com/touch_event_1.png)\n\n图2 来自[图解安卓事件分发机制](http://www.jianshu.com/p/e99b5e8bd67b)  完美地解释了事件分发各个流程中返回值对于事件传递的影响。\n\n![](http://odzl05jxx.bkt.clouddn.com/touch_event_2.png)\n\n图3 来自[图解安卓事件分发机制](http://www.jianshu.com/p/e99b5e8bd67b) \n\n接下来看ACTION_DOWN时返回值对于后续ACTION_MOVE,ACTION_UP等传递路径的影响：\n\n首先介绍概念：\n\n> gesture = ACTION_DOWN+ a bounch of ACTIONS +ACTION_UP\n\n一个gesture(手势)即从手指按下到手指离开这段过程中所有的事件的集合,swipe,click,fling等等\n\nACTION_DWON发生时，android将会在当前touch区域所有的View中确定一个Touch Target,后者将接管此次gesture中的所有ACTION_MOVE,ACTION_UP。（这样做有两点好处：1.一旦确定了Touch Target，系统将会把所有的后续事件全部传递到这个target为止，这就避免了复杂的view traversing，有助于提升性能; 2：传递链中第一个能够成为Touch Target的View将独立处理后续事件，不需要考虑其他View受到影响）。在在一个gesture开始时，OnTouchEvent（ACTION_DOWN）返回true,就意味着成为TouchTarget。借用简书[作者](http://www.jianshu.com/p/e99b5e8bd67b)的总结:\n\n> ACTION_DOWN事件在哪个控件消费了（return true），  那么ACTION_MOVE和ACTION_UP就会从上往下（通过dispatchTouchEvent）做事件分发往下传，就只会传到这个控件，不会继续往下传，如果ACTION_DOWN事件是在dispatchTouchEvent消费，那么事件到此为止停止传递，如果ACTION_DOWN事件是在onTouchEvent消费的，那么会把ACTION_MOVE或ACTION_UP事件传给该控件的onTouchEvent处理并结束传递。\n\n这里可以看到，事件依旧是从上往下一直分发到TouchTarget这一层，只是在TouchTarget这一层被消费了，***且不再往上传递***(有助于性能提升)。父ViewGroup的dispatchTouchEvent和onInterceptTouchEvent依旧会先于TouchTarget接收到ACTION_MOVE等事件。所以此时如果父ViewGroup在onInterceptTouchEvent中返回true，父ViewGroup将取代原有的子View成为新的ViewTarget,后续事件(ACTION_MOVE等)将传递到该父ViewGroup中，而子View将收到ACTION_CANCEL(可以在这里做一些恢复状态的工作，比如从foucused变成unfocused)。举一个例子：在ScrollView(不是Android自带的那个)中放一个Button，ACTION_DOWN时，BUTTON表示可以处理ACTION_DOWN,因为这可能会是一次click，于是Button就成了TouchTarget，后续事件将不会传递到ScrollView中，ScrollView也就无法滑动。为解决这个问题，在ScrollView的onInterceptTouchEvent中，如果看到ACTION_DWON，返回false(点击事件对于滑动毫无意义)，但如果看到ACTION_MOVE(滑动事件),返回true并成为新的TouchTarget。注意是在OnInterceptTouchEvent中拦截而不是dispatchTouchEvent中拦截，后者会将事件传递到上层ViewGroup的onTouchEvent中。想想看，不去dispatch了、、、android这种Api起名还是可以的。\n\n### #onClick事件\n\n接下来看onClick和onLongClick，onTouchListener这类事件何时触发\n\n首先是View的dispatchTouchEvent源码部分\n\n```java\ncase MotionEvent.ACTION_UP:\n                    boolean prepressed = (mPrivateFlags & PFLAG_PREPRESSED) != 0;\n                    if ((mPrivateFlags & PFLAG_PRESSED) != 0 || prepressed) {\n                        // take focus if we don't have it already and we should in\n                        // touch mode.\n                        boolean focusTaken = false;\n                        if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {\n                            focusTaken = requestFocus();\n                        }\n\n                        if (prepressed) {\n                            // The button is being released before we actually\n                            // showed it as pressed.  Make it show the pressed\n                            // state now (before scheduling the click) to ensure\n                            // the user sees it.\n                            setPressed(true, x, y);\n                       }\n\n                        if (!mHasPerformedLongPress && !mIgnoreNextUpEvent) {\n                            // This is a tap, so remove the longpress check\n                            removeLongPressCallback();\n\n                            // Only perform take click actions if we were in the pressed state\n                            if (!focusTaken) {\n                                // Use a Runnable and post this rather than calling\n                                // performClick directly. This lets other visual state\n                                // of the view update before click actions start.\n                                if (mPerformClick == null) {\n                                    mPerformClick = new PerformClick();\n                                }\n                                if (!post(mPerformClick)) {\n                                    performClick();\n                                }\n                            }\n                        }\n\n                        if (mUnsetPressedState == null) {\n                            mUnsetPressedState = new UnsetPressedState();\n                        }\n\n                        if (prepressed) {\n                            postDelayed(mUnsetPressedState,\n                                    ViewConfiguration.getPressedStateDuration());\n                        } else if (!post(mUnsetPressedState)) {\n                            // If the post failed, unpress right now\n                            mUnsetPressedState.run();\n                        }\n\n                        removeTapCallback();\n                    }\n                    mIgnoreNextUpEvent = false;\n                    break;\n```\n\n所以onClick事件是在ACTION_UP中执行的\n\n而LongClick事件要看ACTION_DOWN了\n\n```java\n  case MotionEvent.ACTION_DOWN:\n                    mHasPerformedLongPress = false;\n\n                    if (performButtonActionOnTouchDown(event)) {\n                        break;\n                    }\n\n                    // Walk up the hierarchy to determine if we're inside a scrolling container.\n                    boolean isInScrollingContainer = isInScrollingContainer();\n\n                    // For views inside a scrolling container, delay the pressed feedback for\n                    // a short period in case this is a scroll.\n                    if (isInScrollingContainer) {\n                        mPrivateFlags |= PFLAG_PREPRESSED;\n                        if (mPendingCheckForTap == null) {\n                            mPendingCheckForTap = new CheckForTap();\n                        }\n                        mPendingCheckForTap.x = event.getX();\n                        mPendingCheckForTap.y = event.getY();\n                        postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());\n                    } else {\n                        // Not inside a scrolling container, so show the feedback right away\n                        setPressed(true, x, y);\n                        checkForLongClick(0, x, y);\n                    }\n                    break;\n```\n\n关键看checkForLongClick, 不贴代码了，结论是：在ACTION_DOWN事件被捕捉后，系统会开始触发一个postDelayed操作，delay的时间为\n\n> ```\n> ViewConfiguration.getLongPressTimeout() - delayOffset\n> ```\n\n（这个值在Eclair2.1上为500ms），500ms后会触发CheckForLongPress线程的执行：\n\n想想看，LongClick事件是在DOWN时开始计时，500ms假设，OnClick是在UP是发生，所以完全有可能同时发生OnClick和OnLongClick。这里看到当onLongClick的返回值为true时， *mHasPerformedLongPress* = true ,仔细看ACTION_UP中，如果HasPerformLongPress==true，就不会走到onClick事件里。所以在onLongClickListener里需要返回一个boolean值的原因就这么简单。\n\n```java\n if (!mHasPerformedLongPress && !mIgnoreNextUpEvent) {\n                            // This is a tap, so remove the longpress check\n                            removeLongPressCallback();\n\n                            // Only perform take click actions if we were in the pressed state\n                            if (!focusTaken) {\n                                // Use a Runnable and post this rather than calling\n                                // performClick directly. This lets other visual state\n                                // of the view update before click actions start.\n                                if (mPerformClick == null) {\n                                    mPerformClick = new PerformClick();\n                                }\n                                if (!post(mPerformClick)) {\n                                    performClick();\n                                }\n                            }\n                        }\n```\n\n接下来是OnTouchListener，直接上结论: onTouchListener里面的方法是在dispatchTouchEvent里面调用的，并且如果listener里面的onTouch返回true，事件将不会发送给onTouchEvent，因此OnTouchListener势必会优先级高于onClick和onLongClick。\n\n## VelocityTracker\n\n```java\nvelocityTracker = VelocityTracker.obtain()；\nvelocityTracker.addMovement(event);\nvelocityTracker.computeCurrentVelocity(1);  \nvelocityTracker.getXVelocity();\nvelocityTracker.recycle();\n```\n\n值得注意的是，VelocityTracker内部使用了大量的native方法，所以执行速度比java要快很多。\n\n### 实现Fling效果 \n\n```java\nprivate void onFling(float velocityX,float velocityY){\n  scroller.fling(getScrollX(),getScrollY(),(int)-velocityX\n                (int)-velocityY,minScrollX,maxScrollX,\n                minScrollY,maxScrollY);\n  invalidate();\n}\n@overdide// 这是每个View都有的方法\nprivate void computeScroll(){\n  if(scroller.isFinished()){\n    scroller.computeScrollOffset();\n    scrollTo(scroller.getCurrX(),scroller.getCurrY());\n    postInvalidateOnAnimation();\n  }\n}\n\n\n```\n\n### 捕获双击事件\n\n```java\npublic class MyView extends View {\n \nGestureDetector gestureDetector;\n \npublic MyView(Context context, AttributeSet attrs) {\n    super(context, attrs);\n            // creating new gesture detector \n    gestureDetector = new GestureDetector(context, new GestureListener());\n} \n \n// skipping measure calculation and drawing \n \n    // delegate the event to the gesture detector \n@Override \npublic boolean onTouchEvent(MotionEvent e) {\n    return gestureDetector.onTouchEvent(e);\n} \n \n \nprivate class GestureListener extends GestureDetector.SimpleOnGestureListener {\n \n    @Override \n    public boolean onDown(MotionEvent e) {\n        return true; \n    } \n    // event when double tap occurs \n    @Override \n    public boolean onDoubleTap(MotionEvent e) {\n        float x = e.getX();\n        float y = e.getY();\n \n        Log.d(\"Double Tap\", \"Tapped at: (\" + x + \",\" + y + \")\");\n \n        return true; \n    } \n} \n} \n```\n\n 最后是关于ViewConfiguration的一些常量获取的静态方法：\n\nint getScaledTouchSlop(); (if Math.abs(x*x+y*y)>mTouchSlop 就可以认为是滑动事件了)\n\n```java\n/**    \n  * 包含了方法和标准的常量用来设置UI的超时、大小和距离    \n  */ \n public class ViewConfiguration {     \n     // 设定水平滚动条的宽度和垂直滚动条的高度，单位是像素px     \n     private static final int SCROLL_BAR_SIZE = 10;     \n          \n     //定义滚动条逐渐消失的时间，单位是毫秒     \n     private static final int SCROLL_BAR_FADE_DURATION = 250;     \n          \n     // 默认的滚动条多少秒之后消失，单位是毫秒     \n     private static final int SCROLL_BAR_DEFAULT_DELAY = 300;     \n          \n     // 定义边缘地方褪色的长度     \n     private static final int FADING_EDGE_LENGTH = 12;     \n          \n     //定义子控件按下状态的持续事件     \n     private static final int PRESSED_STATE_DURATION = 125;     \n              \n     //定义一个按下状态转变成长按状态的转变时间     \n     private static final int LONG_PRESS_TIMEOUT = 500;     \n              \n     //定义用户在按住适当按钮，弹出全局的对话框的持续时间     \n     private static final int GLOBAL_ACTIONS_KEY_TIMEOUT = 500;     \n              \n     //定义一个touch事件中是点击事件还是一个滑动事件所需的时间，如果用户在这个时间之内滑动，那么就认为是一个点击事件     \n     private static final int TAP_TIMEOUT = 115;     \n              \n     /**    \n      * Defines the duration in milliseconds we will wait to see if a touch event     \n      * is a jump tap. If the user does not complete the jump tap within this interval, it is    \n      * considered to be a tap.     \n      */ \n     //定义一个touch事件时候是一个点击事件。如果用户在这个时间内没有完成这个点击，那么就认为是一个点击事件     \n     private static final int JUMP_TAP_TIMEOUT = 500;     \n          \n     //定义双击事件的间隔时间     \n     private static final int DOUBLE_TAP_TIMEOUT = 300;     \n              \n     //定义一个缩放控制反馈到用户界面的时间     \n     private static final int ZOOM_CONTROLS_TIMEOUT = 3000;     \n          \n     /**    \n      * Inset in pixels to look for touchable content when the user touches the edge of the screen    \n      */ \n     private static final int EDGE_SLOP = 12;     \n              \n     /**    \n      * Distance a touch can wander before we think the user is scrolling in pixels    \n      */ \n     private static final int TOUCH_SLOP = 16;     \n              \n     /**    \n      * Distance a touch can wander before we think the user is attempting a paged scroll    \n      * (in dips)    \n      */ \n     private static final int PAGING_TOUCH_SLOP = TOUCH_SLOP * 2;     \n              \n     /**    \n      * Distance between the first touch and second touch to still be considered a double tap    \n      */ \n     private static final int DOUBLE_TAP_SLOP = 100;     \n              \n     /**    \n      * Distance a touch needs to be outside of a window's bounds for it to    \n      * count as outside for purposes of dismissing the window.    \n      */ \n     private static final int WINDOW_TOUCH_SLOP = 16;     \n          \n    //用来初始化fling的最小速度，单位是每秒多少像素     \n     private static final int MINIMUM_FLING_VELOCITY = 50;     \n              \n     //用来初始化fling的最大速度，单位是每秒多少像素     \n     private static final int MAXIMUM_FLING_VELOCITY = 4000;     \n          \n     //视图绘图缓存的最大尺寸，以字节表示。在ARGB888格式下，这个尺寸应至少等于屏幕的大小     \n     @Deprecated     \n     private static final int MAXIMUM_DRAWING_CACHE_SIZE = 320 * 480 * 4; // HVGA screen, ARGB8888     \n          \n     //flings和scrolls摩擦力度大小的系数     \n     private static float SCROLL_FRICTION = 0.015f;     \n          \n     /**    \n      * Max distance to over scroll for edge effects    \n      */ \n     private static final int OVERSCROLL_DISTANCE = 0;     \n          \n     /**    \n      * Max distance to over fling for edge effects    \n      */ \n     private static final int OVERFLING_DISTANCE = 4;     \n          \n }\n```\n\n\n\n\n\n- ## Reference\n\n1. [图解安卓事件分发机制](http://www.jianshu.com/p/e99b5e8bd67b)\n2. [making sense of the touch system](https://www.youtube.com/watch?v=usBaTHZdXSI)\n3. [Android onTouchEvent, onClick及onLongClick的调用机制](http://blog.csdn.net/ddna/article/details/5451722)\n4. [Android触摸事件机制(三)](http://wangkuiwu.github.io/2015/01/03/TouchEvent-View/)\n5. [ViewConfiguration用法](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2013/0225/907.html)\n6. [触摸事件的分析与总结](http://glblong.blog.51cto.com/3058613/1559320)\n\n   ​","slug":"touch-event-distribution","published":1,"updated":"2016-10-12T14:16:22.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cixohzzno001l7gvr9g0ab0bz","content":"<p><img src=\"http://odzl05jxx.bkt.clouddn.com/dispatch_touch_event_video.JPG\" alt=\"\"></p>\n<p>图1 默认情况下事件传递的路径 </p>\n<blockquote>\n<p>Touch事件始于ACTION_DOWN, 终止于ACTION_UP, 这其中可能会伴随着ACTION_MOVE,ACTION_CANCEL等等。<br><a id=\"more\"></a></p>\n</blockquote>\n<ul>\n<li>首先来关注ACTION_DOWN，用户触摸屏幕，MotionEvent开始传递：</li>\n</ul>\n<blockquote>\n<ol>\n<li><p>Activity.dispatchTouchEvent</p>\n</li>\n<li><p>ViewGroup.dispatchTouchEvent</p>\n</li>\n<li><p>ViewGroup.onInterceptTouchEvent</p>\n<p>…..中间省略n个视图层级 ….&gt;&gt;&gt;</p>\n</li>\n<li><p>View.dispatchTouchEvent</p>\n</li>\n<li><p>View.onTouchEvent</p>\n</li>\n</ol>\n<p>​      ….中间省略n个视图层级….&gt;&gt;&gt;</p>\n<ol>\n<li>ViewGroup.onTouchEvent</li>\n<li>Activity.onTouchEvent</li>\n</ol>\n</blockquote>\n<p>这也就是本文最开始的图1内描述的内容，注意，在默认情况下(各个函数都返回super的情况下)才能将这个从上到下，再从下到上的循环走完整。这里讨论的还只是ACTION_DOWN。</p>\n<ul>\n<li><p>接下来看ACTION_DOWN下发过程中各个函数返回值对于整个传递链走向的影响，我们在override这些函数的时候，返回值无非三种：</p>\n<blockquote>\n<p>true , false ,super</p>\n</blockquote>\n<ul>\n<li>return true：ACTION_DOWN事件分发到此结束(消费掉)，这里有一个要注意的是onInterceptTouchEvent,返回true表示该ViewGroup打算将事件拦截下来，底层View将接收到一个ACTION_CANCEL，事件传递给该ViewGroup的onTouchEvent</li>\n<li>return false: 对于dispatchTouchEvent，返回false表明不再向下分发，ACTION_DOWN发送到上一层ViewGroup(Activity)的OnTouchEvent；对于onInterceptTouchEvent,返回false表明该ViewGroup不打算拦截，继续下发，对于onTouchEvent，返回false，事件继续上传至上一层级ViewGroup的OnTouchEvent 。</li>\n<li>return super : 完成整个传递链，就像图1中展示的一样。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/touch_event_1.png\" alt=\"\"></p>\n<p>图2 来自<a href=\"http://www.jianshu.com/p/e99b5e8bd67b\" target=\"_blank\" rel=\"external\">图解安卓事件分发机制</a>  完美地解释了事件分发各个流程中返回值对于事件传递的影响。</p>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/touch_event_2.png\" alt=\"\"></p>\n<p>图3 来自<a href=\"http://www.jianshu.com/p/e99b5e8bd67b\" target=\"_blank\" rel=\"external\">图解安卓事件分发机制</a> </p>\n<p>接下来看ACTION_DOWN时返回值对于后续ACTION_MOVE,ACTION_UP等传递路径的影响：</p>\n<p>首先介绍概念：</p>\n<blockquote>\n<p>gesture = ACTION_DOWN+ a bounch of ACTIONS +ACTION_UP</p>\n</blockquote>\n<p>一个gesture(手势)即从手指按下到手指离开这段过程中所有的事件的集合,swipe,click,fling等等</p>\n<p>ACTION_DWON发生时，android将会在当前touch区域所有的View中确定一个Touch Target,后者将接管此次gesture中的所有ACTION_MOVE,ACTION_UP。（这样做有两点好处：1.一旦确定了Touch Target，系统将会把所有的后续事件全部传递到这个target为止，这就避免了复杂的view traversing，有助于提升性能; 2：传递链中第一个能够成为Touch Target的View将独立处理后续事件，不需要考虑其他View受到影响）。在在一个gesture开始时，OnTouchEvent（ACTION_DOWN）返回true,就意味着成为TouchTarget。借用简书<a href=\"http://www.jianshu.com/p/e99b5e8bd67b\" target=\"_blank\" rel=\"external\">作者</a>的总结:</p>\n<blockquote>\n<p>ACTION_DOWN事件在哪个控件消费了（return true），  那么ACTION_MOVE和ACTION_UP就会从上往下（通过dispatchTouchEvent）做事件分发往下传，就只会传到这个控件，不会继续往下传，如果ACTION_DOWN事件是在dispatchTouchEvent消费，那么事件到此为止停止传递，如果ACTION_DOWN事件是在onTouchEvent消费的，那么会把ACTION_MOVE或ACTION_UP事件传给该控件的onTouchEvent处理并结束传递。</p>\n</blockquote>\n<p>这里可以看到，事件依旧是从上往下一直分发到TouchTarget这一层，只是在TouchTarget这一层被消费了，<strong><em>且不再往上传递</em></strong>(有助于性能提升)。父ViewGroup的dispatchTouchEvent和onInterceptTouchEvent依旧会先于TouchTarget接收到ACTION_MOVE等事件。所以此时如果父ViewGroup在onInterceptTouchEvent中返回true，父ViewGroup将取代原有的子View成为新的ViewTarget,后续事件(ACTION_MOVE等)将传递到该父ViewGroup中，而子View将收到ACTION_CANCEL(可以在这里做一些恢复状态的工作，比如从foucused变成unfocused)。举一个例子：在ScrollView(不是Android自带的那个)中放一个Button，ACTION_DOWN时，BUTTON表示可以处理ACTION_DOWN,因为这可能会是一次click，于是Button就成了TouchTarget，后续事件将不会传递到ScrollView中，ScrollView也就无法滑动。为解决这个问题，在ScrollView的onInterceptTouchEvent中，如果看到ACTION_DWON，返回false(点击事件对于滑动毫无意义)，但如果看到ACTION_MOVE(滑动事件),返回true并成为新的TouchTarget。注意是在OnInterceptTouchEvent中拦截而不是dispatchTouchEvent中拦截，后者会将事件传递到上层ViewGroup的onTouchEvent中。想想看，不去dispatch了、、、android这种Api起名还是可以的。</p>\n<h3 id=\"onClick事件\"><a href=\"#onClick事件\" class=\"headerlink\" title=\"#onClick事件\"></a>#onClick事件</h3><p>接下来看onClick和onLongClick，onTouchListener这类事件何时触发</p>\n<p>首先是View的dispatchTouchEvent源码部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                    <span class=\"keyword\">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span> || prepressed) &#123;</div><div class=\"line\">                        <span class=\"comment\">// take focus if we don't have it already and we should in</span></div><div class=\"line\">                        <span class=\"comment\">// touch mode.</span></div><div class=\"line\">                        <span class=\"keyword\">boolean</span> focusTaken = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class=\"line\">                            focusTaken = requestFocus();</div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (prepressed) &#123;</div><div class=\"line\">                            <span class=\"comment\">// The button is being released before we actually</span></div><div class=\"line\">                            <span class=\"comment\">// showed it as pressed.  Make it show the pressed</span></div><div class=\"line\">                            <span class=\"comment\">// state now (before scheduling the click) to ensure</span></div><div class=\"line\">                            <span class=\"comment\">// the user sees it.</span></div><div class=\"line\">                            setPressed(<span class=\"keyword\">true</span>, x, y);</div><div class=\"line\">                       &#125;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class=\"line\">                            <span class=\"comment\">// This is a tap, so remove the longpress check</span></div><div class=\"line\">                            removeLongPressCallback();</div><div class=\"line\"></div><div class=\"line\">                            <span class=\"comment\">// Only perform take click actions if we were in the pressed state</span></div><div class=\"line\">                            <span class=\"keyword\">if</span> (!focusTaken) &#123;</div><div class=\"line\">                                <span class=\"comment\">// Use a Runnable and post this rather than calling</span></div><div class=\"line\">                                <span class=\"comment\">// performClick directly. This lets other visual state</span></div><div class=\"line\">                                <span class=\"comment\">// of the view update before click actions start.</span></div><div class=\"line\">                                <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                    mPerformClick = <span class=\"keyword\">new</span> PerformClick();</div><div class=\"line\">                                &#125;</div><div class=\"line\">                                <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</div><div class=\"line\">                                    performClick();</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (mUnsetPressedState == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            mUnsetPressedState = <span class=\"keyword\">new</span> UnsetPressedState();</div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (prepressed) &#123;</div><div class=\"line\">                            postDelayed(mUnsetPressedState,</div><div class=\"line\">                                    ViewConfiguration.getPressedStateDuration());</div><div class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!post(mUnsetPressedState)) &#123;</div><div class=\"line\">                            <span class=\"comment\">// If the post failed, unpress right now</span></div><div class=\"line\">                            mUnsetPressedState.run();</div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                        removeTapCallback();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    mIgnoreNextUpEvent = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div></pre></td></tr></table></figure>\n<p>所以onClick事件是在ACTION_UP中执行的</p>\n<p>而LongClick事件要看ACTION_DOWN了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                  mHasPerformedLongPress = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">if</span> (performButtonActionOnTouchDown(event)) &#123;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"comment\">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></div><div class=\"line\">                  <span class=\"keyword\">boolean</span> isInScrollingContainer = isInScrollingContainer();</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"comment\">// For views inside a scrolling container, delay the pressed feedback for</span></div><div class=\"line\">                  <span class=\"comment\">// a short period in case this is a scroll.</span></div><div class=\"line\">                  <span class=\"keyword\">if</span> (isInScrollingContainer) &#123;</div><div class=\"line\">                      mPrivateFlags |= PFLAG_PREPRESSED;</div><div class=\"line\">                      <span class=\"keyword\">if</span> (mPendingCheckForTap == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                          mPendingCheckForTap = <span class=\"keyword\">new</span> CheckForTap();</div><div class=\"line\">                      &#125;</div><div class=\"line\">                      mPendingCheckForTap.x = event.getX();</div><div class=\"line\">                      mPendingCheckForTap.y = event.getY();</div><div class=\"line\">                      postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                      <span class=\"comment\">// Not inside a scrolling container, so show the feedback right away</span></div><div class=\"line\">                      setPressed(<span class=\"keyword\">true</span>, x, y);</div><div class=\"line\">                      checkForLongClick(<span class=\"number\">0</span>, x, y);</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div></pre></td></tr></table></figure>\n<p>关键看checkForLongClick, 不贴代码了，结论是：在ACTION_DOWN事件被捕捉后，系统会开始触发一个postDelayed操作，delay的时间为</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; ViewConfiguration.getLongPressTimeout() - delayOffset</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>（这个值在Eclair2.1上为500ms），500ms后会触发CheckForLongPress线程的执行：</p>\n<p>想想看，LongClick事件是在DOWN时开始计时，500ms假设，OnClick是在UP是发生，所以完全有可能同时发生OnClick和OnLongClick。这里看到当onLongClick的返回值为true时， <em>mHasPerformedLongPress</em> = true ,仔细看ACTION_UP中，如果HasPerformLongPress==true，就不会走到onClick事件里。所以在onLongClickListener里需要返回一个boolean值的原因就这么简单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class=\"line\">                           <span class=\"comment\">// This is a tap, so remove the longpress check</span></div><div class=\"line\">                           removeLongPressCallback();</div><div class=\"line\"></div><div class=\"line\">                           <span class=\"comment\">// Only perform take click actions if we were in the pressed state</span></div><div class=\"line\">                           <span class=\"keyword\">if</span> (!focusTaken) &#123;</div><div class=\"line\">                               <span class=\"comment\">// Use a Runnable and post this rather than calling</span></div><div class=\"line\">                               <span class=\"comment\">// performClick directly. This lets other visual state</span></div><div class=\"line\">                               <span class=\"comment\">// of the view update before click actions start.</span></div><div class=\"line\">                               <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                   mPerformClick = <span class=\"keyword\">new</span> PerformClick();</div><div class=\"line\">                               &#125;</div><div class=\"line\">                               <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</div><div class=\"line\">                                   performClick();</div><div class=\"line\">                               &#125;</div><div class=\"line\">                           &#125;</div><div class=\"line\">                       &#125;</div></pre></td></tr></table></figure>\n<p>接下来是OnTouchListener，直接上结论: onTouchListener里面的方法是在dispatchTouchEvent里面调用的，并且如果listener里面的onTouch返回true，事件将不会发送给onTouchEvent，因此OnTouchListener势必会优先级高于onClick和onLongClick。</p>\n<h2 id=\"VelocityTracker\"><a href=\"#VelocityTracker\" class=\"headerlink\" title=\"VelocityTracker\"></a>VelocityTracker</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker = VelocityTracker.obtain()；</div><div class=\"line\">velocityTracker.addMovement(event);</div><div class=\"line\">velocityTracker.computeCurrentVelocity(<span class=\"number\">1</span>);  </div><div class=\"line\">velocityTracker.getXVelocity();</div><div class=\"line\">velocityTracker.recycle();</div></pre></td></tr></table></figure>\n<p>值得注意的是，VelocityTracker内部使用了大量的native方法，所以执行速度比java要快很多。</p>\n<h3 id=\"实现Fling效果\"><a href=\"#实现Fling效果\" class=\"headerlink\" title=\"实现Fling效果\"></a>实现Fling效果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onFling</span><span class=\"params\">(<span class=\"keyword\">float</span> velocityX,<span class=\"keyword\">float</span> velocityY)</span></span>&#123;</div><div class=\"line\">  scroller.fling(getScrollX(),getScrollY(),(<span class=\"keyword\">int</span>)-velocityX</div><div class=\"line\">                (<span class=\"keyword\">int</span>)-velocityY,minScrollX,maxScrollX,</div><div class=\"line\">                minScrollY,maxScrollY);</div><div class=\"line\">  invalidate();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@overdide</span><span class=\"comment\">// 这是每个View都有的方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(scroller.isFinished())&#123;</div><div class=\"line\">    scroller.computeScrollOffset();</div><div class=\"line\">    scrollTo(scroller.getCurrX(),scroller.getCurrY());</div><div class=\"line\">    postInvalidateOnAnimation();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"捕获双击事件\"><a href=\"#捕获双击事件\" class=\"headerlink\" title=\"捕获双击事件\"></a>捕获双击事件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">GestureDetector gestureDetector;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">            <span class=\"comment\">// creating new gesture detector </span></div><div class=\"line\">    gestureDetector = <span class=\"keyword\">new</span> GestureDetector(context, <span class=\"keyword\">new</span> GestureListener());</div><div class=\"line\">&#125; </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// skipping measure calculation and drawing </span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">// delegate the event to the gesture detector </span></div><div class=\"line\"><span class=\"meta\">@Override</span> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gestureDetector.onTouchEvent(e);</div><div class=\"line\">&#125; </div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GestureListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">GestureDetector</span>.<span class=\"title\">SimpleOnGestureListener</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDown</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"comment\">// event when double tap occurs </span></div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDoubleTap</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">float</span> x = e.getX();</div><div class=\"line\">        <span class=\"keyword\">float</span> y = e.getY();</div><div class=\"line\"> </div><div class=\"line\">        Log.d(<span class=\"string\">\"Double Tap\"</span>, <span class=\"string\">\"Tapped at: (\"</span> + x + <span class=\"string\">\",\"</span> + y + <span class=\"string\">\")\"</span>);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 最后是关于ViewConfiguration的一些常量获取的静态方法：</p>\n<p>int getScaledTouchSlop(); (if Math.abs(x<em>x+y</em>y)&gt;mTouchSlop 就可以认为是滑动事件了)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**    </span></div><div class=\"line\">  * 包含了方法和标准的常量用来设置UI的超时、大小和距离    </div><div class=\"line\">  */ </div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewConfiguration</span> </span>&#123;     </div><div class=\"line\">     <span class=\"comment\">// 设定水平滚动条的宽度和垂直滚动条的高度，单位是像素px     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SCROLL_BAR_SIZE = <span class=\"number\">10</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">//定义滚动条逐渐消失的时间，单位是毫秒     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SCROLL_BAR_FADE_DURATION = <span class=\"number\">250</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">// 默认的滚动条多少秒之后消失，单位是毫秒     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SCROLL_BAR_DEFAULT_DELAY = <span class=\"number\">300</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">// 定义边缘地方褪色的长度     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FADING_EDGE_LENGTH = <span class=\"number\">12</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">//定义子控件按下状态的持续事件     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PRESSED_STATE_DURATION = <span class=\"number\">125</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">//定义一个按下状态转变成长按状态的转变时间     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LONG_PRESS_TIMEOUT = <span class=\"number\">500</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">//定义用户在按住适当按钮，弹出全局的对话框的持续时间     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> GLOBAL_ACTIONS_KEY_TIMEOUT = <span class=\"number\">500</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">//定义一个touch事件中是点击事件还是一个滑动事件所需的时间，如果用户在这个时间之内滑动，那么就认为是一个点击事件     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TAP_TIMEOUT = <span class=\"number\">115</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">/**    </span></div><div class=\"line\">      * Defines the duration in milliseconds we will wait to see if a touch event     </div><div class=\"line\">      * is a jump tap. If the user does not complete the jump tap within this interval, it is    </div><div class=\"line\">      * considered to be a tap.     </div><div class=\"line\">      */ </div><div class=\"line\">     <span class=\"comment\">//定义一个touch事件时候是一个点击事件。如果用户在这个时间内没有完成这个点击，那么就认为是一个点击事件     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> JUMP_TAP_TIMEOUT = <span class=\"number\">500</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">//定义双击事件的间隔时间     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DOUBLE_TAP_TIMEOUT = <span class=\"number\">300</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">//定义一个缩放控制反馈到用户界面的时间     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ZOOM_CONTROLS_TIMEOUT = <span class=\"number\">3000</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">/**    </span></div><div class=\"line\">      * Inset in pixels to look for touchable content when the user touches the edge of the screen    </div><div class=\"line\">      */ </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EDGE_SLOP = <span class=\"number\">12</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">/**    </span></div><div class=\"line\">      * Distance a touch can wander before we think the user is scrolling in pixels    </div><div class=\"line\">      */ </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TOUCH_SLOP = <span class=\"number\">16</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">/**    </span></div><div class=\"line\">      * Distance a touch can wander before we think the user is attempting a paged scroll    </div><div class=\"line\">      * (in dips)    </div><div class=\"line\">      */ </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PAGING_TOUCH_SLOP = TOUCH_SLOP * <span class=\"number\">2</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">/**    </span></div><div class=\"line\">      * Distance between the first touch and second touch to still be considered a double tap    </div><div class=\"line\">      */ </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DOUBLE_TAP_SLOP = <span class=\"number\">100</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">/**    </span></div><div class=\"line\">      * Distance a touch needs to be outside of a window's bounds for it to    </div><div class=\"line\">      * count as outside for purposes of dismissing the window.    </div><div class=\"line\">      */ </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> WINDOW_TOUCH_SLOP = <span class=\"number\">16</span>;     </div><div class=\"line\">          </div><div class=\"line\">    <span class=\"comment\">//用来初始化fling的最小速度，单位是每秒多少像素     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MINIMUM_FLING_VELOCITY = <span class=\"number\">50</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">//用来初始化fling的最大速度，单位是每秒多少像素     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_FLING_VELOCITY = <span class=\"number\">4000</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">//视图绘图缓存的最大尺寸，以字节表示。在ARGB888格式下，这个尺寸应至少等于屏幕的大小     </span></div><div class=\"line\">     <span class=\"meta\">@Deprecated</span>     </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_DRAWING_CACHE_SIZE = <span class=\"number\">320</span> * <span class=\"number\">480</span> * <span class=\"number\">4</span>; <span class=\"comment\">// HVGA screen, ARGB8888     </span></div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">//flings和scrolls摩擦力度大小的系数     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> SCROLL_FRICTION = <span class=\"number\">0.015f</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">/**    </span></div><div class=\"line\">      * Max distance to over scroll for edge effects    </div><div class=\"line\">      */ </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> OVERSCROLL_DISTANCE = <span class=\"number\">0</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">/**    </span></div><div class=\"line\">      * Max distance to over fling for edge effects    </div><div class=\"line\">      */ </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> OVERFLING_DISTANCE = <span class=\"number\">4</span>;     </div><div class=\"line\">          </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2></li>\n</ul>\n<ol>\n<li><a href=\"http://www.jianshu.com/p/e99b5e8bd67b\" target=\"_blank\" rel=\"external\">图解安卓事件分发机制</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=usBaTHZdXSI\" target=\"_blank\" rel=\"external\">making sense of the touch system</a></li>\n<li><a href=\"http://blog.csdn.net/ddna/article/details/5451722\" target=\"_blank\" rel=\"external\">Android onTouchEvent, onClick及onLongClick的调用机制</a></li>\n<li><a href=\"http://wangkuiwu.github.io/2015/01/03/TouchEvent-View/\" target=\"_blank\" rel=\"external\">Android触摸事件机制(三)</a></li>\n<li><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2013/0225/907.html\" target=\"_blank\" rel=\"external\">ViewConfiguration用法</a></li>\n<li><p><a href=\"http://glblong.blog.51cto.com/3058613/1559320\" target=\"_blank\" rel=\"external\">触摸事件的分析与总结</a></p>\n<p>​</p>\n</li>\n</ol>\n","excerpt":"<p><img src=\"http://odzl05jxx.bkt.clouddn.com/dispatch_touch_event_video.JPG\" alt=\"\"></p>\n<p>图1 默认情况下事件传递的路径 </p>\n<blockquote>\n<p>Touch事件始于ACTION_DOWN, 终止于ACTION_UP, 这其中可能会伴随着ACTION_MOVE,ACTION_CANCEL等等。<br>","more":"</p>\n</blockquote>\n<ul>\n<li>首先来关注ACTION_DOWN，用户触摸屏幕，MotionEvent开始传递：</li>\n</ul>\n<blockquote>\n<ol>\n<li><p>Activity.dispatchTouchEvent</p>\n</li>\n<li><p>ViewGroup.dispatchTouchEvent</p>\n</li>\n<li><p>ViewGroup.onInterceptTouchEvent</p>\n<p>…..中间省略n个视图层级 ….&gt;&gt;&gt;</p>\n</li>\n<li><p>View.dispatchTouchEvent</p>\n</li>\n<li><p>View.onTouchEvent</p>\n</li>\n</ol>\n<p>​      ….中间省略n个视图层级….&gt;&gt;&gt;</p>\n<ol>\n<li>ViewGroup.onTouchEvent</li>\n<li>Activity.onTouchEvent</li>\n</ol>\n</blockquote>\n<p>这也就是本文最开始的图1内描述的内容，注意，在默认情况下(各个函数都返回super的情况下)才能将这个从上到下，再从下到上的循环走完整。这里讨论的还只是ACTION_DOWN。</p>\n<ul>\n<li><p>接下来看ACTION_DOWN下发过程中各个函数返回值对于整个传递链走向的影响，我们在override这些函数的时候，返回值无非三种：</p>\n<blockquote>\n<p>true , false ,super</p>\n</blockquote>\n<ul>\n<li>return true：ACTION_DOWN事件分发到此结束(消费掉)，这里有一个要注意的是onInterceptTouchEvent,返回true表示该ViewGroup打算将事件拦截下来，底层View将接收到一个ACTION_CANCEL，事件传递给该ViewGroup的onTouchEvent</li>\n<li>return false: 对于dispatchTouchEvent，返回false表明不再向下分发，ACTION_DOWN发送到上一层ViewGroup(Activity)的OnTouchEvent；对于onInterceptTouchEvent,返回false表明该ViewGroup不打算拦截，继续下发，对于onTouchEvent，返回false，事件继续上传至上一层级ViewGroup的OnTouchEvent 。</li>\n<li>return super : 完成整个传递链，就像图1中展示的一样。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/touch_event_1.png\" alt=\"\"></p>\n<p>图2 来自<a href=\"http://www.jianshu.com/p/e99b5e8bd67b\">图解安卓事件分发机制</a>  完美地解释了事件分发各个流程中返回值对于事件传递的影响。</p>\n<p><img src=\"http://odzl05jxx.bkt.clouddn.com/touch_event_2.png\" alt=\"\"></p>\n<p>图3 来自<a href=\"http://www.jianshu.com/p/e99b5e8bd67b\">图解安卓事件分发机制</a> </p>\n<p>接下来看ACTION_DOWN时返回值对于后续ACTION_MOVE,ACTION_UP等传递路径的影响：</p>\n<p>首先介绍概念：</p>\n<blockquote>\n<p>gesture = ACTION_DOWN+ a bounch of ACTIONS +ACTION_UP</p>\n</blockquote>\n<p>一个gesture(手势)即从手指按下到手指离开这段过程中所有的事件的集合,swipe,click,fling等等</p>\n<p>ACTION_DWON发生时，android将会在当前touch区域所有的View中确定一个Touch Target,后者将接管此次gesture中的所有ACTION_MOVE,ACTION_UP。（这样做有两点好处：1.一旦确定了Touch Target，系统将会把所有的后续事件全部传递到这个target为止，这就避免了复杂的view traversing，有助于提升性能; 2：传递链中第一个能够成为Touch Target的View将独立处理后续事件，不需要考虑其他View受到影响）。在在一个gesture开始时，OnTouchEvent（ACTION_DOWN）返回true,就意味着成为TouchTarget。借用简书<a href=\"http://www.jianshu.com/p/e99b5e8bd67b\">作者</a>的总结:</p>\n<blockquote>\n<p>ACTION_DOWN事件在哪个控件消费了（return true），  那么ACTION_MOVE和ACTION_UP就会从上往下（通过dispatchTouchEvent）做事件分发往下传，就只会传到这个控件，不会继续往下传，如果ACTION_DOWN事件是在dispatchTouchEvent消费，那么事件到此为止停止传递，如果ACTION_DOWN事件是在onTouchEvent消费的，那么会把ACTION_MOVE或ACTION_UP事件传给该控件的onTouchEvent处理并结束传递。</p>\n</blockquote>\n<p>这里可以看到，事件依旧是从上往下一直分发到TouchTarget这一层，只是在TouchTarget这一层被消费了，<strong><em>且不再往上传递</em></strong>(有助于性能提升)。父ViewGroup的dispatchTouchEvent和onInterceptTouchEvent依旧会先于TouchTarget接收到ACTION_MOVE等事件。所以此时如果父ViewGroup在onInterceptTouchEvent中返回true，父ViewGroup将取代原有的子View成为新的ViewTarget,后续事件(ACTION_MOVE等)将传递到该父ViewGroup中，而子View将收到ACTION_CANCEL(可以在这里做一些恢复状态的工作，比如从foucused变成unfocused)。举一个例子：在ScrollView(不是Android自带的那个)中放一个Button，ACTION_DOWN时，BUTTON表示可以处理ACTION_DOWN,因为这可能会是一次click，于是Button就成了TouchTarget，后续事件将不会传递到ScrollView中，ScrollView也就无法滑动。为解决这个问题，在ScrollView的onInterceptTouchEvent中，如果看到ACTION_DWON，返回false(点击事件对于滑动毫无意义)，但如果看到ACTION_MOVE(滑动事件),返回true并成为新的TouchTarget。注意是在OnInterceptTouchEvent中拦截而不是dispatchTouchEvent中拦截，后者会将事件传递到上层ViewGroup的onTouchEvent中。想想看，不去dispatch了、、、android这种Api起名还是可以的。</p>\n<h3 id=\"onClick事件\"><a href=\"#onClick事件\" class=\"headerlink\" title=\"#onClick事件\"></a>#onClick事件</h3><p>接下来看onClick和onLongClick，onTouchListener这类事件何时触发</p>\n<p>首先是View的dispatchTouchEvent源码部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</div><div class=\"line\">                    <span class=\"keyword\">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class=\"number\">0</span>;</div><div class=\"line\">                    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span> || prepressed) &#123;</div><div class=\"line\">                        <span class=\"comment\">// take focus if we don't have it already and we should in</span></div><div class=\"line\">                        <span class=\"comment\">// touch mode.</span></div><div class=\"line\">                        <span class=\"keyword\">boolean</span> focusTaken = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        <span class=\"keyword\">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class=\"line\">                            focusTaken = requestFocus();</div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (prepressed) &#123;</div><div class=\"line\">                            <span class=\"comment\">// The button is being released before we actually</span></div><div class=\"line\">                            <span class=\"comment\">// showed it as pressed.  Make it show the pressed</span></div><div class=\"line\">                            <span class=\"comment\">// state now (before scheduling the click) to ensure</span></div><div class=\"line\">                            <span class=\"comment\">// the user sees it.</span></div><div class=\"line\">                            setPressed(<span class=\"keyword\">true</span>, x, y);</div><div class=\"line\">                       &#125;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class=\"line\">                            <span class=\"comment\">// This is a tap, so remove the longpress check</span></div><div class=\"line\">                            removeLongPressCallback();</div><div class=\"line\"></div><div class=\"line\">                            <span class=\"comment\">// Only perform take click actions if we were in the pressed state</span></div><div class=\"line\">                            <span class=\"keyword\">if</span> (!focusTaken) &#123;</div><div class=\"line\">                                <span class=\"comment\">// Use a Runnable and post this rather than calling</span></div><div class=\"line\">                                <span class=\"comment\">// performClick directly. This lets other visual state</span></div><div class=\"line\">                                <span class=\"comment\">// of the view update before click actions start.</span></div><div class=\"line\">                                <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                    mPerformClick = <span class=\"keyword\">new</span> PerformClick();</div><div class=\"line\">                                &#125;</div><div class=\"line\">                                <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</div><div class=\"line\">                                    performClick();</div><div class=\"line\">                                &#125;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (mUnsetPressedState == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                            mUnsetPressedState = <span class=\"keyword\">new</span> UnsetPressedState();</div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                        <span class=\"keyword\">if</span> (prepressed) &#123;</div><div class=\"line\">                            postDelayed(mUnsetPressedState,</div><div class=\"line\">                                    ViewConfiguration.getPressedStateDuration());</div><div class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!post(mUnsetPressedState)) &#123;</div><div class=\"line\">                            <span class=\"comment\">// If the post failed, unpress right now</span></div><div class=\"line\">                            mUnsetPressedState.run();</div><div class=\"line\">                        &#125;</div><div class=\"line\"></div><div class=\"line\">                        removeTapCallback();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    mIgnoreNextUpEvent = <span class=\"keyword\">false</span>;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div></pre></td></tr></table></figure>\n<p>所以onClick事件是在ACTION_UP中执行的</p>\n<p>而LongClick事件要看ACTION_DOWN了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</div><div class=\"line\">                  mHasPerformedLongPress = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"keyword\">if</span> (performButtonActionOnTouchDown(event)) &#123;</div><div class=\"line\">                      <span class=\"keyword\">break</span>;</div><div class=\"line\">                  &#125;</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"comment\">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></div><div class=\"line\">                  <span class=\"keyword\">boolean</span> isInScrollingContainer = isInScrollingContainer();</div><div class=\"line\"></div><div class=\"line\">                  <span class=\"comment\">// For views inside a scrolling container, delay the pressed feedback for</span></div><div class=\"line\">                  <span class=\"comment\">// a short period in case this is a scroll.</span></div><div class=\"line\">                  <span class=\"keyword\">if</span> (isInScrollingContainer) &#123;</div><div class=\"line\">                      mPrivateFlags |= PFLAG_PREPRESSED;</div><div class=\"line\">                      <span class=\"keyword\">if</span> (mPendingCheckForTap == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                          mPendingCheckForTap = <span class=\"keyword\">new</span> CheckForTap();</div><div class=\"line\">                      &#125;</div><div class=\"line\">                      mPendingCheckForTap.x = event.getX();</div><div class=\"line\">                      mPendingCheckForTap.y = event.getY();</div><div class=\"line\">                      postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                      <span class=\"comment\">// Not inside a scrolling container, so show the feedback right away</span></div><div class=\"line\">                      setPressed(<span class=\"keyword\">true</span>, x, y);</div><div class=\"line\">                      checkForLongClick(<span class=\"number\">0</span>, x, y);</div><div class=\"line\">                  &#125;</div><div class=\"line\">                  <span class=\"keyword\">break</span>;</div></pre></td></tr></table></figure>\n<p>关键看checkForLongClick, 不贴代码了，结论是：在ACTION_DOWN事件被捕捉后，系统会开始触发一个postDelayed操作，delay的时间为</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; ViewConfiguration.getLongPressTimeout() - delayOffset</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>（这个值在Eclair2.1上为500ms），500ms后会触发CheckForLongPress线程的执行：</p>\n<p>想想看，LongClick事件是在DOWN时开始计时，500ms假设，OnClick是在UP是发生，所以完全有可能同时发生OnClick和OnLongClick。这里看到当onLongClick的返回值为true时， <em>mHasPerformedLongPress</em> = true ,仔细看ACTION_UP中，如果HasPerformLongPress==true，就不会走到onClick事件里。所以在onLongClickListener里需要返回一个boolean值的原因就这么简单。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class=\"line\">                           <span class=\"comment\">// This is a tap, so remove the longpress check</span></div><div class=\"line\">                           removeLongPressCallback();</div><div class=\"line\"></div><div class=\"line\">                           <span class=\"comment\">// Only perform take click actions if we were in the pressed state</span></div><div class=\"line\">                           <span class=\"keyword\">if</span> (!focusTaken) &#123;</div><div class=\"line\">                               <span class=\"comment\">// Use a Runnable and post this rather than calling</span></div><div class=\"line\">                               <span class=\"comment\">// performClick directly. This lets other visual state</span></div><div class=\"line\">                               <span class=\"comment\">// of the view update before click actions start.</span></div><div class=\"line\">                               <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                                   mPerformClick = <span class=\"keyword\">new</span> PerformClick();</div><div class=\"line\">                               &#125;</div><div class=\"line\">                               <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</div><div class=\"line\">                                   performClick();</div><div class=\"line\">                               &#125;</div><div class=\"line\">                           &#125;</div><div class=\"line\">                       &#125;</div></pre></td></tr></table></figure>\n<p>接下来是OnTouchListener，直接上结论: onTouchListener里面的方法是在dispatchTouchEvent里面调用的，并且如果listener里面的onTouch返回true，事件将不会发送给onTouchEvent，因此OnTouchListener势必会优先级高于onClick和onLongClick。</p>\n<h2 id=\"VelocityTracker\"><a href=\"#VelocityTracker\" class=\"headerlink\" title=\"VelocityTracker\"></a>VelocityTracker</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">velocityTracker = VelocityTracker.obtain()；</div><div class=\"line\">velocityTracker.addMovement(event);</div><div class=\"line\">velocityTracker.computeCurrentVelocity(<span class=\"number\">1</span>);  </div><div class=\"line\">velocityTracker.getXVelocity();</div><div class=\"line\">velocityTracker.recycle();</div></pre></td></tr></table></figure>\n<p>值得注意的是，VelocityTracker内部使用了大量的native方法，所以执行速度比java要快很多。</p>\n<h3 id=\"实现Fling效果\"><a href=\"#实现Fling效果\" class=\"headerlink\" title=\"实现Fling效果\"></a>实现Fling效果</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">onFling</span><span class=\"params\">(<span class=\"keyword\">float</span> velocityX,<span class=\"keyword\">float</span> velocityY)</span></span>&#123;</div><div class=\"line\">  scroller.fling(getScrollX(),getScrollY(),(<span class=\"keyword\">int</span>)-velocityX</div><div class=\"line\">                (<span class=\"keyword\">int</span>)-velocityY,minScrollX,maxScrollX,</div><div class=\"line\">                minScrollY,maxScrollY);</div><div class=\"line\">  invalidate();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@overdide</span><span class=\"comment\">// 这是每个View都有的方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(scroller.isFinished())&#123;</div><div class=\"line\">    scroller.computeScrollOffset();</div><div class=\"line\">    scrollTo(scroller.getCurrX(),scroller.getCurrY());</div><div class=\"line\">    postInvalidateOnAnimation();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"捕获双击事件\"><a href=\"#捕获双击事件\" class=\"headerlink\" title=\"捕获双击事件\"></a>捕获双击事件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">GestureDetector gestureDetector;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">            <span class=\"comment\">// creating new gesture detector </span></div><div class=\"line\">    gestureDetector = <span class=\"keyword\">new</span> GestureDetector(context, <span class=\"keyword\">new</span> GestureListener());</div><div class=\"line\">&#125; </div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// skipping measure calculation and drawing </span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">// delegate the event to the gesture detector </span></div><div class=\"line\"><span class=\"meta\">@Override</span> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> gestureDetector.onTouchEvent(e);</div><div class=\"line\">&#125; </div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GestureListener</span> <span class=\"keyword\">extends</span> <span class=\"title\">GestureDetector</span>.<span class=\"title\">SimpleOnGestureListener</span> </span>&#123;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDown</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"comment\">// event when double tap occurs </span></div><div class=\"line\">    <span class=\"meta\">@Override</span> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDoubleTap</span><span class=\"params\">(MotionEvent e)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">float</span> x = e.getX();</div><div class=\"line\">        <span class=\"keyword\">float</span> y = e.getY();</div><div class=\"line\"> </div><div class=\"line\">        Log.d(<span class=\"string\">\"Double Tap\"</span>, <span class=\"string\">\"Tapped at: (\"</span> + x + <span class=\"string\">\",\"</span> + y + <span class=\"string\">\")\"</span>);</div><div class=\"line\"> </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 最后是关于ViewConfiguration的一些常量获取的静态方法：</p>\n<p>int getScaledTouchSlop(); (if Math.abs(x<em>x+y</em>y)&gt;mTouchSlop 就可以认为是滑动事件了)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**    </div><div class=\"line\">  * 包含了方法和标准的常量用来设置UI的超时、大小和距离    </div><div class=\"line\">  */</span> </div><div class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewConfiguration</span> </span>&#123;     </div><div class=\"line\">     <span class=\"comment\">// 设定水平滚动条的宽度和垂直滚动条的高度，单位是像素px     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SCROLL_BAR_SIZE = <span class=\"number\">10</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">//定义滚动条逐渐消失的时间，单位是毫秒     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SCROLL_BAR_FADE_DURATION = <span class=\"number\">250</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">// 默认的滚动条多少秒之后消失，单位是毫秒     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SCROLL_BAR_DEFAULT_DELAY = <span class=\"number\">300</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">// 定义边缘地方褪色的长度     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> FADING_EDGE_LENGTH = <span class=\"number\">12</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">//定义子控件按下状态的持续事件     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PRESSED_STATE_DURATION = <span class=\"number\">125</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">//定义一个按下状态转变成长按状态的转变时间     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LONG_PRESS_TIMEOUT = <span class=\"number\">500</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">//定义用户在按住适当按钮，弹出全局的对话框的持续时间     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> GLOBAL_ACTIONS_KEY_TIMEOUT = <span class=\"number\">500</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">//定义一个touch事件中是点击事件还是一个滑动事件所需的时间，如果用户在这个时间之内滑动，那么就认为是一个点击事件     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TAP_TIMEOUT = <span class=\"number\">115</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">/**    </div><div class=\"line\">      * Defines the duration in milliseconds we will wait to see if a touch event     </div><div class=\"line\">      * is a jump tap. If the user does not complete the jump tap within this interval, it is    </div><div class=\"line\">      * considered to be a tap.     </div><div class=\"line\">      */</span> </div><div class=\"line\">     <span class=\"comment\">//定义一个touch事件时候是一个点击事件。如果用户在这个时间内没有完成这个点击，那么就认为是一个点击事件     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> JUMP_TAP_TIMEOUT = <span class=\"number\">500</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">//定义双击事件的间隔时间     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DOUBLE_TAP_TIMEOUT = <span class=\"number\">300</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">//定义一个缩放控制反馈到用户界面的时间     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ZOOM_CONTROLS_TIMEOUT = <span class=\"number\">3000</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">/**    </div><div class=\"line\">      * Inset in pixels to look for touchable content when the user touches the edge of the screen    </div><div class=\"line\">      */</span> </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> EDGE_SLOP = <span class=\"number\">12</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">/**    </div><div class=\"line\">      * Distance a touch can wander before we think the user is scrolling in pixels    </div><div class=\"line\">      */</span> </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TOUCH_SLOP = <span class=\"number\">16</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">/**    </div><div class=\"line\">      * Distance a touch can wander before we think the user is attempting a paged scroll    </div><div class=\"line\">      * (in dips)    </div><div class=\"line\">      */</span> </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PAGING_TOUCH_SLOP = TOUCH_SLOP * <span class=\"number\">2</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">/**    </div><div class=\"line\">      * Distance between the first touch and second touch to still be considered a double tap    </div><div class=\"line\">      */</span> </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DOUBLE_TAP_SLOP = <span class=\"number\">100</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">/**    </div><div class=\"line\">      * Distance a touch needs to be outside of a window's bounds for it to    </div><div class=\"line\">      * count as outside for purposes of dismissing the window.    </div><div class=\"line\">      */</span> </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> WINDOW_TOUCH_SLOP = <span class=\"number\">16</span>;     </div><div class=\"line\">          </div><div class=\"line\">    <span class=\"comment\">//用来初始化fling的最小速度，单位是每秒多少像素     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MINIMUM_FLING_VELOCITY = <span class=\"number\">50</span>;     </div><div class=\"line\">              </div><div class=\"line\">     <span class=\"comment\">//用来初始化fling的最大速度，单位是每秒多少像素     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_FLING_VELOCITY = <span class=\"number\">4000</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">//视图绘图缓存的最大尺寸，以字节表示。在ARGB888格式下，这个尺寸应至少等于屏幕的大小     </span></div><div class=\"line\">     <span class=\"meta\">@Deprecated</span>     </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAXIMUM_DRAWING_CACHE_SIZE = <span class=\"number\">320</span> * <span class=\"number\">480</span> * <span class=\"number\">4</span>; <span class=\"comment\">// HVGA screen, ARGB8888     </span></div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">//flings和scrolls摩擦力度大小的系数     </span></div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">float</span> SCROLL_FRICTION = <span class=\"number\">0.015f</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">/**    </div><div class=\"line\">      * Max distance to over scroll for edge effects    </div><div class=\"line\">      */</span> </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> OVERSCROLL_DISTANCE = <span class=\"number\">0</span>;     </div><div class=\"line\">          </div><div class=\"line\">     <span class=\"comment\">/**    </div><div class=\"line\">      * Max distance to over fling for edge effects    </div><div class=\"line\">      */</span> </div><div class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> OVERFLING_DISTANCE = <span class=\"number\">4</span>;     </div><div class=\"line\">          </div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2></li>\n</ul>\n<ol>\n<li><a href=\"http://www.jianshu.com/p/e99b5e8bd67b\">图解安卓事件分发机制</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=usBaTHZdXSI\">making sense of the touch system</a></li>\n<li><a href=\"http://blog.csdn.net/ddna/article/details/5451722\">Android onTouchEvent, onClick及onLongClick的调用机制</a></li>\n<li><a href=\"http://wangkuiwu.github.io/2015/01/03/TouchEvent-View/\">Android触摸事件机制(三)</a></li>\n<li><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2013/0225/907.html\">ViewConfiguration用法</a></li>\n<li><p><a href=\"http://glblong.blog.51cto.com/3058613/1559320\">触摸事件的分析与总结</a></p>\n<p>​</p>\n</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"cixohzzkw00007gvri14ca6kv","category_id":"cixohzzlb00027gvrnaa11q8f","_id":"cixohzzma000b7gvresbt8k6j"},{"post_id":"cixohzzlb00017gvr5z2z3awi","category_id":"cixohzzlr00077gvrrumouypg","_id":"cixohzzmd000h7gvr2sqswkgq"},{"post_id":"cixohzzmd000f7gvr7sgf1vbi","category_id":"cixohzzlb00027gvrnaa11q8f","_id":"cixohzzmd000l7gvrypvw411w"},{"post_id":"cixohzzlb00047gvr9i1qd2uy","category_id":"cixohzzlr00077gvrrumouypg","_id":"cixohzzmt000o7gvrajwwirq9"},{"post_id":"cixohzzmt000s7gvrx9bwe3ps","category_id":"cixohzzlr00077gvrrumouypg","_id":"cixohzzmt000y7gvr1irbb0xk"},{"post_id":"cixohzzmt000r7gvrnnd97tv1","category_id":"cixohzzmt000u7gvrebd92v86","_id":"cixohzzn800157gvrldd8flct"},{"post_id":"cixohzzmt000z7gvrvj7b3cox","category_id":"cixohzzlr00077gvrrumouypg","_id":"cixohzzn800187gvrmyrvvfhu"},{"post_id":"cixohzzmt000w7gvrcz8l07at","category_id":"cixohzzn800117gvrj7ei24wo","_id":"cixohzzno001e7gvr2a4ji5ln"},{"post_id":"cixohzzn800197gvrj0nmy1rs","category_id":"cixohzzn800117gvrj7ei24wo","_id":"cixohzzno001g7gvrju7zgcy1"},{"post_id":"cixohzzn8001c7gvrxg1d779g","category_id":"cixohzzlr00077gvrrumouypg","_id":"cixohzzno001j7gvrr9adz4ph"},{"post_id":"cixohzzno001f7gvrr9aqgmst","category_id":"cixohzzlr00077gvrrumouypg","_id":"cixohzzno001m7gvrrk3hkmnc"}],"PostTag":[{"post_id":"cixohzzkw00007gvri14ca6kv","tag_id":"cixohzzlb00037gvrimch8j5f","_id":"cixohzzlr00097gvrfd6mnbhq"},{"post_id":"cixohzzlb00017gvr5z2z3awi","tag_id":"cixohzzlr00087gvrk713cewa","_id":"cixohzzmd000k7gvr400io2p3"},{"post_id":"cixohzzlb00017gvr5z2z3awi","tag_id":"cixohzzmd000e7gvrpggysm2c","_id":"cixohzzmd000n7gvrvl4iwz54"},{"post_id":"cixohzzlb00047gvr9i1qd2uy","tag_id":"cixohzzmd000i7gvrqdmtsyc3","_id":"cixohzzn800107gvrdhdjpxhd"},{"post_id":"cixohzzlb00047gvr9i1qd2uy","tag_id":"cixohzzmt000p7gvrhgnlcy7h","_id":"cixohzzn800137gvrkltkzk2i"},{"post_id":"cixohzzlb00047gvr9i1qd2uy","tag_id":"cixohzzmt000t7gvrhad4i1hp","_id":"cixohzzn800177gvr38004op5"},{"post_id":"cixohzzlr00067gvrwha4x70r","tag_id":"cixohzzmt000x7gvrcd1nw2hb","_id":"cixohzzn8001a7gvrutsb4684"},{"post_id":"cixohzzmd000f7gvr7sgf1vbi","tag_id":"cixohzzn800147gvr92qw820i","_id":"cixohzzn8001d7gvr3csx0sg8"},{"post_id":"cixohzzmd000g7gvre597s0vk","tag_id":"cixohzzn8001b7gvry4vxojus","_id":"cixohzzno001k7gvr8e121p6r"},{"post_id":"cixohzzno001l7gvr9g0ab0bz","tag_id":"cixohzzmd000e7gvrpggysm2c","_id":"cixohzzno001o7gvr7qpms6ed"},{"post_id":"cixohzzmd000j7gvrs0rug9tt","tag_id":"cixohzzno001i7gvr5l59zr13","_id":"cixohzzno001p7gvrp0bjnxlg"},{"post_id":"cixohzzmt000r7gvrnnd97tv1","tag_id":"cixohzzn800147gvr92qw820i","_id":"cixohzzno001r7gvrpamhqieg"},{"post_id":"cixohzzmt000s7gvrx9bwe3ps","tag_id":"cixohzzno001q7gvr2iwblodk","_id":"cixohzzno001u7gvr6eflyfoc"},{"post_id":"cixohzzmt000s7gvrx9bwe3ps","tag_id":"cixohzzno001i7gvr5l59zr13","_id":"cixohzzno001v7gvroie2w44f"},{"post_id":"cixohzzmt000v7gvrw6bi85mk","tag_id":"cixohzzno001t7gvrdb6gju70","_id":"cixohzzno001x7gvrak4vqgcd"},{"post_id":"cixohzzmt000w7gvrcz8l07at","tag_id":"cixohzzno001i7gvr5l59zr13","_id":"cixohzzno001z7gvrlbktb4u0"},{"post_id":"cixohzzmt000z7gvrvj7b3cox","tag_id":"cixohzzno001y7gvrj7icckqg","_id":"cixohzzno00217gvrjiraa8c3"},{"post_id":"cixohzzn800167gvroz5hmnao","tag_id":"cixohzzno00207gvrjeq9a8nj","_id":"cixohzzno00237gvrwzrh31s4"},{"post_id":"cixohzzn800197gvrj0nmy1rs","tag_id":"cixohzzno00227gvrjw0edt18","_id":"cixohzzo400277gvr91r2rm05"},{"post_id":"cixohzzn800197gvrj0nmy1rs","tag_id":"cixohzzno00247gvrfx11ffcu","_id":"cixohzzo400287gvros6xtro0"},{"post_id":"cixohzzn800197gvrj0nmy1rs","tag_id":"cixohzzno001i7gvr5l59zr13","_id":"cixohzzo4002a7gvrnfysuxg9"},{"post_id":"cixohzzn8001c7gvrxg1d779g","tag_id":"cixohzzno00267gvrwxgda1yg","_id":"cixohzzo4002d7gvrch1eexjb"},{"post_id":"cixohzzn8001c7gvrxg1d779g","tag_id":"cixohzzo400297gvrr9xunyvs","_id":"cixohzzo4002e7gvrkd64wruw"},{"post_id":"cixohzzn8001c7gvrxg1d779g","tag_id":"cixohzzno001i7gvr5l59zr13","_id":"cixohzzo4002g7gvrmddn5muq"},{"post_id":"cixohzzno001f7gvrr9aqgmst","tag_id":"cixohzzo4002c7gvrsvzwq9sb","_id":"cixohzzo4002h7gvr1z1u6f99"},{"post_id":"cixohzzno001f7gvrr9aqgmst","tag_id":"cixohzzno001i7gvr5l59zr13","_id":"cixohzzo4002i7gvrlx8bs7dj"}],"Tag":[{"name":"Handler Message","_id":"cixohzzlb00037gvrimch8j5f"},{"name":"坐标","_id":"cixohzzlr00087gvrk713cewa"},{"name":"TouchEvent","_id":"cixohzzmd000e7gvrpggysm2c"},{"name":"Android","_id":"cixohzzmd000i7gvrqdmtsyc3"},{"name":"Window","_id":"cixohzzmt000p7gvrhgnlcy7h"},{"name":"statusBar","_id":"cixohzzmt000t7gvrhad4i1hp"},{"name":"RecyclerView","_id":"cixohzzmt000x7gvrcd1nw2hb"},{"name":"置顶","_id":"cixohzzn800147gvr92qw820i"},{"name":"Python","_id":"cixohzzn8001b7gvry4vxojus"},{"name":"android","_id":"cixohzzno001i7gvr5l59zr13"},{"name":"transition","_id":"cixohzzno001q7gvr2iwblodk"},{"name":"android 7","_id":"cixohzzno001t7gvrdb6gju70"},{"name":"git","_id":"cixohzzno001y7gvrj7icckqg"},{"name":"hexo","_id":"cixohzzno00207gvrjeq9a8nj"},{"name":"databinding","_id":"cixohzzno00227gvrjw0edt18"},{"name":"Butterknife","_id":"cixohzzno00247gvrfx11ffcu"},{"name":"随笔","_id":"cixohzzno00267gvrwxgda1yg"},{"name":"foreground","_id":"cixohzzo400297gvrr9xunyvs"},{"name":"service","_id":"cixohzzo4002c7gvrsvzwq9sb"}]}}