<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haldir的博客</title>
  <subtitle>get busy living</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haldir65.github.io/"/>
  <updated>2017-06-25T14:58:05.445Z</updated>
  <id>https://haldir65.github.io/</id>
  
  <author>
    <name>Haldir</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Collections Refuled by Stuart Marks</title>
    <link href="https://haldir65.github.io/2017/06/25/2017-06-12-Collections-Refuled-by-Stuart-Marks/"/>
    <id>https://haldir65.github.io/2017/06/25/2017-06-12-Collections-Refuled-by-Stuart-Marks/</id>
    <published>2017-06-25T14:56:33.000Z</published>
    <updated>2017-06-25T14:58:05.445Z</updated>
    
    <content type="html"><![CDATA[<p>list.replaceAll(String::toUpperCase) // can not change the elemeet type, for that you need an stream</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dodtuff</span><span class="params">()</span></span>&#123;</div><div class="line">    print()</div><div class="line">    <span class="comment">// show case awesome </span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;list.replaceAll(String::toUpperCase) // can not change the elemeet type, for that you need an stream&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="java" scheme="https://haldir65.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>在ubuntu服务器上部署flask web app</title>
    <link href="https://haldir65.github.io/2017/06/25/2017-06-25-deploying-flask-app-on-linux-server/"/>
    <id>https://haldir65.github.io/2017/06/25/2017-06-25-deploying-flask-app-on-linux-server/</id>
    <published>2017-06-25T14:46:23.000Z</published>
    <updated>2017-06-25T15:01:38.793Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/ChMkJ1fAMmKIIFpWAA_5Us41gQkAAUv1QE2Pp8AD_lq599.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<ol>
<li>virtualenv install</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sudo pip install virtualenv </div><div class="line">sudo virtualenv venv</div><div class="line"><span class="built_in">source</span> venv/bin/activate </div><div class="line">sudo pip install Flask </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># sudo python __init__.py</span></div><div class="line">sudo /var/www/FlaskApp/FlaskApp/venv/bin/python2 __init__.py</div><div class="line"></div><div class="line">deactivate <span class="comment"># exit</span></div></pre></td></tr></table></figure>
<ol>
<li>install apache2 , mysql-server… on ubuntu<br> 重启apache2服务 service apache2 restart</li>
<li></li>
</ol>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-a-flask-application-on-an-ubuntu-vps">how-to-deploy-a-flask-application-on-an-ubuntu-vps</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/ChMkJ1fAMmKIIFpWAA_5Us41gQkAAUv1QE2Pp8AD_lq599.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux常用命令扩展</title>
    <link href="https://haldir65.github.io/2017/06/18/2017-06-18-linux-commands-extended/"/>
    <id>https://haldir65.github.io/2017/06/18/2017-06-18-linux-commands-extended/</id>
    <published>2017-06-18T08:51:49.000Z</published>
    <updated>2017-06-25T14:56:46.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一些linux的常用命令，linux环境下运行server ,bash的语法</p>
</blockquote>
<p><img src="http://odzl05jxx.bkt.clouddn.com/ChMkJ1gq00WIXw_GAA47r_8gjqgAAXxJAH8qOMADjvH566.jpg?imageView2/2/w/600" alt=""></p>
<a id="more"></a>
<ol>
<li><p>常用软件安装<br><a href="http://blog.topspeedsnail.com/archives/5752">utorrent</a></p>
</li>
<li><p>环境变量怎么改<br>平时在shell中输入sudo XXX ,系统是如何知道怎么执行这条指令的呢。首先，可以查看which XXX ，用于查找某项指令对应的文件的位置。而像sudo这种都放在PATH位置，系统会在几个关键位置查找sudo命令。用户本身完全可以创建一个叫做sudo的文件chmod+X ，然后运行这个sudo。</p>
</li>
</ol>
<blockquote>
<p>$PATH</p>
</blockquote>
<ol>
<li></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一些linux的常用命令，linux环境下运行server ,bash的语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/ChMkJ1gq00WIXw_GAA47r_8gjqgAAXxJAH8qOMADjvH566.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>For those tiny details in Java</title>
    <link href="https://haldir65.github.io/2017/06/17/2017-06-17-tiny-details-in-java/"/>
    <id>https://haldir65.github.io/2017/06/17/2017-06-17-tiny-details-in-java/</id>
    <published>2017-06-17T13:24:48.000Z</published>
    <updated>2017-06-25T14:57:54.812Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>interesting stuff in java that don’t seem to get enough pubilicity</p>
</blockquote>
<p><img src="http://odzl05jxx.bkt.clouddn.com/34a7d57ccabb18c69d085247cf009b22.jpg?imageView2/2/w/600" alt="landscape"></p>
<a id="more"></a>
<ol>
<li>getting the concreate class from generic types <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">        <span class="comment">/**</div><div class="line">     * Make a GET request and return a parsed object from JSON.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> url     URL of the request to make</div><div class="line">     * <span class="doctag">@param</span> clazz   Relevant class object, for Gson's reflection</div><div class="line">     * <span class="doctag">@param</span> headers Map of request headers</div><div class="line">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericMoshiRequest</span><span class="params">(String url, @Nullable Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,</div><div class="line">                               Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Method.GET, url, errorListener);</div><div class="line"><span class="comment">//        this.clazz = clazz;</span></div><div class="line">        Class&lt;T&gt; entityClass = (Class&lt;T&gt;) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[<span class="number">0</span>];<span class="comment">//使用反射获得泛型对应class</span></div><div class="line">        <span class="keyword">this</span>.clazz = entityClass;</div><div class="line">        <span class="keyword">this</span>.headers = headers;</div><div class="line">        <span class="keyword">this</span>.listener = listener;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;interesting stuff in java that don’t seem to get enough pubilicity&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/34a7d57ccabb18c69d085247cf009b22.jpg?imageView2/2/w/600&quot; alt=&quot;landscape&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://haldir65.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用Python搭建本地服务器</title>
    <link href="https://haldir65.github.io/2017/06/15/2017-06-15-python-networks/"/>
    <id>https://haldir65.github.io/2017/06/15/2017-06-15-python-networks/</id>
    <published>2017-06-15T15:56:26.000Z</published>
    <updated>2017-06-25T14:43:05.939Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/c6dd030bf8cc75628fce3aec8216ba52.jpg?imageView2/2/w/600" alt="Kitty"><br>关于如何使用Python搭建后台的方法很多，这里列举出一些实例。<a id="more"></a></p>
<h3 id="1-The-Flask-Way"><a href="#1-The-Flask-Way" class="headerlink" title="1. The Flask Way"></a>1. The Flask Way</h3><h4 id="1-1-Basics"><a href="#1-1-Basics" class="headerlink" title="1.1 Basics"></a>1.1 Basics</h4><blockquote>
<p>Flask is a very simple, but extremely flexible framework Flask使用Decorator对请求进行处理</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python3</div><div class="line"># -*- coding:utf8 -*-</div><div class="line"></div><div class="line">from flask import Flask</div><div class="line">from flask import request</div><div class="line">from flask import jsonify</div><div class="line">from flask import send_file</div><div class="line"></div><div class="line"># create the flask object</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"># 处理GET请求像这样就可以了</div><div class="line"></div><div class="line">@app.route('/', methods=['GET'])</div><div class="line">def handle_get():</div><div class="line">    return 'haha ,this is http status code 200'</div><div class="line"></div><div class="line">#处理POST请求，从request中拿东西，返回response</div><div class="line">@app.route('/', methods=['POST'])</div><div class="line">def handle_post():</div><div class="line">    uid = request.form['uid'] # requets.form是一个list，从里面获取想表单的参数</div><div class="line">    name = request.form['name']</div><div class="line">    print('uid is %s ,name is %s ' % (uid, name))</div><div class="line">    return '200 Ok, or whatever you like'  </div><div class="line"></div><div class="line">if __name__ == '__main__':</div><div class="line">    app.run(port=12345, debug=True) #设置为True后，会自动检测到服务端代码更改并reload，出错了也会给client返回实际的错误堆栈， 生产环境不要打开Debug 。</div><div class="line"></div><div class="line"># 对于GET请求，获得query参数的方式</div><div class="line">http://127.0.0.1:12345/_search_user?user=111&amp;date=190</div><div class="line"></div><div class="line">@app.route('/_search_user', methods=['GET'])</div><div class="line">def query_user_profile():</div><div class="line">    user = request.args.get('user')</div><div class="line">    date = request.args.get('date')</div><div class="line">    print(user)</div><div class="line">    print(date)</div><div class="line">    return 'every Thing Ok'</div><div class="line"></div><div class="line"> 输出</div><div class="line"> 111</div><div class="line"> 190   </div><div class="line"></div><div class="line"> #返回json，作为API</div><div class="line">@app.route('/_get_current_user', methods=['GET'])</div><div class="line">def get_current_user():</div><div class="line">    return jsonify(</div><div class="line">        username='Admin',</div><div class="line">        email='Bob@gmail.com',</div><div class="line">        age=18</div><div class="line">    )    </div><div class="line"></div><div class="line">&#123;</div><div class="line">    username: 'Admin';</div><div class="line">    email: 'Bob@gamil.com';</div><div class="line">    age: 18</div><div class="line">&#125;</div><div class="line"></div><div class="line">#返回复杂一点的json，或者json数组 </div><div class="line">@app.route('/_get_user_list', methods=['GET'])</div><div class="line">def get_user_list():</div><div class="line">    user_list = create_user_list()</div><div class="line">    return Response(json.dumps(user_list), mimetype='application/json')</div><div class="line"></div><div class="line"></div><div class="line">#生成数据</div><div class="line">def create_user_list():</div><div class="line">    alice = &#123;'name': 'alice', 'age': 16, 'sex': 'female'&#125;</div><div class="line">    tom = &#123;'name': 'tom', 'age': 23, 'sex': 'male'&#125;</div><div class="line">    josh = &#123;'name': 'josh', 'age': 20, 'sex': 'male'&#125;</div><div class="line">    bill = &#123;'name': 'bill', 'age': 19, 'sex': 'male'&#125;</div><div class="line">    li = [alice, tom, josh, bill]</div><div class="line">    return li</div><div class="line"></div><div class="line"></div><div class="line"># 在Postman中就能获得这样的result</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        "name": "alice",</div><div class="line">        "age": 16,</div><div class="line">        "sex": "female"</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        "name": "tom",</div><div class="line">        "age": 23,</div><div class="line">        "sex": "male"</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        "name": "josh",</div><div class="line">        "age": 20,</div><div class="line">        "sex": "male"</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        "name": "bill",</div><div class="line">        "age": 19,</div><div class="line">        "sex": "male"</div><div class="line">    &#125;</div><div class="line">]</div><div class="line"></div><div class="line"># hosting static file，image,css,etc</div><div class="line"># 提供图片什么的</div><div class="line"></div><div class="line">@app.route('/_get_image', methods=['GET'])</div><div class="line">def get_image():</div><div class="line">    filename = 'static/image/b1.jpg'</div><div class="line">    fullpath = os.path.join(os.path.curdir, filename)</div><div class="line">    print(filename, fullpath)</div><div class="line">    return send_file(fullpath, mimetype='image/jpeg')</div></pre></td></tr></table></figure>
<p>我觉得Flask的官方Doc对初学者的友好度几乎是满分 </p>
<ul>
<li><a href="http://flask.pocoo.org/docs/0.12/quickstart/#accessing-request-data">accessing-request-data</a></li>
<li><a href="http://flask.pocoo.org/docs/0.12/quickstart/#cookies">cookies</a></li>
<li><a href="http://flask.pocoo.org/docs/0.12/quickstart/#sessions">sessions</a></li>
<li><a href="http://flask.pocoo.org/docs/0.12/quickstart/#static-files">static files</a><br>所有的静态文件必须放在当前目录下的static目录中，里面可以再创建image，css,404.html等文件<br>另外，如果要调试接口的话，用Postman吧，比Fiddler简单点<br>返回response的时候一定要指明mime-type，或者content-type<br>text/html、text/css、application/json什么的，<a href="http://www.runoob.com/http/http-content-type.html">详细的http-content-type表格</a><br>关于content-type,找到一篇<a href="http://homeway.me/2015/07/19/understand-http-about-content-type/">介绍</a><br>关于Http header常用字段<a href="http://zq210wl.github.io/2014/12/30/html-http-header-analysis/">理解Http Header</a><br>Http底层TCP ,ACK 等等需要tcpcump结合wireShark抓包</li>
</ul>
<blockquote>
<p>下面是几个常见的Content-Type:<br>1.text/html<br>2.text/plain<br>3.text/css<br>4.text/javascript<br>5.application/x-www-form-urlencoded<br>6.multipart/form-data<br>7.application/json<br>8.application/xml<br>…<br>前面几个都很好理解，都是html，css，javascript的文件类型，后面四个是POST的发包方式。</p>
</blockquote>
<h4 id="1-2-Flask-BluePrints"><a href="#1-2-Flask-BluePrints" class="headerlink" title="1.2 Flask BluePrints"></a>1.2 Flask BluePrints</h4><h4 id="1-3-Flask-gevent-提高web-框架的性能"><a href="#1-3-Flask-gevent-提高web-框架的性能" class="headerlink" title="1.3 Flask + gevent 提高web 框架的性能"></a>1.3 Flask + gevent 提高web 框架的性能</h4><p><a href="http://flask.pocoo.org/docs/0.12/deploying/wsgi-standalone/">docs</a></p>
<h3 id="2-The-Django-Way"><a href="#2-The-Django-Way" class="headerlink" title="2. The Django Way"></a>2. The Django Way</h3><p>Django是<strong>web framework</strong>，不是<strong>WebServer</strong></p>
<h3 id="3-Using-Tornado"><a href="#3-Using-Tornado" class="headerlink" title="3. Using Tornado"></a>3. Using Tornado</h3><h3 id="4-其他的点"><a href="#4-其他的点" class="headerlink" title="4. 其他的点"></a>4. 其他的点</h3><h4 id="4-1-Web架构"><a href="#4-1-Web架构" class="headerlink" title="4.1 Web架构"></a>4.1 Web架构</h4><p>网络库上手比较快，很重要的一点是理解其在通讯中的层级，Nigix属于代理转发，Flask处理业务逻辑，Tornado处理Http底层实现，Django负责用于高效网络应用开发</p>
<ul>
<li><a href="https://www.zhihu.com/question/41564604">Django和Flask这两个框架在设计上各方面有什么优缺点？
</a></li>
</ul>
<p>UrlLib，Socket这些属于Python底层的基础性的network库，属于基础的东西。</p>
<h4 id="4-2不服跑个分"><a href="#4-2不服跑个分" class="headerlink" title="4.2不服跑个分"></a>4.2不服跑个分</h4><p>引用一篇<a href="http://www.vimer.cn/archives/2926.html">测评</a></p>
<blockquote>
<p>可见纯框架自身的性能为:</p>
</blockquote>
<pre><code>bottle &gt; flask &gt; tornado &gt; django 
</code></pre><p>结合实际使用:</p>
<pre><code>tornado 使用了异步驱动，所以在写业务代码时如果稍有同步耗时性能就会急剧下降；
bottle需要自己实现的东西太多，加上之后不知道性能会怎样；
flask性能稍微差点，但周边的支持已经很丰富了；
django就不说了，性能已经没法看了，唯一的好处就是开发的架子都已经搭好，开发速度快很多
</code></pre><p>当然这些框架不是纯粹一个功能层面上的东西，可能有所偏差。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol>
<li>xxxx</li>
<li>xxxx</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/c6dd030bf8cc75628fce3aec8216ba52.jpg?imageView2/2/w/600&quot; alt=&quot;Kitty&quot;&gt;&lt;br&gt;关于如何使用Python搭建后台的方法很多，这里列举出一些实例。
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>jvm架构概述</title>
    <link href="https://haldir65.github.io/2017/05/24/2017-05-24-jvm-architecture/"/>
    <id>https://haldir65.github.io/2017/05/24/2017-05-24-jvm-architecture/</id>
    <published>2017-05-24T14:48:58.000Z</published>
    <updated>2017-06-18T05:10:51.560Z</updated>
    
    <content type="html"><![CDATA[<p>关于jvm运行的大致架构，最近找到一个比较合适的视频，记录要点如下<br><img src="http://odzl05jxx.bkt.clouddn.com/high_way_scene.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<h3 id="1-从MyApp-java文件开始"><a href="#1-从MyApp-java文件开始" class="headerlink" title="1.从MyApp.java文件开始"></a>1.从MyApp.java文件开始</h3><p>大家都知道最开始学习Java的时候，要用javac 来编译MyApp.java来生成一个class文件。<br>在命令行里，大致是这样的执行顺序:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">javac MyApp.java</div><div class="line">java MyApp</div></pre></td></tr></table></figure></p>
<h4 id="实际上后一句话就创建了一个jvm-instance"><a href="#实际上后一句话就创建了一个jvm-instance" class="headerlink" title="实际上后一句话就创建了一个jvm instance."></a>实际上后一句话就创建了一个jvm instance.</h4><h3 id="2-从class-loader进入Execution-Engine-再到Host-Operating-System"><a href="#2-从class-loader进入Execution-Engine-再到Host-Operating-System" class="headerlink" title="2. 从class loader进入Execution Engine 再到Host Operating System"></a>2. 从class loader进入Execution Engine 再到Host Operating System</h3><p>java MyApp会调用class loader，后者不仅要负责加载MyApp.class文件，还需要加载java API中的class文件（String,Object,Collection….）。加载的class文件（byte code）被传递给Execution Engine,后者则负责执行byte code（其实也是调用宿主操作系统的方法执行操作）</p>
<h3 id="3-where-did-class-loader-load-class-into"><a href="#3-where-did-class-loader-load-class-into" class="headerlink" title="3. where did class loader load class into ?"></a>3. where did class loader load class into ?</h3><p>classloader将class 文件加载进内存中的一部分（Runtime data areas）。到此，jvm architecture的三个主要组件：class loader subsystem,Runtime data areas 以及execution Enigne的主要功能都说清楚了。<br>所以，这篇文章主要就按照class loader subsystem -&gt; Runtime data areas -&gt; Execution Engine的顺序来讲。</p>
<h3 id="4-从classloader开始执行（class-loading-subsystem）"><a href="#4-从classloader开始执行（class-loading-subsystem）" class="headerlink" title="4.从classloader开始执行（class loading subsystem）"></a>4.从classloader开始执行（class loading subsystem）</h3><pre><code>- load 将byte code 加载进内存，来源可以是.java文件，可以是.jar文件，甚至可以是network Socket（这要看具体class loader的implementation）。load阶段包含三种不同的class loader，这也是面试时的重点。

&gt; 1. Bootstrap class loader (jre文件夹中有一个rt.jar文件，里面装的就是java的internal class) // 

&gt; 2. extension class loader (jre/lib/ext) //负责加载这个文件夹中的class文件

&gt; 3. Application class loader (CLASSPATH, -cp)//加载CLASSPATH变量中描述的位置

- load完成后是link
verify(检查是否是符合jvm标准的byte code) -&gt; prepare(为class中的static variable分配内存，variable被赋默认值) -&gt; Resolve(when all the symbolic reference inside currentclass are resolved，例如引用了其他的class，例如引用了常量池里面的东西，classDefNotFoundException也是在这个时候抛出的)

注意，以上步骤都是java specification所规定的，但不同的jvm实现可能有微小的差异
</code></pre><p>class loading subsystem的最后一步是initialize<br>class vars to initiazed Value in code(比如静态代码块就是在这时执行的)</p>
<h3 id="5-Runtime-data-area五个部分的划分"><a href="#5-Runtime-data-area五个部分的划分" class="headerlink" title="5. Runtime data area五个部分的划分"></a>5. Runtime data area五个部分的划分</h3><p>Runtime data area 即java virtural machine的内存，可以划分成五部分<br>    //per jvm ,shared by all threads</p>
<pre><code>- Method Area
- Heap

// per thread 
- java stack 
- pc Registers
- Native method stacks
</code></pre><h4 id="1-Method-Area-方法区，用于存储class的数据，static-variable-byte-code-class-level-constant-pool都放在这里-，Method-Area也称为Perm-gen-space-永生代-，默认大小是64MB-，可以通过-XX-MaxPermSize-调节-。这里有可能抛出out-of-memory-error。"><a href="#1-Method-Area-方法区，用于存储class的数据，static-variable-byte-code-class-level-constant-pool都放在这里-，Method-Area也称为Perm-gen-space-永生代-，默认大小是64MB-，可以通过-XX-MaxPermSize-调节-。这里有可能抛出out-of-memory-error。" class="headerlink" title="1. Method Area(方法区，用于存储class的数据，static variable,byte code,class level constant pool都放在这里)    ，Method Area也称为Perm gen space(永生代)，默认大小是64MB ，可以通过-XX:MaxPermSize 调节 。这里有可能抛出out of memory error。"></a>1. Method Area(方法区，用于存储class的数据，static variable,byte code,class level constant pool都放在这里)    ，Method Area也称为Perm gen space(永生代)，默认大小是64MB ，可以通过-XX:MaxPermSize 调节 。这里有可能抛出out of memory error。</h4><h3 id="java8将method-Area移除，改为-metaspace-就是将method-area移到了Native-Memory，这样就不会有限制了，也可以人为设置上限"><a href="#java8将method-Area移除，改为-metaspace-就是将method-area移到了Native-Memory，这样就不会有限制了，也可以人为设置上限" class="headerlink" title="java8将method Area移除，改为 metaspace (就是将method area移到了Native Memory，这样就不会有限制了，也可以人为设置上限)"></a>java8将method Area移除，改为 metaspace (就是将method area移到了Native Memory，这样就不会有限制了，也可以人为设置上限)</h3><h4 id="2-Heap"><a href="#2-Heap" class="headerlink" title="2. Heap"></a>2. Heap</h4><p>日常开发中new出来的东西都放在这里</p>
<p>-Xms , minimun size<br>-Xmx , maximum size</p>
<h4 id="3-Java-Stack"><a href="#3-Java-Stack" class="headerlink" title="3. Java Stack"></a>3. Java Stack</h4><p>java stacks contains stack frames of the current execution per thread.<br>eg : method a -&gt; 调用 method b -&gt; 调用method c<br>当前线程的方法栈中就会push三个stack frame(每个Frame对应一个方法的执行环境)<br>stack Frame包含当前方法中的变量，以及返回值，etc<br>这里定义了stackoverFlowError</p>
<h4 id="4-pc-Registers"><a href="#4-pc-Registers" class="headerlink" title="4. pc Registers"></a>4. pc Registers</h4><p>这里面装的是程序计数器，后者是指向下一个将要被执行的指令的指针（每条线程都有）。</p>
<h4 id="5-Native-method-stacks"><a href="#5-Native-method-stacks" class="headerlink" title="5. Native method stacks"></a>5. Native method stacks</h4><p>Native method stacks 是由java stack中的方法调用native方法创建的，例如windows上的dll库</p>
<h3 id="6-Execution-Engine的任务"><a href="#6-Execution-Engine的任务" class="headerlink" title="6. Execution Engine的任务"></a>6. Execution Engine的任务</h3><p><img src="http://odzl05jxx.bkt.clouddn.com/starry_sky.jpg?imageView2/2/w/500" alt=""></p>
<pre><code>- Interpreter 将byte code 翻译成机器指令并执行(根据指令去调用Native方法，在windows上jre/bin/文件夹中一大堆的dll就是windows平台提供的Native库，在linux上是.so文件)

- JIT Compiler  just in time compiler（如果有某项byte code instruction被多次调用，这些byte code不会每次都被inteprete，JIT will hold on to that system level target machine code for future usage,which is fast）
- Hotspot profiler(it helps the JIT Compiler analysise the frequently used byte codess)
- GC (a lengthy talk)
</code></pre><p>调用Native Method Interface(JNI) -&gt; Native method libraries（.dll,.so etc）</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.youtube.com/watch?v=ZBJ0u9MaKtM">JVM ( java virtual machine) architecture - tutorial</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于jvm运行的大致架构，最近找到一个比较合适的视频，记录要点如下&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/high_way_scene.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="jvm" scheme="https://haldir65.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>VPS下载Youtube视频并同步到本地</title>
    <link href="https://haldir65.github.io/2017/05/07/2017-05-07-download-video-from-vps/"/>
    <id>https://haldir65.github.io/2017/05/07/2017-05-07-download-video-from-vps/</id>
    <published>2017-05-07T08:48:01.000Z</published>
    <updated>2017-06-18T05:10:56.769Z</updated>
    
    <content type="html"><![CDATA[<p>几天前花几块钱买了个新的vps，试了下，速度不错。后来看到网上有关于如何使用vps下载视频并拖到Windows的，试了一下，确实酸爽。<br><img src="http://odzl05jxx.bkt.clouddn.com/4667305cbdace582c667f218e38fe70a.jpg?imageView2/2/w/600" alt=""></p>
<a id="more"></a>
<h3 id="1-youtube下载视频到vps的硬盘上"><a href="#1-youtube下载视频到vps的硬盘上" class="headerlink" title="1. youtube下载视频到vps的硬盘上"></a>1. youtube下载视频到vps的硬盘上</h3><p>首先是安装一些必要的环境，我安装的系统是Ubuntu 14.0.4 ，这个版本默认的python是2.7。配置好pip,python等环境后，首先安装youtube-dl,基本上就是两行命令搞定的事情，参考<a href="http://rg3.github.io/youtube-dl/download.html">官网</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl</div><div class="line"></div><div class="line">sudo chmod a+rx /usr/local/bin/youtube-dl</div></pre></td></tr></table></figure></p>
<p>为了方便管理，首先在/根目录下面创建一个文件夹并切换到该目录下</p>
<blockquote>
<p>mkdir youtube   </p>
</blockquote>
<p>以一个普通的<a href="https://www.youtube.com/watch?v=7PtDrv5AUmA">视频链接</a>为例<br>直接使用 </p>
<blockquote>
<p>youtube-dl <a href="https://www.youtube.com/watch?v=7PtDrv5AUmA">https://www.youtube.com/watch?v=7PtDrv5AUmA</a></p>
</blockquote>
<p>就能自动选择合适的格式，下载到当前目录。比较好的一点是，由于vps在美国，下载速度非常快，维持在20MB/ms的样子。下载好的文件会放在当前目录下，后面使用pscp工具从vps拖下来就好了，不过我实践下来，这一步往往是最慢的。关键要看vps到你的ip的速度。有些时候还会突然断掉，所以很麻烦。这个看后面能不能搞定百度云盘中转。<br>还有一个要注意的，生成的文件名是随机的，比如</p>
<blockquote>
<p>-yj74P_BY1zI.mp4</p>
</blockquote>
<p>由于前面带了一个横杠，很多命令是不认这种名字的，需要手动重命名一下 </p>
<blockquote>
<p>mv -yj74P_BY1zI.mp4 porn.video<br>mv ./-yj74P_BY1zI.mp4 porn.video #. 表示当前目录</p>
</blockquote>
<p>有时候下载的文件带有空格，有时候带有中文，用单引号包起来就好了。</p>
<p>youtube-dl还有一些命令行参数可以设置</p>
<blockquote>
<p>youtube-dl –all-formats <a href="https://www.youtube.com/watch?v=7PtDrv5AUmA">https://www.youtube.com/watch?v=7PtDrv5AUmA</a></p>
</blockquote>
<p>这样会列出所有的可供下载的分辨率选项，每个选项前面带有一个序号，选择特定分辨率的选项下载只需要</p>
<blockquote>
<p>youtube-dl -f 13 <a href="https://www.youtube.com/watch?v=7PtDrv5AUmA">https://www.youtube.com/watch?v=7PtDrv5AUmA</a> </p>
</blockquote>
<h3 id="2-从vps的硬盘上把下载好的视频拖下来"><a href="#2-从vps的硬盘上把下载好的视频拖下来" class="headerlink" title="2.从vps的硬盘上把下载好的视频拖下来"></a>2.从vps的硬盘上把下载好的视频拖下来</h3><p>VPS下载视频的速度很快，但从vps到国内的速度就很慢了。<br>目前可能的方案有从百度网盘或dropBox中转，测试了一下百度网盘的方案bypy，vps上传到网盘速度太慢，shell出现假死，据说是百度方面限速的原因，所以这条路基本也是堵上了的。</p>
<h3 id="3-后话"><a href="#3-后话" class="headerlink" title="3.后话"></a>3.后话</h3><p><a href="https://github.com/soimort/you-get">you-get</a>也是基于python3的下载工具，使用简单。在windows上安装还有点麻烦，<br>在ubuntu上只需 pip3 install you-get 就安装好了<br>使用方式更简单 &gt; you-get “url”<br>you-get还提供了windows版本 下载youtube视频只需要</p>
<blockquote>
<p>you-get -x 127.0.0.1:1080 -o “D:\Porn” ‘<a href="https://www.youtube.com/watch?v=jNQXAC9IVRw">https://www.youtube.com/watch?v=jNQXAC9IVRw</a>‘</p>
</blockquote>
<p><a href="https://doub.io/dbrj-1/">参考</a><br><a href="http://www.typemylife.com/use-vps-download-videos-from-youtube-upload-to-baidu-cloud/">百度云盘同步的方法</a><br><a href="https://www.v2ex.com/t/189034">讨论</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几天前花几块钱买了个新的vps，试了下，速度不错。后来看到网上有关于如何使用vps下载视频并拖到Windows的，试了一下，确实酸爽。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/4667305cbdace582c667f218e38fe70a.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Python localHost部署命令</title>
    <link href="https://haldir65.github.io/2017/05/01/2017-05-01-python-server-test/"/>
    <id>https://haldir65.github.io/2017/05/01/2017-05-01-python-server-test/</id>
    <published>2017-05-01T00:57:27.000Z</published>
    <updated>2017-06-25T14:44:59.886Z</updated>
    
    <content type="html"><![CDATA[<p>一行命令即可</p>
<blockquote>
<p> python -m http.server 8000 –bind 127.0.0.1 </p>
</blockquote>
<p>打开浏览器，输入127.0.0.1 ， 即可浏览当前目录下的文件，以GET的方式进行，命令行窗口会出现浏览记录。<br><img src="http://odzl05jxx.bkt.clouddn.com/ChMkJ1fAMmKIIFpWAA_5Us41gQkAAUv1QE2Pp8AD_lq599.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<p>据说SimpleHttpServer也可以，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> SimpleHTTPRequestHandler</div><div class="line"><span class="keyword">from</span> http.server <span class="keyword">import</span> BaseHTTPRequestHandler, HTTPServer</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(HandlerClass=SimpleHTTPRequestHandler,</div><div class="line">         ServerClass=HTTPServer)</span>:</span></div><div class="line">    protocol = <span class="string">"HTTP/1.0"</span></div><div class="line">    host = <span class="string">''</span></div><div class="line">    port = <span class="number">8000</span></div><div class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</div><div class="line">        arg = sys.argv[<span class="number">1</span>]</div><div class="line">        <span class="keyword">if</span> <span class="string">':'</span> <span class="keyword">in</span> arg:</div><div class="line">            host, port = arg.split(<span class="string">':'</span>)</div><div class="line">            port = int(port)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                port = int(sys.argv[<span class="number">1</span>])</div><div class="line">            <span class="keyword">except</span>:</div><div class="line">                host = sys.argv[<span class="number">1</span>]</div><div class="line"></div><div class="line">    server_address = (host, port)</div><div class="line"></div><div class="line">    HandlerClass.protocol_version = protocol</div><div class="line">    httpd = ServerClass(server_address, HandlerClass)</div><div class="line"></div><div class="line">    sa = httpd.socket.getsockname()</div><div class="line">    print(<span class="string">"Serving HTTP on"</span>, sa[<span class="number">0</span>], <span class="string">"port"</span>, sa[<span class="number">1</span>], <span class="string">"..."</span>)</div><div class="line">    httpd.serve_forever()</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure></p>
<h3 id="2-sys-args-的使用"><a href="#2-sys-args-的使用" class="headerlink" title="2 .sys.args[]的使用"></a>2 .sys.args[]的使用</h3><p>cmd中</p>
<blockquote>
<p>python</p>
</blockquote>
<p>Python 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 17:54:52) [MSC v.1900 32 bit (Intel)] on win32<br>Type “help”, “copyright”, “credits” or “license” for more information.</p>
<blockquote>
<blockquote>
<p>&gt;</p>
</blockquote>
</blockquote>
<p>退出方式 ctrl+Z</p>
<p>切换到脚本所在目录 ,例如test.py</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python3</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import sys</div><div class="line"></div><div class="line"># sys.argv接收参数，第一个参数是文件名，第二个参数开始是用户输入的参数，以空格隔开</div><div class="line"># cmd到该文件位置</div><div class="line"></div><div class="line">def run1():</div><div class="line">    print('I\'m action1')</div><div class="line"></div><div class="line"></div><div class="line">def run2():</div><div class="line">    print('I\'m action2')</div><div class="line"></div><div class="line"></div><div class="line">if 2 &gt; len(sys.argv):</div><div class="line">    print('none')</div><div class="line">else:</div><div class="line">    action1 = sys.argv[0]</div><div class="line">    action2 = sys.argv[1]</div><div class="line">    &lt;!-- if 'run1' == action1:</div><div class="line">        run1()</div><div class="line">    if 'run2' == action2:</div><div class="line">        run2() --&gt;</div><div class="line"></div><div class="line">    print(action1)</div><div class="line">    print(action2)</div></pre></td></tr></table></figure>
<p>输入 python test.py run1<br>输出 test.py ‘run1’</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一行命令即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; python -m http.server 8000 –bind 127.0.0.1 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开浏览器，输入127.0.0.1 ， 即可浏览当前目录下的文件，以GET的方式进行，命令行窗口会出现浏览记录。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/ChMkJ1fAMmKIIFpWAA_5Us41gQkAAUv1QE2Pp8AD_lq599.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>java线程池的实现原理</title>
    <link href="https://haldir65.github.io/2017/04/30/2017-04-30-concurrency-and-beyond/"/>
    <id>https://haldir65.github.io/2017/04/30/2017-04-30-concurrency-and-beyond/</id>
    <published>2017-04-30T11:17:45.000Z</published>
    <updated>2017-06-18T09:04:26.928Z</updated>
    
    <content type="html"><![CDATA[<p>原本只打算写一点关于线程池的实现原理，后来发现坑越挖越大。不得不写到一半停下来，所以，这算是一篇不那么完善的关于原理的解析吧。<br><img src="http://odzl05jxx.bkt.clouddn.com/16d714eb6e8ecc23e4d6ba20d0be17a0.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<ol>
<li>线程池的常规使用方式<br>通常说的线程池对外表现为具有一系列操作功能的接口，Executor提供了execute一个runnable的功能，而其子类ExecutorService则对外提供了更多的实用功能，所以平时用的都是ExecutorService的实现类。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</div><div class="line">     * Executes the given command at some time in the future.  The command</div><div class="line">     * may execute in a new thread, in a pooled thread, or in the calling</div><div class="line">     * thread, at the discretion of the &#123;<span class="doctag">@code</span> Executor&#125; implementation.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> command the runnable task</div><div class="line">     * <span class="doctag">@throws</span> RejectedExecutionException if this task cannot be</div><div class="line">     * accepted for execution</div><div class="line">     * <span class="doctag">@throws</span> NullPointerException if command is null</div><div class="line">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span></span>&#123;</div><div class="line">true</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExecutorService</span> <span class="keyword">implements</span> <span class="title">ExecutorService</span> </span>&#123;</div><div class="line">true</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</div><div class="line">true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>更具体一点来说，java.util.concurrent.ThreadPoolExecutor这个类提供了上述接口的具体实现，同时对外提供了一些hook(beforeExecute、afterExecute等)，当然开发者也可以继承这个方法，实现更多自定义功能。<br>它的构造函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public ThreadPoolExecutor(int corePoolSize,</div><div class="line">                              int maximumPoolSize,</div><div class="line">                              long keepAliveTime,</div><div class="line">                              TimeUnit unit,</div><div class="line">                              BlockingQueue&lt;Runnable&gt; workQueue) &#123;</div><div class="line">        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">             Executors.defaultThreadFactory(), defaultHandler);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>但实际上，java不建议这样直接弄一个线程池出来，而是使用java.util.concurrent.Executors中的一些现成的工厂方法来创建一个线程池实例，具体的方法名很好理解，newFixedThreadPool，newSingleThreadExecutor，newCachedThreadPool等等。关于线程池构造函数各个参数的意义以及Executors提供的各种线程方法的适用场合，网上有很多详尽的文章。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Thread有这些状态</div><div class="line">    */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</div><div class="line">        NEW,</div><div class="line">        RUNNABLE,</div><div class="line">        BLOCKED,</div><div class="line">        WAITING,</div><div class="line">        TIMED_WAITING,</div><div class="line">        TERMINATED;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里针对execute方法具体的实现来展开，即，如何做到自动扩容，如何做到线程缓存，如何实现终止，以及资源同步问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (command == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">       <span class="comment">/*</div><div class="line">        * Proceed in 3 steps:</div><div class="line">        *</div><div class="line">        * 1. If fewer than corePoolSize threads are running, try to</div><div class="line">        * start a new thread with the given command as its first</div><div class="line">        * task.  The call to addWorker atomically checks runState and</div><div class="line">        * workerCount, and so prevents false alarms that would add</div><div class="line">        * threads when it shouldn't, by returning false.</div><div class="line">        *</div><div class="line">        * 2. If a task can be successfully queued, then we still need</div><div class="line">        * to double-check whether we should have added a thread</div><div class="line">        * (because existing ones died since last checking，上一次检查之后可能有线程挂掉了) or that</div><div class="line">        * the pool shut down since entry into this method. So we</div><div class="line">        * recheck state and if necessary roll back the enqueuing if</div><div class="line">        * stopped, or start a new thread if there are none.</div><div class="line">        *</div><div class="line">        * 3. If we cannot queue task, then we try to add a new</div><div class="line">        * thread.  If it fails, we know we are shut down or saturated</div><div class="line">        * and so reject the task.</div><div class="line">        */</span></div><div class="line">       <span class="keyword">int</span> c = ctl.get();</div><div class="line">       <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; <span class="comment">//</span></div><div class="line">      <span class="comment">// Core pool size is the minimum number of workers to keep alive (and not allow to time out etc)</span></div><div class="line">       unless allowCoreThreadTimeOut is set, in which <span class="keyword">case</span> the minimum is zero.</div><div class="line">           <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))<span class="comment">//true表示创建新的Worker时的上限是coolPoolSize,false表示上限是maximunPoolSize</span></div><div class="line">           一般前者都小于等于后者，成功创建新的Worker并执行任务的话,直接在这里就<span class="keyword">return</span>掉了</div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           c = ctl.get(); <span class="comment">//当前pool的state,ctl是一个AtomicInteger</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;<span class="comment">//addworker就是创建一个新的Worker并立即执行command，没能成功就得暂时放进queue了。offer就是往这里面加一个runnable</span></div><div class="line">           <span class="keyword">int</span> recheck = ctl.get();<span class="comment">//recheck的原因源码中也说明了</span></div><div class="line">          <span class="comment">//走到这一步，说明已经成功加入到队列中了。</span></div><div class="line">           <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</div><div class="line">               reject(command);<span class="comment">//pool随时可能会被关掉</span></div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</div><div class="line">               addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</div><div class="line">           reject(command);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>来看addWorker的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</div><div class="line">        retry:</div><div class="line">        、、、省略代码</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            w = <span class="keyword">new</span> Worker(firstTask);</div><div class="line">            <span class="comment">//每一个不为null的command都会创建一个新的worker</span></div><div class="line">            <span class="keyword">final</span> Thread t = w.thread;</div><div class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">                mainLock.lock();<span class="comment">//加锁</span></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                        workers.add(w); <span class="comment">//workers就是一个普通的HashSet,同步的问题通过ReentrantLock解决</span></div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    mainLock.unlock();</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (workerAdded) &#123;</div><div class="line">                    t.start(); <span class="comment">//这里就是真正执行command的方法了</span></div><div class="line">                    workerStarted = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; </div><div class="line">        <span class="keyword">return</span> workerStarted; <span class="comment">//这里可以看出来,addWorker返回值表示这个command有没有被执行</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123; <span class="comment">//每一条线程运行起来的时候都会走这个方法</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</div><div class="line">                w.lock();<span class="comment">//task可能是第一个runnable，也可能是从queue中取出来的</span></div><div class="line">                <span class="comment">//getTask方法就是不断的从队列中获取任务。注意之前addTask的方法入参说明,command是该worker执行的第一个任务。也就是说，一个worker之后还有可能从queue中获取新的任务。线程能够一直有任务执行，就不会进入死亡状态(Thread有几个状态)</span></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    beforeExecute(wt, task);<span class="comment">//钩子</span></div><div class="line">                    Throwable thrown = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        task.run(); </div><div class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</div><div class="line">                        thrown = x; <span class="keyword">throw</span> x;</div><div class="line">                    &#125; <span class="keyword">catch</span> (Error x) &#123;</div><div class="line">                        thrown = x; <span class="keyword">throw</span> x;</div><div class="line">                    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</div><div class="line">                        thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                        afterExecute(task, thrown);<span class="comment">//钩子</span></div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    task = <span class="keyword">null</span>;</div><div class="line">                    w.completedTasks++;</div><div class="line">                    w.unlock();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            completedAbruptly = <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            processWorkerExit(w, completedAbruptly);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>addWorker会创建一个新的Worker(线程)，并将command作为这个线程要执行的第一个任务，而Worker的run方法是线程跑起来执行的方法。至于如何实现从queue中获取任务交给线程去完成，看getTask方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (;;) &#123; <span class="comment">//轮询</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Runnable r = timed ?</div><div class="line">                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) : <span class="comment">//从queue中提取任务</span></div><div class="line">                    workQueue.take();</div><div class="line">                <span class="keyword">if</span> (r != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> r;</div><div class="line">                </div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</div><div class="line">                timedOut = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>整体来说，executor.execute方法就是通过new出Woker，而Worker则会在run方法中不停的从queue中获取新的任务，从而确保线程不会挂掉。也就是所谓的线程池缓存了线程，避免了频繁创建线程的开销。</p>
<ol>
<li>Worker这个类继承自AbstractQueuedSynchronizer<br>AbstractQueuedSynchronizer即大名鼎鼎的AQS。</li>
</ol>
<ol>
<li><p>Reetranlock的使用<br>这其中有<br>注意上面使用了重入锁 ReentrantLock，后来发现ThreadPoolExecutor中多处使用了这个类。</p>
</li>
<li><p>Future,Callable,FutureTask等等</p>
</li>
</ol>
<p>最后，今天下午看到很多jdk里源码的注释，作者都是 Doug Lea ，实在佩服前人的功力。之前也看过一些自定义线程池的实现，现在看起来确实差很多，不要重复造轮子不意味着不需要去了解轮子是怎么造出来的。</p>
<p>Reference </p>
<ol>
<li><a href="https://github.com/pzxwhc/MineKnowContainer/issues/9">Java 多线程：线程池实现原理</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原本只打算写一点关于线程池的实现原理，后来发现坑越挖越大。不得不写到一半停下来，所以，这算是一篇不那么完善的关于原理的解析吧。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/16d714eb6e8ecc23e4d6ba20d0be17a0.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="concurrency" scheme="https://haldir65.github.io/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Rxjava2 的一些点</title>
    <link href="https://haldir65.github.io/2017/04/23/2017-04-23-rxjava2-for-android/"/>
    <id>https://haldir65.github.io/2017/04/23/2017-04-23-rxjava2-for-android/</id>
    <published>2017-04-23T05:56:07.000Z</published>
    <updated>2017-06-22T14:27:51.568Z</updated>
    
    <content type="html"><![CDATA[<p>本文多数内容来自Jake Wharton的演讲，配合一些个人的感受，作为今后使用Rxjava2的一些参考。<br><img src="http://odzl05jxx.bkt.clouddn.com/f21a6a245edfe0b19804be5b3df24a3d.jpg?imageView2/2/w/600" alt=""><br><a id="more"></a></p>
<h3 id="1-Why-Reactive"><a href="#1-Why-Reactive" class="headerlink" title="1. Why Reactive?"></a>1. Why Reactive?</h3><p>最早使用Rxjava的初衷在于方便地实现线程切换，使用链式语法轻松地将异步任务分发到子线程并省去了主动实现回调的麻烦。<br>我们生活在一个事件异步分发的环境中，网络，文件、甚至用户输入本身也是异步事件，除此之外，安卓系统本身的许多操作也是异步的，例如startActivity，Fragment的transaction，这就要求开发者不得不考虑各种事件状态，并在各种事件之间进行协调。Rxjava将各种事件的处理、完成以及异常在事件定义之初定义好处理方式。事件的开始，进行，完成以及异常，都被抽象到Observable的载体中。值得注意的是，这种链式调用很像Builder Pattern，但本质上每一步都生成了一个新的对象。这个在Rxjava的Wiki上有所说明，即每一步都生成一个新的immutable objec（GC表示压力大）。</p>
<h3 id="2-数据源"><a href="#2-数据源" class="headerlink" title="2. 数据源"></a>2. 数据源</h3><p>Stream基本包括这三部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">source of data</div><div class="line">listener of data</div><div class="line">methods for modifying data</div></pre></td></tr></table></figure></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/stream_compose.jpg?imageView2/2/w/600" alt=""></p>
<h4 id="2-1-数据源的种类"><a href="#2-1-数据源的种类" class="headerlink" title="2.1 数据源的种类"></a>2.1 数据源的种类</h4><p>Observable<T> 和Flowable<T>，区别在于后者支持BackPressure，后者不支持BackPressure.<br>接收Observable和Flowable的类型分别为Observer和Subscriber</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Disposable</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span></div><div class="line">  <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> <span class="comment">//用于取消订阅，释放资源</span></div><div class="line">  <span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> r)</span> <span class="comment">//请求更多的数据，即BackPressure开始体现的地方</span></div><div class="line">&#125;</span></div></pre></td></tr></table></figure>
<p>两者的区别在于最后一个方法，以Disposable为例，当你开始subscribe一个数据源的时，就类似于创建了一个Resurce，而Resource是往往需要在用完之后及时释放。无论是Observable还是Flowable,这个onSubscribe方法会在订阅后立即被调用，这个方法里的Disposable可以保留下来，在必要时候用于释放资源。如Activity的onDestroy中cancel network request.</p>
<h4 id="2-2-数据源的对应类"><a href="#2-2-数据源的对应类" class="headerlink" title="2.2 数据源的对应类"></a>2.2 数据源的对应类</h4><ol>
<li><p>Single(订阅一个Single，要么获得仅一个返回值，要么出现异常返回Error)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">SingleSource</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Completeable(订阅一个completeable，要么成功，不返回值，要么出现异常返回error，就像一个reactive runnale，一个可以执行的command，并不返回结果)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Completable</span> <span class="keyword">implements</span> <span class="title">CompletableSource</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>例如，异步写一个文件，要么成功，要么出现error，并不需要返回什么。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeFile</span><span class="params">(Stirng data)</span></span>&#123;&#125; </div><div class="line"><span class="comment">// 就可以model成</span></div><div class="line"><span class="function">Completeable <span class="title">writeFile</span><span class="params">(Stirng data)</span></span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>Maybe(有可能返回值，有可能不返回，也有可能异常，即optional)<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Maybe</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">MaybeSource</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>以上三种数据源都有static方法生成：<br>例如<br><img src="http://odzl05jxx.bkt.clouddn.com/creating_source_from_iterable.jpg?imageView2/2/w/600" alt="from iterable"></p>
<p><img src="http://odzl05jxx.bkt.clouddn.com/creating_source_from_just.jpg?imageView2/2/w/600" alt="fromjust"></p>
<p>比较推荐的方法有两种</p>
<h4 id="1-fromCallable"><a href="#1-fromCallable" class="headerlink" title="1. fromCallable"></a>1. fromCallable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Observable.fromCallable(<span class="keyword">new</span> Callable&lt;String&gt;()&#123;</div><div class="line"></div><div class="line">  <span class="meta">@override</span> </div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> throw Exception</span>&#123;</div><div class="line">      <span class="keyword">return</span> getName() <span class="comment">//  之前是synchronious的get，现在这一步可以asynchnous执行,比如放一个OkHttpClient.newCall(request).execute(); //因为是异步执行的，也不存在性能问题</span></div><div class="line">&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>上面这段中的call方法会在被订阅后执行，成功的话会走到observer的onNext，失败的话会走到onError。<br>fromCallable可用于各种数据源，包括Flowable<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Flowable.fromCallable(() -&gt; <span class="string">"Hello Flowable"</span>);</div><div class="line">Observable.fromCallable(() -&gt; <span class="string">"Hello Observable"</span>);</div><div class="line">Maybe.fromCallable(() -&gt; <span class="string">"Hello Maybe"</span>);</div><div class="line">Single.fromCallable(() -&gt; <span class="string">"Hello Single"</span>);</div><div class="line">Completeable.fromCallable(() -&gt; <span class="string">"Hello Completeable"</span>);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>fromCallable are for modeling synchronous sourse of a single source of data. </p>
</blockquote>
<p>很多需要返回值的方法都可以抽象成这种方法。<br>Maybe和Completeable还有两个方法,用于表示不返回数据的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Maybe.fromAction(() -&gt; <span class="string">"Hey jude"</span>)</div><div class="line">Maybe.fromRunnable(() -&gt; <span class="string">"ignore"</span>)</div><div class="line"></div><div class="line">Completeable.fromAction(() -&gt; <span class="string">"Hey jude"</span>)</div><div class="line">Completeable.fromRunnable(() -&gt; <span class="string">"ignore"</span>)</div></pre></td></tr></table></figure></p>
<h4 id="2-create-Rxjava-1中不推荐使用该方法，Rxjava2中建议使用"><a href="#2-create-Rxjava-1中不推荐使用该方法，Rxjava2中建议使用" class="headerlink" title="2. create(Rxjava 1中不推荐使用该方法，Rxjava2中建议使用)"></a>2. create(Rxjava 1中不推荐使用该方法，Rxjava2中建议使用)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;())&#123;</div><div class="line">      <span class="meta">@override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span> <span class="params">(ObservableEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception</span>&#123; <span class="comment">//subscribe get called whenever there's a new subscriber, emitter is the person that's listening.</span></div><div class="line">      <span class="comment">//</span></div><div class="line">         e.onNext(<span class="string">"Hello"</span>);</div><div class="line">         e.onComplete();</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>//一个Observable可以有多个subscriber。一个被观察者可以有多个观察者，被观察者的onNext调用，观察者的onNext也会被调用</p>
<p>lambda更简洁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">Observable.create(e -&gt;&#123;</div><div class="line">    e.onNext(<span class="string">"Hello"</span>);</div><div class="line">    e.onNext(<span class="string">"Hello"</span>);</div><div class="line">    e.onComplete();</div><div class="line">&#125;)</div><div class="line"></div><div class="line">Okhttp的异步网络请求也可以model成一种被观察的流</div><div class="line">Observable.create(e -&gt;&#123;</div><div class="line">   Call call = client.newCall(request);</div><div class="line">   call.enqueue(<span class="keyword">new</span> Callback())&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>   <span class="title">onResponse</span><span class="params">(Response r)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">      e.onNext(r.body().toString());</div><div class="line">      e.onComplete();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(IOException e)</span></span>&#123;</div><div class="line">      e.onError(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//重点了来了， </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ObservableEmitter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Emitter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</div><div class="line">     * Sets a Cancellable on this emitter; any previous Disposable</div><div class="line">     * or Cancellation will be unsubscribed/cancelled.</div><div class="line">     * <span class="doctag">@param</span> c the cancellable resource, null is allowed</div><div class="line">     */</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCancellable</span><span class="params">(Cancellable c)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// emitter可以设置cancel的动作</span></div><div class="line"></div><div class="line">Observable.create(e -&gt;&#123;</div><div class="line">    e.setCacelation(() -view.setOnClickListener(<span class="keyword">null</span>));</div><div class="line">    view.setOnClickListener(v -&gt; e.onNext());</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 点击按钮发送事件，取消订阅时避免leak View</span></div><div class="line"></div><div class="line">和fromCallable一样，create方法也适用于所有五种data source</div></pre></td></tr></table></figure></p>
<h3 id="3-如何订阅（接收）这些数据"><a href="#3-如何订阅（接收）这些数据" class="headerlink" title="3. 如何订阅（接收）这些数据"></a>3. 如何订阅（接收）这些数据</h3><h4 id="3-1-observer和Subscriber"><a href="#3-1-observer和Subscriber" class="headerlink" title="3.1 observer和Subscriber"></a>3.1 observer<T>和Subscriber<T></h4><p>接收Observable和Flowable的类型分别为Observer和Subscriber</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Disposable</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>; <span class="comment">//用于取消订阅，释放资源</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> r)</span> </span>;<span class="comment">//请求更多的数据，即BackPressure开始体现的地方</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="所以整体来看，数据的流向就这么两种，左边发送数据-可能只有一个，可能间歇性的，可能一直不停-，事件通过数据流传输到右边，右边根据协议作出相应-Reactive"><a href="#所以整体来看，数据的流向就这么两种，左边发送数据-可能只有一个，可能间歇性的，可能一直不停-，事件通过数据流传输到右边，右边根据协议作出相应-Reactive" class="headerlink" title="所以整体来看，数据的流向就这么两种，左边发送数据(可能只有一个，可能间歇性的，可能一直不停)，事件通过数据流传输到右边，右边根据协议作出相应(Reactive)"></a>所以整体来看，数据的流向就这么两种，左边发送数据(可能只有一个，可能间歇性的，可能一直不停)，事件通过数据流传输到右边，右边根据协议作出相应(Reactive)</h2><p>Observable -&gt; subscribe -&gt; Observer </p>
<p>Flowable -&gt; subscribe -&gt; Subscription</p>
<h4 id="3-2-onSubscribe怎么用"><a href="#3-2-onSubscribe怎么用" class="headerlink" title="3.2 onSubscribe怎么用"></a>3.2 onSubscribe怎么用</h4><p>通常不直接用这两种base class，因为第四个方法不知道怎么用嘛。<br><img src="http://odzl05jxx.bkt.clouddn.com/4dab298b9f7ce29c43f9d8eaf686e02f.jpg?imageView2/2/w/600" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"Hello"</span>).subscribe(<span class="keyword">new</span> DisposableObserver&lt;String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line"></div><div class="line">  可以持有DisposableObserver，在停止订阅的时候调用observer.dispose方法，切断流。</div><div class="line">  或者这样</div><div class="line">  Disposable disposable =   Observable.just(<span class="string">"Hello"</span>).subscribeWith(<span class="keyword">new</span> DisposableObserver&lt;String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">   subscribeWith返回一个Disposable，subscribe是一个没有返回值的函数    </div><div class="line"></div><div class="line">  偷懒一点的话，通常把这些返回的订阅加入到一个CompositeDisposable,在onDestroy的时候统一取消订阅即可  </div><div class="line"></div><div class="line">  Observable、Single、Completeable、Maybe以及Flowable都支持subscribewith。</div></pre></td></tr></table></figure></p>
<h3 id="4-数据源和接受者建立联系"><a href="#4-数据源和接受者建立联系" class="headerlink" title="4. 数据源和接受者建立联系"></a>4. 数据源和接受者建立联系</h3><blockquote>
<p>Observable.subscribe<br>或者<br>Flowable.subscribe<br>或者使用之前提到的sbscribeWith<br>我尝试写了一个比较复杂的调用顺序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">Observable.fromCallable(<span class="keyword">new</span> Callable&lt;List&lt;String&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.p(<span class="string">"call do on thread any"</span>);</div><div class="line">                blockThread(<span class="number">2000</span>); <span class="comment">// block 2s</span></div><div class="line">                <span class="keyword">return</span> Arrays.asList(array);</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribeOn(Schedulers.computation())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .doOnSubscribe(<span class="keyword">new</span> Consumer&lt;Disposable&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Disposable disposable)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        LogUtil.p(<span class="string">""</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;).doOnComplete(<span class="keyword">new</span> Action() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.p(<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;).doOnNext(<span class="keyword">new</span> Consumer&lt;List&lt;String&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(List&lt;String&gt; strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.p(<span class="string">""</span> + strings.get(<span class="number">0</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;).doAfterNext(<span class="keyword">new</span> Consumer&lt;List&lt;String&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(List&lt;String&gt; strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                LogUtil.p(<span class="string">""</span>+strings.get(<span class="number">0</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</div><div class="line">                LogUtil.p(<span class="string">"onSubscribe "</span> + d.isDisposed());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;String&gt; value)</span> </span>&#123;</div><div class="line">                LogUtil.p(<span class="string">" get Response "</span> + value.size());</div><div class="line">                value.set(<span class="number">0</span>, <span class="string">"change first element!"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">                LogUtil.p(<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">执行顺序：（括号内数字表示线程id） </div><div class="line">doOnsubscribe(<span class="number">1</span>) -&gt; onSubscribe(<span class="number">1</span>) -&gt; call(<span class="number">276</span>) -&gt;doOnNext(<span class="number">1</span>)-&gt;onNext(<span class="number">1</span>) -&gt; doAfterNext(<span class="number">1</span>) -&gt;doOnComplete(<span class="number">1</span>)-&gt;onComplete(<span class="number">1</span>)</div><div class="line">所以基本上可以认为doOnXXX= doBeforeXXX,线程都是一样的。估计是为了打日志用的，或者说用于切片。</div><div class="line">像极了OkHttp的interecpter或是gradle的task。</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="5-Operator-and-Threading"><a href="#5-Operator-and-Threading" class="headerlink" title="5. Operator and Threading"></a>5. Operator and Threading</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; greeting  = Observable.just(<span class="string">"Hello"</span>);</div><div class="line">Observable&lt;String&gt; yelling = greeting.map(s -&gt;s.toUppercase())</div><div class="line"></div><div class="line">Observable.subscribeOn(Schedulers.io()) <span class="comment">//</span></div></pre></td></tr></table></figure>
<p>subscribeOn决定了task在哪条线程上运行，操作符的顺序很重要<br><img src="http://odzl05jxx.bkt.clouddn.com/reading%20network%20response%20on%20main%20thread.jpg?imageView2/2/w/600" alt="Wrong"><br><img src="http://odzl05jxx.bkt.clouddn.com/observing%20on%20ui%20thred.jpg?imageView2/2/w/600" alt="Ok"></p>
<p>流之间的转换</p>
<blockquote>
<p>Observable -&gt; first() -&gt; single<br>Observable -&gt; firsetElement -&gt; Maybe<br>Observable -&gt; ignoreElements() -&gt;Completable</p>
<p>Flowable -&gt; first() -&gt; single<br>Flowable -&gt; firsetElement -&gt; Maybe<br>Flowable -&gt; ignoreElements() -&gt;Completable</p>
</blockquote>
<ul>
<li><a href="https://github.com/ReactiveX/RxJava/wiki/Combining-Observables">Combining Observables</a> 多个数据来源的加工</li>
</ul>
<h2 id="链式调用每一步都生成了新的object，Rxjava2和Rxjava1相比，对GC更加友好。"><a href="#链式调用每一步都生成了新的object，Rxjava2和Rxjava1相比，对GC更加友好。" class="headerlink" title="链式调用每一步都生成了新的object，Rxjava2和Rxjava1相比，对GC更加友好。"></a>链式调用每一步都生成了新的object，Rxjava2和Rxjava1相比，对GC更加友好。</h2><h2 id="quote"><a href="#quote" class="headerlink" title="quote:"></a>quote:</h2><h3 id="RxJava-2-is-not-something-new-Reactive-programming-is-not-new-by-any-stretch-but-Android-itself-is-a-highly-reactive-world-that-we’ve-been-taught-to-model-in-a-very-imperative-stateful-fashion"><a href="#RxJava-2-is-not-something-new-Reactive-programming-is-not-new-by-any-stretch-but-Android-itself-is-a-highly-reactive-world-that-we’ve-been-taught-to-model-in-a-very-imperative-stateful-fashion" class="headerlink" title="RxJava 2 is not something new. Reactive programming is not new by any stretch, but Android itself is a highly reactive world that we’ve been taught to model in a very imperative, stateful fashion."></a>RxJava 2 is not something new. Reactive programming is not new by any stretch, but Android itself is a highly reactive world that we’ve been taught to model in a very imperative, stateful fashion.</h3><p>Reactive programming allow us to model it in the proper way: asynchronously. Embrace the asynchronicity of the sources, and instead of trying to manage all the state ourselves, compose them together such that our apps become truly reactive.</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>– <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=6&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjlvrfg8bnTAhUI0mMKHcXZC1MQtwIITDAF&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DhtIXKI5gOQU&amp;usg=AFQjCNEYczqXGkjYXOUbovtP1CxDPARcXA&amp;sig2=gmLYEd2cVOhI7C2WjOHr9g">GOTO 2016 • Exploring RxJava 2 for Android • Jake Wharton - YouTube</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文多数内容来自Jake Wharton的演讲，配合一些个人的感受，作为今后使用Rxjava2的一些参考。&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/f21a6a245edfe0b19804be5b3df24a3d.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
      <category term="rxjava2" scheme="https://haldir65.github.io/tags/rxjava2/"/>
    
  </entry>
  
  <entry>
    <title>View的属性大全[转载]</title>
    <link href="https://haldir65.github.io/2017/04/03/2017-04-03-properties-of-view/"/>
    <id>https://haldir65.github.io/2017/04/03/2017-04-03-properties-of-view/</id>
    <published>2017-04-03T03:38:10.000Z</published>
    <updated>2017-06-15T15:20:22.769Z</updated>
    
    <content type="html"><![CDATA[<p>转自<a href="http://www.codexiu.cn/android/blog/40141/">Android属性大全</a></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div><div class="line">644</div><div class="line">645</div><div class="line">646</div><div class="line">647</div><div class="line">648</div><div class="line">649</div><div class="line">650</div><div class="line">651</div><div class="line">652</div><div class="line">653</div><div class="line">654</div><div class="line">655</div><div class="line">656</div><div class="line">657</div><div class="line">658</div><div class="line">659</div><div class="line">660</div><div class="line">661</div><div class="line">662</div><div class="line">663</div><div class="line">664</div><div class="line">665</div><div class="line">666</div><div class="line">667</div><div class="line">668</div><div class="line">669</div><div class="line">670</div><div class="line">671</div><div class="line">672</div><div class="line">673</div><div class="line">674</div><div class="line">675</div><div class="line">676</div><div class="line">677</div><div class="line">678</div><div class="line">679</div><div class="line">680</div><div class="line">681</div><div class="line">682</div><div class="line">683</div><div class="line">684</div><div class="line">685</div><div class="line">686</div><div class="line">687</div><div class="line">688</div><div class="line">689</div><div class="line">690</div><div class="line">691</div><div class="line">692</div><div class="line">693</div><div class="line">694</div><div class="line">695</div><div class="line">696</div><div class="line">697</div><div class="line">698</div><div class="line">699</div><div class="line">700</div><div class="line">701</div><div class="line">702</div><div class="line">703</div><div class="line">704</div><div class="line">705</div><div class="line">706</div><div class="line">707</div><div class="line">708</div><div class="line">709</div><div class="line">710</div><div class="line">711</div><div class="line">712</div><div class="line">713</div><div class="line">714</div><div class="line">715</div><div class="line">716</div><div class="line">717</div><div class="line">718</div><div class="line">719</div><div class="line">720</div><div class="line">721</div><div class="line">722</div><div class="line">723</div><div class="line">724</div><div class="line">725</div><div class="line">726</div><div class="line">727</div><div class="line">728</div><div class="line">729</div><div class="line">730</div><div class="line">731</div><div class="line">732</div><div class="line">733</div><div class="line">734</div><div class="line">735</div><div class="line">736</div><div class="line">737</div><div class="line">738</div><div class="line">739</div><div class="line">740</div><div class="line">741</div><div class="line">742</div><div class="line">743</div><div class="line">744</div><div class="line">745</div><div class="line">746</div><div class="line">747</div><div class="line">748</div><div class="line">749</div><div class="line">750</div><div class="line">751</div><div class="line">752</div><div class="line">753</div><div class="line">754</div></pre></td><td class="code"><pre><div class="line">android:<span class="function">alpha </div><div class="line"><span class="title">setAlpha</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 视图透明度，值在0-1之间。0为完全透明，1为完全不透明。</div><div class="line">android:background </div><div class="line"><span class="title">setBackgroundResource</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 视图背景</div><div class="line">android:clickable </div><div class="line"><span class="title">setClickable</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 视图是否可点击</div><div class="line">android:contentDescription </div><div class="line"><span class="title">setContentDescription</span><span class="params">(CharSequence)</span> 属性说明: 设置View的备注说明，作为一种辅助功能提供,为一些没有文字描述的View提供说明</div><div class="line">android:drawingCacheQuality </div><div class="line"><span class="title">setDrawingCacheQuality</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: "设置绘图时半透明质量。有可以取以下3个值 auto——默认，由框架决定 high——高质量，使用较高的颜色深度，消耗更多的内存 low——低质量，使用较低的颜色深度，但是用更少的内存"</div><div class="line">android:duplicateParentState </div><div class="line">属性说明: 如果设置此属性，将直接从父容器中获取绘图状态（光标，按下等）</div><div class="line">android:fadeScrollbars </div><div class="line"><span class="title">setScrollbarFadingEnabled</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 定义在ScrollBar没有使用时，是否褪色。</div><div class="line">android:fadingEdgeLength </div><div class="line"><span class="title">getVerticalFadingEdgeLength</span><span class="params">()</span> 属性说明: 设置边框渐变的长度。</div><div class="line">android:filterTouchesWhenObscured </div><div class="line"><span class="title">setFilterTouchesWhenObscured</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: view所在窗口被其它可见窗口遮住时，是否过滤触摸事件。</div><div class="line">android:fitsSystemWindows </div><div class="line"><span class="title">setFitsSystemWindows</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 设置布局调整时是否考虑系统窗口（如状态栏）</div><div class="line">android:focusable </div><div class="line"><span class="title">setFocusable</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 设置是否获得焦点。若有<span class="title">requestFocus</span><span class="params">()</span>被调用时，后者优先处理。注意在表单中想设置某一个如EditText获取焦点，光设置这个是不行的，需要将这个EditText前面的focusable都设置为<span class="keyword">false</span>才行。在Touch模式下获取焦点需要设置focusableInTouchMode为<span class="keyword">true</span>。</div><div class="line">android:focusableInTouchMode </div><div class="line"><span class="title">setFocusableInTouchMode</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 设置在Touch模式下View是否能取得焦点。</div><div class="line">android:hapticFeedbackEnabled </div><div class="line"><span class="title">setHapticFeedbackEnabled</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 是否启用触摸反馈，启用后就是在点击等操作时会有震动等反馈效果</div><div class="line">android:id </div><div class="line"><span class="title">setId</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 给当前View设置一个在当前layout.xml中的唯一编号，可以通过调用View.<span class="title">findViewById</span><span class="params">()</span> 或Activity.<span class="title">findViewById</span><span class="params">()</span>根据这个编号查找到对应的View。不同的layout.xml之间定义相同的id不会冲突。</div><div class="line">android:importantForAccessibility </div><div class="line"><span class="title">setImportantForAccessibility</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置可达性的重要性</div><div class="line">android:isScrollContainer </div><div class="line"><span class="title">setScrollContainer</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 设置当前View为滚动容器。这里没有测试出效果来，ListView/ GridView/ ScrollView根本就不用设置这个属性，而EdidText设置android:scrollbars也能出滚动条</div><div class="line">android:keepScreenOn </div><div class="line"><span class="title">setKeepScreenOn</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 视图在可见的情况下是否保持唤醒状态。</div><div class="line">android:layerType </div><div class="line"><span class="title">setLayerType</span><span class="params">(<span class="keyword">int</span>,Paint)</span> 属性说明: "设置指定层的类型，可以取以下3个值： none——不指定 software——软件层。 hardware——硬件层。使用硬件加速。"</div><div class="line">android:layoutDirection </div><div class="line"><span class="title">setLayoutDirection</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 定义布局图纸的方向</div><div class="line">android:longClickable </div><div class="line"><span class="title">setLongClickable</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 是否响应长点击事件</div><div class="line">android:minHeight </div><div class="line"><span class="title">setMinimumHeight</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置视图最小高度</div><div class="line">android:minWidth </div><div class="line"><span class="title">setMinimumWidth</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置视图最小宽度</div><div class="line">android:nextFocusDown </div><div class="line"><span class="title">setNextFocusDownId</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 向下移动焦点时，下一个获取焦点的view的id</div><div class="line">android:nextFocusForward </div><div class="line"><span class="title">setNextFocusForwardId</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 下一个获取焦点的view的id</div><div class="line">android:nextFocusLeft </div><div class="line"><span class="title">setNextFocusLeftId</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 向左移动焦点时，下一个获取焦点的view的id</div><div class="line">android:nextFocusRight </div><div class="line"><span class="title">setNextFocusRightId</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 向右移动焦点时，下一个获取焦点的view的id</div><div class="line">android:nextFocusUp </div><div class="line"><span class="title">setNextFocusUpId</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 向上移动焦点时，下一个获取焦点的view的id</div><div class="line">android:onClick </div><div class="line"><span class="title">setOnClick</span><span class="params">()</span>或 <span class="title">onClick</span><span class="params">(View view)</span>属性说明: 点击时，要调用的方法的名称。</div><div class="line">android:padding </div><div class="line"><span class="title">setPaddingRelative</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 设置上下左右的边距</div><div class="line">android:paddingBottom </div><div class="line"><span class="title">setPaddingRelative</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 下边距</div><div class="line">android:paddingEnd </div><div class="line"><span class="title">setPaddingRelative</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 与android:paddingRight相同</div><div class="line">android:paddingLeft </div><div class="line"><span class="title">setPadding</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 左边距</div><div class="line">android:paddingRight </div><div class="line"><span class="title">setPadding</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 右边距</div><div class="line">android:paddingStart </div><div class="line"><span class="title">setPaddingRelative</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: android:paddingLeft相同</div><div class="line">android:paddingTop </div><div class="line"><span class="title">setPaddingRelative</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 上边距</div><div class="line">android:requiresFadingEdge </div><div class="line"><span class="title">setVerticalFadingEdgeEnabled</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 定义滚动时边缘是否褪色</div><div class="line">android:rotation </div><div class="line"><span class="title">setRotation</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 旋转度数</div><div class="line">android:rotationX </div><div class="line"><span class="title">setRotationX</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 水平旋转度数</div><div class="line">android:rotationY </div><div class="line"><span class="title">setRotationY</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 竖直旋转度数</div><div class="line">android:saveEnabled </div><div class="line"><span class="title">setSaveEnabled</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 在配置改变等情况出现时是否保存view的状态数据。如果你的view有id，那默认系统就会帮你保存。</div><div class="line">android:scaleX </div><div class="line"><span class="title">setScaleX</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 水平方向缩放比例</div><div class="line">android:scaleY </div><div class="line"><span class="title">setScaleY</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 竖直方向缩放比例</div><div class="line">android:scrollX </div><div class="line">属性说明: x方向的滚动偏移。即在水平方向滚动了多少距离</div><div class="line">android:scrollY </div><div class="line">属性说明: y方向的滚动偏移。即在竖直方向滚动了多少距离</div><div class="line">android:scrollbarAlwaysDrawHorizontalTrack </div><div class="line">属性说明: 是否总是绘制水平滚动条的滚动轨道</div><div class="line">android:scrollbarAlwaysDrawVerticalTrack </div><div class="line">属性说明: 是否总是绘制竖直滚动条的滚动轨道</div><div class="line">android:scrollbarDefaultDelayBeforeFade </div><div class="line"><span class="title">setScrollBarDefaultDelayBeforeFade</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 滚动条在n毫秒后开始淡出。</div><div class="line">android:scrollbarFadeDuration </div><div class="line"><span class="title">setScrollBarFadeDuration</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 滚动条用多长时间淡出完毕。</div><div class="line">android:scrollbarSize </div><div class="line"><span class="title">setScrollBarSize</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置滚动条的尺寸。垂直滚动条的宽度、水平滚动条的高度</div><div class="line">android:scrollbarStyle </div><div class="line"><span class="title">setScrollBarStyle</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: "滚动条的风格。共4组值： insideOverlay——内贴图 insideInset——内插图 outsideOverlay——外贴图 outsideInset——外插图。 inside就是滚动条在绘制在padding以内；outside就是不需要绘制在padding内（即view的边界处）；Overlay是贴图，就是直接覆盖在内容的上方，这样内容可能会显示到滚动条下方去；Inset是插图，就是会在对应padding上加上滚动条的宽度，以不让内容显示到滚动条下面去。"</div><div class="line">android:scrollbarThumbHorizontal </div><div class="line">属性说明: 水平滚动块的drawable对象</div><div class="line">android:scrollbarThumbVertical </div><div class="line">属性说明: 竖直滚动块的drawable对象</div><div class="line">android:scrollbarTrackHorizontal </div><div class="line">属性说明: 水平滚动条滚动轨道的drawable对象</div><div class="line">android:scrollbarTrackVertical </div><div class="line">属性说明: 竖直滚动条滚动轨道的drawable对象</div><div class="line">android:scrollbars </div><div class="line">属性说明: "设置可显示的滚动条。有3个取值: none——不显示滚动条 horizontal——显示水平滚动条 vertical——显示竖直滚动条"</div><div class="line">android:soundEffectsEnabled </div><div class="line"><span class="title">setSoundEffectsEnabled</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 点击或触摸该view时，是否需要有声音效果</div><div class="line">android:tag </div><div class="line">属性说明: string标识。类似id，id是整数标识。</div><div class="line">android:textAlignment </div><div class="line"><span class="title">setTextAlignment</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本的显示方式。</div><div class="line">android:textDirection </div><div class="line"><span class="title">setTextDirection</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本的显示方向。</div><div class="line">android:transformPivotX </div><div class="line"><span class="title">setPivotX</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 水平方向偏转量</div><div class="line">android:transformPivotY </div><div class="line"><span class="title">setPivotY</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 竖直方向偏转量</div><div class="line">android:translationX </div><div class="line"><span class="title">setTranslationX</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 水平方向的移动距离</div><div class="line">android:translationY </div><div class="line"><span class="title">setTranslationY</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 竖直方向的移动距离</div><div class="line">android:visibility </div><div class="line"><span class="title">setVisibility</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: "view的可见性。有3个取值： gone——不可见，同时不占用view的空间； invisible——不可见，但占用view的空间； visible——可见"</div><div class="line">TextView属性说明</div><div class="line">下面对TextView的属性进行说明 android:autoLink </div><div class="line"><span class="title">setAutoLinkMask</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置是否“当文本为URL链接/email/电话号码/map时，文本显示为可点击的链接”。可选值<span class="params">(none/web/email/phone/map/all)</span></div><div class="line">android:autoText </div><div class="line"><span class="title">setKeyListener</span><span class="params">(KeyListener)</span> 属性说明: 如果设置，将自动执行输入值的拼写纠正。此处无效果，在显示输入法并输入的时候起作用。</div><div class="line">android:bufferType </div><div class="line"><span class="title">setText</span><span class="params">(CharSequence,TextView.BufferType)</span> 属性说明: 指定<span class="title">getText</span><span class="params">()</span>方式取得的文本类别。选项editable 类似于StringBuilder可追加字符，也就是说getText后可调用append方法设置文本内容。</div><div class="line">android:capitalize </div><div class="line"><span class="title">setKeyListener</span><span class="params">(KeyListener)</span> 属性说明: 设置自动大写属性。比如设置为2，自动大写单词首字符；设置为1，自动大写每句话的首字母等等。</div><div class="line">android:cursorVisible </div><div class="line"><span class="title">setCursorVisible</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 设定光标为显示/隐藏，默认显示。</div><div class="line">android:digits </div><div class="line"><span class="title">setKeyListener</span><span class="params">(KeyListener)</span> 属性说明: 设置允许输入哪些字符。如“1234567890.+-*/%\<span class="title">n</span><span class="params">()</span>”</div><div class="line">android:drawableBottom </div><div class="line"><span class="title">setCompoundDrawablesWithIntrinsicBounds</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 在text的下方输出一个drawable。如果指定一个颜色的话会把text的背景设为该颜色，并且同时和background使用时覆盖后者。</div><div class="line">android:drawableEnd </div><div class="line"><span class="title">setCompoundDrawablesRelativeWithIntrinsicBounds</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 在文本结尾处显示drawable对象。它的值可以是其它资源的引用，比如，"@[+][<span class="keyword">package</span>:]type:name"或者"?[<span class="keyword">package</span>:][type:]name"；也可以是颜色值，如"#rgb", "#argb", "#rrggbb", or "#aarrggbb"。</div><div class="line">android:drawableLeft </div><div class="line"><span class="title">setCompoundDrawablesWithIntrinsicBounds</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 在text的左边输出一个drawable。</div><div class="line">android:drawablePadding </div><div class="line"><span class="title">setCompoundDrawablePadding</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置text与drawable的间隔，与drawableLeft、drawableRight、drawableTop、drawableBottom一起使用，可设置为负数，单独使用没有效果。</div><div class="line">android:drawableRight </div><div class="line"><span class="title">setCompoundDrawablesWithIntrinsicBounds</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 在text的右边输出一个drawable。</div><div class="line">android:drawableStart </div><div class="line"><span class="title">setCompoundDrawablesRelativeWithIntrinsicBounds</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 在文本开始处显示drawable对象。它的值可以是其它资源的引用，比如，"@[+][<span class="keyword">package</span>:]type:name"或者"?[<span class="keyword">package</span>:][type:]name"；也可以是颜色值，如"#rgb", "#argb", "#rrggbb", or "#aarrggbb"。</div><div class="line">android:drawableTop </div><div class="line"><span class="title">setCompoundDrawablesWithIntrinsicBounds</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>)</span> 属性说明: 在text的正上方输出一个drawable。</div><div class="line">android:editable </div><div class="line">属性说明: 设置是否可编辑。这里无效果，在EditView中才有效果。</div><div class="line">android:editorExtras </div><div class="line"><span class="title">setInputExtras</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本的额外的输入数据。在EditView中才有效果。</div><div class="line">android:ellipsize </div><div class="line"><span class="title">setEllipsize</span><span class="params">(TextUtils.TruncateAt)</span> 属性说明: 设置当文字过长时,该控件该如何显示。有如下值设置：”start”—–省略号显示在开头；”end”——省略号显示在结尾；”middle”—-省略号显示在中间；”marquee” ——以跑马灯的方式显示<span class="params">(动画横向移动)</span></div><div class="line">android:ems </div><div class="line"><span class="title">setEms</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置TextView的宽度为N个字符的宽度。</div><div class="line">android:fontFamily </div><div class="line"><span class="title">setTypeface</span><span class="params">(Typeface)</span> 属性说明: 文本的字形体系。</div><div class="line">android:freezesText </div><div class="line"><span class="title">setFreezesText</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 设置保存文本的内容以及光标的位置。</div><div class="line">android:gravity </div><div class="line"><span class="title">setGravity</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本位置，如设置成“center”，文本将居中显示。</div><div class="line">android:height </div><div class="line"><span class="title">setHeight</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本区域的高度，支持度量单位：<span class="title">px</span><span class="params">(像素)</span>/dp/sp/in/<span class="title">mm</span><span class="params">(毫米)</span></div><div class="line">android:hint </div><div class="line"><span class="title">setHint</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: Text为空时显示的文字提示信息，可通过textColorHint设置提示信息的颜色。</div><div class="line">android:imeActionId </div><div class="line"><span class="title">setImeActionLabel</span><span class="params">(CharSequence,<span class="keyword">int</span>)</span> 属性说明: 设置IME动作ID。</div><div class="line">android:imeActionLabel </div><div class="line"><span class="title">setImeActionLabel</span><span class="params">(CharSequence,<span class="keyword">int</span>)</span> 属性说明: 设置IME动作标签。在EditView再做说明。</div><div class="line">android:imeOptions </div><div class="line"><span class="title">setImeOptions</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 附加功能，设置右下角IME动作与编辑框相关的动作，如actionDone右下角将显示一个“完成”，而不设置默认是一个回车符号。</div><div class="line">android:includeFontPadding </div><div class="line"><span class="title">setIncludeFontPadding</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 设置文本是否包含顶部和底部额外空白，默认为<span class="keyword">true</span>。</div><div class="line">android:inputMethod </div><div class="line"><span class="title">setKeyListener</span><span class="params">(KeyListener)</span> 属性说明: 为文本指定输入法，需要完全限定名（完整的包名）。例如：com.google.android.inputmethod.pinyin，但是这里报错找不到。</div><div class="line">android:inputType </div><div class="line"><span class="title">setRawInputType</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本的类型，用于帮助输入法显示合适的键盘类型。在EditView中再详细说明，这里无效果。</div><div class="line">android:lineSpacingExtra </div><div class="line"><span class="title">setLineSpacing</span><span class="params">(<span class="keyword">float</span>,<span class="keyword">float</span>)</span> 属性说明: 设置行间距。</div><div class="line">android:lineSpacingMultiplier </div><div class="line"><span class="title">setLineSpacing</span><span class="params">(<span class="keyword">float</span>,<span class="keyword">float</span>)</span> 属性说明: 设置行间距的倍数。如”1.2”</div><div class="line">android:lines </div><div class="line"><span class="title">setLines</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本的行数，设置两行就显示两行，即使第二行没有数据。</div><div class="line">android:linksClickable </div><div class="line"><span class="title">setLinksClickable</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 设置链接是否点击连接，即使设置了autoLink。</div><div class="line">android:marqueeRepeatLimit </div><div class="line"><span class="title">setMarqueeRepeatLimit</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 在ellipsize指定marquee的情况下，设置重复滚动的次数，当设置为marquee_forever时表示无限次。</div><div class="line">android:maxEms </div><div class="line"><span class="title">setMaxEms</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项。</div><div class="line">android:maxHeight </div><div class="line"><span class="title">setMaxHeight</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本区域的最大高度</div><div class="line">android:maxLength </div><div class="line"><span class="title">setFilters</span><span class="params">(InputFilter)</span> 属性说明: 限制显示的文本长度，超出部分不显示。</div><div class="line">android:maxLines </div><div class="line"><span class="title">setMaxLines</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本的最大显示行数，与width或者layout_width结合使用，超出部分自动换行，超出行数将不显示。</div><div class="line">android:maxWidth </div><div class="line"><span class="title">setMaxWidth</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本区域的最大宽度</div><div class="line">android:minEms </div><div class="line"><span class="title">setMinEms</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项。</div><div class="line">android:minHeight </div><div class="line"><span class="title">setMinHeight</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本区域的最小高度</div><div class="line">android:minLines </div><div class="line"><span class="title">setMinLines</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本的最小行数，与lines类似。</div><div class="line">android:minWidth </div><div class="line"><span class="title">setMinWidth</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本区域的最小宽度</div><div class="line">android:numeric </div><div class="line"><span class="title">setKeyListener</span><span class="params">(KeyListener)</span> 属性说明: 如果被设置，该TextView有一个数字输入法。此处无用，设置后唯一效果是TextView有点击效果，此属性在EdtiView将详细说明。</div><div class="line">android:password </div><div class="line"><span class="title">setTransformationMethod</span><span class="params">(TransformationMethod)</span> 属性说明: 以小点”.”显示文本</div><div class="line">android:phoneNumber </div><div class="line"><span class="title">setKeyListener</span><span class="params">(KeyListener)</span> 属性说明: 设置为电话号码的输入方式。</div><div class="line">android:privateImeOptions </div><div class="line"><span class="title">setPrivateImeOptions</span><span class="params">(String)</span> 属性说明: 设置输入法选项，在EditText中才有作用。</div><div class="line">android:scrollHorizontally </div><div class="line"><span class="title">setHorizontallyScrolling</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 设置文本超出TextView的宽度的情况下，是否出现横拉条。</div><div class="line">android:selectAllOnFocus </div><div class="line"><span class="title">setSelectAllOnFocus</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 如果文本是可选择的，让他获取焦点而不是将光标移动为文本的开始位置或者末尾位置。TextView中设置后无效果。</div><div class="line">android:shadowColor </div><div class="line"><span class="title">setShadowLayer</span><span class="params">(<span class="keyword">float</span>,<span class="keyword">float</span>,<span class="keyword">float</span>,<span class="keyword">int</span>)</span> 属性说明: 指定文本阴影的颜色，需要与shadowRadius一起使用。</div><div class="line">android:shadowDx </div><div class="line"><span class="title">setShadowLayer</span><span class="params">(<span class="keyword">float</span>,<span class="keyword">float</span>,<span class="keyword">float</span>,<span class="keyword">int</span>)</span> 属性说明: 设置阴影横向坐标开始位置。</div><div class="line">android:shadowDy </div><div class="line"><span class="title">setShadowLayer</span><span class="params">(<span class="keyword">float</span>,<span class="keyword">float</span>,<span class="keyword">float</span>,<span class="keyword">int</span>)</span> 属性说明: 设置阴影纵向坐标开始位置。</div><div class="line">android:shadowRadius </div><div class="line"><span class="title">setShadowLayer</span><span class="params">(<span class="keyword">float</span>,<span class="keyword">float</span>,<span class="keyword">float</span>,<span class="keyword">int</span>)</span> 属性说明: 设置阴影的半径。设置为0.1就变成字体的颜色了，一般设置为3.0的效果比较好。</div><div class="line">android:singleLine </div><div class="line"><span class="title">setTransformationMethod</span><span class="params">(TransformationMethod)</span> 属性说明: 设置单行显示。如果和layout_width一起使用，当文本不能全部显示时，后面用“…”来表示。如android:text</span>=<span class="string">"test_ singleLine "</span> android:singleLine=<span class="string">"true"</span> android:layout_width=<span class="string">"20dp"</span>将只显示“t…”。如果不设置singleLine或者设置为<span class="keyword">false</span>，文本将自动换行</div><div class="line">android:<span class="function">text </div><div class="line"><span class="title">setText</span><span class="params">(CharSequence,TextView.BufferType)</span> 属性说明: 设置显示文本.</div><div class="line">android:textAllCaps </div><div class="line"><span class="title">setAllCaps</span><span class="params">(<span class="keyword">boolean</span>)</span> 属性说明: 设置文本全为大写。值为"<span class="keyword">true</span>"或"<span class="keyword">false</span>"。</div><div class="line">android:textAppearance </div><div class="line">属性说明: 设置文字外观。如“?android:attr/textAppearanceLargeInverse</div><div class="line">android:textColor </div><div class="line"><span class="title">setTextColor</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本颜色</div><div class="line">android:textColorHighlight </div><div class="line"><span class="title">setHighlightColor</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 被选中文字的底色，默认为蓝色</div><div class="line">android:textColorHint </div><div class="line"><span class="title">setHintTextColor</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置提示信息文字的颜色，默认为灰色。与hint一起使用。</div><div class="line">android:textColorLink </div><div class="line"><span class="title">setLinkTextColor</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 文字链接的颜色.</div><div class="line">android:textIsSelectable </div><div class="line"><span class="title">isTextSelectable</span><span class="params">()</span> 属性说明: 设置非编辑文本可否被选择。值为"<span class="keyword">true</span>"或"<span class="keyword">false</span>"。</div><div class="line">android:textScaleX </div><div class="line"><span class="title">setTextScaleX</span><span class="params">(<span class="keyword">float</span>)</span> 属性说明: 设置文字之间间隔，默认为1.0f。</div><div class="line">android:textSize </div><div class="line"><span class="title">setTextSize</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">float</span>)</span> 属性说明: 设置文字大小，推荐度量单位”sp”，如”15sp”</div><div class="line">android:textStyle </div><div class="line"><span class="title">setTypeface</span><span class="params">(Typeface)</span> 属性说明: 设置字形[<span class="title">bold</span><span class="params">(粗体)</span> 0, <span class="title">italic</span><span class="params">(斜体)</span> 1, <span class="title">bolditalic</span><span class="params">(又粗又斜)</span> 2] 可以设置一个或多个，用“|”隔开</div><div class="line">android:typeface </div><div class="line"><span class="title">setTypeface</span><span class="params">(Typeface)</span> 属性说明: 设置文本字体，必须是以下常量值之一：normal 0, sans 1, serif 2, <span class="title">monospace</span><span class="params">(等宽字体)</span> 3]</div><div class="line">android:width </div><div class="line"><span class="title">setWidth</span><span class="params">(<span class="keyword">int</span>)</span> 属性说明: 设置文本区域的宽度，支持度量单位：<span class="title">px</span><span class="params">(像素)</span>/dp/sp/in/<span class="title">mm</span><span class="params">(毫米)</span>。</div><div class="line">android:fadingEdgeLength</div><div class="line">设置淡入淡出边缘的长度，可以接受大小值的单位是：px、dp、sp、in、mm，也可以参考大小值资源</div><div class="line">android:fitsSystemWindows</div><div class="line">是否适合系统窗体，取值为<span class="keyword">true</span>或<span class="keyword">false</span>。该属性只对不是子组件的组件有效</div><div class="line">android:focusable</div><div class="line">是否可以获取焦点，取值<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:focusableInTouchMode</div><div class="line">是否可以在触摸模式下获取焦点，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:hapticFeedbackEnabled</div><div class="line">是否允许触摸反馈效果，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:id</div><div class="line">提供该组件的标识名，可以借助Activity或View实例的findViewById方法通过id获取对应的组件实例对象，其属性值的形式为：android:id</span>=”@+id/id”</div><div class="line">android:isScrollContainer</div><div class="line">设置该组件是否设置为滚动条容器，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:keepScreenOn</div><div class="line">控制该组件在显示的时候保持在屏幕显示，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:longClickable</div><div class="line">是否响应长时间点击事件，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:minHeight</div><div class="line">组件的最小高度，取值同android:fadingEdgeLength</div><div class="line">android:minWidth</div><div class="line">组件的最小宽度，取值同android:fadingEdgeLength</div><div class="line">android:nextFocusDown</div><div class="line">设置下一个向下获取焦点的组件，取值为id</div><div class="line">android:nextFocusLeft</div><div class="line">设置下一个向左获取焦点的组件，取值为id</div><div class="line">android:nextFocusRight</div><div class="line">设置下一个向右获取焦点的组件，取值为id</div><div class="line">android:nextFocusUp</div><div class="line">设置下一个向上获取焦点的组件，取值为id</div><div class="line">android:padding</div><div class="line">设置上、下、左、右<span class="number">4</span>个边缘的填充距离，必须是一个大小值，取值同android:fadingEdgeLength</div><div class="line">android:paddingBottom</div><div class="line">设置下端边缘的填充距离，取值同android:padding</div><div class="line">android:paddingLeft</div><div class="line">设置左端边缘的填充距离，取值同android:padding</div><div class="line">android:paddingRight</div><div class="line">设置右端边缘的填充距离，取值同android:padding</div><div class="line">android:paddingTop</div><div class="line">设置上端边缘的填充距离，取值同android:padding</div><div class="line">android:saveEnabled</div><div class="line">是否允许保存状态，取值为<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:scrollX</div><div class="line">设置垂直滚动条的位移量，必须是一个大小值，取值同android:padding</div><div class="line">android:scrollY</div><div class="line">设置水平滚动条的位移量，必须是一个大小值，取值同android:padding</div><div class="line">android:scrollbarAlwaysDrawHorizontalTrack</div><div class="line">是否总是设置水平滚动条滑块，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:scrollbarAlwaysDrawVerticalTrack</div><div class="line">是否总是设置垂直滚动条滑块，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:scrollbarSize</div><div class="line">设置垂直滚动条的宽度和水平滚动条的长度，必须是一个大小值，取值同android:padding</div><div class="line">android:scrollbarStyle</div><div class="line">设置滚动条的样式，取值为下列之一：</div><div class="line">insideOverlay在填充区域内，覆盖形式</div><div class="line">insideInset在填充区域内，插进形式（凹进）</div><div class="line">outsideOverly在绑定组件边缘，覆盖形式</div><div class="line">outsideInset在绑定组件边缘，插进形似</div><div class="line">android:scrollbarThumbHorizontal</div><div class="line">设置水平滚动条按钮的绘制资源，必须引用可绘制资源</div><div class="line">android:scrollbarThumbVertical</div><div class="line">设置垂直滚动条按钮的绘制资源，必须引用可绘制资源</div><div class="line">android:scrollbarTrackHorizontal</div><div class="line">设置水平滚动条轨道的绘制资源，必须引用可绘制资源</div><div class="line">android:scrollbarTrackVertical</div><div class="line">设置水平滚动条轨道的绘制资源，必须引用可绘制资源</div><div class="line">android:scrollbars</div><div class="line">设置滚动显示，可以为一下一个或多个值：</div><div class="line">none不显示滚动条</div><div class="line">horizontal只显示水平滚动条</div><div class="line">vertical只显示垂直滚动条</div><div class="line">android:soundEffectsEnabled</div><div class="line">是否允许音效，取值为<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:tag</div><div class="line">设置标记内容，可以通过View类实例的getTag方法获取该组件的标记内容，或者使用findViewByTag通过标记来查找相应的子组件</div><div class="line">android:visibility</div><div class="line">设置初始化可见状态，取值为以下之一：</div><div class="line">visible可见（默认值）</div><div class="line">invisible不可见（其所占空间将留出）</div><div class="line">gone完全不可见（其所占空间都不会留出）</div><div class="line">线性布局LinearLayout组件属性列表</div><div class="line">属性说明</div><div class="line">android:baselineAligned</div><div class="line">基线对齐</div><div class="line">android:baselineAlignedChildIndex</div><div class="line">以指定子组件作为基线对齐</div><div class="line">android:gravity</div><div class="line">指定该物体放入其容器的重心位置，取值为下列之一：</div><div class="line">top上方，物体大小不变</div><div class="line">bottom下方，物体大小不变</div><div class="line">left左方，物体大小不变</div><div class="line">right右方，物体大小不变</div><div class="line">center_vertical垂直方向的中间，物体大小不变</div><div class="line">fill_vertical填满垂直方向，自动进行大小调整</div><div class="line">center_horizontal水平方向的中间，大小不变</div><div class="line">fill_horizontal填满水平方向，自动进行大小调整</div><div class="line">center居中（既是水平也是垂直方向的中间）</div><div class="line">fill填满整个容器</div><div class="line">clip_vertical</div><div class="line">clip_horizontal</div><div class="line">android:orientation</div><div class="line">布局方向，取值为下列之一：</div><div class="line">horizontal水平的</div><div class="line">vertical垂直的（默认值）</div><div class="line">android:weightSum</div><div class="line">组件的比重和</div><div class="line"></div><div class="line">LinearLayout_Layout属性说明</div><div class="line"></div><div class="line">android:layout_gravity</div><div class="line">当前子组件的心位置</div><div class="line">android:layout_height</div><div class="line">当前子组件的高度</div><div class="line">android:layout_weight</div><div class="line">当前子组件的空间比重，取值为浮点数</div><div class="line">android:layout_width</div><div class="line">当前子组件的宽度</div><div class="line"></div><div class="line">RalativeLayout属性说明</div><div class="line"></div><div class="line">android:gravity</div><div class="line">设置添加组件的重心</div><div class="line">android:ignoreGravity</div><div class="line">忽略布局重心的影响</div><div class="line"></div><div class="line">RalativeLayout_Layout属性说明</div><div class="line"></div><div class="line">android:layout_above</div><div class="line">将当前组件的下边缘放置于参照组件之上，该属性为参照组件的ID</div><div class="line">android:layout_alignBaseline</div><div class="line">当前组件与参照组件的基线对齐，该属性为参照组件的ID</div><div class="line">android:layout_alignBottom</div><div class="line">当前组件与参照组件的下边界对齐，该属性为参照组件的ID</div><div class="line">android:layout_alignLeft</div><div class="line">当前组件与参照组件的左边界对齐，该属性为参照组件的ID</div><div class="line">android:layout_alignParenBottom</div><div class="line">当前组件与父组件的下边界对齐，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:layout_alignParentLeft</div><div class="line">当前组件与父组件的左边界对齐，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:layout_alignParentRight</div><div class="line">当前组件与父组件的右边界对齐，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:layout_alignParentTop</div><div class="line">当前组件与父组件的上边界对齐，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:layout_alignRight</div><div class="line">当前组件与参照组件的右边界对齐，该属性为参照组件的ID</div><div class="line">android:layout_alignTop</div><div class="line">当前组件与参照组件的上边界对齐，该属性为参照组件的ID</div><div class="line">android:layout_alignWithParentIfMissing</div><div class="line">如果对应的兄弟元素找不到的话就以父元素做参照物 <span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:layout_below</div><div class="line">将当前组件的上边缘放置于参照组件之下，该属性为参照组件的ID</div><div class="line">android:layout_centerHorizontal</div><div class="line">当前组件放置到父组件的水平居中的位置</div><div class="line">android:layout_centerInParent</div><div class="line">当前组件放置到父组件的重心位置</div><div class="line">android:layout_centerVertical</div><div class="line">当前组件放置到父组件垂直居中的位置</div><div class="line">android:layout_toLeftOf</div><div class="line">将当前组件的右边缘放置于参照组件之下，该属性为参照组件的ID</div><div class="line">android:layout_toRightOf</div><div class="line">将当前组件的左边缘放置于参照组件之下，该属性为参照组件的ID</div><div class="line"></div><div class="line">AbsoluteLayout_Layout属性说明</div><div class="line"></div><div class="line">android:layout_x</div><div class="line">当前组件的x坐标位置（从左到右方向）</div><div class="line">android:layout_y</div><div class="line">当前组件的y坐标位置（从上到下方向）</div><div class="line"></div><div class="line">FrameLayout属性说明</div><div class="line"></div><div class="line">android:foreground</div><div class="line">前置图片</div><div class="line">android:foregroundGravity</div><div class="line">前置图片重心</div><div class="line">android:measureAllChildren</div><div class="line">在切换显示时是否侧重所有子组件的大小</div><div class="line">android:layout_gravity</div><div class="line">添加组件的重心</div><div class="line"></div><div class="line">FrameLayout_Layout属性说明</div><div class="line"></div><div class="line">android:layout_gravity</div><div class="line">当前子组件所添加的重心位置</div><div class="line"></div><div class="line">TableLayout属性说明</div><div class="line"></div><div class="line">android:collapseColumns</div><div class="line">设置允许折叠的列编号，列编号基于<span class="number">0</span>，属性值可以是单个或多个列编号，编号与编号直接用逗号”,”分隔</div><div class="line">android:shrinkColumns</div><div class="line">设置允许收缩的列编号，列编号基于<span class="number">0</span>，属性值可以是单个或多个列编号，编号与编号直接用逗号”,”分隔</div><div class="line">android:stretchColumns</div><div class="line">设置允许伸展的列编号，列编号基于<span class="number">0</span>，属性值可以是单个或多个列编号，编号与编号直接用逗号”,”分隔</div><div class="line">TableRow_Cell属性说明</div><div class="line"></div><div class="line">android:layout_column</div><div class="line">设置该单元格的列编号（基于<span class="number">0</span>）</div><div class="line">android:layout_span</div><div class="line">指明该单元格可以跨越的列数</div><div class="line"></div><div class="line">AbsListView属性说明</div><div class="line"></div><div class="line">android:cacheColorHint</div><div class="line">设置缓冲颜色</div><div class="line">android:drawSelectorOnTop</div><div class="line">是否将选择器绘制在备选条目上方，取值为<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:fastScrollEnabled</div><div class="line">允许快速滚动</div><div class="line">android:listSelector</div><div class="line">指示选择器的内容</div><div class="line">android:scrollingCache</div><div class="line">滚动时是否使用绘制缓冲，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:smoothScrollbar</div><div class="line">平滑滚动条</div><div class="line">android:stackFromBottom</div><div class="line">从下方堆叠条目</div><div class="line">android:textFilterEnbled</div><div class="line">是否允许过滤</div><div class="line">android:transcriptMode设置抄本模式</div><div class="line"></div><div class="line">ListView属性说明</div><div class="line"></div><div class="line">android:choiceMode</div><div class="line">选择模式</div><div class="line">android:divider</div><div class="line">分割线颜色或组件的参考</div><div class="line">android:dividerHeight</div><div class="line">分割线高度</div><div class="line">android:entries</div><div class="line">指定绑定到当前列表视图的一个数组资源</div><div class="line">android:footerDividersEnabled</div><div class="line">是否允许页脚分割线</div><div class="line">android:headerDividersEnabled</div><div class="line">是否允许页眉分割线</div><div class="line"></div><div class="line">GridView属性说明</div><div class="line"></div><div class="line">android:columnWidth</div><div class="line">指定列宽</div><div class="line">android:gravity</div><div class="line">添加组件的重心位置</div><div class="line">android:horizontalSpacing</div><div class="line">水平空间</div><div class="line">android:numColumns</div><div class="line">指定列数</div><div class="line">android:strechMode</div><div class="line">伸展模式</div><div class="line">android:verticalSpacing</div><div class="line">垂直空间</div><div class="line"></div><div class="line">Gallery属性说明</div><div class="line"></div><div class="line">android:animationDuration</div><div class="line">动画持续时间</div><div class="line">android:gravity</div><div class="line">添加组件的重心位置</div><div class="line">android:spacing</div><div class="line">间隔空间</div><div class="line">android:unselectedAlpha</div><div class="line">非选择条目的透明度</div><div class="line"></div><div class="line">TextView属性说明</div><div class="line"></div><div class="line">android:autoLink</div><div class="line">是否自动链接（内容是网址或是电子邮件时）</div><div class="line">android:autoText</div><div class="line">自动更新拼音错误</div><div class="line">android:bufferType</div><div class="line">设置缓冲区类型</div><div class="line">android:capitalize</div><div class="line">自动大写</div><div class="line">android:cursorVisible</div><div class="line">光标是否可见，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:digits</div><div class="line">所接受的数字字符</div><div class="line">android:drawableBottom</div><div class="line">在文本下方绘制</div><div class="line">android:drawableLeft</div><div class="line">在文本左方绘制</div><div class="line">android: drawablePadding</div><div class="line">绘制填充区</div><div class="line">android: drawableRight</div><div class="line">在文本右方绘制</div><div class="line">android: drawableTop</div><div class="line">在文本上方绘制</div><div class="line">android:editable</div><div class="line">是否可编辑，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:editorExtras</div><div class="line">设置文本的额外的输入数据。在EditView中才有效果</div><div class="line">android:ellipsize</div><div class="line">当内容过长时会自动打断单词内容</div><div class="line">android:ems</div><div class="line">设置TextView的宽度为N个字符的宽度</div><div class="line">android:enabled</div><div class="line">是否可用，<span class="keyword">true</span>或<span class="keyword">false</span></div><div class="line">android:freezesText</div><div class="line">是否冻结文本</div><div class="line">android:gravity</div><div class="line">指明文本的重心位置</div><div class="line">android:height</div><div class="line">高度值</div><div class="line">android:hint</div><div class="line">指示内容</div><div class="line">android:imeActionId</div><div class="line">设置IME动作ID</div><div class="line">android:imeActionLabel</div><div class="line">设置IME动作标签</div><div class="line">android:imeOptions</div><div class="line">输入法选项</div><div class="line">android:includeFontPadding</div><div class="line">设置文本是否包含顶部和底部额外空白，默认为<span class="keyword">true</span></div><div class="line">android:inputMethod</div><div class="line">指定输入法</div><div class="line">android:inputType</div><div class="line">输入类型，取值为下列之一：</div><div class="line">none</div><div class="line">text普通文本</div><div class="line">textCapCharacters大写字符</div><div class="line">textCapWords单词首字母大写</div><div class="line">textCapSentences句子首字母大写</div><div class="line">textAutoCorret自动更正</div><div class="line">textAutoComplete自动完成</div><div class="line">textMultiLine多行内容</div><div class="line">textUri，Uri</div><div class="line">textEmailAddress电子邮件地址</div><div class="line">textEmailSubject电子邮件主题</div><div class="line">textShortMessage短消息</div><div class="line">textLongMessage长消息</div><div class="line">textPersonName个人姓名</div><div class="line">textPostalAddress邮政地址</div><div class="line">textPassword密码</div><div class="line">textVIsiblePassword可见的密码</div><div class="line">textWebEditText网页格式</div><div class="line">textFilter过滤字符串</div><div class="line">textPhonetic语言发音</div><div class="line">number数字</div><div class="line">numberSigned有符号数字</div><div class="line">numberDecimal十进制数字</div><div class="line">phone电话号码</div><div class="line">datetime日期时间</div><div class="line">date日期</div><div class="line">time时间</div><div class="line">android:lineSpacingExtra</div><div class="line">设置行间距 </div><div class="line">android:lineSpacingMultiplier</div><div class="line">设置行间距的倍数</div><div class="line">android:lines</div><div class="line">设置文本行数</div><div class="line">android:linksClickable</div><div class="line">设置链接是否点击连接，即使设置了autoLick</div><div class="line">android:marqueeRepeatLimit</div><div class="line">来回移动的动画次数</div><div class="line">android:maxEms</div><div class="line">设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项 </div><div class="line">android:maxHeight</div><div class="line">物体的最大高度</div><div class="line">android:maxLength</div><div class="line">最大文本长度</div><div class="line">android:maxLines</div><div class="line">最大行数</div><div class="line">android:minWidth</div><div class="line">物体的最大宽度</div><div class="line">android:minEms</div><div class="line">设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项</div><div class="line"> </div><div class="line">android:minHeight</div><div class="line">物体的最小高度</div><div class="line">android:minLines</div><div class="line">最小文本行数</div><div class="line">android:minWidth</div><div class="line">物体的最小宽度</div><div class="line">android:numeric</div><div class="line">是否使用数字输入方式</div><div class="line">android:password</div><div class="line">是否使用密码输入方式</div><div class="line">android:phonenumber</div><div class="line">是否使用电话号码输入方式</div><div class="line">android:privateImeOptions</div><div class="line">设置输入法选项 </div><div class="line">android:scrollHorizontally</div><div class="line">设置文本超出TextView的宽度的情况下，是否出现横拉条 </div><div class="line">android:selectAllOnFocus</div><div class="line">如果文本是可选择的，让他获取焦点而不是将光标移动为文本的开始位置或者末尾位置。TextView中设置后无效果。</div><div class="line">android:shadowColor</div><div class="line">文本阴影颜色</div><div class="line">android:shadowDx</div><div class="line">阴影的水平偏移</div><div class="line">android:shadowDy</div><div class="line">阴影的垂直偏移</div><div class="line">android:shadowRadius</div><div class="line">阴影的半径</div><div class="line">android:singleLine</div><div class="line">是否单行（不自动换行）</div><div class="line">android:text</div><div class="line">显示的文本内容</div><div class="line">android:textApperance</div><div class="line">基本字体颜色、字样、大小和样式</div><div class="line">android:textColor</div><div class="line">文本颜色</div><div class="line">android: textColorHighlight</div><div class="line">文本高亮颜色</div><div class="line">android: textColorHint</div><div class="line">文本提示颜色</div><div class="line">android:textColorLink</div><div class="line">文本链接颜色</div><div class="line">android:textScaleX</div><div class="line">文本缩放因数</div><div class="line">android:textSize</div><div class="line">文本大小</div><div class="line">android:textStyle</div><div class="line">文本样式，取值为下列之一：</div><div class="line">bold粗体</div><div class="line">italic斜体</div><div class="line">bolditalic粗斜体</div><div class="line">android:typeface</div><div class="line">字样</div><div class="line">android:width</div><div class="line">物体的高度</div><div class="line"></div><div class="line">AutoCompleteTextView属性说明</div><div class="line"></div><div class="line">android:completionHint</div><div class="line">显示提示</div><div class="line">android:completionHintView</div><div class="line">提示视图</div><div class="line">android:completionThreshold</div><div class="line">设置开始提示的字符数</div><div class="line">android:dropDownAnchor</div><div class="line">下拉框链接视图</div><div class="line">android:dropDownSelector</div><div class="line">下拉框选择器</div><div class="line">android:dropDownWIdth</div><div class="line">下拉框宽度</div><div class="line"></div><div class="line">ImageView属性说明</div><div class="line"></div><div class="line">android:adjustViewBounds</div><div class="line">是否调整视图范围</div><div class="line">android:baselineAlignBottom</div><div class="line">是否按照下端基线对齐</div><div class="line">android:cropToPadding</div><div class="line">是否按照填充进行裁剪</div><div class="line">android:maxHeight</div><div class="line">设置最大高度</div><div class="line">android:maxWidth</div><div class="line">设置最大宽度</div><div class="line">android:scaleType</div><div class="line">缩放类型，取值为下列之一：</div><div class="line">matrix图片真实大小</div><div class="line">fitXY适合图片大小</div><div class="line">fitStart</div><div class="line">fitCenter</div><div class="line">fitEnd</div><div class="line">center居中显示</div><div class="line">centerCrop</div><div class="line">centerInside</div><div class="line">android:src</div><div class="line">设置绘制用内容</div><div class="line">android:tint</div><div class="line">设置染色颜色值</div><div class="line">android:layout_above=<span class="string">"@id/xxx"</span> </div><div class="line">将控件置于给定ID控件之上 </div><div class="line">android:layout_below=<span class="string">"@id/xxx"</span></div><div class="line">将控件置于给定ID控件之下</div><div class="line">android:layout_toLeftOf=<span class="string">"@id/xxx"</span> </div><div class="line">将控件的右边缘和给定ID控件的左边缘对齐 </div><div class="line">android:layout_toRightOf=<span class="string">"@id/xxx"</span> </div><div class="line">将控件的左边缘和给定ID控件的右边缘对齐</div><div class="line">android:layout_alignLeft=<span class="string">"@id/xxx"</span> </div><div class="line">将控件的左边缘和给定ID控件的左边缘对齐</div><div class="line">android:layout_alignTop=<span class="string">"@id/xxx"</span> </div><div class="line">将控件的上边缘和给定ID控件的上边缘对齐</div><div class="line"> </div><div class="line">android:layout_alignRight=<span class="string">"@id/xxx"</span></div><div class="line">将控件的右边缘和给定ID控件的右边缘对齐</div><div class="line">android:layout_alignBottom=<span class="string">"@id/xxx"</span> </div><div class="line">将控件的底边缘和给定ID控件的底边缘对齐 </div><div class="line">android:layout_alignParentLeft=<span class="string">"true"</span> </div><div class="line">将控件的左边缘和父控件的左边缘对齐 </div><div class="line">android:layout_alignParentTop=<span class="string">"true"</span> </div><div class="line">将控件的上边缘和父控件的上边缘对齐 </div><div class="line">android:layout_alignParentRight=<span class="string">"true"</span> </div><div class="line">将控件的右边缘和父控件的右边缘对齐 </div><div class="line">android:layout_alignParentBottom=<span class="string">"true"</span> </div><div class="line">将控件的底边缘和父控件的底边缘对齐</div><div class="line"> android:layout_centerInParent=<span class="string">"true"</span> </div><div class="line"> 将控件置于父控件的中心位置 </div><div class="line"> </div><div class="line"> android:layout_centerHorizontal=<span class="string">"true"</span> </div><div class="line"> 将控件置于水平方向的中心位置 </div><div class="line"> </div><div class="line"> android:layout_centerVertical=<span class="string">"true"</span> </div><div class="line"> 将控件置于垂直方向的中心位置</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自&lt;a href=&quot;http://www.codexiu.cn/android/blog/40141/&quot;&gt;Android属性大全&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
      <category term="notes" scheme="https://haldir65.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>使用IDE内置的Terminal</title>
    <link href="https://haldir65.github.io/2017/03/11/2017-03-11-utilizing-the-terminal-in-android-studio/"/>
    <id>https://haldir65.github.io/2017/03/11/2017-03-11-utilizing-the-terminal-in-android-studio/</id>
    <published>2017-03-11T14:28:51.000Z</published>
    <updated>2017-04-23T10:51:46.777Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/device-2017-03-11-222239.png?imageView2/2/w/600" alt="io"><br>这周终于把Google I/O 2016的Android App在Device上跑起来了，顺便尝试多多使用命令行进行编译或者安装。</p>
<a id="more"></a>
<h3 id="1-编译Android-client并安装到本地设备"><a href="#1-编译Android-client并安装到本地设备" class="headerlink" title="1. 编译Android client并安装到本地设备"></a>1. 编译Android client并安装到本地设备</h3><p>官方提供了比较完善的Build Instructions，对于习惯于shift+F10的我来说，还是有点麻烦。</p>
<p>clone下来<a href="https://github.com/google/iosched">iosched</a>，修改gradle.properities里面的supportLib等值，参考Build Instruction ，</p>
<blockquote>
<p>gradlew clean assembleDebug</p>
</blockquote>
<p>往往这一步会开始下载gradle，非常耗时。参考了stackOverFlow，自己去下载gradle 3.3 -all.zip，放到/gradle/wrapper文件夹下，修改gradle-wrapper.properities，将其中的distributionUrl改成</p>
<blockquote>
<p>distributionUrl=gradle-3.3-all.zip</p>
</blockquote>
<p>等于直接省去上述下载步骤。Build完成后，敲入命令行</p>
<blockquote>
<p>gradlew installNormalDebug</p>
</blockquote>
<p>不出意外的话，即可进入主页面。</p>
<h3 id="2-Server端配置"><a href="#2-Server端配置" class="headerlink" title="2. Server端配置"></a>2. Server端配置</h3><p>Google io 2016 Android Client提供了Map Intergation和Youtube video display以及GCM等服务。这些全部集成在Google Cloud Platform上配置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/device-2017-03-11-222239.png?imageView2/2/w/600&quot; alt=&quot;io&quot;&gt;&lt;br&gt;这周终于把Google I/O 2016的Android App在Device上跑起来了，顺便尝试多多使用命令行进行编译或者安装。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>使用Kotlin进行java开发</title>
    <link href="https://haldir65.github.io/2017/01/13/2017-01-13-embracing-kotlin/"/>
    <id>https://haldir65.github.io/2017/01/13/2017-01-13-embracing-kotlin/</id>
    <published>2017-01-13T15:06:13.000Z</published>
    <updated>2017-06-25T15:01:31.077Z</updated>
    
    <content type="html"><![CDATA[<p>Kotlin是Jetbrain公司推出的面向jvm的语言，编译后的bytecode和java编写的代码并没有什么区别。</p>
<a id="more"></a>
<h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><p> 没有new关键字<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> 主函数</div><div class="line"> fun main(args : Array&lt;String&gt;) &#123;</div><div class="line">    for (i in args.indices) &#123;</div><div class="line">       print(args[i])</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">自定义函数</div></pre></td></tr></table></figure></p>
<p> fun getStringLength(obj: Any) :Int?{ //问号代表有可能返回空值<br>    if (obj is String) {<br>        return obj.length<br>    }<br>    return 0<br>}</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> 支持lambda</div><div class="line"> fun maps(list: List&lt;String&gt;) &#123;</div><div class="line">    list.filter &#123; it.startsWith(&quot;a&quot;) &#125;</div><div class="line">            .sortedBy &#123; it &#125;</div><div class="line">            .map(String::toUpperCase)</div><div class="line">            .forEach(::print)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-集合迭代"><a href="#2-集合迭代" class="headerlink" title="2. 集合迭代"></a>2. 集合迭代</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//带index的方式</div><div class="line">  val quoteParts = &quot; YOU JUST TALKED TO MUCH !&quot;.split(&quot; &quot;)</div><div class="line">            for ((index, value) in quoteParts.withIndex()) &#123;</div><div class="line">                print(&quot;reading index $index: $value &quot;)</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ol>
<li><a href="https://www.youtube.com/watch?v=mDpnc45WwlI&amp;index=10&amp;list=PLnVy79PaFHMXJha06t6pWfkYcATV4oPvC">Kotlin in production</a></li>
<li><a href="https://www.youtube.com/watch?v=YKzUbeUtTak">10 Kotlin Tricks in 10 ish minutes by Jake Wharton</a>​</li>
<li><a href="https://try.kotlinlang.org/#/Examples/Basic%20syntax%20walk-through/Null-checks/Null-checks.kt">Try Kotlin</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kotlin是Jetbrain公司推出的面向jvm的语言，编译后的bytecode和java编写的代码并没有什么区别。&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="kotlin" scheme="https://haldir65.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署个人博客记录</title>
    <link href="https://haldir65.github.io/2017/01/08/2017-01-08-trouble-shooting-with-my-blog/"/>
    <id>https://haldir65.github.io/2017/01/08/2017-01-08-trouble-shooting-with-my-blog/</id>
    <published>2017-01-08T10:01:01.000Z</published>
    <updated>2017-06-18T05:17:52.252Z</updated>
    
    <content type="html"><![CDATA[<p>使用hexo写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的blog一个值得置顶的文章的话，我觉得一篇记录使用hexo过程中的一些解决问题的方法的文章是再合适不过的了。</br><br><img src="http://odzl05jxx.bkt.clouddn.com/79a65f1911c81d736be0704904de8ea1.jpg?imageView2/2/w/600" alt=""></p>
<a id="more"></a>
<h3 id="1-经常更新yilia的theme"><a href="#1-经常更新yilia的theme" class="headerlink" title="1. 经常更新yilia的theme"></a>1. 经常更新yilia的theme</h3><p><a href="https://github.com/litten/hexo-theme-yilia">yilia</a>主题经常会更新，及时更新theme会发现很多新的特性及bug fix</p>
<h3 id="2-部署相关"><a href="#2-部署相关" class="headerlink" title="2. 部署相关"></a>2. 部署相关</h3><ul>
<li><p>部署到github</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean <span class="comment">//清除缓存</span></div><div class="line">hexo g -d <span class="comment">//一步到位 = hexo g + hexo d</span></div><div class="line">hexo s <span class="comment">//localost:4000本地预览</span></div></pre></td></tr></table></figure>
</li>
<li><p>部署过程中出现的一些错误</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">$ hexo g -d</div><div class="line">INFO  Start processing</div><div class="line">ERROR Process failed: _posts/<span class="number">2016</span><span class="number">-12</span><span class="number">-10</span>-adb-command.md</div><div class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line <span class="number">3</span>, column <span class="number">11</span>:</div><div class="line">    categories:  [技术]</div><div class="line">              ^</div><div class="line">    at generateError (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">162</span>:<span class="number">10</span>)</div><div class="line">    at throwError (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">168</span>:<span class="number">9</span>)</div><div class="line">    at readBlockMapping (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1040</span>:<span class="number">9</span>)</div><div class="line">    at composeNode (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1326</span>:<span class="number">12</span>)</div><div class="line">    at readDocument (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1488</span>:<span class="number">3</span>)</div><div class="line">    at loadDocuments (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1544</span>:<span class="number">5</span>)</div><div class="line">    at <span class="built_in">Object</span>.load (D:\Blog\github\node_modules\hexo\node_modules\js-yaml\lib\js-yaml\loader.js:<span class="number">1561</span>:<span class="number">19</span>)</div><div class="line">    at parseYAML (D:\Blog\github\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:<span class="number">80</span>:<span class="number">21</span>)</div><div class="line">    at parse (D:\Blog\github\node_modules\hexo\node_modules\hexo-front-matter\lib\front_matter.js:<span class="number">56</span>:<span class="number">12</span>)</div><div class="line">    at D:\Blog\github\node_modules\hexo\lib\plugins\processor\post.js:<span class="number">52</span>:<span class="number">18</span></div><div class="line">    at tryCatcher (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\util.js:<span class="number">16</span>:<span class="number">23</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">507</span>:<span class="number">35</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">567</span>:<span class="number">18</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</div><div class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</div><div class="line">    at PromiseArray._resolve (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">125</span>:<span class="number">19</span>)</div><div class="line">    at PromiseArray._promiseFulfilled (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">143</span>:<span class="number">14</span>)</div><div class="line">    at PromiseArray._iterate (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">113</span>:<span class="number">31</span>)</div><div class="line">    at PromiseArray.init [<span class="keyword">as</span> _init] (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">77</span>:<span class="number">10</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">564</span>:<span class="number">21</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</div><div class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</div><div class="line">    at PromiseArray._resolve (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">125</span>:<span class="number">19</span>)</div><div class="line">    at PromiseArray._promiseFulfilled (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise_array.js:<span class="number">143</span>:<span class="number">14</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">572</span>:<span class="number">26</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</div><div class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</div><div class="line">    at <span class="built_in">Promise</span>._resolveCallback (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">431</span>:<span class="number">57</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromiseFromHandler (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">522</span>:<span class="number">17</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromise (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">567</span>:<span class="number">18</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromise0 (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">612</span>:<span class="number">10</span>)</div><div class="line">    at <span class="built_in">Promise</span>._settlePromises (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">691</span>:<span class="number">18</span>)</div><div class="line">    at <span class="built_in">Promise</span>._fulfill (D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\promise.js:<span class="number">636</span>:<span class="number">18</span>)</div><div class="line">    at D:\Blog\github\node_modules\hexo\node_modules\bluebird\js\release\nodeback.js:<span class="number">42</span>:<span class="number">21</span></div><div class="line">    at D:\Blog\github\node_modules\hexo\node_modules\hexo-fs\node_modules\graceful-fs\graceful-fs.js:<span class="number">78</span>:<span class="number">16</span></div><div class="line">    at tryToString (fs.js:<span class="number">455</span>:<span class="number">3</span>)</div><div class="line">    at FSReqWrap.readFileAfterClose [<span class="keyword">as</span> oncomplete] (fs.js:<span class="number">442</span>:<span class="number">12</span>)</div><div class="line">INFO  Files loaded <span class="keyword">in</span> <span class="number">1.48</span> s</div><div class="line">INFO  Generated: sitemap.xml</div><div class="line">INFO  Generated: atom.xml</div><div class="line">INFO  Generated: <span class="number">2017</span>/<span class="number">01</span>/<span class="number">08</span>/<span class="number">2017</span><span class="number">-01</span><span class="number">-08</span>-trouble-shooting-<span class="keyword">with</span>-my-blog/index.html</div><div class="line">INFO  Generated: index.html</div><div class="line">INFO  <span class="number">4</span> files generated <span class="keyword">in</span> <span class="number">2.26</span> s</div><div class="line">INFO  Deploying: git</div></pre></td></tr></table></figure>
<p>找了好久，有说 _config.xml有空格的，有说title被乱改的，试了好长时间，改成这样就不再报错了。所以，<strong>冒号后面一定要加空格，英文半角的</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: adb常用命令手册</div><div class="line">date: 2016-12-10 21:14:14</div><div class="line">tags:</div><div class="line"> - android</div><div class="line"> - adb</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>tags有两种写法，一种是上面这样前面加横杠<br>另一种长这样，写成数组形式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: my awesometitle</div><div class="line">date: 2017-05-07 16:48:01</div><div class="line">categories: blog</div><div class="line">tags: [linux,python]</div><div class="line">---</div></pre></td></tr></table></figure></p>
<h3 id="3-一些功能的实现"><a href="#3-一些功能的实现" class="headerlink" title="3. 一些功能的实现"></a>3. 一些功能的实现</h3><ul>
<li>置顶功能<br>  将node_modules/hexo-generator-index/lib/generator.js的文件内容替换成以下内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</div><div class="line">  <span class="keyword">var</span> posts = locals.posts;</div><div class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></div><div class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></div><div class="line">    &#125;);</div><div class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</div><div class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</div><div class="line">    perPage: config.index_generator.per_page,</div><div class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</div><div class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</div><div class="line">    data: &#123;</div><div class="line">    __index: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>同时在文章开头添加top : 1即可 ，实际排序按照这个数字从大到小排序<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> title: Hexo置顶文章</div><div class="line">date: 2016-11-11 23:26:22</div><div class="line">tags:[置顶]</div><div class="line">categories: Hexo</div><div class="line">top: 0 # 0或者1</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-SublimeText的一些快捷键"><a href="#4-SublimeText的一些快捷键" class="headerlink" title="4. SublimeText的一些快捷键"></a>4. SublimeText的一些快捷键</h3><p>由于文章大部分都是使用SublimeText写的，Typroa这种所见即所得的编辑器也不错，但对于掌握MardkDown语法没有帮助。这里摘录一些SubLimeText的快捷键。</p>
<blockquote>
<p>Ctrl+Shift+P：打开命令面板<br>Ctrl+P：搜索项目中的文件<br>Ctrl+G：跳转到第几行<br>Ctrl+W：关闭当前打开文件<br>Ctrl+Shift+W：关闭所有打开文件<br>Ctrl+Shift+V：粘贴并格式化<br>Ctrl+D：选择单词，重复可增加选择下一个相同的单词<br><strong>Ctrl+L：选择行，重复可依次增加选择下一行</strong><br><strong>Ctrl+Shift+L：选择多行</strong><br><strong>Ctrl+Shift+D：复制粘贴当前行</strong><br><strong>Ctrl+X：删除当前行</strong><br>Ctrl+Shift+D：复制粘贴当前行<br>Ctrl+Shift+Enter：在当前行前插入新行<br>Ctrl+M：跳转到对应括号<br>Ctrl+U：软撤销，撤销光标位置<br>Ctrl+J：选择标签内容<br>Ctrl+F：查找内容<br>Ctrl+Shift+F：查找并替换<br>Ctrl+H：替换<br>Ctrl+R：前往 method<br>Ctrl+N：新建窗口<br>Ctrl+K+B：开关侧栏<br>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身<br>Ctrl+F2：设置/删除标记<br>Ctrl+/：注释当前行<br>Ctrl+Shift+/：当前位置插入注释<br>Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的<br>Ctrl+Shift+A：选择当前标签前后，修改标签用的<br>F11：全屏<br>Shift+F11：全屏免打扰模式，只编辑当前文件<br>Alt+F3：选择所有相同的词<br>Alt+.：闭合标签<br>Alt+Shift+数字：分屏显示<br>Alt+数字：切换打开第N个文件<br>Shift+右键拖动：光标多不，用来更改或插入列内容<br>鼠标的前进后退键可切换Tab文件<br>按Ctrl，依次点击或选取，可需要编辑的多个位置<br>按Ctrl+Shift+上下键，可替换行<br>```</p>
</blockquote>
<h3 id="5-title不能以-开头"><a href="#5-title不能以-开头" class="headerlink" title="5. title不能以[]开头"></a>5. title不能以[]开头</h3><h3 id="6-markdown语法"><a href="#6-markdown语法" class="headerlink" title="6. markdown语法"></a>6. markdown语法</h3><p>MarkDown页面内部跳转<br><a href="http://www.cnblogs.com/JohnTsai/p/4027229.html">MarkDown技巧：两种方式实现页内跳转</a></p>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li><a href="http://yanhuili.github.io/2016/11/21/hexo%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%8A%80%E5%B7%A7/">Hexo博文置顶技巧</a></li>
<li><a href="http://www.daqianduan.com/4820.html">SublimeText快捷键</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用hexo写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的blog一个值得置顶的文章的话，我觉得一篇记录使用hexo过程中的一些解决问题的方法的文章是再合适不过的了。&lt;/br&gt;&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/79a65f1911c81d736be0704904de8ea1.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="置顶" scheme="https://haldir65.github.io/tags/%E7%BD%AE%E9%A1%B6/"/>
    
      <category term="hexo" scheme="https://haldir65.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>linux基本命令介绍</title>
    <link href="https://haldir65.github.io/2017/01/07/2017-01-07-Linux-Basic-Commands/"/>
    <id>https://haldir65.github.io/2017/01/07/2017-01-07-Linux-Basic-Commands/</id>
    <published>2017-01-07T07:38:43.000Z</published>
    <updated>2017-06-25T15:00:22.813Z</updated>
    
    <content type="html"><![CDATA[<p>一些常用的linux基本命令,仅作为参考。</br><br><img src="http://odzl05jxx.bkt.clouddn.com/849c18412f8e7a0b18df09f6f87e6516.jpg?imageView2/2/w/600" alt=""><br> <a id="more"></a></p>
<p>首先是连接vps的ssh(Secure Shell)工具，putty或者xshell都可以。</p>
<h2 id="速查手册"><a href="#速查手册" class="headerlink" title="速查手册"></a>速查手册</h2><ol>
<li><a href="#1-文件操作常用命令">文件操作</a></li>
<li><a href="#2-Vi文本编辑器">Vi文本编辑器</a></li>
<li><a href="#3-linux下shell脚本语句的语法">bash脚本怎么写</a></li>
<li><a href="#4-用户和用户组的问题">用户和用户组的问题</a></li>
<li><a href="#5-文件权限的问题">文件权限</a></li>
<li><a href="#6-管道">管道</a></li>
<li><a href="#7-硬件相关的命令">硬件相关的命令</a></li>
<li><a href="#8-SS相关的命令">SS相关的命令</a></li>
<li><a href="#9-网络监控">网络监控</a></li>
<li><a href="#10-查看进程">查看进程</a><br>11.<a href="#11-常用配置">通用配置</a></li>
</ol>
<p><a href="#参考">参考</a></p>
<h3 id="1-文件操作常用命令"><a href="#1-文件操作常用命令" class="headerlink" title="1. 文件操作常用命令"></a>1. 文件操作常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- &gt; cd //进入目录</div><div class="line">- &gt; cd /  返回根目录</div><div class="line">- &gt; pwd // 显示当前目录</div><div class="line">- &gt; ls // 显示当前目录下内容 </div><div class="line"></div><div class="line">- &gt; mkdir //新建目录</div><div class="line">- &gt; rmdir //删除目录,如果目录不为空，</div><div class="line">- &gt;使用 rm -r //递归删除</div><div class="line">- &gt; rm -rf //强制删除</div><div class="line"></div><div class="line">文件名一般不支持空格，如果真有的话得用单引号括起来，像这样:</div><div class="line">-&gt; rm -f &apos;my file&apos;</div><div class="line">-&gt; mv a.mp4 b.mp4 //mv虽然是移动（Windows中的剪切）操作，但这种情况下就等同于重命名了，亲测有效</div><div class="line"></div><div class="line"># 重命名</div><div class="line">rename是实际意义上的重命名命令，但rename接受三个参数</div><div class="line"></div><div class="line">- &gt; touch filename //创建文件，后缀在linux下没意义</div></pre></td></tr></table></figure>
<p>复制粘贴：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- &gt; cp a b //把a复制一份，命名为b</div><div class="line"></div><div class="line">- &gt; cp d1 d2 // 这样是不行的，复制目录需要加上-r ，即</div><div class="line">- &gt; cp -r d1 d2</div><div class="line"></div><div class="line">移动(左边是被移动的文件或目录，右边是目标路径)： </div><div class="line"></div><div class="line">- &gt; mv d1 /  把d1移动到相对路径，也就是根目录下</div><div class="line">- &gt; mv d1 ../把d1往上移动一层</div><div class="line">- &gt; mv d1 ../../</div></pre></td></tr></table></figure></p>
<p>###重定向</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">重定向输出 &gt;</div><div class="line">ls  &gt; lsoutput.txt #用于将输出的结果写入一个新的文本文件中</div><div class="line">echo &apos;hey man&apos; # 类似于print</div><div class="line">echo &apos;hello&apos; &gt; log.txt #把这句话写入到文本中 ，覆盖其原有内容</div><div class="line"></div><div class="line">重定向输入 &lt;</div><div class="line">wall &lt; aa.txt # wall是向所有用户发广播， 即从aa.txt中读取内容，然后广播发出去</div><div class="line"></div><div class="line"></div><div class="line">#service命令</div><div class="line">service XXX start/stop/status #原理是将这些程序注册成为系统服务，这样调用这些程序的时候就不需要写一大堆绝对路径了，具体用法help已经很详细了。</div><div class="line"></div><div class="line">zip –q –r video.zip /home/video </div><div class="line">zip –q –r video.zip .  # .代表当前目录</div></pre></td></tr></table></figure>
<h3 id="2-Vi文本编辑器"><a href="#2-Vi文本编辑器" class="headerlink" title="2. Vi文本编辑器"></a>2. Vi文本编辑器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- &gt; vi 3.txt // 如果有则编辑，没有则直接创建</div><div class="line"></div><div class="line">Vi分为命令模式和编辑模式，一进来是命令模式，输入&apos;a&apos;进入编辑模式</div><div class="line">切换回命令模式按&apos;esc&apos; </div><div class="line">命令模式下 :w 表示存盘</div><div class="line">- :q 退出</div><div class="line"></div><div class="line">- :wq 保存并退出</div><div class="line">- :q! 不保存退出（无内容变化）</div></pre></td></tr></table></figure>
<p>在编辑模式下,输入 ‘dd’删除一行 ，输入’dw’删除一个词<br>输入’o’插入一行。。。。。。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- &gt; more filename//查看文件内容</div><div class="line"></div><div class="line">- &gt; cat filename //正序查看文件内容</div><div class="line"></div><div class="line">- &gt; tac filename //逆序查看文件内容</div><div class="line"></div><div class="line">- &gt; head - 3 filename //只查看文件前面三行</div><div class="line">- &gt; tail - 3 filename //只查看倒数后三行</div></pre></td></tr></table></figure>
<p>更多命令如 find 、 whereis 、 Li(Link)<br>查找：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">find / -name filename  //在根目录下查找文件</div><div class="line">find /etc -name filename //在etc目录下查找文件</div><div class="line"></div><div class="line">grep stringtofind filename //在指定的文本文件中查找指定的字符串</div><div class="line"></div><div class="line">whereis ls //查看ls命令所执行的是哪个文件及其位置(查看系统文件所在路径)</div></pre></td></tr></table></figure></p>
<h3 id="3-linux下shell脚本语句的语法"><a href="#3-linux下shell脚本语句的语法" class="headerlink" title="3. linux下shell脚本语句的语法"></a>3. linux下shell脚本语句的语法</h3><p>linux大小写敏感<br>eg:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">myPath=&quot;/var/log/httpd/&quot;</div><div class="line">myFile=&quot;/var /log/httpd/access.log&quot;</div><div class="line">#这里的-x 参数判断$myPath是否存在并且是否具有可执行权限</div><div class="line">if [ ! -x &quot;$myPath&quot;]; then</div><div class="line">mkdir &quot;$myPath&quot;</div><div class="line">fi</div><div class="line">#这里的-d 参数判断$myPath是否存在</div><div class="line">if [ ! -d &quot;$myPath&quot;]; then</div><div class="line">mkdir &quot;$myPath&quot;</div><div class="line">fi</div><div class="line">#这里的-f参数判断$myFile是否存在</div><div class="line">if [ ! -f &quot;$myFile&quot; ]; then</div><div class="line">touch &quot;$myFile&quot;</div><div class="line">fi</div><div class="line">#其他参数还有-n,-n是判断一个变量是否是否有值</div><div class="line">if [ ! -n &quot;$myVar&quot; ]; then</div><div class="line">echo &quot;$myVar is empty&quot;</div><div class="line">exit 0</div><div class="line">fi</div><div class="line">#两个变量判断是否相等</div><div class="line">if [ &quot;$var1&quot; == &quot;$var2&quot; ]; then  //if 后面必须加then</div><div class="line">echo &apos;$var1 eq $var2&apos;</div><div class="line">else</div><div class="line">echo &apos;$var1 not eq $var2&apos;</div><div class="line">fi //else后面必须加fi</div><div class="line"> </div><div class="line"></div><div class="line">       if list then</div><div class="line">           do something here</div><div class="line">       elif list then</div><div class="line">           do another thing here</div><div class="line">       else</div><div class="line">         do something else here</div><div class="line">       fi</div></pre></td></tr></table></figure></p>
<p>eg: echo类似于print<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">例：myvar=“Hi there！”</div><div class="line"></div><div class="line">    echo $myvar</div><div class="line"></div><div class="line">    echo &quot;$myvar&quot;</div><div class="line"></div><div class="line">    echo &apos; $myvar&apos;</div><div class="line"></div><div class="line">    echo \$myvar</div><div class="line"></div><div class="line">将会输出如下：Hi there！</div><div class="line"></div><div class="line">              Hi there!</div><div class="line"></div><div class="line">              $myvar</div><div class="line"></div><div class="line">              $myvar</div></pre></td></tr></table></figure></p>
<h3 id="4-用户和用户组的问题"><a href="#4-用户和用户组的问题" class="headerlink" title="4. 用户和用户组的问题"></a>4. 用户和用户组的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">useradd user //添加用户，(-g 指定用户所在用户组)/home目录下会多一个user的目录，作为该用户的主目录</div><div class="line"></div><div class="line">passwd user //设置user的密码，会提示输入密码，密码不会显示在窗口中</div><div class="line"></div><div class="line">cd /etc &gt;&gt;&gt; more passwd  ，这里面会显示所有的用户</div><div class="line">more group ,显示用户组的信息</div><div class="line">groupadd groupname //添加一个用户组</div><div class="line"></div><div class="line">//删除用户</div><div class="line">userdel user //删除一个用户 </div><div class="line">还需要删除该用户的主目录(rm -rf user) </div><div class="line"></div><div class="line">重启机器，登录页面选择新用户即可完成用户切换</div><div class="line"></div><div class="line">或者使用 su testuser 切换到testuser身份</div><div class="line">exit就回到root用户的身份</div><div class="line"></div><div class="line">新用户登录时，默认的pwd是该用户的主目录</div></pre></td></tr></table></figure>
<h3 id="5-文件权限的问题"><a href="#5-文件权限的问题" class="headerlink" title="5. 文件权限的问题"></a>5. 文件权限的问题</h3><p>ls命令执行显示的文件前一般带有一串信息<br>第一位：</p>
<ul>
<li>代表文件<br>l代表链接<br>d代表目录</li>
</ul>
<p>后面九位划分为三块，可能的权限有这么几种<br>r(read权限)w(写权限)-(无权限)x(执行权限)</p>
<p>第一组代表所有者(u)权限，第二组代表与所有者一个用户组的用户(g)的权限，第三组代表其他用户(0)的权限</p>
<p>更改文件权限命令: chmod<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">chmod +x filename //加上可执行权限，所有用户都加上了</div><div class="line">chmod u+x filename //给当前用户加上可执行权限</div><div class="line">//其他命令不一一列举</div><div class="line"></div><div class="line">&gt; u ：目录或者文件的当前的用户</div><div class="line">  g ：目录或者文件的当前的群组</div><div class="line">  o ：除了目录或者文件的当前用户或群组之外的用户或者群组</div><div class="line">  a ：所有的用户及群组</div><div class="line"></div><div class="line"></div><div class="line">&gt; r ：读权限，用数字4表示</div><div class="line">  w ：写权限，用数字2表示</div><div class="line">  x ：执行权限，用数字1表示</div><div class="line">  - ：删除权限，用数字0表示</div><div class="line"></div><div class="line">所以给所有用户增加a.txt文件的可执行权限就像这样</div><div class="line">chmod a+x a.txt </div><div class="line">#其余自行发挥</div><div class="line">chmod a-x a.txt  #删除所有用户的可执行权限</div><div class="line"></div><div class="line"></div><div class="line">chmod 755 filename  </div><div class="line">751应该是读/写/执行</div><div class="line">chomod 444 filename# 为所有用户分配读权限</div><div class="line">chmod 777 filename //全部权限都有了，其实上面的9位就是这三位数每一位的二进制拼起来的</div><div class="line">755 就是 111101101,也就对应上面的权限九位字母</div><div class="line"></div><div class="line">chown -R Jane /foldername # 把flodername文件夹的所有者改为Jane， -R 表示递归，会保证所有子文件夹的所有者也被更改</div></pre></td></tr></table></figure></p>
<p>更改文件所有者</p>
<ul>
<li><blockquote>
<p>chown username filename</p>
</blockquote>
</li>
</ul>
<h3 id="6-管道"><a href="#6-管道" class="headerlink" title="6. 管道"></a>6. 管道</h3><p>将一个命令的输出传送给另一个命令，作为另一个命令的输入<br>eg: 中间那条竖线叫做管道连接符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/passwd | grep usernametofind</div><div class="line">$ ls -l | grep &quot;^d&quot;</div><div class="line">$ ls -l * | grep &quot;^-&quot; | wc -|   //&quot;^-&quot;表示不列出目录或链接，只展示目录；wc是数行数</div><div class="line">$ ls -l | grep &quot;^d&quot; //只列出目录</div></pre></td></tr></table></figure></p>
<h3 id="7-硬件相关的命令"><a href="#7-硬件相关的命令" class="headerlink" title="7. 硬件相关的命令"></a>7. 硬件相关的命令</h3><p><a href="https://github.com/Teddysun/across">VPS跑分软件</a></p>
<blockquote>
<p>git clone下来<br>cd across<br>wget -qO- bench.sh | bash （亲测可用，也可以自己看Readme）<br>或者 &gt; curl -Lso- bench.sh | bash </p>
</blockquote>
<h4 id="BandWagon"><a href="#BandWagon" class="headerlink" title="BandWagon"></a>BandWagon</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">----------------------------------------------------------------------</div><div class="line">CPU model            : Intel(R) Xeon(R) CPU E3-1275 v5 @ 3.60GHz</div><div class="line">Number of cores      : 1</div><div class="line">CPU frequency        : 3600.041 MHz</div><div class="line">Total size of Disk   : 12.0 GB (10.0 GB Used)</div><div class="line">Total amount of Mem  : 256 MB (217 MB Used)</div><div class="line">Total amount of Swap : 128 MB (122 MB Used)</div><div class="line">System uptime        : 2 days, 4 hour 20 min</div><div class="line">Load average         : 0.06, 0.05, 0.01</div><div class="line">OS                   : Ubuntu 14.04.1 LTS</div><div class="line">Arch                 : i686 (32 Bit)</div><div class="line">Kernel               : 2.6.32-042stab123.3</div><div class="line">----------------------------------------------------------------------</div><div class="line">I/O speed(1st run)   : 855 MB/s</div><div class="line">I/O speed(2nd run)   : 1.0 GB/s</div><div class="line">I/O speed(3rd run)   : 1.0 GB/s</div><div class="line">Average I/O speed    : 967.7 MB/s</div><div class="line">----------------------------------------------------------------------</div><div class="line">Node Name                       IPv4 address            Download Speed</div><div class="line">CacheFly                        205.234.175.175         76.5MB/s</div><div class="line">Linode, Tokyo, JP               106.187.96.148          17.6MB/s</div><div class="line">Linode, Singapore, SG           139.162.23.4            8.18MB/s</div><div class="line">Linode, London, UK              176.58.107.39           8.67MB/s</div><div class="line">Linode, Frankfurt, DE           139.162.130.8           12.8MB/s</div><div class="line">Linode, Fremont, CA             50.116.14.9             9.40MB/s</div><div class="line">Softlayer, Dallas, TX           173.192.68.18           62.3MB/s</div><div class="line">Softlayer, Seattle, WA          67.228.112.250          66.0MB/s</div><div class="line">Softlayer, Frankfurt, DE        159.122.69.4            12.2MB/s</div><div class="line">Softlayer, Singapore, SG        119.81.28.170           11.8MB/s</div><div class="line">Softlayer, HongKong, CN         119.81.130.170          13.2MB/s</div><div class="line">----------------------------------------------------------------------</div></pre></td></tr></table></figure>
<h4 id="BuyVm"><a href="#BuyVm" class="headerlink" title="BuyVm"></a>BuyVm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">CPU model            : Intel(R) Xeon(R) CPU           L5639  @ 2.13GHz</div><div class="line">Number of cores      : 1</div><div class="line">CPU frequency        : 2000.070 MHz</div><div class="line">Total size of Disk   : 15.0 GB (1.3 GB Used)</div><div class="line">Total amount of Mem  : 128 MB (80 MB Used)</div><div class="line">Total amount of Swap : 128 MB (32 MB Used)</div><div class="line">System uptime        : 0 days, 22 hour 28 min</div><div class="line">Load average         : 0.10, 0.04, 0.05</div><div class="line">OS                   : Ubuntu 14.04.2 LTS</div><div class="line">Arch                 : i686 (32 Bit)</div><div class="line">Kernel               : 2.6.32-openvz-042stab116.2-amd64</div><div class="line">----------------------------------------------------------------------</div><div class="line">I/O speed(1st run)   : 102 MB/s</div><div class="line">I/O speed(2nd run)   : 97.1 MB/s</div><div class="line">I/O speed(3rd run)   : 147 MB/s</div><div class="line">Average I/O speed    : 115.4 MB/s</div><div class="line">----------------------------------------------------------------------</div><div class="line">Node Name                       IPv4 address            Download Speed</div><div class="line">CacheFly                        205.234.175.175         14.7MB/s</div><div class="line">Linode, Tokyo, JP               106.187.96.148          6.15MB/s</div><div class="line">Linode, Singapore, SG           139.162.23.4            2.54MB/s</div><div class="line">Linode, London, UK              176.58.107.39           2.99MB/s</div><div class="line">Linode, Frankfurt, DE           139.162.130.8           2.96MB/s</div><div class="line">Linode, Fremont, CA             50.116.14.9             4.27MB/s</div><div class="line">Softlayer, Dallas, TX           173.192.68.18           11.7MB/s</div><div class="line">Softlayer, Seattle, WA          67.228.112.250          13.0MB/s</div><div class="line">Softlayer, Frankfurt, DE        159.122.69.4            1.89MB/s</div><div class="line">Softlayer, Singapore, SG        119.81.28.170           3.26MB/s</div><div class="line">Softlayer, HongKong, CN         119.81.130.170          3.72MB/s</div><div class="line">----------------------------------------------------------------------</div></pre></td></tr></table></figure>
<h4 id="DigitalOcean-Los-Angeles"><a href="#DigitalOcean-Los-Angeles" class="headerlink" title="DigitalOcean Los Angeles"></a>DigitalOcean Los Angeles</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">----------------------------------------------------------------------</div><div class="line">CPU model            : Intel(R) Xeon(R) CPU E5-2650L v3 @ 1.80GHz</div><div class="line">Number of cores      : 1</div><div class="line">CPU frequency        : 1799.998 MHz</div><div class="line">Total size of Disk   : 20.2 GB (1.0 GB Used)</div><div class="line">Total amount of Mem  : 488 MB (33 MB Used)</div><div class="line">Total amount of Swap : 0 MB (0 MB Used)</div><div class="line">System uptime        : 0 days, 0 hour 3 min</div><div class="line">Load average         : 0.16, 0.10, 0.03</div><div class="line">OS                   : Ubuntu 16.04.2 LTS</div><div class="line">Arch                 : x86_64 (64 Bit)</div><div class="line">Kernel               : 4.4.0-78-generic</div><div class="line">----------------------------------------------------------------------</div><div class="line">I/O speed(1st run)   : 581 MB/s</div><div class="line">I/O speed(2nd run)   : 711 MB/s</div><div class="line">I/O speed(3rd run)   : 777 MB/s</div><div class="line">Average I/O speed    : 689.7 MB/s</div><div class="line">----------------------------------------------------------------------</div><div class="line">Node Name                       IPv4 address            Download Speed</div><div class="line">CacheFly                        205.234.175.175         161MB/s</div><div class="line">Linode, Tokyo, JP               106.187.96.148          15.7MB/s</div><div class="line">Linode, Singapore, SG           139.162.23.4            5.96MB/s</div><div class="line">Linode, London, UK              176.58.107.39           5.71MB/s</div><div class="line">Linode, Frankfurt, DE           139.162.130.8           6.45MB/s</div><div class="line">Linode, Fremont, CA             50.116.14.9             30.4MB/s</div><div class="line">Softlayer, Dallas, TX           173.192.68.18           29.9MB/s</div><div class="line">Softlayer, Seattle, WA          67.228.112.250          57.7MB/s</div><div class="line">Softlayer, Frankfurt, DE        159.122.69.4            3.64MB/s</div><div class="line">Softlayer, Singapore, SG        119.81.28.170           7.59MB/s</div><div class="line">Softlayer, HongKong, CN         119.81.130.170          8.84MB/s</div><div class="line">----------------------------------------------------------------------</div></pre></td></tr></table></figure>
<h4 id="DigitalOcean-Sinapore-ip-adress-lokks-like-Russian"><a href="#DigitalOcean-Sinapore-ip-adress-lokks-like-Russian" class="headerlink" title="DigitalOcean Sinapore (ip adress lokks like Russian)"></a>DigitalOcean Sinapore (ip adress lokks like Russian)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">----------------------------------------------------------------------</div><div class="line">CPU model            : Intel(R) Xeon(R) CPU E5-2630L 0 @ 2.00GHz</div><div class="line">Number of cores      : 1</div><div class="line">CPU frequency        : 1999.999 MHz</div><div class="line">Total size of Disk   : 20.2 GB (1.0 GB Used)</div><div class="line">Total amount of Mem  : 488 MB (36 MB Used)</div><div class="line">Total amount of Swap : 0 MB (0 MB Used)</div><div class="line">System uptime        : 0 days, 0 hour 2 min</div><div class="line">Load average         : 0.17, 0.20, 0.09</div><div class="line">OS                   : Ubuntu 16.04.2 LTS</div><div class="line">Arch                 : x86_64 (64 Bit)</div><div class="line">Kernel               : 4.4.0-78-generic</div><div class="line">----------------------------------------------------------------------</div><div class="line">I/O speed(1st run)   : 662 MB/s</div><div class="line">I/O speed(2nd run)   : 741 MB/s</div><div class="line">I/O speed(3rd run)   : 728 MB/s</div><div class="line">Average I/O speed    : 710.3 MB/s</div><div class="line">----------------------------------------------------------------------</div><div class="line">Node Name                       IPv4 address            Download Speed</div><div class="line">CacheFly                        205.234.175.175         20.8MB/s</div><div class="line">Linode, Tokyo, JP               106.187.96.148          18.6MB/s</div><div class="line">Linode, Singapore, SG           139.162.23.4            83.8MB/s</div><div class="line">Linode, London, UK              176.58.107.39           5.71MB/s</div><div class="line">Linode, Frankfurt, DE           139.162.130.8           8.13MB/s</div><div class="line">Linode, Fremont, CA             50.116.14.9             2.82MB/s</div><div class="line">Softlayer, Dallas, TX           173.192.68.18           6.18MB/s</div><div class="line">Softlayer, Seattle, WA          67.228.112.250          8.47MB/s</div><div class="line">Softlayer, Frankfurt, DE        159.122.69.4            6.77MB/s</div><div class="line">Softlayer, Singapore, SG        119.81.28.170           97.9MB/s</div><div class="line">Softlayer, HongKong, CN         119.81.130.170          35.2MB/s</div><div class="line">----------------------------------------------------------------------</div></pre></td></tr></table></figure>
<p>查看硬盘存储空间:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">df -h //h的意思是human-readable</div><div class="line">du -sh //查看当前directory的大小</div><div class="line">du -h //查看当前目录下各个子目录分别的大小</div><div class="line">dh -h img// 查看img目录下文件及文件夹的大小</div><div class="line">dh -h img/1.jpg //查看指定文件的大小</div></pre></td></tr></table></figure></p>
<p>查看cpu信息</p>
<blockquote>
<p>cat /proc/cpuinfo</p>
</blockquote>
<p>查看内存</p>
<blockquote>
<p>free -m<br>free -h # human readable</p>
</blockquote>
<p>修改默认安全设置</p>
<blockquote>
<p>vi /etc/ssh/ssd_config</p>
</blockquote>
<p>添加或修改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Port 22 (ssh默认端口修改)</div><div class="line">PermitRootLogin without-Password no</div><div class="line">AllowUsers userName</div></pre></td></tr></table></figure>
<p>压缩文件命令<br>将/home/video/ 这个目录下所有文件和文件夹打包为当前目录下的video.zip</p>
<p>zip –q –r -v video.zip . #加上一个-v主要是为了能够实时查看输出</p>
<p>文件传输（linux -&gt;windows）： 一般使用putty ssh到Linux主机，想要把Linux上的文件弄到Windows中，需要使用pscp工具。下载好pscp.exe后，放到c:/windows/system32下面。打开cmd。输入命令<br>pscp -r root@202.123.123.123:”/root/fileonServer.mp4” d:/whateveriwantonmyPc.mp4  ，确认后输入root密码就好了。我主要是用来下载视频的。<br>有时候会出现Connection Refused Error。</p>
<blockquote>
<p>netstat -anp | grep sshd</p>
</blockquote>
<p>看下跑在哪个端口<br>然后</p>
<blockquote>
<p>pscp -P 12345-r root@202.123.123.123:”/root/fileonServer.mp4” d:/whateveriwantonmyPc.mp4  -p要大写</p>
</blockquote>
<h3 id="8-SS相关的命令"><a href="#8-SS相关的命令" class="headerlink" title="8. SS相关的命令"></a>8. SS相关的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">  1. 刚装好的ubuntu需要执行以下步骤</div><div class="line">  安装git &gt; apt-get install git</div><div class="line">  安装python &gt; apt-get install python-2.7</div><div class="line">  安装python-setuptools &gt; apt-get install python-setuptools</div><div class="line">  检查是否安装好： python --version</div><div class="line"></div><div class="line"></div><div class="line">  2. 下载shadowsocks源码编译</div><div class="line"> &gt; git clone https://github.com/shadowsocks/shadowsocks</div><div class="line">  # 记得切换到master分支</div><div class="line">  python setup.py build</div><div class="line">  python setup.py install</div><div class="line"></div><div class="line">  检查下版本 ssserver --version</div><div class="line"></div><div class="line">  3. 编辑配置文件</div><div class="line">  vim config.json</div><div class="line">  &#123;</div><div class="line">   &quot;server&quot;:&quot;my_server_ip&quot;,</div><div class="line">   &quot;server_port&quot;:8388,</div><div class="line">   &quot;local_address&quot;: &quot;127.0.0.1&quot;,</div><div class="line">   &quot;local_port&quot;:1080,</div><div class="line">   &quot;password&quot;:&quot;mypassword&quot;,</div><div class="line">   &quot;timeout&quot;:300,</div><div class="line">   &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">   &quot;fast_open&quot;: false</div><div class="line">&#125;</div><div class="line">  </div><div class="line">ssserver -c config.json -d start #启动完成</div><div class="line"></div><div class="line">检查下是否启动了</div><div class="line">ps -ef |grep sss</div><div class="line"></div><div class="line">ss 命令 </div><div class="line">ssserver -c /etc/shadowsocks/config.json # 前台运行</div><div class="line"></div><div class="line">- 后台运行和停止</div><div class="line">ssserver -c /etc/shadowsocks.json -d start</div><div class="line">ssserver -c /etc/shadowsocks.json -d stop</div><div class="line"></div><div class="line">- 加入开机启动</div><div class="line"></div><div class="line">在/etc/rc.local中加入</div><div class="line">sudo ssserver -c /etc/shadowsocks.json --user username -d start - 不要总是用root用户做事，adduser来做，给sudo权限即可</div><div class="line"></div><div class="line">[ShadowsocksR](https://github.com/breakwa11/shadowsocks-rss/wiki)启动后台运行命令</div><div class="line">&gt; python server.py -p 443 -k password -m aes-256-cfb -O auth_sha1_v4 -o http_simple -d start</div><div class="line"></div><div class="line">[net-speeder](https://zhgcao.github.io/2016/05/26/ubuntu-install-net-speeder/)</div><div class="line">venetX，OpenVZ架构</div><div class="line"></div><div class="line">cd net-speeder-master/</div><div class="line">sh build.sh -DCOOKED</div><div class="line"></div><div class="line">Xen，KVM，物理机</div><div class="line">cd net-speeder-master/</div><div class="line">sh build.sh</div><div class="line"></div><div class="line"></div><div class="line">加速所有ip协议数据</div><div class="line"></div><div class="line">&gt; ./net_speeder venet0 &quot;ip&quot;</div><div class="line"></div><div class="line">只加速指定端口，例如只加速TCP协议的 8989端口</div><div class="line">前提是切换到net-speeder的目录下</div><div class="line">&gt; ./net_speeder venet0:0 &quot;tcp src port 8989&quot;</div><div class="line"></div><div class="line">./net_speeder venet0 &quot;ip&quot;</div><div class="line"></div><div class="line">只加速指定端口，例如只加速TCP协议的 8989端口</div><div class="line">前提是切换到net-speeder的目录下</div><div class="line"> ./net_speeder venet0:0 &quot;tcp src port 8989&quot;</div><div class="line"></div><div class="line"></div><div class="line"> [KVM架构升级内核开启BBR](https://qiujunya.com/linodebbr.html)</div></pre></td></tr></table></figure>
<h3 id="9-网络监控"><a href="#9-网络监控" class="headerlink" title="9. 网络监控"></a>9. 网络监控</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">tcpdump -i &quot;venet0:0&quot;  //抓包的</div><div class="line">tcpdump -c 10 //count</div><div class="line">tcpdump -c -A  //Asicii码形式展示出来每个package</div><div class="line">tcpdump -c 5 -i wlo1 // 监听某一个网卡</div><div class="line">tcpdump -c 5 -i wlo1 port 22// 监听某一个网卡某一个端口</div><div class="line"></div><div class="line">tcpdump version 4.5.1</div><div class="line">libpcap version 1.5.3</div><div class="line">Usage: tcpdump [-aAbdDefhHIJKlLnNOpqRStuUvxX] [ -B size ] [ -c count ]</div><div class="line">                [ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ]</div><div class="line">                [ -i interface ] [ -j tstamptype ] [ -M secret ]</div><div class="line">                [ -P in|out|inout ]</div><div class="line">                [ -r file ] [ -s snaplen ] [ -T type ] [ -V file ] [ -w file ]</div><div class="line">                [ -W filecount ] [ -y datalinktype ] [ -z command ]</div><div class="line">                [ -Z user ] [ expression ]</div></pre></td></tr></table></figure>
<p>tcpdump结合wireshark可实现完整的网络抓包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">netstat</div><div class="line">netstat -i // 查看某个网络接口发出和接收了多少byte的数据</div><div class="line">netstat -ta //当前active的网络连接</div><div class="line">netstat -tan //以ip地址的方式展示出来</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ifconfig // 查看机器上的网卡</div><div class="line">en01 //Ethernet </div><div class="line">注意 RX bytes(接收到的数据)和TX bytes(发送出去的数据)后面的数字</div></pre></td></tr></table></figure>
<h3 id="10-查看进程"><a href="#10-查看进程" class="headerlink" title="10.查看进程"></a>10.查看进程</h3><p><a href="https://stackoverflow.com/questions/4797050/how-to-run-process-as-background-and-never-die">起一个进程，后台运行，关掉终端照样跑的那种</a></p>
<blockquote>
<p>nohup node server.js &gt; /dev/null 2&gt;&amp;1 &amp;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">top 动态显示</div><div class="line">PID：进程的ID[参数解释](http://www.cnblogs.com/gaojun/p/3406096.html)</div><div class="line">　　USER：进程所有者</div><div class="line">　　PR：进程的优先级别，越小越优先被执行</div><div class="line">　　NInice：值</div><div class="line">　　VIRT：进程占用的虚拟内存</div><div class="line">　　RES：进程占用的物理内存</div><div class="line">　　SHR：进程使用的共享内存</div><div class="line">　　S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数</div><div class="line">　　%CPU：进程占用CPU的使用率</div><div class="line">　　%MEM：进程使用的物理内存和总内存的百分比</div><div class="line">　　TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。</div><div class="line">　　COMMAND：进程启动命令名称</div><div class="line"></div><div class="line">ps a 显示现行终端机下的所有程序，包括其他用户的程序。</div><div class="line"></div><div class="line">**看下某个进程跑在哪个端口**</div><div class="line"> netstat -anp | grep sshd</div><div class="line"></div><div class="line">ps | grep 类似于 pgrep XXX //查找某个进程</div><div class="line"></div><div class="line">进程命令</div><div class="line">*实时监控，1秒刷新一次*</div><div class="line">watch -n 1 ps -aux --sort=-pmem,-pcpu</div><div class="line"></div><div class="line"></div><div class="line">nohup node server.js &gt; /dev/null 2&gt;&amp;1 &amp;</div><div class="line"></div><div class="line">1. nohup means: Do not terminate this process even when the stty is cut off.</div><div class="line">2. &gt; /dev/null means: stdout goes to /dev/null (which is a dummy device that does not record any output).</div><div class="line">3. 2&gt;&amp;1 means: stderr also goes to the stdout (which is already redirected to /dev/null). You may replace &amp;1 with a file path to keep a log of errors, e.g.: 2&gt;/tmp/myLog</div><div class="line">4. &amp; at the end means: run this command as a background task.</div></pre></td></tr></table></figure>
<h3 id="11-常用配置"><a href="#11-常用配置" class="headerlink" title="11 .常用配置"></a>11 .常用配置</h3><blockquote>
<p>查看登陆失败日志<br>grep “Failed password for root” /var/log/auth.log | awk ‘{print $11}’ | sort | uniq -c | sort -nr | more</p>
</blockquote>
<p>防范措施<br>修改登陆端口号<br>sudo vi /etc/ssh/sshd_config<br>Port 4484<br>PermitRootLogin no</p>
<p>修改完成后重启ssh<br>/etc/init.d/ssh restart</p>
<p>编码的修改<br>更改locale为utf-8(ubuntu)</p>
<blockquote>
<p>vi ~/.bashrc </p>
</blockquote>
<h1 id="add-these-lines"><a href="#add-these-lines" class="headerlink" title="add these lines"></a>add these lines</h1><p>export LC_ALL=en_US.UTF-8<br>export LANG=en_US.UTF-8<br>export LANGUAGE=en_US.UTF-8</p>
<p>sudo locale-gen “en_US.UTF-8”<br>sudo dpkg-reconfigure locales</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><img src="http://odzl05jxx.bkt.clouddn.com/fork_you_git.jpg" alt=""></li>
<li><a href="https://my.oschina.net/liting/blog/392051">文件大小查看命令</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_7479f7990100zwkp.html">文件压缩命令</a></li>
<li><a href="https://my.oschina.net/hunterli/blog/140783">硬件查询</a></li>
<li><a href="http://www.jianshu.com/p/3d80c7cb7b17">Python源码编译安装ss</a></li>
<li><a href="http://blog.csdn.net/program_thinker/article/details/45787395">源码编译安装ss</a></li>
<li><a href="https://askubuntu.com/questions/162391/how-do-i-fix-my-locale-issue">修改系统编码为utf-8</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些常用的linux基本命令,仅作为参考。&lt;/br&gt;&lt;br&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/849c18412f8e7a0b18df09f6f87e6516.jpg?imageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="置顶" scheme="https://haldir65.github.io/tags/%E7%BD%AE%E9%A1%B6/"/>
    
      <category term="linux" scheme="https://haldir65.github.io/tags/linux/"/>
    
      <category term="notes" scheme="https://haldir65.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>使用AnnotationProcessor自动生成代码</title>
    <link href="https://haldir65.github.io/2016/12/31/2016-12-31-Eliminating-BoilPlate-AnnotationProcessor/"/>
    <id>https://haldir65.github.io/2016/12/31/2016-12-31-Eliminating-BoilPlate-AnnotationProcessor/</id>
    <published>2016-12-31T14:42:15.000Z</published>
    <updated>2017-04-23T10:51:22.005Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://odzl05jxx.bkt.clouddn.com/apt_01.JPG?imageView2/2/w/500" alt=""><br>记得Romain Guy在一次DroidCon上曾说过:</p>
<blockquote>
<p>As I understand, modern java development are all about wrting annaotation Processors and not wrting code anymore…</p>
</blockquote>
<p>全场观众大笑。。。</p>
<p>这之后经常看到Jack Wharton在演讲中提到”My Hypothetical Annotation Processor…” ，后来才意识到像Retrofit，ButterKnife这些都是使用了注解的方式。<br> <a id="more"></a></p>
<h3 id="1-原理介绍"><a href="#1-原理介绍" class="headerlink" title="1. 原理介绍"></a>1. 原理介绍</h3><p>Annotation Processoring Tool是javac的一部分，它会在编译期生成新的.java文件（不是class文件）<br>定义一个Annotation的语法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)  <span class="comment">//这说明生成的注解能够放在class,interface,enum等类型上。不能放在method上</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)  <span class="comment">//指明在编译器有效</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Builder &#123;  <span class="comment">//@interface就像class,interface,enum一样</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-Annotation-Processor是生成新代码的实现类"><a href="#2-Annotation-Processor是生成新代码的实现类" class="headerlink" title="2.Annotation Processor是生成新代码的实现类"></a>2.Annotation Processor是生成新代码的实现类</h3><p>大致的实现例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PojoStringProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ANNOTATION = <span class="string">"@"</span> + PojoString.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CLASS_NAME = <span class="string">"StringUtil"</span>;</div><div class="line">    <span class="keyword">private</span> Messager messager; <span class="comment">//有点像Logger,用于输出信息</span></div><div class="line">    <span class="keyword">private</span> Filer filer <span class="comment">//可以获得Build Path，用于生成文件</span></div><div class="line"></div><div class="line">    <span class="comment">//public构造函数不写也会自动加上</span></div><div class="line"></div><div class="line">    <span class="comment">// init做一些初始化操作</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.init(processingEnv);</div><div class="line">        messager = processingEnv.getMessager();</div><div class="line">        <span class="keyword">this</span>.filer = processingEnv.getFiler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//apt在检查被注解的class时，会返回你需要的注解类型</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getSupportedAnnotationTypes</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> immutableSet.of(Builder.class.getCanonicalName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">true <span class="comment">//java7,java8 有点像android的targetSdk Version</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SourceVersion <span class="title">getSupportedSourceVersion</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SourceVersion.latestSupported();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//重点</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</div><div class="line">        ArrayList&lt;AnnotatedClass&gt; annotatedClasses = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Element element : roundEnv.getElementsAnnotatedWith(PojoString.class)) &#123;</div><div class="line">            TypeElement typeElement = (TypeElement) element;</div><div class="line">            <span class="keyword">if</span> (!isValidClass(typeElement)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//apt找到的所有被注解的class</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                annotatedClasses.add(buildAnnotatedClass(typeElement));</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                String message = String.format(<span class="string">"Couldn't process class %s: %s"</span>, typeElement,</div><div class="line">                        e.getMessage());</div><div class="line">                messager.printMessage(Diagnostic.Kind.ERROR, message, element);</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            generate(annotatedClasses);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            messager.printMessage(Diagnostic.Kind.ERROR, <span class="string">"Couldn't generate class"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>几个重要的方法解释下：</p>
<ul>
<li>roundEnv: apt分两步：1. apt发现被注解的代码，提供给我们写的processor，后者生成新的java代码(apt还未处理这部分新代码)。</li>
</ul>
<ol>
<li>apt发现新代码，提供给我们的Processor，不生成新代码。完成processing。（后面提供给编译）</li>
</ol>
<p>ServiceLoader Discovery File（这货在jar中）<br>//META-INFO/services/javax.annotations.processing.Processor文件中写入<br>com.example.annotation.BuilderProcessor// class包名<br>//这里声明所有的processor，这里可以include别的processor</p>
<p>语法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">app/build.gradle</div><div class="line"></div><div class="line">dependencies&#123;</div><div class="line">true<span class="function">compile <span class="title">project</span><span class="params">(<span class="string">': annotation'</span>)</span></div><div class="line"></div><div class="line">trueapt <span class="title">project</span> <span class="params">(<span class="string">':processor'</span>)</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//apt 表示processor中的方法不会带到distributed apk中,方法数不用担心了</span></div><div class="line"><span class="comment">//https://bitbucket.org/hvisser/android-apt</span></div><div class="line"><span class="comment">//https://github.com/tbroyer/gradle-apt-plugin</span></span></div></pre></td></tr></table></figure></p>
<p>继承AbstractProcessor，必须要有一个无参public构造函数</p>
<h3 id="3-生成新的java方法"><a href="#3-生成新的java方法" class="headerlink" title="3. 生成新的java方法"></a>3. 生成新的java方法</h3><p>首先添加依赖，square的javaPoet</p>
<p>假设想生成的代码是这样的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span></span>&#123;</div><div class="line">true</div><div class="line">true<span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">true<span class="function"><span class="keyword">public</span> UserBuilder <span class="title">username</span><span class="params">(String username)</span></span>&#123;</div><div class="line">truetrue<span class="keyword">this</span>.username = username;</div><div class="line">truetruereturen <span class="keyword">this</span>;</div><div class="line">true&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>生成变量<br><img src="http://odzl05jxx.bkt.clouddn.com/apt_field.JPG" alt=""></p>
</li>
<li><p>生成方法<br><img src="http://odzl05jxx.bkt.clouddn.com/apt_methods.JPG" alt=""></p>
</li>
<li><p>生成class:<br><img src="http://odzl05jxx.bkt.clouddn.com/apt_class.JPG" alt=""></p>
</li>
</ul>
<p>直接截图了</p>
<ul>
<li>主要步骤<br><img src="http://odzl05jxx.bkt.clouddn.com/apt_process_steps.JPG" alt=""></li>
</ul>
<p>meta_data<br><img src="http://odzl05jxx.bkt.clouddn.com/apt_process_meta_data.JPG" alt=""></p>
<ul>
<li>生成private field和public setter:<blockquote>
<p>FiledSpec username = FiledSpec.builder(String.class,”username”,Modifier.PRIVATE).build();<br><img src="http://odzl05jxx.bkt.clouddn.com/apt_process_fields.JPG" alt=""></p>
</blockquote>
</li>
</ul>
<ul>
<li><p>生成build method<br><img src="http://odzl05jxx.bkt.clouddn.com/apt_process_build_method.JPG" alt=""></p>
</li>
<li><p>生成builder<br><img src="http://odzl05jxx.bkt.clouddn.com/apt_process_create_builder.JPG" alt=""></p>
</li>
<li><p>写java文件：<br><img src="http://odzl05jxx.bkt.clouddn.com/apt_process_write_java_file.JPG" alt=""></p>
</li>
</ul>
<h3 id="4-注意的地方"><a href="#4-注意的地方" class="headerlink" title="4. 注意的地方"></a>4. 注意的地方</h3><p>dnot’t put annotation processors in a compile configuration, use the Android Apt plugin。 </p>
<p>if you using jack, jack has support for annotation processors.</p>
<p>if it’s only a java, could use the Gradle Apt Plugin</p>
<p>我们写的processor不会带到生成的apk中，但生成的代码会。这也正是想要的目的。</p>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li><a href="https://code.google.com/p/android/issues/detail?id=227612">android gradle plugin 2.3的兼容问题</a></li>
<li><a href="http://yeungeek.com/2016/04/27/Android%E5%85%AC%E5%85%B1%E6%8A%80%E6%9C%AF%E7%82%B9%E4%B9%8B%E4%BA%8C-Annotation-Processing-Tool">Android沉思录</a></li>
<li><a href="https://www.youtube.com/watch?v=NBkl_SIHUr8">Droidcon NYC 2016 - @Eliminate(“Boilerplate”)</a></li>
<li><a href="https://github.com/tbroyer/gradle-apt-plugin">Gradle Apt Plugin</a></li>
<li><a href="https://bitbucket.org/hvisser/android-apt">Andorid Apt Plugin</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/apt_01.JPG?imageView2/2/w/500&quot; alt=&quot;&quot;&gt;&lt;br&gt;记得Romain Guy在一次DroidCon上曾说过:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As I understand, modern java development are all about wrting annaotation Processors and not wrting code anymore…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全场观众大笑。。。&lt;/p&gt;
&lt;p&gt;这之后经常看到Jack Wharton在演讲中提到”My Hypothetical Annotation Processor…” ，后来才意识到像Retrofit，ButterKnife这些都是使用了注解的方式。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
      <category term="annotation" scheme="https://haldir65.github.io/tags/annotation/"/>
    
  </entry>
  
  <entry>
    <title>Python 3 学习记录</title>
    <link href="https://haldir65.github.io/2016/12/24/2016-12-24-Python-UnicodeEncodeError/"/>
    <id>https://haldir65.github.io/2016/12/24/2016-12-24-Python-UnicodeEncodeError/</id>
    <published>2016-12-24T14:06:37.000Z</published>
    <updated>2017-06-22T14:27:51.489Z</updated>
    
    <content type="html"><![CDATA[<h4 id="人生苦短，Python是岸"><a href="#人生苦短，Python是岸" class="headerlink" title="人生苦短，Python是岸"></a>人生苦短，Python是岸</h4><p><img src="http://odzl05jxx.bkt.clouddn.com/46ee54dd915d71da90e435703d4568fb.jpg?imageView2/2/w/600" alt="implementing dumb features"></p>
<a id="more"></a>
<h3 id="1-Python的一些缺点"><a href="#1-Python的一些缺点" class="headerlink" title="1. Python的一些缺点"></a>1. Python的一些缺点</h3><p>引用<a href="http://www.liaoxuefeng.com/">廖雪峰的官方网站</a>上的话，Python一个是慢，一个是代码不能加密</p>
<blockquote>
<p>第一个缺点就是运行速度慢，和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。</p>
<p>第二个缺点就是代码不能加密</p>
<p>GIL导致的多线程低效率</p>
</blockquote>
<p>以下内容出自<a href="http://cuiqingcai.com/3325.html">静觅 » Python爬虫进阶五之多线程的用法</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1、GIL是什么？</div><div class="line"></div><div class="line">GIL的全称是Global Interpreter Lock(全局解释器锁)，来源是python设计之初的考虑，为了数据安全所做的决定。</div><div class="line"></div><div class="line">2、每个CPU在同一时间只能执行一个线程（在单核CPU下的多线程其实都只是并发，不是并行，并发和并行从宏观上来讲都是同时处理多路请求的概念。但并发和并行又有区别，并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔内发生。）</div><div class="line"></div><div class="line">在Python多线程下，每个线程的执行方式：</div><div class="line"></div><div class="line">获取GIL</div><div class="line">执行代码直到sleep或者是python虚拟机将其挂起。</div><div class="line">释放GIL</div><div class="line">可见，某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。</div><div class="line"></div><div class="line">在Python2.x里，GIL的释放逻辑是当前线程遇见IO操作或者ticks计数达到100（ticks可以看作是Python自身的一个计数器，专门做用于GIL，每次释放后归零，这个计数可以通过 sys.setcheckinterval 来调整），进行释放。</div><div class="line"></div><div class="line">而每次释放GIL锁，线程进行锁竞争、切换线程，会消耗资源。并且由于GIL锁存在，python里一个进程永远只能同时执行一个线程(拿到GIL的线程才能执行)，这就是为什么在多核CPU上，python的多线程效率并不高。</div></pre></td></tr></table></figure></p>
<h3 id="2-安装package各种can’t-resolve-XXX"><a href="#2-安装package各种can’t-resolve-XXX" class="headerlink" title="2. 安装package各种can’t resolve XXX"></a>2. 安装package各种can’t resolve XXX</h3><p><a href="http://stackoverflow.com/questions/2792650/python3-error-import-error-no-module-name-urllib2">no module named urllib2</a></p>
<blockquote>
<p>The urllib2 module has been split across several modules in Python 3 named urllib.request and urllib.error. The 2to3 tool will automatically adapt imports when converting your sources to Python 3.</p>
</blockquote>
<p>This is what look like on py 2.7</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">req = urllib2.Request(url,headers=header)</div><div class="line">html = urllib2.urlopen(req)</div><div class="line">html_data = html.read</div><div class="line">html_path = etree.HTML(html_data)	</div><div class="line">```   </div><div class="line"></div><div class="line">on Python <span class="number">3.</span>X </div><div class="line">```python</div><div class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</div><div class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request</div><div class="line"></div><div class="line">req = Request(img_url, headers=headers)</div><div class="line">urlhtml = urlopen(req)</div></pre></td></tr></table></figure>
<h3 id="3-pip-install-XXXX"><a href="#3-pip-install-XXXX" class="headerlink" title="3. pip install XXXX"></a>3. pip install XXXX</h3><p>安装package的方式 pip install xxxx….</p>
<h4 id="if-not-working"><a href="#if-not-working" class="headerlink" title="if not working"></a>if not working</h4><p><img src="http://odzl05jxx.bkt.clouddn.com/Googling%20the%20Error%20Message.jpg?imageView2/2/w/500" alt=""></p>
<h3 id="4-List、tuple、dict、set以及基本的数据类型"><a href="#4-List、tuple、dict、set以及基本的数据类型" class="headerlink" title="4. List、tuple、dict、set以及基本的数据类型"></a>4. List、tuple、dict、set以及基本的数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">list   mylist = [<span class="string">'Tom'</span>,<span class="string">'Jerry'</span>,<span class="string">'Henry'</span>]</div><div class="line">       mylist[<span class="number">0</span>] = <span class="string">'Tom'</span></div><div class="line"></div><div class="line">tuple  mytuple = (<span class="string">'rock'</span>,<span class="string">'pop'</span>,<span class="string">'jazz'</span>)</div><div class="line">        mytuple[<span class="number">0</span>] = <span class="string">'rock'</span> </div><div class="line"></div><div class="line">tuple在初始化时就已经确定，不能修改</div><div class="line"></div><div class="line">dict: d=&#123;<span class="string">'name'</span>:<span class="string">'tom'</span>,<span class="string">'job'</span>:<span class="string">'doctor'</span>,<span class="string">'age'</span>,<span class="number">99</span>&#125;</div><div class="line">       d[<span class="string">'name'</span>] = <span class="string">'tom'</span></div><div class="line"></div><div class="line">set:  s = set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment"># 需要传入一个list作为参数</span></div><div class="line">   &gt;&gt; s</div><div class="line">   &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</div><div class="line">   set无序，不可有重复元素</div><div class="line">   set和dict的区别在于前者没有存储value，两者内部都不能有重复元素(key)</div></pre></td></tr></table></figure>
<p>tuple用的比较多，例如有多个返回值的函数，Python其实返回了一个Tuple。</p>
<h4 id="类名应该写成驼峰样式，变量名应该小写"><a href="#类名应该写成驼峰样式，变量名应该小写" class="headerlink" title="类名应该写成驼峰样式，变量名应该小写"></a>类名应该写成驼峰样式，变量名应该小写</h4><p>class name should be cammelCase, Arguments,variable name should be lowercase</p>
<p>循环<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">5</span>):</div><div class="line">        print(i)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result: <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> 左闭右开</div><div class="line"></div><div class="line">条件判断</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_end</span><span class="params">(L=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        L = []</div><div class="line">    L.append(<span class="string">'END'</span>)</div><div class="line">    <span class="keyword">return</span> L</div></pre></td></tr></table></figure></p>
<h5 id="函数参数相关，函数组合（一共五种）"><a href="#函数参数相关，函数组合（一共五种）" class="headerlink" title="函数参数相关，函数组合（一共五种）"></a>函数参数相关，函数组合（一共五种）</h5><p>位置参数，默认参数，可变参数，关键字参数，命名关键字参数</p>
<p>定义一个函数可以带上默认值，默认值是一个固定的对象，上次操作的值会保留到下一次调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sell</span><span class="params">(name,price,amount=<span class="number">1</span>)</span>:</span></div><div class="line">    print(price*amount)</div><div class="line"></div><div class="line">sell(<span class="string">'product'</span>,<span class="number">26</span>)</div><div class="line">sell(<span class="string">'product'</span>,<span class="number">26</span>,<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">26</span>    </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">52</span></div></pre></td></tr></table></figure></p>
<p>默认参数函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(x, n=<span class="number">2</span>)</span>:</span> <span class="comment">#这里的n=2就是默认参数，注意，默认参数应该是不可变对象,例如str、None这种</span></div><div class="line">    s = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        n = n - <span class="number">1</span></div><div class="line">        s = s * x</div><div class="line">    <span class="keyword">return</span> s</div><div class="line"></div><div class="line">power(<span class="number">5</span>) &gt;&gt; <span class="number">25</span></div><div class="line">power(<span class="number">5</span>,<span class="number">2</span>) &gt;&gt;&gt;<span class="number">25</span></div></pre></td></tr></table></figure></p>
<p>可变参数函数# 定义的时候在参数前面加一个*号就可以了，内部会默认组装成一个tuple<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(*numbers)</span>:</span> <span class="comment">#函数内部接收到的是一个tuple</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</div><div class="line">        sum = sum + n * n</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line"></div><div class="line">calc(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line"></div><div class="line">calc(<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>)    </div><div class="line"></div><div class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">cal(*nums)<span class="comment">#把tuple内的元素作为参数传进去</span></div></pre></td></tr></table></figure></p>
<p>关键字参数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, **kw)</span>:</span></div><div class="line">    print(<span class="string">'name:'</span>, name, <span class="string">'age:'</span>, age, <span class="string">'other:'</span>, kw)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>person(<span class="string">'Michael'</span>, <span class="number">30</span>)</div><div class="line">name: Michael age: <span class="number">30</span> other: &#123;&#125;</div><div class="line"></div><div class="line">内部自动将关键字参数转换成一个dict</div></pre></td></tr></table></figure></p>
<p>命名关键字函数<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def shoppping(name,time,*,price,count)# price可以有默认值</div><div class="line">    print(price*count)</div><div class="line"></div><div class="line">&gt;&gt; shopping(john,0325,price=39,count=5)</div><div class="line">&gt;&gt; 195</div></pre></td></tr></table></figure></p>
<h3 id="5-爬虫相关"><a href="#5-爬虫相关" class="headerlink" title="5. 爬虫相关"></a>5. 爬虫相关</h3><p>Chrome自带开发者工具，可以查看每一个request的header，cookies等信息。模拟浏览器行为比较有效。ctrl+shift+R神器</p>
<h4 id="5-1-Request-Urllib2"><a href="#5-1-Request-Urllib2" class="headerlink" title="5.1 Request, Urllib2"></a>5.1 Request, Urllib2</h4><h4 id="5-2-UnicodeEncodeError-‘ascii’-codec-can’t-encode-characters-in-position"><a href="#5-2-UnicodeEncodeError-‘ascii’-codec-can’t-encode-characters-in-position" class="headerlink" title="5.2 UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position"></a>5.2 UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"># how to invoke this error</div><div class="line">b = &quot;this is english within ascii range&quot;.encode(&apos;ascii&apos;)  # totally fine</div><div class="line"></div><div class="line">s = &quot;你好&quot;.encode(&apos;ascii&apos;) </div><div class="line"># this will raise an error ,UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 0-1: ordinal not in range(128)&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> print((b&quot;totally cool binary representation of english words within ascii range&quot;).decode(&apos;ascii&apos;))</div><div class="line"> print((b&quot;totally cool binary cause utf-8 include ascii&quot;).decode(&apos;utf-8&apos;))</div><div class="line"> # 完全正常</div><div class="line"></div><div class="line"></div><div class="line"> # eg.</div><div class="line">string = &quot;你好啊&quot;</div><div class="line">binary_string = b&apos;\xe4\xbd\xa0\xe5\xa5\xbd\xe5\x95\x8a&apos;</div><div class="line">binary_string_2_string = bstring.decode(&apos;utf-8&apos;)</div><div class="line"></div><div class="line"></div><div class="line">code :</div><div class="line">print(string)  </div><div class="line">print(string.encode(&apos;utf-8&apos;))</div><div class="line">print(bstring2string)</div><div class="line">print(bstring2string)</div><div class="line">    </div><div class="line">print(which_instance_is_this(string))</div><div class="line">print(which_instance_is_this(bstring))</div><div class="line">print(which_instance_is_this(bstring2string))</div><div class="line"></div><div class="line"></div><div class="line">outputs:</div><div class="line">你好啊</div><div class="line">b&apos;\xe4\xbd\xa0\xe5\xa5\xbd\xe5\x95\x8a&apos;</div><div class="line">你好啊 </div><div class="line">你好啊</div><div class="line"></div><div class="line">is str</div><div class="line">is byte </div><div class="line">is str</div><div class="line"></div><div class="line">**Since Python 3.0, the language features a str type that contain Unicode characters, meaning any string created using &quot;unicode rocks!&quot;, &apos;unicode rocks!&apos;, or the triple-quoted string syntax is stored as Unicode.**</div><div class="line"></div><div class="line">冒号里面的都是str，都是unicode的集合。生成unicode可以用chr(12345) ，该方法接受一个integer返回一个长度为1的Unicode String。</div><div class="line">反过来可以用ord(你) 生成“你”这个字在unicode中的编号</div><div class="line"></div><div class="line"></div><div class="line">print(chr(20320))   &gt;&gt;&gt;&gt; 你</div><div class="line">print(ord(&apos;你&apos;))    &gt;&gt;&gt;&gt; 20320 #这里只能用长度为1的string</div><div class="line"></div><div class="line">binary to string is called decode ,string to binary is encode</div><div class="line">bytes.decode(&apos;utf-8&apos;)   &lt;----&gt; str.encode(&apos;utf-8&apos;)</div><div class="line"></div><div class="line">回到UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position</div><div class="line">str.encode(&apos;ascii&apos;)，unicode字符超出了ascii的范围，无法decode成binary</div></pre></td></tr></table></figure>
<h3 id="6-一些细节"><a href="#6-一些细节" class="headerlink" title="6.一些细节"></a>6.一些细节</h3><p>文件读写的各种模式以及解码问题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(filepath, <span class="string">'r'</span>, encoding=<span class="string">"utf8"</span>) <span class="keyword">as</span> f:</div><div class="line">   f.write(<span class="string">'最好用utf8读和写文件'</span>)</div><div class="line">   <span class="comment">#已经自动做好close文件的工作</span></div></pre></td></tr></table></figure></p>
<p> how to upgrade installed packages?</p>
<blockquote>
<p>pip install –upgrade setuptools</p>
</blockquote>
<!-- install mongoDb(better performance than sql) -->
<!-- install pip -->
<p>grep log in command console<br>basic grammars<br>network, disk ,database, io , dic, list ,etc<br>class object orientated  </p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="http://www.liaoxuefeng.com/">廖雪峰的官方网站</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/20488077?columnSlug=kotandroid">use python and mongoDb as backend</a></li>
<li><a href="http://cuiqingcai.com/category/technique/python">静觅</a> </li>
<li><a href="https://stackoverflow.com/questions/9942594/unicodeencodeerror-ascii-codec-cant-encode-character-u-xa0-in-position-20?rq=1">unicodeencodeerror-ascii-codec-cant-encode-character</a></li>
<li><a href="https://www.youtube.com/watch?v=T_p22jMZSrk">Droidcon NYC 2016 - Decoding the Secrets of Binary Data</a></li>
<li><a href="https://www.youtube.com/watch?v=6uroXz5l7Gk">Jake Wharton and Jesse Wilson - Death, Taxes, and HTTP</a></li>
<li><a href="https://www.youtube.com/watch?v=WvyScM_S88c">Droidcon Montreal Jake Wharton - A Few Ok Libraries</a></li>
<li><a href="https://www.youtube.com/watch?v=yS0Nc-L1Uuk">Jesse Wilson - Coordinating Space and Time</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;人生苦短，Python是岸&quot;&gt;&lt;a href=&quot;#人生苦短，Python是岸&quot; class=&quot;headerlink&quot; title=&quot;人生苦短，Python是岸&quot;&gt;&lt;/a&gt;人生苦短，Python是岸&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://odzl05jxx.bkt.clouddn.com/46ee54dd915d71da90e435703d4568fb.jpg?imageView2/2/w/600&quot; alt=&quot;implementing dumb features&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>adb常用命令手册</title>
    <link href="https://haldir65.github.io/2016/12/10/2016-12-10-adb-command/"/>
    <id>https://haldir65.github.io/2016/12/10/2016-12-10-adb-command/</id>
    <published>2016-12-10T13:14:14.000Z</published>
    <updated>2017-06-18T02:32:52.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ADB-常用命令手册"><a href="#ADB-常用命令手册" class="headerlink" title="ADB 常用命令手册"></a>ADB 常用命令手册</h2><p>平时在android studio中用command的时候还有点不熟悉，找到一篇博客，记录下来，作为日常参考。希望后期能够有时间把Google IO上添加的一些命令加上来<br><a id="more"></a></p>
<p>获取序列号：</p>
<blockquote>
<p>adb get-serialno</p>
</blockquote>
<p>查看连接计算机的设备：</p>
<blockquote>
<p>adb devices</p>
</blockquote>
<p>重启机器：</p>
<blockquote>
<p>adb reboot</p>
</blockquote>
<p>重启到bootloader，即刷机模式：</p>
<blockquote>
<p>adb reboot bootloader</p>
</blockquote>
<p>重启到recovery，即恢复模式：</p>
<blockquote>
<p>adb reboot recovery</p>
</blockquote>
<p>查看log：</p>
<blockquote>
<p>adb logcat</p>
</blockquote>
<p>终止adb服务进程：</p>
<blockquote>
<p>adb kill-server</p>
</blockquote>
<p>重启adb服务进程：</p>
<blockquote>
<p>adb start-server</p>
</blockquote>
<p>获取机器MAC地址：</p>
<blockquote>
<p>adb shell  cat /sys/class/net/wlan0/address</p>
</blockquote>
<p>获取CPU序列号：</p>
<blockquote>
<p>adb shell cat /proc/cpuinfo</p>
</blockquote>
<p>安装APK：</p>
<blockquote>
<p>adb install <apkfile> //比如：adb install baidu.apk</p>
</blockquote>
<p>保留数据和缓存文件，重新安装apk：</p>
<blockquote>
<p>adb install -r <apkfile> //比如：adb install -r baidu.apk</p>
</blockquote>
<p>安装apk到sd卡：</p>
<blockquote>
<p>adb install -s <apkfile> // 比如：adb install -s baidu.apk</p>
</blockquote>
<p>卸载APK：</p>
<blockquote>
<p>adb uninstall <package> //比如：adb uninstall com.baidu.search</p>
</blockquote>
<p>卸载app但保留数据和缓存文件：</p>
<blockquote>
<p>adb uninstall -k <package> //比如：adb uninstall -k com.baidu.search</p>
</blockquote>
<p>启动应用：</p>
<blockquote>
<p>adb shell am start -n <package_name>/.<activity_class_name></p>
</blockquote>
<p>查看设备cpu和内存占用情况：</p>
<blockquote>
<p>adb shell top</p>
</blockquote>
<p>查看占用内存前6的app：</p>
<blockquote>
<p>adb shell top -m 6</p>
</blockquote>
<p>刷新一次内存信息，然后返回：</p>
<blockquote>
<p>adb shell top -n 1</p>
</blockquote>
<p>查询各进程内存使用情况：</p>
<blockquote>
<p>adb shell procrank</p>
</blockquote>
<p>杀死一个进程：</p>
<blockquote>
<p>adb shell kill [pid]</p>
</blockquote>
<p>查看进程列表：</p>
<blockquote>
<p>adb shell ps</p>
</blockquote>
<p>查看指定进程状态：</p>
<blockquote>
<p>adb shell ps -x [PID]</p>
</blockquote>
<p>查看后台services信息：</p>
<blockquote>
<p>adb shell service list</p>
</blockquote>
<p>查看当前内存占用：</p>
<blockquote>
<p>adb shell cat /proc/meminfo</p>
</blockquote>
<p>查看IO内存分区：</p>
<blockquote>
<p>adb shell cat /proc/iomem</p>
</blockquote>
<p>将system分区重新挂载为可读写分区：</p>
<blockquote>
<p>adb remount</p>
</blockquote>
<p>从本地复制文件到设备：</p>
<blockquote>
<p>adb push <local> <remote></p>
</blockquote>
<p>从设备复制文件到本地：</p>
<blockquote>
<p>adb pull <remote>  <local></p>
</blockquote>
<p>列出目录下的文件和文件夹，等同于dos中的dir命令：</p>
<blockquote>
<p>adb shell ls</p>
</blockquote>
<p>进入文件夹，等同于dos中的cd 命令：</p>
<blockquote>
<p>adb shell cd <folder></p>
</blockquote>
<p>重命名文件：</p>
<blockquote>
<p>adb shell rename path/oldfilename path/newfilename</p>
</blockquote>
<p>删除system/avi.apk：</p>
<blockquote>
<p>adb shell rm /system/avi.apk</p>
</blockquote>
<p>删除文件夹及其下面所有文件：</p>
<blockquote>
<p>adb shell rm -r <folder></p>
</blockquote>
<p>移动文件：</p>
<blockquote>
<p>adb shell mv path/file newpath/file</p>
</blockquote>
<p>设置文件权限：</p>
<blockquote>
<p>adb shell chmod 777 /system/fonts/DroidSansFallback.ttf</p>
</blockquote>
<p>新建文件夹：</p>
<blockquote>
<p>adb shell mkdir path/foldelname</p>
</blockquote>
<p>查看文件内容：</p>
<blockquote>
<p>adb shell cat <file></p>
</blockquote>
<p>查看wifi密码：</p>
<blockquote>
<p>adb shell cat /data/misc/wifi/*.conf</p>
</blockquote>
<p>清除log缓存：</p>
<blockquote>
<p>adb logcat -c</p>
</blockquote>
<p>查看bug报告：</p>
<blockquote>
<p>adb bugreport</p>
</blockquote>
<p>获取设备名称：</p>
<blockquote>
<p>adb shell cat /system/build.prop</p>
</blockquote>
<p>查看ADB帮助：</p>
<blockquote>
<p>adb help</p>
</blockquote>
<p>跑monkey：</p>
<blockquote>
<p>adb shell monkey -v -p your.package.name 500</p>
</blockquote>
<p>录制视频</p>
<blockquote>
<p>adb shell screenrecord /sdcard/demo.mp4  生成的Demo.mp4文件在根目录下面，默认录制时长180s<br>按下ctrl+c 停止录制<br>注意，最好在开发者选项里面，把显示触摸操作打开，这样视频中能显示用户点击操作位置</p>
</blockquote>
<h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref:"></a>Ref:</h3><ul>
<li><a href="http://zmywly8866.github.io/2015/01/24/all-adb-command.html">张明云的博客</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ADB-常用命令手册&quot;&gt;&lt;a href=&quot;#ADB-常用命令手册&quot; class=&quot;headerlink&quot; title=&quot;ADB 常用命令手册&quot;&gt;&lt;/a&gt;ADB 常用命令手册&lt;/h2&gt;&lt;p&gt;平时在android studio中用command的时候还有点不熟悉，找到一篇博客，记录下来，作为日常参考。希望后期能够有时间把Google IO上添加的一些命令加上来&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
      <category term="adb" scheme="https://haldir65.github.io/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>wrap_content到底多大</title>
    <link href="https://haldir65.github.io/2016/11/27/2016-11-27-the-size-of-wrap-content/"/>
    <id>https://haldir65.github.io/2016/11/27/2016-11-27-the-size-of-wrap-content/</id>
    <published>2016-11-27T08:46:44.000Z</published>
    <updated>2017-04-23T10:50:55.838Z</updated>
    
    <content type="html"><![CDATA[<p>转眼就十一月了，java的分析越来越少，虽然常常在业务上碰到不少坑。。。</p>
<h4 id="问题的由来"><a href="#问题的由来" class="headerlink" title="问题的由来"></a>问题的由来</h4><p>这周碰到一个需要画时间轴样式的自定义View的需求，大概像这样(图片来自网络)：<br><img src="http://odzl05jxx.bkt.clouddn.com/timelineView.png" alt=""></p>
<p>要求，左侧的圆形节点可以自定义Drawable，右侧的文字高度随文字数量变化自适应。</p>
<p>想想也就是自定义ViewGroup的那一套老样子。抄起键盘就开始研(Copy)究(Paste)，写着写着发现不对劲，主要的问题包括: </p>
<blockquote>
<ol>
<li>在onMeasure里面拿到的height == 0 , 具体一点就是:<br>整个ViewGroup包含多个Item，每个Item包括左侧的自定义View(CustomView)，高度是wrap_content，右边的TextView高度是wrap_content(自适应嘛)。可是debug时发现左侧的自定义View拿到的高度是0，简直日了哈士奇了。随后拿着关键词去Google搜索，还是没有什么收获。</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);<span class="comment">// 这里是UNSPECIFIED, 常规概念里wrap_content对应的应该是AT_MOST</span></div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec); <span class="comment">// 居然等于0</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>回顾这个Item的实现，Item继承自RelativeLayout，左边的View是调用addView(view,RelativeLayout.Layoutparams)加进去的,params设置了一些rules，像是AlignParentLeft这种，记得给左边的View和右边的TextView都设置一个id就好。TextView也是这样addView进去的。后来查到了秋百万对于MeasureSpec的介绍，我想到RelativeLayout的onMeasure会调用两次，在第一次测量的时候，左边的View和右边的TextView都把高度设置为wrap_content了。要命的是这个Item本身添加到UI的方式也是类似的addView(view,RelativeLayout.Layoutparams)方式，这里的height也是wrap_content。即Item本身高度需要由其child决定，左边的child决定不了，只有右边的TextView才能决定。所以第一轮测量下来，左边的View的高度只能是0，右边的TextView高度倒是确定了。这时候Item本身的高度也就能确定了。在第二遍测量的时候，就能顺利拿到高度了。</p>
<blockquote>
<ol>
<li>左侧的每个节点上的drawable不画出来<br>后来查了下，原因在于我对传进来的drawable检查了大小，太大的话用一个ScaleDrawable转一下。但是，scaleDrawable需要调用setLevel方法才会draw，我这里偷懒直接设置为1了。</li>
</ol>
<ol>
<li>Item本身是继承自RelativeLayout，想要使onDraw方法被调用需要在构造函数里设置<br>setWillNotDraw(false)<br>这个boolean值默认是true，主要是顾及到性能的原因。</li>
</ol>
</blockquote>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li><a href="https://www.liaohuqiu.net/posts/how-does-android-caculate-the-size-of-child-view/">How Android caculates view size</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转眼就十一月了，java的分析越来越少，虽然常常在业务上碰到不少坑。。。&lt;/p&gt;
&lt;h4 id=&quot;问题的由来&quot;&gt;&lt;a href=&quot;#问题的由来&quot; class=&quot;headerlink&quot; title=&quot;问题的由来&quot;&gt;&lt;/a&gt;问题的由来&lt;/h4&gt;&lt;p&gt;这周碰到一个需要画时间轴样式
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="android" scheme="https://haldir65.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Windows10平台安装lxml记录</title>
    <link href="https://haldir65.github.io/2016/10/31/2016-10-31-install-lxml-on-windows/"/>
    <id>https://haldir65.github.io/2016/10/31/2016-10-31-install-lxml-on-windows/</id>
    <published>2016-10-31T07:49:38.000Z</published>
    <updated>2017-06-15T15:39:29.896Z</updated>
    
    <content type="html"><![CDATA[<p>前几天尝试使用一个简单的微博爬虫进行操作，导包的时候遇到lxml缺失的问题，找了好久最终在百度知道上找到个能用的，(⊙﹏⊙)b。</p>
<h3 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a>1. 环境</h3><ol>
<li>python2.7, win10 64位</li>
<li>pip 环境变量配置 <a id="more"></a></li>
</ol>
<h3 id="2-开始"><a href="#2-开始" class="headerlink" title="2. 开始"></a>2. 开始</h3><ol>
<li><p>cmd 命令行敲入</p>
<blockquote>
<p>pip install wheel</p>
</blockquote>
</li>
<li><p>准备lxml安装文件<br>下载<a href="https://pypi.python.org/pypi/lxml/3.4.2">地址</a><br>我的是win10 64位，选择 lxml-3.4.2-cp27-none-win_amd54.xhl</p>
</li>
<li><p>下载完成后放到 c:\python27\文件夹下</p>
</li>
<li><p>命令行敲入</p>
<blockquote>
<p>pip install c:\python27\lxml…(刚才的文件名)</p>
</blockquote>
</li>
<li><p>最后会提示</p>
<blockquote>
<p>successfully installeed lxml-3.4.2</p>
</blockquote>
</li>
</ol>
<p>这时候关闭pycharm project，重新打开就可以看到导入成功了。</p>
<h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><ul>
<li><a href="http://jingyan.baidu.com/article/cbcede07177b8702f40b4df9.html">百度有时候也是挺管用的</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天尝试使用一个简单的微博爬虫进行操作，导包的时候遇到lxml缺失的问题，找了好久最终在百度知道上找到个能用的，(⊙﹏⊙)b。&lt;/p&gt;
&lt;h3 id=&quot;1-环境&quot;&gt;&lt;a href=&quot;#1-环境&quot; class=&quot;headerlink&quot; title=&quot;1. 环境&quot;&gt;&lt;/a&gt;1. 环境&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;python2.7, win10 64位&lt;/li&gt;
&lt;li&gt;pip 环境变量配置
    
    </summary>
    
      <category term="blog" scheme="https://haldir65.github.io/categories/blog/"/>
    
    
      <category term="python" scheme="https://haldir65.github.io/tags/python/"/>
    
  </entry>
  
</feed>
