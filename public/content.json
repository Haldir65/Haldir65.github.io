[{"title":"jvm架构概述","date":"2017-05-24T14:48:58.000Z","path":"2017/05/24/2017-05-24-jvm-architecture/","text":"关于jvm运行的大致架构，最近找到一个比较合适的视频，记录要点如下 1.从MyApp.java文件开始大家都知道最开始学习Java的时候，要用javac 来编译MyApp.java来生成一个class文件。在命令行里，大致是这样的执行顺序:12javac MyApp.javajava MyApp 实际上后一句话就创建了一个jvm instance.2. 从class loader进入Execution Engine 再到Host Operating Systemjava MyApp会调用class loader，后者不仅要负责加载MyApp.class文件，还需要加载java API中的class文件（String,Object,Collection….）。加载的class文件（byte code）被传递给Execution Engine,后者则负责执行byte code（其实也是调用宿主操作系统的方法执行操作） 3. where did class loader load class into ?classloader将class 文件加载进内存中的一部分（Runtime data areas）。到此，jvm architecture的三个主要组件：class loader subsystem,Runtime data areas 以及execution Enigne的主要功能都说清楚了。所以，这篇文章主要就按照class loader subsystem -&gt; Runtime data areas -&gt; Execution Engine的顺序来讲。 4.从classloader开始执行（class loading subsystem）- load 将byte code 加载进内存，来源可以是.java文件，可以是.jar文件，甚至可以是network Socket（这要看具体class loader的implementation）。load阶段包含三种不同的class loader，这也是面试时的重点。 &gt; 1. Bootstrap class loader (jre文件夹中有一个rt.jar文件，里面装的就是java的internal class) // &gt; 2. extension class loader (jre/lib/ext) //负责加载这个文件夹中的class文件 &gt; 3. Application class loader (CLASSPATH, -cp)//加载CLASSPATH变量中描述的位置 - load完成后是link verify(检查是否是符合jvm标准的byte code) -&gt; prepare(为class中的static variable分配内存，variable被赋默认值) -&gt; Resolve(when all the symbolic reference inside currentclass are resolved，例如引用了其他的class，例如引用了常量池里面的东西，classDefNotFoundException也是在这个时候抛出的) 注意，以上步骤都是java specification所规定的，但不同的jvm实现可能有微小的差异 class loading subsystem的最后一步是initializeclass vars to initiazed Value in code(比如静态代码块就是在这时执行的) 5. Runtime data area五个部分的划分Runtime data area 即java virtural machine的内存，可以划分成五部分 //per jvm ,shared by all threads - Method Area - Heap // per thread - java stack - pc Registers - Native method stacks 1. Method Area(方法区，用于存储class的数据，static variable,byte code,class level constant pool都放在这里) ，Method Area也称为Perm gen space(永生代)，默认大小是64MB ，可以通过-XX:MaxPermSize 调节 。这里有可能抛出out of memory error。java8将method Area移除，改为 metaspace (就是将method area移到了Native Memory，这样就不会有限制了，也可以人为设置上限)2. Heap日常开发中new出来的东西都放在这里 -Xms , minimun size-Xmx , maximum size 3. Java Stackjava stacks contains stack frames of the current execution per thread.eg : method a -&gt; 调用 method b -&gt; 调用method c当前线程的方法栈中就会push三个stack frame(每个Frame对应一个方法的执行环境)stack Frame包含当前方法中的变量，以及返回值，etc这里定义了stackoverFlowError 4. pc Registers这里面装的是程序计数器，后者是指向下一个将要被执行的指令的指针（每条线程都有）。 5. Native method stacksNative method stacks 是由java stack中的方法调用native方法创建的，例如windows上的dll库 6. Execution Engine的任务 - Interpreter 将byte code 翻译成机器指令并执行(根据指令去调用Native方法，在windows上jre/bin/文件夹中一大堆的dll就是windows平台提供的Native库，在linux上是.so文件) - JIT Compiler just in time compiler（如果有某项byte code instruction被多次调用，这些byte code不会每次都被inteprete，JIT will hold on to that system level target machine code for future usage,which is fast） - Hotspot profiler(it helps the JIT Compiler analysise the frequently used byte codess) - GC (a lengthy talk) 调用Native Method Interface(JNI) -&gt; Native method libraries（.dll,.so etc） 参考JVM ( java virtual machine) architecture - tutorial","tags":[{"name":"jvm","slug":"jvm","permalink":"https://haldir65.github.io/tags/jvm/"}]},{"title":"VPS下载Youtube视频并同步到本地","date":"2017-05-07T08:48:01.000Z","path":"2017/05/07/2017-05-07-download-video-from-vps/","text":"几天前花几块钱买了个新的vps，试了下，速度不错。后来看到网上有关于如何使用vps下载视频并拖到Windows的，试了一下，确实酸爽。 1. youtube下载视频到vps的硬盘上首先是安装一些必要的环境，我安装的系统是Ubuntu 14.0.4 ，这个版本默认的python是2.7。配置好pip,python等环境后，首先安装youtube-dl,基本上就是两行命令搞定的事情，参考官网123sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dlsudo chmod a+rx /usr/local/bin/youtube-dl 为了方便管理，首先在/根目录下面创建一个文件夹并切换到该目录下 mkdir youtube 以一个普通的视频链接为例直接使用 youtube-dl https://www.youtube.com/watch?v=7PtDrv5AUmA 就能自动选择合适的格式，下载到当前目录。比较好的一点是，由于vps在美国，下载速度非常快，维持在20MB/ms的样子。下载好的文件会放在当前目录下，后面使用pscp工具从vps拖下来就好了，不过我实践下来，这一步往往是最慢的。关键要看vps到你的ip的速度。有些时候还会突然断掉，所以很麻烦。这个看后面能不能搞定百度云盘中转。还有一个要注意的，生成的文件名是随机的，比如 -yj74P_BY1zI.mp4 由于前面带了一个横杠，很多命令是不认这种名字的，需要手动重命名一下 mv -yj74P_BY1zI.mp4 porn.videomv ./-yj74P_BY1zI.mp4 porn.video #. 表示当前目录 有时候下载的文件带有空格，有时候带有中文，用单引号包起来就好了。 youtube-dl还有一些命令行参数可以设置 youtube-dl –all-formats https://www.youtube.com/watch?v=7PtDrv5AUmA 这样会列出所有的可供下载的分辨率选项，每个选项前面带有一个序号，选择特定分辨率的选项下载只需要 youtube-dl -f 13 https://www.youtube.com/watch?v=7PtDrv5AUmA 2.从vps的硬盘上把下载好的视频拖下来VPS下载视频的速度很快，但从vps到国内的速度就很慢了。目前可能的方案有从百度网盘或dropBox中转，测试了一下百度网盘的方案bypy，vps上传到网盘速度太慢，shell出现假死，据说是百度方面限速的原因，所以这条路基本也是堵上了的。 3.后话you-get也是基于python3的下载工具，使用简单。在windows上安装还有点麻烦，在ubuntu上只需 pip3 install you-get 就安装好了使用方式更简单 &gt; you-get “url” 参考百度云盘同步的方法讨论","tags":[{"name":"linux","slug":"linux","permalink":"https://haldir65.github.io/tags/linux/"}]},{"title":"Python localHost部署命令","date":"2017-05-01T00:57:27.000Z","path":"2017/05/01/2017-05-01-python-server-test/","text":"一行命令即可 python -m http.server 8000 –bind 127.0.0.1 打开浏览器，输入127.0.0.1 ， 即可浏览当前目录下的文件，以GET的方式进行，命令行窗口会出现浏览记录。 据说SimpleHttpServer也可以，1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/python# -*- coding: UTF-8 -*-import sysfrom http.server import SimpleHTTPRequestHandlerfrom http.server import BaseHTTPRequestHandler, HTTPServerdef test(HandlerClass=SimpleHTTPRequestHandler, ServerClass=HTTPServer): protocol = \"HTTP/1.0\" host = '' port = 8000 if len(sys.argv) &gt; 1: arg = sys.argv[1] if ':' in arg: host, port = arg.split(':') port = int(port) else: try: port = int(sys.argv[1]) except: host = sys.argv[1] server_address = (host, port) HandlerClass.protocol_version = protocol httpd = ServerClass(server_address, HandlerClass) sa = httpd.socket.getsockname() print(\"Serving HTTP on\", sa[0], \"port\", sa[1], \"...\") httpd.serve_forever()if __name__ == \"__main__\": test()","tags":[]},{"title":"java线程池的实现原理","date":"2017-04-30T11:17:45.000Z","path":"2017/04/30/2017-04-30-concurrency-and-beyond/","text":"原本只打算写一点关于线程池的实现原理，后来发现坑越挖越大。不得不写到一半停下来，所以，这算是一篇不那么完善的关于原理的解析吧。 线程池的常规使用方式通常说的线程池对外表现为具有一系列操作功能的接口，Executor提供了execute一个runnable的功能，而其子类ExecutorService则对外提供了更多的实用功能，所以平时用的都是ExecutorService的实现类。12345678910111213141516171819202122232425262728public interface Executor &#123; /** * Executes the given command at some time in the future. The command * may execute in a new thread, in a pooled thread, or in the calling * thread, at the discretion of the &#123;@code Executor&#125; implementation. * * @param command the runnable task * @throws RejectedExecutionException if this task cannot be * accepted for execution * @throws NullPointerException if command is null */ void execute(Runnable command);&#125;public interface ExecutorService extends Executor&#123;true&#125;public abstract class AbstractExecutorService implements ExecutorService &#123;true&#125;public class ThreadPoolExecutor extends AbstractExecutorService &#123;true&#125; 更具体一点来说，java.util.concurrent.ThreadPoolExecutor这个类提供了上述接口的具体实现，同时对外提供了一些hook(beforeExecute、afterExecute等)，当然开发者也可以继承这个方法，实现更多自定义功能。它的构造函数如下：12345678public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue) &#123; this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, Executors.defaultThreadFactory(), defaultHandler); &#125; 但实际上，java不建议这样直接弄一个线程池出来，而是使用java.util.concurrent.Executors中的一些现成的工厂方法来创建一个线程池实例，具体的方法名很好理解，newFixedThreadPool，newSingleThreadExecutor，newCachedThreadPool等等。关于线程池构造函数各个参数的意义以及Executors提供的各种线程方法的适用场合，网上有很多详尽的文章。 12345678910Thread有这些状态 */ public enum State &#123; NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED; &#125; 这里针对execute方法具体的实现来展开，即，如何做到自动扩容，如何做到线程缓存，如何实现终止，以及资源同步问题。1234567891011121314151617181920212223242526272829303132333435363738394041424344public void execute(Runnable command) &#123; if (command == null) throw new NullPointerException(); /* * Proceed in 3 steps: * * 1. If fewer than corePoolSize threads are running, try to * start a new thread with the given command as its first * task. The call to addWorker atomically checks runState and * workerCount, and so prevents false alarms that would add * threads when it shouldn't, by returning false. * * 2. If a task can be successfully queued, then we still need * to double-check whether we should have added a thread * (because existing ones died since last checking，上一次检查之后可能有线程挂掉了) or that * the pool shut down since entry into this method. So we * recheck state and if necessary roll back the enqueuing if * stopped, or start a new thread if there are none. * * 3. If we cannot queue task, then we try to add a new * thread. If it fails, we know we are shut down or saturated * and so reject the task. */ int c = ctl.get(); if (workerCountOf(c) &lt; corePoolSize) &#123; // // Core pool size is the minimum number of workers to keep alive (and not allow to time out etc) unless allowCoreThreadTimeOut is set, in which case the minimum is zero. if (addWorker(command, true))//true表示创建新的Worker时的上限是coolPoolSize,false表示上限是maximunPoolSize 一般前者都小于等于后者，成功创建新的Worker并执行任务的话,直接在这里就return掉了 return; c = ctl.get(); //当前pool的state,ctl是一个AtomicInteger &#125; if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;//addworker就是创建一个新的Worker并立即执行command，没能成功就得暂时放进queue了。offer就是往这里面加一个runnable int recheck = ctl.get();//recheck的原因源码中也说明了 //走到这一步，说明已经成功加入到队列中了。 if (! isRunning(recheck) &amp;&amp; remove(command)) reject(command);//pool随时可能会被关掉 else if (workerCountOf(recheck) == 0) addWorker(null, false); &#125; else if (!addWorker(command, false)) reject(command); &#125; 来看addWorker的实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657private boolean addWorker(Runnable firstTask, boolean core) &#123; retry: 、、、省略代码 try &#123; w = new Worker(firstTask); //每一个不为null的command都会创建一个新的worker final Thread t = w.thread; if (t != null) &#123; final ReentrantLock mainLock = this.mainLock; mainLock.lock();//加锁 try &#123; workers.add(w); //workers就是一个普通的HashSet,同步的问题通过ReentrantLock解决 &#125; &#125; finally &#123; mainLock.unlock(); &#125; if (workerAdded) &#123; t.start(); //这里就是真正执行command的方法了 workerStarted = true; &#125; &#125; &#125; return workerStarted; //这里可以看出来,addWorker返回值表示这个command有没有被执行 &#125; final void runWorker(Worker w) &#123; //每一条线程运行起来的时候都会走这个方法 try &#123; while (task != null || (task = getTask()) != null) &#123; w.lock();//task可能是第一个runnable，也可能是从queue中取出来的 //getTask方法就是不断的从队列中获取任务。注意之前addTask的方法入参说明,command是该worker执行的第一个任务。也就是说，一个worker之后还有可能从queue中获取新的任务。线程能够一直有任务执行，就不会进入死亡状态(Thread有几个状态) try &#123; beforeExecute(wt, task);//钩子 Throwable thrown = null; try &#123; task.run(); &#125; catch (RuntimeException x) &#123; thrown = x; throw x; &#125; catch (Error x) &#123; thrown = x; throw x; &#125; catch (Throwable x) &#123; thrown = x; throw new Error(x); &#125; finally &#123; afterExecute(task, thrown);//钩子 &#125; &#125; finally &#123; task = null; w.completedTasks++; w.unlock(); &#125; &#125; completedAbruptly = false; &#125; finally &#123; processWorkerExit(w, completedAbruptly); &#125; &#125; addWorker会创建一个新的Worker(线程)，并将command作为这个线程要执行的第一个任务，而Worker的run方法是线程跑起来执行的方法。至于如何实现从queue中获取任务交给线程去完成，看getTask方法12345678910111213141516private Runnable getTask() &#123; boolean timedOut = false; // Did the last poll() time out? for (;;) &#123; //轮询 try &#123; Runnable r = timed ? workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) : //从queue中提取任务 workQueue.take(); if (r != null) return r; &#125; catch (InterruptedException retry) &#123; timedOut = false; &#125; &#125; &#125; 整体来说，executor.execute方法就是通过new出Woker，而Worker则会在run方法中不停的从queue中获取新的任务，从而确保线程不会挂掉。也就是所谓的线程池缓存了线程，避免了频繁创建线程的开销。 Worker这个类继承自AbstractQueuedSynchronizerAbstractQueuedSynchronizer即大名鼎鼎的AQS。 Reetranlock的使用这其中有注意上面使用了重入锁 ReentrantLock，后来发现ThreadPoolExecutor中多处使用了这个类。 Future,Callable,FutureTask等等 最后，今天下午看到很多jdk里源码的注释，作者都是 Doug Lea ，实在佩服前人的功力。之前也看过一些自定义线程池的实现，现在看起来确实差很多，不要重复造轮子不意味着不需要去了解轮子是怎么造出来的。 Reference Java 多线程：线程池实现原理","tags":[]},{"title":"Rxjava2 的一些点","date":"2017-04-23T05:56:07.000Z","path":"2017/04/23/2017-04-23-rxjava2-for-android/","text":"本文多数内容来自Jake Wharton的演讲，配合一些个人的感受，作为今后使用Rxjava2的一些参考。 1. Why Reactive?最早使用Rxjava的初衷在于方便地实现线程切换，使用链式语法轻松地将异步任务分发到子线程并省去了主动实现回调的麻烦。我们生活在一个事件异步分发的环境中，网络，文件、甚至用户输入本身也是异步事件，除此之外，安卓系统本身的许多操作也是异步的，例如startActivity，Fragment的transaction，这就要求开发者不得不考虑各种事件状态，并在各种事件之间进行协调。Rxjava将各种事件的处理、完成以及异常在事件定义之初定义好处理方式。事件的开始，进行，完成以及异常，都被抽象到Observable的载体中。值得注意的是，这种链式调用很像Builder Pattern，但本质上每一步都生成了一个新的对象。这个在Rxjava的Wiki上有所说明，即每一步都生成一个新的immutable objec（GC表示压力大）。 2. 数据源Stream基本包括这三部分123source of datalistener of datamethods for modifying data 2.1 数据源的种类Observable 和Flowable，区别在于后者支持BackPressure，后者不支持BackPressure.接收Observable和Flowable的类型分别为Observer和Subscriber 1234567891011121314151617181920212223interface Observer&lt;T&gt;&#123;truevoid onNext(T t);truevoid onComplete();truevoid onError(Throwable t);truevoid onSubscribe(Disposable d);&#125;interface Disposable&#123;truevoid dispose();&#125;interface Subscriber&lt;T&gt;&#123;truevoid onNext(T t)truevoid onComplete();;truevoid onError(Throwable t);truevoid onSubscribe(Subscription s);&#125;interface Subscription&#123;truevoid cancel() //用于取消订阅，释放资源truevoid request(long r) //请求更多的数据，即BackPressure开始体现的地方&#125; 两者的区别在于最后一个方法，以Disposable为例，当你开始subscribe一个数据源的时，就类似于创建了一个Resurce，而Resource是往往需要在用完之后及时释放。无论是Observable还是Flowable,这个onSubscribe方法会在订阅后立即被调用，这个方法里的Disposable可以保留下来，在必要时候用于释放资源。如Activity的onDestroy中cancel network request. 2.2 数据源的对应类 Single(订阅一个Single，要么获得仅一个返回值，要么出现异常返回Error) 1public abstract class Single&lt;T&gt; implements SingleSource&lt;T&gt; &#123;&#125; Completeable(订阅一个completeable，要么成功，不返回值，要么出现异常返回error，就像一个reactive runnale，一个可以执行的command，并不返回结果) 1public abstract class Completable implements CompletableSource &#123;&#125; 例如，异步写一个文件，要么成功，要么出现error，并不需要返回什么。123public void writeFile(Stirng data)&#123;&#125; // 就可以model成Completeable writeFile(Stirng data)&#123;&#125; Maybe(有可能返回值，有可能不返回，也有可能异常，即optional)1public abstract class Maybe&lt;T&gt; implements MaybeSource&lt;T&gt; &#123;&#125; 以上三种数据源都有static方法生成：例如 比较推荐的方法有两种 1. fromCallable1234567Observable.fromCallable(new Callable&lt;String&gt;()&#123;true@override truepublic String call() throw Exception&#123;truereturn getName() // 之前是synchronious的get，现在这一步可以asynchnous执行,比如放一个OkHttpClient.newCall(request).execute(); //因为是异步执行的，也不存在性能问题&#125;&#125;) 上面这段中的call方法会在被订阅后执行，成功的话会走到observer的onNext，失败的话会走到onError。fromCallable可用于各种数据源，包括Flowable12345Flowable.fromCallable(() -&gt; \"Hello Flowable\");Observable.fromCallable(() -&gt; \"Hello Observable\");Maybe.fromCallable(() -&gt; \"Hello Maybe\");Single.fromCallable(() -&gt; \"Hello Single\");Completeable.fromCallable(() -&gt; \"Hello Completeable\"); fromCallable are for modeling synchronous sourse of a single source of data. 很多需要返回值的方法都可以抽象成这种方法。Maybe和Completeable还有两个方法,用于表示不返回数据的方法12345Maybe.fromAction(() -&gt; \"Hey jude\")Maybe.fromRunnable(() -&gt; \"ignore\")Completeable.fromAction(() -&gt; \"Hey jude\")Completeable.fromRunnable(() -&gt; \"ignore\") 2. create(Rxjava 1中不推荐使用该方法，Rxjava2中建议使用)12345678Observable.create(new ObservableOnSubscribe&lt;String&gt;())&#123;true@overridetruepublic void subscribe (ObservableEmitter&lt;String&gt; e) throws Exception&#123; //subscribe get called whenever there's a new subscriber, emitter is the person that's listening.true//truee.onNext(\"Hello\");truee.onComplete();true&#125;&#125; //一个Observable可以有多个subscriber。一个被观察者可以有多个观察者，被观察者的onNext调用，观察者的onNext也会被调用 lambda更简洁123456789101112131415161718192021222324252627282930313233343536373839404142434445Observable.create(e -&gt;&#123;truee.onNext(\"Hello\");truee.onNext(\"Hello\");truee.onComplete();&#125;)Okhttp的异步网络请求也可以model成一种被观察的流Observable.create(e -&gt;&#123;trueCall call = client.newCall(request);truecall.enqueue(new Callback())&#123;truetrue@Overridetruetruepublic void onResponse(Response r) throws IOException&#123;truetruetruee.onNext(r.body().toString());truetruetruee.onComplete();truetrue&#125;truetrue@Overridetruetruepublic void onFailure(IOException e)&#123;truetruetruee.onError(e);truetrue&#125;true&#125;&#125;)//重点了来了， public interface ObservableEmitter&lt;T&gt; extends Emitter&lt;T&gt; &#123;true /** * Sets a Cancellable on this emitter; any previous Disposable * or Cancellation will be unsubscribed/cancelled. * @param c the cancellable resource, null is allowed */ void setCancellable(Cancellable c);&#125;// emitter可以设置cancel的动作Observable.create(e -&gt;&#123;truee.setCacelation(() -view.setOnClickListener(null));trueview.setOnClickListener(v -&gt; e.onNext());&#125;)// 点击按钮发送事件，取消订阅时避免leak View和fromCallable一样，create方法也适用于所有五种data source 3. 如何订阅（接收）这些数据3.1 observer和Subscriber接收Observable和Flowable的类型分别为Observer和Subscriber 1234567891011121314151617181920212223interface Observer&lt;T&gt;&#123;truevoid onNext(T t);truevoid onComplete();truevoid onError(Throwable t);truevoid onSubscribe(Disposable d);&#125;interface Disposable&#123;truevoid dispose();&#125;interface Subscriber&lt;T&gt;&#123;truevoid onNext(T t);truevoid onComplete();truevoid onError(Throwable t);truevoid onSubscribe(Subscription s);&#125;interface Subscription&#123;truevoid cancel(); //用于取消订阅，释放资源truevoid request(long r) ;//请求更多的数据，即BackPressure开始体现的地方&#125; 所以整体来看，数据的流向就这么两种，左边发送数据(可能只有一个，可能间歇性的，可能一直不停)，事件通过数据流传输到右边，右边根据协议作出相应(Reactive)Observable -&gt; subscribe -&gt; Observer Flowable -&gt; subscribe -&gt; Subscription 3.2 onSubscribe怎么用通常不直接用这两种base class，因为第四个方法不知道怎么用嘛。123456789101112131415161718192021222324252627282930313233343536Observable.just(\"Hello\").subscribe(new DisposableObserver&lt;String&gt;() &#123; @Override public void onNext(String value) &#123; &#125; @Override public void onError(Throwable e) &#123; &#125; @Override public void onComplete() &#123; &#125; &#125;); 可以持有DisposableObserver，在停止订阅的时候调用observer.dispose方法，切断流。 或者这样 Disposable disposable = Observable.just(\"Hello\").subscribeWith(new DisposableObserver&lt;String&gt;() &#123; @Override public void onNext(String value) &#123; &#125; @Override public void onError(Throwable e) &#123; &#125; @Override public void onComplete() &#123; &#125; &#125;); subscribeWith返回一个Disposable，subscribe是一个没有返回值的函数 偷懒一点的话，通常把这些返回的订阅加入到一个CompositeDisposable,在onDestroy的时候统一取消订阅即可 Observable、Single、Completeable、Maybe以及Flowable都支持subscribewith。 4. 数据源和接受者建立联系 Observable.subscribe或者Flowable.subscribe或者使用之前提到的sbscribeWith我尝试写了一个比较复杂的调用顺序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455Observable.fromCallable(new Callable&lt;List&lt;String&gt;&gt;() &#123; @Override public List&lt;String&gt; call() throws Exception &#123; LogUtil.p(\"call do on thread any\"); blockThread(2000); // block 2s return Arrays.asList(array); &#125; &#125;).subscribeOn(Schedulers.computation()) .observeOn(AndroidSchedulers.mainThread()) .doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123; @Override public void accept(Disposable disposable) throws Exception &#123; LogUtil.p(\"\"); &#125; &#125;).doOnComplete(new Action() &#123; @Override public void run() throws Exception &#123; LogUtil.p(\"\"); &#125; &#125;).doOnNext(new Consumer&lt;List&lt;String&gt;&gt;() &#123; @Override public void accept(List&lt;String&gt; strings) throws Exception &#123; LogUtil.p(\"\" + strings.get(0)); &#125; &#125;).doAfterNext(new Consumer&lt;List&lt;String&gt;&gt;() &#123; @Override public void accept(List&lt;String&gt; strings) throws Exception &#123; LogUtil.p(\"\"+strings.get(0)); &#125; &#125;).subscribe(new Observer&lt;List&lt;String&gt;&gt;() &#123; @Override public void onSubscribe(Disposable d) &#123; LogUtil.p(\"onSubscribe \" + d.isDisposed()); &#125; @Override public void onNext(List&lt;String&gt; value) &#123; LogUtil.p(\" get Response \" + value.size()); value.set(0, \"change first element!\"); &#125; @Override public void onError(Throwable e) &#123; &#125; @Override public void onComplete() &#123; LogUtil.p(\"\"); &#125; &#125;);执行顺序：（括号内数字表示线程id） doOnsubscribe(1) -&gt; onSubscribe(1) -&gt; call(276) -&gt;doOnNext(1)-&gt;onNext(1) -&gt; doAfterNext(1) -&gt;doOnComplete(1)-&gt;onComplete(1)所以基本上可以认为doOnXXX= doBeforeXXX,线程都是一样的。估计是为了打日志用的，或者说用于切片。像极了OkHttp的interecpter或是gradle的task。 5. Operator and Threading1234Observable&lt;String&gt; greeting = Observable.just(\"Hello\");Observable&lt;String&gt; yelling = greeting.map(s -&gt;s.toUppercase())Observable.subscribeOn(Schedulers.io()) // subscribeOn决定了task在哪条线程上运行，操作符的顺序很重要 流之间的转换 Observable -&gt; first() -&gt; singleObservable -&gt; firsetElement -&gt; MaybeObservable -&gt; ignoreElements() -&gt;Completable Flowable -&gt; first() -&gt; singleFlowable -&gt; firsetElement -&gt; MaybeFlowable -&gt; ignoreElements() -&gt;Completable 链式调用每一步都生成了新的object，Rxjava2和Rxjava1相比，对GC更加友好。quote:RxJava 2 is not something new. Reactive programming is not new by any stretch, but Android itself is a highly reactive world that we’ve been taught to model in a very imperative, stateful fashion.Reactive programming allow us to model it in the proper way: asynchronously. Embrace the asynchronicity of the sources, and instead of trying to manage all the state ourselves, compose them together such that our apps become truly reactive. Reference– GOTO 2016 • Exploring RxJava 2 for Android • Jake Wharton - YouTube","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"rxjava2","slug":"rxjava2","permalink":"https://haldir65.github.io/tags/rxjava2/"}]},{"title":"View的属性大全[转载]","date":"2017-04-03T03:38:10.000Z","path":"2017/04/03/2017-04-03-properties-of-view/","text":"转自Android属性大全android:alpha setAlpha(float) 属性说明: 视图透明度，值在0-1之间。0为完全透明，1为完全不透明。android:background setBackgroundResource(int) 属性说明: 视图背景android:clickable setClickable(boolean) 属性说明: 视图是否可点击android:contentDescription setContentDescription(CharSequence) 属性说明: 设置View的备注说明，作为一种辅助功能提供,为一些没有文字描述的View提供说明android:drawingCacheQuality setDrawingCacheQuality(int) 属性说明: \"设置绘图时半透明质量。有可以取以下3个值 auto——默认，由框架决定 high——高质量，使用较高的颜色深度，消耗更多的内存 low——低质量，使用较低的颜色深度，但是用更少的内存\"android:duplicateParentState 属性说明: 如果设置此属性，将直接从父容器中获取绘图状态（光标，按下等）android:fadeScrollbars setScrollbarFadingEnabled(boolean) 属性说明: 定义在ScrollBar没有使用时，是否褪色。android:fadingEdgeLength getVerticalFadingEdgeLength() 属性说明: 设置边框渐变的长度。android:filterTouchesWhenObscured setFilterTouchesWhenObscured(boolean) 属性说明: view所在窗口被其它可见窗口遮住时，是否过滤触摸事件。android:fitsSystemWindows setFitsSystemWindows(boolean) 属性说明: 设置布局调整时是否考虑系统窗口（如状态栏）android:focusable setFocusable(boolean) 属性说明: 设置是否获得焦点。若有requestFocus()被调用时，后者优先处理。注意在表单中想设置某一个如EditText获取焦点，光设置这个是不行的，需要将这个EditText前面的focusable都设置为false才行。在Touch模式下获取焦点需要设置focusableInTouchMode为true。android:focusableInTouchMode setFocusableInTouchMode(boolean) 属性说明: 设置在Touch模式下View是否能取得焦点。android:hapticFeedbackEnabled setHapticFeedbackEnabled(boolean) 属性说明: 是否启用触摸反馈，启用后就是在点击等操作时会有震动等反馈效果android:id setId(int) 属性说明: 给当前View设置一个在当前layout.xml中的唯一编号，可以通过调用View.findViewById() 或Activity.findViewById()根据这个编号查找到对应的View。不同的layout.xml之间定义相同的id不会冲突。android:importantForAccessibility setImportantForAccessibility(int) 属性说明: 设置可达性的重要性android:isScrollContainer setScrollContainer(boolean) 属性说明: 设置当前View为滚动容器。这里没有测试出效果来，ListView/ GridView/ ScrollView根本就不用设置这个属性，而EdidText设置android:scrollbars也能出滚动条android:keepScreenOn setKeepScreenOn(boolean) 属性说明: 视图在可见的情况下是否保持唤醒状态。android:layerType setLayerType(int,Paint) 属性说明: \"设置指定层的类型，可以取以下3个值： none——不指定 software——软件层。 hardware——硬件层。使用硬件加速。\"android:layoutDirection setLayoutDirection(int) 属性说明: 定义布局图纸的方向android:longClickable setLongClickable(boolean) 属性说明: 是否响应长点击事件android:minHeight setMinimumHeight(int) 属性说明: 设置视图最小高度android:minWidth setMinimumWidth(int) 属性说明: 设置视图最小宽度android:nextFocusDown setNextFocusDownId(int) 属性说明: 向下移动焦点时，下一个获取焦点的view的idandroid:nextFocusForward setNextFocusForwardId(int) 属性说明: 下一个获取焦点的view的idandroid:nextFocusLeft setNextFocusLeftId(int) 属性说明: 向左移动焦点时，下一个获取焦点的view的idandroid:nextFocusRight setNextFocusRightId(int) 属性说明: 向右移动焦点时，下一个获取焦点的view的idandroid:nextFocusUp setNextFocusUpId(int) 属性说明: 向上移动焦点时，下一个获取焦点的view的idandroid:onClick setOnClick()或 onClick(View view)属性说明: 点击时，要调用的方法的名称。android:padding setPaddingRelative(int,int,int,int) 属性说明: 设置上下左右的边距android:paddingBottom setPaddingRelative(int,int,int,int) 属性说明: 下边距android:paddingEnd setPaddingRelative(int,int,int,int) 属性说明: 与android:paddingRight相同android:paddingLeft setPadding(int,int,int,int) 属性说明: 左边距android:paddingRight setPadding(int,int,int,int) 属性说明: 右边距android:paddingStart setPaddingRelative(int,int,int,int) 属性说明: android:paddingLeft相同android:paddingTop setPaddingRelative(int,int,int,int) 属性说明: 上边距android:requiresFadingEdge setVerticalFadingEdgeEnabled(boolean) 属性说明: 定义滚动时边缘是否褪色android:rotation setRotation(float) 属性说明: 旋转度数android:rotationX setRotationX(float) 属性说明: 水平旋转度数android:rotationY setRotationY(float) 属性说明: 竖直旋转度数android:saveEnabled setSaveEnabled(boolean) 属性说明: 在配置改变等情况出现时是否保存view的状态数据。如果你的view有id，那默认系统就会帮你保存。android:scaleX setScaleX(float) 属性说明: 水平方向缩放比例android:scaleY setScaleY(float) 属性说明: 竖直方向缩放比例android:scrollX 属性说明: x方向的滚动偏移。即在水平方向滚动了多少距离android:scrollY 属性说明: y方向的滚动偏移。即在竖直方向滚动了多少距离android:scrollbarAlwaysDrawHorizontalTrack 属性说明: 是否总是绘制水平滚动条的滚动轨道android:scrollbarAlwaysDrawVerticalTrack 属性说明: 是否总是绘制竖直滚动条的滚动轨道android:scrollbarDefaultDelayBeforeFade setScrollBarDefaultDelayBeforeFade(int) 属性说明: 滚动条在n毫秒后开始淡出。android:scrollbarFadeDuration setScrollBarFadeDuration(int) 属性说明: 滚动条用多长时间淡出完毕。android:scrollbarSize setScrollBarSize(int) 属性说明: 设置滚动条的尺寸。垂直滚动条的宽度、水平滚动条的高度android:scrollbarStyle setScrollBarStyle(int) 属性说明: \"滚动条的风格。共4组值： insideOverlay——内贴图 insideInset——内插图 outsideOverlay——外贴图 outsideInset——外插图。 inside就是滚动条在绘制在padding以内；outside就是不需要绘制在padding内（即view的边界处）；Overlay是贴图，就是直接覆盖在内容的上方，这样内容可能会显示到滚动条下方去；Inset是插图，就是会在对应padding上加上滚动条的宽度，以不让内容显示到滚动条下面去。\"android:scrollbarThumbHorizontal 属性说明: 水平滚动块的drawable对象android:scrollbarThumbVertical 属性说明: 竖直滚动块的drawable对象android:scrollbarTrackHorizontal 属性说明: 水平滚动条滚动轨道的drawable对象android:scrollbarTrackVertical 属性说明: 竖直滚动条滚动轨道的drawable对象android:scrollbars 属性说明: \"设置可显示的滚动条。有3个取值: none——不显示滚动条 horizontal——显示水平滚动条 vertical——显示竖直滚动条\"android:soundEffectsEnabled setSoundEffectsEnabled(boolean) 属性说明: 点击或触摸该view时，是否需要有声音效果android:tag 属性说明: string标识。类似id，id是整数标识。android:textAlignment setTextAlignment(int) 属性说明: 设置文本的显示方式。android:textDirection setTextDirection(int) 属性说明: 设置文本的显示方向。android:transformPivotX setPivotX(float) 属性说明: 水平方向偏转量android:transformPivotY setPivotY(float) 属性说明: 竖直方向偏转量android:translationX setTranslationX(float) 属性说明: 水平方向的移动距离android:translationY setTranslationY(float) 属性说明: 竖直方向的移动距离android:visibility setVisibility(int) 属性说明: \"view的可见性。有3个取值： gone——不可见，同时不占用view的空间； invisible——不可见，但占用view的空间； visible——可见\"TextView属性说明下面对TextView的属性进行说明 android:autoLink setAutoLinkMask(int) 属性说明: 设置是否“当文本为URL链接/email/电话号码/map时，文本显示为可点击的链接”。可选值(none/web/email/phone/map/all)android:autoText setKeyListener(KeyListener) 属性说明: 如果设置，将自动执行输入值的拼写纠正。此处无效果，在显示输入法并输入的时候起作用。android:bufferType setText(CharSequence,TextView.BufferType) 属性说明: 指定getText()方式取得的文本类别。选项editable 类似于StringBuilder可追加字符，也就是说getText后可调用append方法设置文本内容。android:capitalize setKeyListener(KeyListener) 属性说明: 设置自动大写属性。比如设置为2，自动大写单词首字符；设置为1，自动大写每句话的首字母等等。android:cursorVisible setCursorVisible(boolean) 属性说明: 设定光标为显示/隐藏，默认显示。android:digits setKeyListener(KeyListener) 属性说明: 设置允许输入哪些字符。如“1234567890.+-*/%\\n()”android:drawableBottom setCompoundDrawablesWithIntrinsicBounds(int,int,int,int) 属性说明: 在text的下方输出一个drawable。如果指定一个颜色的话会把text的背景设为该颜色，并且同时和background使用时覆盖后者。android:drawableEnd setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int) 属性说明: 在文本结尾处显示drawable对象。它的值可以是其它资源的引用，比如，\"@[+][package:]type:name\"或者\"?[package:][type:]name\"；也可以是颜色值，如\"#rgb\", \"#argb\", \"#rrggbb\", or \"#aarrggbb\"。android:drawableLeft setCompoundDrawablesWithIntrinsicBounds(int,int,int,int) 属性说明: 在text的左边输出一个drawable。android:drawablePadding setCompoundDrawablePadding(int) 属性说明: 设置text与drawable的间隔，与drawableLeft、drawableRight、drawableTop、drawableBottom一起使用，可设置为负数，单独使用没有效果。android:drawableRight setCompoundDrawablesWithIntrinsicBounds(int,int,int,int) 属性说明: 在text的右边输出一个drawable。android:drawableStart setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int) 属性说明: 在文本开始处显示drawable对象。它的值可以是其它资源的引用，比如，\"@[+][package:]type:name\"或者\"?[package:][type:]name\"；也可以是颜色值，如\"#rgb\", \"#argb\", \"#rrggbb\", or \"#aarrggbb\"。android:drawableTop setCompoundDrawablesWithIntrinsicBounds(int,int,int,int) 属性说明: 在text的正上方输出一个drawable。android:editable 属性说明: 设置是否可编辑。这里无效果，在EditView中才有效果。android:editorExtras setInputExtras(int) 属性说明: 设置文本的额外的输入数据。在EditView中才有效果。android:ellipsize setEllipsize(TextUtils.TruncateAt) 属性说明: 设置当文字过长时,该控件该如何显示。有如下值设置：”start”—–省略号显示在开头；”end”——省略号显示在结尾；”middle”—-省略号显示在中间；”marquee” ——以跑马灯的方式显示(动画横向移动)android:ems setEms(int) 属性说明: 设置TextView的宽度为N个字符的宽度。android:fontFamily setTypeface(Typeface) 属性说明: 文本的字形体系。android:freezesText setFreezesText(boolean) 属性说明: 设置保存文本的内容以及光标的位置。android:gravity setGravity(int) 属性说明: 设置文本位置，如设置成“center”，文本将居中显示。android:height setHeight(int) 属性说明: 设置文本区域的高度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)android:hint setHint(int) 属性说明: Text为空时显示的文字提示信息，可通过textColorHint设置提示信息的颜色。android:imeActionId setImeActionLabel(CharSequence,int) 属性说明: 设置IME动作ID。android:imeActionLabel setImeActionLabel(CharSequence,int) 属性说明: 设置IME动作标签。在EditView再做说明。android:imeOptions setImeOptions(int) 属性说明: 附加功能，设置右下角IME动作与编辑框相关的动作，如actionDone右下角将显示一个“完成”，而不设置默认是一个回车符号。android:includeFontPadding setIncludeFontPadding(boolean) 属性说明: 设置文本是否包含顶部和底部额外空白，默认为true。android:inputMethod setKeyListener(KeyListener) 属性说明: 为文本指定输入法，需要完全限定名（完整的包名）。例如：com.google.android.inputmethod.pinyin，但是这里报错找不到。android:inputType setRawInputType(int) 属性说明: 设置文本的类型，用于帮助输入法显示合适的键盘类型。在EditView中再详细说明，这里无效果。android:lineSpacingExtra setLineSpacing(float,float) 属性说明: 设置行间距。android:lineSpacingMultiplier setLineSpacing(float,float) 属性说明: 设置行间距的倍数。如”1.2”android:lines setLines(int) 属性说明: 设置文本的行数，设置两行就显示两行，即使第二行没有数据。android:linksClickable setLinksClickable(boolean) 属性说明: 设置链接是否点击连接，即使设置了autoLink。android:marqueeRepeatLimit setMarqueeRepeatLimit(int) 属性说明: 在ellipsize指定marquee的情况下，设置重复滚动的次数，当设置为marquee_forever时表示无限次。android:maxEms setMaxEms(int) 属性说明: 设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项。android:maxHeight setMaxHeight(int) 属性说明: 设置文本区域的最大高度android:maxLength setFilters(InputFilter) 属性说明: 限制显示的文本长度，超出部分不显示。android:maxLines setMaxLines(int) 属性说明: 设置文本的最大显示行数，与width或者layout_width结合使用，超出部分自动换行，超出行数将不显示。android:maxWidth setMaxWidth(int) 属性说明: 设置文本区域的最大宽度android:minEms setMinEms(int) 属性说明: 设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项。android:minHeight setMinHeight(int) 属性说明: 设置文本区域的最小高度android:minLines setMinLines(int) 属性说明: 设置文本的最小行数，与lines类似。android:minWidth setMinWidth(int) 属性说明: 设置文本区域的最小宽度android:numeric setKeyListener(KeyListener) 属性说明: 如果被设置，该TextView有一个数字输入法。此处无用，设置后唯一效果是TextView有点击效果，此属性在EdtiView将详细说明。android:password setTransformationMethod(TransformationMethod) 属性说明: 以小点”.”显示文本android:phoneNumber setKeyListener(KeyListener) 属性说明: 设置为电话号码的输入方式。android:privateImeOptions setPrivateImeOptions(String) 属性说明: 设置输入法选项，在EditText中才有作用。android:scrollHorizontally setHorizontallyScrolling(boolean) 属性说明: 设置文本超出TextView的宽度的情况下，是否出现横拉条。android:selectAllOnFocus setSelectAllOnFocus(boolean) 属性说明: 如果文本是可选择的，让他获取焦点而不是将光标移动为文本的开始位置或者末尾位置。TextView中设置后无效果。android:shadowColor setShadowLayer(float,float,float,int) 属性说明: 指定文本阴影的颜色，需要与shadowRadius一起使用。android:shadowDx setShadowLayer(float,float,float,int) 属性说明: 设置阴影横向坐标开始位置。android:shadowDy setShadowLayer(float,float,float,int) 属性说明: 设置阴影纵向坐标开始位置。android:shadowRadius setShadowLayer(float,float,float,int) 属性说明: 设置阴影的半径。设置为0.1就变成字体的颜色了，一般设置为3.0的效果比较好。android:singleLine setTransformationMethod(TransformationMethod) 属性说明: 设置单行显示。如果和layout_width一起使用，当文本不能全部显示时，后面用“…”来表示。如android:text=\"test_ singleLine \" android:singleLine=\"true\" android:layout_width=\"20dp\"将只显示“t…”。如果不设置singleLine或者设置为false，文本将自动换行android:text setText(CharSequence,TextView.BufferType) 属性说明: 设置显示文本.android:textAllCaps setAllCaps(boolean) 属性说明: 设置文本全为大写。值为\"true\"或\"false\"。android:textAppearance 属性说明: 设置文字外观。如“?android:attr/textAppearanceLargeInverseandroid:textColor setTextColor(int) 属性说明: 设置文本颜色android:textColorHighlight setHighlightColor(int) 属性说明: 被选中文字的底色，默认为蓝色android:textColorHint setHintTextColor(int) 属性说明: 设置提示信息文字的颜色，默认为灰色。与hint一起使用。android:textColorLink setLinkTextColor(int) 属性说明: 文字链接的颜色.android:textIsSelectable isTextSelectable() 属性说明: 设置非编辑文本可否被选择。值为\"true\"或\"false\"。android:textScaleX setTextScaleX(float) 属性说明: 设置文字之间间隔，默认为1.0f。android:textSize setTextSize(int,float) 属性说明: 设置文字大小，推荐度量单位”sp”，如”15sp”android:textStyle setTypeface(Typeface) 属性说明: 设置字形[bold(粗体) 0, italic(斜体) 1, bolditalic(又粗又斜) 2] 可以设置一个或多个，用“|”隔开android:typeface setTypeface(Typeface) 属性说明: 设置文本字体，必须是以下常量值之一：normal 0, sans 1, serif 2, monospace(等宽字体) 3]android:width setWidth(int) 属性说明: 设置文本区域的宽度，支持度量单位：px(像素)/dp/sp/in/mm(毫米)。android:fadingEdgeLength设置淡入淡出边缘的长度，可以接受大小值的单位是：px、dp、sp、in、mm，也可以参考大小值资源android:fitsSystemWindows是否适合系统窗体，取值为true或false。该属性只对不是子组件的组件有效android:focusable是否可以获取焦点，取值true或falseandroid:focusableInTouchMode是否可以在触摸模式下获取焦点，true或falseandroid:hapticFeedbackEnabled是否允许触摸反馈效果，true或falseandroid:id提供该组件的标识名，可以借助Activity或View实例的findViewById方法通过id获取对应的组件实例对象，其属性值的形式为：android:id=”@+id/id”android:isScrollContainer设置该组件是否设置为滚动条容器，true或falseandroid:keepScreenOn控制该组件在显示的时候保持在屏幕显示，true或falseandroid:longClickable是否响应长时间点击事件，true或falseandroid:minHeight组件的最小高度，取值同android:fadingEdgeLengthandroid:minWidth组件的最小宽度，取值同android:fadingEdgeLengthandroid:nextFocusDown设置下一个向下获取焦点的组件，取值为idandroid:nextFocusLeft设置下一个向左获取焦点的组件，取值为idandroid:nextFocusRight设置下一个向右获取焦点的组件，取值为idandroid:nextFocusUp设置下一个向上获取焦点的组件，取值为idandroid:padding设置上、下、左、右4个边缘的填充距离，必须是一个大小值，取值同android:fadingEdgeLengthandroid:paddingBottom设置下端边缘的填充距离，取值同android:paddingandroid:paddingLeft设置左端边缘的填充距离，取值同android:paddingandroid:paddingRight设置右端边缘的填充距离，取值同android:paddingandroid:paddingTop设置上端边缘的填充距离，取值同android:paddingandroid:saveEnabled是否允许保存状态，取值为true或falseandroid:scrollX设置垂直滚动条的位移量，必须是一个大小值，取值同android:paddingandroid:scrollY设置水平滚动条的位移量，必须是一个大小值，取值同android:paddingandroid:scrollbarAlwaysDrawHorizontalTrack是否总是设置水平滚动条滑块，true或falseandroid:scrollbarAlwaysDrawVerticalTrack是否总是设置垂直滚动条滑块，true或falseandroid:scrollbarSize设置垂直滚动条的宽度和水平滚动条的长度，必须是一个大小值，取值同android:paddingandroid:scrollbarStyle设置滚动条的样式，取值为下列之一：insideOverlay在填充区域内，覆盖形式insideInset在填充区域内，插进形式（凹进）outsideOverly在绑定组件边缘，覆盖形式outsideInset在绑定组件边缘，插进形似android:scrollbarThumbHorizontal设置水平滚动条按钮的绘制资源，必须引用可绘制资源android:scrollbarThumbVertical设置垂直滚动条按钮的绘制资源，必须引用可绘制资源android:scrollbarTrackHorizontal设置水平滚动条轨道的绘制资源，必须引用可绘制资源android:scrollbarTrackVertical设置水平滚动条轨道的绘制资源，必须引用可绘制资源android:scrollbars设置滚动显示，可以为一下一个或多个值：none不显示滚动条horizontal只显示水平滚动条vertical只显示垂直滚动条android:soundEffectsEnabled是否允许音效，取值为true或falseandroid:tag设置标记内容，可以通过View类实例的getTag方法获取该组件的标记内容，或者使用findViewByTag通过标记来查找相应的子组件android:visibility设置初始化可见状态，取值为以下之一：visible可见（默认值）invisible不可见（其所占空间将留出）gone完全不可见（其所占空间都不会留出）线性布局LinearLayout组件属性列表属性说明android:baselineAligned基线对齐android:baselineAlignedChildIndex以指定子组件作为基线对齐android:gravity指定该物体放入其容器的重心位置，取值为下列之一：top上方，物体大小不变bottom下方，物体大小不变left左方，物体大小不变right右方，物体大小不变center_vertical垂直方向的中间，物体大小不变fill_vertical填满垂直方向，自动进行大小调整center_horizontal水平方向的中间，大小不变fill_horizontal填满水平方向，自动进行大小调整center居中（既是水平也是垂直方向的中间）fill填满整个容器clip_verticalclip_horizontalandroid:orientation布局方向，取值为下列之一：horizontal水平的vertical垂直的（默认值）android:weightSum组件的比重和LinearLayout_Layout属性说明android:layout_gravity当前子组件的心位置android:layout_height当前子组件的高度android:layout_weight当前子组件的空间比重，取值为浮点数android:layout_width当前子组件的宽度RalativeLayout属性说明android:gravity设置添加组件的重心android:ignoreGravity忽略布局重心的影响RalativeLayout_Layout属性说明android:layout_above将当前组件的下边缘放置于参照组件之上，该属性为参照组件的IDandroid:layout_alignBaseline当前组件与参照组件的基线对齐，该属性为参照组件的IDandroid:layout_alignBottom当前组件与参照组件的下边界对齐，该属性为参照组件的IDandroid:layout_alignLeft当前组件与参照组件的左边界对齐，该属性为参照组件的IDandroid:layout_alignParenBottom当前组件与父组件的下边界对齐，true或falseandroid:layout_alignParentLeft当前组件与父组件的左边界对齐，true或falseandroid:layout_alignParentRight当前组件与父组件的右边界对齐，true或falseandroid:layout_alignParentTop当前组件与父组件的上边界对齐，true或falseandroid:layout_alignRight当前组件与参照组件的右边界对齐，该属性为参照组件的IDandroid:layout_alignTop当前组件与参照组件的上边界对齐，该属性为参照组件的IDandroid:layout_alignWithParentIfMissing如果对应的兄弟元素找不到的话就以父元素做参照物 true或falseandroid:layout_below将当前组件的上边缘放置于参照组件之下，该属性为参照组件的IDandroid:layout_centerHorizontal当前组件放置到父组件的水平居中的位置android:layout_centerInParent当前组件放置到父组件的重心位置android:layout_centerVertical当前组件放置到父组件垂直居中的位置android:layout_toLeftOf将当前组件的右边缘放置于参照组件之下，该属性为参照组件的IDandroid:layout_toRightOf将当前组件的左边缘放置于参照组件之下，该属性为参照组件的IDAbsoluteLayout_Layout属性说明android:layout_x当前组件的x坐标位置（从左到右方向）android:layout_y当前组件的y坐标位置（从上到下方向）FrameLayout属性说明android:foreground前置图片android:foregroundGravity前置图片重心android:measureAllChildren在切换显示时是否侧重所有子组件的大小android:layout_gravity添加组件的重心FrameLayout_Layout属性说明android:layout_gravity当前子组件所添加的重心位置TableLayout属性说明android:collapseColumns设置允许折叠的列编号，列编号基于0，属性值可以是单个或多个列编号，编号与编号直接用逗号”,”分隔android:shrinkColumns设置允许收缩的列编号，列编号基于0，属性值可以是单个或多个列编号，编号与编号直接用逗号”,”分隔android:stretchColumns设置允许伸展的列编号，列编号基于0，属性值可以是单个或多个列编号，编号与编号直接用逗号”,”分隔TableRow_Cell属性说明android:layout_column设置该单元格的列编号（基于0）android:layout_span指明该单元格可以跨越的列数AbsListView属性说明android:cacheColorHint设置缓冲颜色android:drawSelectorOnTop是否将选择器绘制在备选条目上方，取值为true或falseandroid:fastScrollEnabled允许快速滚动android:listSelector指示选择器的内容android:scrollingCache滚动时是否使用绘制缓冲，true或falseandroid:smoothScrollbar平滑滚动条android:stackFromBottom从下方堆叠条目android:textFilterEnbled是否允许过滤android:transcriptMode设置抄本模式ListView属性说明android:choiceMode选择模式android:divider分割线颜色或组件的参考android:dividerHeight分割线高度android:entries指定绑定到当前列表视图的一个数组资源android:footerDividersEnabled是否允许页脚分割线android:headerDividersEnabled是否允许页眉分割线GridView属性说明android:columnWidth指定列宽android:gravity添加组件的重心位置android:horizontalSpacing水平空间android:numColumns指定列数android:strechMode伸展模式android:verticalSpacing垂直空间Gallery属性说明android:animationDuration动画持续时间android:gravity添加组件的重心位置android:spacing间隔空间android:unselectedAlpha非选择条目的透明度TextView属性说明android:autoLink是否自动链接（内容是网址或是电子邮件时）android:autoText自动更新拼音错误android:bufferType设置缓冲区类型android:capitalize自动大写android:cursorVisible光标是否可见，true或falseandroid:digits所接受的数字字符android:drawableBottom在文本下方绘制android:drawableLeft在文本左方绘制android: drawablePadding绘制填充区android: drawableRight在文本右方绘制android: drawableTop在文本上方绘制android:editable是否可编辑，true或falseandroid:editorExtras设置文本的额外的输入数据。在EditView中才有效果android:ellipsize当内容过长时会自动打断单词内容android:ems设置TextView的宽度为N个字符的宽度android:enabled是否可用，true或falseandroid:freezesText是否冻结文本android:gravity指明文本的重心位置android:height高度值android:hint指示内容android:imeActionId设置IME动作IDandroid:imeActionLabel设置IME动作标签android:imeOptions输入法选项android:includeFontPadding设置文本是否包含顶部和底部额外空白，默认为trueandroid:inputMethod指定输入法android:inputType输入类型，取值为下列之一：nonetext普通文本textCapCharacters大写字符textCapWords单词首字母大写textCapSentences句子首字母大写textAutoCorret自动更正textAutoComplete自动完成textMultiLine多行内容textUri，UritextEmailAddress电子邮件地址textEmailSubject电子邮件主题textShortMessage短消息textLongMessage长消息textPersonName个人姓名textPostalAddress邮政地址textPassword密码textVIsiblePassword可见的密码textWebEditText网页格式textFilter过滤字符串textPhonetic语言发音number数字numberSigned有符号数字numberDecimal十进制数字phone电话号码datetime日期时间date日期time时间android:lineSpacingExtra设置行间距 android:lineSpacingMultiplier设置行间距的倍数android:lines设置文本行数android:linksClickable设置链接是否点击连接，即使设置了autoLickandroid:marqueeRepeatLimit来回移动的动画次数android:maxEms设置TextView的宽度为最长为N个字符的宽度。与ems同时使用时覆盖ems选项 android:maxHeight物体的最大高度android:maxLength最大文本长度android:maxLines最大行数android:minWidth物体的最大宽度android:minEms设置TextView的宽度为最短为N个字符的宽度。与ems同时使用时覆盖ems选项 android:minHeight物体的最小高度android:minLines最小文本行数android:minWidth物体的最小宽度android:numeric是否使用数字输入方式android:password是否使用密码输入方式android:phonenumber是否使用电话号码输入方式android:privateImeOptions设置输入法选项 android:scrollHorizontally设置文本超出TextView的宽度的情况下，是否出现横拉条 android:selectAllOnFocus如果文本是可选择的，让他获取焦点而不是将光标移动为文本的开始位置或者末尾位置。TextView中设置后无效果。android:shadowColor文本阴影颜色android:shadowDx阴影的水平偏移android:shadowDy阴影的垂直偏移android:shadowRadius阴影的半径android:singleLine是否单行（不自动换行）android:text显示的文本内容android:textApperance基本字体颜色、字样、大小和样式android:textColor文本颜色android: textColorHighlight文本高亮颜色android: textColorHint文本提示颜色android:textColorLink文本链接颜色android:textScaleX文本缩放因数android:textSize文本大小android:textStyle文本样式，取值为下列之一：bold粗体italic斜体bolditalic粗斜体android:typeface字样android:width物体的高度AutoCompleteTextView属性说明android:completionHint显示提示android:completionHintView提示视图android:completionThreshold设置开始提示的字符数android:dropDownAnchor下拉框链接视图android:dropDownSelector下拉框选择器android:dropDownWIdth下拉框宽度ImageView属性说明android:adjustViewBounds是否调整视图范围android:baselineAlignBottom是否按照下端基线对齐android:cropToPadding是否按照填充进行裁剪android:maxHeight设置最大高度android:maxWidth设置最大宽度android:scaleType缩放类型，取值为下列之一：matrix图片真实大小fitXY适合图片大小fitStartfitCenterfitEndcenter居中显示centerCropcenterInsideandroid:src设置绘制用内容android:tint设置染色颜色值android:layout_above=\"@id/xxx\" 将控件置于给定ID控件之上 android:layout_below=\"@id/xxx\"将控件置于给定ID控件之下android:layout_toLeftOf=\"@id/xxx\" 将控件的右边缘和给定ID控件的左边缘对齐 android:layout_toRightOf=\"@id/xxx\" 将控件的左边缘和给定ID控件的右边缘对齐android:layout_alignLeft=\"@id/xxx\" 将控件的左边缘和给定ID控件的左边缘对齐android:layout_alignTop=\"@id/xxx\" 将控件的上边缘和给定ID控件的上边缘对齐 android:layout_alignRight=\"@id/xxx\"将控件的右边缘和给定ID控件的右边缘对齐android:layout_alignBottom=\"@id/xxx\" 将控件的底边缘和给定ID控件的底边缘对齐 android:layout_alignParentLeft=\"true\" 将控件的左边缘和父控件的左边缘对齐 android:layout_alignParentTop=\"true\" 将控件的上边缘和父控件的上边缘对齐 android:layout_alignParentRight=\"true\" 将控件的右边缘和父控件的右边缘对齐 android:layout_alignParentBottom=\"true\" 将控件的底边缘和父控件的底边缘对齐 android:layout_centerInParent=\"true\" 将控件置于父控件的中心位置 android:layout_centerHorizontal=\"true\" 将控件置于水平方向的中心位置 android:layout_centerVertical=\"true\" 将控件置于垂直方向的中心位置","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"使用IDE内置的Terminal","date":"2017-03-11T14:28:51.000Z","path":"2017/03/11/2017-03-11-utilizing-the-terminal-in-android-studio/","text":"这周终于把Google I/O 2016的Android App在Device上跑起来了，顺便尝试多多使用命令行进行编译或者安装。 1. 编译Android client并安装到本地设备官方提供了比较完善的Build Instructions，对于习惯于shift+F10的我来说，还是有点麻烦。 clone下来iosched，修改gradle.properities里面的supportLib等值，参考Build Instruction ， gradlew clean assembleDebug 往往这一步会开始下载gradle，非常耗时。参考了stackOverFlow，自己去下载gradle 3.3 -all.zip，放到/gradle/wrapper文件夹下，修改gradle-wrapper.properities，将其中的distributionUrl改成 distributionUrl=gradle-3.3-all.zip 等于直接省去上述下载步骤。Build完成后，敲入命令行 gradlew installNormalDebug 不出意外的话，即可进入主页面。 2. Server端配置Google io 2016 Android Client提供了Map Intergation和Youtube video display以及GCM等服务。这些全部集成在Google Cloud Platform上配置。","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"使用Kotlin进行java开发","date":"2017-01-13T15:06:13.000Z","path":"2017/01/13/2017-01-13-embracing-kotlin/","text":"Kotlin是Jetbrain公司推出的面向jvm的语言，编译后的bytecode和java编写的代码并没有什么区别。 1. 基本语法 没有new关键字 123456789 主函数 fun main(args : Array&lt;String&gt;) &#123; for (i in args.indices) &#123; print(args[i]) &#125;&#125;自定义函数 fun getStringLength(obj: Any) :Int?{ //问号代表有可能返回空值 if (obj is String) { return obj.length } return 0} 12支持lambda fun maps(list: List) { list.filter { it.startsWith(“a”) } .sortedBy { it } .map(String::toUpperCase) .forEach(::print)} ``` ref Kotlin in production 10 Kotlin Tricks in 10 ish minutes by Jake Wharton​","tags":[{"name":"kotlin","slug":"kotlin","permalink":"https://haldir65.github.io/tags/kotlin/"}]},{"title":"Hexo部署个人博客记录","date":"2017-01-08T10:01:01.000Z","path":"2017/01/08/2017-01-08-trouble-shooting-with-my-blog/","text":"使用hexo写博客以来，记录下来的问题越来越多。只希望下次再碰到同样的问题时，不要再去浪费时间去查找。如果想要给自己的blog一个值得置顶的文章的话，我觉得一篇记录使用hexo过程中的一些解决问题的方法的文章是再合适不过的了。 1. 经常更新yilia的themeyilia主题经常会更新，及时更新theme会发现很多新的特性及bug fix 2. 部署相关 部署到github 123hexo clean //清除缓存hexo g -d //一步到位 = hexo g + hexo dhexo s //localost:4000本地预览 部署过程中出现的一些错误 to be fixed 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253$ hexo g -dINFO Start processingERROR Process failed: _posts/2016-12-10-adb-command.mdYAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 3, column 11: categories: [技术] ^ at generateError (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:162:10) at throwError (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:168:9) at readBlockMapping (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1040:9) at composeNode (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1326:12) at readDocument (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1488:3) at loadDocuments (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1544:5) at Object.load (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\js-yaml\\lib\\js-yaml\\loader.js:1561:19) at parseYAML (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:80:21) at parse (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-front-matter\\lib\\front_matter.js:56:12) at D:\\Blog\\github\\node_modules\\hexo\\lib\\plugins\\processor\\post.js:52:18 at tryCatcher (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\util.js:16:23) at Promise._settlePromiseFromHandler (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:507:35) at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18) at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10) at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18) at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18) at PromiseArray._resolve (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:125:19) at PromiseArray._promiseFulfilled (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:143:14) at PromiseArray._iterate (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:113:31) at PromiseArray.init [as _init] (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:77:10) at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:564:21) at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10) at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18) at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18) at PromiseArray._resolve (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:125:19) at PromiseArray._promiseFulfilled (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise_array.js:143:14) at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:572:26) at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10) at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18) at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18) at Promise._resolveCallback (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:431:57) at Promise._settlePromiseFromHandler (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:522:17) at Promise._settlePromise (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:567:18) at Promise._settlePromise0 (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:612:10) at Promise._settlePromises (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:691:18) at Promise._fulfill (D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\promise.js:636:18) at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\bluebird\\js\\release\\nodeback.js:42:21 at D:\\Blog\\github\\node_modules\\hexo\\node_modules\\hexo-fs\\node_modules\\graceful-fs\\graceful-fs.js:78:16 at tryToString (fs.js:455:3) at FSReqWrap.readFileAfterClose [as oncomplete] (fs.js:442:12)INFO Files loaded in 1.48 sINFO Generated: sitemap.xmlINFO Generated: atom.xmlINFO Generated: 2017/01/08/2017-01-08-trouble-shooting-with-my-blog/index.htmlINFO Generated: index.htmlINFO 4 files generated in 2.26 sINFO Deploying: git 3. 一些功能的实现 置顶功能 将node_modules/hexo-generator-index/lib/generator.js的文件内容替换成以下内容 12345678910111213141516171819202122232425262728'use strict';var pagination = require('hexo-pagination');module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || 'page'; return pagination('', posts, &#123; perPage: config.index_generator.per_page, layout: ['index', 'archive'], format: paginationDir + '/%d/', data: &#123; __index: true &#125; &#125;);&#125;; 同时在文章开头添加top : 1即可 ，实际排序按照这个数字从大到小排序12345 title: Hexo置顶文章date: 2016-11-11 23:26:22tags:[置顶]categories: Hexotop: 0 # 0或者1 4. SublimeText的一些快捷键由于文章大部分都是使用SublimeText写的，Typroa这种所见即所得的编辑器也不错，但对于掌握MardkDown语法没有帮助。这里摘录一些SubLimeText的快捷键。 Ctrl+Shift+P：打开命令面板Ctrl+P：搜索项目中的文件Ctrl+G：跳转到第几行Ctrl+W：关闭当前打开文件Ctrl+Shift+W：关闭所有打开文件Ctrl+Shift+V：粘贴并格式化Ctrl+D：选择单词，重复可增加选择下一个相同的单词Ctrl+L：选择行，重复可依次增加选择下一行Ctrl+Shift+L：选择多行Ctrl+Shift+D：复制粘贴当前行Ctrl+X：删除当前行Ctrl+Shift+D：复制粘贴当前行Ctrl+Shift+Enter：在当前行前插入新行Ctrl+M：跳转到对应括号Ctrl+U：软撤销，撤销光标位置Ctrl+J：选择标签内容Ctrl+F：查找内容Ctrl+Shift+F：查找并替换Ctrl+H：替换Ctrl+R：前往 methodCtrl+N：新建窗口Ctrl+K+B：开关侧栏Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身Ctrl+F2：设置/删除标记Ctrl+/：注释当前行Ctrl+Shift+/：当前位置插入注释Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的Ctrl+Shift+A：选择当前标签前后，修改标签用的F11：全屏Shift+F11：全屏免打扰模式，只编辑当前文件Alt+F3：选择所有相同的词Alt+.：闭合标签Alt+Shift+数字：分屏显示Alt+数字：切换打开第N个文件Shift+右键拖动：光标多不，用来更改或插入列内容鼠标的前进后退键可切换Tab文件按Ctrl，依次点击或选取，可需要编辑的多个位置按Ctrl+Shift+上下键，可替换行``` 5. title不能以[]开头6. markdown语法MarkDown页面内部跳转MarkDown技巧：两种方式实现页内跳转 ref Hexo博文置顶技巧 SublimeText快捷键","tags":[{"name":"置顶","slug":"置顶","permalink":"https://haldir65.github.io/tags/置顶/"},{"name":"hexo","slug":"hexo","permalink":"https://haldir65.github.io/tags/hexo/"}]},{"title":"linux基本命令介绍","date":"2017-01-07T07:38:43.000Z","path":"2017/01/07/2017-01-07-Linux-Basic-Commands/","text":"一些常用的linux基本命令,仅作为参考。 首先是连接vps的ssh(Secure Shell)工具，putty或者xshell都可以。 速查手册 文件操作 Vi文本编辑器 bash脚本怎么写 用户和用户组的问题 文件权限 管道 硬件相关的命令 SS相关的命令 网络监控 查看进程11.通用配置 参考 1. 文件操作常用命令123456789101112131415161718- &gt; cd //进入目录- &gt; cd / 返回根目录- &gt; pwd // 显示当前目录- &gt; ls // 显示当前目录下内容 - &gt; mkdir //新建目录- &gt; rmdir //删除目录,如果目录不为空，- &gt;使用 rm -r //递归删除- &gt; rm -rf //强制删除文件名一般不支持空格，如果真有的话得用单引号括起来，像这样:-&gt; rm -f &apos;my file&apos;-&gt; mv a.mp4 b.mp4 //mv虽然是移动（Windows中的剪切）操作，但这种情况下就等同于重命名了，亲测有效# 重命名rename是实际意义上的重命名命令，但rename接受三个参数- &gt; touch filename //创建文件，后缀在linux下没意义 复制粘贴：12345678910- &gt; cp a b //把a复制一份，命名为b- &gt; cp d1 d2 // 这样是不行的，复制目录需要加上-r ，即- &gt; cp -r d1 d2移动(左边是被移动的文件或目录，右边是目标路径)： - &gt; mv d1 / 把d1移动到相对路径，也就是根目录下- &gt; mv d1 ../把d1往上移动一层- &gt; mv d1 ../../ ###重定向 1234567891011121314重定向输出 &gt;ls &gt; lsoutput.txt #用于将输出的结果写入一个新的文本文件中echo &apos;hey man&apos; # 类似于printecho &apos;hello&apos; &gt; log.txt #把这句话写入到文本中 ，覆盖其原有内容重定向输入 &lt;wall &lt; aa.txt # wall是向所有用户发广播， 即从aa.txt中读取内容，然后广播发出去#service命令service XXX start/stop/status #原理是将这些程序注册成为系统服务，这样调用这些程序的时候就不需要写一大堆绝对路径了，具体用法help已经很详细了。zip –q –r video.zip /home/video zip –q –r video.zip . # .代表当前目录 2. Vi文本编辑器123456789- &gt; vi 3.txt // 如果有则编辑，没有则直接创建Vi分为命令模式和编辑模式，一进来是命令模式，输入&apos;a&apos;进入编辑模式切换回命令模式按&apos;esc&apos; 命令模式下 :w 表示存盘- :q 退出- :wq 保存并退出- :q! 不保存退出（无内容变化） 在编辑模式下,输入 ‘dd’删除一行 ，输入’dw’删除一个词输入’o’插入一行。。。。。。 12345678- &gt; more filename//查看文件内容- &gt; cat filename //正序查看文件内容- &gt; tac filename //逆序查看文件内容- &gt; head - 3 filename //只查看文件前面三行- &gt; tail - 3 filename //只查看倒数后三行 更多命令如 find 、 whereis 、 Li(Link)查找：123456find / -name filename //在根目录下查找文件find /etc -name filename //在etc目录下查找文件grep stringtofind filename //在指定的文本文件中查找指定的字符串whereis ls //查看ls命令所执行的是哪个文件及其位置(查看系统文件所在路径) 3. linux下shell脚本语句的语法linux大小写敏感eg:1234567891011121314151617181920212223242526272829303132333435#!/bin/shmyPath=&quot;/var/log/httpd/&quot;myFile=&quot;/var /log/httpd/access.log&quot;#这里的-x 参数判断$myPath是否存在并且是否具有可执行权限if [ ! -x &quot;$myPath&quot;]; thenmkdir &quot;$myPath&quot;fi#这里的-d 参数判断$myPath是否存在if [ ! -d &quot;$myPath&quot;]; thenmkdir &quot;$myPath&quot;fi#这里的-f参数判断$myFile是否存在if [ ! -f &quot;$myFile&quot; ]; thentouch &quot;$myFile&quot;fi#其他参数还有-n,-n是判断一个变量是否是否有值if [ ! -n &quot;$myVar&quot; ]; thenecho &quot;$myVar is empty&quot;exit 0fi#两个变量判断是否相等if [ &quot;$var1&quot; == &quot;$var2&quot; ]; then //if 后面必须加thenecho &apos;$var1 eq $var2&apos;elseecho &apos;$var1 not eq $var2&apos;fi //else后面必须加fi if list then do something here elif list then do another thing here else do something else here fi eg: echo类似于print1234567891011121314151617例：myvar=“Hi there！” echo $myvar echo &quot;$myvar&quot; echo &apos; $myvar&apos; echo \\$myvar将会输出如下：Hi there！ Hi there! $myvar $myvar 4. 用户和用户组的问题123456789101112131415161718useradd user //添加用户，(-g 指定用户所在用户组)/home目录下会多一个user的目录，作为该用户的主目录passwd user //设置user的密码，会提示输入密码，密码不会显示在窗口中cd /etc &gt;&gt;&gt; more passwd ，这里面会显示所有的用户more group ,显示用户组的信息groupadd groupname //添加一个用户组//删除用户userdel user //删除一个用户 还需要删除该用户的主目录(rm -rf user) 重启机器，登录页面选择新用户即可完成用户切换或者使用 su testuser 切换到testuser身份exit就回到root用户的身份新用户登录时，默认的pwd是该用户的主目录 5. 文件权限的问题ls命令执行显示的文件前一般带有一串信息第一位： 代表文件l代表链接d代表目录 后面九位划分为三块，可能的权限有这么几种r(read权限)w(写权限)-(无权限)x(执行权限) 第一组代表所有者(u)权限，第二组代表与所有者一个用户组的用户(g)的权限，第三组代表其他用户(0)的权限 更改文件权限命令: chmod1234567891011121314151617181920212223242526chmod +x filename //加上可执行权限，所有用户都加上了chmod u+x filename //给当前用户加上可执行权限//其他命令不一一列举&gt; u ：目录或者文件的当前的用户 g ：目录或者文件的当前的群组 o ：除了目录或者文件的当前用户或群组之外的用户或者群组 a ：所有的用户及群组&gt; r ：读权限，用数字4表示 w ：写权限，用数字2表示 x ：执行权限，用数字1表示 - ：删除权限，用数字0表示所以给所有用户增加a.txt文件的可执行权限就像这样chmod a+x a.txt #其余自行发挥chmod a-x a.txt #删除所有用户的可执行权限chmod 755 filename 751应该是读/写/执行chomod 444 filename# 为所有用户分配读权限chmod 777 filename //全部权限都有了，其实上面的9位就是这三位数每一位的二进制拼起来的755 就是 111101101,也就对应上面的权限九位字母 更改文件所有者 chown username filename 6. 管道将一个命令的输出传送给另一个命令，作为另一个命令的输入eg: 中间那条竖线叫做管道连接符1234$ cat /etc/passwd | grep usernametofind$ ls -l | grep &quot;^d&quot;$ ls -l * | grep &quot;^-&quot; | wc -| //&quot;^-&quot;表示不列出目录或链接，只展示目录；wc是数行数$ ls -l | grep &quot;^d&quot; //只列出目录 7. 硬件相关的命令VPS跑分软件 git clone下来cd acrosswget -qO- bench.sh | bash （亲测可用，也可以自己看Readme）或者 &gt; curl -Lso- bench.sh | bash BandWagon12345678910111213141516171819202122232425262728293031----------------------------------------------------------------------CPU model : Intel(R) Xeon(R) CPU E3-1275 v5 @ 3.60GHzNumber of cores : 1CPU frequency : 3600.041 MHzTotal size of Disk : 12.0 GB (10.0 GB Used)Total amount of Mem : 256 MB (217 MB Used)Total amount of Swap : 128 MB (122 MB Used)System uptime : 2 days, 4 hour 20 minLoad average : 0.06, 0.05, 0.01OS : Ubuntu 14.04.1 LTSArch : i686 (32 Bit)Kernel : 2.6.32-042stab123.3----------------------------------------------------------------------I/O speed(1st run) : 855 MB/sI/O speed(2nd run) : 1.0 GB/sI/O speed(3rd run) : 1.0 GB/sAverage I/O speed : 967.7 MB/s----------------------------------------------------------------------Node Name IPv4 address Download SpeedCacheFly 205.234.175.175 76.5MB/sLinode, Tokyo, JP 106.187.96.148 17.6MB/sLinode, Singapore, SG 139.162.23.4 8.18MB/sLinode, London, UK 176.58.107.39 8.67MB/sLinode, Frankfurt, DE 139.162.130.8 12.8MB/sLinode, Fremont, CA 50.116.14.9 9.40MB/sSoftlayer, Dallas, TX 173.192.68.18 62.3MB/sSoftlayer, Seattle, WA 67.228.112.250 66.0MB/sSoftlayer, Frankfurt, DE 159.122.69.4 12.2MB/sSoftlayer, Singapore, SG 119.81.28.170 11.8MB/sSoftlayer, HongKong, CN 119.81.130.170 13.2MB/s---------------------------------------------------------------------- BuyVm123456789101112131415161718192021222324252627282930CPU model : Intel(R) Xeon(R) CPU L5639 @ 2.13GHzNumber of cores : 1CPU frequency : 2000.070 MHzTotal size of Disk : 15.0 GB (1.3 GB Used)Total amount of Mem : 128 MB (80 MB Used)Total amount of Swap : 128 MB (32 MB Used)System uptime : 0 days, 22 hour 28 minLoad average : 0.10, 0.04, 0.05OS : Ubuntu 14.04.2 LTSArch : i686 (32 Bit)Kernel : 2.6.32-openvz-042stab116.2-amd64----------------------------------------------------------------------I/O speed(1st run) : 102 MB/sI/O speed(2nd run) : 97.1 MB/sI/O speed(3rd run) : 147 MB/sAverage I/O speed : 115.4 MB/s----------------------------------------------------------------------Node Name IPv4 address Download SpeedCacheFly 205.234.175.175 14.7MB/sLinode, Tokyo, JP 106.187.96.148 6.15MB/sLinode, Singapore, SG 139.162.23.4 2.54MB/sLinode, London, UK 176.58.107.39 2.99MB/sLinode, Frankfurt, DE 139.162.130.8 2.96MB/sLinode, Fremont, CA 50.116.14.9 4.27MB/sSoftlayer, Dallas, TX 173.192.68.18 11.7MB/sSoftlayer, Seattle, WA 67.228.112.250 13.0MB/sSoftlayer, Frankfurt, DE 159.122.69.4 1.89MB/sSoftlayer, Singapore, SG 119.81.28.170 3.26MB/sSoftlayer, HongKong, CN 119.81.130.170 3.72MB/s---------------------------------------------------------------------- DigitalOcean Los Angeles12345678910111213141516171819202122232425262728293031----------------------------------------------------------------------CPU model : Intel(R) Xeon(R) CPU E5-2650L v3 @ 1.80GHzNumber of cores : 1CPU frequency : 1799.998 MHzTotal size of Disk : 20.2 GB (1.0 GB Used)Total amount of Mem : 488 MB (33 MB Used)Total amount of Swap : 0 MB (0 MB Used)System uptime : 0 days, 0 hour 3 minLoad average : 0.16, 0.10, 0.03OS : Ubuntu 16.04.2 LTSArch : x86_64 (64 Bit)Kernel : 4.4.0-78-generic----------------------------------------------------------------------I/O speed(1st run) : 581 MB/sI/O speed(2nd run) : 711 MB/sI/O speed(3rd run) : 777 MB/sAverage I/O speed : 689.7 MB/s----------------------------------------------------------------------Node Name IPv4 address Download SpeedCacheFly 205.234.175.175 161MB/sLinode, Tokyo, JP 106.187.96.148 15.7MB/sLinode, Singapore, SG 139.162.23.4 5.96MB/sLinode, London, UK 176.58.107.39 5.71MB/sLinode, Frankfurt, DE 139.162.130.8 6.45MB/sLinode, Fremont, CA 50.116.14.9 30.4MB/sSoftlayer, Dallas, TX 173.192.68.18 29.9MB/sSoftlayer, Seattle, WA 67.228.112.250 57.7MB/sSoftlayer, Frankfurt, DE 159.122.69.4 3.64MB/sSoftlayer, Singapore, SG 119.81.28.170 7.59MB/sSoftlayer, HongKong, CN 119.81.130.170 8.84MB/s---------------------------------------------------------------------- DigitalOcean Sinapore (ip adress lokks like Russian)12345678910111213141516171819202122232425262728293031----------------------------------------------------------------------CPU model : Intel(R) Xeon(R) CPU E5-2630L 0 @ 2.00GHzNumber of cores : 1CPU frequency : 1999.999 MHzTotal size of Disk : 20.2 GB (1.0 GB Used)Total amount of Mem : 488 MB (36 MB Used)Total amount of Swap : 0 MB (0 MB Used)System uptime : 0 days, 0 hour 2 minLoad average : 0.17, 0.20, 0.09OS : Ubuntu 16.04.2 LTSArch : x86_64 (64 Bit)Kernel : 4.4.0-78-generic----------------------------------------------------------------------I/O speed(1st run) : 662 MB/sI/O speed(2nd run) : 741 MB/sI/O speed(3rd run) : 728 MB/sAverage I/O speed : 710.3 MB/s----------------------------------------------------------------------Node Name IPv4 address Download SpeedCacheFly 205.234.175.175 20.8MB/sLinode, Tokyo, JP 106.187.96.148 18.6MB/sLinode, Singapore, SG 139.162.23.4 83.8MB/sLinode, London, UK 176.58.107.39 5.71MB/sLinode, Frankfurt, DE 139.162.130.8 8.13MB/sLinode, Fremont, CA 50.116.14.9 2.82MB/sSoftlayer, Dallas, TX 173.192.68.18 6.18MB/sSoftlayer, Seattle, WA 67.228.112.250 8.47MB/sSoftlayer, Frankfurt, DE 159.122.69.4 6.77MB/sSoftlayer, Singapore, SG 119.81.28.170 97.9MB/sSoftlayer, HongKong, CN 119.81.130.170 35.2MB/s---------------------------------------------------------------------- 查看硬盘存储空间:12345df -h //h的意思是human-readabledu -sh //查看当前directory的大小du -h //查看当前目录下各个子目录分别的大小dh -h img// 查看img目录下文件及文件夹的大小dh -h img/1.jpg //查看指定文件的大小 查看cpu信息 cat /proc/cpuinfo 查看内存 free -mfree -h # human readable 修改默认安全设置 vi /etc/ssh/ssd_config 添加或修改 123Port 22 (ssh默认端口修改)PermitRootLogin without-Password noAllowUsers userName 压缩文件命令将/home/video/ 这个目录下所有文件和文件夹打包为当前目录下的video.zip zip –q –r -v video.zip . #加上一个-v主要是为了能够实时查看输出 文件传输（linux -&gt;windows）： 一般使用putty ssh到Linux主机，想要把Linux上的文件弄到Windows中，需要使用pscp工具。下载好pscp.exe后，放到c:/windows/system32下面。打开cmd。输入命令pscp -r root@202.123.123.123:”/root/fileonServer.mp4” d:/whateveriwantonmyPc.mp4 ，确认后输入root密码就好了。我主要是用来下载视频的。有时候会出现Connection Refused Error。 netstat -anp | grep sshd 看下跑在哪个端口然后 pscp -P 12345-r root@202.123.123.123:”/root/fileonServer.mp4” d:/whateveriwantonmyPc.mp4 -p要大写 8. SS相关的命令123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475 1. 刚装好的ubuntu需要执行以下步骤 安装git &gt; apt-get install git 安装python &gt; apt-get install python-2.7 安装python-setuptools &gt; apt-get install python-setuptools 检查是否安装好： python --version 2. 下载shadowsocks源码编译 &gt; git clone https://github.com/shadowsocks/shadowsocks # 记得切换到master分支 python setup.py build python setup.py install 检查下版本 ssserver --version 3. 编辑配置文件 vim config.json &#123; &quot;server&quot;:&quot;my_server_ip&quot;, &quot;server_port&quot;:8388, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;mypassword&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false&#125; ssserver -c config.json -d start #启动完成检查下是否启动了ps -ef |grep sssss 命令 ssserver -c /etc/shadowsocks/config.json # 前台运行- 后台运行和停止ssserver -c /etc/shadowsocks.json -d startssserver -c /etc/shadowsocks.json -d stop- 加入开机启动在/etc/rc.local中加入sudo ssserver -c /etc/shadowsocks.json --user username -d start - 不要总是用root用户做事，adduser来做，给sudo权限即可[ShadowsocksR](https://github.com/breakwa11/shadowsocks-rss/wiki)启动后台运行命令&gt; python server.py -p 443 -k password -m aes-256-cfb -O auth_sha1_v4 -o http_simple -d start[net-speeder](https://zhgcao.github.io/2016/05/26/ubuntu-install-net-speeder/)venetX，OpenVZ架构cd net-speeder-master/sh build.sh -DCOOKEDXen，KVM，物理机cd net-speeder-master/sh build.sh加速所有ip协议数据&gt; ./net_speeder venet0 &quot;ip&quot;只加速指定端口，例如只加速TCP协议的 8989端口前提是切换到net-speeder的目录下&gt; ./net_speeder venet0:0 &quot;tcp src port 8989&quot;./net_speeder venet0 &quot;ip&quot;只加速指定端口，例如只加速TCP协议的 8989端口前提是切换到net-speeder的目录下 ./net_speeder venet0:0 &quot;tcp src port 8989&quot; [KVM架构升级内核开启BBR](https://qiujunya.com/linodebbr.html) 9. 网络监控123456789101112131415tcpdump -i &quot;venet0:0&quot; //抓包的tcpdump -c 10 //counttcpdump -c -A //Asicii码形式展示出来每个packagetcpdump -c 5 -i wlo1 // 监听某一个网卡tcpdump -c 5 -i wlo1 port 22// 监听某一个网卡某一个端口tcpdump version 4.5.1libpcap version 1.5.3Usage: tcpdump [-aAbdDefhHIJKlLnNOpqRStuUvxX] [ -B size ] [ -c count ] [ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ] [ -i interface ] [ -j tstamptype ] [ -M secret ] [ -P in|out|inout ] [ -r file ] [ -s snaplen ] [ -T type ] [ -V file ] [ -w file ] [ -W filecount ] [ -y datalinktype ] [ -z command ] [ -Z user ] [ expression ] tcpdump结合wireshark可实现完整的网络抓包 1234netstatnetstat -i // 查看某个网络接口发出和接收了多少byte的数据netstat -ta //当前active的网络连接netstat -tan //以ip地址的方式展示出来 123ifconfig // 查看机器上的网卡en01 //Ethernet 注意 RX bytes(接收到的数据)和TX bytes(发送出去的数据)后面的数字 10.查看进程1234567891011121314151617181920212223top 动态显示PID：进程的ID[参数解释](http://www.cnblogs.com/gaojun/p/3406096.html) USER：进程所有者 PR：进程的优先级别，越小越优先被执行 NInice：值 VIRT：进程占用的虚拟内存 RES：进程占用的物理内存 SHR：进程使用的共享内存 S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数 %CPU：进程占用CPU的使用率 %MEM：进程使用的物理内存和总内存的百分比 TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。 COMMAND：进程启动命令名称ps a 显示现行终端机下的所有程序，包括其他用户的程序。**看下某个进程跑在哪个端口** netstat -anp | grep sshd进程命令*实时监控，1秒刷新一次*watch -n 1 ps -aux --sort=-pmem,-pcpu 11 .常用配置 查看登陆失败日志grep “Failed password for root” /var/log/auth.log | awk ‘{print $11}’ | sort | uniq -c | sort -nr | more 防范措施修改登陆端口号sudo vi /etc/ssh/sshd_configPort 4484PermitRootLogin no 修改完成后重启ssh/etc/init.d/ssh restart 编码的修改更改locale为utf-8(ubuntu) vi ~/.bashrc add these linesexport LC_ALL=en_US.UTF-8export LANG=en_US.UTF-8export LANGUAGE=en_US.UTF-8 sudo locale-gen “en_US.UTF-8”sudo dpkg-reconfigure locales 添加XXX到环境变量todo 参考 文件大小查看命令 文件压缩命令 硬件查询 Python源码编译安装ss 源码编译安装ss 修改系统编码为utf-8","tags":[{"name":"置顶","slug":"置顶","permalink":"https://haldir65.github.io/tags/置顶/"}]},{"title":"使用AnnotationProcessor自动生成代码","date":"2016-12-31T14:42:15.000Z","path":"2016/12/31/2016-12-31-Eliminating-BoilPlate-AnnotationProcessor/","text":"记得Romain Guy在一次DroidCon上曾说过: As I understand, modern java development are all about wrting annaotation Processors and not wrting code anymore… 全场观众大笑。。。 这之后经常看到Jack Wharton在演讲中提到”My Hypothetical Annotation Processor…” ，后来才意识到像Retrofit，ButterKnife这些都是使用了注解的方式。 1. 原理介绍Annotation Processoring Tool是javac的一部分，它会在编译期生成新的.java文件（不是class文件）定义一个Annotation的语法如下：12345@Documented@Target(ElementType.TYPE) //这说明生成的注解能够放在class,interface,enum等类型上。不能放在method上@Retention(RetentionPolicy.SOURCE) //指明在编译器有效public @interface Builder &#123; //@interface就像class,interface,enum一样&#125; 2.Annotation Processor是生成新代码的实现类大致的实现例如：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162public class PojoStringProcessor extends AbstractProcessor &#123; private static final String ANNOTATION = \"@\" + PojoString.class.getSimpleName(); private static final String CLASS_NAME = \"StringUtil\"; private Messager messager; //有点像Logger,用于输出信息 private Filer filer //可以获得Build Path，用于生成文件 //public构造函数不写也会自动加上 // init做一些初始化操作 @Override public synchronized void init(ProcessingEnvironment processingEnv) &#123; super.init(processingEnv); messager = processingEnv.getMessager(); this.filer = processingEnv.getFiler(); &#125; //apt在检查被注解的class时，会返回你需要的注解类型 @Override public Set&lt;String&gt; getSupportedAnnotationTypes() &#123; return immutableSet.of(Builder.class.getCanonicalName()); &#125;true //java7,java8 有点像android的targetSdk Version @Override public SourceVersion getSupportedSourceVersion() &#123; return SourceVersion.latestSupported(); &#125; //重点 @Override public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123; ArrayList&lt;AnnotatedClass&gt; annotatedClasses = new ArrayList&lt;&gt;(); for (Element element : roundEnv.getElementsAnnotatedWith(PojoString.class)) &#123; TypeElement typeElement = (TypeElement) element; if (!isValidClass(typeElement)) &#123; return true; //apt找到的所有被注解的class &#125; try &#123; annotatedClasses.add(buildAnnotatedClass(typeElement)); &#125; catch (IOException e) &#123; String message = String.format(\"Couldn't process class %s: %s\", typeElement, e.getMessage()); messager.printMessage(Diagnostic.Kind.ERROR, message, element); e.printStackTrace(); &#125; &#125; try &#123; generate(annotatedClasses); &#125; catch (IOException e) &#123; messager.printMessage(Diagnostic.Kind.ERROR, \"Couldn't generate class\"); &#125; return true; &#125;&#125; 几个重要的方法解释下： roundEnv: apt分两步：1. apt发现被注解的代码，提供给我们写的processor，后者生成新的java代码(apt还未处理这部分新代码)。 apt发现新代码，提供给我们的Processor，不生成新代码。完成processing。（后面提供给编译） ServiceLoader Discovery File（这货在jar中）//META-INFO/services/javax.annotations.processing.Processor文件中写入com.example.annotation.BuilderProcessor// class包名//这里声明所有的processor，这里可以include别的processor 语法：12345678910app/build.gradledependencies&#123;truecompile project(': annotation')trueapt project (':processor')&#125;//apt 表示processor中的方法不会带到distributed apk中,方法数不用担心了//https://bitbucket.org/hvisser/android-apt//https://github.com/tbroyer/gradle-apt-plugin 继承AbstractProcessor，必须要有一个无参public构造函数 3. 生成新的java方法首先添加依赖，square的javaPoet 假设想生成的代码是这样的12345678910public final class UserBuilder&#123;truetrueprivate String userName;truepublic UserBuilder username(String username)&#123;truetruethis.username = username;truetruereturen this;true&#125;&#125; 生成变量 生成方法 生成class: 直接截图了 主要步骤 meta_data 生成private field和public setter: FiledSpec username = FiledSpec.builder(String.class,”username”,Modifier.PRIVATE).build(); 生成build method 生成builder 写java文件： 4. 注意的地方dnot’t put annotation processors in a compile configuration, use the Android Apt plugin。 if you using jack, jack has support for annotation processors. if it’s only a java, could use the Gradle Apt Plugin 我们写的processor不会带到生成的apk中，但生成的代码会。这也正是想要的目的。 ref android gradle plugin 2.3的兼容问题 Android沉思录 Droidcon NYC 2016 - @Eliminate(“Boilerplate”) Gradle Apt Plugin Andorid Apt Plugin","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"annotation","slug":"annotation","permalink":"https://haldir65.github.io/tags/annotation/"}]},{"title":"Python 3 学习记录","date":"2016-12-24T14:06:37.000Z","path":"2016/12/24/2016-12-24-Python-UnicodeEncodeError/","text":"人生苦短，Python是岸 1. Python的一些缺点引用廖雪峰的官方网站上的话，Python一个是慢，一个是代码不能加密 第一个缺点就是运行速度慢，和C程序相比非常慢，因为Python是解释型语言，你的代码在执行时会一行一行地翻译成CPU能理解的机器码，这个翻译过程非常耗时，所以很慢。而C程序是运行前直接编译成CPU能执行的机器码，所以非常快。 第二个缺点就是代码不能加密 GIL导致的多线程低效率 以下内容出自静觅 » Python爬虫进阶五之多线程的用法123456789101112131415161、GIL是什么？GIL的全称是Global Interpreter Lock(全局解释器锁)，来源是python设计之初的考虑，为了数据安全所做的决定。2、每个CPU在同一时间只能执行一个线程（在单核CPU下的多线程其实都只是并发，不是并行，并发和并行从宏观上来讲都是同时处理多路请求的概念。但并发和并行又有区别，并行是指两个或者多个事件在同一时刻发生；而并发是指两个或多个事件在同一时间间隔内发生。）在Python多线程下，每个线程的执行方式：获取GIL执行代码直到sleep或者是python虚拟机将其挂起。释放GIL可见，某个线程想要执行，必须先拿到GIL，我们可以把GIL看作是“通行证”，并且在一个python进程中，GIL只有一个。拿不到通行证的线程，就不允许进入CPU执行。在Python2.x里，GIL的释放逻辑是当前线程遇见IO操作或者ticks计数达到100（ticks可以看作是Python自身的一个计数器，专门做用于GIL，每次释放后归零，这个计数可以通过 sys.setcheckinterval 来调整），进行释放。而每次释放GIL锁，线程进行锁竞争、切换线程，会消耗资源。并且由于GIL锁存在，python里一个进程永远只能同时执行一个线程(拿到GIL的线程才能执行)，这就是为什么在多核CPU上，python的多线程效率并不高。 2. 安装package各种can’t resolve XXXno module named urllib2 The urllib2 module has been split across several modules in Python 3 named urllib.request and urllib.error. The 2to3 tool will automatically adapt imports when converting your sources to Python 3. This is what look like on py 2.7 1234567891011121314import urllib2req = urllib2.Request(url,headers=header)html = urllib2.urlopen(req)html_data = html.readhtml_path = etree.HTML(html_data) ``` on Python 3.X ```pythonfrom urllib.request import urlopenfrom urllib.request import Requestreq = Request(img_url, headers=headers)urlhtml = urlopen(req) 3. pip install XXXX安装package的方式 pip install xxxx…. if not working 4. List、tuple、dict、set以及基本的数据类型12345678910111213141516list mylist = ['Tom','Jerry','Henry'] mylist[0] = 'Tom'tuple mytuple = ('rock','pop','jazz') mytuple[0] = 'rock' tuple在初始化时就已经确定，不能修改dict: d=&#123;'name':'tom','job':'doctor','age',99&#125; d['name'] = 'tom'set: s = set([1,2,3]) # 需要传入一个list作为参数 &gt;&gt; s &#123;1,2,3&#125; set无序，不可有重复元素 set和dict的区别在于前者没有存储value，两者内部都不能有重复元素(key) tuple用的比较多，例如有多个返回值的函数，Python其实返回了一个Tuple。 类名应该写成驼峰样式，变量名应该小写class name should be cammelCase, Arguments,variable name should be lowercase 循环1234567891011 for i in range(2, 5): print(i)&gt;&gt;&gt; result: 2 3 4 左闭右开条件判断def add_end(L=None): if L is None: L = [] L.append('END') return L 函数参数相关，函数组合（一共五种）位置参数，默认参数，可变参数，关键字参数，命名关键字参数 定义一个函数可以带上默认值，默认值是一个固定的对象，上次操作的值会保留到下一次调用12345678def sell(name,price,amount=1): print(price*amount)sell('product',26)sell('product',26,2)&gt;&gt;&gt; 26 &gt;&gt;&gt; 52 默认参数函数123456789def power(x, n=2): #这里的n=2就是默认参数，注意，默认参数应该是不可变对象,例如str、None这种 s = 1 while n &gt; 0: n = n - 1 s = s * x return spower(5) &gt;&gt; 25power(5,2) &gt;&gt;&gt;25 可变参数函数# 定义的时候在参数前面加一个*号就可以了，内部会默认组装成一个tuple123456789101112def calc(*numbers): #函数内部接收到的是一个tuple sum = 0 for n in numbers: sum = sum + n * n return sumcalc(1,2)calc(2,3,5) nums = [1,2,3]cal(*nums)#把tuple内的元素作为参数传进去 关键字参数1234567def person(name, age, **kw): print('name:', name, 'age:', age, 'other:', kw)&gt;&gt;&gt; person('Michael', 30)name: Michael age: 30 other: &#123;&#125;内部自动将关键字参数转换成一个dict 命名关键字函数12345def shoppping(name,time,*,price,count)# price可以有默认值 print(price*count)&gt;&gt; shopping(john,0325,price=39,count=5)&gt;&gt; 195 5. 爬虫相关Chrome自带开发者工具，可以查看每一个request的header，cookies等信息。模拟浏览器行为比较有效。 todo 6.一些细节文件读写的各种模式以及解码问题123with open(filepath, 'r', encoding=\"utf8\") as f: f.write('最好用utf8读和写文件') #已经自动做好close文件的工作 grep log in command consolebasic grammarsnetwork, disk ,database, io , dic, list ,etcclass object orientated Reference 廖雪峰的官方网站 use python and mongoDb as backend 静觅","tags":[{"name":"python","slug":"python","permalink":"https://haldir65.github.io/tags/python/"}]},{"title":"wrap_content到底多大","date":"2016-11-27T08:46:44.000Z","path":"2016/11/27/2016-11-27-the-size-of-wrap-content/","text":"转眼就十一月了，java的分析越来越少，虽然常常在业务上碰到不少坑。。。 问题的由来这周碰到一个需要画时间轴样式的自定义View的需求，大概像这样(图片来自网络)： 要求，左侧的圆形节点可以自定义Drawable，右侧的文字高度随文字数量变化自适应。 想想也就是自定义ViewGroup的那一套老样子。抄起键盘就开始研(Copy)究(Paste)，写着写着发现不对劲，主要的问题包括: 在onMeasure里面拿到的height == 0 , 具体一点就是:整个ViewGroup包含多个Item，每个Item包括左侧的自定义View(CustomView)，高度是wrap_content，右边的TextView高度是wrap_content(自适应嘛)。可是debug时发现左侧的自定义View拿到的高度是0，简直日了哈士奇了。随后拿着关键词去Google搜索，还是没有什么收获。 123456protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; final int widthMode = MeasureSpec.getMode(widthMeasureSpec); final int heightMode = MeasureSpec.getMode(heightMeasureSpec);// 这里是UNSPECIFIED, 常规概念里wrap_content对应的应该是AT_MOST final int widthSize = MeasureSpec.getSize(widthMeasureSpec); final int heightSize = MeasureSpec.getSize(heightMeasureSpec); // 居然等于0 &#125; 回顾这个Item的实现，Item继承自RelativeLayout，左边的View是调用addView(view,RelativeLayout.Layoutparams)加进去的,params设置了一些rules，像是AlignParentLeft这种，记得给左边的View和右边的TextView都设置一个id就好。TextView也是这样addView进去的。后来查到了秋百万对于MeasureSpec的介绍，我想到RelativeLayout的onMeasure会调用两次，在第一次测量的时候，左边的View和右边的TextView都把高度设置为wrap_content了。要命的是这个Item本身添加到UI的方式也是类似的addView(view,RelativeLayout.Layoutparams)方式，这里的height也是wrap_content。即Item本身高度需要由其child决定，左边的child决定不了，只有右边的TextView才能决定。所以第一轮测量下来，左边的View的高度只能是0，右边的TextView高度倒是确定了。这时候Item本身的高度也就能确定了。在第二遍测量的时候，就能顺利拿到高度了。 左侧的每个节点上的drawable不画出来后来查了下，原因在于我对传进来的drawable检查了大小，太大的话用一个ScaleDrawable转一下。但是，scaleDrawable需要调用setLevel方法才会draw，我这里偷懒直接设置为1了。 Item本身是继承自RelativeLayout，想要使onDraw方法被调用需要在构造函数里设置setWillNotDraw(false)这个boolean值默认是true，主要是顾及到性能的原因。 ref How Android caculates view size","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"Windows10平台安装lxml记录","date":"2016-10-31T07:49:38.000Z","path":"2016/10/31/2016-10-31-install-lxml-on-windows/","text":"前几天尝试使用一个简单的微博爬虫进行操作，导包的时候遇到lxml缺失的问题，找了好久最终在百度知道上找到个能用的，(⊙﹏⊙)b。 1. 环境 python2.7, win10 64位 pip 环境变量配置 2. 开始 cmd 命令行敲入 pip install wheel 准备lxml安装文件下载地址我的是win10 64位，选择 lxml-3.4.2-cp27-none-win_amd54.xhl 下载完成后放到 c:\\python27\\文件夹下 命令行敲入 pip install c:\\python27\\lxml…(刚才的文件名) 最后会提示 successfully installeed lxml-3.4.2 这时候关闭pycharm project，重新打开就可以看到导入成功了。 ref 百度有时候也是挺管用的","tags":[{"name":"Python","slug":"Python","permalink":"https://haldir65.github.io/tags/Python/"}]},{"title":"android-Ultra-pull-to-refresh分析","date":"2016-10-24T02:25:35.000Z","path":"2016/10/24/2016-10-24-a-peek-on-pull-to-refresh/","text":"最早开始接触安卓的时候就知道有Chris Banes的Pull-To-Refresh，当时这个库已经被标记被Deprecated了，后来出于寻找替代品的目的找到了秋百万的android-Ultra-pull-toRefresh，直接 当时甚至没有能力把一个Demo跑起来。之后的项目中，直接使用swipeRefreshLayout了。现在回头看，终于觉得可以尝试着分析一遍整个下拉刷新的过程。本文只针对android-Ultra-pulltoRefresh部分源码进行分析。拆一个轮子可能只需要花一天时间，但能够从无到有构思出这个框架，将项目搭建起来并且坚持长期维护真的是一件需要很强毅力的事情，向为开源社区贡献优秀代码的秋百万和众多做出贡献的开发者致敬。 1. 从Demo开始吧从github clone下来之后，改一下gradle版本，compile sdk version什么的就可以运行项目自带的Demo了.MainActivity 添加了一个PtrDemoHomeFragment,onCreateView里面返回的View对应的xml文件为fragment_ptr_home.xml123456789101112131415161718192021222324252627282930&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\"&gt; &lt;in.srain.cube.views.ptr.PtrFrameLayout android:id=\"@+id/fragment_ptr_home_ptr_frame\" xmlns:cube_ptr=\"http://schemas.android.com/apk/res-auto\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" cube_ptr:ptr_duration_to_close=\"200\" cube_ptr:ptr_duration_to_close_header=\"1000\" cube_ptr:ptr_keep_header_when_refresh=\"true\" cube_ptr:ptr_pull_to_fresh=\"false\" cube_ptr:ptr_ratio_of_header_height_to_refresh=\"1.2\" cube_ptr:ptr_resistance=\"1.7\"&gt; &lt;ScrollView android:id=\"@+id/fragment_block_menu_scroll_view\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@color/cube_mints_white\"&gt; &lt;in.srain.cube.views.block.BlockListView android:id=\"@+id/fragment_block_menu_block_list\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:padding=\"@dimen/cube_mints_content_view_padding\" /&gt; &lt;/ScrollView&gt; &lt;/in.srain.cube.views.ptr.PtrFrameLayout&gt;&lt;/LinearLayout&gt; 默认主页已经可以下拉刷新了，那么主要的事件拦截操作应该就在这个ptrFrameLayout里面 2. PtrFrameLayout源码从注释来看 This layout view for “Pull to Refresh(Ptr)” support all of the view, you can contain everything you want. support: pull to refresh / release to refresh / auto refresh / keep header view while refreshing / hide header view while refreshing It defines {@link in.srain.cube.views.ptr.PtrUIHandler}, which allows you customize the UI easily. 能够容纳各种View，同时支持下拉刷新，下拉释放刷新，自动刷新，刷新时保留刷新动画，刷新时隐藏刷新动画 一步步来看 构造函数 1234567891011121314151617181920212223public class PtrFrameLayout extends ViewGroup &#123; public PtrFrameLayout(Context context, AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); //删除无关代码 TypedArray arr = context.obtainStyledAttributes(attrs, R.styleable.PtrFrameLayout, 0, 0); if (arr != null) &#123; mHeaderId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_header, mHeaderId); // HeaderView的layout文件id mContainerId = arr.getResourceId(R.styleable.PtrFrameLayout_ptr_content, mContainerId); // contentView的layout文件id mDurationToClose = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close, mDurationToClose);// 维持刷新动画多久开始关闭HeaderView mDurationToCloseHeader = arr.getInt(R.styleable.PtrFrameLayout_ptr_duration_to_close_header, mDurationToCloseHeader); float ratio = mPtrIndicator.getRatioOfHeaderToHeightRefresh(); ratio = arr.getFloat(R.styleable.PtrFrameLayout_ptr_ratio_of_header_height_to_refresh, ratio); mKeepHeaderWhenRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_keep_header_when_refresh, mKeepHeaderWhenRefresh); mPullToRefresh = arr.getBoolean(R.styleable.PtrFrameLayout_ptr_pull_to_fresh, mPullToRefresh); arr.recycle(); &#125; //ViewConfiguration很常见了，mTouchSlop用于判断用户操作手势是否有效 final ViewConfiguration conf = ViewConfiguration.get(getContext()); mPagingTouchSlop = conf.getScaledTouchSlop() * 2; &#125;&#125; 构造函数里面主要就是获得在xml中设定的一些自定义属性的值并保存为成员变量，实际用途后面再看。 onFinishInflate这个方法在inflate xml文件结束，所有的childView都已经添加之后调用PtrFrameLayout复写了这个方法， 首先检查ChildView数量，如果childCount &gt;2 会报错 然后检查两个child(这里主要看childCount=2的情况下)123456789//省略若干if (child1 instanceof PtrUIHandler) &#123; mHeaderView = child1; mContent = child2; &#125; else if (child2 instanceof PtrUIHandler) &#123; mHeaderView = child2; mContent = child1; &#125; //省略若干 来看一下这个ptrUIHandler12345678910111213141516171819202122232425262728public interface PtrUIHandler &#123; /** * When the content view has reached top and refresh has been completed, view will be reset. * * @param frame */ public void onUIReset(PtrFrameLayout frame); /** * prepare for loading * * @param frame */ public void onUIRefreshPrepare(PtrFrameLayout frame); /** * perform refreshing UI */ public void onUIRefreshBegin(PtrFrameLayout frame); /** * perform UI after refresh */ public void onUIRefreshComplete(PtrFrameLayout frame); public void onUIPositionChange(PtrFrameLayout frame, boolean isUnderTouch, byte status, PtrIndicator ptrIndicator);&#125; 大概可以猜到这货是用来指定下拉过程中的刷新开始，刷新结束，刷新结束后复位等过程的实现者，具体的下拉过程中的动画，位移等特效都应该由这接口的实例(View)来完成。 onMeasure1234567891011121314151617181920@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; super.onMeasure(widthMeasureSpec, heightMeasureSpec); //省略... measureContentView(mContent, widthMeasureSpec, heightMeasureSpec); &#125; private void measureContentView(View child, int parentWidthMeasureSpec, int parentHeightMeasureSpec) &#123; final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams(); final int childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec, getPaddingLeft() + getPaddingRight() + lp.leftMargin + lp.rightMargin, lp.width); final int childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec, getPaddingTop() + getPaddingBottom() + lp.topMargin, lp.height); child.measure(childWidthMeasureSpec, childHeightMeasureSpec); &#125; 主要就是调用了measureContentView方法，都是很中规中矩的实现 onLayout代码就不贴了，根据LayoutParams计算出需要的margin,最主要的Top是由 int offset = mPtrIndicator.getCurrentPosY(); 获得的，mPterIndicator是一个单独的组件，用于保存一些实时状态。滑动过程中如果有动画效果，会走到这个方法里，所以及时更新最新的位置很重要，ptr将这一功能剥离出来，这大概就是我所理解的解耦吧。 dispatchTouchEvent主要的手势处理逻辑都在这里，关于TouchEvent的分发处理，这里不再赘述。简单列出执行顺序: ViewGroup.dispatchTouchEvent—-ViewGroup.onInterceptTouchEvent—View.dispatchTouchEvent—– etc 、、、、 简书上有作者写出了非常好的关于TouchEvent分发的文章，忘记了的话可以去看看。来看这部分的实现，有删节123456789101112131415161718192021222324252627282930313233343536373839404142434445@Override public boolean dispatchTouchEvent(MotionEvent e) &#123; //..... switch (action) &#123; case MotionEvent.ACTION_UP: case MotionEvent.ACTION_CANCEL: if (mPtrIndicator.hasLeftStartPosition()) &#123; onRelease(false); //手指抬起后的操作 // ...... return dispatchTouchEventSupper(e); &#125; else &#123; return dispatchTouchEventSupper(e); &#125; case MotionEvent.ACTION_DOWN: //取消之前还在运行的Scroller等等。。 // The cancel event will be sent once the position is moved. // So let the event pass to children. // fix #93, #102 dispatchTouchEventSupper(e); return true;//这里返回true，child将会受到ACTION_CANCEL case MotionEvent.ACTION_MOVE: mLastMoveEvent = e; //这里实时更新装填 mPtrIndicator.onMove(e.getX(), e.getY()); float offsetX = mPtrIndicator.getOffsetX(); float offsetY = mPtrIndicator.getOffsetY(); boolean moveDown = offsetY &gt; 0; boolean moveUp = !moveDown; boolean canMoveUp = mPtrIndicator.hasLeftStartPosition(); // disable move when header not reach top if (moveDown &amp;&amp; mPtrHandler != null &amp;&amp; !mPtrHandler.checkCanDoRefresh(this, mContent, mHeaderView)) &#123; return dispatchTouchEventSupper(e); &#125; if ((moveUp &amp;&amp; canMoveUp) || moveDown) &#123; movePos(offsetY); //实现滑动操作的代码 return true;// 后续事件将只会走到此方法，不会再往下传递，直到ACTION_UP，本次手势结束 &#125; &#125; return dispatchTouchEventSupper(e); &#125; 用户手指按下。。。。。手指滑动。。。。。手指抬起 ACTION_DOWN : 手指按下后将TouchEvent交给mPtrIndicator处理，后者保留了当前ptr的位置，高度等信息。在执行ACTION_DOWN时，并没有简单地使用Event.getY，而是保留了当前position的一个备份(这是必要的，因为对于下拉刷新来说，最终需要回到的位置是0，而用户按下的位置可能在contentView比较靠下面的位置。ACTION_DOWN的getY并没有太大意义)。随后调用Scroller的 mScroller.forceFinished(true)方法停止滑动，如果定义了页面自动刷新(就是进来会下拉刷新一次)，还会调用onRelease(true)方法，onRelease方法与ACTION_UP相关。 ACTION_MOVE : 手指开始在屏幕上滑动，首先将滑动距离的改变保留到mPtrIndicator中，这里作者将很多坐标计算的方法都拆出来放到这个mPtrIndicator中，暴露出get方法，也使得代码更清晰。在开始滑动之前，先检查下是否是横向滑动，以及是否在(mDisableWhenHorizontalMove，ViewPager需要消费横向手势，这个标志符是为了return super)。往下走，来看这一段123boolean moveDown = offsetY &gt; 0; 新的Event中的y值和mptrIndicator中保留的当前y的差值，所以手指往下拉的话，offset &gt;0,也就是这里的moveDownboolean moveUp = !moveDown;boolean canMoveUp = mPtrIndicator.hasLeftStartPosition()// 检查下当前Event中的y是否大于0，即内容区域是否已经往下走了一点了 接下来，再次询问mPtrHandler能否DoRefresh,将自身和ChildView都交出去，所以可操作性很大大部分的情况下，直接使用一个 return PtrDefaultHandler.checkContentCanBePulledDown(frame, content, header); 使用了一个类似于ViewCompat.canScollVertically的方法，但判断下如果是AbstractListView的话，会调用getFirstVisiblePosition等方法，因为AdapterView能否滑动应该是由其内容能否滑动来决定的。如果这个方法返回true。接着往下走，开始执行View的滑动方法:判断下是否手指在往上拉(moveUp &amp;&amp; canMoveUp)或者往下拉(moveDown),return true，首先事件就不会再往下走，另外后续的ACTION_MOVE_ACTION_UP都只会传递到这个dispatchTouchEvent中实现滑动操作的代码最后会执行这里1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859private void updatePos(int change) &#123; boolean isUnderTouch = mPtrIndicator.isUnderTouch(); // once moved, cancel event will be sent to child if (isUnderTouch &amp;&amp; !mHasSendCancelEvent &amp;&amp; mPtrIndicator.hasMovedAfterPressedDown()) &#123; mHasSendCancelEvent = true; sendCancelEvent(); &#125; // leave initiated position or just refresh complete if ((mPtrIndicator.hasJustLeftStartPosition() &amp;&amp; mStatus == PTR_STATUS_INIT) || (mPtrIndicator.goDownCrossFinishPosition() &amp;&amp; mStatus == PTR_STATUS_COMPLETE &amp;&amp; isEnabledNextPtrAtOnce())) &#123; mStatus = PTR_STATUS_PREPARE; mPtrUIHandlerHolder.onUIRefreshPrepare(this);//刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。这个Holder的结构类似于一个链表，一个Holder里面有UIHandler，以及下一个Holder(next)。作用类似于一个集合，等于作者自己实现了这样一个不断循环的消息列表(看起来挺像Message的)。这个Holder的作用在于可以动态添加UIHanlder，相对应的方法都做好了(addHandler)。 //再次强调，这里表示**刚开始往下移一点点或者刚刚从下面回到0的位置，可以认为是下拉刷新刚开始和刚结束的时候。此时的状态为STATUS_PREPARED** &#125; // back to initiated position if (mPtrIndicator.hasJustBackToStartPosition()) &#123; tryToNotifyReset(); //**刚刚从下面回到0的位置，通知UIHandler的onUIReset()方法,此时的状态为STATUS_INIT** //将整个过程划分的真详细 // recover event to children，虽然手指还在屏幕上，处于ACTION_MOVE，但这里由于已经复位，需要把ACTION_DOWN传递下去，这一段比较复杂。 if (isUnderTouch) &#123; sendDownEvent(); &#125; &#125; // Pull to Refresh if (mStatus == PTR_STATUS_PREPARE) &#123;//从上到下依次为0 ， 出现动画临界值， HeadView高度 // reach fresh height while moving from top to bottom if (isUnderTouch &amp;&amp; !isAutoRefresh() &amp;&amp; mPullToRefresh // 手指还在屏幕上，不是自动刷新且允许ptr且到达了下滑出现动画效果的临界值，条件还是比较苛刻的 &amp;&amp; mPtrIndicator.crossRefreshLineFromTopToBottom()) &#123; tryToPerformRefresh(); &#125; // reach header height while auto refresh if (performAutoRefreshButLater() &amp;&amp; mPtrIndicator.hasJustReachedHeaderHeightFromTopToBottom()) &#123;//刚刚超过headerView高度一丁点 tryToPerformRefresh(); &#125; &#125; //tryToPerformRefresh()方法判断mPtrIndicator.isOverOffsetToRefresh()，满足条件的话进入STATUS_LOADING，这个时候就要开始让动画run了。所以这里调用的是 mPtrUIHandlerHolder.onUIRefreshBegin(this);和mPtrHandler.onRefreshBegin(this);前者是后来手动添加的UIHandler，后者则是在onInFlateFinish中自行判断的，这两个都会被执行。这里扯一句，这个Holder就像一个中间层，持有了UIHandler,所有方法都调用的是后者HanldleUI的方法。facade模式？ // 终于看到实际调用View滑动的代码了，让一个View滑动的方式有很多种，这里采用的是改变X,Y的方式(X = left+translationX;Y = top+translationY) mHeaderView.offsetTopAndBottom(change); if (!isPinContent()) &#123; mContent.offsetTopAndBottom(change); &#125; invalidate();??我觉得这里好像没有必要这么频繁的调这一句话 //移动完成之后通知UIHandlerHolder位置改变了，没有通知mUIHandler是因为后者就是mContent和mHeaderView。 if (mPtrUIHandlerHolder.hasHandler()) &#123; mPtrUIHandlerHolder.onUIPositionChange(this, isUnderTouch, mStatus, mPtrIndicator); &#125; onPositionChange(isUnderTouch, mStatus, mPtrIndicator);//最后还预留了一个onPositionChange的空方法，子类可能会有点用吧 &#125; 到这里，ACTION_MOVE已经研究完毕，大部分的分析都在注释里面，只要分清楚滑动过程中的各种STATUS，我觉得还是比较好理解的。MOVE过程中伴随着距离的变化，ptr也进入不同的status，ptr本身其实只做了移动headrView和childView的工作，实际的动画效果等等都是由UIHanlder拿着ptr的实例去做的。关于能够滑动多少距离的问题，由于这里并没有判断，所以，这个contentView的下滑是没有下限的，不过在xml里面有一个自定义的resistance，相当于阻力系数了，设置大一点的话就不会出事。目前手指还在屏幕上，status等于STATUS_PREPARED或者STATUS_LOADING。借用手机评测那帮人的话来说，跟手 ACTION_UP： mPtrIndicator中的mPressed设置为false，标示下当前手指已经不按在屏幕上了。如果这时候的位置&gt;0，就是contentView还没有复位，需要想办法让它”弹回来”，这部分工作交给了onRelease(false)，这个false我猜肯定是后面加上去的(查了下git log果然。。。)。来看OnRelease:123456789101112131415161718192021222324private void onRelease(boolean stayForLoading) &#123; tryToPerformRefresh();//会检查下当前status!=STATUS_PREPARED的话直接return false，就是不是在刚开始或刚复位的情况下不做；否则继续执行performRefresh操作，其实这样想也符合常理，手指离开了屏幕，ptr应该能够自我判断是否还需要执行动画 if (mStatus == PTR_STATUS_LOADING) &#123; // keep header for fresh if (mKeepHeaderWhenRefresh) &#123; // scroll header back if (mPtrIndicator.isOverOffsetToKeepHeaderWhileLoading() &amp;&amp; !stayForLoading) &#123;//已经过了需要加载动画的位置，statyForLoading这里传进来的是false mScrollChecker.tryToScrollTo(mPtrIndicator.getOffsetToKeepHeaderWhileLoading(), mDurationToClose);//滑动到加载动画的位置，这里面是不断地post一个runnable，在run方法里面调用之前和ACTION_MOVE里面一样的那个movePos方法，所以重用性还好。也会通知相应的UIHandler或者UIHandlerHolder &#125; else &#123; // do nothing &#125; &#125; else &#123; tryScrollBackToTopWhileLoading();//这里会一直滑动到0的位置，其实也是不断调用updatPos方法，会将STATUS重置为STATUS_INIT或者STATUS_PREPARED &#125; &#125; else &#123; if (mStatus == PTR_STATUS_COMPLETE) &#123;//STATUS_COMPLETE通常由外部调用者调用refreshComplete public 方法设置，相当于SwipeRefreshLayout的setRefreshing()，否则将一直停留在加载状态。也就是说需要调用者手动设置关闭，这也符合常理，因为加载本身是需要时间的，把这个设置的时机交给开发者来手动设置几乎是唯一的选择。 notifyUIRefreshComplete(false); &#125; else &#123; tryScrollBackToTopAbortRefresh(); &#125; &#125; &#125; 到此，ptr内部只剩下一些getter和setter了，不再解释，结合Demo使用就会有所体会。 3. 总结ptr的本质就是通过ViewGroup的dispatchTouchEvent将事件拦截在内部进行处理，并将事件过程分发给几个自定义的接口。而内部又添加了一些自定义的变量，并给出getter和setter，使得外部调用者使用起来十分轻松。只要掌握好事件分发处理和View的绘制流程，拆起来还算简单。当然，如果在实际项目中碰到了类似的需求，我倾向于定制一个简单一点的小工具。","tags":[{"name":"置顶","slug":"置顶","permalink":"https://haldir65.github.io/tags/置顶/"}]},{"title":"让service常驻后台的方法","date":"2016-10-20T13:35:10.000Z","path":"2016/10/20/2016-10-20-android-dirty-code/","text":"今天在V2EX上看到有人提到Notification有漏洞，好奇也就查了一下，结果发现有人专门针对这个问题进行了分析。本身的技术分析并不多，写在这里只是为了作为今后的一个参考。 1. 问题的由来Android对后台应用是有一个权重区分的，最直观的就是查看最近使用的应用，这里每一个应用可能有一个或者多个Process，而系统在资源紧张时会干掉一些Process，而决定后台应用生死的是一个Lru List，也就是least recently used 会被干掉。显然大家都不希望自己被干掉，DAU对于很多应用来说是优先于系统资源和用户体验的。根据官方文档,Android Process有五种，根据优先级从高到低为: 前台进程 可见进程 服务进程 后台进程 空进程 越靠前的进程就越不容易被系统干掉，所以大家都希望能够成为前台进程。成为前台进程的条件:1234567用户当前操作所必需的进程。如果一个进程满足以下任一条件，即视为前台进程：托管用户正在交互的 Activity（已调用 Activity 的 onResume() 方法）托管某个 Service，后者绑定到用户正在交互的 Activity托管正在“前台”运行的 Service（服务已调用 startForeground()）托管正执行一个生命周期回调的 Service（onCreate()、onStart() 或 onDestroy()）托管正执行其 onReceive() 方法的 BroadcastReceiver通常，在任意给定时间前台进程都为数不多。只有在内在不足以支持它们同时继续运行这一万不得已的情况下，系统才会终止它们。 此时，设备往往已达到内存分页状态，因此需要终止一些前台进程来确保用户界面正常响应。 以上条件只有startForeground满足条件了，但大家都知道startForeground会在通知栏常驻一个Notification，且用户取消不了。对于我这种强迫症来说实在是太丑。 2. startForeground一定会在系统状态栏显示一个通知，真的吗?12void startForeground (int id, Notification notification) 我找到了G+上的Chris Banes的一篇post，这其中明确指出1Unfortunately there are a number of applications on Google Play which are using the startForeground() API without passing a valid notification. While this worked in previous versions of Android, it is a loophole which has been fixed in Android 4.3. The system now displays a notifications for you automatically if you do not provide a valid one. 也就是说，API 18以前，只需要提供一个无效的Notification就可以让Notification不显示了。所以，判断下API&lt;18的时候，直接new Notification()就可以得到一个不完整的Notification.文章也指出了这是一个Loophole（已经是个贬义词了）。Api 18之后的修复措施，看ServiceRecord的源码: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879public void postNotification() &#123; final int appUid = appInfo.uid; final int appPid = app.pid; if (foregroundId != 0 &amp;&amp; foregroundNoti != null) &#123; // Do asynchronous communication with notification manager to // avoid deadlocks. final String localPackageName = packageName; final int localForegroundId = foregroundId; final Notification localForegroundNoti = foregroundNoti; ams.mHandler.post(new Runnable() &#123; public void run() &#123; NotificationManagerService nm = (NotificationManagerService) NotificationManager.getService(); if (nm == null) &#123; return; &#125; try &#123; if (localForegroundNoti.icon == 0) &#123; // It is not correct for the caller to supply a notification // icon, but this used to be able to slip through, so for // those dirty apps give it the app's icon. localForegroundNoti.icon = appInfo.icon; // Do not allow apps to present a sneaky invisible content view either. localForegroundNoti.contentView = null; localForegroundNoti.bigContentView = null; CharSequence appName = appInfo.loadLabel( ams.mContext.getPackageManager()); if (appName == null) &#123; appName = appInfo.packageName; &#125; Context ctx = null; try &#123; ctx = ams.mContext.createPackageContext( appInfo.packageName, 0); Intent runningIntent = new Intent( Settings.ACTION_APPLICATION_DETAILS_SETTINGS); runningIntent.setData(Uri.fromParts(\"package\", appInfo.packageName, null)); PendingIntent pi = PendingIntent.getActivity(ams.mContext, 0, runningIntent, PendingIntent.FLAG_UPDATE_CURRENT); localForegroundNoti.setLatestEventInfo(ctx, ams.mContext.getString( com.android.internal.R.string .app_running_notification_title, appName), ams.mContext.getString( com.android.internal.R.string .app_running_notification_text, appName), pi); &#125; catch (PackageManager.NameNotFoundException e) &#123; localForegroundNoti.icon = 0; &#125; &#125; if (localForegroundNoti.icon == 0) &#123; // Notifications whose icon is 0 are defined to not show // a notification, silently ignoring it. We don't want to // just ignore it, we want to prevent the service from // being foreground. throw new RuntimeException(\"icon must be non-zero\"); &#125; int[] outId = new int[1]; nm.enqueueNotificationInternal(localPackageName, localPackageName, appUid, appPid, null, localForegroundId, localForegroundNoti, outId, userId); &#125; catch (RuntimeException e) &#123; Slog.w(ActivityManagerService.TAG, \"Error showing notification for service\", e); // If it gave us a garbage notification, it doesn't // get to be foreground. ams.setServiceForeground(name, ServiceRecord.this, 0, null, true); ams.crashApplication(appUid, appPid, localPackageName, \"Bad notification for startForeground: \" + e); &#125; &#125; &#125;); &#125; &#125; 单单是看注释大概能看出来Android团队对于这种做法的不满。所以如果不提供有效Notification，则显示你的App的Icon。所以Api 18以上一定会显示一个Notification。 然而套路还是太深。。。。又有人给出了API 18以上的解决办法:我在这里找到了新的方法，简单来说就是起两个Service，两个Service都在一个进程里。先Start A Service ，onCreate里面 bind B Service，在onServiceConnected的时候A service startForeground(processId,notification)B service startForeground(processId,notification)随后立即调用B service stopForeGround(true)由于两个Notification具有相同的id，所以A service最终成为Foreground Service，Notification也被清除掉了。 3.最后整个过程看下来，API 18以下，给一个不完整的Notification(比如new Notification())，就不会出现在通知栏；API 18以上，起两个Service，B Service负责取消Notification就可以了。目前看来，国内很多App为了保活，都采取了类似的方式。而整体技术层面的实现并不难，只是利用了一个又一个小漏洞罢了。所谓脏代码不过是技术上做的一些欺骗系统的手段，作为开发者，理应明白谷歌设计这一套系统是为了更好的提升用户体验（占据市场）。然而在当前国内应用开发环境下，我们真的能够为用户考虑考虑吗，或者说，我们提交的代码能吗？ Reference 支付宝后台不死的黑科技 Android的startForeground前台Service如何去掉通知显示","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"自定义LayoutManager","date":"2016-10-20T08:37:42.000Z","path":"2016/10/20/2016-10-20-write-your-own-layoutmanager/","text":"1. 系统为我们提供了LinearLayoutManager、GridLayoutManager和StaggeredGridLayoutManager。基本用法都很简单，这里记录一些重要的用法 GridLayoutManager可以设置某个Item在某一行占据的Column num（VERTICAL的情况下）代码如下:1234567891011GridLayoutManager manager = new GridLayoutManager( this,2 ,GridLayoutManager.VERTICAL,false) manager.setSpanSizeLookup()&#123; new GridLayoutManager.SpanSizeLookup()&#123; @override public int getSpanSize(int position)&#123; return (position % 3 == 0 ? 2 : 1) &#125; &#125; &#125; 所以，一开始可以把这个2设置大一点，后面可以动态设置，看上去就会造成一种多种格子的错觉。 GridLayoutManger的同一行的ItemView的itemHeight必须一致，否则同一行的ItemView底部会出现空隙。这种情况请使用StaggeredGridLayoutManager 2. LayoutManager &lt;——-&gt; Recycler &lt;——–&gt; AdapterLayoutManager永远永远永远不要碰Adapter!!! 3.Recycler构造Recycler内部有两个集合: Scrap Heap ： detachAndScrapView() 暂时不用的View丢到这里，随时取回使用 Recycle Pool: removeAndRecycleView() 确定不需要的View丢到这里，拿回来时position或者data变了 4.FillGaps,最重要的方法 Discover firstVisible position/location 找到layout Gaps 1findFirstVisiblePosition Scrap everything(丢到ScrapHeap) 1234567891011121314/** * Temporarily detach and scrap all currently attached child views. Views will be scrapped * into the given Recycler. The Recycler may prefer to reuse scrap views before * other views that were previously recycled. * * @param recycler Recycler to scrap views into */ public void detachAndScrapAttachedViews(Recycler recycler) &#123; final int childCount = getChildCount(); for (int i = childCount - 1; i &gt;= 0; i--) &#123; final View v = getChildAt(i); scrapOrRecycleView(recycler, i, v); &#125; &#125; Lay out all visible positions 123456789for(...)&#123; int nextPosition = ...; View view = recycler.getViewForPosition(nextPosition); addView(view); //注意这里的Measure和Layout不是平时使用的measureChild和layout方法，原因是ItemDecoration measureChildWithMargin(view,...) layoutDecorated(view,....) &#125; Recycle remaining views123456final List&lt;RecyclerView.ViewHolder&gt; scrapList = recycler.getScrapList();for(int i=0;i&lt;scrapList.size;i++)&#123; final View removingView = scrapList.get(i); recycler.recycleView(removingView); &#125; 注意: 丢到RecyclerPool的View的viewHolder、LayoutParams都被清除掉 4. Scroll事件123456789public int scrollHorizontallyBy(int dx, RecyclerView.Recycler recycler, RecyclerView.State state) &#123;//dx 表示系统根据传入的TouchEvent告诉你应该滑动多少dx &lt;0 内容向右滑动dx &gt; 0内容向左滑动//这个正负号和ScrollBy那个是一样的邪门//返回值是你告诉系统你实际滑动了多少offsetChildrenHorizontal(delta);//调用该方法会帮助你移动所有的ChildView，比一个个Iterate方便多了&#125; 5.notifyDataSetChanged()调用了什么函数最终会走到onLayoutChildren这里面，就跟重新走一遍layout就可以了 6.ScrollToPosition()和SmoothScrollToPosition()两者的实现的不同:scrollToPosition:Track Requested Position、Trigger requestLayoutSmoothscrollToPosition: Create a SmoothScroller instance、Set the Target Position、invoke startSmoothScrollSmoothScroller是一个接口，在里面实现computeScrollVectorForPosition返回需要到达的位置 7. supportPredictiveItemAnimation主要用于ItemChange Animation主要在发生变化时展示动画。如果想要在滑动过程中展示动画的话，可以考虑在onViewAttachedToWindow或者onBindViewHolder里面给View添加TranslationX（从左边出来），Alpha(透明度从0变成1)，或者ScaleX等等 Reference Dave Smith 500px","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"使用RecyclerView的Animation","date":"2016-10-20T08:16:49.000Z","path":"2016/10/20/2016-10-20-RecyclerViewAnimationStuff/","text":"From the talkRecyclerView Animations and Behind the ScenesYigit Biyar &amp; Chet Haaseon Anroid Dev Summit 2015 1. RecyclerView架构RecyclerView is Flexible , Pluggable and Customizeable内部很多功能都交给了各个组件去完成ChildHelper 、AdapterHelper 、Recycler对于开发者来说并不常用，但它们在内部负责了许多针对Child View的管理。 ViewHolder的创建1 .LayoutManager首先检查getViewForPosition，RecyclerView查找Cache(getViewForPosition)，如果找到了。直接交给LayoutManager,这一过程甚至不需要与Adapter接触。 如果Cache中未找到，RecyclerView调用Adpter的getViewType，并去Recycled Pool中getViewHolderByType。 如果在Pool中未找到，RecyclerView将调用Adapter的createViewHolder。 如果在Pool中这种Type的ViewHolder已经有了，或者步骤3中创建了一个新的viewHolder，bindViewHolder并交给LayoutManager。 最终LayoutManager将把这个View添加到UI，这时会调用RecyclerView的onViewAttachedToWindow回调（生命周期）。 ViewHolder的回收(Reserves) LayoutManager调用removeAndRecycleView，RecyclerView会在这里收到回调onViewDetachedFromWindow 检查这个View.isValid。这一点很重要，在scroll过程中，如果一个View是Valid的话，可以将View添加到Cache中，随后可以简单将其复用。Cache将会invalidate oldest one，并告诉Adapter(onViewRecycled)。 如果不是Valid的View，将会被添加到Pool中，Adapter会收到onViewRecycled回调。 ViewHolder的另一种更好的回收方式(Fancy Reserves!) LayoutManager调用onLayoutChildren Layout完成后，RecyclerView检查那些之前已经被layout了的但不再存在于屏幕上了。RecyclerView将这些View重新添加到ViewGroup中，这些View此时对LayoutManager不可见。重新添加的目的在于动画。 RecyclerView这时候把这些本不该add的View交给ItemAnimator，后者调用动画效果，300ms(安卓中大部分默认动画时间是300ms)之后，调用onAnimationFinished，告诉RecyclerView. 接着RecyclerView通知Adapter(onViewDetachedFromWindow) 最后将这些View添加到Cache或者Recycled Pool。 ViewHolder的销毁 LayoutManager调用removeAndRecycleView，RecyclerView检查View是否valid 如果不是Valid，添加到RecycledPool中，但在这之前先检查是否 hasTransientState（例如正在运行动画） 如果这个View正好处在Animation中，一些属性被Animating， Pool会调用Adapter的onFailedToRecycle(Adapter中应该复写这个方法，取消动画) onFailedToRecycle(ViewHolder)返回true的话，Pool将无视View的TransientState并回收这个View(可能处在动画中) 另一种可能导致ViewHolder被销毁的方式RecyclerView将View添加到Pool中(实际调用的是addViewHolderToRecycledViewPool(ViewHolder))，Pool会检查这种type的ViewHolder是否还放得下（例如type x的ViewHolder已经有5个了，实在太多了），这种情况下就会Kill这种View,这种情况是我们希望避免的。开发者可以调用pool.setMaxRecycledViews(type,count)来让Pool放更多的Holder per type。 一些需要注意的，Pool是基于一个Activity Context的。 2. 使用LayoutManager配合ItemAnimator自定义ItemView的动画的步骤perdictiveItemAnimation的关键在于RecyclerView的list并不局限于屏幕。在LayoutManager中复写 supportPredictiveItemAnimations()，返回true。 LinearLayoutManger的实现 1234@Override public boolean supportsPredictiveItemAnimations() &#123; return mPendingSavedState == null &amp;&amp; mLastStackFromEnd == mStackFromEnd; &#125; 可以认为返回值就是true onLayoutChildern在这种情况下会被调用两次，(之前提到本该被移除的View需要重新添加到ViewGroup中，实现就在这里)参考LinearLayoutManager的实现，源代码实在太长，只复制一些注释1234567891011@Override public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) &#123; // layout algorithm: // 1) by checking children and other variables, find an anchor coordinate and an anchor // item position. // 2) fill towards start, stacking from bottom // 3) fill towards end, stacking from top // 4) scroll to fulfill requirements like stack from bottom. // create layout state //omitted.... &#125; 简单来说一共三步: detach and Scrap Views layout那些需要出现在list中的View(包括将要消失的View) 接下来进入第二步layout，在这里确定那些将出现在屏幕外的View的实际位置。 这样LayoutManager就能将必要的信息传递给ItemAnimator 进入ItemAnimator大部分的需要实现的函数在SimpleItemAnimator或者DefaultItemAnimator里面都已经实现好了，所以大部分人的选择就是： 使用DefaultItemAnimator(默认已经设置好了) Implement SimpleItemAnimator(或者DeafaultItemAnimator)，复写一些必要的方法 Animator需要做的一些事1234record[Pre|Post]LayoutInformation//记录动画开始和结束的layout信息animate[Appearance|Disappearance]animatePersistence()//不会改变位置animateChange()//实际的动画添加位置 这些在DefaultItemAnimator中都有默认的实现动画完成后一定要调用 DispatchAnimationFinished(ViewHolder) 记录动画开始前和结束后的信息，实例代码:123456789101112131415161718192021@NonNull @Override public ItemHolderInfo recordPreLayoutInformation(RecyclerView.State state, RecyclerView.ViewHolder viewHolder, int changeFlags, List&lt;Object&gt; payloads) &#123; ColorTextInfo info = (ColorTextInfo) super.recordPreLayoutInformation(state, viewHolder, changeFlags, payloads); return getItemHolderInfo((MyViewHolder) viewHolder, info); &#125; @NonNull @Override public ItemHolderInfo recordPostLayoutInformation(@NonNull RecyclerView.State state, @NonNull RecyclerView.ViewHolder viewHolder) &#123; ColorTextInfo info = (ColorTextInfo) super.recordPostLayoutInformation(state, viewHolder); return getItemHolderInfo((MyViewHolder) viewHolder, info); &#125; @Override public ItemHolderInfo obtainHolderInfo() &#123; return new ColorTextInfo(); &#125; canReuseViewHolder的作用:例如notifyItemChanged(position)后，只是某个位置的viewHolder发生了信息改变，那就没有必要创建一个新的ViewHolder，直接提供原有的ViewHolder，提升性能。 3. 常见错误 mAdapter.notifyItemMoved(1,5)不会调用onBindViewHolder，不会invalidate 不要在onBindViewHolder中添加onClickListener(以匿名内部类的方式,这会使得position变成final),想象一下，mAdapter.notifyItemMoved(1,5)调用后不会调用onBindViewHolder，这使得点击pos 1时实际传递给listener的是pos 5。 检查RecyclerView.NO_POSITION这个Int值为-1，其实就是itemView被removed，但用户手够快，在View被移除前点击了这个View，那这个onClickListener还是会被调用。 mAdapter.notifyItemChanged(position,payload)如果某个ViewHolder中只是一部分信息改变，将更新内容丢到payload中，最终会调用到onBindViewHolder(ViewHolder,position,List Payloads)，在这里只需要把ViewHolder中的一小部分改变就可以了，这有助于优化新能。 onCreateViewHolder必须返回一个new ViewHolder，不能在本地作为成员变量返回。 RecyclerView.setRecycledViewPool(pool)一个pool只能为为同一个context(Activity)中的RecyclerView使用，因为这些View是与Context相关的，而不同的Activity可能有不同的Theme，Style。 Pro RecyclerView最近看到yigit在relam作的关于recyclerView的演讲，记录下来一些比较重要的点 view:: requestLayout的效果，requestLayout会一直地向上请求直到根视图，next Frame开始时，所有的子View都将调用自身的measure(onMeasure)和layout(onLayout)方法如果子View不曾requestLayout,之前的measure结果会被cache下来，节省measure和layout的时间。 在RecyclerView中，在itemView的onBIndView方法中调用ImageLoader的加载图片方法，由于图片加载是异步操作，最终会调用ImageView的setImageBitmap方法。而在ImageView的实现中，setImageBitmap方法最终会调用requestLayout方法，最终会一层层向上传递到recyclerView中，就像这样 1234567imageView setImageBitmapimageView requestLayoutitemView requestLayoutrecyclerView requestLayout 而recyclerView的requestLayout方法会在next Frame重新position所有的child(very expensive!)为此，recyclerView提供了一个setHasFixedSize方法，设置为true表明recyclerView自身不会因为childView的变化而resize，这样recyclerVeiw就不会调用requestLayout方法(如果去看RecyclerView的源码，可以看到mEatRequestLayout这个变量，也就是避免重复调用requestLayout造成性能损耗。)，不会造成所有的childView都被重新测量一遍。在ImageView(2011年之后的版本)中，setImageDrawable方法大致长这样：1234567891011void setImageDrawable(Drawable drawable)&#123; if(mDrawable != drawable)&#123; int oldWidth = mDrawableWidth; int oldHeight = mDrawableHeight; updateDrawable(drawable) if(oldWidth!=mDrawableWidth||oldHeight!=mDrawableHeight)&#123; requestLayout(); &#125; invalidate(); &#125;&#125; 简单来说就是判断下前后图像的宽度或高度是否发生了变化，如果无变化则不需调用requestLayout方法，只需要reDraw。也就避免了这种性能的损耗。但是，TextView的implementation则复杂的多，并没有这种优化。实际操作中，API应该能够告诉客户端图片的width和Height,使用AspectRationImageView加载图片。在图片加载完成之前优先使用PlaceHolder，并设定好加载完成应有的尺寸，这样就避免了后期图片加载完成后的requestLayout。 使用SortedList用于进行List变更123456789SortedList&lt;Item&gt; mSortedList = new SortedList&lt;Item&gt;(Item.class, new SortedListAdapterCallback&lt;Item&gt;(mAdapter))&#123; //override三个方法，懒得抄了&#125;使用方式十分简单，后面的数据更新操作包括notifyDataChange都被处理好了。onNetwokCallback(List&lt;News&gt; news)&#123; mSortedList.addAll(news);&#125; 对于未发生变化的Item，将直接跳过，实现了最优化的列表数据更新。 DiffUtil(added in 24.2.0)用于对比数据变更前后的两个List1234DiffResult result = DiffUtil.calculateDiff( new MyCallback(oldList,newList));mAdapter.setItems(newList);result.dispatchTo(mAdapter); 只需调用上述方法即可实现列表Item更新及Adapter的notify。DiffUtil的callback有四个方法需要复写，另外有一个方法用于单个Item的部分payload更新。在medium上找到一个现成的，直接借用了。12345678910111213141516171819202122232425262728293031323334353637public class MyDiffCallback extends DiffUtil.Callback&#123; List&lt;Person&gt; oldPersons; List&lt;Person&gt; newPersons; public MyDiffCallback(List&lt;Person&gt; newPersons, List&lt;Person&gt; oldPersons) &#123; this.newPersons = newPersons; this.oldPersons = oldPersons; &#125; @Override public int getOldListSize() &#123; return oldPersons.size(); &#125; @Override public int getNewListSize() &#123; return newPersons.size(); &#125; @Override public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) &#123; return oldPersons.get(oldItemPosition).id == newPersons.get(newItemPosition).id; &#125; @Override public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) &#123; return oldPersons.get(oldItemPosition).equals(newPersons.get(newItemPosition)); &#125; @Nullable @Override public Object getChangePayload(int oldItemPosition, int newItemPosition) &#123; //you can return particular field for changed item.//这里的object会被带到onBindViewHolder中 return super.getChangePayload(oldItemPosition, newItemPosition); &#125;&#125; 这些方法会帮助完成remove和add等方法。 viewHolder的生命周期 12345onCreateonBindViewHolder(获取video资源)onViewAttachedToWindow(可以在这里开始播放视频)onViewDetachedFromWindow(可以在这里停止播放视频，随时有可能重新被直接attach，这过程中不会调用onBind方法)onRecycled(可以在这里释放Video资源或者释放Bitmap引用，这之后再使用该ViewHolder需要调用onBind方法) recyclerView的一些defer操作对于日常开发的帮助recyclerView会将一些pending操作defer到next frame。eg: 123456789101112recyclerView.scrollToPosition(15);int x = layoutManager.getFirstVisiblePosition()//此时x并不等于15，因为下一帧并未开始。真正的执行scroll操作需要等到nextFrame执行后才能生效，具体一点的话，就是下一个执行layout的message的callback还未被执行。又例如，在onCreate中调用```javarecyclerView.scrollToPosition(15)//在netWorkCallback中调用setAdapter，这时recyclerView会利用pending的15 position。原因在于recyclerView会判断如果layoutManager和adapter是否为null，如果都为null。skip layout。- 在getItemViewType中返回R.layout.itemLayout的好处。在onCreateViewHolder(ViewGroup viewParent,int ViewType)&#123; View itemView = inflate.inflate(ViewType,parent,false); return XXXHolder(itemView);//aapt可以确保R.layout.xxxx是unique的。&#125; ClickListener的实现在onCreateViewHolder中传一个callback，不要在onBindViewHolder中传，不要把onBindViewHolder中的position变为final的。getAdapterPositon可能为NO_POSITION(-1)，因为RecyclerView的UI更新会被defer到next Frame，在下一帧更新被执行前，用户可能已经点击了item，这时的position就有可能是-1(这种情况发生在点击后删除了所有的item数据，这时获得的position就类似于list的indexAt，当然是-1。). LayoutManager只知道LayoutPosition，并不知道AdapterPositionItems在Adapter的数据集中的顺序可能会随时变更，但recyclerView可能并不会调用onBindViewHolder方法，这也就是onBindViewHolder中的position并不可靠的原因。因为viewHolder本身是backed by Item的，而viewHolder的getAdapterPosition能够正确地反应Item在数据集中的顺序。 4 . 一些参考资料 RecyclerView Animations and Behind the Scenes (Android Dev Summit 2015) ItemAnimator模板 UI ToolKit Demo Yigit Boyar: Pro RecyclerView","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"RecyclerView","slug":"RecyclerView","permalink":"https://haldir65.github.io/tags/RecyclerView/"}]},{"title":"使用Loader进行异步数据操作","date":"2016-10-15T11:12:22.000Z","path":"2016/10/15/2016-10-15-using-loader-in-android-app/","text":"App中经常有这样的需求:进入一个页面，首先查询数据库，如果数据库数据有效，直接使用数据库数据。否则去网络查询数据，网络数据返回后重新加载数据。很显然，这里的查询数据库和网络请求都需要放到子线程去操作，异步了。android推荐使用Loader进行数据查询，最大的好处就是Laoder会处理好与生命周期相关的事情，Android Developers推出过关于Loaders的介绍视频，Loader就是为了解决这种问题而推出的，Loader具有几点好处 如果Activity挂掉了，Activity中启动了的线程怎么办，如果不处理好有可能导致leak。 activity挂了，而子线程中持有View的强引用，此时再去更新View已经没有意义，View已经不可见了 这条线程所做的工作，加载的资源都白白浪费了，下次还需要重新加载一遍。 1. 自定义一个Loader(加载数据类型，Cache处理等)Loader的使用就像一个AsyncTask一样，可以提前指定需要在异步线程中做的事情、数据类型以及完成加载后将数据推送到主线程。谷歌给出了一个使用Loader来查询手机上安装的App并显示在一个ListView中的DemoApp，虽然是好几年前的东西了，并且使用的是V4包里的Loader,但还是值得学习。首先来看自定义的AppListLoader 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576public class AppListLoader extends AsyncTaskLoader&lt;List&lt;AppEntry&gt;&gt; &#123; //AsynTaskLoader支持泛型，AppEntry是已安装App信息的包装类。 private List&lt;AppEntry&gt; mApps; //查询的App列表保存为成员变量 final PackageManager mPm; private boolean DEBUG = true; public static final String TAG = AppListLoader.class.getSimpleName(); //构造函数 public AppListLoader(Context ctx) &#123; // Loaders may be used across multiple Activitys (assuming they aren't // bound to the LoaderManager), so NEVER hold a reference to the context // directly. Doing so will cause you to leak an entire Activity's context. // The superclass constructor will store a reference to the Application // Context instead, and can be retrieved with a call to getContext(). super(ctx); //第一，这里运行在主线程上； //第二，传进来的context(一般是Activity只是为了获取ApplicationContext) mPm = getContext().getPackageManager();//getContext()返回的是Application的Context。 &#125; @Override public List&lt;AppEntry&gt; loadInBackground() &#123; if (DEBUG) Log.i(TAG, \"+++ loadInBackground() called! +++\"); LogUtil.p(\"\");// 子线程,耗时的工作放到这里 // Retrieve all installed applications. List&lt;ApplicationInfo&gt; apps = mPm.getInstalledApplications(0);//PackageManager的方法 if (apps == null) &#123; apps = new ArrayList&lt;ApplicationInfo&gt;(); &#125; // Create corresponding array of entries and load their labels. List&lt;AppEntry&gt; entries = new ArrayList&lt;AppEntry&gt;(apps.size()); for (int i = 0; i &lt; apps.size(); i++) &#123; AppEntry entry = new AppEntry(this, apps.get(i)); entry.loadLabel(getContext()); entries.add(entry); &#125; // Sort the list. Collections.sort(entries, ALPHA_COMPARATOR); return entries; &#125; @Override public void deliverResult(List&lt;AppEntry&gt; apps) &#123; //运行在主线程上 if (isReset()) &#123;//这里就类似于AsyncTask的onPostExecute了，把子线程处理好的数据推送到主线程 if (DEBUG) Log.w(TAG, \"+++ Warning! An async query came in while the Loader was reset! +++\"); // The Loader has been reset; ignore the result and invalidate the data. // This can happen when the Loader is reset while an asynchronous query // is working in the background. That is, when the background thread // finishes its work and attempts to deliver the results to the client, // it will see here that the Loader has been reset and discard any // resources associated with the new data as necessary. if (apps != null) &#123; releaseResources(apps); return; &#125; &#125;//如果调用了reset()方法，说明子线程加载的数据是无效的，释放资源，处理无效数据 // Hold a reference to the old data so it doesn't get garbage collected. // We must protect it until the new data has been delivered. List&lt;AppEntry&gt; oldApps = mApps; mApps = apps; if (isStarted()) &#123;// 如果一切正常，即调用了startLoading且stopLoading和reset均为被调用 if (DEBUG) Log.i(TAG, \"+++ Delivering results to the LoaderManager for\" + \" the ListFragment to display! +++\"); // If the Loader is in a started state, have the superclass deliver the // results to the client. super.deliverResult(apps); &#125; // Invalidate the old data as we don't need it any more. if (oldApps != null &amp;&amp; oldApps != apps) &#123; if (DEBUG) Log.i(TAG, \"+++ Releasing any old data associated with this Loader. +++\"); releaseResources(oldApps); &#125; &#125;&#125; 到此，数据加载的Server端算是完成，这里注意调用到了isReset()、isStarted()等方法，这些就是Server端在在处理Client端生命周期是需要注意的，这个后面再说。 2. 使用LoaderManager管理Loader我们使用LoaderManager在Activity或Fragment中与Loader交互。通常在onCreate或者onActivityCreated中: getSupportedLoaderManager.initLoader()//Activity中getLoaderManager() //Fragment中 这里介绍在Fragment中的使用，因为Loader处理好了与Activity,Fragment甚至Child Fragment的生命周期。推荐使用v4包里的Loader，Loader是在Android3.0引入FrameWork中的，但v4包让Loadder在更早的版本上也有相应的API。更重要的是，v4 包中的Loader是伴随着v4包新的release step，也就是说v4包会与时俱进修复其中的bug。这一点在medium上有介绍 。再看一下这个方法 public abstract Loader initLoader(int id, Bundle args, LoaderManager.LoaderCallbacks callback); Demo中使用的是Fragment： // Initialize a Loader with id ‘1’. If the Loader with this id already // exists, then the LoaderManager will reuse the existing Loader. getLoaderManager().initLoader(LOADER_ID, null, this); 相对应的Fragment需要implements LoaderManager.LoaderCallbacks","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"fitSystemWindow和沉浸式状态栏的一些总结","date":"2016-10-14T09:15:47.000Z","path":"2016/10/14/2016-10-14-Android-translucent-status-bar/","text":"沉浸式状态栏是api 19之后引入的，KitKat应该算是一次比较大的更新了，像是Transition，art runtime,storage access FrameWork(这个有空研究下)，另外就是这个被官方称为Full-screen immersive mode的特性了。具体来说，App可以将展示的区域拓展到statusBar的位置了。我觉得直接叫statusBar就好了，大部分人应该也能理解这就是手机上显示”中国移动”还有显示手机电量那一块的长条，宽度是match_parent。高度的话，据说是25dp，然后6.0上给改成了24dp。不过这不是重点 1.最初的做法看到有人推荐使用SystemBarTint这个class,刚上来觉得也挺好用的，就是一个java class，直接复制粘贴到项目里，改一下package name，无脑使用即可。原理的话，看过源码后，大致明白是在statusBar的位置添加一个new View，然后持有这个view的引用，接下来就可以做常规的setBackground或者setBackgroundColor了。初始化时的关键代码如下123456789101112private void setupStatusBarView(Context context, ViewGroup decorViewGroup) &#123;//这个decorViewGroup指的是activity.getWindow() mStatusBarTintView = new View(context); LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, mConfig.getStatusBarHeight()); params.gravity = Gravity.TOP; if (mNavBarAvailable &amp;&amp; !mConfig.isNavigationAtBottom()) &#123; params.rightMargin = mConfig.getNavigationBarWidth(); &#125; mStatusBarTintView.setLayoutParams(params); mStatusBarTintView.setBackgroundColor(DEFAULT_TINT_COLOR); mStatusBarTintView.setVisibility(View.GONE); decorViewGroup.addView(mStatusBarTintView); &#125; 一切看起来都很美好 2. 直到碰到了fitSystemWindow = ture几个月前曾经在项目里写过一个普通的Coordinatelayout内部CollapingToolbarLayout的沉浸式状态栏实现，当时为了赶进度一直试到夜里2点才尝试出在4.4和5.0以上手机都能满意的效果。现在想想有些事还是能够事先搞清楚的好，被动学习的代价实在太大。当时的方法是给Toolbar添加了一个顶部的padding，具体原理也不大清楚。但实际上并不总能一直 3. 使用CollapsingToolbarLayout时的问题 5.0以上的手机似乎很简单12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:id=\"@+id/coordinateLayout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:background=\"@android:color/background_light\" android:fitsSystemWindows=\"true\" &gt; &lt;android.support.design.widget.AppBarLayout android:id=\"@+id/appbarLayout\" android:layout_width=\"match_parent\" android:layout_height=\"300dp\" android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" android:fitsSystemWindows=\"true\" &gt; &lt;android.support.design.widget.CollapsingToolbarLayout android:id=\"@+id/collapsingToolbarLayout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:contentScrim=\"?attr/colorPrimary\" app:expandedTitleMarginEnd=\"64dp\" app:expandedTitleMarginStart=\"48dp\" app:layout_scrollFlags=\"scroll|exitUntilCollapsed\" &gt; &lt;ImageView android:id=\"@+id/backdrop\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:scaleType=\"centerCrop\" android:src=\"@drawable/image_19\" app:layout_collapseMode=\"parallax\" android:fitsSystemWindows=\"true\" /&gt; &lt;android.support.v7.widget.Toolbar android:id=\"@+id/toolbar\" android:layout_width=\"match_parent\" android:layout_height=\"?attr/actionBarSize\" app:layout_collapseMode=\"pin\" app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" /&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;android.support.v4.widget.NestedScrollView android:id=\"@+id/nestedScrollView\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" &gt; &lt;TextView android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:lineSpacingExtra=\"8dp\" android:padding=\"@dimen/activity_horizontal_margin\" android:text=\"@string/newsBody\" android:textSize=\"20sp\" /&gt; &lt;/android.support.v4.widget.NestedScrollView&gt; &lt;android.support.design.widget.FloatingActionButton android:id=\"@+id/fab\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_margin=\"@dimen/activity_horizontal_margin\" android:src=\"@android:drawable/ic_menu_slideshow\" app:layout_anchor=\"@id/appbarLayout\" app:layout_anchorGravity=\"bottom|right|end\" /&gt; &lt;/android.support.design.widget.CoordinatorLayout&gt; 只要分别在CoordinateLayout，AppBarLayout和CollapsingToolbarLayout的xml属性中加上android:fitSystemWindow = “true”java代码里添加一句 getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); //注意下版本判断 或者在当前Activity的values-v19 styles中添加 true就行了。实际效果就是图片完全展开时可以扩展到statusBar下面，图片收缩起来后可以让Toolbar停在statusBar下面。但同样的代码在4.4的手机上会使得实际绘图区域落到statusBar以下，statusBar位置变成带灰色遮罩的白色背景。 4. fitSystemWindow是什么意思fitSystemWindows属性：官方描述:Boolean internal attribute to adjust view layout based on system windows such as the status bar. If true, adjusts the padding of this view to leave space for the system windows. Will only take effect if this view is in a non-embedded activity.简单来说就是如果设置为true,机会根据statusbar来添加一个padding.假定:布局文件只是一个普通的LinearLayout(fitSystemWindow = false（默认情况）),顶部include一个toolbar(fitSystemWindow = true )就已经可以实现4.4以下，4.4-5.0，5.0以上的各种场景了,(前提，使用Appcompat 的Theme，因为它会使用colorPrimaryDark为statusBar着色) 但我的问题在于布局文件是CoordinateLayout&gt; AppBarLyout&gt; CollapsingToolbarLayout&gt; Toolbar &amp; ImageView这种情况下，照理说Toolbar应该顶部留有25dp的padding，也就是fitSystemWindow = true（假设就只是这么简单）然而事实是，fitSystemWindow会让你设置的padding失效,而ImageView需要侵入到statusBar下面，也就是fitSystemWindow = false。那就只要在toolbar的xml中添加fitSystemWindow这个属性好了。编译，运行，5.1手机，Toolbar的小箭头一部分跑到statusBar下面了，感觉就像Toolbar往上移动了25dp(这个目测的哈)，不可取。 5. 查找到的一些解决方案 主要介绍原理了: 类似于SystemBarTint，在android.R.id.content的View中添加一个 View 123 ViewGroup.LayoutParams statusViewLp = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, getStatusBarHeight());contentView.addView(statusBarView,layoutParams) Activity持有一个PhoneWindow，PhoneWindow持有一个根View，叫DecorView（是一个FrameLayout），DecorView持有一个LinearLayout，在LinearLayout下分配两个FrameLayout，一个给ActionBar（当设置主题为NoActionBar是为ViewStub），一个给ContentView。不管如何，只要我们在LinearLayout的第一个位置插入一个View就可以让ContentView下移了。简书作者这种方式其实已经无所谓是否需要在xml中fitSystemWindow了，因为都会通过添加最后一个View的方式把状态栏那块给遮住了。用来着色其实挺好的。 往android.R.id.content这个View里面添加一个假View,xml中fitSystemWindows 往android.R.id.content这个View的parent里面添加一个假View,xml中fitSystemWindows 6.我最后实现的解决方案（4.4,5.1均通过）其实整个问题的关键就是你是否想要在statusBar那一块长条的位置画画。。。。一整张imageView的话，当然希望能够把图片延伸到statusBar以下而Toolbar则不需要延伸到statusBar以下。我尝试了给toolbar加上padding &gt;&gt;失败我尝试了给toolbar加上margin &gt;&gt;&gt;&gt; 问题终于解决 所以最后，我的xml文件中删除了所有的fitSystemWindow，在style-v19中添加了该加的东西最后只在onCreate里面添加几段话123456setSupportActionBar(binding.toolbar);getSupportActionBar().setDisplayHomeAsUpEnabled(true); //这个用于显示返回的小箭头，还得指明parentActivitygetSupportActionBar().setTitle(\"\");CollapsingToolbarLayout.LayoutParams params = (CollapsingToolbarLayout.LayoutParams) binding.toolbar.getLayoutParams();params.setMargins(0, Utils.getStatusBarHeight(), 0, 0); //顶部加个margin就好了binding.toolbar.setLayoutParams(params); 实际操作可能还要判断非空什么的，但大致意思如此看起来像这样5.1图片展开: 5.1图片收起: 4.4图片展开: 4.4图片收起: 原理就是让整个布局占据statusBar的位置，但把Toolbar往下挪一点（其实也就是这篇文章中所推荐的给contentView的给第一个childView添加marginTop的方法） 7.在onCreate之后设置fitSystemWindows并不会把ContentView往上挪或往下挪.自己测试了一下，在根布局里添加fitSystemWindows = true之后，在Activity的onCreate里面是可以使用ViewCompat.setfitSystems(rootView,false)设置起作用的。但也只限于onCreate的时候。例如添加一个点击事件，在onClick里面setFitSystemWindows，是不会把RootView往下挪的。这种情况就需要一开始就确保fitSystem = false，然后需要往下挪的时候，给设置一个FrameLayout.LayoutParams的TopMargin就可以了。注意来回切换(全屏模式和着色模式之间切换)的时候要看下rootView的getTop,因为MarginTop设置了之后会导致Top!=0。其实fitSystemWindows是在FitSystemWindowLinearLayout中添加Padding起效的，后期操作的Margin只是对其Child ContentFrameLayout进行操作。所以，这种情况下我觉得直接全部弄成fitSystemWindows = false，先把statusBar后面的空间占据了再说，后面再通过手动设置Margin上下挪动。 8. 一些不要犯的小错误 在Theme中添加1&lt;item name=\"android:fitsSystemWindows\"&gt;true&lt;/item&gt; 这会导致Toast的文字往上偏移，所以，如果需要使用fitSystemWinow = true的话，请老老实实去xml中写 状态栏那一块如果你不去占据的话，而你又声明了windowTranslucentStatus，v21上默认的颜色应该是colorPrimaryDark(是的，AppCompat帮你照顾好了)v19上就是一片带阴影的白色(AppCompat不会在这个版本上帮你着色statusBar)。 6.0以上可以设置statusBar字体的颜色了，这个随便找找就有了 Ian Lake在medium上给出了对于fitSystemWindow的权威解释，非常有价值。 9. 下面这段话可能对于理解window有一定帮助fitsSystemWindows, 该属性可以设置是否为系统 View 预留出空间, 当设置为 true 时,会预留出状态栏的空间.ContentView, 实质为 ContentFrameLayout, 但是重写了 dispatchFitSystemWindows 方法, 所以对其设置 fitsSystemWindows 无效.ContentParent, 实质为 FitWindowsLinearLayout, 里面第一个 View 是 ViewStubCompat, 如果主题没有设置 title ,它就不会 inflate .第二个 View 就是 ContentView.最后感谢网上各位博主不辞辛苦写出来的干货，让我能够比较简单的复制粘贴他们的代码来检验，写博客真的很累。 Reference Android-transulcent-status-bar总结 由沉浸式状态栏引发的血案 Android开发：Translucent System Bar 的最佳实践 Why would I want to fitsSystemWindows","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"Window","slug":"Window","permalink":"https://haldir65.github.io/tags/Window/"},{"name":"statusBar","slug":"statusBar","permalink":"https://haldir65.github.io/tags/statusBar/"}]},{"title":"安卓坐标系常用方法","date":"2016-10-13T10:17:02.000Z","path":"2016/10/13/2016-10-13-Android-coordinate-System/","text":"记录一些Android系统坐标系的常用方法，因为日常开发中难免会碰到需要单独计算View系统坐标的情况。 ScrollTo，ScrollBy，getVisibleRect这些方法平时想要用的时候总要去网上查找，这里记录下来，方便今后直接参考首先是一张很多人都见过的图中间的蓝色的点是TouchEvent发生时，获得的MotionEvent.getX()、getY()。 1. 坐标原点和坐标轴方向坐标原点有两种，屏幕左上角（statusBar也包含其中）和父控件左上角坐标轴方向：X轴向右，Y轴向下，Z轴(5.0增加)向上。 2. Left,Top,Right,Bottom而Top，left，bottom,down分别对应着其其相对于父控件的距离，由此可以计算得到View的宽度width = getRight()-getLeft() ,View的高度 height = getBottom()-getTop()而实际上view.getHeight()方法的实现也就是mBottom-mTop. 3. X , YX代表的是当前View的左上角那个点的横坐标，Y代表的是纵坐标。X = left + getTranslationXY = Top + getTranslationY通常在动画中使用setTranslationX来实现偏移效果，注意，这是不会改变left的。在滑动过程中，x, y会随着改变。 4. 几个跟Rect相关的获得的是当前View左上角距离屏幕左上角的位置，为此我专门测试了一下 W/ViewAnimationActivity.java: [32 | onWindowFocusChanged]statusBarHeight = 75 W/ViewAnimationActivity.java: [35 | onWindowFocusChanged]getLocationInWindow x = 0 y = 75 W/ViewAnimationActivity.java: [38 | onWindowFocusChanged]getLocationOnScreen x = 0 y = 75可以看到返回的就是View左上角的坐标，一般情况下两者区别不重要，stackoverFlow上有讨论 123456View.getLocationInWindow(pos); //获取在当前window内的绝对坐标View.getLocationOnScreen(pos); //包括statusBar，以屏幕左上角为坐标原点View.getLocalVisibleRect() //以view自身的左上角为坐标原点，这个很有用，//返回的坐标一定是(0,0,xxx,xxx)这样的，可以判断当前View是否完全可见View.getGlobalVisibleRect() // 以屏幕左上角为坐标原点 以上四个方法在onCreate里面返回的值都是0，需要在Activity的onWindowFocusChanged(true)中去获得这里需要扯一点关于window的问题，根据大部分博客的介绍：DecorView是FrameLayout的子类，是View视图层级树的根节点。一般会有一个LinearLayout的child 为此，我在setContentView里面放了一个CoordinateLayout,使用Hierarchy View截图的到这样的结果。图片有点大 在ViewHirearchy中可以看到，Activity中View视图层级从上到下依次为： PhoneWindow$DecorView（有三个child,分别是LinearLayout，View(id/statusBarBackground)和View(id/navigationBarBackground)）LinearLayoutFrameLayoutFitWindowsLinearLayoutContentFrameLayout(id/android.R.id.content) //这在开发过程中有时会用到setContentView设置的view 关于window，DecorWindow的文章网上有很多，仔细研究下会对理解View的测量机制有一定好处，这对于View的工作原理也能够更彻底的理解。参考文章日常开发中，setContentView这个方法只是将我们自己写的activiy_main.xml布局文件inflate出来的view添加到android.R.id.content这个ViewGroup中，实践下来发现这是一个ContentFrameLayout的实例，它的child只有一个，就是我们通过setContentView添加的View 5. 让View滑动起来 offsetLeftAndRight(int offset) //给left和right加上一个值，改变的是View的位置offsetTopAndBottom(int offset) scrollTo(int x,int y) // 将View中的内容移动，坐标原点为parentView左上角，注意，参数为正，效果为反例如scrollTo(-100,0) 在手机上看效果是往右移动了 scrollBy(int x, int y) scrollBy的源码如下:123public void scrollBy(int x, int y) &#123; scrollTo(mScrollX + x, mScrollY + y); &#125; 还有一些不常用的：123public void setScrollX(int value) &#123; scrollTo(value, mScrollY); &#125; 6. 改变LayoutParams的margin让View移动这是一种很生硬的方式，不常用123MarginLayoutParams params = (MarginLayoutParams)mTextView.getLayoutParams(); //可能为nullparams.leftMargin + = 100;mTextView.setLayoutParams();// 这里面调用了requestLayout 7.使用Animation让View动起来根据官方文档的定义Android中一共两种Animation: Property AnimationView Animation(包括Tween animation, Frame animation) 首先从package的位置来看属性动画都位于android.animation这个package下面，常见的如ObjectAnimator继承自ValueAnimatorView动画则位于android.view.animation这个package下，常见的如TranslateA,AlphaAnimation等 View Animation可以代码创建，也可以写在R.anim文件夹下,用法很简单123ImageView image = (ImageView) findViewById(R.id.image);Animation hyperspaceJump = AnimationUtils.loadAnimation(this, R.anim.hyperspace_jump);image.startAnimation(hyperspaceJump); 属性动画可以代码创建，也可以写在R.animator文件夹下,用法:1234AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext, R.anim.property_animator);set.setTarget(myObject);set.start(); 推荐使用ViewPropertyAnimator，这是一个位于android.view下面的class，感觉更像是一个Util,大部分的方法都是在API 12 ,API 14引入的，实际开发中推荐使用ViewCompat.animate() 返回一个ViewPropertyAnimator对象，省去了开发者版本判断的麻烦语法更为简单：1ViewCompat.animate(view).x(500).y(500).setDuration(5000).setInterpolator(new DecelaratorInterpolator()); //不需要调用start() 据说这种方式性能最好，Google官方强烈推荐,参考DevByte。另外，据说大部分Google的App使用的都是DecelaratorInterpolator，当然这跟设计有关。 8.使用Scroller实现smoothScrollView有一个方法computeScroll(),复写，像这样就可以了12345678910111213141516Scroller scroller = new Scroller(mContext); private void smoothScrollTo(int dstX, int dstY) &#123; int scrollX = getScrollX(); int delta = dstX - scrollX; scroller.startScroll(scrollX, 0, delta, 0, 1000); invalidate(); &#125; @Override public void computeScroll() &#123; if (scroller.computeScrollOffset()) &#123; scrollTo(scroller.getCurrX(), scroller.getCurY()); postInvalidate(); &#125; &#125; 9. 补充几个好玩的函数View.canScrollVertically(int)1234567891011121314public static boolean canChildScrollUp(View view) &#123; if (android.os.Build.VERSION.SDK_INT &lt; 14) &#123; if (view instanceof AbsListView) &#123; final AbsListView absListView = (AbsListView) view; return absListView.getChildCount() &gt; 0 &amp;&amp; (absListView.getFirstVisiblePosition() &gt; 0 || absListView.getChildAt(0) .getTop() &lt; absListView.getPaddingTop()); &#125; else &#123; return view.getScrollY() &gt; 0; &#125; &#125; else &#123; return view.canScrollVertically(-1); &#125; &#125; 这段是我在秋百万的android-ultra-pulltorefresh里面找到的，想当初为了自己写下拉刷新，一遍一遍的打Log，最后甚至用上getVisibleRect才算搞定。其实很多东西前人已经帮我们整理好了。对了这东西在v4包里有ViewCompat.canScrollVertically，v4包除了方法数有点多(10k+好像)这点不好以外，一直都很好用附上supportLibrary各个包的方法数，如果对65536这个数字熟悉的话，还是会注意点的。 总结 使用getLocalVisibleRect可以判断一个view是否完全可见 scrollBy,setScrollX等内部都是调用了scrollTo方法，ScrollTo方法传参数与实际效果是相反的 Reference Android应用坐标系统全面详解 ​[如何取得View的位置之View.getLocationInWindow()的小秘密](http://blog.csdn.net/imyfriend/article/details/8564781 详解实现Android中实现View滑动的几种方式","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"TouchEvent","slug":"TouchEvent","permalink":"https://haldir65.github.io/tags/TouchEvent/"}]},{"title":"主线程的工作原理","date":"2016-10-12T08:47:42.000Z","path":"2016/10/12/2016-10-12-How-the-mainThread-work/","text":"​ 今天突然找到这样一个问题: “Handler的postDelayed会阻塞线程吗？”。基于自己之前对于Handler的线程间通讯机制的理解，还是不能给出明确的答案。正好打算把一篇关于主线程的工作原理的文章写出来，顺带看下能否把这个问题从源码的角度解释清楚。 1. 从线程（Thread）开始通常，一个Process会有一个主线程, 而在Android中，UI控件相关的方法和一些系统callback都会发生在主线程上(onResume,onCreate,onStartCommand,onDraw, etc)。 如果App中使用了多个Process，则每个Process都会有一个主线程，但这不是今天的重点。Android应用是如何启动的?启动一个应用时，系统会从Zygote Process fork出一个新的Process，最终走到ActivityThread 的main方法123456789101112public static void main(String[] args) &#123;//省略部分无关代码 Looper.prepareMainLooper(); ActivityThread thread = new ActivityThread(); thread.attach(false); if (sMainThreadHandler == null) &#123; sMainThreadHandler = thread.getHandler(); &#125; // End of event ActivityThreadMain. Looper.loop(); throw new RuntimeException(\"Main thread loop unexpectedly exited\");//从这里可以猜到Looper.loop方法会一直执行下去 &#125; 看一下Looper.prepareMainLooper()方法：12345678910111213141516/** * Initialize the current thread as a looper, marking it as an * application's main looper. The main looper for your application * is created by the Android environment, so you should never need * to call this function yourself. See also: &#123;@link #prepare()&#125; */public static void prepareMainLooper() &#123; prepare(false); synchronized (Looper.class) &#123; if (sMainLooper != null) &#123; throw new IllegalStateException(\"The main Looper has already been prepared.\"); &#125; sMainLooper = myLooper(); &#125;&#125; 大致意思就是为当前Thread添加一个Looper。Looper.java是一个普通的class，其大致作用就是为当前Thread维持一个message loop，默认情况下一个Thread并没有一个Looper，要想添加一个，需要在该线程中调用Looper.prepare()，然后调用Looper.loop()方法即可让消息循环一直持续下去。大部分和message Loop的交互都是通过Handler这个类来进行的。例如12345678910111213141516class LooperThread extends Thread &#123; * public Handler mHandler; * * public void run() &#123; * Looper.prepare(); * * mHandler = new Handler() &#123; * public void handleMessage(Message msg) &#123; * // 在这里处理消息 * &#125; * &#125;; * * Looper.loop(); //这里面发送消息 * &#125; * &#125; Looper持有一个MessageQueue(消息队列)成员变量，消息循环时，Looper就不断地从消息队列中拿出消息进行处理。下面来看Looper.loop()方法里所做的事：1234567891011121314151617181920212223/** 删除了部分不相关的代码 * Run the message queue in this thread. Be sure to call * &#123;@link #quit()&#125; to end the loop. */ public static void loop() &#123; final Looper me = myLooper();//返回当前线程中对应的Looper，看看下面的Exception就知道了 if (me == null) &#123; throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\"); &#125; final MessageQueue queue = me.mQueue; for (;;) &#123; Message msg = queue.next(); // might block if (msg == null) &#123; // No message indicates that the message queue is quitting. return; &#125; try &#123; msg.target.dispatchMessage(msg); &#125; finally &#123; ....省略 &#125; &#125; &#125; 简单解释一下，也就是从消息队列中取出新的消息(msg)。交给msg.target.dispatchMessage(msg)这个trarget是个Handler来看下Handler里面的dispatchMessage方法123456789101112131415/** * Handle system messages here. */ public void dispatchMessage(Message msg) &#123; if (msg.callback != null) &#123; handleCallback(msg); &#125; else &#123; if (mCallback != null) &#123; if (mCallback.handleMessage(msg)) &#123; return; &#125; &#125; handleMessage(msg); &#125; &#125; 很明显是一个either or 的过程：Message这个类里面有个Runnable callback，如果这个message有callback的话，就执行这个runnable，否则执行handler.callBack.handleMessage。也就是我们经常用的123456Handler handler = new Handler()&#123; @Override public void handleMessage(Message msg) &#123; super.handleMessage(msg); &#125; &#125;; 这种内部类的形式了需要注意的是，Message最好不要用new，使用obtain方法获得，使用release方法释放，这里面有一个消息池的概念，我也不太理解。MessageQueue中没有太多的公共方法，其中next()方法会返回 message that should be processed. Will not return message that will be processed at future times.Message有一个long类型的变量Message.when，指的是这条消息最早可以被执行的时间，这个时间是基于SystemClock.uptimeMills()的。所以如果消息队列中没有一条message到达自己的可执行时间, 这个next()方法就会一直block。值得注意的是SystemClock.uptimeMills是基于CPU活动时间的，如果cpu处于sleep状态，这个sleep时间是不算的。所以如果你postDelayed了10s，假设cpu5s后开始休眠，10s后醒来，睡眠的这段时间是不算的。所以真正执行的时间可能还会往后延迟。 2. HandlerHandler基本上就做两件事 add message to the messageQueue of the Looper it’s associated with post() //把一条消息添加到所有可以被执行的消息的最后面，但在还没到时间的消息的前面 postDelayed()/postAtTime() //一个相对时间，一个绝对时间 postAtFrontOfQueue() // @piwai 插队行为，不要用 Handle message when this message doesn’t have callbackHandler的构造方法有7个,初始化时需要获得一个Looper常用的Handler handler = new Handler() 会创建一个基于当前线程的Looper的Handler,如果当前线程没有调用Looper.Prepare，会抛出一个异常，这些在源代码里都能看到。一些好用的构造函数 Handler (Looper.getMainLooper()) //往主线程的Looper的消息队列里发消息Hanlder(Looper.myLooper()) //往当前线程Looper的消息队列里添加消息 Choreographer使用Android studio时，经常会在Logcat里看到这样的 info: Skipped 60 frames! The application may be doing too much work on its main thread 这段log出自Chreographer ，大意就是主线程上做的事太多或者做了太多不该在主线程上做的事。至于为什么不要在主线程上做太多的事，来看看主线程都有哪些工作:System Events , Input Events ,Application callback ,Services, Alarm ,UI Drawing….另外，当屏幕内容发生变化，或者在Animation运行中，系统将会尝试每隔16ms来Draw a Frame。而这部分工作是由Choregrapher来完成的，而其内部是通过一个Handler来进行Frame更新的。 12345678910111213141516171819202122232425FrameHandler mHandler = new FrameHandler(Looper.myLooper());Message msg = mHandler.obtainMessage(MSG_DO_FRAME);msg.setAsynchronous(true);mHandler.sendMessageAtTime(msg,nextFrameTime) private final class FrameHandler extends Handler &#123; public FrameHandler(Looper looper) &#123; super(looper); &#125; @Override public void handleMessage(Message msg) &#123; switch (msg.what) &#123; case MSG_DO_FRAME: doFrame(System.nanoTime(), 0); break; case MSG_DO_SCHEDULE_VSYNC: doScheduleVsync(); break; case MSG_DO_SCHEDULE_CALLBACK: doScheduleCallback(msg.arg1); break; &#125; &#125; &#125; 假设你在onMeasure,onLayout,onDraw这些方法中耽误主线程太多时间，Choregrapher将不能及时的更新Frame，哪怕你只耽误了1ms，系统也只能在16ms(大约)之后才能更新下一Frame。 3. 为了在开发中发现不应该在主线程中进行的操作(IO，网络)，可以使用StrictMode：1234567891011121314if (BuildConfig.DEBUG) &#123; StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder() .detectDiskReads() .detectDiskWrites() .detectNetwork() // or .detectAll() for all detectable problems .penaltyLog() .build()); StrictMode.setVmPolicy(new StrictMode.VmPolicy.Builder() .detectLeakedSqlLiteObjects() .detectLeakedClosableObjects() .penaltyLog() .penaltyDeath() .build()); &#125; 4 .Activity LifeCycle Events Activity LifeCycle Events(startActivity(), finishi()) go out of your process through Binder IPC to the ActivityManager //有时候startActivity启动的Activity不是自己Process的,比如调用系统相机这种 Then back on to your main queue in the form of lifeCycle callbacks(onCreate(),onDestory() et_al) // 异步，异步！ 最后回到文章开头的那个问题：Handler.postDelay会阻塞线程吗？答案在这里找到了postDelayed本身就是把一条消息推迟到相对时间多久之后。关键在Looper取出这条消息时，用的是 Message msg = queue.next(); // might block 注释已经暗示了可能会阻塞，看下next方法做了什么:123456789101112131415161718192021222324252627282930313233343536373839404142 Message next() &#123; .....省略 for (;;) &#123; if (nextPollTimeoutMillis != 0) &#123; Binder.flushPendingCommands(); &#125; nativePollOnce(ptr, nextPollTimeoutMillis); synchronized (this) &#123; // Try to retrieve the next message. Return if found. final long now = SystemClock.uptimeMillis(); Message prevMsg = null; Message msg = mMessages; if (msg != null &amp;&amp; msg.target == null) &#123; // Stalled by a barrier. Find the next asynchronous message in the queue. do &#123; prevMsg = msg; msg = msg.next; &#125; while (msg != null &amp;&amp; !msg.isAsynchronous()); &#125; if (msg != null) &#123; if (now &lt; msg.when) &#123; // Next message is not ready. Set a timeout to wake up when it is ready. nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE); &#125; else &#123; // Got a message. mBlocked = false; if (prevMsg != null) &#123; prevMsg.next = msg.next; &#125; else &#123; mMessages = msg.next; &#125; msg.next = null; msg.markInUse(); return msg; &#125; &#125; else &#123; // No more messages. nextPollTimeoutMillis = -1; &#125;....省略部分 首先进来 调用了nativePollOnce(ptr,nextPollTimeoutMillis);这是个native方法，类似于线程的wait方法，不过使用了Native的方法会更加精准。可以认为是用native方法让这个queue.next的方法耗时延长了，所以return时返回的Message也就满足合适的时间。往下看 // Next message is not ready. Set a timeout to wake up when it is ready. nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE); 所以确实是blocked了。但这并不意味着从postDelayed(r,10)开始，接下来的10ms就真的完全堵塞了(queue.next阻塞)PostDelayed最终会调用到enqueMessage方法，看一下:1234567891011121314151617181920212223242526272829303132333435363738394041424344synchronized (this) &#123; if (mQuitting) &#123; IllegalStateException e = new IllegalStateException( msg.target + \" sending message to a Handler on a dead thread\"); Log.w(TAG, e.getMessage(), e); msg.recycle(); return false; &#125; msg.markInUse(); msg.when = when; Message p = mMessages; boolean needWake; if (p == null || when == 0 || when &lt; p.when) &#123; // New head, wake up the event queue if blocked. msg.next = p; mMessages = msg; needWake = mBlocked; &#125; else &#123; // Inserted within the middle of the queue. Usually we don't have to wake // up the event queue unless there is a barrier at the head of the queue // and the message is the earliest asynchronous message in the queue. needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous(); Message prev; for (;;) &#123; prev = p; p = p.next; if (p == null || when &lt; p.when) &#123; break; &#125; if (needWake &amp;&amp; p.isAsynchronous()) &#123; needWake = false; &#125; &#125; msg.next = p; // invariant: p == prev.next prev.next = msg; &#125; // We can assume mPtr != 0 because mQuitting is false. if (needWake) &#123; nativeWake(mPtr); &#125;&#125; 注意nativeWake方法，在满足一定情况下会唤醒线程总结一下就是postDelayed确实调用了阻塞线程的方法，但一旦消息队列前面插入了可执行的message，会调用唤醒线程的方法。这些大部分在MessageQueue这个class中，看一下基本都能明白。 回顾一下整个过程:主线程作为一个Thread，持有一个Looper对象，Looper持有一个MessageQueue的消息队列，并一个一个地从中取出满足执行时间条件的Message，执行Messgae的callback或者交给Handler的handleMessage去处理。 Reference Handler.postDelayed()是如何精确延迟指定时间的 How the Main Thread works 安卓中为什么主线程不会因为Looper中的死循环而卡死？","tags":[{"name":"Handler Message","slug":"Handler-Message","permalink":"https://haldir65.github.io/tags/Handler-Message/"}]},{"title":"Theme和Style的区别","date":"2016-10-10T11:35:32.000Z","path":"2016/10/10/theme-versus-style/","text":"认识Theme和Styles 重新看一遍Using Themes and styles without going crazy，大部分属于直接翻译 1. Styles1.1 首先，在layout文件中，Style可以将一些重复的，具有共性的属性提取出来1&lt;View android:background= \"#ff0000\" /&gt; 变成 12345&lt;View style= \"@Style/MyStyle\" /&gt;&lt;Style name = \"MyStyle\"&gt;true&lt;item name = \"android:background\"&gt;#ff0000&lt;/item&gt;&lt;/Style&gt; 这种形式，对于大量的具有相同属性的且具有共性的View，可以直接使用对应的Style，这能够让layout文件更加整洁。前提是确信layout文件中使用的View具有相同的属性。 1.2 Style InheritanceStyle可以继承，两种方式： 假设有parent style ，一种在name中使用前缀的方式指明parent，另一种在后面显式的声明parent 1&lt;style name = \"Parent\"/&gt; Explicit child 1&lt;style name = \"Child\" parent = \"Parent\"&gt; Implicit Child 1&lt;style name = \"Parent.Child\"/&gt; 同时使用两种方式时，默认使用Explicit Parent 为避免混淆，推荐使用Explicit Child且Child name不带前缀 View不能拥有两个Style,除了TextView及其子类，例如 12345&lt;TextView&gt; android:textColor = \"#ffffff\"truestyle=\"@style/SomeStyle\" android:textAppearance = \"@style/MyText\"&lt;/TextView&gt; 如上所示，TextView中可以定义TextAppearance，后者包含了常见的textColor，textSize等attributes，而在一个View中可以同时定义两个Style。如果出现冲突，styles之间相同attributes的应用优先级为： android:textColor &gt;&gt; SomeStyle中的android:textColor&gt;&gt;MyText中的android:textColor 使用TextAppearance 时一定要有一个parent 123&lt;style name = \"MyText\" parent=\"TextAppearance.Appcompat\"&gt;true&lt;item name = \"android:TextColor\"&gt;#F08&lt;/item&gt;&lt;/style&gt; 因为使用style时，系统将把style中定义的attribute和当前View的默认attribute融合起来，而TextView默认attribute 中什么也没有，造成textSize = 0的情况，所以务必选择parent，在parent style已经定义好大多数属性的情况下再去修改小部分属性将简单得多。TextAppearance可以在Theme中定义，也可以写在单一的TextView上。 ####2. Themes在Android中，Theme名字以”Theme.”开头，查看源码会发现只是定义了一大堆color attributes 和Window attributes。Themes比Styles的作用范围更广，themes可以在Application,Activity层面管理Widget外观，Theme还可以实现夜间模式切换 来看如何定义一个Theme 123&lt;style name = \"Theme\"&gt;true&lt;item name = android:statusBarColor&gt;#ff0000&lt;/item&gt;&lt;/style&gt; 回头看一下Style 123&lt;Style name = \"Style\"&gt;true&lt;item name = \"android:background\"&gt;#ff0000&lt;/item&gt;&lt;/Style&gt; 语法看起来完全一样。 区别：styles中的属性被直接送到View的构造函数中，记得在自定义View时写的那些attrs吗，其实就是两个参数的构造函数中的AttributeSets Theme应用范围更广，定义的属性和Style也不尽相同。 两者之间有一些联系：例如Theme中可以定义default widget style，Style可以引用Theme中定义的属性(?attr:selectableItemBackground还记得吗)上面提到了Theme中可以定义default widget style，具体做法无非就是这样: 123&lt;style name= \"MyTheme\" parent=\"Theme.AppCompat.Light\"&gt; &lt;item name=\"android:editTextStyle\"&gt;@style/MyEditTextStyle&lt;/item&gt;&lt;/style&gt; 所以，只要在AppTheme中点进去，找一下这个键对应的值就可以了 2.1 使用Theme 两种方式: 1.在Manifest中，例如 123456&lt;application android:theme=\"@style/Theme.AppCompat\" /&gt;或者&lt;activity android:theme=\"@style/Theme.AppCompat.Light\" /&gt; activty中Theme override Application的Theme 应用于View Lollipop开始引入View Theming的概念 123&lt;Toolbar android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" app:popupTheme=\"@style/ThemeOverlay.AppCompa.Light\"/&gt; 应用在View上的Theme将能够作用在该View及其所有的Children，这样做的好处在于没有必要专门为了一个View而去选择其他的Theme。 例如在Holo中有Holo.Light.DarkActionBar，为了专门适配ActionBar需要一个专门的Theme。目前看来主要应用在Toolbar上。 3 .墙裂推荐使用AppCompat 好处: Material on all devices ,记得以前听说AppCompat在21以上继承自Theme.Material。 Baseline themes/styles AppCompat 预设了一系列样式标准，只需要继承AppCompat，改动一小部分样式就能完成设计 Enable View theming pre-Lollipop 使用ColorPrimary , ColorAccent等attributes(backPorted by AppCompat)设置Widget样式 在Theme中可以定义默认的Widget样式，例如123&lt;style name=\"AppTheme\" parent = \"Theme.AppCompat\"&gt;&lt;item name=\"android:spinnerItemStyle\"&gt;@sytle/MySpinnerStyle&lt;/item&gt;&lt;/style&gt; 还可以更改默认样式： 123456&lt;style name = \"AttrTheme\" parent =\"Theme.AppCompat\"&gt;&lt;item name =\"selectableItemBackground\"&gt;@drawable/bg&lt;/item&gt;&lt;/style&gt;使用时&lt;Button android:background=?attr/selectableItemBackground\"/&gt; 这样就可以自定义点击时的Drawable了。 支持android:theme: API 7+(只应用于该View)，API 11+(View及其子View) View theming原本只是API 21才引入的概念，AppCompat实现了向前兼容 4 . ?attr的问题 ?android:attr/selectableItemBackground 一个个来解释： ? : we’re doing a theme lookup android: we’re looking up something within the android namespace attr/ : we’re looking for an attribute(可省略) selectableItemBackground: The name of the atribute we’re looking up 把attr/省略掉后变成 ?android:selectableItemBackground 效果完全一样 123&lt;style name=\"MyTheme\"&gt;true&lt;item name = \"android:colorPrimary\"&gt;@color/red&lt;/item&gt;&lt;/style&gt; 问题在于android:ColorPromary是Lollipop才引入的，解决方案 123&lt;syle name = \"MyTheme\" parent=\"Theme.AppCompat\"&gt;true&lt;item name = \"colorPrimary\"&gt;@color/red&lt;/item&gt;&lt;/syle&gt; 注意这里没有android: 前缀，AppCompat针对API21之前的版本定义了自己的一套资源。 再举个例子 123456789101112131415在values/attrs.xml中&lt;attr name:\"myAttribute\" format=\"dimension\"/&gt;在values/themes.xml中&lt;style name = \"MyTheme\" parent = \"Theme.AppCompat\"&gt;true&lt;item name=\"myAttribute\"&gt;4dp&lt;/item&gt; 这就是实际使用的Theme&lt;/style&gt;在values/styles.xml中&lt;style name=\"MyStyle\"&gt;true&lt;item name=\"android:padding\"&gt;?attr/myAttribute&lt;/item&gt;&lt;/style&gt;实际操作中在layout文件中，通过将一个长度，颜色定义为?attr的方式，就会去当前的Theme中寻找相对应的attribute，这就是黑夜模式切换的原理 要注意的是，所有非android nameSpace的attribute Name都是global的，所以如果两个library定义了相同的attribute Name，将无法编译通过。 Style可以通过?attr的方式引用Theme中的资源 5 .获取Theme1234567context.getTheme().resolveAttribute(R.attr.dialogTheme,outValue,true) 在View中 TypedArray a = context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.ImageView,defStyleAttr,defStyleRes) int alpha = a.getInt( com.android.internal.R.styleable.ImageView_drawableAlpha,255) Activity有一个setTheme(int themeResId)方法，注意，这个方法并不是取代原先的Theme,只是在原有的Theme上apply了。所以这个命名不算太好。Activity内部会在onCreate()前调用setTheme(你写在manifest里面的Theme) 6. v21的问题1234567891011在values/styles.xml中&lt;style name=\"BaseToolbar\"/&gt;在values-v21/styles.xml中&lt;style name= \"BaseToolbar\"&gt;true&lt;item name = \"android:elevation\"&gt;4dp&lt;/item&gt;&lt;/style&gt;elevation是21以上api才有的属性，lint会提示问题这样，在values/styles.xml中&lt;style name = \"Toolbar\" parent = \"BaseToolbar\"/&gt;lint就不会飙黄了，直接引用Toolbar即可 通过这种继承的方式能够在自己的Theme中使用统一的theme，针对不同的运行时版本确定最终运行的Theme。 7 . ThemeOverlay123ThemeOverlay.Material.LightThemeOverlay.Material.Dark//etc ... 用于添加到现有的Theme上，例如Theme.Material.Light只包含color relevant to a light Theme，不会改变原有Theme的window Attributes。查看源码，只是完整的Theme中的一小部分attribute。 8. 常见错误 作为Theme中引用的style必须要有一个parent 例如12345678在AppTheme中&lt;item name = \"android:editTextStyle\"&gt;@style/MyEditTextStyle&lt;/item&gt;&lt;style name= \"MyEditTextStyle\"&gt;true&lt;item name= \"android:fontFamily\"&gt; sans-serif-medium &lt;/item&gt;&lt;/style&gt; 这样做的结果将是所有的EditText都会失去基本的属性 defStyleAttr vs defStyleRes 常见于 12ObtainStyledAttributes(AttributeSet set,int []attrs, int defStyleAttr,int defStyleRes) 直接解释： defStyleAttr: The attr in your theme which points to the default style eg: R.attr.editTextStyle defStyleRes: The resource ID of the default style eg:R.style.Widget_Material_EditText ObtainStyledAttributes查找Value时读取的顺序如下 123451. Value in the AttributeSet2. Value in the explicit style3. Default style specified in defStyleRes4. Default style specified in defStyleAttr5. Base value in this theme 注意最后一条，万一在manifests文件中出现这种东西 123&lt;Style name = \"AppTheme\" parent = \"Theme.AppCompat\"&gt;true&lt;item name = \"android:background\"&gt;...&lt;/item&gt;&lt;/Style&gt; 这意味着 Any View which doesn’t have a background set ,will use the theme’s value , SHIT! 9. 容易遇到的错误编译不通过的情况12Error retrieving parent for item: No resource found that matches the given name '@android:style/TextAppearance.Holo.Widget.ActionBar.Title' 10. 最后，一点好玩的12345678Context themedContext = new ContextThemeWrapper(baseContext,R.style.MyTheme);View view = LayoutInflator.form(themedContext) .inflate(R.layout.some_layout,null);//或者View view = new View(themedContext);//生成的View就会带有MyTheme中的属性，动态设置。 而这也是AppComPat对于API 21以下版本进行兼容的原理翻了一下文档：ContextThemeWrapper : Added in API level 1 这一点AppCompat的作者也在2014年的一篇 博客中提到了。 reference Daniel Lew View Constructor IO 2016","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"android 7.0一些新特性介绍及适配方案","date":"2016-10-07T19:02:26.000Z","path":"2016/10/08/android-7-0-new-features/","text":"Google I/O 2016上的What’s new in Android介绍的比较全面，MultiWindow、Notification、ConstraintLayout等都比较简单。这里拎出来开发者不得不注意的几点来介绍。 1. BackGround OptimizationCONNECTIVITY_CHANGE(很多应用喜欢在Manifest里注册这个BroadcastReceiver，导致网络变化时，一大堆应用都被唤醒，而ram中无法同时存在这么多process，系统不得不kill old process，由此导致memory thrashing) 同时被移除的还有NEW_PICTURE,NEW_VIDEO. 具体来说: 对于targeting N的应用，在manifest文件中声明 static broadcastReceiver，监听CONNECTIVITY_CHANGE将不会唤醒应用。如果应用正在运行，使用context.registerReceiver，将仍能够接受到broadcast。但不会被唤醒。 解决方案: 使用JobScheduler或firebase jobDispatcher。举个例子:123456789101112131415public static final int MY_BACKGROUND_JOB = 0; public static void scheduleJob(Context context)&#123; if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123; JobScheduler js = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE); JobInfo job = new JobInfo.Builder( MY_BACKGROUND_JOB, new ComponentName(context,MyJobService.class)). setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED). setRequiresCharging(true). build(); js.schedule(job); &#125; &#125; 对于NEW_PICTURE,NEW_VIDEO. 所有在7.0 Nuget以上设备运行的应用(无论是否 target N) 都不会收到这些broadcast。简单来说，fully deprecated !!! 解决方案：使用JobScheduler(可以监听contentProvider change)NEW_PICTURE的处理(这段代码只在API24以上存在，所以加了版本判断)123456789101112131415public static void scheduleJob(Context context)&#123; if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123; JobScheduler js = context.getSystemService(JobScheduler.class); JobInfo.Builder builder = new JobInfo.Builder( R.id.schedule_photo_jobs, new ComponentName(context,PhotoContentJob.class)); builder.addTriggerContentUri( new JobInfo.TriggerContentUri(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, JobInfo.TriggerContentUri.FLAG_NOTIFY_FOR_DESCENDANTS) ); js.schedule(builder.build()); &#125;&#125; 参考youtube上谷歌员工的演讲 2. 文件系统的权限更改(FileProvider) File storage permission change 简单来说就是Uri.fromFile(file://URI)不能再用了，需要使用FileProvider，这主要是为了6.0开始引进的permission model 考虑的，storage permission例如WRITE_EXTERNAL_STORAGE这种都已经属于Dangerous permission了。 一个常见的场景就是调用系统相机拍照，给Intent设置一个uri，在7.0上直接用Uri.FromFile会崩 需要通过FileProvider提供Uri,写了一个Demo，使用FileProvider传递文件给另一个App。 另一个需要注意的就是DownloadManager访问COLUMN_LOCAL_FILENAME会报错，这个不常见。 Reference Docs youtube Andrioid 7.0适配心得 Android 7.0 Behavior Changes","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"安卓事件分发流程","date":"2016-10-06T15:32:30.000Z","path":"2016/10/06/touch-event-distribution/","text":"图1 默认情况下事件传递的路径 Touch事件始于ACTION_DOWN, 终止于ACTION_UP, 这其中可能会伴随着ACTION_MOVE,ACTION_CANCEL等等。 首先来关注ACTION_DOWN，用户触摸屏幕，MotionEvent开始传递： Activity.dispatchTouchEvent ViewGroup.dispatchTouchEvent ViewGroup.onInterceptTouchEvent …..中间省略n个视图层级 ….&gt;&gt;&gt; View.dispatchTouchEvent View.onTouchEvent ​ ….中间省略n个视图层级….&gt;&gt;&gt; ViewGroup.onTouchEvent Activity.onTouchEvent 这也就是本文最开始的图1内描述的内容，注意，在默认情况下(各个函数都返回super的情况下)才能将这个从上到下，再从下到上的循环走完整。这里讨论的还只是ACTION_DOWN。 接下来看ACTION_DOWN下发过程中各个函数返回值对于整个传递链走向的影响，我们在override这些函数的时候，返回值无非三种： true , false ,super return true：ACTION_DOWN事件分发到此结束(消费掉)，这里有一个要注意的是onInterceptTouchEvent,返回true表示该ViewGroup打算将事件拦截下来，底层View将接收到一个ACTION_CANCEL，事件传递给该ViewGroup的onTouchEvent return false: 对于dispatchTouchEvent，返回false表明不再向下分发，ACTION_DOWN发送到上一层ViewGroup(Activity)的OnTouchEvent；对于onInterceptTouchEvent,返回false表明该ViewGroup不打算拦截，继续下发，对于onTouchEvent，返回false，事件继续上传至上一层级ViewGroup的OnTouchEvent 。 return super : 完成整个传递链，就像图1中展示的一样。 图2 来自图解安卓事件分发机制 完美地解释了事件分发各个流程中返回值对于事件传递的影响。 图3 来自图解安卓事件分发机制 接下来看ACTION_DOWN时返回值对于后续ACTION_MOVE,ACTION_UP等传递路径的影响： 首先介绍概念： gesture = ACTION_DOWN+ a bounch of ACTIONS +ACTION_UP 一个gesture(手势)即从手指按下到手指离开这段过程中所有的事件的集合,swipe,click,fling等等 ACTION_DWON发生时，android将会在当前touch区域所有的View中确定一个Touch Target,后者将接管此次gesture中的所有ACTION_MOVE,ACTION_UP。（这样做有两点好处：1.一旦确定了Touch Target，系统将会把所有的后续事件全部传递到这个target为止，这就避免了复杂的view traversing，有助于提升性能; 2：传递链中第一个能够成为Touch Target的View将独立处理后续事件，不需要考虑其他View受到影响）。在在一个gesture开始时，OnTouchEvent（ACTION_DOWN）返回true,就意味着成为TouchTarget。借用简书作者的总结: ACTION_DOWN事件在哪个控件消费了（return true）， 那么ACTION_MOVE和ACTION_UP就会从上往下（通过dispatchTouchEvent）做事件分发往下传，就只会传到这个控件，不会继续往下传，如果ACTION_DOWN事件是在dispatchTouchEvent消费，那么事件到此为止停止传递，如果ACTION_DOWN事件是在onTouchEvent消费的，那么会把ACTION_MOVE或ACTION_UP事件传给该控件的onTouchEvent处理并结束传递。 这里可以看到，事件依旧是从上往下一直分发到TouchTarget这一层，只是在TouchTarget这一层被消费了，且不再往上传递(有助于性能提升)。父ViewGroup的dispatchTouchEvent和onInterceptTouchEvent依旧会先于TouchTarget接收到ACTION_MOVE等事件。所以此时如果父ViewGroup在onInterceptTouchEvent中返回true，父ViewGroup将取代原有的子View成为新的ViewTarget,后续事件(ACTION_MOVE等)将传递到该父ViewGroup中，而子View将收到ACTION_CANCEL(可以在这里做一些恢复状态的工作，比如从foucused变成unfocused)。举一个例子：在ScrollView(不是Android自带的那个)中放一个Button，ACTION_DOWN时，BUTTON表示可以处理ACTION_DOWN,因为这可能会是一次click，于是Button就成了TouchTarget，后续事件将不会传递到ScrollView中，ScrollView也就无法滑动。为解决这个问题，在ScrollView的onInterceptTouchEvent中，如果看到ACTION_DWON，返回false(点击事件对于滑动毫无意义)，但如果看到ACTION_MOVE(滑动事件),返回true并成为新的TouchTarget。注意是在OnInterceptTouchEvent中拦截而不是dispatchTouchEvent中拦截，后者会将事件传递到上层ViewGroup的onTouchEvent中。想想看，不去dispatch了、、、android这种Api起名还是可以的。 #onClick事件接下来看onClick和onLongClick，onTouchListener这类事件何时触发 首先是View的dispatchTouchEvent源码部分 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152case MotionEvent.ACTION_UP: boolean prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != 0; if ((mPrivateFlags &amp; PFLAG_PRESSED) != 0 || prepressed) &#123; // take focus if we don't have it already and we should in // touch mode. boolean focusTaken = false; if (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123; focusTaken = requestFocus(); &#125; if (prepressed) &#123; // The button is being released before we actually // showed it as pressed. Make it show the pressed // state now (before scheduling the click) to ensure // the user sees it. setPressed(true, x, y); &#125; if (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123; // This is a tap, so remove the longpress check removeLongPressCallback(); // Only perform take click actions if we were in the pressed state if (!focusTaken) &#123; // Use a Runnable and post this rather than calling // performClick directly. This lets other visual state // of the view update before click actions start. if (mPerformClick == null) &#123; mPerformClick = new PerformClick(); &#125; if (!post(mPerformClick)) &#123; performClick(); &#125; &#125; &#125; if (mUnsetPressedState == null) &#123; mUnsetPressedState = new UnsetPressedState(); &#125; if (prepressed) &#123; postDelayed(mUnsetPressedState, ViewConfiguration.getPressedStateDuration()); &#125; else if (!post(mUnsetPressedState)) &#123; // If the post failed, unpress right now mUnsetPressedState.run(); &#125; removeTapCallback(); &#125; mIgnoreNextUpEvent = false; break; 所以onClick事件是在ACTION_UP中执行的 而LongClick事件要看ACTION_DOWN了 1234567891011121314151617181920212223242526case MotionEvent.ACTION_DOWN: mHasPerformedLongPress = false; if (performButtonActionOnTouchDown(event)) &#123; break; &#125; // Walk up the hierarchy to determine if we're inside a scrolling container. boolean isInScrollingContainer = isInScrollingContainer(); // For views inside a scrolling container, delay the pressed feedback for // a short period in case this is a scroll. if (isInScrollingContainer) &#123; mPrivateFlags |= PFLAG_PREPRESSED; if (mPendingCheckForTap == null) &#123; mPendingCheckForTap = new CheckForTap(); &#125; mPendingCheckForTap.x = event.getX(); mPendingCheckForTap.y = event.getY(); postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout()); &#125; else &#123; // Not inside a scrolling container, so show the feedback right away setPressed(true, x, y); checkForLongClick(0, x, y); &#125; break; 关键看checkForLongClick, 不贴代码了，结论是：在ACTION_DOWN事件被捕捉后，系统会开始触发一个postDelayed操作，delay的时间为 12&gt; ViewConfiguration.getLongPressTimeout() - delayOffset&gt; （这个值在Eclair2.1上为500ms），500ms后会触发CheckForLongPress线程的执行： 想想看，LongClick事件是在DOWN时开始计时，500ms假设，OnClick是在UP是发生，所以完全有可能同时发生OnClick和OnLongClick。这里看到当onLongClick的返回值为true时， mHasPerformedLongPress = true ,仔细看ACTION_UP中，如果HasPerformLongPress==true，就不会走到onClick事件里。所以在onLongClickListener里需要返回一个boolean值的原因就这么简单。 1234567891011121314151617if (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123; // This is a tap, so remove the longpress check removeLongPressCallback(); // Only perform take click actions if we were in the pressed state if (!focusTaken) &#123; // Use a Runnable and post this rather than calling // performClick directly. This lets other visual state // of the view update before click actions start. if (mPerformClick == null) &#123; mPerformClick = new PerformClick(); &#125; if (!post(mPerformClick)) &#123; performClick(); &#125; &#125; &#125; 接下来是OnTouchListener，直接上结论: onTouchListener里面的方法是在dispatchTouchEvent里面调用的，并且如果listener里面的onTouch返回true，事件将不会发送给onTouchEvent，因此OnTouchListener势必会优先级高于onClick和onLongClick。 VelocityTracker12345velocityTracker = VelocityTracker.obtain()；velocityTracker.addMovement(event);velocityTracker.computeCurrentVelocity(1); velocityTracker.getXVelocity();velocityTracker.recycle(); 值得注意的是，VelocityTracker内部使用了大量的native方法，所以执行速度比java要快很多。 实现Fling效果1234567891011121314private void onFling(float velocityX,float velocityY)&#123; scroller.fling(getScrollX(),getScrollY(),(int)-velocityX (int)-velocityY,minScrollX,maxScrollX, minScrollY,maxScrollY); invalidate();&#125;@overdide// 这是每个View都有的方法private void computeScroll()&#123; if(scroller.isFinished())&#123; scroller.computeScrollOffset(); scrollTo(scroller.getCurrX(),scroller.getCurrY()); postInvalidateOnAnimation(); &#125;&#125; 捕获双击事件12345678910111213141516171819202122232425262728293031323334353637public class MyView extends View &#123; GestureDetector gestureDetector; public MyView(Context context, AttributeSet attrs) &#123; super(context, attrs); // creating new gesture detector gestureDetector = new GestureDetector(context, new GestureListener());&#125; // skipping measure calculation and drawing // delegate the event to the gesture detector @Override public boolean onTouchEvent(MotionEvent e) &#123; return gestureDetector.onTouchEvent(e);&#125; private class GestureListener extends GestureDetector.SimpleOnGestureListener &#123; @Override public boolean onDown(MotionEvent e) &#123; return true; &#125; // event when double tap occurs @Override public boolean onDoubleTap(MotionEvent e) &#123; float x = e.getX(); float y = e.getY(); Log.d(\"Double Tap\", \"Tapped at: (\" + x + \",\" + y + \")\"); return true; &#125; &#125; &#125; 最后是关于ViewConfiguration的一些常量获取的静态方法： int getScaledTouchSlop(); (if Math.abs(xx+yy)&gt;mTouchSlop 就可以认为是滑动事件了) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293/** * 包含了方法和标准的常量用来设置UI的超时、大小和距离 */ public class ViewConfiguration &#123; // 设定水平滚动条的宽度和垂直滚动条的高度，单位是像素px private static final int SCROLL_BAR_SIZE = 10; //定义滚动条逐渐消失的时间，单位是毫秒 private static final int SCROLL_BAR_FADE_DURATION = 250; // 默认的滚动条多少秒之后消失，单位是毫秒 private static final int SCROLL_BAR_DEFAULT_DELAY = 300; // 定义边缘地方褪色的长度 private static final int FADING_EDGE_LENGTH = 12; //定义子控件按下状态的持续事件 private static final int PRESSED_STATE_DURATION = 125; //定义一个按下状态转变成长按状态的转变时间 private static final int LONG_PRESS_TIMEOUT = 500; //定义用户在按住适当按钮，弹出全局的对话框的持续时间 private static final int GLOBAL_ACTIONS_KEY_TIMEOUT = 500; //定义一个touch事件中是点击事件还是一个滑动事件所需的时间，如果用户在这个时间之内滑动，那么就认为是一个点击事件 private static final int TAP_TIMEOUT = 115; /** * Defines the duration in milliseconds we will wait to see if a touch event * is a jump tap. If the user does not complete the jump tap within this interval, it is * considered to be a tap. */ //定义一个touch事件时候是一个点击事件。如果用户在这个时间内没有完成这个点击，那么就认为是一个点击事件 private static final int JUMP_TAP_TIMEOUT = 500; //定义双击事件的间隔时间 private static final int DOUBLE_TAP_TIMEOUT = 300; //定义一个缩放控制反馈到用户界面的时间 private static final int ZOOM_CONTROLS_TIMEOUT = 3000; /** * Inset in pixels to look for touchable content when the user touches the edge of the screen */ private static final int EDGE_SLOP = 12; /** * Distance a touch can wander before we think the user is scrolling in pixels */ private static final int TOUCH_SLOP = 16; /** * Distance a touch can wander before we think the user is attempting a paged scroll * (in dips) */ private static final int PAGING_TOUCH_SLOP = TOUCH_SLOP * 2; /** * Distance between the first touch and second touch to still be considered a double tap */ private static final int DOUBLE_TAP_SLOP = 100; /** * Distance a touch needs to be outside of a window's bounds for it to * count as outside for purposes of dismissing the window. */ private static final int WINDOW_TOUCH_SLOP = 16; //用来初始化fling的最小速度，单位是每秒多少像素 private static final int MINIMUM_FLING_VELOCITY = 50; //用来初始化fling的最大速度，单位是每秒多少像素 private static final int MAXIMUM_FLING_VELOCITY = 4000; //视图绘图缓存的最大尺寸，以字节表示。在ARGB888格式下，这个尺寸应至少等于屏幕的大小 @Deprecated private static final int MAXIMUM_DRAWING_CACHE_SIZE = 320 * 480 * 4; // HVGA screen, ARGB8888 //flings和scrolls摩擦力度大小的系数 private static float SCROLL_FRICTION = 0.015f; /** * Max distance to over scroll for edge effects */ private static final int OVERSCROLL_DISTANCE = 0; /** * Max distance to over fling for edge effects */ private static final int OVERFLING_DISTANCE = 4; &#125; Reference 图解安卓事件分发机制 making sense of the touch system Android onTouchEvent, onClick及onLongClick的调用机制 Android触摸事件机制(三) ViewConfiguration用法 触摸事件的分析与总结 ​","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"service和activity的通信方式","date":"2016-09-30T07:25:28.000Z","path":"2016/09/30/service-activity-communication/","text":"一年以前写过一篇关于service和Activity相互通信的很详细的博客，当时真的是费了很大心思在上面。现在回过头来看，还是有些不完善的地方，比如aidl没有给，demo不够全面。现在补上。 关于Android的Service，官方文档是这样描述的 Service 是一个可以在后台执行长时间运行操作而不使用用户界面的应用组件。服务可由其他应用组件启动，而且即使用户切换到其他应用，服务仍将在后台继续运行。 此外，组件可以绑定到服务，以与之进行交互，甚至是执行进程间通信 (IPC)。 例如，服务可以处理网络事务、播放音乐，执行文件 I/O 或与内容提供程序交互，而所有这一切均可在后台进行。 这其中也能看出Android对于Service角色的定位，后台工作，不涉及UI。 Service本身包含started Service和Binded Service 对于Binded Service 使用 待续referencecsdn","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"service","slug":"service","permalink":"https://haldir65.github.io/tags/service/"}]},{"title":"git常用操作手册","date":"2016-09-27T09:24:51.000Z","path":"2016/09/27/git-manual/","text":"记录一下常用git的命令，作为日常使用的参考手册1. 在本地创建一个项目并同步到github的过程12345678$ mkdir ~/hello-world //创建一个项目hello-world$ cd ~/hello-world //打开这个项目$ git init //初始化 $ touch README //创建文件$ git add README //更新README文件$ git commit -m 'first commit' //提交更新，并注释信息“first commit”$ git remote add origin git@github.test/hellotest.git //连接远程github项目 $ git push -u origin master //将本地项目更新到github项目上去 2. 将本地git branch和远程github repository同步可行的方式1git branch --set-upstream local_branch origin/remote_branch 这样做可行，但出现下面的错误提示，照着操作就行了。 123$ git branch --set-upstream master origin/masterThe --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-toBranch master set up to track remote branch master from origin. 3. git处理大小写字母的问题 git默认对大小写不敏感，所以，新建一个文件adapter.java，上传到github之后说不定就给变成了Adapter.java。在windows下面将已经push到远端的文件，改变其文件名的大小写时，git默认会认为文件没有发生任何改动，从而拒绝提交和推送，原因是其默认配置为大小写不敏感，故须在bash下修改配置： 1git config core.ignorecase false 4. git设置用户名12$ git config --global user.name \"name\"$ git config --global user.email xxx@163.com 这样可以为git所有的仓库设置用户名，如果想为指定仓库设置用户名或email: 12$ git config user.name \"name\"$ git config user.email \"myEmail.awesome.com\" 查看当前用户名或email12$ git config user.name $ git config user.email 5. 设置代理设置全局代理1git config --global http.proxy socks5://127.0.0.1:1080 对指定url设置代理123git config --global http.&lt;要设置代理的URL&gt;.proxy socks5://127.0.0.1:1080 git config --global http.https://github.com.proxy socks5://127.0.0.1:1080 6. 对上一次commit进行修改(在不添加新的commit的基础上)1git commit --amend 7. git revert和reset的区别 reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的. 即reset是通过一次反向的commit操作撤销之前的commit，而reset则会直接从提交历史里删除commit。如果还没有push，用reset可以在本地解决问题，之后重新commit再push。如果已经push，可以考虑通过一次revert来实现“撤销”的效果。 语法： reset123git reset --hard HEAD //本地仓库文件修改也会消失git reset --soft HEAD //本地文件修改不会消失，类似于回到git add 之前的状态git reset --hard HEAD~3 //最近的三次提交全部撤销 revert1git revert c011eb3c20ba6fb38cc94fe //之后在分支图上就能看到一个新的反向的commit，push即可。 8. 切分支, 删除分支本地新建分支1git checkout -b &lt;branchName&gt; 将这条分支与远程同步的方式123git branch --set-upstream &lt;laocalBranchName&gt; origin/&lt;RemoteBranchName&gt;// 或者git branch -u origin/dev 直接从远程仓库切一个分支出来并保持同步的方式123git checkout -b &lt;branchName&gt; origin/&lt;branchName&gt;git checkout --track origin/dev 删除远程分支:1git push origin --delete &lt;branchName&gt; 删除远程tag1git push origin --delete tag &lt;tagName&gt; 9. pull和rebase的区别pull = fetch +merge ，会生成新的提交 Merge好在它是一个安全的操作。现有的分支不会被更改，避免了rebase潜在的缺点 10. rebase和cherry-pickrebase不会生成新的提交，而且会使得项目提交历史呈现出完美的线性。但注意不要在公共的分支上使用 11. gitignore文件写法参考repo1234567891011121314151617# 忽略所有以 .c结尾的文件*.c# 但是 stream.c 会被git追踪!stream.c# 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO/TODO# 忽略所有在build文件夹下的文件build/# 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txtdoc/*.txt# 忽略所有在doc目录下的.pdf文件doc/**/*.pdf 12. git stash常用命令12345678910git stash //保存下来，压进一个栈，基本上就是先进后出了git stash pop //推出一个栈git stash save -a \"message to add\" // 添加一次stash，打上标记git stash list //展示当前仓库所有的被stash的变更以及对应的id，记得这个不是跟着branch走的git stash drop stah@&#123;id&#125; // 从stash的List中删除指定的某一次stashgit stash apply &lt;stash@&#123;id&#125;&gt; //应用某一次的stashgit stash clear// 一次性删除stash List中所有的item 13. 强推谨慎使用12# Be very careful with this command!git push --force Reference-git reset和revert-git recipes","tags":[{"name":"git","slug":"git","permalink":"https://haldir65.github.io/tags/git/"}]},{"title":"activity transition pre and post lollipop","date":"2016-09-27T06:53:25.000Z","path":"2016/09/27/activity-transition-pre-and-post-lollipop/","text":"Lollipop开始引入了新的Activity Transition动画效果，比起常用的overridePendingTransaction() 效果要强大许多 测试环境supportLibVersion = “24.2.1”gradle plugin version : “classpath ‘com.android.tools.build:gradle:2.2.0’”gradle version : 3.1compileSdkVersion 24buildToolsVersion “24.0.2” 常规用法: A activity &gt;&gt;&gt;&gt; B activity A activity中: 123456789101112intent = new Intent(getActivity(), PictureDetailSubActivity2.class); intent.putExtra(EXTRA_IMAGE_URL, R.drawable.b2); intent.putExtra(EXTRA_IMAGE_TITLE, \"使用ActivityCompat动画\"); ActivityOptionsCompat optionsCompat = ActivityOptionsCompat. makeSceneTransitionAnimation(getActivity(), view, TRANSIT_PIC); try &#123; ActivityCompat.startActivity(getActivity(), intent, optionsCompat.toBundle()); //据说部分三星手机上会失效 &#125; catch (Exception e) &#123; e.printStackTrace(); ToastUtils.showTextShort(getActivity(), \"ActivityCompat出错！！\"); startActivity(intent); &#125; Pair这个class是v4包里的一个Util类，用来装载一组(pair)对象，支持泛型，很好用。由于都是v4包里的方法，省去了做API版本判断，在API 16以下，就只会调用普通的startActivity方法。上面加了try catch是避免部分手机上出现问题 B activity中onCreate调用 1ViewCompat.setTransitionName(binding.imageDetail, TRANSIT_PIC); 就可实现普通的转场动画。 兼容方式(将连续的Transition带到API16以下) 主要的原理: 在A activity中记录要带到B activity中的View的当前位置，在B activity中添加onPredrawListener(measure完毕，layout完毕，即将开始Draw的时候)，此时开始进行动画，将SharedView从原位置animate到B Activty中的位置 原理及详细代码在这里: Dev Bytes Activity Animations Youtube 我照着写了一些关于Activity Transition的模板，gitHub 基本能实现兼容到API 16以下的效果 最后是这几天遇到的天坑 1234@Overridepublic void onCreate(Bundle savedInstanceState, PersistableBundle persistentState) &#123; super.onCreate(savedInstanceState, persistentState);&#125; 这样的Activity绝对会出ClassNotFoundException , 而且并不会主动出现在logcat中 overridePendingTransaction要在startActivity以及finish之后才能调用 gitHub上有一个比较好的兼容库，大致原理也是使用onPreDrawListener","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"transition","slug":"transition","permalink":"https://haldir65.github.io/tags/transition/"}]},{"title":"android使用selectableItemBackground的一些坑","date":"2016-09-23T11:56:39.000Z","path":"2016/09/23/selectableItemBackground-foreground/","text":"android:foreground=”?android:attr/selectableItemBackground” 或是 android:background=”?android:attr/selectableItemBackground” 这个xml属性最早是我学着写recyclerVeiw的item xml的时候接触到的，简单来说就是，在API 21及以上，用户点击这个itemView时候会出现一个Ripple效果非常好看，而在API 21以下则会表现为MonoChrome的类似按压色的效果 而这个点击时的水波纹颜色也是可以Customize的1&lt;item name=&quot;android:colorControlHighlight&quot;&gt;@color/my_ripple_color&lt;/item&gt; //这个要写在自己的Activity的Theme(style-v21)里，注意，当前Activity的Theme必须继承自Appcompat!!于是，我写了这样的xml1234567891011&lt;LinearLayout android:id=\"@+id/item_root\" android:layout_width=\"match_parent\" android:layout_height=\"?android:attr/listPreferredItemHeight\" android:orientation=\"vertical\" android:gravity=\"center\" android:onClick=\"@&#123;(view) -&gt; callback.onClick(view,data)&#125;\" android:elevation=\"2dp\" android:background=\"@color/md_amber_200\" android:foreground=\"?android:attr/selectableItemBackground\" /&gt; 然而，点击之后并没有出现水波纹(模拟器 API 21)，换成CardView或是将foreground改为background之后才有效。查了很多博客，最后得出结论:android:foreground在API 23之前只对FrameLayout有效(CardView继承自FrameLayout当然有效)。 ##所以正确的做法是 android:foreground=”?android:attr/selectableItemBackground” 改为 android:background=”?android:attr/selectableItemBackground” 或者使用FrameLayout。 关于foreground之前看google io2016时，Chris Banes给了这样的解释。,android:foreground在API 1 的FrameLayout中就有了，但直到API 23才将这个属性添加到View中。所以，换成API 23的手机上面那段代码foreground也是可以出现Ripple的,至于23之前为什么foreground无效，并不清楚为什么 首先是一种简单的模拟这种视觉效果的尝试：如何创建兼容的Forefround drawable selector 这篇文章提到了: 简单来讲，Foreground 定义了绘制于当前内容之上的 Drawable，类似一层覆盖物。所以我们可以为设置 Foreground 的值为 drawable或者color， 那如果将 Froeground 设置为 drawable selector，自然就可以为控件实现点击响应效果了。 比较奇怪的是在 sdk 23 以前，foregrond 属性只对 Framelayout 生效，但这个问题现在得到了解决，所以也请确保你的 compileSdkVersion 大于等于23 这篇文章的做法是针对21以下的版本使用slelector Drawable实现类似的效果 如何真正实现为API23之前的View,ViewGroup添加foreground?随后我找到了这篇博客，具体的逻辑并不太多。这里插一句，任何Drawable对象，在你调用setDrawable之后，该Drawable都会保留一个最后一个调用对象的callback Drawable-&gt;View-&gt;Context //leak!//所以Drawable也有可能导致Activity leak 随后我发现了更多有意思的讨论首先是Chris Banes在G+上的Post : Foreground Doge他给出了两种方案,Chris作为Google员工，给出的解决方案应该是比较官方的了 如果想利用FrameLayout的foreground特性来实现点击特效的话，完全可以在自己的xml外面再包裹一层FrameLayout 自己动手写一个实现foreground的Viewgroup , 代码 attrs:version=\"1.0\" encoding=\"utf-8\"?>1234567&lt;resources&gt; &lt;declare-styleable name=&quot;ForegroundLinearLayout&quot;&gt; &lt;attr name=&quot;android:foreground&quot; /&gt; &lt;attr name=&quot;android:foregroundInsidePadding&quot; /&gt; &lt;attr name=&quot;android:foregroundGravity&quot; /&gt; &lt;/declare-styleable&gt;&lt;/resources&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217/* * Copyright (C) 2006 The Android Open Source Project * * Licensed under the Apache License, Version 2.0 (the \"License\"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an \"AS IS\" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */ package your.package; import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Rect;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import android.view.Gravity;import android.widget.LinearLayout; import your.package.R; public class ForegroundLinearLayout extends LinearLayout &#123; private Drawable mForeground; private final Rect mSelfBounds = new Rect(); private final Rect mOverlayBounds = new Rect(); private int mForegroundGravity = Gravity.FILL; protected boolean mForegroundInPadding = true; boolean mForegroundBoundsChanged = false; public ForegroundLinearLayout(Context context) &#123; super(context); &#125; public ForegroundLinearLayout(Context context, AttributeSet attrs) &#123; this(context, attrs, 0); &#125; public ForegroundLinearLayout(Context context, AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundLinearLayout, defStyle, 0); mForegroundGravity = a.getInt( R.styleable.ForegroundLinearLayout_android_foregroundGravity, mForegroundGravity); final Drawable d = a.getDrawable(R.styleable.ForegroundLinearLayout_android_foreground); if (d != null) &#123; setForeground(d); &#125; mForegroundInPadding = a.getBoolean( R.styleable.ForegroundLinearLayout_android_foregroundInsidePadding, true); a.recycle(); &#125; /** * Describes how the foreground is positioned. * * @return foreground gravity. * * @see #setForegroundGravity(int) */ public int getForegroundGravity() &#123; return mForegroundGravity; &#125; /** * Describes how the foreground is positioned. Defaults to START and TOP. * * @param foregroundGravity See &#123;@link android.view.Gravity&#125; * * @see #getForegroundGravity() */ public void setForegroundGravity(int foregroundGravity) &#123; if (mForegroundGravity != foregroundGravity) &#123; if ((foregroundGravity &amp; Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) &#123; foregroundGravity |= Gravity.START; &#125; if ((foregroundGravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == 0) &#123; foregroundGravity |= Gravity.TOP; &#125; mForegroundGravity = foregroundGravity; if (mForegroundGravity == Gravity.FILL &amp;&amp; mForeground != null) &#123; Rect padding = new Rect(); mForeground.getPadding(padding); &#125; requestLayout(); &#125; &#125; @Override protected boolean verifyDrawable(Drawable who) &#123; return super.verifyDrawable(who) || (who == mForeground); &#125; @Override public void jumpDrawablesToCurrentState() &#123; super.jumpDrawablesToCurrentState(); if (mForeground != null) mForeground.jumpToCurrentState(); &#125; @Override protected void drawableStateChanged() &#123; super.drawableStateChanged(); if (mForeground != null &amp;&amp; mForeground.isStateful()) &#123; mForeground.setState(getDrawableState()); &#125; &#125; /** * Supply a Drawable that is to be rendered on top of all of the child * views in the frame layout. Any padding in the Drawable will be taken * into account by ensuring that the children are inset to be placed * inside of the padding area. * * @param drawable The Drawable to be drawn on top of the children. */ public void setForeground(Drawable drawable) &#123; if (mForeground != drawable) &#123; if (mForeground != null) &#123; mForeground.setCallback(null); unscheduleDrawable(mForeground); &#125; mForeground = drawable; if (drawable != null) &#123; setWillNotDraw(false); drawable.setCallback(this); if (drawable.isStateful()) &#123; drawable.setState(getDrawableState()); &#125; if (mForegroundGravity == Gravity.FILL) &#123; Rect padding = new Rect(); drawable.getPadding(padding); &#125; &#125; else &#123; setWillNotDraw(true); &#125; requestLayout(); invalidate(); &#125; &#125; /** * Returns the drawable used as the foreground of this FrameLayout. The * foreground drawable, if non-null, is always drawn on top of the children. * * @return A Drawable or null if no foreground was set. */ public Drawable getForeground() &#123; return mForeground; &#125; @Override protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123; super.onLayout(changed, left, top, right, bottom); mForegroundBoundsChanged = changed; &#125; @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; super.onSizeChanged(w, h, oldw, oldh); mForegroundBoundsChanged = true; &#125; @Override public void draw(Canvas canvas) &#123; super.draw(canvas); if (mForeground != null) &#123; final Drawable foreground = mForeground; if (mForegroundBoundsChanged) &#123; mForegroundBoundsChanged = false; final Rect selfBounds = mSelfBounds; final Rect overlayBounds = mOverlayBounds; final int w = getRight() - getLeft(); final int h = getBottom() - getTop(); if (mForegroundInPadding) &#123; selfBounds.set(0, 0, w, h); &#125; else &#123; selfBounds.set(getPaddingLeft(), getPaddingTop(), w - getPaddingRight(), h - getPaddingBottom()); &#125; Gravity.apply(mForegroundGravity, foreground.getIntrinsicWidth(), foreground.getIntrinsicHeight(), selfBounds, overlayBounds); foreground.setBounds(overlayBounds); &#125; foreground.draw(canvas); &#125; &#125; &#125; 使用方式 123456789101112&lt;your.package.ForegroundLinearLayout android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:foreground=\"?android:selectableItemBackground\"&gt; &lt;ImageView android:id=”@+id/imageview_opaque” android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" /&gt; ... other views .../&gt; 接着是Jack Wharton的ForegroundImageView attrs 123456&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;resources&gt; &lt;declare-styleable name=\"ForegroundImageView\"&gt; &lt;attr name=\"android:foreground\"/&gt; &lt;/declare-styleable&gt;&lt;/resources&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.drawable.Drawable;import android.util.AttributeSet;import android.widget.ImageView; public class ForegroundImageView extends ImageView &#123; private Drawable foreground; public ForegroundImageView(Context context) &#123; this(context, null); &#125; public ForegroundImageView(Context context, AttributeSet attrs) &#123; super(context, attrs); TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ForegroundImageView); Drawable foreground = a.getDrawable(R.styleable.ForegroundImageView_android_foreground); if (foreground != null) &#123; setForeground(foreground); &#125; a.recycle(); &#125; /** * Supply a drawable resource that is to be rendered on top of all of the child * views in the frame layout. * * @param drawableResId The drawable resource to be drawn on top of the children. */ public void setForegroundResource(int drawableResId) &#123; setForeground(getContext().getResources().getDrawable(drawableResId)); &#125; /** * Supply a Drawable that is to be rendered on top of all of the child * views in the frame layout. * * @param drawable The Drawable to be drawn on top of the children. */ public void setForeground(Drawable drawable) &#123; if (foreground == drawable) &#123; return; &#125; if (foreground != null) &#123; foreground.setCallback(null); unscheduleDrawable(foreground); &#125; foreground = drawable; if (drawable != null) &#123; drawable.setCallback(this); if (drawable.isStateful()) &#123; drawable.setState(getDrawableState()); &#125; &#125; requestLayout(); invalidate(); &#125; @Override protected boolean verifyDrawable(Drawable who) &#123; return super.verifyDrawable(who) || who == foreground; &#125; @Override public void jumpDrawablesToCurrentState() &#123; super.jumpDrawablesToCurrentState(); if (foreground != null) foreground.jumpToCurrentState(); &#125; @Override protected void drawableStateChanged() &#123; super.drawableStateChanged(); if (foreground != null &amp;&amp; foreground.isStateful()) &#123; foreground.setState(getDrawableState()); &#125; &#125; @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; super.onMeasure(widthMeasureSpec, heightMeasureSpec); if (foreground != null) &#123; foreground.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight()); invalidate(); &#125; &#125; @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; super.onSizeChanged(w, h, oldw, oldh); if (foreground != null) &#123; foreground.setBounds(0, 0, w, h); invalidate(); &#125; &#125; @Override public void draw(Canvas canvas) &#123; super.draw(canvas); if (foreground != null) &#123; foreground.draw(canvas); &#125; &#125; &#125; 最后，还有人给出据说更好的解决方案没有测试过，不了解 ##reference Android themes and styles demisfied 关于Theme和Style的区别的很好的学习资料 Chris Banes G+ post 评论很精彩 RelativeLayout with foreGround 没测试过 Ripple Effect 将Ripple的动画兼容到API 9+ ，很出色的一个库。之前项目中用过，就是一个继承自RelativeLayout的自定义ViewGroup。","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"foreground","slug":"foreground","permalink":"https://haldir65.github.io/tags/foreground/"}]},{"title":"replace butterKnife with databinding","date":"2016-09-22T07:17:39.000Z","path":"2016/09/22/replace-butterKnife-with-databinding/","text":"Yigit Boyar 在2015年的android Dev summit上介绍了Databinding，当时好像提到一句:“no binding libraries will be created from now on “，大意如此。本文介绍使用Databinding替代ButterKnife的用法 本文大部分代码来自网络，我只是觉得简单的代码直接复制粘贴可能会比较好。 1.在Activity中使用before123456789101112class ExampleActivity extends Activity &#123; @Bind(R.id.title) TextView title; @Bind(R.id.subtitle) TextView subtitle; @Bind(R.id.footer) TextView footer; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.simple_activity); ButterKnife.bind(this); &#125;&#125; after首先需要将xml文件添加 Layout tagR.layout.smple_activity1234567&lt;layout&gt; &lt;LinearLayout&gt; &lt;TextView android:id=\"@+id/title\"&gt; &lt;TextView android:id=\"@+id/subtitle\"&gt; &lt;TextView android:id=\"@+id/footer\"&gt; &lt;/LinearLayout&gt;&lt;/layout&gt; 1234567891011class ExampleActivity extends Activity &#123; private ActivitySampleBinding binding; @Override public void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); binding = DataBindingUtils.setContentView(this, R.layout.simple_activity); binding.title.setText(\"I am Title\"); //no more findViewById!!! &#125;&#125; 2.在Fragment中使用before1234567891011public class FancyFragment extends Fragment &#123; @Bind(R.id.button1) Button button1; @Bind(R.id.button2) Button button2; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; View view = inflater.inflate(R.layout.fancy_fragment, container, false); ButterKnife.bind(this, view); // TODO Use fields... return view; &#125;&#125; after12345678910public class FancyFragment extends Fragment &#123; private FragmentFancyBinding binding; @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123; binding = DataBindingUtil.inflate(inflater,R.layout.fragment_fancy, container, false);true return binding.getRoot(); &#125;&#125; 3.在ViewHolder中使用before1234567891011121314151617181920212223242526public class MyAdapter extends BaseAdapter &#123; @Override public View getView(int position, View view, ViewGroup parent) &#123; ViewHolder holder; if (view != null) &#123; holder = (ViewHolder) view.getTag(); &#125; else &#123; view = inflater.inflate(R.layout.list_item_sample, parent, false); holder = new ViewHolder(view); view.setTag(holder); &#125; holder.name.setText(\"John Doe\"); // etc... return view; &#125; static class ViewHolder &#123; @Bind(R.id.title) TextView name; @Bind(R.id.job_title) TextView jobTitle; public ViewHolder(View view) &#123; ButterKnife.bind(this, view); &#125; &#125;&#125; after ListView1234567891011121314151617public class MyAdapter extends BaseAdapter &#123; @Override public View getView(int position, View convertView, ViewGroup parent) &#123; ListItemSampleBinding binding; if (convertView == null) &#123; binding = DataBindingUtil.inflate(inflater, R.layout.list_item_sample, parent, false); convertView = binding.getRoot(); convertView.setTag(binding); &#125; else &#123; binding = (ListItemSampleBinding) convertView.getTag(); &#125; binding.setUser(getItem(position)); // binding.name.setText(\"John Doe\"); return convertView; &#125;&#125; recyclerView1234567891011121314151617181920212223242526public class SampleRecyclerAdapter extends RecyclerView.Adapter&lt;SampleRecyclerAdapter.BindingHolder&gt; &#123; @Override public RegisterableDeviceListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; final View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_sample, parent, false); return new BindingHolder(v); &#125; @Override public void onBindViewHolder(BindingHolder holder, int position) &#123; holder.getBinding().setVariable(BR.user, getItem(position)); &#125; static class BindingHolder extends RecyclerView.ViewHolder &#123; private final ViewDataBinding binding; public BindingHolder(View itemView) &#123; super(itemView); binding = DataBindingUtil.bind(itemView) &#125; public ViewDataBinding getBinding() &#123; return binding; &#125; &#125;&#125; 4.在CustomView中使用在自定义View(ViewGroup)的时候，可以用ButterKnife减少自定义ViewGroup中的findViewById,使用Databinding之后是这样的。1234567891011121314151617181920212223242526272829303132public class Pagination extends RelativeLayout &#123; private ViewPaginationBinding binding; public Pagination(Context context) &#123; this(context, null); &#125; public Pagination(Context context, AttributeSet attrs) &#123; super(context, attrs); binding = DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.view_pagination, this, true); &#125; public static void setListener(Pagination paginate, View target, OnPaginationClickListener listener) &#123; if (listener != null) &#123; target.setOnClickListener(_v -&gt; listener.onClick(paginate)); &#125; &#125; @BindingAdapter(&#123;\"android:onPrevButtonClicked\"&#125;) public static void setPrevClickListener(Pagination view, OnPaginationClickListener listener) &#123; setListener(view, view.binding.btnPrevPage, listener); &#125; @BindingAdapter(&#123;\"android:onNextButtonClicked\"&#125;) public static void setNextClickListener(Pagination view, OnPaginationClickListener listener) &#123; setListener(view, view.binding.btnNextPage, listener); &#125; public interface OnPaginationClickListener &#123; void onClick(Pagination pagination); &#125;&#125; 5.EventHandler, setDefaultComponent…Databinding还有很多高级用法，目前给我带来的好处就是明显减少了boilerplate code So ,感谢ButterKnife给我们带来的便利，Googbye ButterKnife，Hello DataBinding! Reference Data Binding Library data-binding-android-boyar-mount Advanced Data Bindinding Two-Way Data Binding at google io 2016 Android Dev Summit 2015 Goodbye Butter Knife Google Sample","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"},{"name":"databinding","slug":"databinding","permalink":"https://haldir65.github.io/tags/databinding/"},{"name":"Butterknife","slug":"Butterknife","permalink":"https://haldir65.github.io/tags/Butterknife/"}]},{"title":"android内部类导致leak模板","date":"2016-09-18T02:23:42.000Z","path":"2016/09/18/android-inner-class-leak/","text":"通常我们在一个class里面写内部类时，不是一定要用static声明为静态类，但是推荐作为内部静态类，因为内部类会隐式持有外部类的引用，有些时候如果代码处理不对容易造成内存泄漏下面就是个内存泄漏的例子12345678910111213141516171819202122232425262728public class MainActivity extends Activity &#123;truepublic class MyHandler extends Handler&#123;true@Overridetruepublic void handleMessage(Message msg) &#123;truetrueif(msg.what==1)&#123;truetruetruenew Thread()&#123;truetruetruetrue@Overridetruetruetruetruepublic void run() &#123;truetruetruetruetruewhile(true)&#123;truetruetruetruetruetrue//do somethingtruetruetruetruetrue&#125;truetruetruetrue&#125;truetruetrue&#125;.start();truetrue&#125;true&#125;true&#125;truepublic MyHandler handler;true@Overridetrueprotected void onCreate(Bundle savedInstanceState) &#123;truetruesuper.onCreate(savedInstanceState);truetruesetContentView(R.layout.activity_main);truetruetruetrue//...truetruehandler.sendEmptyMessage(1);truetruefinish();true &#125;&#125; 如上面代码所示，在onCreate方法里发送了一条消息给handler处理然后finish方法关闭activity，但是代码并不能如愿，因为在handler收到消息启动了一个线程并且是死循环，这时候Thread持有handler的引用，而handler又持有activity的引用，这就导致了handler不能回收和activty也不能回收，所以推荐使用静态内部类，因为静态内部类不持有外部类的引用，可以避免这些不必要的麻烦。 除此之外，在Activity里面创建一个AsyncTask的子类也容易导致leak例如 stackoverFlow上的这个问题 对于这类问题的比较常用的方式:WeakReference例如,写这样一个的静态内部类 private static class IncomingHandler extends Handler { private final WeakReference&lt;MessagingService&gt; mReference; IncomingHandler(MessagingService service) { mReference = new WeakReference&lt;&gt;(service); } @Override public void handleMessage(Message msg) { MessagingService service = mReference.get(); switch (msg.what) { case MSG_SEND_NOTIFICATION: int howManyConversations = msg.arg1 &lt;= 0 ? 1 : msg.arg1; int messagesPerConversation = msg.arg2 &lt;= 0 ? 1 : msg.arg2; if (service != null) { service.sendNotification(howManyConversations, messagesPerConversation); } break; default: super.handleMessage(msg); } } } //handler通过弱引用持有service对象，外加static内部类不持有外部类引用，应该不会leak了","tags":[{"name":"android","slug":"android","permalink":"https://haldir65.github.io/tags/android/"}]},{"title":"Hello World","date":"2016-09-18T00:44:19.677Z","path":"2016/09/18/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]